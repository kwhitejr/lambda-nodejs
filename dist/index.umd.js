(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('util'), require('os'), require('stream'), require('buffer'), require('events'), require('fs'), require('path'), require('zlib'), require('tty'), require('string_decoder'), require('http'), require('https'), require('net'), require('url'), require('punycode'), require('crypto'), require('querystring'), require('assert'), require('tls'), require('domain'), require('constants'), require('v8'), require('dgram'), require('dns'), require('async_hooks'), require('async-hook'), require('timers'), require('module'), require('graphql/language/visitor'), require('graphql/language/printer'), require('graphql/utilities'), require('bufferutil'), require('utf-8-validate')) :
	typeof define === 'function' && define.amd ? define(['util', 'os', 'stream', 'buffer', 'events', 'fs', 'path', 'zlib', 'tty', 'string_decoder', 'http', 'https', 'net', 'url', 'punycode', 'crypto', 'querystring', 'assert', 'tls', 'domain', 'constants', 'v8', 'dgram', 'dns', 'async_hooks', 'async-hook', 'timers', 'module', 'graphql/language/visitor', 'graphql/language/printer', 'graphql/utilities', 'bufferutil', 'utf-8-validate'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.bundle = factory(global.util$7, global.os$2, global.require$$0$8, global.buffer$2, global.EventEmitter$1, global.fs$2, global.path$2, global.zlib$2, global.require$$0$9, global.require$$0$a, global.http$4, global.https$2, global.net$3, global.url$2, global.Punycode, global.crypto$3, global.querystring$3, global.assert$2, global.tls$2, global.require$$0$b, global.constants$7, global.v8$2, global.dgram$2, global.require$$0$c, global.require$$0$d, global.require$$0$e, global.timers$2, global.Module, global.visitor_1, global.printer_1, global.utilities_1, global.require$$1$4, global.require$$0$f));
}(this, (function (util$7, os$2, require$$0$8, buffer$2, EventEmitter$1, fs$2, path$2, zlib$2, require$$0$9, require$$0$a, http$4, https$2, net$3, url$2, Punycode, crypto$3, querystring$3, assert$2, tls$2, require$$0$b, constants$7, v8$2, dgram$2, require$$0$c, require$$0$d, require$$0$e, timers$2, Module, visitor_1, printer_1, utilities_1, require$$1$4, require$$0$f) { 'use strict';

	function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

	var util__default = /*#__PURE__*/_interopDefaultLegacy(util$7);
	var os__default = /*#__PURE__*/_interopDefaultLegacy(os$2);
	var require$$0__default = /*#__PURE__*/_interopDefaultLegacy(require$$0$8);
	var buffer__default = /*#__PURE__*/_interopDefaultLegacy(buffer$2);
	var EventEmitter__default = /*#__PURE__*/_interopDefaultLegacy(EventEmitter$1);
	var fs__default = /*#__PURE__*/_interopDefaultLegacy(fs$2);
	var path__default = /*#__PURE__*/_interopDefaultLegacy(path$2);
	var zlib__default = /*#__PURE__*/_interopDefaultLegacy(zlib$2);
	var require$$0__default$1 = /*#__PURE__*/_interopDefaultLegacy(require$$0$9);
	var require$$0__default$2 = /*#__PURE__*/_interopDefaultLegacy(require$$0$a);
	var http__default = /*#__PURE__*/_interopDefaultLegacy(http$4);
	var https__default = /*#__PURE__*/_interopDefaultLegacy(https$2);
	var net__default = /*#__PURE__*/_interopDefaultLegacy(net$3);
	var url__default = /*#__PURE__*/_interopDefaultLegacy(url$2);
	var Punycode__default = /*#__PURE__*/_interopDefaultLegacy(Punycode);
	var crypto__default = /*#__PURE__*/_interopDefaultLegacy(crypto$3);
	var querystring__default = /*#__PURE__*/_interopDefaultLegacy(querystring$3);
	var assert__default = /*#__PURE__*/_interopDefaultLegacy(assert$2);
	var tls__default = /*#__PURE__*/_interopDefaultLegacy(tls$2);
	var require$$0__default$3 = /*#__PURE__*/_interopDefaultLegacy(require$$0$b);
	var constants__default = /*#__PURE__*/_interopDefaultLegacy(constants$7);
	var v8__default = /*#__PURE__*/_interopDefaultLegacy(v8$2);
	var dgram__default = /*#__PURE__*/_interopDefaultLegacy(dgram$2);
	var require$$0__default$4 = /*#__PURE__*/_interopDefaultLegacy(require$$0$c);
	var require$$0__default$5 = /*#__PURE__*/_interopDefaultLegacy(require$$0$d);
	var require$$0__default$6 = /*#__PURE__*/_interopDefaultLegacy(require$$0$e);
	var timers__default = /*#__PURE__*/_interopDefaultLegacy(timers$2);
	var Module__default = /*#__PURE__*/_interopDefaultLegacy(Module);
	var visitor_1__default = /*#__PURE__*/_interopDefaultLegacy(visitor_1);
	var printer_1__default = /*#__PURE__*/_interopDefaultLegacy(printer_1);
	var utilities_1__default = /*#__PURE__*/_interopDefaultLegacy(utilities_1);
	var require$$1__default = /*#__PURE__*/_interopDefaultLegacy(require$$1$4);
	var require$$0__default$7 = /*#__PURE__*/_interopDefaultLegacy(require$$0$f);

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function getAugmentedNamespace(n) {
		if (n.__esModule) return n;
		var a = Object.defineProperty({}, '__esModule', {value: true});
		Object.keys(n).forEach(function (k) {
			var d = Object.getOwnPropertyDescriptor(n, k);
			Object.defineProperty(a, k, d.get ? d : {
				enumerable: true,
				get: function () {
					return n[k];
				}
			});
		});
		return a;
	}

	function createCommonjsModule(fn) {
	  var module = { exports: {} };
		return fn(module, module.exports), module.exports;
	}

	function commonjsRequire (target) {
		throw new Error('Could not dynamically require "' + target + '". Please configure the dynamicRequireTargets option of @rollup/plugin-commonjs appropriately for this require call to behave properly.');
	}

	/*
	 * Displays a helpful message and the source of
	 * the format when it is invalid.
	 */
	class InvalidFormatError extends Error {
	  constructor(formatFn) {
	    super(`Format functions must be synchronous taking a two arguments: (info, opts)
Found: ${formatFn.toString().split('\n')[0]}\n`);

	    Error.captureStackTrace(this, InvalidFormatError);
	  }
	}

	/*
	 * function format (formatFn)
	 * Returns a create function for the `formatFn`.
	 */
	var format$7 = formatFn => {
	  if (formatFn.length > 2) {
	    throw new InvalidFormatError(formatFn);
	  }

	  /*
	   * function Format (options)
	   * Base prototype which calls a `_format`
	   * function and pushes the result.
	   */
	  function Format(options = {}) {
	    this.options = options;
	  }

	  Format.prototype.transform = formatFn;

	  //
	  // Create a function which returns new instances of
	  // FormatWrap for simple syntax like:
	  //
	  // require('winston').formats.json();
	  //
	  function createFormatWrap(opts) {
	    return new Format(opts);
	  }

	  //
	  // Expose the FormatWrap through the create function
	  // for testability.
	  //
	  createFormatWrap.Format = Format;
	  return createFormatWrap;
	};

	/*
	The MIT License (MIT)

	Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.

	*/

	var styles_1 = createCommonjsModule(function (module) {
	var styles = {};
	module['exports'] = styles;

	var codes = {
	  reset: [0, 0],

	  bold: [1, 22],
	  dim: [2, 22],
	  italic: [3, 23],
	  underline: [4, 24],
	  inverse: [7, 27],
	  hidden: [8, 28],
	  strikethrough: [9, 29],

	  black: [30, 39],
	  red: [31, 39],
	  green: [32, 39],
	  yellow: [33, 39],
	  blue: [34, 39],
	  magenta: [35, 39],
	  cyan: [36, 39],
	  white: [37, 39],
	  gray: [90, 39],
	  grey: [90, 39],

	  brightRed: [91, 39],
	  brightGreen: [92, 39],
	  brightYellow: [93, 39],
	  brightBlue: [94, 39],
	  brightMagenta: [95, 39],
	  brightCyan: [96, 39],
	  brightWhite: [97, 39],

	  bgBlack: [40, 49],
	  bgRed: [41, 49],
	  bgGreen: [42, 49],
	  bgYellow: [43, 49],
	  bgBlue: [44, 49],
	  bgMagenta: [45, 49],
	  bgCyan: [46, 49],
	  bgWhite: [47, 49],
	  bgGray: [100, 49],
	  bgGrey: [100, 49],

	  bgBrightRed: [101, 49],
	  bgBrightGreen: [102, 49],
	  bgBrightYellow: [103, 49],
	  bgBrightBlue: [104, 49],
	  bgBrightMagenta: [105, 49],
	  bgBrightCyan: [106, 49],
	  bgBrightWhite: [107, 49],

	  // legacy styles for colors pre v1.0.0
	  blackBG: [40, 49],
	  redBG: [41, 49],
	  greenBG: [42, 49],
	  yellowBG: [43, 49],
	  blueBG: [44, 49],
	  magentaBG: [45, 49],
	  cyanBG: [46, 49],
	  whiteBG: [47, 49],

	};

	Object.keys(codes).forEach(function(key) {
	  var val = codes[key];
	  var style = styles[key] = [];
	  style.open = '\u001b[' + val[0] + 'm';
	  style.close = '\u001b[' + val[1] + 'm';
	});
	});

	/*
	MIT License

	Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)

	Permission is hereby granted, free of charge, to any person obtaining a copy of
	this software and associated documentation files (the "Software"), to deal in
	the Software without restriction, including without limitation the rights to
	use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
	of the Software, and to permit persons to whom the Software is furnished to do
	so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
	*/

	var hasFlag = function(flag, argv) {
	  argv = argv || process.argv;

	  var terminatorPos = argv.indexOf('--');
	  var prefix = /^-{1,2}/.test(flag) ? '' : '--';
	  var pos = argv.indexOf(prefix + flag);

	  return pos !== -1 && (terminatorPos === -1 ? true : pos < terminatorPos);
	};

	/*
	The MIT License (MIT)

	Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.

	*/




	var env$1 = process.env;

	var forceColor = void 0;
	if (hasFlag('no-color') || hasFlag('no-colors') || hasFlag('color=false')) {
	  forceColor = false;
	} else if (hasFlag('color') || hasFlag('colors') || hasFlag('color=true')
	           || hasFlag('color=always')) {
	  forceColor = true;
	}
	if ('FORCE_COLOR' in env$1) {
	  forceColor = env$1.FORCE_COLOR.length === 0
	    || parseInt(env$1.FORCE_COLOR, 10) !== 0;
	}

	function translateLevel(level) {
	  if (level === 0) {
	    return false;
	  }

	  return {
	    level: level,
	    hasBasic: true,
	    has256: level >= 2,
	    has16m: level >= 3,
	  };
	}

	function supportsColor(stream) {
	  if (forceColor === false) {
	    return 0;
	  }

	  if (hasFlag('color=16m') || hasFlag('color=full')
	      || hasFlag('color=truecolor')) {
	    return 3;
	  }

	  if (hasFlag('color=256')) {
	    return 2;
	  }

	  if (stream && !stream.isTTY && forceColor !== true) {
	    return 0;
	  }

	  var min = forceColor ? 1 : 0;

	  if (process.platform === 'win32') {
	    // Node.js 7.5.0 is the first version of Node.js to include a patch to
	    // libuv that enables 256 color output on Windows. Anything earlier and it
	    // won't work. However, here we target Node.js 8 at minimum as it is an LTS
	    // release, and Node.js 7 is not. Windows 10 build 10586 is the first
	    // Windows release that supports 256 colors. Windows 10 build 14931 is the
	    // first release that supports 16m/TrueColor.
	    var osRelease = os__default['default'].release().split('.');
	    if (Number(process.versions.node.split('.')[0]) >= 8
	        && Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
	      return Number(osRelease[2]) >= 14931 ? 3 : 2;
	    }

	    return 1;
	  }

	  if ('CI' in env$1) {
	    if (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI'].some(function(sign) {
	      return sign in env$1;
	    }) || env$1.CI_NAME === 'codeship') {
	      return 1;
	    }

	    return min;
	  }

	  if ('TEAMCITY_VERSION' in env$1) {
	    return (/^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env$1.TEAMCITY_VERSION) ? 1 : 0
	    );
	  }

	  if ('TERM_PROGRAM' in env$1) {
	    var version = parseInt((env$1.TERM_PROGRAM_VERSION || '').split('.')[0], 10);

	    switch (env$1.TERM_PROGRAM) {
	      case 'iTerm.app':
	        return version >= 3 ? 3 : 2;
	      case 'Hyper':
	        return 3;
	      case 'Apple_Terminal':
	        return 2;
	      // No default
	    }
	  }

	  if (/-256(color)?$/i.test(env$1.TERM)) {
	    return 2;
	  }

	  if (/^screen|^xterm|^vt100|^rxvt|color|ansi|cygwin|linux/i.test(env$1.TERM)) {
	    return 1;
	  }

	  if ('COLORTERM' in env$1) {
	    return 1;
	  }

	  if (env$1.TERM === 'dumb') {
	    return min;
	  }

	  return min;
	}

	function getSupportLevel(stream) {
	  var level = supportsColor(stream);
	  return translateLevel(level);
	}

	var supportsColors = {
	  supportsColor: getSupportLevel,
	  stdout: getSupportLevel(process.stdout),
	  stderr: getSupportLevel(process.stderr),
	};

	var trap = createCommonjsModule(function (module) {
	module['exports'] = function runTheTrap(text, options) {
	  var result = '';
	  text = text || 'Run the trap, drop the bass';
	  text = text.split('');
	  var trap = {
	    a: ['\u0040', '\u0104', '\u023a', '\u0245', '\u0394', '\u039b', '\u0414'],
	    b: ['\u00df', '\u0181', '\u0243', '\u026e', '\u03b2', '\u0e3f'],
	    c: ['\u00a9', '\u023b', '\u03fe'],
	    d: ['\u00d0', '\u018a', '\u0500', '\u0501', '\u0502', '\u0503'],
	    e: ['\u00cb', '\u0115', '\u018e', '\u0258', '\u03a3', '\u03be', '\u04bc',
	      '\u0a6c'],
	    f: ['\u04fa'],
	    g: ['\u0262'],
	    h: ['\u0126', '\u0195', '\u04a2', '\u04ba', '\u04c7', '\u050a'],
	    i: ['\u0f0f'],
	    j: ['\u0134'],
	    k: ['\u0138', '\u04a0', '\u04c3', '\u051e'],
	    l: ['\u0139'],
	    m: ['\u028d', '\u04cd', '\u04ce', '\u0520', '\u0521', '\u0d69'],
	    n: ['\u00d1', '\u014b', '\u019d', '\u0376', '\u03a0', '\u048a'],
	    o: ['\u00d8', '\u00f5', '\u00f8', '\u01fe', '\u0298', '\u047a', '\u05dd',
	      '\u06dd', '\u0e4f'],
	    p: ['\u01f7', '\u048e'],
	    q: ['\u09cd'],
	    r: ['\u00ae', '\u01a6', '\u0210', '\u024c', '\u0280', '\u042f'],
	    s: ['\u00a7', '\u03de', '\u03df', '\u03e8'],
	    t: ['\u0141', '\u0166', '\u0373'],
	    u: ['\u01b1', '\u054d'],
	    v: ['\u05d8'],
	    w: ['\u0428', '\u0460', '\u047c', '\u0d70'],
	    x: ['\u04b2', '\u04fe', '\u04fc', '\u04fd'],
	    y: ['\u00a5', '\u04b0', '\u04cb'],
	    z: ['\u01b5', '\u0240'],
	  };
	  text.forEach(function(c) {
	    c = c.toLowerCase();
	    var chars = trap[c] || [' '];
	    var rand = Math.floor(Math.random() * chars.length);
	    if (typeof trap[c] !== 'undefined') {
	      result += trap[c][rand];
	    } else {
	      result += c;
	    }
	  });
	  return result;
	};
	});

	var zalgo = createCommonjsModule(function (module) {
	// please no
	module['exports'] = function zalgo(text, options) {
	  text = text || '   he is here   ';
	  var soul = {
	    'up': [
	      '̍', '̎', '̄', '̅',
	      '̿', '̑', '̆', '̐',
	      '͒', '͗', '͑', '̇',
	      '̈', '̊', '͂', '̓',
	      '̈', '͊', '͋', '͌',
	      '̃', '̂', '̌', '͐',
	      '̀', '́', '̋', '̏',
	      '̒', '̓', '̔', '̽',
	      '̉', 'ͣ', 'ͤ', 'ͥ',
	      'ͦ', 'ͧ', 'ͨ', 'ͩ',
	      'ͪ', 'ͫ', 'ͬ', 'ͭ',
	      'ͮ', 'ͯ', '̾', '͛',
	      '͆', '̚',
	    ],
	    'down': [
	      '̖', '̗', '̘', '̙',
	      '̜', '̝', '̞', '̟',
	      '̠', '̤', '̥', '̦',
	      '̩', '̪', '̫', '̬',
	      '̭', '̮', '̯', '̰',
	      '̱', '̲', '̳', '̹',
	      '̺', '̻', '̼', 'ͅ',
	      '͇', '͈', '͉', '͍',
	      '͎', '͓', '͔', '͕',
	      '͖', '͙', '͚', '̣',
	    ],
	    'mid': [
	      '̕', '̛', '̀', '́',
	      '͘', '̡', '̢', '̧',
	      '̨', '̴', '̵', '̶',
	      '͜', '͝', '͞',
	      '͟', '͠', '͢', '̸',
	      '̷', '͡', ' ҉',
	    ],
	  };
	  var all = [].concat(soul.up, soul.down, soul.mid);

	  function randomNumber(range) {
	    var r = Math.floor(Math.random() * range);
	    return r;
	  }

	  function isChar(character) {
	    var bool = false;
	    all.filter(function(i) {
	      bool = (i === character);
	    });
	    return bool;
	  }


	  function heComes(text, options) {
	    var result = '';
	    var counts;
	    var l;
	    options = options || {};
	    options['up'] =
	      typeof options['up'] !== 'undefined' ? options['up'] : true;
	    options['mid'] =
	      typeof options['mid'] !== 'undefined' ? options['mid'] : true;
	    options['down'] =
	      typeof options['down'] !== 'undefined' ? options['down'] : true;
	    options['size'] =
	      typeof options['size'] !== 'undefined' ? options['size'] : 'maxi';
	    text = text.split('');
	    for (l in text) {
	      if (isChar(l)) {
	        continue;
	      }
	      result = result + text[l];
	      counts = {'up': 0, 'down': 0, 'mid': 0};
	      switch (options.size) {
	        case 'mini':
	          counts.up = randomNumber(8);
	          counts.mid = randomNumber(2);
	          counts.down = randomNumber(8);
	          break;
	        case 'maxi':
	          counts.up = randomNumber(16) + 3;
	          counts.mid = randomNumber(4) + 1;
	          counts.down = randomNumber(64) + 3;
	          break;
	        default:
	          counts.up = randomNumber(8) + 1;
	          counts.mid = randomNumber(6) / 2;
	          counts.down = randomNumber(8) + 1;
	          break;
	      }

	      var arr = ['up', 'mid', 'down'];
	      for (var d in arr) {
	        var index = arr[d];
	        for (var i = 0; i <= counts[index]; i++) {
	          if (options[index]) {
	            result = result + soul[index][randomNumber(soul[index].length)];
	          }
	        }
	      }
	    }
	    return result;
	  }
	  // don't summon him
	  return heComes(text, options);
	};
	});

	var america = createCommonjsModule(function (module) {
	module['exports'] = function(colors) {
	  return function(letter, i, exploded) {
	    if (letter === ' ') return letter;
	    switch (i%3) {
	      case 0: return colors.red(letter);
	      case 1: return colors.white(letter);
	      case 2: return colors.blue(letter);
	    }
	  };
	};
	});

	var zebra = createCommonjsModule(function (module) {
	module['exports'] = function(colors) {
	  return function(letter, i, exploded) {
	    return i % 2 === 0 ? letter : colors.inverse(letter);
	  };
	};
	});

	var rainbow = createCommonjsModule(function (module) {
	module['exports'] = function(colors) {
	  // RoY G BiV
	  var rainbowColors = ['red', 'yellow', 'green', 'blue', 'magenta'];
	  return function(letter, i, exploded) {
	    if (letter === ' ') {
	      return letter;
	    } else {
	      return colors[rainbowColors[i++ % rainbowColors.length]](letter);
	    }
	  };
	};
	});

	var random = createCommonjsModule(function (module) {
	module['exports'] = function(colors) {
	  var available = ['underline', 'inverse', 'grey', 'yellow', 'red', 'green',
	    'blue', 'white', 'cyan', 'magenta', 'brightYellow', 'brightRed',
	    'brightGreen', 'brightBlue', 'brightWhite', 'brightCyan', 'brightMagenta'];
	  return function(letter, i, exploded) {
	    return letter === ' ' ? letter :
	      colors[
	          available[Math.round(Math.random() * (available.length - 2))]
	      ](letter);
	  };
	};
	});

	/*

	The MIT License (MIT)

	Original Library
	  - Copyright (c) Marak Squires

	Additional functionality
	 - Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.

	*/

	var colors_1 = createCommonjsModule(function (module) {
	var colors = {};
	module['exports'] = colors;

	colors.themes = {};


	var ansiStyles = colors.styles = styles_1;
	var defineProps = Object.defineProperties;
	var newLineRegex = new RegExp(/[\r\n]+/g);

	colors.supportsColor = supportsColors.supportsColor;

	if (typeof colors.enabled === 'undefined') {
	  colors.enabled = colors.supportsColor() !== false;
	}

	colors.enable = function() {
	  colors.enabled = true;
	};

	colors.disable = function() {
	  colors.enabled = false;
	};

	colors.stripColors = colors.strip = function(str) {
	  return ('' + str).replace(/\x1B\[\d+m/g, '');
	};

	// eslint-disable-next-line no-unused-vars
	colors.stylize = function stylize(str, style) {
	  if (!colors.enabled) {
	    return str+'';
	  }

	  var styleMap = ansiStyles[style];

	  // Stylize should work for non-ANSI styles, too
	  if(!styleMap && style in colors){
	    // Style maps like trap operate as functions on strings;
	    // they don't have properties like open or close.
	    return colors[style](str);
	  }

	  return styleMap.open + str + styleMap.close;
	};

	var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;
	var escapeStringRegexp = function(str) {
	  if (typeof str !== 'string') {
	    throw new TypeError('Expected a string');
	  }
	  return str.replace(matchOperatorsRe, '\\$&');
	};

	function build(_styles) {
	  var builder = function builder() {
	    return applyStyle.apply(builder, arguments);
	  };
	  builder._styles = _styles;
	  // __proto__ is used because we must return a function, but there is
	  // no way to create a function with a different prototype.
	  builder.__proto__ = proto;
	  return builder;
	}

	var styles = (function() {
	  var ret = {};
	  ansiStyles.grey = ansiStyles.gray;
	  Object.keys(ansiStyles).forEach(function(key) {
	    ansiStyles[key].closeRe =
	      new RegExp(escapeStringRegexp(ansiStyles[key].close), 'g');
	    ret[key] = {
	      get: function() {
	        return build(this._styles.concat(key));
	      },
	    };
	  });
	  return ret;
	})();

	var proto = defineProps(function colors() {}, styles);

	function applyStyle() {
	  var args = Array.prototype.slice.call(arguments);

	  var str = args.map(function(arg) {
	    // Use weak equality check so we can colorize null/undefined in safe mode
	    if (arg != null && arg.constructor === String) {
	      return arg;
	    } else {
	      return util__default['default'].inspect(arg);
	    }
	  }).join(' ');

	  if (!colors.enabled || !str) {
	    return str;
	  }

	  var newLinesPresent = str.indexOf('\n') != -1;

	  var nestedStyles = this._styles;

	  var i = nestedStyles.length;
	  while (i--) {
	    var code = ansiStyles[nestedStyles[i]];
	    str = code.open + str.replace(code.closeRe, code.open) + code.close;
	    if (newLinesPresent) {
	      str = str.replace(newLineRegex, function(match) {
	        return code.close + match + code.open;
	      });
	    }
	  }

	  return str;
	}

	colors.setTheme = function(theme) {
	  if (typeof theme === 'string') {
	    console.log('colors.setTheme now only accepts an object, not a string.  ' +
	      'If you are trying to set a theme from a file, it is now your (the ' +
	      'caller\'s) responsibility to require the file.  The old syntax ' +
	      'looked like colors.setTheme(__dirname + ' +
	      '\'/../themes/generic-logging.js\'); The new syntax looks like '+
	      'colors.setTheme(require(__dirname + ' +
	      '\'/../themes/generic-logging.js\'));');
	    return;
	  }
	  for (var style in theme) {
	    (function(style) {
	      colors[style] = function(str) {
	        if (typeof theme[style] === 'object') {
	          var out = str;
	          for (var i in theme[style]) {
	            out = colors[theme[style][i]](out);
	          }
	          return out;
	        }
	        return colors[theme[style]](str);
	      };
	    })(style);
	  }
	};

	function init() {
	  var ret = {};
	  Object.keys(styles).forEach(function(name) {
	    ret[name] = {
	      get: function() {
	        return build([name]);
	      },
	    };
	  });
	  return ret;
	}

	var sequencer = function sequencer(map, str) {
	  var exploded = str.split('');
	  exploded = exploded.map(map);
	  return exploded.join('');
	};

	// custom formatter methods
	colors.trap = trap;
	colors.zalgo = zalgo;

	// maps
	colors.maps = {};
	colors.maps.america = america(colors);
	colors.maps.zebra = zebra(colors);
	colors.maps.rainbow = rainbow(colors);
	colors.maps.random = random(colors);

	for (var map in colors.maps) {
	  (function(map) {
	    colors[map] = function(str) {
	      return sequencer(colors.maps[map], str);
	    };
	  })(map);
	}

	defineProps(colors, init());
	});

	var safe = createCommonjsModule(function (module) {
	//
	// Remark: Requiring this file will use the "safe" colors API,
	// which will not touch String.prototype.
	//
	//   var colors = require('colors/safe');
	//   colors.red("foo")
	//
	//

	module['exports'] = colors_1;
	});

	/**
	 * cli.js: Config that conform to commonly used CLI logging levels.
	 *
	 * (C) 2010 Charlie Robbins
	 * MIT LICENCE
	 */

	/**
	 * Default levels for the CLI configuration.
	 * @type {Object}
	 */
	var levels$3 = {
	  error: 0,
	  warn: 1,
	  help: 2,
	  data: 3,
	  info: 4,
	  debug: 5,
	  prompt: 6,
	  verbose: 7,
	  input: 8,
	  silly: 9
	};

	/**
	 * Default colors for the CLI configuration.
	 * @type {Object}
	 */
	var colors$2 = {
	  error: 'red',
	  warn: 'yellow',
	  help: 'cyan',
	  data: 'grey',
	  info: 'green',
	  debug: 'blue',
	  prompt: 'grey',
	  verbose: 'cyan',
	  input: 'grey',
	  silly: 'magenta'
	};

	var cli$1 = {
		levels: levels$3,
		colors: colors$2
	};

	/**
	 * npm.js: Config that conform to npm logging levels.
	 *
	 * (C) 2010 Charlie Robbins
	 * MIT LICENCE
	 */

	/**
	 * Default levels for the npm configuration.
	 * @type {Object}
	 */
	var levels$2 = {
	  error: 0,
	  warn: 1,
	  info: 2,
	  http: 3,
	  verbose: 4,
	  debug: 5,
	  silly: 6
	};

	/**
	 * Default levels for the npm configuration.
	 * @type {Object}
	 */
	var colors$1 = {
	  error: 'red',
	  warn: 'yellow',
	  info: 'green',
	  http: 'green',
	  verbose: 'cyan',
	  debug: 'blue',
	  silly: 'magenta'
	};

	var npm$1 = {
		levels: levels$2,
		colors: colors$1
	};

	/**
	 * syslog.js: Config that conform to syslog logging levels.
	 *
	 * (C) 2010 Charlie Robbins
	 * MIT LICENCE
	 */

	/**
	 * Default levels for the syslog configuration.
	 * @type {Object}
	 */
	var levels$1 = {
	  emerg: 0,
	  alert: 1,
	  crit: 2,
	  error: 3,
	  warning: 4,
	  notice: 5,
	  info: 6,
	  debug: 7
	};

	/**
	 * Default levels for the syslog configuration.
	 * @type {Object}
	 */
	var colors = {
	  emerg: 'red',
	  alert: 'yellow',
	  crit: 'red',
	  error: 'red',
	  warning: 'red',
	  notice: 'yellow',
	  info: 'green',
	  debug: 'blue'
	};

	var syslog$1 = {
		levels: levels$1,
		colors: colors
	};

	/**
	 * index.js: Default settings for all levels that winston knows about.
	 *
	 * (C) 2010 Charlie Robbins
	 * MIT LICENCE
	 */

	var config$2 = createCommonjsModule(function (module, exports) {

	/**
	 * Export config set for the CLI.
	 * @type {Object}
	 */
	Object.defineProperty(exports, 'cli', {
	  value: cli$1
	});

	/**
	 * Export config set for npm.
	 * @type {Object}
	 */
	Object.defineProperty(exports, 'npm', {
	  value: npm$1
	});

	/**
	 * Export config set for the syslog.
	 * @type {Object}
	 */
	Object.defineProperty(exports, 'syslog', {
	  value: syslog$1
	});
	});

	var tripleBeam = createCommonjsModule(function (module, exports) {

	/**
	 * A shareable symbol constant that can be used
	 * as a non-enumerable / semi-hidden level identifier
	 * to allow the readable level property to be mutable for
	 * operations like colorization
	 *
	 * @type {Symbol}
	 */
	Object.defineProperty(exports, 'LEVEL', {
	  value: Symbol.for('level')
	});

	/**
	 * A shareable symbol constant that can be used
	 * as a non-enumerable / semi-hidden message identifier
	 * to allow the final message property to not have
	 * side effects on another.
	 *
	 * @type {Symbol}
	 */
	Object.defineProperty(exports, 'MESSAGE', {
	  value: Symbol.for('message')
	});

	/**
	 * A shareable symbol constant that can be used
	 * as a non-enumerable / semi-hidden message identifier
	 * to allow the extracted splat property be hidden
	 *
	 * @type {Symbol}
	 */
	Object.defineProperty(exports, 'SPLAT', {
	  value: Symbol.for('splat')
	});

	/**
	 * A shareable object constant  that can be used
	 * as a standard configuration for winston@3.
	 *
	 * @type {Object}
	 */
	Object.defineProperty(exports, 'configs', {
	  value: config$2
	});
	});

	var colorize = createCommonjsModule(function (module) {


	const { LEVEL, MESSAGE } = tripleBeam;

	//
	// Fix colors not appearing in non-tty environments
	//
	safe.enabled = true;

	/**
	 * @property {RegExp} hasSpace
	 * Simple regex to check for presence of spaces.
	 */
	const hasSpace = /\s+/;

	/*
	 * Colorizer format. Wraps the `level` and/or `message` properties
	 * of the `info` objects with ANSI color codes based on a few options.
	 */
	class Colorizer {
	  constructor(opts = {}) {
	    if (opts.colors) {
	      this.addColors(opts.colors);
	    }

	    this.options = opts;
	  }

	  /*
	   * Adds the colors Object to the set of allColors
	   * known by the Colorizer
	   *
	   * @param {Object} colors Set of color mappings to add.
	   */
	  static addColors(clrs) {
	    const nextColors = Object.keys(clrs).reduce((acc, level) => {
	      acc[level] = hasSpace.test(clrs[level])
	        ? clrs[level].split(hasSpace)
	        : clrs[level];

	      return acc;
	    }, {});

	    Colorizer.allColors = Object.assign({}, Colorizer.allColors || {}, nextColors);
	    return Colorizer.allColors;
	  }

	  /*
	   * Adds the colors Object to the set of allColors
	   * known by the Colorizer
	   *
	   * @param {Object} colors Set of color mappings to add.
	   */
	  addColors(clrs) {
	    return Colorizer.addColors(clrs);
	  }

	  /*
	   * function colorize (lookup, level, message)
	   * Performs multi-step colorization using colors/safe
	   */
	  colorize(lookup, level, message) {
	    if (typeof message === 'undefined') {
	      message = level;
	    }

	    //
	    // If the color for the level is just a string
	    // then attempt to colorize the message with it.
	    //
	    if (!Array.isArray(Colorizer.allColors[lookup])) {
	      return safe[Colorizer.allColors[lookup]](message);
	    }

	    //
	    // If it is an Array then iterate over that Array, applying
	    // the colors function for each item.
	    //
	    for (let i = 0, len = Colorizer.allColors[lookup].length; i < len; i++) {
	      message = safe[Colorizer.allColors[lookup][i]](message);
	    }

	    return message;
	  }

	  /*
	   * function transform (info, opts)
	   * Attempts to colorize the { level, message } of the given
	   * `logform` info object.
	   */
	  transform(info, opts) {
	    if (opts.all && typeof info[MESSAGE] === 'string') {
	      info[MESSAGE] = this.colorize(info[LEVEL], info.level, info[MESSAGE]);
	    }

	    if (opts.level || opts.all || !opts.message) {
	      info.level = this.colorize(info[LEVEL], info.level);
	    }

	    if (opts.all || opts.message) {
	      info.message = this.colorize(info[LEVEL], info.level, info.message);
	    }

	    return info;
	  }
	}

	/*
	 * function colorize (info)
	 * Returns a new instance of the colorize Format that applies
	 * level colors to `info` objects. This was previously exposed
	 * as { colorize: true } to transports in `winston < 3.0.0`.
	 */
	module.exports = opts => new Colorizer(opts);

	//
	// Attach the Colorizer for registration purposes
	//
	module.exports.Colorizer
	  = module.exports.Format
	  = Colorizer;
	});

	const { Colorizer } = colorize;

	/*
	 * Simple method to register colors with a simpler require
	 * path within the module.
	 */
	var levels = config => {
	  Colorizer.addColors(config.colors || config);
	  return config;
	};

	var logform = createCommonjsModule(function (module, exports) {

	/*
	 * @api public
	 * @property {function} format
	 * Both the construction method and set of exposed
	 * formats.
	 */
	const format = exports.format = format$7;

	/*
	 * @api public
	 * @method {function} levels
	 * Registers the specified levels with logform.
	 */
	exports.levels = levels;

	/*
	 * @api private
	 * method {function} exposeFormat
	 * Exposes a sub-format on the main format object
	 * as a lazy-loaded getter.
	 */
	function exposeFormat(name, path) {
	  path = path || name;
	  Object.defineProperty(format, name, {
	    get() {
	      return commonjsRequire(`./${path}.js`);
	    },
	    configurable: true
	  });
	}

	//
	// Setup all transports as lazy-loaded getters.
	//
	exposeFormat('align');
	exposeFormat('errors');
	exposeFormat('cli');
	exposeFormat('combine');
	exposeFormat('colorize');
	exposeFormat('json');
	exposeFormat('label');
	exposeFormat('logstash');
	exposeFormat('metadata');
	exposeFormat('ms');
	exposeFormat('padLevels', 'pad-levels');
	exposeFormat('prettyPrint', 'pretty-print');
	exposeFormat('printf');
	exposeFormat('simple');
	exposeFormat('splat');
	exposeFormat('timestamp');
	exposeFormat('uncolorize');
	});

	/**
	 * common.js: Internal helper and utility functions for winston.
	 *
	 * (C) 2010 Charlie Robbins
	 * MIT LICENCE
	 */

	var common$1 = createCommonjsModule(function (module, exports) {

	const { format } = util__default['default'];

	/**
	 * Set of simple deprecation notices and a way to expose them for a set of
	 * properties.
	 * @type {Object}
	 * @private
	 */
	exports.warn = {
	  deprecated(prop) {
	    return () => {
	      throw new Error(format('{ %s } was removed in winston@3.0.0.', prop));
	    };
	  },
	  useFormat(prop) {
	    return () => {
	      throw new Error([
	        format('{ %s } was removed in winston@3.0.0.', prop),
	        'Use a custom winston.format = winston.format(function) instead.'
	      ].join('\n'));
	    };
	  },
	  forFunctions(obj, type, props) {
	    props.forEach(prop => {
	      obj[prop] = exports.warn[type](prop);
	    });
	  },
	  moved(obj, movedTo, prop) {
	    function movedNotice() {
	      return () => {
	        throw new Error([
	          format('winston.%s was moved in winston@3.0.0.', prop),
	          format('Use a winston.%s instead.', movedTo)
	        ].join('\n'));
	      };
	    }

	    Object.defineProperty(obj, prop, {
	      get: movedNotice,
	      set: movedNotice
	    });
	  },
	  forProperties(obj, type, props) {
	    props.forEach(prop => {
	      const notice = exports.warn[type](prop);
	      Object.defineProperty(obj, prop, {
	        get: notice,
	        set: notice
	      });
	    });
	  }
	};
	});

	var name$6 = "winston";
	var description$6 = "A logger for just about everything.";
	var version$b = "3.3.3";
	var author$5 = "Charlie Robbins <charlie.robbins@gmail.com>";
	var maintainers = [
		"Jarrett Cruger <jcrugzz@gmail.com>",
		"Chris Alderson <chrisalderson@protonmail.com>",
		"David Hyde <dabh@stanford.edu>"
	];
	var repository$5 = {
		type: "git",
		url: "https://github.com/winstonjs/winston.git"
	};
	var keywords$4 = [
		"winston",
		"logger",
		"logging",
		"logs",
		"sysadmin",
		"bunyan",
		"pino",
		"loglevel",
		"tools",
		"json",
		"stream"
	];
	var dependencies$5 = {
		async: "^3.1.0",
		"@dabh/diagnostics": "^2.0.2",
		"is-stream": "^2.0.0",
		logform: "^2.2.0",
		"one-time": "^1.0.0",
		"readable-stream": "^3.4.0",
		"stack-trace": "0.0.x",
		"triple-beam": "^1.3.0",
		"winston-transport": "^4.4.0"
	};
	var devDependencies$5 = {
		"@babel/cli": "^7.10.3",
		"@babel/core": "^7.10.3",
		"@babel/preset-env": "^7.10.3",
		"@types/node": "^14.0.13",
		"abstract-winston-transport": "^0.5.1",
		assume: "^2.2.0",
		colors: "^1.4.0",
		"cross-spawn-async": "^2.2.5",
		"eslint-config-populist": "^4.2.0",
		hock: "^1.4.1",
		mocha: "^8.0.1",
		nyc: "^15.1.0",
		rimraf: "^3.0.2",
		split2: "^3.1.1",
		"std-mocks": "^1.0.1",
		through2: "^3.0.1",
		"winston-compat": "^0.1.5"
	};
	var main$4 = "./lib/winston";
	var browser$1 = "./dist/winston";
	var types$3 = "./index.d.ts";
	var scripts$6 = {
		lint: "populist lib/*.js lib/winston/*.js lib/winston/**/*.js",
		pretest: "npm run lint",
		test: "nyc --reporter=text --reporter lcov npm run test:mocha",
		"test:mocha": "mocha test/*.test.js test/**/*.test.js --exit",
		build: "./node_modules/.bin/rimraf dist && babel lib -d dist",
		prepublishOnly: "npm run build"
	};
	var engines$2 = {
		node: ">= 6.4.0"
	};
	var license$5 = "MIT";
	var require$$1$3 = {
		name: name$6,
		description: description$6,
		version: version$b,
		author: author$5,
		maintainers: maintainers,
		repository: repository$5,
		keywords: keywords$4,
		dependencies: dependencies$5,
		devDependencies: devDependencies$5,
		main: main$4,
		browser: browser$1,
		types: types$3,
		scripts: scripts$6,
		engines: engines$2,
		license: license$5
	};

	var processNextickArgs = createCommonjsModule(function (module) {

	if (typeof process === 'undefined' ||
	    !process.version ||
	    process.version.indexOf('v0.') === 0 ||
	    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
	  module.exports = { nextTick: nextTick };
	} else {
	  module.exports = process;
	}

	function nextTick(fn, arg1, arg2, arg3) {
	  if (typeof fn !== 'function') {
	    throw new TypeError('"callback" argument must be a function');
	  }
	  var len = arguments.length;
	  var args, i;
	  switch (len) {
	  case 0:
	  case 1:
	    return process.nextTick(fn);
	  case 2:
	    return process.nextTick(function afterTickOne() {
	      fn.call(null, arg1);
	    });
	  case 3:
	    return process.nextTick(function afterTickTwo() {
	      fn.call(null, arg1, arg2);
	    });
	  case 4:
	    return process.nextTick(function afterTickThree() {
	      fn.call(null, arg1, arg2, arg3);
	    });
	  default:
	    args = new Array(len - 1);
	    i = 0;
	    while (i < args.length) {
	      args[i++] = arguments[i];
	    }
	    return process.nextTick(function afterTick() {
	      fn.apply(null, args);
	    });
	  }
	}
	});

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.

	function isArray$2(arg) {
	  if (Array.isArray) {
	    return Array.isArray(arg);
	  }
	  return objectToString$4(arg) === '[object Array]';
	}
	var isArray_1 = isArray$2;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	var isBoolean_1 = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	var isNull_1 = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	var isNullOrUndefined_1 = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	var isNumber_1 = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	var isString_1 = isString;

	function isSymbol$2(arg) {
	  return typeof arg === 'symbol';
	}
	var isSymbol_1 = isSymbol$2;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	var isUndefined_1 = isUndefined;

	function isRegExp$1(re) {
	  return objectToString$4(re) === '[object RegExp]';
	}
	var isRegExp_1 = isRegExp$1;

	function isObject$5(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	var isObject_1 = isObject$5;

	function isDate(d) {
	  return objectToString$4(d) === '[object Date]';
	}
	var isDate_1 = isDate;

	function isError(e) {
	  return (objectToString$4(e) === '[object Error]' || e instanceof Error);
	}
	var isError_1 = isError;

	function isFunction$4(arg) {
	  return typeof arg === 'function';
	}
	var isFunction_1 = isFunction$4;

	function isPrimitive$1(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	var isPrimitive_1 = isPrimitive$1;

	var isBuffer$1 = Buffer.isBuffer;

	function objectToString$4(o) {
	  return Object.prototype.toString.call(o);
	}

	var util$6 = {
		isArray: isArray_1,
		isBoolean: isBoolean_1,
		isNull: isNull_1,
		isNullOrUndefined: isNullOrUndefined_1,
		isNumber: isNumber_1,
		isString: isString_1,
		isSymbol: isSymbol_1,
		isUndefined: isUndefined_1,
		isRegExp: isRegExp_1,
		isObject: isObject_1,
		isDate: isDate_1,
		isError: isError_1,
		isFunction: isFunction_1,
		isPrimitive: isPrimitive_1,
		isBuffer: isBuffer$1
	};

	var inherits_browser = createCommonjsModule(function (module) {
	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    if (superCtor) {
	      ctor.super_ = superCtor;
	      ctor.prototype = Object.create(superCtor.prototype, {
	        constructor: {
	          value: ctor,
	          enumerable: false,
	          writable: true,
	          configurable: true
	        }
	      });
	    }
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    if (superCtor) {
	      ctor.super_ = superCtor;
	      var TempCtor = function () {};
	      TempCtor.prototype = superCtor.prototype;
	      ctor.prototype = new TempCtor();
	      ctor.prototype.constructor = ctor;
	    }
	  };
	}
	});

	var inherits = createCommonjsModule(function (module) {
	try {
	  var util = util__default['default'];
	  /* istanbul ignore next */
	  if (typeof util.inherits !== 'function') throw '';
	  module.exports = util.inherits;
	} catch (e) {
	  /* istanbul ignore next */
	  module.exports = inherits_browser;
	}
	});

	/**
	 * For Node.js, simply re-export the core `util.deprecate` function.
	 */

	var node$2 = util__default['default'].deprecate;

	var stream$5 = require$$0__default['default'];

	/* eslint-disable node/no-deprecated-api */

	var safeBuffer = createCommonjsModule(function (module, exports) {
	var Buffer = buffer__default['default'].Buffer;

	// alternative to using Object.keys for old browsers
	function copyProps (src, dst) {
	  for (var key in src) {
	    dst[key] = src[key];
	  }
	}
	if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
	  module.exports = buffer__default['default'];
	} else {
	  // Copy properties from require('buffer')
	  copyProps(buffer__default['default'], exports);
	  exports.Buffer = SafeBuffer;
	}

	function SafeBuffer (arg, encodingOrOffset, length) {
	  return Buffer(arg, encodingOrOffset, length)
	}

	// Copy static methods from Buffer
	copyProps(Buffer, SafeBuffer);

	SafeBuffer.from = function (arg, encodingOrOffset, length) {
	  if (typeof arg === 'number') {
	    throw new TypeError('Argument must not be a number')
	  }
	  return Buffer(arg, encodingOrOffset, length)
	};

	SafeBuffer.alloc = function (size, fill, encoding) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  var buf = Buffer(size);
	  if (fill !== undefined) {
	    if (typeof encoding === 'string') {
	      buf.fill(fill, encoding);
	    } else {
	      buf.fill(fill);
	    }
	  } else {
	    buf.fill(0);
	  }
	  return buf
	};

	SafeBuffer.allocUnsafe = function (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  return Buffer(size)
	};

	SafeBuffer.allocUnsafeSlow = function (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  return buffer__default['default'].SlowBuffer(size)
	};
	});

	/*<replacement>*/


	/*</replacement>*/

	// undocumented cb() API, needed for core, not for public API
	function destroy$1(err, cb) {
	  var _this = this;

	  var readableDestroyed = this._readableState && this._readableState.destroyed;
	  var writableDestroyed = this._writableState && this._writableState.destroyed;

	  if (readableDestroyed || writableDestroyed) {
	    if (cb) {
	      cb(err);
	    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
	      processNextickArgs.nextTick(emitErrorNT$1, this, err);
	    }
	    return this;
	  }

	  // we set destroyed to true before firing error callbacks in order
	  // to make it re-entrance safe in case destroy() is called within callbacks

	  if (this._readableState) {
	    this._readableState.destroyed = true;
	  }

	  // if this is a duplex stream mark the writable part as destroyed as well
	  if (this._writableState) {
	    this._writableState.destroyed = true;
	  }

	  this._destroy(err || null, function (err) {
	    if (!cb && err) {
	      processNextickArgs.nextTick(emitErrorNT$1, _this, err);
	      if (_this._writableState) {
	        _this._writableState.errorEmitted = true;
	      }
	    } else if (cb) {
	      cb(err);
	    }
	  });

	  return this;
	}

	function undestroy$1() {
	  if (this._readableState) {
	    this._readableState.destroyed = false;
	    this._readableState.reading = false;
	    this._readableState.ended = false;
	    this._readableState.endEmitted = false;
	  }

	  if (this._writableState) {
	    this._writableState.destroyed = false;
	    this._writableState.ended = false;
	    this._writableState.ending = false;
	    this._writableState.finished = false;
	    this._writableState.errorEmitted = false;
	  }
	}

	function emitErrorNT$1(self, err) {
	  self.emit('error', err);
	}

	var destroy_1$1 = {
	  destroy: destroy$1,
	  undestroy: undestroy$1
	};

	var toString$9 = {}.toString;

	var isarray = Array.isArray || function (arr) {
	  return toString$9.call(arr) == '[object Array]';
	};

	var BufferList = createCommonjsModule(function (module) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Buffer = safeBuffer.Buffer;


	function copyBuffer(src, target, offset) {
	  src.copy(target, offset);
	}

	module.exports = function () {
	  function BufferList() {
	    _classCallCheck(this, BufferList);

	    this.head = null;
	    this.tail = null;
	    this.length = 0;
	  }

	  BufferList.prototype.push = function push(v) {
	    var entry = { data: v, next: null };
	    if (this.length > 0) this.tail.next = entry;else this.head = entry;
	    this.tail = entry;
	    ++this.length;
	  };

	  BufferList.prototype.unshift = function unshift(v) {
	    var entry = { data: v, next: this.head };
	    if (this.length === 0) this.tail = entry;
	    this.head = entry;
	    ++this.length;
	  };

	  BufferList.prototype.shift = function shift() {
	    if (this.length === 0) return;
	    var ret = this.head.data;
	    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
	    --this.length;
	    return ret;
	  };

	  BufferList.prototype.clear = function clear() {
	    this.head = this.tail = null;
	    this.length = 0;
	  };

	  BufferList.prototype.join = function join(s) {
	    if (this.length === 0) return '';
	    var p = this.head;
	    var ret = '' + p.data;
	    while (p = p.next) {
	      ret += s + p.data;
	    }return ret;
	  };

	  BufferList.prototype.concat = function concat(n) {
	    if (this.length === 0) return Buffer.alloc(0);
	    if (this.length === 1) return this.head.data;
	    var ret = Buffer.allocUnsafe(n >>> 0);
	    var p = this.head;
	    var i = 0;
	    while (p) {
	      copyBuffer(p.data, ret, i);
	      i += p.data.length;
	      p = p.next;
	    }
	    return ret;
	  };

	  return BufferList;
	}();

	if (util__default['default'] && util__default['default'].inspect && util__default['default'].inspect.custom) {
	  module.exports.prototype[util__default['default'].inspect.custom] = function () {
	    var obj = util__default['default'].inspect({ length: this.length });
	    return this.constructor.name + ' ' + obj;
	  };
	}
	});

	/*<replacement>*/

	var Buffer$I = safeBuffer.Buffer;
	/*</replacement>*/

	var isEncoding = Buffer$I.isEncoding || function (encoding) {
	  encoding = '' + encoding;
	  switch (encoding && encoding.toLowerCase()) {
	    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
	      return true;
	    default:
	      return false;
	  }
	};

	function _normalizeEncoding(enc) {
	  if (!enc) return 'utf8';
	  var retried;
	  while (true) {
	    switch (enc) {
	      case 'utf8':
	      case 'utf-8':
	        return 'utf8';
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return 'utf16le';
	      case 'latin1':
	      case 'binary':
	        return 'latin1';
	      case 'base64':
	      case 'ascii':
	      case 'hex':
	        return enc;
	      default:
	        if (retried) return; // undefined
	        enc = ('' + enc).toLowerCase();
	        retried = true;
	    }
	  }
	}
	// Do not cache `Buffer.isEncoding` when checking encoding names as some
	// modules monkey-patch it to support additional encodings
	function normalizeEncoding(enc) {
	  var nenc = _normalizeEncoding(enc);
	  if (typeof nenc !== 'string' && (Buffer$I.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
	  return nenc || enc;
	}

	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters.
	var StringDecoder_1 = StringDecoder$3;
	function StringDecoder$3(encoding) {
	  this.encoding = normalizeEncoding(encoding);
	  var nb;
	  switch (this.encoding) {
	    case 'utf16le':
	      this.text = utf16Text;
	      this.end = utf16End;
	      nb = 4;
	      break;
	    case 'utf8':
	      this.fillLast = utf8FillLast;
	      nb = 4;
	      break;
	    case 'base64':
	      this.text = base64Text;
	      this.end = base64End;
	      nb = 3;
	      break;
	    default:
	      this.write = simpleWrite;
	      this.end = simpleEnd;
	      return;
	  }
	  this.lastNeed = 0;
	  this.lastTotal = 0;
	  this.lastChar = Buffer$I.allocUnsafe(nb);
	}

	StringDecoder$3.prototype.write = function (buf) {
	  if (buf.length === 0) return '';
	  var r;
	  var i;
	  if (this.lastNeed) {
	    r = this.fillLast(buf);
	    if (r === undefined) return '';
	    i = this.lastNeed;
	    this.lastNeed = 0;
	  } else {
	    i = 0;
	  }
	  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
	  return r || '';
	};

	StringDecoder$3.prototype.end = utf8End;

	// Returns only complete characters in a Buffer
	StringDecoder$3.prototype.text = utf8Text;

	// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
	StringDecoder$3.prototype.fillLast = function (buf) {
	  if (this.lastNeed <= buf.length) {
	    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
	    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
	  }
	  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
	  this.lastNeed -= buf.length;
	};

	// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
	// continuation byte. If an invalid byte is detected, -2 is returned.
	function utf8CheckByte(byte) {
	  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
	  return byte >> 6 === 0x02 ? -1 : -2;
	}

	// Checks at most 3 bytes at the end of a Buffer in order to detect an
	// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
	// needed to complete the UTF-8 character (if applicable) are returned.
	function utf8CheckIncomplete(self, buf, i) {
	  var j = buf.length - 1;
	  if (j < i) return 0;
	  var nb = utf8CheckByte(buf[j]);
	  if (nb >= 0) {
	    if (nb > 0) self.lastNeed = nb - 1;
	    return nb;
	  }
	  if (--j < i || nb === -2) return 0;
	  nb = utf8CheckByte(buf[j]);
	  if (nb >= 0) {
	    if (nb > 0) self.lastNeed = nb - 2;
	    return nb;
	  }
	  if (--j < i || nb === -2) return 0;
	  nb = utf8CheckByte(buf[j]);
	  if (nb >= 0) {
	    if (nb > 0) {
	      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
	    }
	    return nb;
	  }
	  return 0;
	}

	// Validates as many continuation bytes for a multi-byte UTF-8 character as
	// needed or are available. If we see a non-continuation byte where we expect
	// one, we "replace" the validated continuation bytes we've seen so far with
	// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
	// behavior. The continuation byte check is included three times in the case
	// where all of the continuation bytes for a character exist in the same buffer.
	// It is also done this way as a slight performance increase instead of using a
	// loop.
	function utf8CheckExtraBytes(self, buf, p) {
	  if ((buf[0] & 0xC0) !== 0x80) {
	    self.lastNeed = 0;
	    return '\ufffd';
	  }
	  if (self.lastNeed > 1 && buf.length > 1) {
	    if ((buf[1] & 0xC0) !== 0x80) {
	      self.lastNeed = 1;
	      return '\ufffd';
	    }
	    if (self.lastNeed > 2 && buf.length > 2) {
	      if ((buf[2] & 0xC0) !== 0x80) {
	        self.lastNeed = 2;
	        return '\ufffd';
	      }
	    }
	  }
	}

	// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
	function utf8FillLast(buf) {
	  var p = this.lastTotal - this.lastNeed;
	  var r = utf8CheckExtraBytes(this, buf);
	  if (r !== undefined) return r;
	  if (this.lastNeed <= buf.length) {
	    buf.copy(this.lastChar, p, 0, this.lastNeed);
	    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
	  }
	  buf.copy(this.lastChar, p, 0, buf.length);
	  this.lastNeed -= buf.length;
	}

	// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
	// partial character, the character's bytes are buffered until the required
	// number of bytes are available.
	function utf8Text(buf, i) {
	  var total = utf8CheckIncomplete(this, buf, i);
	  if (!this.lastNeed) return buf.toString('utf8', i);
	  this.lastTotal = total;
	  var end = buf.length - (total - this.lastNeed);
	  buf.copy(this.lastChar, 0, end);
	  return buf.toString('utf8', i, end);
	}

	// For UTF-8, a replacement character is added when ending on a partial
	// character.
	function utf8End(buf) {
	  var r = buf && buf.length ? this.write(buf) : '';
	  if (this.lastNeed) return r + '\ufffd';
	  return r;
	}

	// UTF-16LE typically needs two bytes per character, but even if we have an even
	// number of bytes available, we need to check if we end on a leading/high
	// surrogate. In that case, we need to wait for the next two bytes in order to
	// decode the last character properly.
	function utf16Text(buf, i) {
	  if ((buf.length - i) % 2 === 0) {
	    var r = buf.toString('utf16le', i);
	    if (r) {
	      var c = r.charCodeAt(r.length - 1);
	      if (c >= 0xD800 && c <= 0xDBFF) {
	        this.lastNeed = 2;
	        this.lastTotal = 4;
	        this.lastChar[0] = buf[buf.length - 2];
	        this.lastChar[1] = buf[buf.length - 1];
	        return r.slice(0, -1);
	      }
	    }
	    return r;
	  }
	  this.lastNeed = 1;
	  this.lastTotal = 2;
	  this.lastChar[0] = buf[buf.length - 1];
	  return buf.toString('utf16le', i, buf.length - 1);
	}

	// For UTF-16LE we do not explicitly append special replacement characters if we
	// end on a partial character, we simply let v8 handle that.
	function utf16End(buf) {
	  var r = buf && buf.length ? this.write(buf) : '';
	  if (this.lastNeed) {
	    var end = this.lastTotal - this.lastNeed;
	    return r + this.lastChar.toString('utf16le', 0, end);
	  }
	  return r;
	}

	function base64Text(buf, i) {
	  var n = (buf.length - i) % 3;
	  if (n === 0) return buf.toString('base64', i);
	  this.lastNeed = 3 - n;
	  this.lastTotal = 3;
	  if (n === 1) {
	    this.lastChar[0] = buf[buf.length - 1];
	  } else {
	    this.lastChar[0] = buf[buf.length - 2];
	    this.lastChar[1] = buf[buf.length - 1];
	  }
	  return buf.toString('base64', i, buf.length - n);
	}

	function base64End(buf) {
	  var r = buf && buf.length ? this.write(buf) : '';
	  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
	  return r;
	}

	// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
	function simpleWrite(buf) {
	  return buf.toString(this.encoding);
	}

	function simpleEnd(buf) {
	  return buf && buf.length ? this.write(buf) : '';
	}

	var string_decoder$2 = {
		StringDecoder: StringDecoder_1
	};

	/*<replacement>*/


	/*</replacement>*/

	var _stream_readable$3 = Readable$1;

	/*<replacement>*/

	/*</replacement>*/

	/*<replacement>*/
	var Duplex$6;
	/*</replacement>*/

	Readable$1.ReadableState = ReadableState$1;

	/*<replacement>*/
	EventEmitter__default['default'].EventEmitter;

	var EElistenerCount$1 = function (emitter, type) {
	  return emitter.listeners(type).length;
	};
	/*</replacement>*/

	/*<replacement>*/

	/*</replacement>*/

	/*<replacement>*/

	var Buffer$H = safeBuffer.Buffer;
	var OurUint8Array$3 = commonjsGlobal.Uint8Array || function () {};
	function _uint8ArrayToBuffer$3(chunk) {
	  return Buffer$H.from(chunk);
	}
	function _isUint8Array$3(obj) {
	  return Buffer$H.isBuffer(obj) || obj instanceof OurUint8Array$3;
	}

	/*</replacement>*/

	/*<replacement>*/
	var util$5 = Object.create(util$6);
	util$5.inherits = inherits;
	/*</replacement>*/

	/*<replacement>*/

	var debug$7 = void 0;
	if (util__default['default'] && util__default['default'].debuglog) {
	  debug$7 = util__default['default'].debuglog('stream');
	} else {
	  debug$7 = function () {};
	}
	/*</replacement>*/



	var StringDecoder$2;

	util$5.inherits(Readable$1, stream$5);

	var kProxyEvents$1 = ['error', 'close', 'destroy', 'pause', 'resume'];

	function prependListener$1(emitter, event, fn) {
	  // Sadly this is not cacheable as some libraries bundle their own
	  // event emitter implementation with them.
	  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

	  // This is a hack to make sure that our error handler is attached before any
	  // userland ones.  NEVER DO THIS. This is here only because this code needs
	  // to continue to work with older versions of Node.js that do not include
	  // the prependListener() method. The goal is to eventually remove this hack.
	  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isarray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
	}

	function ReadableState$1(options, stream) {
	  Duplex$6 = Duplex$6 || _stream_duplex$3;

	  options = options || {};

	  // Duplex streams are both readable and writable, but share
	  // the same options object.
	  // However, some cases require setting options to different
	  // values for the readable and the writable sides of the duplex stream.
	  // These options can be provided separately as readableXXX and writableXXX.
	  var isDuplex = stream instanceof Duplex$6;

	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;

	  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  var hwm = options.highWaterMark;
	  var readableHwm = options.readableHighWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

	  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;

	  // cast to ints.
	  this.highWaterMark = Math.floor(this.highWaterMark);

	  // A linked list is used to store data chunks instead of an array because the
	  // linked list can remove elements from the beginning faster than
	  // array.shift()
	  this.buffer = new BufferList();
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;

	  // a flag to be able to tell if the event 'readable'/'data' is emitted
	  // immediately, or on a later tick.  We set this to true at first, because
	  // any actions that shouldn't happen until "later" should generally also
	  // not happen before the first read call.
	  this.sync = true;

	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;
	  this.resumeScheduled = false;

	  // has it been destroyed
	  this.destroyed = false;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;

	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;

	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    if (!StringDecoder$2) StringDecoder$2 = string_decoder$2.StringDecoder;
	    this.decoder = new StringDecoder$2(options.encoding);
	    this.encoding = options.encoding;
	  }
	}

	function Readable$1(options) {
	  Duplex$6 = Duplex$6 || _stream_duplex$3;

	  if (!(this instanceof Readable$1)) return new Readable$1(options);

	  this._readableState = new ReadableState$1(options, this);

	  // legacy
	  this.readable = true;

	  if (options) {
	    if (typeof options.read === 'function') this._read = options.read;

	    if (typeof options.destroy === 'function') this._destroy = options.destroy;
	  }

	  stream$5.call(this);
	}

	Object.defineProperty(Readable$1.prototype, 'destroyed', {
	  get: function () {
	    if (this._readableState === undefined) {
	      return false;
	    }
	    return this._readableState.destroyed;
	  },
	  set: function (value) {
	    // we ignore the value if the stream
	    // has not been initialized yet
	    if (!this._readableState) {
	      return;
	    }

	    // backward compatibility, the user is explicitly
	    // managing destroyed
	    this._readableState.destroyed = value;
	  }
	});

	Readable$1.prototype.destroy = destroy_1$1.destroy;
	Readable$1.prototype._undestroy = destroy_1$1.undestroy;
	Readable$1.prototype._destroy = function (err, cb) {
	  this.push(null);
	  cb(err);
	};

	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable$1.prototype.push = function (chunk, encoding) {
	  var state = this._readableState;
	  var skipChunkCheck;

	  if (!state.objectMode) {
	    if (typeof chunk === 'string') {
	      encoding = encoding || state.defaultEncoding;
	      if (encoding !== state.encoding) {
	        chunk = Buffer$H.from(chunk, encoding);
	        encoding = '';
	      }
	      skipChunkCheck = true;
	    }
	  } else {
	    skipChunkCheck = true;
	  }

	  return readableAddChunk$1(this, chunk, encoding, false, skipChunkCheck);
	};

	// Unshift should *always* be something directly out of read()
	Readable$1.prototype.unshift = function (chunk) {
	  return readableAddChunk$1(this, chunk, null, true, false);
	};

	function readableAddChunk$1(stream, chunk, encoding, addToFront, skipChunkCheck) {
	  var state = stream._readableState;
	  if (chunk === null) {
	    state.reading = false;
	    onEofChunk$1(stream, state);
	  } else {
	    var er;
	    if (!skipChunkCheck) er = chunkInvalid$1(state, chunk);
	    if (er) {
	      stream.emit('error', er);
	    } else if (state.objectMode || chunk && chunk.length > 0) {
	      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer$H.prototype) {
	        chunk = _uint8ArrayToBuffer$3(chunk);
	      }

	      if (addToFront) {
	        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk$1(stream, state, chunk, true);
	      } else if (state.ended) {
	        stream.emit('error', new Error('stream.push() after EOF'));
	      } else {
	        state.reading = false;
	        if (state.decoder && !encoding) {
	          chunk = state.decoder.write(chunk);
	          if (state.objectMode || chunk.length !== 0) addChunk$1(stream, state, chunk, false);else maybeReadMore$1(stream, state);
	        } else {
	          addChunk$1(stream, state, chunk, false);
	        }
	      }
	    } else if (!addToFront) {
	      state.reading = false;
	    }
	  }

	  return needMoreData(state);
	}

	function addChunk$1(stream, state, chunk, addToFront) {
	  if (state.flowing && state.length === 0 && !state.sync) {
	    stream.emit('data', chunk);
	    stream.read(0);
	  } else {
	    // update the buffer info.
	    state.length += state.objectMode ? 1 : chunk.length;
	    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

	    if (state.needReadable) emitReadable$1(stream);
	  }
	  maybeReadMore$1(stream, state);
	}

	function chunkInvalid$1(state, chunk) {
	  var er;
	  if (!_isUint8Array$3(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  return er;
	}

	// if it's past the high water mark, we can push in some more.
	// Also, if we have no data yet, we can stand some
	// more bytes.  This is to work around cases where hwm=0,
	// such as the repl.  Also, if the push() triggered a
	// readable event, and the user called read(largeNumber) such that
	// needReadable was set, then we ought to push more, so that another
	// 'readable' event will be triggered.
	function needMoreData(state) {
	  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
	}

	Readable$1.prototype.isPaused = function () {
	  return this._readableState.flowing === false;
	};

	// backwards compatibility.
	Readable$1.prototype.setEncoding = function (enc) {
	  if (!StringDecoder$2) StringDecoder$2 = string_decoder$2.StringDecoder;
	  this._readableState.decoder = new StringDecoder$2(enc);
	  this._readableState.encoding = enc;
	  return this;
	};

	// Don't raise the hwm > 8MB
	var MAX_HWM$1 = 0x800000;
	function computeNewHighWaterMark$1(n) {
	  if (n >= MAX_HWM$1) {
	    n = MAX_HWM$1;
	  } else {
	    // Get the next highest power of 2 to prevent increasing hwm excessively in
	    // tiny amounts
	    n--;
	    n |= n >>> 1;
	    n |= n >>> 2;
	    n |= n >>> 4;
	    n |= n >>> 8;
	    n |= n >>> 16;
	    n++;
	  }
	  return n;
	}

	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function howMuchToRead$1(n, state) {
	  if (n <= 0 || state.length === 0 && state.ended) return 0;
	  if (state.objectMode) return 1;
	  if (n !== n) {
	    // Only flow one buffer at a time
	    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
	  }
	  // If we're asking for more than the current hwm, then raise the hwm.
	  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark$1(n);
	  if (n <= state.length) return n;
	  // Don't have enough
	  if (!state.ended) {
	    state.needReadable = true;
	    return 0;
	  }
	  return state.length;
	}

	// you can override either this method, or the async _read(n) below.
	Readable$1.prototype.read = function (n) {
	  debug$7('read', n);
	  n = parseInt(n, 10);
	  var state = this._readableState;
	  var nOrig = n;

	  if (n !== 0) state.emittedReadable = false;

	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
	    debug$7('read: emitReadable', state.length, state.ended);
	    if (state.length === 0 && state.ended) endReadable$1(this);else emitReadable$1(this);
	    return null;
	  }

	  n = howMuchToRead$1(n, state);

	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    if (state.length === 0) endReadable$1(this);
	    return null;
	  }

	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.

	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;
	  debug$7('need readable', doRead);

	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	    debug$7('length less than watermark', doRead);
	  }

	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading) {
	    doRead = false;
	    debug$7('reading or ended', doRead);
	  } else if (doRead) {
	    debug$7('do read');
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0) state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	    // If _read pushed data synchronously, then `reading` will be false,
	    // and we need to re-evaluate how much data we can return to the user.
	    if (!state.reading) n = howMuchToRead$1(nOrig, state);
	  }

	  var ret;
	  if (n > 0) ret = fromList$1(n, state);else ret = null;

	  if (ret === null) {
	    state.needReadable = true;
	    n = 0;
	  } else {
	    state.length -= n;
	  }

	  if (state.length === 0) {
	    // If we have nothing in the buffer, then we want to know
	    // as soon as we *do* get something into the buffer.
	    if (!state.ended) state.needReadable = true;

	    // If we tried to read() past the EOF, then emit end on the next tick.
	    if (nOrig !== n && state.ended) endReadable$1(this);
	  }

	  if (ret !== null) this.emit('data', ret);

	  return ret;
	};

	function onEofChunk$1(stream, state) {
	  if (state.ended) return;
	  if (state.decoder) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;

	  // emit 'readable' now to make sure it gets picked up.
	  emitReadable$1(stream);
	}

	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable$1(stream) {
	  var state = stream._readableState;
	  state.needReadable = false;
	  if (!state.emittedReadable) {
	    debug$7('emitReadable', state.flowing);
	    state.emittedReadable = true;
	    if (state.sync) processNextickArgs.nextTick(emitReadable_$1, stream);else emitReadable_$1(stream);
	  }
	}

	function emitReadable_$1(stream) {
	  debug$7('emit readable');
	  stream.emit('readable');
	  flow$1(stream);
	}

	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore$1(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    processNextickArgs.nextTick(maybeReadMore_$1, stream, state);
	  }
	}

	function maybeReadMore_$1(stream, state) {
	  var len = state.length;
	  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
	    debug$7('maybeReadMore read 0');
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;else len = state.length;
	  }
	  state.readingMore = false;
	}

	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable$1.prototype._read = function (n) {
	  this.emit('error', new Error('_read() is not implemented'));
	};

	Readable$1.prototype.pipe = function (dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;

	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;
	  debug$7('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

	  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

	  var endFn = doEnd ? onend : unpipe;
	  if (state.endEmitted) processNextickArgs.nextTick(endFn);else src.once('end', endFn);

	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable, unpipeInfo) {
	    debug$7('onunpipe');
	    if (readable === src) {
	      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
	        unpipeInfo.hasUnpiped = true;
	        cleanup();
	      }
	    }
	  }

	  function onend() {
	    debug$7('onend');
	    dest.end();
	  }

	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain$1(src);
	  dest.on('drain', ondrain);

	  var cleanedUp = false;
	  function cleanup() {
	    debug$7('cleanup');
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', unpipe);
	    src.removeListener('data', ondata);

	    cleanedUp = true;

	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
	  }

	  // If the user pushes more data while we're writing to dest then we'll end up
	  // in ondata again. However, we only want to increase awaitDrain once because
	  // dest will only emit one 'drain' event for the multiple writes.
	  // => Introduce a guard on increasing awaitDrain.
	  var increasedAwaitDrain = false;
	  src.on('data', ondata);
	  function ondata(chunk) {
	    debug$7('ondata');
	    increasedAwaitDrain = false;
	    var ret = dest.write(chunk);
	    if (false === ret && !increasedAwaitDrain) {
	      // If the user unpiped during `dest.write()`, it is possible
	      // to get stuck in a permanently paused state if that write
	      // also returned false.
	      // => Check whether `dest` is still a piping destination.
	      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf$1(state.pipes, dest) !== -1) && !cleanedUp) {
	        debug$7('false write response, pause', src._readableState.awaitDrain);
	        src._readableState.awaitDrain++;
	        increasedAwaitDrain = true;
	      }
	      src.pause();
	    }
	  }

	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    debug$7('onerror', er);
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (EElistenerCount$1(dest, 'error') === 0) dest.emit('error', er);
	  }

	  // Make sure our error handler is attached before userland ones.
	  prependListener$1(dest, 'error', onerror);

	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    debug$7('onfinish');
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);

	  function unpipe() {
	    debug$7('unpipe');
	    src.unpipe(dest);
	  }

	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);

	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    debug$7('pipe resume');
	    src.resume();
	  }

	  return dest;
	};

	function pipeOnDrain$1(src) {
	  return function () {
	    var state = src._readableState;
	    debug$7('pipeOnDrain', state.awaitDrain);
	    if (state.awaitDrain) state.awaitDrain--;
	    if (state.awaitDrain === 0 && EElistenerCount$1(src, 'data')) {
	      state.flowing = true;
	      flow$1(src);
	    }
	  };
	}

	Readable$1.prototype.unpipe = function (dest) {
	  var state = this._readableState;
	  var unpipeInfo = { hasUnpiped: false };

	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0) return this;

	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes) return this;

	    if (!dest) dest = state.pipes;

	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest) dest.emit('unpipe', this, unpipeInfo);
	    return this;
	  }

	  // slow case. multiple pipe destinations.

	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;

	    for (var i = 0; i < len; i++) {
	      dests[i].emit('unpipe', this, unpipeInfo);
	    }return this;
	  }

	  // try to find the right one.
	  var index = indexOf$1(state.pipes, dest);
	  if (index === -1) return this;

	  state.pipes.splice(index, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1) state.pipes = state.pipes[0];

	  dest.emit('unpipe', this, unpipeInfo);

	  return this;
	};

	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable$1.prototype.on = function (ev, fn) {
	  var res = stream$5.prototype.on.call(this, ev, fn);

	  if (ev === 'data') {
	    // Start flowing on next tick if stream isn't explicitly paused
	    if (this._readableState.flowing !== false) this.resume();
	  } else if (ev === 'readable') {
	    var state = this._readableState;
	    if (!state.endEmitted && !state.readableListening) {
	      state.readableListening = state.needReadable = true;
	      state.emittedReadable = false;
	      if (!state.reading) {
	        processNextickArgs.nextTick(nReadingNextTick$1, this);
	      } else if (state.length) {
	        emitReadable$1(this);
	      }
	    }
	  }

	  return res;
	};
	Readable$1.prototype.addListener = Readable$1.prototype.on;

	function nReadingNextTick$1(self) {
	  debug$7('readable nexttick read 0');
	  self.read(0);
	}

	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable$1.prototype.resume = function () {
	  var state = this._readableState;
	  if (!state.flowing) {
	    debug$7('resume');
	    state.flowing = true;
	    resume$1(this, state);
	  }
	  return this;
	};

	function resume$1(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    processNextickArgs.nextTick(resume_$1, stream, state);
	  }
	}

	function resume_$1(stream, state) {
	  if (!state.reading) {
	    debug$7('resume read 0');
	    stream.read(0);
	  }

	  state.resumeScheduled = false;
	  state.awaitDrain = 0;
	  stream.emit('resume');
	  flow$1(stream);
	  if (state.flowing && !state.reading) stream.read(0);
	}

	Readable$1.prototype.pause = function () {
	  debug$7('call pause flowing=%j', this._readableState.flowing);
	  if (false !== this._readableState.flowing) {
	    debug$7('pause');
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }
	  return this;
	};

	function flow$1(stream) {
	  var state = stream._readableState;
	  debug$7('flow', state.flowing);
	  while (state.flowing && stream.read() !== null) {}
	}

	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable$1.prototype.wrap = function (stream) {
	  var _this = this;

	  var state = this._readableState;
	  var paused = false;

	  stream.on('end', function () {
	    debug$7('wrapped end');
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length) _this.push(chunk);
	    }

	    _this.push(null);
	  });

	  stream.on('data', function (chunk) {
	    debug$7('wrapped data');
	    if (state.decoder) chunk = state.decoder.write(chunk);

	    // don't skip over falsy values in objectMode
	    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

	    var ret = _this.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });

	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (this[i] === undefined && typeof stream[i] === 'function') {
	      this[i] = function (method) {
	        return function () {
	          return stream[method].apply(stream, arguments);
	        };
	      }(i);
	    }
	  }

	  // proxy certain important events.
	  for (var n = 0; n < kProxyEvents$1.length; n++) {
	    stream.on(kProxyEvents$1[n], this.emit.bind(this, kProxyEvents$1[n]));
	  }

	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  this._read = function (n) {
	    debug$7('wrapped _read', n);
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };

	  return this;
	};

	Object.defineProperty(Readable$1.prototype, 'readableHighWaterMark', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function () {
	    return this._readableState.highWaterMark;
	  }
	});

	// exposed for testing purposes only.
	Readable$1._fromList = fromList$1;

	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromList$1(n, state) {
	  // nothing buffered
	  if (state.length === 0) return null;

	  var ret;
	  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
	    // read it all, truncate the list
	    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
	    state.buffer.clear();
	  } else {
	    // read part of list
	    ret = fromListPartial(n, state.buffer, state.decoder);
	  }

	  return ret;
	}

	// Extracts only enough buffered data to satisfy the amount requested.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromListPartial(n, list, hasStrings) {
	  var ret;
	  if (n < list.head.data.length) {
	    // slice is the same for buffers and strings
	    ret = list.head.data.slice(0, n);
	    list.head.data = list.head.data.slice(n);
	  } else if (n === list.head.data.length) {
	    // first chunk is a perfect match
	    ret = list.shift();
	  } else {
	    // result spans more than one buffer
	    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
	  }
	  return ret;
	}

	// Copies a specified amount of characters from the list of buffered data
	// chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBufferString(n, list) {
	  var p = list.head;
	  var c = 1;
	  var ret = p.data;
	  n -= ret.length;
	  while (p = p.next) {
	    var str = p.data;
	    var nb = n > str.length ? str.length : n;
	    if (nb === str.length) ret += str;else ret += str.slice(0, n);
	    n -= nb;
	    if (n === 0) {
	      if (nb === str.length) {
	        ++c;
	        if (p.next) list.head = p.next;else list.head = list.tail = null;
	      } else {
	        list.head = p;
	        p.data = str.slice(nb);
	      }
	      break;
	    }
	    ++c;
	  }
	  list.length -= c;
	  return ret;
	}

	// Copies a specified amount of bytes from the list of buffered data chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBuffer(n, list) {
	  var ret = Buffer$H.allocUnsafe(n);
	  var p = list.head;
	  var c = 1;
	  p.data.copy(ret);
	  n -= p.data.length;
	  while (p = p.next) {
	    var buf = p.data;
	    var nb = n > buf.length ? buf.length : n;
	    buf.copy(ret, ret.length - n, 0, nb);
	    n -= nb;
	    if (n === 0) {
	      if (nb === buf.length) {
	        ++c;
	        if (p.next) list.head = p.next;else list.head = list.tail = null;
	      } else {
	        list.head = p;
	        p.data = buf.slice(nb);
	      }
	      break;
	    }
	    ++c;
	  }
	  list.length -= c;
	  return ret;
	}

	function endReadable$1(stream) {
	  var state = stream._readableState;

	  // If we get here before consuming all the bytes, then that is a
	  // bug in node.  Should never happen.
	  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

	  if (!state.endEmitted) {
	    state.ended = true;
	    processNextickArgs.nextTick(endReadableNT$1, state, stream);
	  }
	}

	function endReadableNT$1(state, stream) {
	  // Check that we didn't get one last unshift.
	  if (!state.endEmitted && state.length === 0) {
	    state.endEmitted = true;
	    stream.readable = false;
	    stream.emit('end');
	  }
	}

	function indexOf$1(xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}

	/*<replacement>*/


	/*</replacement>*/

	/*<replacement>*/
	var objectKeys$1 = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) {
	    keys.push(key);
	  }return keys;
	};
	/*</replacement>*/

	var _stream_duplex$3 = Duplex$5;

	/*<replacement>*/
	var util$4 = Object.create(util$6);
	util$4.inherits = inherits;
	/*</replacement>*/




	util$4.inherits(Duplex$5, _stream_readable$3);

	{
	  // avoid scope creep, the keys array can then be collected
	  var keys$2 = objectKeys$1(_stream_writable$3.prototype);
	  for (var v$1 = 0; v$1 < keys$2.length; v$1++) {
	    var method$1 = keys$2[v$1];
	    if (!Duplex$5.prototype[method$1]) Duplex$5.prototype[method$1] = _stream_writable$3.prototype[method$1];
	  }
	}

	function Duplex$5(options) {
	  if (!(this instanceof Duplex$5)) return new Duplex$5(options);

	  _stream_readable$3.call(this, options);
	  _stream_writable$3.call(this, options);

	  if (options && options.readable === false) this.readable = false;

	  if (options && options.writable === false) this.writable = false;

	  this.allowHalfOpen = true;
	  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

	  this.once('end', onend$1);
	}

	Object.defineProperty(Duplex$5.prototype, 'writableHighWaterMark', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function () {
	    return this._writableState.highWaterMark;
	  }
	});

	// the no-half-open enforcer
	function onend$1() {
	  // if we allow half-open state, or if the writable side ended,
	  // then we're ok.
	  if (this.allowHalfOpen || this._writableState.ended) return;

	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  processNextickArgs.nextTick(onEndNT$1, this);
	}

	function onEndNT$1(self) {
	  self.end();
	}

	Object.defineProperty(Duplex$5.prototype, 'destroyed', {
	  get: function () {
	    if (this._readableState === undefined || this._writableState === undefined) {
	      return false;
	    }
	    return this._readableState.destroyed && this._writableState.destroyed;
	  },
	  set: function (value) {
	    // we ignore the value if the stream
	    // has not been initialized yet
	    if (this._readableState === undefined || this._writableState === undefined) {
	      return;
	    }

	    // backward compatibility, the user is explicitly
	    // managing destroyed
	    this._readableState.destroyed = value;
	    this._writableState.destroyed = value;
	  }
	});

	Duplex$5.prototype._destroy = function (err, cb) {
	  this.push(null);
	  this.end();

	  processNextickArgs.nextTick(cb, err);
	};

	/*<replacement>*/


	/*</replacement>*/

	var _stream_writable$3 = Writable$3;

	// It seems a linked list but it is not
	// there will be only 2 of these for each stream
	function CorkedRequest$1(state) {
	  var _this = this;

	  this.next = null;
	  this.entry = null;
	  this.finish = function () {
	    onCorkedFinish$1(_this, state);
	  };
	}
	/* </replacement> */

	/*<replacement>*/
	var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextickArgs.nextTick;
	/*</replacement>*/

	/*<replacement>*/
	var Duplex$4;
	/*</replacement>*/

	Writable$3.WritableState = WritableState$1;

	/*<replacement>*/
	var util$3 = Object.create(util$6);
	util$3.inherits = inherits;
	/*</replacement>*/

	/*<replacement>*/
	var internalUtil$1 = {
	  deprecate: node$2
	};
	/*</replacement>*/

	/*<replacement>*/

	/*</replacement>*/

	/*<replacement>*/

	var Buffer$G = safeBuffer.Buffer;
	var OurUint8Array$2 = commonjsGlobal.Uint8Array || function () {};
	function _uint8ArrayToBuffer$2(chunk) {
	  return Buffer$G.from(chunk);
	}
	function _isUint8Array$2(obj) {
	  return Buffer$G.isBuffer(obj) || obj instanceof OurUint8Array$2;
	}

	/*</replacement>*/



	util$3.inherits(Writable$3, stream$5);

	function nop$1() {}

	function WritableState$1(options, stream) {
	  Duplex$4 = Duplex$4 || _stream_duplex$3;

	  options = options || {};

	  // Duplex streams are both readable and writable, but share
	  // the same options object.
	  // However, some cases require setting options to different
	  // values for the readable and the writable sides of the duplex stream.
	  // These options can be provided separately as readableXXX and writableXXX.
	  var isDuplex = stream instanceof Duplex$4;

	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;

	  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  var hwm = options.highWaterMark;
	  var writableHwm = options.writableHighWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

	  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;

	  // cast to ints.
	  this.highWaterMark = Math.floor(this.highWaterMark);

	  // if _final has been called
	  this.finalCalled = false;

	  // drain event flag.
	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;

	  // has it been destroyed
	  this.destroyed = false;

	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;

	  // a flag to see when we're in the middle of a write.
	  this.writing = false;

	  // when true all writes will be buffered until .uncork() call
	  this.corked = 0;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;

	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function (er) {
	    onwrite$1(stream, er);
	  };

	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;

	  // the amount that is being written when _write is called.
	  this.writelen = 0;

	  this.bufferedRequest = null;
	  this.lastBufferedRequest = null;

	  // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted
	  this.pendingcb = 0;

	  // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams
	  this.prefinished = false;

	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;

	  // count buffered requests
	  this.bufferedRequestCount = 0;

	  // allocate the first CorkedRequest, there is always
	  // one allocated and free to use, and we maintain at most two
	  this.corkedRequestsFree = new CorkedRequest$1(this);
	}

	WritableState$1.prototype.getBuffer = function getBuffer() {
	  var current = this.bufferedRequest;
	  var out = [];
	  while (current) {
	    out.push(current);
	    current = current.next;
	  }
	  return out;
	};

	(function () {
	  try {
	    Object.defineProperty(WritableState$1.prototype, 'buffer', {
	      get: internalUtil$1.deprecate(function () {
	        return this.getBuffer();
	      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
	    });
	  } catch (_) {}
	})();

	// Test _writableState for inheritance to account for Duplex streams,
	// whose prototype chain only points to Readable.
	var realHasInstance$1;
	if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
	  realHasInstance$1 = Function.prototype[Symbol.hasInstance];
	  Object.defineProperty(Writable$3, Symbol.hasInstance, {
	    value: function (object) {
	      if (realHasInstance$1.call(this, object)) return true;
	      if (this !== Writable$3) return false;

	      return object && object._writableState instanceof WritableState$1;
	    }
	  });
	} else {
	  realHasInstance$1 = function (object) {
	    return object instanceof this;
	  };
	}

	function Writable$3(options) {
	  Duplex$4 = Duplex$4 || _stream_duplex$3;

	  // Writable ctor is applied to Duplexes, too.
	  // `realHasInstance` is necessary because using plain `instanceof`
	  // would return false, as no `_writableState` property is attached.

	  // Trying to use the custom `instanceof` for Writable here will also break the
	  // Node.js LazyTransform implementation, which has a non-trivial getter for
	  // `_writableState` that would lead to infinite recursion.
	  if (!realHasInstance$1.call(Writable$3, this) && !(this instanceof Duplex$4)) {
	    return new Writable$3(options);
	  }

	  this._writableState = new WritableState$1(options, this);

	  // legacy.
	  this.writable = true;

	  if (options) {
	    if (typeof options.write === 'function') this._write = options.write;

	    if (typeof options.writev === 'function') this._writev = options.writev;

	    if (typeof options.destroy === 'function') this._destroy = options.destroy;

	    if (typeof options.final === 'function') this._final = options.final;
	  }

	  stream$5.call(this);
	}

	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable$3.prototype.pipe = function () {
	  this.emit('error', new Error('Cannot pipe, not readable'));
	};

	function writeAfterEnd$1(stream, cb) {
	  var er = new Error('write after end');
	  // TODO: defer error events consistently everywhere, not just the cb
	  stream.emit('error', er);
	  processNextickArgs.nextTick(cb, er);
	}

	// Checks that a user-supplied chunk is valid, especially for the particular
	// mode the stream is in. Currently this means that `null` is never accepted
	// and undefined/non-string values are only allowed in object mode.
	function validChunk$1(stream, state, chunk, cb) {
	  var valid = true;
	  var er = false;

	  if (chunk === null) {
	    er = new TypeError('May not write null values to stream');
	  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  if (er) {
	    stream.emit('error', er);
	    processNextickArgs.nextTick(cb, er);
	    valid = false;
	  }
	  return valid;
	}

	Writable$3.prototype.write = function (chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;
	  var isBuf = !state.objectMode && _isUint8Array$2(chunk);

	  if (isBuf && !Buffer$G.isBuffer(chunk)) {
	    chunk = _uint8ArrayToBuffer$2(chunk);
	  }

	  if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }

	  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

	  if (typeof cb !== 'function') cb = nop$1;

	  if (state.ended) writeAfterEnd$1(this, cb);else if (isBuf || validChunk$1(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer$1(this, state, isBuf, chunk, encoding, cb);
	  }

	  return ret;
	};

	Writable$3.prototype.cork = function () {
	  var state = this._writableState;

	  state.corked++;
	};

	Writable$3.prototype.uncork = function () {
	  var state = this._writableState;

	  if (state.corked) {
	    state.corked--;

	    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer$1(this, state);
	  }
	};

	Writable$3.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
	  // node::ParseEncoding() requires lower case.
	  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
	  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
	  this._writableState.defaultEncoding = encoding;
	  return this;
	};

	function decodeChunk$1(state, chunk, encoding) {
	  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
	    chunk = Buffer$G.from(chunk, encoding);
	  }
	  return chunk;
	}

	Object.defineProperty(Writable$3.prototype, 'writableHighWaterMark', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function () {
	    return this._writableState.highWaterMark;
	  }
	});

	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer$1(stream, state, isBuf, chunk, encoding, cb) {
	  if (!isBuf) {
	    var newChunk = decodeChunk$1(state, chunk, encoding);
	    if (chunk !== newChunk) {
	      isBuf = true;
	      encoding = 'buffer';
	      chunk = newChunk;
	    }
	  }
	  var len = state.objectMode ? 1 : chunk.length;

	  state.length += len;

	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret) state.needDrain = true;

	  if (state.writing || state.corked) {
	    var last = state.lastBufferedRequest;
	    state.lastBufferedRequest = {
	      chunk: chunk,
	      encoding: encoding,
	      isBuf: isBuf,
	      callback: cb,
	      next: null
	    };
	    if (last) {
	      last.next = state.lastBufferedRequest;
	    } else {
	      state.bufferedRequest = state.lastBufferedRequest;
	    }
	    state.bufferedRequestCount += 1;
	  } else {
	    doWrite$1(stream, state, false, len, chunk, encoding, cb);
	  }

	  return ret;
	}

	function doWrite$1(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}

	function onwriteError$1(stream, state, sync, er, cb) {
	  --state.pendingcb;

	  if (sync) {
	    // defer the callback if we are being called synchronously
	    // to avoid piling up things on the stack
	    processNextickArgs.nextTick(cb, er);
	    // this can emit finish, and it will always happen
	    // after error
	    processNextickArgs.nextTick(finishMaybe$1, stream, state);
	    stream._writableState.errorEmitted = true;
	    stream.emit('error', er);
	  } else {
	    // the caller expect this to happen before if
	    // it is async
	    cb(er);
	    stream._writableState.errorEmitted = true;
	    stream.emit('error', er);
	    // this can emit finish, but finish must
	    // always follow error
	    finishMaybe$1(stream, state);
	  }
	}

	function onwriteStateUpdate$1(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}

	function onwrite$1(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;

	  onwriteStateUpdate$1(state);

	  if (er) onwriteError$1(stream, state, sync, er, cb);else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish$1(state);

	    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
	      clearBuffer$1(stream, state);
	    }

	    if (sync) {
	      /*<replacement>*/
	      asyncWrite(afterWrite$1, stream, state, finished, cb);
	      /*</replacement>*/
	    } else {
	      afterWrite$1(stream, state, finished, cb);
	    }
	  }
	}

	function afterWrite$1(stream, state, finished, cb) {
	  if (!finished) onwriteDrain$1(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe$1(stream, state);
	}

	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain$1(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}

	// if there's something in the buffer waiting, then process it
	function clearBuffer$1(stream, state) {
	  state.bufferProcessing = true;
	  var entry = state.bufferedRequest;

	  if (stream._writev && entry && entry.next) {
	    // Fast case, write everything using _writev()
	    var l = state.bufferedRequestCount;
	    var buffer = new Array(l);
	    var holder = state.corkedRequestsFree;
	    holder.entry = entry;

	    var count = 0;
	    var allBuffers = true;
	    while (entry) {
	      buffer[count] = entry;
	      if (!entry.isBuf) allBuffers = false;
	      entry = entry.next;
	      count += 1;
	    }
	    buffer.allBuffers = allBuffers;

	    doWrite$1(stream, state, true, state.length, buffer, '', holder.finish);

	    // doWrite is almost always async, defer these to save a bit of time
	    // as the hot path ends with doWrite
	    state.pendingcb++;
	    state.lastBufferedRequest = null;
	    if (holder.next) {
	      state.corkedRequestsFree = holder.next;
	      holder.next = null;
	    } else {
	      state.corkedRequestsFree = new CorkedRequest$1(state);
	    }
	    state.bufferedRequestCount = 0;
	  } else {
	    // Slow case, write chunks one-by-one
	    while (entry) {
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;

	      doWrite$1(stream, state, false, len, chunk, encoding, cb);
	      entry = entry.next;
	      state.bufferedRequestCount--;
	      // if we didn't call the onwrite immediately, then
	      // it means that we need to wait until it does.
	      // also, that means that the chunk and cb are currently
	      // being processed, so move the buffer counter past them.
	      if (state.writing) {
	        break;
	      }
	    }

	    if (entry === null) state.lastBufferedRequest = null;
	  }

	  state.bufferedRequest = entry;
	  state.bufferProcessing = false;
	}

	Writable$3.prototype._write = function (chunk, encoding, cb) {
	  cb(new Error('_write() is not implemented'));
	};

	Writable$3.prototype._writev = null;

	Writable$3.prototype.end = function (chunk, encoding, cb) {
	  var state = this._writableState;

	  if (typeof chunk === 'function') {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }

	  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

	  // .end() fully uncorks
	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  }

	  // ignore unnecessary end() calls.
	  if (!state.ending && !state.finished) endWritable$1(this, state, cb);
	};

	function needFinish$1(state) {
	  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
	}
	function callFinal$1(stream, state) {
	  stream._final(function (err) {
	    state.pendingcb--;
	    if (err) {
	      stream.emit('error', err);
	    }
	    state.prefinished = true;
	    stream.emit('prefinish');
	    finishMaybe$1(stream, state);
	  });
	}
	function prefinish$2(stream, state) {
	  if (!state.prefinished && !state.finalCalled) {
	    if (typeof stream._final === 'function') {
	      state.pendingcb++;
	      state.finalCalled = true;
	      processNextickArgs.nextTick(callFinal$1, stream, state);
	    } else {
	      state.prefinished = true;
	      stream.emit('prefinish');
	    }
	  }
	}

	function finishMaybe$1(stream, state) {
	  var need = needFinish$1(state);
	  if (need) {
	    prefinish$2(stream, state);
	    if (state.pendingcb === 0) {
	      state.finished = true;
	      stream.emit('finish');
	    }
	  }
	  return need;
	}

	function endWritable$1(stream, state, cb) {
	  state.ending = true;
	  finishMaybe$1(stream, state);
	  if (cb) {
	    if (state.finished) processNextickArgs.nextTick(cb);else stream.once('finish', cb);
	  }
	  state.ended = true;
	  stream.writable = false;
	}

	function onCorkedFinish$1(corkReq, state, err) {
	  var entry = corkReq.entry;
	  corkReq.entry = null;
	  while (entry) {
	    var cb = entry.callback;
	    state.pendingcb--;
	    cb(err);
	    entry = entry.next;
	  }
	  if (state.corkedRequestsFree) {
	    state.corkedRequestsFree.next = corkReq;
	  } else {
	    state.corkedRequestsFree = corkReq;
	  }
	}

	Object.defineProperty(Writable$3.prototype, 'destroyed', {
	  get: function () {
	    if (this._writableState === undefined) {
	      return false;
	    }
	    return this._writableState.destroyed;
	  },
	  set: function (value) {
	    // we ignore the value if the stream
	    // has not been initialized yet
	    if (!this._writableState) {
	      return;
	    }

	    // backward compatibility, the user is explicitly
	    // managing destroyed
	    this._writableState.destroyed = value;
	  }
	});

	Writable$3.prototype.destroy = destroy_1$1.destroy;
	Writable$3.prototype._undestroy = destroy_1$1.undestroy;
	Writable$3.prototype._destroy = function (err, cb) {
	  this.end();
	  cb(err);
	};

	var writable = createCommonjsModule(function (module) {
	if (process.env.READABLE_STREAM === 'disable') {
	  module.exports = require$$0__default['default'] && require$$0__default['default'].Writable || _stream_writable$3;
	} else {
	  module.exports = _stream_writable$3;
	}
	});

	var legacy$1 = createCommonjsModule(function (module) {


	const { LEVEL } = tripleBeam;


	/**
	 * Constructor function for the LegacyTransportStream. This is an internal
	 * wrapper `winston >= 3` uses to wrap older transports implementing
	 * log(level, message, meta).
	 * @param {Object} options - Options for this TransportStream instance.
	 * @param {Transpot} options.transport - winston@2 or older Transport to wrap.
	 */

	const LegacyTransportStream = module.exports = function LegacyTransportStream(options = {}) {
	  winstonTransport.call(this, options);
	  if (!options.transport || typeof options.transport.log !== 'function') {
	    throw new Error('Invalid transport, must be an object with a log method.');
	  }

	  this.transport = options.transport;
	  this.level = this.level || options.transport.level;
	  this.handleExceptions = this.handleExceptions || options.transport.handleExceptions;

	  // Display our deprecation notice.
	  this._deprecated();

	  // Properly bubble up errors from the transport to the
	  // LegacyTransportStream instance, but only once no matter how many times
	  // this transport is shared.
	  function transportError(err) {
	    this.emit('error', err, this.transport);
	  }

	  if (!this.transport.__winstonError) {
	    this.transport.__winstonError = transportError.bind(this);
	    this.transport.on('error', this.transport.__winstonError);
	  }
	};

	/*
	 * Inherit from TransportStream using Node.js built-ins
	 */
	util__default['default'].inherits(LegacyTransportStream, winstonTransport);

	/**
	 * Writes the info object to our transport instance.
	 * @param {mixed} info - TODO: add param description.
	 * @param {mixed} enc - TODO: add param description.
	 * @param {function} callback - TODO: add param description.
	 * @returns {undefined}
	 * @private
	 */
	LegacyTransportStream.prototype._write = function _write(info, enc, callback) {
	  if (this.silent || (info.exception === true && !this.handleExceptions)) {
	    return callback(null);
	  }

	  // Remark: This has to be handled in the base transport now because we
	  // cannot conditionally write to our pipe targets as stream.
	  if (!this.level || this.levels[this.level] >= this.levels[info[LEVEL]]) {
	    this.transport.log(info[LEVEL], info.message, info, this._nop);
	  }

	  callback(null);
	};

	/**
	 * Writes the batch of info objects (i.e. "object chunks") to our transport
	 * instance after performing any necessary filtering.
	 * @param {mixed} chunks - TODO: add params description.
	 * @param {function} callback - TODO: add params description.
	 * @returns {mixed} - TODO: add returns description.
	 * @private
	 */
	LegacyTransportStream.prototype._writev = function _writev(chunks, callback) {
	  for (let i = 0; i < chunks.length; i++) {
	    if (this._accept(chunks[i])) {
	      this.transport.log(
	        chunks[i].chunk[LEVEL],
	        chunks[i].chunk.message,
	        chunks[i].chunk,
	        this._nop
	      );
	      chunks[i].callback();
	    }
	  }

	  return callback(null);
	};

	/**
	 * Displays a deprecation notice. Defined as a function so it can be
	 * overriden in tests.
	 * @returns {undefined}
	 */
	LegacyTransportStream.prototype._deprecated = function _deprecated() {
	  // eslint-disable-next-line no-console
	  console.error([
	    `${this.transport.name} is a legacy winston transport. Consider upgrading: `,
	    '- Upgrade docs: https://github.com/winstonjs/winston/blob/master/UPGRADE-3.0.md'
	  ].join('\n'));
	};

	/**
	 * Clean up error handling state on the legacy transport associated
	 * with this instance.
	 * @returns {undefined}
	 */
	LegacyTransportStream.prototype.close = function close() {
	  if (this.transport.close) {
	    this.transport.close();
	  }

	  if (this.transport.__winstonError) {
	    this.transport.removeListener('error', this.transport.__winstonError);
	    this.transport.__winstonError = null;
	  }
	};
	});

	var winstonTransport = createCommonjsModule(function (module) {



	const { LEVEL } = tripleBeam;

	/**
	 * Constructor function for the TransportStream. This is the base prototype
	 * that all `winston >= 3` transports should inherit from.
	 * @param {Object} options - Options for this TransportStream instance
	 * @param {String} options.level - Highest level according to RFC5424.
	 * @param {Boolean} options.handleExceptions - If true, info with
	 * { exception: true } will be written.
	 * @param {Function} options.log - Custom log function for simple Transport
	 * creation
	 * @param {Function} options.close - Called on "unpipe" from parent.
	 */
	const TransportStream = module.exports = function TransportStream(options = {}) {
	  writable.call(this, { objectMode: true, highWaterMark: options.highWaterMark });

	  this.format = options.format;
	  this.level = options.level;
	  this.handleExceptions = options.handleExceptions;
	  this.handleRejections = options.handleRejections;
	  this.silent = options.silent;

	  if (options.log) this.log = options.log;
	  if (options.logv) this.logv = options.logv;
	  if (options.close) this.close = options.close;

	  // Get the levels from the source we are piped from.
	  this.once('pipe', logger => {
	    // Remark (indexzero): this bookkeeping can only support multiple
	    // Logger parents with the same `levels`. This comes into play in
	    // the `winston.Container` code in which `container.add` takes
	    // a fully realized set of options with pre-constructed TransportStreams.
	    this.levels = logger.levels;
	    this.parent = logger;
	  });

	  // If and/or when the transport is removed from this instance
	  this.once('unpipe', src => {
	    // Remark (indexzero): this bookkeeping can only support multiple
	    // Logger parents with the same `levels`. This comes into play in
	    // the `winston.Container` code in which `container.add` takes
	    // a fully realized set of options with pre-constructed TransportStreams.
	    if (src === this.parent) {
	      this.parent = null;
	      if (this.close) {
	        this.close();
	      }
	    }
	  });
	};

	/*
	 * Inherit from Writeable using Node.js built-ins
	 */
	util__default['default'].inherits(TransportStream, writable);

	/**
	 * Writes the info object to our transport instance.
	 * @param {mixed} info - TODO: add param description.
	 * @param {mixed} enc - TODO: add param description.
	 * @param {function} callback - TODO: add param description.
	 * @returns {undefined}
	 * @private
	 */
	TransportStream.prototype._write = function _write(info, enc, callback) {
	  if (this.silent || (info.exception === true && !this.handleExceptions)) {
	    return callback(null);
	  }

	  // Remark: This has to be handled in the base transport now because we
	  // cannot conditionally write to our pipe targets as stream. We always
	  // prefer any explicit level set on the Transport itself falling back to
	  // any level set on the parent.
	  const level = this.level || (this.parent && this.parent.level);

	  if (!level || this.levels[level] >= this.levels[info[LEVEL]]) {
	    if (info && !this.format) {
	      return this.log(info, callback);
	    }

	    let errState;
	    let transformed;

	    // We trap(and re-throw) any errors generated by the user-provided format, but also
	    // guarantee that the streams callback is invoked so that we can continue flowing.
	    try {
	      transformed = this.format.transform(Object.assign({}, info), this.format.options);
	    } catch (err) {
	      errState = err;
	    }

	    if (errState || !transformed) {
	      // eslint-disable-next-line callback-return
	      callback();
	      if (errState) throw errState;
	      return;
	    }

	    return this.log(transformed, callback);
	  }

	  return callback(null);
	};

	/**
	 * Writes the batch of info objects (i.e. "object chunks") to our transport
	 * instance after performing any necessary filtering.
	 * @param {mixed} chunks - TODO: add params description.
	 * @param {function} callback - TODO: add params description.
	 * @returns {mixed} - TODO: add returns description.
	 * @private
	 */
	TransportStream.prototype._writev = function _writev(chunks, callback) {
	  if (this.logv) {
	    const infos = chunks.filter(this._accept, this);
	    if (!infos.length) {
	      return callback(null);
	    }

	    // Remark (indexzero): from a performance perspective if Transport
	    // implementers do choose to implement logv should we make it their
	    // responsibility to invoke their format?
	    return this.logv(infos, callback);
	  }

	  for (let i = 0; i < chunks.length; i++) {
	    if (!this._accept(chunks[i])) continue;

	    if (chunks[i].chunk && !this.format) {
	      this.log(chunks[i].chunk, chunks[i].callback);
	      continue;
	    }

	    let errState;
	    let transformed;

	    // We trap(and re-throw) any errors generated by the user-provided format, but also
	    // guarantee that the streams callback is invoked so that we can continue flowing.
	    try {
	      transformed = this.format.transform(
	        Object.assign({}, chunks[i].chunk),
	        this.format.options
	      );
	    } catch (err) {
	      errState = err;
	    }

	    if (errState || !transformed) {
	      // eslint-disable-next-line callback-return
	      chunks[i].callback();
	      if (errState) {
	        // eslint-disable-next-line callback-return
	        callback(null);
	        throw errState;
	      }
	    } else {
	      this.log(transformed, chunks[i].callback);
	    }
	  }

	  return callback(null);
	};

	/**
	 * Predicate function that returns true if the specfied `info` on the
	 * WriteReq, `write`, should be passed down into the derived
	 * TransportStream's I/O via `.log(info, callback)`.
	 * @param {WriteReq} write - winston@3 Node.js WriteReq for the `info` object
	 * representing the log message.
	 * @returns {Boolean} - Value indicating if the `write` should be accepted &
	 * logged.
	 */
	TransportStream.prototype._accept = function _accept(write) {
	  const info = write.chunk;
	  if (this.silent) {
	    return false;
	  }

	  // We always prefer any explicit level set on the Transport itself
	  // falling back to any level set on the parent.
	  const level = this.level || (this.parent && this.parent.level);

	  // Immediately check the average case: log level filtering.
	  if (
	    info.exception === true ||
	    !level ||
	    this.levels[level] >= this.levels[info[LEVEL]]
	  ) {
	    // Ensure the info object is valid based on `{ exception }`:
	    // 1. { handleExceptions: true }: all `info` objects are valid
	    // 2. { exception: false }: accepted by all transports.
	    if (this.handleExceptions || info.exception !== true) {
	      return true;
	    }
	  }

	  return false;
	};

	/**
	 * _nop is short for "No operation"
	 * @returns {Boolean} Intentionally false.
	 */
	TransportStream.prototype._nop = function _nop() {
	  // eslint-disable-next-line no-undefined
	  return void undefined;
	};


	// Expose legacy stream
	module.exports.LegacyTransportStream = legacy$1;
	});

	/* eslint-disable no-console */


	const { LEVEL: LEVEL$2, MESSAGE: MESSAGE$3 } = tripleBeam;


	/**
	 * Transport for outputting to the console.
	 * @type {Console}
	 * @extends {TransportStream}
	 */
	var console_1$1 = class Console extends winstonTransport {
	  /**
	   * Constructor function for the Console transport object responsible for
	   * persisting log messages and metadata to a terminal or TTY.
	   * @param {!Object} [options={}] - Options for this instance.
	   */
	  constructor(options = {}) {
	    super(options);

	    // Expose the name of this Transport on the prototype
	    this.name = options.name || 'console';
	    this.stderrLevels = this._stringArrayToSet(options.stderrLevels);
	    this.consoleWarnLevels = this._stringArrayToSet(options.consoleWarnLevels);
	    this.eol = options.eol || os__default['default'].EOL;

	    this.setMaxListeners(30);
	  }

	  /**
	   * Core logging method exposed to Winston.
	   * @param {Object} info - TODO: add param description.
	   * @param {Function} callback - TODO: add param description.
	   * @returns {undefined}
	   */
	  log(info, callback) {
	    setImmediate(() => this.emit('logged', info));

	    // Remark: what if there is no raw...?
	    if (this.stderrLevels[info[LEVEL$2]]) {
	      if (console._stderr) {
	        // Node.js maps `process.stderr` to `console._stderr`.
	        console._stderr.write(`${info[MESSAGE$3]}${this.eol}`);
	      } else {
	        // console.error adds a newline
	        console.error(info[MESSAGE$3]);
	      }

	      if (callback) {
	        callback(); // eslint-disable-line callback-return
	      }
	      return;
	    } else if (this.consoleWarnLevels[info[LEVEL$2]]) {
	      if (console._stderr) {
	        // Node.js maps `process.stderr` to `console._stderr`.
	        // in Node.js console.warn is an alias for console.error
	        console._stderr.write(`${info[MESSAGE$3]}${this.eol}`);
	      } else {
	        // console.warn adds a newline
	        console.warn(info[MESSAGE$3]);
	      }

	      if (callback) {
	        callback(); // eslint-disable-line callback-return
	      }
	      return;
	    }

	    if (console._stdout) {
	      // Node.js maps `process.stdout` to `console._stdout`.
	      console._stdout.write(`${info[MESSAGE$3]}${this.eol}`);
	    } else {
	      // console.log adds a newline.
	      console.log(info[MESSAGE$3]);
	    }

	    if (callback) {
	      callback(); // eslint-disable-line callback-return
	    }
	  }

	  /**
	   * Returns a Set-like object with strArray's elements as keys (each with the
	   * value true).
	   * @param {Array} strArray - Array of Set-elements as strings.
	   * @param {?string} [errMsg] - Custom error message thrown on invalid input.
	   * @returns {Object} - TODO: add return description.
	   * @private
	   */
	  _stringArrayToSet(strArray, errMsg) {
	    if (!strArray)
	      return {};

	    errMsg = errMsg || 'Cannot make set from type other than Array of string elements';

	    if (!Array.isArray(strArray)) {
	      throw new Error(errMsg);
	    }

	    return strArray.reduce((set, el) =>  {
	      if (typeof el !== 'string') {
	        throw new Error(errMsg);
	      }
	      set[el] = true;

	      return set;
	    }, {});
	  }
	};

	var isArrayLike_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = isArrayLike;
	function isArrayLike(value) {
	    return value && typeof value.length === 'number' && value.length >= 0 && value.length % 1 === 0;
	}
	module.exports = exports['default'];
	});

	var initialParams = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	exports.default = function (fn) {
	    return function (...args /*, callback*/) {
	        var callback = args.pop();
	        return fn.call(this, args, callback);
	    };
	};

	module.exports = exports["default"];
	});

	var setImmediate_1 = createCommonjsModule(function (module, exports) {
	/* istanbul ignore file */

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.fallback = fallback;
	exports.wrap = wrap;
	var hasSetImmediate = exports.hasSetImmediate = typeof setImmediate === 'function' && setImmediate;
	var hasNextTick = exports.hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';

	function fallback(fn) {
	    setTimeout(fn, 0);
	}

	function wrap(defer) {
	    return (fn, ...args) => defer(() => fn(...args));
	}

	var _defer;

	if (hasSetImmediate) {
	    _defer = setImmediate;
	} else if (hasNextTick) {
	    _defer = process.nextTick;
	} else {
	    _defer = fallback;
	}

	exports.default = wrap(_defer);
	});

	var asyncify_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = asyncify;



	var _initialParams2 = _interopRequireDefault(initialParams);



	var _setImmediate2 = _interopRequireDefault(setImmediate_1);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Take a sync function and make it async, passing its return value to a
	 * callback. This is useful for plugging sync functions into a waterfall,
	 * series, or other async functions. Any arguments passed to the generated
	 * function will be passed to the wrapped function (except for the final
	 * callback argument). Errors thrown will be passed to the callback.
	 *
	 * If the function passed to `asyncify` returns a Promise, that promises's
	 * resolved/rejected state will be used to call the callback, rather than simply
	 * the synchronous return value.
	 *
	 * This also means you can asyncify ES2017 `async` functions.
	 *
	 * @name asyncify
	 * @static
	 * @memberOf module:Utils
	 * @method
	 * @alias wrapSync
	 * @category Util
	 * @param {Function} func - The synchronous function, or Promise-returning
	 * function to convert to an {@link AsyncFunction}.
	 * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be
	 * invoked with `(args..., callback)`.
	 * @example
	 *
	 * // passing a regular synchronous function
	 * async.waterfall([
	 *     async.apply(fs.readFile, filename, "utf8"),
	 *     async.asyncify(JSON.parse),
	 *     function (data, next) {
	 *         // data is the result of parsing the text.
	 *         // If there was a parsing error, it would have been caught.
	 *     }
	 * ], callback);
	 *
	 * // passing a function returning a promise
	 * async.waterfall([
	 *     async.apply(fs.readFile, filename, "utf8"),
	 *     async.asyncify(function (contents) {
	 *         return db.model.create(contents);
	 *     }),
	 *     function (model, next) {
	 *         // `model` is the instantiated model object.
	 *         // If there was an error, this function would be skipped.
	 *     }
	 * ], callback);
	 *
	 * // es2017 example, though `asyncify` is not needed if your JS environment
	 * // supports async functions out of the box
	 * var q = async.queue(async.asyncify(async function(file) {
	 *     var intermediateStep = await processFile(file);
	 *     return await somePromise(intermediateStep)
	 * }));
	 *
	 * q.push(files);
	 */
	function asyncify(func) {
	    if ((0, wrapAsync_1.isAsync)(func)) {
	        return function (...args /*, callback*/) {
	            const callback = args.pop();
	            const promise = func.apply(this, args);
	            return handlePromise(promise, callback);
	        };
	    }

	    return (0, _initialParams2.default)(function (args, callback) {
	        var result;
	        try {
	            result = func.apply(this, args);
	        } catch (e) {
	            return callback(e);
	        }
	        // if result is Promise object
	        if (result && typeof result.then === 'function') {
	            return handlePromise(result, callback);
	        } else {
	            callback(null, result);
	        }
	    });
	}

	function handlePromise(promise, callback) {
	    return promise.then(value => {
	        invokeCallback(callback, null, value);
	    }, err => {
	        invokeCallback(callback, err && err.message ? err : new Error(err));
	    });
	}

	function invokeCallback(callback, error, value) {
	    try {
	        callback(error, value);
	    } catch (err) {
	        (0, _setImmediate2.default)(e => {
	            throw e;
	        }, err);
	    }
	}
	module.exports = exports['default'];
	});

	var wrapAsync_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.isAsyncIterable = exports.isAsyncGenerator = exports.isAsync = undefined;



	var _asyncify2 = _interopRequireDefault(asyncify_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function isAsync(fn) {
	    return fn[Symbol.toStringTag] === 'AsyncFunction';
	}

	function isAsyncGenerator(fn) {
	    return fn[Symbol.toStringTag] === 'AsyncGenerator';
	}

	function isAsyncIterable(obj) {
	    return typeof obj[Symbol.asyncIterator] === 'function';
	}

	function wrapAsync(asyncFn) {
	    if (typeof asyncFn !== 'function') throw new Error('expected a function');
	    return isAsync(asyncFn) ? (0, _asyncify2.default)(asyncFn) : asyncFn;
	}

	exports.default = wrapAsync;
	exports.isAsync = isAsync;
	exports.isAsyncGenerator = isAsyncGenerator;
	exports.isAsyncIterable = isAsyncIterable;
	});

	var awaitify_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = awaitify;
	// conditionally promisify a function.
	// only return a promise if a callback is omitted
	function awaitify(asyncFn, arity = asyncFn.length) {
	    if (!arity) throw new Error('arity is undefined');
	    function awaitable(...args) {
	        if (typeof args[arity - 1] === 'function') {
	            return asyncFn.apply(this, args);
	        }

	        return new Promise((resolve, reject) => {
	            args[arity - 1] = (err, ...cbArgs) => {
	                if (err) return reject(err);
	                resolve(cbArgs.length > 1 ? cbArgs : cbArgs[0]);
	            };
	            asyncFn.apply(this, args);
	        });
	    }

	    return awaitable;
	}
	module.exports = exports['default'];
	});

	var parallel$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});



	var _isArrayLike2 = _interopRequireDefault(isArrayLike_1);



	var _wrapAsync2 = _interopRequireDefault(wrapAsync_1);



	var _awaitify2 = _interopRequireDefault(awaitify_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = (0, _awaitify2.default)((eachfn, tasks, callback) => {
	    var results = (0, _isArrayLike2.default)(tasks) ? [] : {};

	    eachfn(tasks, (task, key, taskCb) => {
	        (0, _wrapAsync2.default)(task)((err, ...result) => {
	            if (result.length < 2) {
	                [result] = result;
	            }
	            results[key] = result;
	            taskCb(err);
	        });
	    }, err => callback(err, results));
	}, 3);
	module.exports = exports['default'];
	});

	var once_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = once;
	function once(fn) {
	    function wrapper(...args) {
	        if (fn === null) return;
	        var callFn = fn;
	        fn = null;
	        callFn.apply(this, args);
	    }
	    Object.assign(wrapper, fn);
	    return wrapper;
	}
	module.exports = exports["default"];
	});

	var getIterator = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	exports.default = function (coll) {
	    return coll[Symbol.iterator] && coll[Symbol.iterator]();
	};

	module.exports = exports["default"];
	});

	var iterator = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = createIterator;



	var _isArrayLike2 = _interopRequireDefault(isArrayLike_1);



	var _getIterator2 = _interopRequireDefault(getIterator);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function createArrayIterator(coll) {
	    var i = -1;
	    var len = coll.length;
	    return function next() {
	        return ++i < len ? { value: coll[i], key: i } : null;
	    };
	}

	function createES2015Iterator(iterator) {
	    var i = -1;
	    return function next() {
	        var item = iterator.next();
	        if (item.done) return null;
	        i++;
	        return { value: item.value, key: i };
	    };
	}

	function createObjectIterator(obj) {
	    var okeys = obj ? Object.keys(obj) : [];
	    var i = -1;
	    var len = okeys.length;
	    return function next() {
	        var key = okeys[++i];
	        return i < len ? { value: obj[key], key } : null;
	    };
	}

	function createIterator(coll) {
	    if ((0, _isArrayLike2.default)(coll)) {
	        return createArrayIterator(coll);
	    }

	    var iterator = (0, _getIterator2.default)(coll);
	    return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);
	}
	module.exports = exports['default'];
	});

	var onlyOnce_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = onlyOnce;
	function onlyOnce(fn) {
	    return function (...args) {
	        if (fn === null) throw new Error("Callback was already called.");
	        var callFn = fn;
	        fn = null;
	        callFn.apply(this, args);
	    };
	}
	module.exports = exports["default"];
	});

	var breakLoop_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	// A temporary value used to identify if the loop should be broken.
	// See #1064, #1293
	const breakLoop = {};
	exports.default = breakLoop;
	module.exports = exports["default"];
	});

	var asyncEachOfLimit_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = asyncEachOfLimit;



	var _breakLoop2 = _interopRequireDefault(breakLoop_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// for async generators
	function asyncEachOfLimit(generator, limit, iteratee, callback) {
	    let done = false;
	    let canceled = false;
	    let awaiting = false;
	    let running = 0;
	    let idx = 0;

	    function replenish() {
	        //console.log('replenish')
	        if (running >= limit || awaiting || done) return;
	        //console.log('replenish awaiting')
	        awaiting = true;
	        generator.next().then(({ value, done: iterDone }) => {
	            //console.log('got value', value)
	            if (canceled || done) return;
	            awaiting = false;
	            if (iterDone) {
	                done = true;
	                if (running <= 0) {
	                    //console.log('done nextCb')
	                    callback(null);
	                }
	                return;
	            }
	            running++;
	            iteratee(value, idx, iterateeCallback);
	            idx++;
	            replenish();
	        }).catch(handleError);
	    }

	    function iterateeCallback(err, result) {
	        //console.log('iterateeCallback')
	        running -= 1;
	        if (canceled) return;
	        if (err) return handleError(err);

	        if (err === false) {
	            done = true;
	            canceled = true;
	            return;
	        }

	        if (result === _breakLoop2.default || done && running <= 0) {
	            done = true;
	            //console.log('done iterCb')
	            return callback(null);
	        }
	        replenish();
	    }

	    function handleError(err) {
	        if (canceled) return;
	        awaiting = false;
	        done = true;
	        callback(err);
	    }

	    replenish();
	}
	module.exports = exports['default'];
	});

	var eachOfLimit = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});



	var _once2 = _interopRequireDefault(once_1);



	var _iterator2 = _interopRequireDefault(iterator);



	var _onlyOnce2 = _interopRequireDefault(onlyOnce_1);





	var _asyncEachOfLimit2 = _interopRequireDefault(asyncEachOfLimit_1);



	var _breakLoop2 = _interopRequireDefault(breakLoop_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = limit => {
	    return (obj, iteratee, callback) => {
	        callback = (0, _once2.default)(callback);
	        if (limit <= 0) {
	            throw new RangeError('concurrency limit cannot be less than 1');
	        }
	        if (!obj) {
	            return callback(null);
	        }
	        if ((0, wrapAsync_1.isAsyncGenerator)(obj)) {
	            return (0, _asyncEachOfLimit2.default)(obj, limit, iteratee, callback);
	        }
	        if ((0, wrapAsync_1.isAsyncIterable)(obj)) {
	            return (0, _asyncEachOfLimit2.default)(obj[Symbol.asyncIterator](), limit, iteratee, callback);
	        }
	        var nextElem = (0, _iterator2.default)(obj);
	        var done = false;
	        var canceled = false;
	        var running = 0;
	        var looping = false;

	        function iterateeCallback(err, value) {
	            if (canceled) return;
	            running -= 1;
	            if (err) {
	                done = true;
	                callback(err);
	            } else if (err === false) {
	                done = true;
	                canceled = true;
	            } else if (value === _breakLoop2.default || done && running <= 0) {
	                done = true;
	                return callback(null);
	            } else if (!looping) {
	                replenish();
	            }
	        }

	        function replenish() {
	            looping = true;
	            while (running < limit && !done) {
	                var elem = nextElem();
	                if (elem === null) {
	                    done = true;
	                    if (running <= 0) {
	                        callback(null);
	                    }
	                    return;
	                }
	                running += 1;
	                iteratee(elem.value, elem.key, (0, _onlyOnce2.default)(iterateeCallback));
	            }
	            looping = false;
	        }

	        replenish();
	    };
	};

	module.exports = exports['default'];
	});

	var eachOfLimit_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _eachOfLimit3 = _interopRequireDefault(eachOfLimit);



	var _wrapAsync2 = _interopRequireDefault(wrapAsync_1);



	var _awaitify2 = _interopRequireDefault(awaitify_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a
	 * time.
	 *
	 * @name eachOfLimit
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @see [async.eachOf]{@link module:Collections.eachOf}
	 * @alias forEachOfLimit
	 * @category Collection
	 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
	 * @param {number} limit - The maximum number of async operations at a time.
	 * @param {AsyncFunction} iteratee - An async function to apply to each
	 * item in `coll`. The `key` is the item's key, or index in the case of an
	 * array.
	 * Invoked with (item, key, callback).
	 * @param {Function} [callback] - A callback which is called when all
	 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
	 * @returns {Promise} a promise, if a callback is omitted
	 */
	function eachOfLimit$1(coll, limit, iteratee, callback) {
	  return (0, _eachOfLimit3.default)(limit)(coll, (0, _wrapAsync2.default)(iteratee), callback);
	}

	exports.default = (0, _awaitify2.default)(eachOfLimit$1, 4);
	module.exports = exports['default'];
	});

	var eachOfSeries_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _eachOfLimit2 = _interopRequireDefault(eachOfLimit_1);



	var _awaitify2 = _interopRequireDefault(awaitify_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.
	 *
	 * @name eachOfSeries
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @see [async.eachOf]{@link module:Collections.eachOf}
	 * @alias forEachOfSeries
	 * @category Collection
	 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
	 * @param {AsyncFunction} iteratee - An async function to apply to each item in
	 * `coll`.
	 * Invoked with (item, key, callback).
	 * @param {Function} [callback] - A callback which is called when all `iteratee`
	 * functions have finished, or an error occurs. Invoked with (err).
	 * @returns {Promise} a promise, if a callback is omitted
	 */
	function eachOfSeries(coll, iteratee, callback) {
	  return (0, _eachOfLimit2.default)(coll, 1, iteratee, callback);
	}
	exports.default = (0, _awaitify2.default)(eachOfSeries, 3);
	module.exports = exports['default'];
	});

	var series_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = series;



	var _parallel3 = _interopRequireDefault(parallel$1);



	var _eachOfSeries2 = _interopRequireDefault(eachOfSeries_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Run the functions in the `tasks` collection in series, each one running once
	 * the previous function has completed. If any functions in the series pass an
	 * error to its callback, no more functions are run, and `callback` is
	 * immediately called with the value of the error. Otherwise, `callback`
	 * receives an array of results when `tasks` have completed.
	 *
	 * It is also possible to use an object instead of an array. Each property will
	 * be run as a function, and the results will be passed to the final `callback`
	 * as an object instead of an array. This can be a more readable way of handling
	 *  results from {@link async.series}.
	 *
	 * **Note** that while many implementations preserve the order of object
	 * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)
	 * explicitly states that
	 *
	 * > The mechanics and order of enumerating the properties is not specified.
	 *
	 * So if you rely on the order in which your series of functions are executed,
	 * and want this to work on all platforms, consider using an array.
	 *
	 * @name series
	 * @static
	 * @memberOf module:ControlFlow
	 * @method
	 * @category Control Flow
	 * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing
	 * [async functions]{@link AsyncFunction} to run in series.
	 * Each function can complete with any number of optional `result` values.
	 * @param {Function} [callback] - An optional callback to run once all the
	 * functions have completed. This function gets a results array (or object)
	 * containing all the result arguments passed to the `task` callbacks. Invoked
	 * with (err, result).
	 * @return {Promise} a promise, if no callback is passed
	 * @example
	 * async.series([
	 *     function(callback) {
	 *         // do some stuff ...
	 *         callback(null, 'one');
	 *     },
	 *     function(callback) {
	 *         // do some more stuff ...
	 *         callback(null, 'two');
	 *     }
	 * ],
	 * // optional callback
	 * function(err, results) {
	 *     // results is now equal to ['one', 'two']
	 * });
	 *
	 * async.series({
	 *     one: function(callback) {
	 *         setTimeout(function() {
	 *             callback(null, 1);
	 *         }, 200);
	 *     },
	 *     two: function(callback){
	 *         setTimeout(function() {
	 *             callback(null, 2);
	 *         }, 100);
	 *     }
	 * }, function(err, results) {
	 *     // results is now equal to: {one: 1, two: 2}
	 * });
	 */
	function series(tasks, callback) {
	  return (0, _parallel3.default)(_eachOfSeries2.default, tasks, callback);
	}
	module.exports = exports['default'];
	});

	var stream$4 = require$$0__default['default'];

	function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1(Object(source), true).forEach(function (key) { _defineProperty$2(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _defineProperty$2(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

	var Buffer$F = buffer__default['default'].Buffer;

	var inspect = util__default['default'].inspect;

	var custom$1 = inspect && inspect.custom || 'inspect';

	function copyBuffer(src, target, offset) {
	  Buffer$F.prototype.copy.call(src, target, offset);
	}

	var buffer_list =
	/*#__PURE__*/
	function () {
	  function BufferList() {
	    _classCallCheck(this, BufferList);

	    this.head = null;
	    this.tail = null;
	    this.length = 0;
	  }

	  _createClass(BufferList, [{
	    key: "push",
	    value: function push(v) {
	      var entry = {
	        data: v,
	        next: null
	      };
	      if (this.length > 0) this.tail.next = entry;else this.head = entry;
	      this.tail = entry;
	      ++this.length;
	    }
	  }, {
	    key: "unshift",
	    value: function unshift(v) {
	      var entry = {
	        data: v,
	        next: this.head
	      };
	      if (this.length === 0) this.tail = entry;
	      this.head = entry;
	      ++this.length;
	    }
	  }, {
	    key: "shift",
	    value: function shift() {
	      if (this.length === 0) return;
	      var ret = this.head.data;
	      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
	      --this.length;
	      return ret;
	    }
	  }, {
	    key: "clear",
	    value: function clear() {
	      this.head = this.tail = null;
	      this.length = 0;
	    }
	  }, {
	    key: "join",
	    value: function join(s) {
	      if (this.length === 0) return '';
	      var p = this.head;
	      var ret = '' + p.data;

	      while (p = p.next) {
	        ret += s + p.data;
	      }

	      return ret;
	    }
	  }, {
	    key: "concat",
	    value: function concat(n) {
	      if (this.length === 0) return Buffer$F.alloc(0);
	      var ret = Buffer$F.allocUnsafe(n >>> 0);
	      var p = this.head;
	      var i = 0;

	      while (p) {
	        copyBuffer(p.data, ret, i);
	        i += p.data.length;
	        p = p.next;
	      }

	      return ret;
	    } // Consumes a specified amount of bytes or characters from the buffered data.

	  }, {
	    key: "consume",
	    value: function consume(n, hasStrings) {
	      var ret;

	      if (n < this.head.data.length) {
	        // `slice` is the same for buffers and strings.
	        ret = this.head.data.slice(0, n);
	        this.head.data = this.head.data.slice(n);
	      } else if (n === this.head.data.length) {
	        // First chunk is a perfect match.
	        ret = this.shift();
	      } else {
	        // Result spans more than one buffer.
	        ret = hasStrings ? this._getString(n) : this._getBuffer(n);
	      }

	      return ret;
	    }
	  }, {
	    key: "first",
	    value: function first() {
	      return this.head.data;
	    } // Consumes a specified amount of characters from the buffered data.

	  }, {
	    key: "_getString",
	    value: function _getString(n) {
	      var p = this.head;
	      var c = 1;
	      var ret = p.data;
	      n -= ret.length;

	      while (p = p.next) {
	        var str = p.data;
	        var nb = n > str.length ? str.length : n;
	        if (nb === str.length) ret += str;else ret += str.slice(0, n);
	        n -= nb;

	        if (n === 0) {
	          if (nb === str.length) {
	            ++c;
	            if (p.next) this.head = p.next;else this.head = this.tail = null;
	          } else {
	            this.head = p;
	            p.data = str.slice(nb);
	          }

	          break;
	        }

	        ++c;
	      }

	      this.length -= c;
	      return ret;
	    } // Consumes a specified amount of bytes from the buffered data.

	  }, {
	    key: "_getBuffer",
	    value: function _getBuffer(n) {
	      var ret = Buffer$F.allocUnsafe(n);
	      var p = this.head;
	      var c = 1;
	      p.data.copy(ret);
	      n -= p.data.length;

	      while (p = p.next) {
	        var buf = p.data;
	        var nb = n > buf.length ? buf.length : n;
	        buf.copy(ret, ret.length - n, 0, nb);
	        n -= nb;

	        if (n === 0) {
	          if (nb === buf.length) {
	            ++c;
	            if (p.next) this.head = p.next;else this.head = this.tail = null;
	          } else {
	            this.head = p;
	            p.data = buf.slice(nb);
	          }

	          break;
	        }

	        ++c;
	      }

	      this.length -= c;
	      return ret;
	    } // Make sure the linked list only shows the minimal necessary information.

	  }, {
	    key: custom$1,
	    value: function value(_, options) {
	      return inspect(this, _objectSpread$1({}, options, {
	        // Only inspect one level.
	        depth: 0,
	        // It should not recurse.
	        customInspect: false
	      }));
	    }
	  }]);

	  return BufferList;
	}();

	function destroy(err, cb) {
	  var _this = this;

	  var readableDestroyed = this._readableState && this._readableState.destroyed;
	  var writableDestroyed = this._writableState && this._writableState.destroyed;

	  if (readableDestroyed || writableDestroyed) {
	    if (cb) {
	      cb(err);
	    } else if (err) {
	      if (!this._writableState) {
	        process.nextTick(emitErrorNT, this, err);
	      } else if (!this._writableState.errorEmitted) {
	        this._writableState.errorEmitted = true;
	        process.nextTick(emitErrorNT, this, err);
	      }
	    }

	    return this;
	  } // we set destroyed to true before firing error callbacks in order
	  // to make it re-entrance safe in case destroy() is called within callbacks


	  if (this._readableState) {
	    this._readableState.destroyed = true;
	  } // if this is a duplex stream mark the writable part as destroyed as well


	  if (this._writableState) {
	    this._writableState.destroyed = true;
	  }

	  this._destroy(err || null, function (err) {
	    if (!cb && err) {
	      if (!_this._writableState) {
	        process.nextTick(emitErrorAndCloseNT, _this, err);
	      } else if (!_this._writableState.errorEmitted) {
	        _this._writableState.errorEmitted = true;
	        process.nextTick(emitErrorAndCloseNT, _this, err);
	      } else {
	        process.nextTick(emitCloseNT, _this);
	      }
	    } else if (cb) {
	      process.nextTick(emitCloseNT, _this);
	      cb(err);
	    } else {
	      process.nextTick(emitCloseNT, _this);
	    }
	  });

	  return this;
	}

	function emitErrorAndCloseNT(self, err) {
	  emitErrorNT(self, err);
	  emitCloseNT(self);
	}

	function emitCloseNT(self) {
	  if (self._writableState && !self._writableState.emitClose) return;
	  if (self._readableState && !self._readableState.emitClose) return;
	  self.emit('close');
	}

	function undestroy() {
	  if (this._readableState) {
	    this._readableState.destroyed = false;
	    this._readableState.reading = false;
	    this._readableState.ended = false;
	    this._readableState.endEmitted = false;
	  }

	  if (this._writableState) {
	    this._writableState.destroyed = false;
	    this._writableState.ended = false;
	    this._writableState.ending = false;
	    this._writableState.finalCalled = false;
	    this._writableState.prefinished = false;
	    this._writableState.finished = false;
	    this._writableState.errorEmitted = false;
	  }
	}

	function emitErrorNT(self, err) {
	  self.emit('error', err);
	}

	function errorOrDestroy$2(stream, err) {
	  // We have tests that rely on errors being emitted
	  // in the same tick, so changing this is semver major.
	  // For now when you opt-in to autoDestroy we allow
	  // the error to be emitted nextTick. In a future
	  // semver major update we should change the default to this.
	  var rState = stream._readableState;
	  var wState = stream._writableState;
	  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
	}

	var destroy_1 = {
	  destroy: destroy,
	  undestroy: undestroy,
	  errorOrDestroy: errorOrDestroy$2
	};

	const codes = {};

	function createErrorType(code, message, Base) {
	  if (!Base) {
	    Base = Error;
	  }

	  function getMessage (arg1, arg2, arg3) {
	    if (typeof message === 'string') {
	      return message
	    } else {
	      return message(arg1, arg2, arg3)
	    }
	  }

	  class NodeError extends Base {
	    constructor (arg1, arg2, arg3) {
	      super(getMessage(arg1, arg2, arg3));
	    }
	  }

	  NodeError.prototype.name = Base.name;
	  NodeError.prototype.code = code;

	  codes[code] = NodeError;
	}

	// https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
	function oneOf$1(expected, thing) {
	  if (Array.isArray(expected)) {
	    const len = expected.length;
	    expected = expected.map((i) => String(i));
	    if (len > 2) {
	      return `one of ${thing} ${expected.slice(0, len - 1).join(', ')}, or ` +
	             expected[len - 1];
	    } else if (len === 2) {
	      return `one of ${thing} ${expected[0]} or ${expected[1]}`;
	    } else {
	      return `of ${thing} ${expected[0]}`;
	    }
	  } else {
	    return `of ${thing} ${String(expected)}`;
	  }
	}

	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
	function startsWith$3(str, search, pos) {
		return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
	}

	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
	function endsWith$1(str, search, this_len) {
		if (this_len === undefined || this_len > str.length) {
			this_len = str.length;
		}
		return str.substring(this_len - search.length, this_len) === search;
	}

	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
	function includes(str, search, start) {
	  if (typeof start !== 'number') {
	    start = 0;
	  }

	  if (start + search.length > str.length) {
	    return false;
	  } else {
	    return str.indexOf(search, start) !== -1;
	  }
	}

	createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
	  return 'The value "' + value + '" is invalid for option "' + name + '"'
	}, TypeError);
	createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
	  // determiner: 'must be' or 'must not be'
	  let determiner;
	  if (typeof expected === 'string' && startsWith$3(expected, 'not ')) {
	    determiner = 'must not be';
	    expected = expected.replace(/^not /, '');
	  } else {
	    determiner = 'must be';
	  }

	  let msg;
	  if (endsWith$1(name, ' argument')) {
	    // For cases like 'first argument'
	    msg = `The ${name} ${determiner} ${oneOf$1(expected, 'type')}`;
	  } else {
	    const type = includes(name, '.') ? 'property' : 'argument';
	    msg = `The "${name}" ${type} ${determiner} ${oneOf$1(expected, 'type')}`;
	  }

	  msg += `. Received type ${typeof actual}`;
	  return msg;
	}, TypeError);
	createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
	createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
	  return 'The ' + name + ' method is not implemented'
	});
	createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
	createErrorType('ERR_STREAM_DESTROYED', function (name) {
	  return 'Cannot call ' + name + ' after a stream was destroyed';
	});
	createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
	createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
	createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
	createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
	createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
	  return 'Unknown encoding: ' + arg
	}, TypeError);
	createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');

	var codes_1 = codes;

	var errors$2 = {
		codes: codes_1
	};

	var ERR_INVALID_OPT_VALUE = errors$2.codes.ERR_INVALID_OPT_VALUE;

	function highWaterMarkFrom(options, isDuplex, duplexKey) {
	  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
	}

	function getHighWaterMark$2(state, options, duplexKey, isDuplex) {
	  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);

	  if (hwm != null) {
	    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
	      var name = isDuplex ? duplexKey : 'highWaterMark';
	      throw new ERR_INVALID_OPT_VALUE(name, hwm);
	    }

	    return Math.floor(hwm);
	  } // Default value


	  return state.objectMode ? 16 : 16 * 1024;
	}

	var state$1 = {
	  getHighWaterMark: getHighWaterMark$2
	};

	var _stream_writable$2 = Writable$2;
	// there will be only 2 of these for each stream


	function CorkedRequest(state) {
	  var _this = this;

	  this.next = null;
	  this.entry = null;

	  this.finish = function () {
	    onCorkedFinish(_this, state);
	  };
	}
	/* </replacement> */

	/*<replacement>*/


	var Duplex$3;
	/*</replacement>*/

	Writable$2.WritableState = WritableState;
	/*<replacement>*/

	var internalUtil = {
	  deprecate: node$2
	};
	/*</replacement>*/

	/*<replacement>*/


	/*</replacement>*/


	var Buffer$E = buffer__default['default'].Buffer;

	var OurUint8Array$1 = commonjsGlobal.Uint8Array || function () {};

	function _uint8ArrayToBuffer$1(chunk) {
	  return Buffer$E.from(chunk);
	}

	function _isUint8Array$1(obj) {
	  return Buffer$E.isBuffer(obj) || obj instanceof OurUint8Array$1;
	}



	var getHighWaterMark$1 = state$1.getHighWaterMark;

	var _require$codes$3 = errors$2.codes,
	    ERR_INVALID_ARG_TYPE$2 = _require$codes$3.ERR_INVALID_ARG_TYPE,
	    ERR_METHOD_NOT_IMPLEMENTED$2 = _require$codes$3.ERR_METHOD_NOT_IMPLEMENTED,
	    ERR_MULTIPLE_CALLBACK$1 = _require$codes$3.ERR_MULTIPLE_CALLBACK,
	    ERR_STREAM_CANNOT_PIPE = _require$codes$3.ERR_STREAM_CANNOT_PIPE,
	    ERR_STREAM_DESTROYED$1 = _require$codes$3.ERR_STREAM_DESTROYED,
	    ERR_STREAM_NULL_VALUES = _require$codes$3.ERR_STREAM_NULL_VALUES,
	    ERR_STREAM_WRITE_AFTER_END = _require$codes$3.ERR_STREAM_WRITE_AFTER_END,
	    ERR_UNKNOWN_ENCODING = _require$codes$3.ERR_UNKNOWN_ENCODING;

	var errorOrDestroy$1 = destroy_1.errorOrDestroy;

	inherits(Writable$2, stream$4);

	function nop() {}

	function WritableState(options, stream, isDuplex) {
	  Duplex$3 = Duplex$3 || _stream_duplex$2;
	  options = options || {}; // Duplex streams are both readable and writable, but share
	  // the same options object.
	  // However, some cases require setting options to different
	  // values for the readable and the writable sides of the duplex stream,
	  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.

	  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex$3; // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.

	  this.objectMode = !!options.objectMode;
	  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()

	  this.highWaterMark = getHighWaterMark$1(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called

	  this.finalCalled = false; // drain event flag.

	  this.needDrain = false; // at the start of calling end()

	  this.ending = false; // when end() has been called, and returned

	  this.ended = false; // when 'finish' is emitted

	  this.finished = false; // has it been destroyed

	  this.destroyed = false; // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.

	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.

	  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.

	  this.length = 0; // a flag to see when we're in the middle of a write.

	  this.writing = false; // when true all writes will be buffered until .uncork() call

	  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.

	  this.sync = true; // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.

	  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

	  this.onwrite = function (er) {
	    onwrite(stream, er);
	  }; // the callback that the user supplies to write(chunk,encoding,cb)


	  this.writecb = null; // the amount that is being written when _write is called.

	  this.writelen = 0;
	  this.bufferedRequest = null;
	  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted

	  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams

	  this.prefinished = false; // True if the error was already emitted and should not be thrown again

	  this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.

	  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')

	  this.autoDestroy = !!options.autoDestroy; // count buffered requests

	  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
	  // one allocated and free to use, and we maintain at most two

	  this.corkedRequestsFree = new CorkedRequest(this);
	}

	WritableState.prototype.getBuffer = function getBuffer() {
	  var current = this.bufferedRequest;
	  var out = [];

	  while (current) {
	    out.push(current);
	    current = current.next;
	  }

	  return out;
	};

	(function () {
	  try {
	    Object.defineProperty(WritableState.prototype, 'buffer', {
	      get: internalUtil.deprecate(function writableStateBufferGetter() {
	        return this.getBuffer();
	      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
	    });
	  } catch (_) {}
	})(); // Test _writableState for inheritance to account for Duplex streams,
	// whose prototype chain only points to Readable.


	var realHasInstance;

	if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
	  realHasInstance = Function.prototype[Symbol.hasInstance];
	  Object.defineProperty(Writable$2, Symbol.hasInstance, {
	    value: function value(object) {
	      if (realHasInstance.call(this, object)) return true;
	      if (this !== Writable$2) return false;
	      return object && object._writableState instanceof WritableState;
	    }
	  });
	} else {
	  realHasInstance = function realHasInstance(object) {
	    return object instanceof this;
	  };
	}

	function Writable$2(options) {
	  Duplex$3 = Duplex$3 || _stream_duplex$2; // Writable ctor is applied to Duplexes, too.
	  // `realHasInstance` is necessary because using plain `instanceof`
	  // would return false, as no `_writableState` property is attached.
	  // Trying to use the custom `instanceof` for Writable here will also break the
	  // Node.js LazyTransform implementation, which has a non-trivial getter for
	  // `_writableState` that would lead to infinite recursion.
	  // Checking for a Stream.Duplex instance is faster here instead of inside
	  // the WritableState constructor, at least with V8 6.5

	  var isDuplex = this instanceof Duplex$3;
	  if (!isDuplex && !realHasInstance.call(Writable$2, this)) return new Writable$2(options);
	  this._writableState = new WritableState(options, this, isDuplex); // legacy.

	  this.writable = true;

	  if (options) {
	    if (typeof options.write === 'function') this._write = options.write;
	    if (typeof options.writev === 'function') this._writev = options.writev;
	    if (typeof options.destroy === 'function') this._destroy = options.destroy;
	    if (typeof options.final === 'function') this._final = options.final;
	  }

	  stream$4.call(this);
	} // Otherwise people can pipe Writable streams, which is just wrong.


	Writable$2.prototype.pipe = function () {
	  errorOrDestroy$1(this, new ERR_STREAM_CANNOT_PIPE());
	};

	function writeAfterEnd(stream, cb) {
	  var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb

	  errorOrDestroy$1(stream, er);
	  process.nextTick(cb, er);
	} // Checks that a user-supplied chunk is valid, especially for the particular
	// mode the stream is in. Currently this means that `null` is never accepted
	// and undefined/non-string values are only allowed in object mode.


	function validChunk(stream, state, chunk, cb) {
	  var er;

	  if (chunk === null) {
	    er = new ERR_STREAM_NULL_VALUES();
	  } else if (typeof chunk !== 'string' && !state.objectMode) {
	    er = new ERR_INVALID_ARG_TYPE$2('chunk', ['string', 'Buffer'], chunk);
	  }

	  if (er) {
	    errorOrDestroy$1(stream, er);
	    process.nextTick(cb, er);
	    return false;
	  }

	  return true;
	}

	Writable$2.prototype.write = function (chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;

	  var isBuf = !state.objectMode && _isUint8Array$1(chunk);

	  if (isBuf && !Buffer$E.isBuffer(chunk)) {
	    chunk = _uint8ArrayToBuffer$1(chunk);
	  }

	  if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }

	  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
	  if (typeof cb !== 'function') cb = nop;
	  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
	  }
	  return ret;
	};

	Writable$2.prototype.cork = function () {
	  this._writableState.corked++;
	};

	Writable$2.prototype.uncork = function () {
	  var state = this._writableState;

	  if (state.corked) {
	    state.corked--;
	    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
	  }
	};

	Writable$2.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
	  // node::ParseEncoding() requires lower case.
	  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
	  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
	  this._writableState.defaultEncoding = encoding;
	  return this;
	};

	Object.defineProperty(Writable$2.prototype, 'writableBuffer', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._writableState && this._writableState.getBuffer();
	  }
	});

	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
	    chunk = Buffer$E.from(chunk, encoding);
	  }

	  return chunk;
	}

	Object.defineProperty(Writable$2.prototype, 'writableHighWaterMark', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._writableState.highWaterMark;
	  }
	}); // if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.

	function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
	  if (!isBuf) {
	    var newChunk = decodeChunk(state, chunk, encoding);

	    if (chunk !== newChunk) {
	      isBuf = true;
	      encoding = 'buffer';
	      chunk = newChunk;
	    }
	  }

	  var len = state.objectMode ? 1 : chunk.length;
	  state.length += len;
	  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

	  if (!ret) state.needDrain = true;

	  if (state.writing || state.corked) {
	    var last = state.lastBufferedRequest;
	    state.lastBufferedRequest = {
	      chunk: chunk,
	      encoding: encoding,
	      isBuf: isBuf,
	      callback: cb,
	      next: null
	    };

	    if (last) {
	      last.next = state.lastBufferedRequest;
	    } else {
	      state.bufferedRequest = state.lastBufferedRequest;
	    }

	    state.bufferedRequestCount += 1;
	  } else {
	    doWrite(stream, state, false, len, chunk, encoding, cb);
	  }

	  return ret;
	}

	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED$1('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}

	function onwriteError(stream, state, sync, er, cb) {
	  --state.pendingcb;

	  if (sync) {
	    // defer the callback if we are being called synchronously
	    // to avoid piling up things on the stack
	    process.nextTick(cb, er); // this can emit finish, and it will always happen
	    // after error

	    process.nextTick(finishMaybe, stream, state);
	    stream._writableState.errorEmitted = true;
	    errorOrDestroy$1(stream, er);
	  } else {
	    // the caller expect this to happen before if
	    // it is async
	    cb(er);
	    stream._writableState.errorEmitted = true;
	    errorOrDestroy$1(stream, er); // this can emit finish, but finish must
	    // always follow error

	    finishMaybe(stream, state);
	  }
	}

	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}

	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;
	  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK$1();
	  onwriteStateUpdate(state);
	  if (er) onwriteError(stream, state, sync, er, cb);else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(state) || stream.destroyed;

	    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
	      clearBuffer(stream, state);
	    }

	    if (sync) {
	      process.nextTick(afterWrite, stream, state, finished, cb);
	    } else {
	      afterWrite(stream, state, finished, cb);
	    }
	  }
	}

	function afterWrite(stream, state, finished, cb) {
	  if (!finished) onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	} // Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.


	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	} // if there's something in the buffer waiting, then process it


	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;
	  var entry = state.bufferedRequest;

	  if (stream._writev && entry && entry.next) {
	    // Fast case, write everything using _writev()
	    var l = state.bufferedRequestCount;
	    var buffer = new Array(l);
	    var holder = state.corkedRequestsFree;
	    holder.entry = entry;
	    var count = 0;
	    var allBuffers = true;

	    while (entry) {
	      buffer[count] = entry;
	      if (!entry.isBuf) allBuffers = false;
	      entry = entry.next;
	      count += 1;
	    }

	    buffer.allBuffers = allBuffers;
	    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
	    // as the hot path ends with doWrite

	    state.pendingcb++;
	    state.lastBufferedRequest = null;

	    if (holder.next) {
	      state.corkedRequestsFree = holder.next;
	      holder.next = null;
	    } else {
	      state.corkedRequestsFree = new CorkedRequest(state);
	    }

	    state.bufferedRequestCount = 0;
	  } else {
	    // Slow case, write chunks one-by-one
	    while (entry) {
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;
	      doWrite(stream, state, false, len, chunk, encoding, cb);
	      entry = entry.next;
	      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
	      // it means that we need to wait until it does.
	      // also, that means that the chunk and cb are currently
	      // being processed, so move the buffer counter past them.

	      if (state.writing) {
	        break;
	      }
	    }

	    if (entry === null) state.lastBufferedRequest = null;
	  }

	  state.bufferedRequest = entry;
	  state.bufferProcessing = false;
	}

	Writable$2.prototype._write = function (chunk, encoding, cb) {
	  cb(new ERR_METHOD_NOT_IMPLEMENTED$2('_write()'));
	};

	Writable$2.prototype._writev = null;

	Writable$2.prototype.end = function (chunk, encoding, cb) {
	  var state = this._writableState;

	  if (typeof chunk === 'function') {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }

	  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  } // ignore unnecessary end() calls.


	  if (!state.ending) endWritable(this, state, cb);
	  return this;
	};

	Object.defineProperty(Writable$2.prototype, 'writableLength', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._writableState.length;
	  }
	});

	function needFinish(state) {
	  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
	}

	function callFinal(stream, state) {
	  stream._final(function (err) {
	    state.pendingcb--;

	    if (err) {
	      errorOrDestroy$1(stream, err);
	    }

	    state.prefinished = true;
	    stream.emit('prefinish');
	    finishMaybe(stream, state);
	  });
	}

	function prefinish$1(stream, state) {
	  if (!state.prefinished && !state.finalCalled) {
	    if (typeof stream._final === 'function' && !state.destroyed) {
	      state.pendingcb++;
	      state.finalCalled = true;
	      process.nextTick(callFinal, stream, state);
	    } else {
	      state.prefinished = true;
	      stream.emit('prefinish');
	    }
	  }
	}

	function finishMaybe(stream, state) {
	  var need = needFinish(state);

	  if (need) {
	    prefinish$1(stream, state);

	    if (state.pendingcb === 0) {
	      state.finished = true;
	      stream.emit('finish');

	      if (state.autoDestroy) {
	        // In case of duplex streams we need a way to detect
	        // if the readable side is ready for autoDestroy as well
	        var rState = stream._readableState;

	        if (!rState || rState.autoDestroy && rState.endEmitted) {
	          stream.destroy();
	        }
	      }
	    }
	  }

	  return need;
	}

	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);

	  if (cb) {
	    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
	  }

	  state.ended = true;
	  stream.writable = false;
	}

	function onCorkedFinish(corkReq, state, err) {
	  var entry = corkReq.entry;
	  corkReq.entry = null;

	  while (entry) {
	    var cb = entry.callback;
	    state.pendingcb--;
	    cb(err);
	    entry = entry.next;
	  } // reuse the free corkReq.


	  state.corkedRequestsFree.next = corkReq;
	}

	Object.defineProperty(Writable$2.prototype, 'destroyed', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    if (this._writableState === undefined) {
	      return false;
	    }

	    return this._writableState.destroyed;
	  },
	  set: function set(value) {
	    // we ignore the value if the stream
	    // has not been initialized yet
	    if (!this._writableState) {
	      return;
	    } // backward compatibility, the user is explicitly
	    // managing destroyed


	    this._writableState.destroyed = value;
	  }
	});
	Writable$2.prototype.destroy = destroy_1.destroy;
	Writable$2.prototype._undestroy = destroy_1.undestroy;

	Writable$2.prototype._destroy = function (err, cb) {
	  cb(err);
	};

	/*<replacement>*/

	var objectKeys = Object.keys || function (obj) {
	  var keys = [];

	  for (var key in obj) {
	    keys.push(key);
	  }

	  return keys;
	};
	/*</replacement>*/


	var _stream_duplex$2 = Duplex$2;





	inherits(Duplex$2, _stream_readable$2);

	{
	  // Allow the keys array to be GC'ed.
	  var keys$1 = objectKeys(_stream_writable$2.prototype);

	  for (var v = 0; v < keys$1.length; v++) {
	    var method = keys$1[v];
	    if (!Duplex$2.prototype[method]) Duplex$2.prototype[method] = _stream_writable$2.prototype[method];
	  }
	}

	function Duplex$2(options) {
	  if (!(this instanceof Duplex$2)) return new Duplex$2(options);
	  _stream_readable$2.call(this, options);
	  _stream_writable$2.call(this, options);
	  this.allowHalfOpen = true;

	  if (options) {
	    if (options.readable === false) this.readable = false;
	    if (options.writable === false) this.writable = false;

	    if (options.allowHalfOpen === false) {
	      this.allowHalfOpen = false;
	      this.once('end', onend);
	    }
	  }
	}

	Object.defineProperty(Duplex$2.prototype, 'writableHighWaterMark', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._writableState.highWaterMark;
	  }
	});
	Object.defineProperty(Duplex$2.prototype, 'writableBuffer', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._writableState && this._writableState.getBuffer();
	  }
	});
	Object.defineProperty(Duplex$2.prototype, 'writableLength', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._writableState.length;
	  }
	}); // the no-half-open enforcer

	function onend() {
	  // If the writable side ended, then we're ok.
	  if (this._writableState.ended) return; // no more data can be written.
	  // But allow more writes to happen in this tick.

	  process.nextTick(onEndNT, this);
	}

	function onEndNT(self) {
	  self.end();
	}

	Object.defineProperty(Duplex$2.prototype, 'destroyed', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    if (this._readableState === undefined || this._writableState === undefined) {
	      return false;
	    }

	    return this._readableState.destroyed && this._writableState.destroyed;
	  },
	  set: function set(value) {
	    // we ignore the value if the stream
	    // has not been initialized yet
	    if (this._readableState === undefined || this._writableState === undefined) {
	      return;
	    } // backward compatibility, the user is explicitly
	    // managing destroyed


	    this._readableState.destroyed = value;
	    this._writableState.destroyed = value;
	  }
	});

	var ERR_STREAM_PREMATURE_CLOSE = errors$2.codes.ERR_STREAM_PREMATURE_CLOSE;

	function once$1(callback) {
	  var called = false;
	  return function () {
	    if (called) return;
	    called = true;

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    callback.apply(this, args);
	  };
	}

	function noop$9() {}

	function isRequest$1(stream) {
	  return stream.setHeader && typeof stream.abort === 'function';
	}

	function eos$1(stream, opts, callback) {
	  if (typeof opts === 'function') return eos$1(stream, null, opts);
	  if (!opts) opts = {};
	  callback = once$1(callback || noop$9);
	  var readable = opts.readable || opts.readable !== false && stream.readable;
	  var writable = opts.writable || opts.writable !== false && stream.writable;

	  var onlegacyfinish = function onlegacyfinish() {
	    if (!stream.writable) onfinish();
	  };

	  var writableEnded = stream._writableState && stream._writableState.finished;

	  var onfinish = function onfinish() {
	    writable = false;
	    writableEnded = true;
	    if (!readable) callback.call(stream);
	  };

	  var readableEnded = stream._readableState && stream._readableState.endEmitted;

	  var onend = function onend() {
	    readable = false;
	    readableEnded = true;
	    if (!writable) callback.call(stream);
	  };

	  var onerror = function onerror(err) {
	    callback.call(stream, err);
	  };

	  var onclose = function onclose() {
	    var err;

	    if (readable && !readableEnded) {
	      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
	      return callback.call(stream, err);
	    }

	    if (writable && !writableEnded) {
	      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
	      return callback.call(stream, err);
	    }
	  };

	  var onrequest = function onrequest() {
	    stream.req.on('finish', onfinish);
	  };

	  if (isRequest$1(stream)) {
	    stream.on('complete', onfinish);
	    stream.on('abort', onclose);
	    if (stream.req) onrequest();else stream.on('request', onrequest);
	  } else if (writable && !stream._writableState) {
	    // legacy streams
	    stream.on('end', onlegacyfinish);
	    stream.on('close', onlegacyfinish);
	  }

	  stream.on('end', onend);
	  stream.on('finish', onfinish);
	  if (opts.error !== false) stream.on('error', onerror);
	  stream.on('close', onclose);
	  return function () {
	    stream.removeListener('complete', onfinish);
	    stream.removeListener('abort', onclose);
	    stream.removeListener('request', onrequest);
	    if (stream.req) stream.req.removeListener('finish', onfinish);
	    stream.removeListener('end', onlegacyfinish);
	    stream.removeListener('close', onlegacyfinish);
	    stream.removeListener('finish', onfinish);
	    stream.removeListener('end', onend);
	    stream.removeListener('error', onerror);
	    stream.removeListener('close', onclose);
	  };
	}

	var endOfStream = eos$1;

	var _Object$setPrototypeO;

	function _defineProperty$1(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }



	var kLastResolve = Symbol('lastResolve');
	var kLastReject = Symbol('lastReject');
	var kError$1 = Symbol('error');
	var kEnded = Symbol('ended');
	var kLastPromise = Symbol('lastPromise');
	var kHandlePromise = Symbol('handlePromise');
	var kStream = Symbol('stream');

	function createIterResult(value, done) {
	  return {
	    value: value,
	    done: done
	  };
	}

	function readAndResolve(iter) {
	  var resolve = iter[kLastResolve];

	  if (resolve !== null) {
	    var data = iter[kStream].read(); // we defer if data is null
	    // we can be expecting either 'end' or
	    // 'error'

	    if (data !== null) {
	      iter[kLastPromise] = null;
	      iter[kLastResolve] = null;
	      iter[kLastReject] = null;
	      resolve(createIterResult(data, false));
	    }
	  }
	}

	function onReadable(iter) {
	  // we wait for the next tick, because it might
	  // emit an error with process.nextTick
	  process.nextTick(readAndResolve, iter);
	}

	function wrapForNext(lastPromise, iter) {
	  return function (resolve, reject) {
	    lastPromise.then(function () {
	      if (iter[kEnded]) {
	        resolve(createIterResult(undefined, true));
	        return;
	      }

	      iter[kHandlePromise](resolve, reject);
	    }, reject);
	  };
	}

	var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
	var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
	  get stream() {
	    return this[kStream];
	  },

	  next: function next() {
	    var _this = this;

	    // if we have detected an error in the meanwhile
	    // reject straight away
	    var error = this[kError$1];

	    if (error !== null) {
	      return Promise.reject(error);
	    }

	    if (this[kEnded]) {
	      return Promise.resolve(createIterResult(undefined, true));
	    }

	    if (this[kStream].destroyed) {
	      // We need to defer via nextTick because if .destroy(err) is
	      // called, the error will be emitted via nextTick, and
	      // we cannot guarantee that there is no error lingering around
	      // waiting to be emitted.
	      return new Promise(function (resolve, reject) {
	        process.nextTick(function () {
	          if (_this[kError$1]) {
	            reject(_this[kError$1]);
	          } else {
	            resolve(createIterResult(undefined, true));
	          }
	        });
	      });
	    } // if we have multiple next() calls
	    // we will wait for the previous Promise to finish
	    // this logic is optimized to support for await loops,
	    // where next() is only called once at a time


	    var lastPromise = this[kLastPromise];
	    var promise;

	    if (lastPromise) {
	      promise = new Promise(wrapForNext(lastPromise, this));
	    } else {
	      // fast path needed to support multiple this.push()
	      // without triggering the next() queue
	      var data = this[kStream].read();

	      if (data !== null) {
	        return Promise.resolve(createIterResult(data, false));
	      }

	      promise = new Promise(this[kHandlePromise]);
	    }

	    this[kLastPromise] = promise;
	    return promise;
	  }
	}, _defineProperty$1(_Object$setPrototypeO, Symbol.asyncIterator, function () {
	  return this;
	}), _defineProperty$1(_Object$setPrototypeO, "return", function _return() {
	  var _this2 = this;

	  // destroy(err, cb) is a private API
	  // we can guarantee we have that here, because we control the
	  // Readable class this is attached to
	  return new Promise(function (resolve, reject) {
	    _this2[kStream].destroy(null, function (err) {
	      if (err) {
	        reject(err);
	        return;
	      }

	      resolve(createIterResult(undefined, true));
	    });
	  });
	}), _Object$setPrototypeO), AsyncIteratorPrototype);

	var createReadableStreamAsyncIterator$1 = function createReadableStreamAsyncIterator(stream) {
	  var _Object$create;

	  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty$1(_Object$create, kStream, {
	    value: stream,
	    writable: true
	  }), _defineProperty$1(_Object$create, kLastResolve, {
	    value: null,
	    writable: true
	  }), _defineProperty$1(_Object$create, kLastReject, {
	    value: null,
	    writable: true
	  }), _defineProperty$1(_Object$create, kError$1, {
	    value: null,
	    writable: true
	  }), _defineProperty$1(_Object$create, kEnded, {
	    value: stream._readableState.endEmitted,
	    writable: true
	  }), _defineProperty$1(_Object$create, kHandlePromise, {
	    value: function value(resolve, reject) {
	      var data = iterator[kStream].read();

	      if (data) {
	        iterator[kLastPromise] = null;
	        iterator[kLastResolve] = null;
	        iterator[kLastReject] = null;
	        resolve(createIterResult(data, false));
	      } else {
	        iterator[kLastResolve] = resolve;
	        iterator[kLastReject] = reject;
	      }
	    },
	    writable: true
	  }), _Object$create));
	  iterator[kLastPromise] = null;
	  endOfStream(stream, function (err) {
	    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
	      var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
	      // returned by next() and store the error

	      if (reject !== null) {
	        iterator[kLastPromise] = null;
	        iterator[kLastResolve] = null;
	        iterator[kLastReject] = null;
	        reject(err);
	      }

	      iterator[kError$1] = err;
	      return;
	    }

	    var resolve = iterator[kLastResolve];

	    if (resolve !== null) {
	      iterator[kLastPromise] = null;
	      iterator[kLastResolve] = null;
	      iterator[kLastReject] = null;
	      resolve(createIterResult(undefined, true));
	    }

	    iterator[kEnded] = true;
	  });
	  stream.on('readable', onReadable.bind(null, iterator));
	  return iterator;
	};

	var async_iterator = createReadableStreamAsyncIterator$1;

	function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

	function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var ERR_INVALID_ARG_TYPE$1 = errors$2.codes.ERR_INVALID_ARG_TYPE;

	function from$1(Readable, iterable, opts) {
	  var iterator;

	  if (iterable && typeof iterable.next === 'function') {
	    iterator = iterable;
	  } else if (iterable && iterable[Symbol.asyncIterator]) iterator = iterable[Symbol.asyncIterator]();else if (iterable && iterable[Symbol.iterator]) iterator = iterable[Symbol.iterator]();else throw new ERR_INVALID_ARG_TYPE$1('iterable', ['Iterable'], iterable);

	  var readable = new Readable(_objectSpread({
	    objectMode: true
	  }, opts)); // Reading boolean to protect against _read
	  // being called before last iteration completion.

	  var reading = false;

	  readable._read = function () {
	    if (!reading) {
	      reading = true;
	      next();
	    }
	  };

	  function next() {
	    return _next2.apply(this, arguments);
	  }

	  function _next2() {
	    _next2 = _asyncToGenerator(function* () {
	      try {
	        var _ref = yield iterator.next(),
	            value = _ref.value,
	            done = _ref.done;

	        if (done) {
	          readable.push(null);
	        } else if (readable.push((yield value))) {
	          next();
	        } else {
	          reading = false;
	        }
	      } catch (err) {
	        readable.destroy(err);
	      }
	    });
	    return _next2.apply(this, arguments);
	  }

	  return readable;
	}

	var from_1 = from$1;

	var _stream_readable$2 = Readable;
	/*<replacement>*/

	var Duplex$1;
	/*</replacement>*/

	Readable.ReadableState = ReadableState;
	/*<replacement>*/

	EventEmitter__default['default'].EventEmitter;

	var EElistenerCount = function EElistenerCount(emitter, type) {
	  return emitter.listeners(type).length;
	};
	/*</replacement>*/

	/*<replacement>*/



	/*</replacement>*/


	var Buffer$D = buffer__default['default'].Buffer;

	var OurUint8Array = commonjsGlobal.Uint8Array || function () {};

	function _uint8ArrayToBuffer(chunk) {
	  return Buffer$D.from(chunk);
	}

	function _isUint8Array(obj) {
	  return Buffer$D.isBuffer(obj) || obj instanceof OurUint8Array;
	}
	/*<replacement>*/




	var debug$6;

	if (util__default['default'] && util__default['default'].debuglog) {
	  debug$6 = util__default['default'].debuglog('stream');
	} else {
	  debug$6 = function debug() {};
	}
	/*</replacement>*/






	var getHighWaterMark = state$1.getHighWaterMark;

	var _require$codes$2 = errors$2.codes,
	    ERR_INVALID_ARG_TYPE = _require$codes$2.ERR_INVALID_ARG_TYPE,
	    ERR_STREAM_PUSH_AFTER_EOF = _require$codes$2.ERR_STREAM_PUSH_AFTER_EOF,
	    ERR_METHOD_NOT_IMPLEMENTED$1 = _require$codes$2.ERR_METHOD_NOT_IMPLEMENTED,
	    ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes$2.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.


	var StringDecoder$1;
	var createReadableStreamAsyncIterator;
	var from;

	inherits(Readable, stream$4);

	var errorOrDestroy = destroy_1.errorOrDestroy;
	var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

	function prependListener(emitter, event, fn) {
	  // Sadly this is not cacheable as some libraries bundle their own
	  // event emitter implementation with them.
	  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
	  // userland ones.  NEVER DO THIS. This is here only because this code needs
	  // to continue to work with older versions of Node.js that do not include
	  // the prependListener() method. The goal is to eventually remove this hack.

	  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
	}

	function ReadableState(options, stream, isDuplex) {
	  Duplex$1 = Duplex$1 || _stream_duplex$2;
	  options = options || {}; // Duplex streams are both readable and writable, but share
	  // the same options object.
	  // However, some cases require setting options to different
	  // values for the readable and the writable sides of the duplex stream.
	  // These options can be provided separately as readableXXX and writableXXX.

	  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex$1; // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away

	  this.objectMode = !!options.objectMode;
	  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"

	  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
	  // linked list can remove elements from the beginning faster than
	  // array.shift()

	  this.buffer = new buffer_list();
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
	  // immediately, or on a later tick.  We set this to true at first, because
	  // any actions that shouldn't happen until "later" should generally also
	  // not happen before the first read call.

	  this.sync = true; // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.

	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;
	  this.resumeScheduled = false;
	  this.paused = true; // Should close be emitted on destroy. Defaults to true.

	  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')

	  this.autoDestroy = !!options.autoDestroy; // has it been destroyed

	  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.

	  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

	  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

	  this.readingMore = false;
	  this.decoder = null;
	  this.encoding = null;

	  if (options.encoding) {
	    if (!StringDecoder$1) StringDecoder$1 = string_decoder$2.StringDecoder;
	    this.decoder = new StringDecoder$1(options.encoding);
	    this.encoding = options.encoding;
	  }
	}

	function Readable(options) {
	  Duplex$1 = Duplex$1 || _stream_duplex$2;
	  if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
	  // the ReadableState constructor, at least with V8 6.5

	  var isDuplex = this instanceof Duplex$1;
	  this._readableState = new ReadableState(options, this, isDuplex); // legacy

	  this.readable = true;

	  if (options) {
	    if (typeof options.read === 'function') this._read = options.read;
	    if (typeof options.destroy === 'function') this._destroy = options.destroy;
	  }

	  stream$4.call(this);
	}

	Object.defineProperty(Readable.prototype, 'destroyed', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    if (this._readableState === undefined) {
	      return false;
	    }

	    return this._readableState.destroyed;
	  },
	  set: function set(value) {
	    // we ignore the value if the stream
	    // has not been initialized yet
	    if (!this._readableState) {
	      return;
	    } // backward compatibility, the user is explicitly
	    // managing destroyed


	    this._readableState.destroyed = value;
	  }
	});
	Readable.prototype.destroy = destroy_1.destroy;
	Readable.prototype._undestroy = destroy_1.undestroy;

	Readable.prototype._destroy = function (err, cb) {
	  cb(err);
	}; // Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.


	Readable.prototype.push = function (chunk, encoding) {
	  var state = this._readableState;
	  var skipChunkCheck;

	  if (!state.objectMode) {
	    if (typeof chunk === 'string') {
	      encoding = encoding || state.defaultEncoding;

	      if (encoding !== state.encoding) {
	        chunk = Buffer$D.from(chunk, encoding);
	        encoding = '';
	      }

	      skipChunkCheck = true;
	    }
	  } else {
	    skipChunkCheck = true;
	  }

	  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
	}; // Unshift should *always* be something directly out of read()


	Readable.prototype.unshift = function (chunk) {
	  return readableAddChunk(this, chunk, null, true, false);
	};

	function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
	  debug$6('readableAddChunk', chunk);
	  var state = stream._readableState;

	  if (chunk === null) {
	    state.reading = false;
	    onEofChunk(stream, state);
	  } else {
	    var er;
	    if (!skipChunkCheck) er = chunkInvalid(state, chunk);

	    if (er) {
	      errorOrDestroy(stream, er);
	    } else if (state.objectMode || chunk && chunk.length > 0) {
	      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer$D.prototype) {
	        chunk = _uint8ArrayToBuffer(chunk);
	      }

	      if (addToFront) {
	        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
	      } else if (state.ended) {
	        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
	      } else if (state.destroyed) {
	        return false;
	      } else {
	        state.reading = false;

	        if (state.decoder && !encoding) {
	          chunk = state.decoder.write(chunk);
	          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
	        } else {
	          addChunk(stream, state, chunk, false);
	        }
	      }
	    } else if (!addToFront) {
	      state.reading = false;
	      maybeReadMore(stream, state);
	    }
	  } // We can push more data if we are below the highWaterMark.
	  // Also, if we have no data yet, we can stand some more bytes.
	  // This is to work around cases where hwm=0, such as the repl.


	  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
	}

	function addChunk(stream, state, chunk, addToFront) {
	  if (state.flowing && state.length === 0 && !state.sync) {
	    state.awaitDrain = 0;
	    stream.emit('data', chunk);
	  } else {
	    // update the buffer info.
	    state.length += state.objectMode ? 1 : chunk.length;
	    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
	    if (state.needReadable) emitReadable(stream);
	  }

	  maybeReadMore(stream, state);
	}

	function chunkInvalid(state, chunk) {
	  var er;

	  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
	    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
	  }

	  return er;
	}

	Readable.prototype.isPaused = function () {
	  return this._readableState.flowing === false;
	}; // backwards compatibility.


	Readable.prototype.setEncoding = function (enc) {
	  if (!StringDecoder$1) StringDecoder$1 = string_decoder$2.StringDecoder;
	  var decoder = new StringDecoder$1(enc);
	  this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8

	  this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:

	  var p = this._readableState.buffer.head;
	  var content = '';

	  while (p !== null) {
	    content += decoder.write(p.data);
	    p = p.next;
	  }

	  this._readableState.buffer.clear();

	  if (content !== '') this._readableState.buffer.push(content);
	  this._readableState.length = content.length;
	  return this;
	}; // Don't raise the hwm > 1GB


	var MAX_HWM = 0x40000000;

	function computeNewHighWaterMark(n) {
	  if (n >= MAX_HWM) {
	    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2 to prevent increasing hwm excessively in
	    // tiny amounts
	    n--;
	    n |= n >>> 1;
	    n |= n >>> 2;
	    n |= n >>> 4;
	    n |= n >>> 8;
	    n |= n >>> 16;
	    n++;
	  }

	  return n;
	} // This function is designed to be inlinable, so please take care when making
	// changes to the function body.


	function howMuchToRead(n, state) {
	  if (n <= 0 || state.length === 0 && state.ended) return 0;
	  if (state.objectMode) return 1;

	  if (n !== n) {
	    // Only flow one buffer at a time
	    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
	  } // If we're asking for more than the current hwm, then raise the hwm.


	  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
	  if (n <= state.length) return n; // Don't have enough

	  if (!state.ended) {
	    state.needReadable = true;
	    return 0;
	  }

	  return state.length;
	} // you can override either this method, or the async _read(n) below.


	Readable.prototype.read = function (n) {
	  debug$6('read', n);
	  n = parseInt(n, 10);
	  var state = this._readableState;
	  var nOrig = n;
	  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.

	  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
	    debug$6('read: emitReadable', state.length, state.ended);
	    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
	    return null;
	  }

	  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

	  if (n === 0 && state.ended) {
	    if (state.length === 0) endReadable(this);
	    return null;
	  } // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.
	  // if we need a readable event, then we need to do some reading.


	  var doRead = state.needReadable;
	  debug$6('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	    debug$6('length less than watermark', doRead);
	  } // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.


	  if (state.ended || state.reading) {
	    doRead = false;
	    debug$6('reading or ended', doRead);
	  } else if (doRead) {
	    debug$6('do read');
	    state.reading = true;
	    state.sync = true; // if the length is currently zero, then we *need* a readable event.

	    if (state.length === 0) state.needReadable = true; // call internal read method

	    this._read(state.highWaterMark);

	    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
	    // and we need to re-evaluate how much data we can return to the user.

	    if (!state.reading) n = howMuchToRead(nOrig, state);
	  }

	  var ret;
	  if (n > 0) ret = fromList(n, state);else ret = null;

	  if (ret === null) {
	    state.needReadable = state.length <= state.highWaterMark;
	    n = 0;
	  } else {
	    state.length -= n;
	    state.awaitDrain = 0;
	  }

	  if (state.length === 0) {
	    // If we have nothing in the buffer, then we want to know
	    // as soon as we *do* get something into the buffer.
	    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

	    if (nOrig !== n && state.ended) endReadable(this);
	  }

	  if (ret !== null) this.emit('data', ret);
	  return ret;
	};

	function onEofChunk(stream, state) {
	  debug$6('onEofChunk');
	  if (state.ended) return;

	  if (state.decoder) {
	    var chunk = state.decoder.end();

	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }

	  state.ended = true;

	  if (state.sync) {
	    // if we are sync, wait until next tick to emit the data.
	    // Otherwise we risk emitting data in the flow()
	    // the readable code triggers during a read() call
	    emitReadable(stream);
	  } else {
	    // emit 'readable' now to make sure it gets picked up.
	    state.needReadable = false;

	    if (!state.emittedReadable) {
	      state.emittedReadable = true;
	      emitReadable_(stream);
	    }
	  }
	} // Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.


	function emitReadable(stream) {
	  var state = stream._readableState;
	  debug$6('emitReadable', state.needReadable, state.emittedReadable);
	  state.needReadable = false;

	  if (!state.emittedReadable) {
	    debug$6('emitReadable', state.flowing);
	    state.emittedReadable = true;
	    process.nextTick(emitReadable_, stream);
	  }
	}

	function emitReadable_(stream) {
	  var state = stream._readableState;
	  debug$6('emitReadable_', state.destroyed, state.length, state.ended);

	  if (!state.destroyed && (state.length || state.ended)) {
	    stream.emit('readable');
	    state.emittedReadable = false;
	  } // The stream needs another readable event if
	  // 1. It is not flowing, as the flow mechanism will take
	  //    care of it.
	  // 2. It is not ended.
	  // 3. It is below the highWaterMark, so we can schedule
	  //    another readable later.


	  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
	  flow(stream);
	} // at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.


	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    process.nextTick(maybeReadMore_, stream, state);
	  }
	}

	function maybeReadMore_(stream, state) {
	  // Attempt to read more data if we should.
	  //
	  // The conditions for reading more data are (one of):
	  // - Not enough data buffered (state.length < state.highWaterMark). The loop
	  //   is responsible for filling the buffer with enough data if such data
	  //   is available. If highWaterMark is 0 and we are not in the flowing mode
	  //   we should _not_ attempt to buffer any extra data. We'll get more data
	  //   when the stream consumer calls read() instead.
	  // - No data in the buffer, and the stream is in flowing mode. In this mode
	  //   the loop below is responsible for ensuring read() is called. Failing to
	  //   call read here would abort the flow and there's no other mechanism for
	  //   continuing the flow if the stream consumer has just subscribed to the
	  //   'data' event.
	  //
	  // In addition to the above conditions to keep reading data, the following
	  // conditions prevent the data from being read:
	  // - The stream has ended (state.ended).
	  // - There is already a pending 'read' operation (state.reading). This is a
	  //   case where the the stream has called the implementation defined _read()
	  //   method, but they are processing the call asynchronously and have _not_
	  //   called push() with new data. In this case we skip performing more
	  //   read()s. The execution ends in this method again after the _read() ends
	  //   up calling push() with more data.
	  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
	    var len = state.length;
	    debug$6('maybeReadMore read 0');
	    stream.read(0);
	    if (len === state.length) // didn't get any data, stop spinning.
	      break;
	  }

	  state.readingMore = false;
	} // abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.


	Readable.prototype._read = function (n) {
	  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED$1('_read()'));
	};

	Readable.prototype.pipe = function (dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;

	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;

	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;

	    default:
	      state.pipes.push(dest);
	      break;
	  }

	  state.pipesCount += 1;
	  debug$6('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
	  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
	  var endFn = doEnd ? onend : unpipe;
	  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
	  dest.on('unpipe', onunpipe);

	  function onunpipe(readable, unpipeInfo) {
	    debug$6('onunpipe');

	    if (readable === src) {
	      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
	        unpipeInfo.hasUnpiped = true;
	        cleanup();
	      }
	    }
	  }

	  function onend() {
	    debug$6('onend');
	    dest.end();
	  } // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.


	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);
	  var cleanedUp = false;

	  function cleanup() {
	    debug$6('cleanup'); // cleanup event handlers once the pipe is broken

	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', unpipe);
	    src.removeListener('data', ondata);
	    cleanedUp = true; // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.

	    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
	  }

	  src.on('data', ondata);

	  function ondata(chunk) {
	    debug$6('ondata');
	    var ret = dest.write(chunk);
	    debug$6('dest.write', ret);

	    if (ret === false) {
	      // If the user unpiped during `dest.write()`, it is possible
	      // to get stuck in a permanently paused state if that write
	      // also returned false.
	      // => Check whether `dest` is still a piping destination.
	      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
	        debug$6('false write response, pause', state.awaitDrain);
	        state.awaitDrain++;
	      }

	      src.pause();
	    }
	  } // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.


	  function onerror(er) {
	    debug$6('onerror', er);
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
	  } // Make sure our error handler is attached before userland ones.


	  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }

	  dest.once('close', onclose);

	  function onfinish() {
	    debug$6('onfinish');
	    dest.removeListener('close', onclose);
	    unpipe();
	  }

	  dest.once('finish', onfinish);

	  function unpipe() {
	    debug$6('unpipe');
	    src.unpipe(dest);
	  } // tell the dest that it's being piped to


	  dest.emit('pipe', src); // start the flow if it hasn't been started already.

	  if (!state.flowing) {
	    debug$6('pipe resume');
	    src.resume();
	  }

	  return dest;
	};

	function pipeOnDrain(src) {
	  return function pipeOnDrainFunctionResult() {
	    var state = src._readableState;
	    debug$6('pipeOnDrain', state.awaitDrain);
	    if (state.awaitDrain) state.awaitDrain--;

	    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
	      state.flowing = true;
	      flow(src);
	    }
	  };
	}

	Readable.prototype.unpipe = function (dest) {
	  var state = this._readableState;
	  var unpipeInfo = {
	    hasUnpiped: false
	  }; // if we're not piping anywhere, then do nothing.

	  if (state.pipesCount === 0) return this; // just one destination.  most common case.

	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes) return this;
	    if (!dest) dest = state.pipes; // got a match.

	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest) dest.emit('unpipe', this, unpipeInfo);
	    return this;
	  } // slow case. multiple pipe destinations.


	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;

	    for (var i = 0; i < len; i++) {
	      dests[i].emit('unpipe', this, {
	        hasUnpiped: false
	      });
	    }

	    return this;
	  } // try to find the right one.


	  var index = indexOf(state.pipes, dest);
	  if (index === -1) return this;
	  state.pipes.splice(index, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1) state.pipes = state.pipes[0];
	  dest.emit('unpipe', this, unpipeInfo);
	  return this;
	}; // set up data events if they are asked for
	// Ensure readable listeners eventually get something


	Readable.prototype.on = function (ev, fn) {
	  var res = stream$4.prototype.on.call(this, ev, fn);
	  var state = this._readableState;

	  if (ev === 'data') {
	    // update readableListening so that resume() may be a no-op
	    // a few lines down. This is needed to support once('readable').
	    state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused

	    if (state.flowing !== false) this.resume();
	  } else if (ev === 'readable') {
	    if (!state.endEmitted && !state.readableListening) {
	      state.readableListening = state.needReadable = true;
	      state.flowing = false;
	      state.emittedReadable = false;
	      debug$6('on readable', state.length, state.reading);

	      if (state.length) {
	        emitReadable(this);
	      } else if (!state.reading) {
	        process.nextTick(nReadingNextTick, this);
	      }
	    }
	  }

	  return res;
	};

	Readable.prototype.addListener = Readable.prototype.on;

	Readable.prototype.removeListener = function (ev, fn) {
	  var res = stream$4.prototype.removeListener.call(this, ev, fn);

	  if (ev === 'readable') {
	    // We need to check if there is someone still listening to
	    // readable and reset the state. However this needs to happen
	    // after readable has been emitted but before I/O (nextTick) to
	    // support once('readable', fn) cycles. This means that calling
	    // resume within the same tick will have no
	    // effect.
	    process.nextTick(updateReadableListening, this);
	  }

	  return res;
	};

	Readable.prototype.removeAllListeners = function (ev) {
	  var res = stream$4.prototype.removeAllListeners.apply(this, arguments);

	  if (ev === 'readable' || ev === undefined) {
	    // We need to check if there is someone still listening to
	    // readable and reset the state. However this needs to happen
	    // after readable has been emitted but before I/O (nextTick) to
	    // support once('readable', fn) cycles. This means that calling
	    // resume within the same tick will have no
	    // effect.
	    process.nextTick(updateReadableListening, this);
	  }

	  return res;
	};

	function updateReadableListening(self) {
	  var state = self._readableState;
	  state.readableListening = self.listenerCount('readable') > 0;

	  if (state.resumeScheduled && !state.paused) {
	    // flowing needs to be set to true now, otherwise
	    // the upcoming resume will not flow.
	    state.flowing = true; // crude way to check if we should resume
	  } else if (self.listenerCount('data') > 0) {
	    self.resume();
	  }
	}

	function nReadingNextTick(self) {
	  debug$6('readable nexttick read 0');
	  self.read(0);
	} // pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.


	Readable.prototype.resume = function () {
	  var state = this._readableState;

	  if (!state.flowing) {
	    debug$6('resume'); // we flow only if there is no one listening
	    // for readable, but we still have to call
	    // resume()

	    state.flowing = !state.readableListening;
	    resume(this, state);
	  }

	  state.paused = false;
	  return this;
	};

	function resume(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    process.nextTick(resume_, stream, state);
	  }
	}

	function resume_(stream, state) {
	  debug$6('resume', state.reading);

	  if (!state.reading) {
	    stream.read(0);
	  }

	  state.resumeScheduled = false;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading) stream.read(0);
	}

	Readable.prototype.pause = function () {
	  debug$6('call pause flowing=%j', this._readableState.flowing);

	  if (this._readableState.flowing !== false) {
	    debug$6('pause');
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }

	  this._readableState.paused = true;
	  return this;
	};

	function flow(stream) {
	  var state = stream._readableState;
	  debug$6('flow', state.flowing);

	  while (state.flowing && stream.read() !== null) {
	  }
	} // wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.


	Readable.prototype.wrap = function (stream) {
	  var _this = this;

	  var state = this._readableState;
	  var paused = false;
	  stream.on('end', function () {
	    debug$6('wrapped end');

	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length) _this.push(chunk);
	    }

	    _this.push(null);
	  });
	  stream.on('data', function (chunk) {
	    debug$6('wrapped data');
	    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

	    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

	    var ret = _this.push(chunk);

	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  }); // proxy all the other methods.
	  // important when wrapping filters and duplexes.

	  for (var i in stream) {
	    if (this[i] === undefined && typeof stream[i] === 'function') {
	      this[i] = function methodWrap(method) {
	        return function methodWrapReturnFunction() {
	          return stream[method].apply(stream, arguments);
	        };
	      }(i);
	    }
	  } // proxy certain important events.


	  for (var n = 0; n < kProxyEvents.length; n++) {
	    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
	  } // when we try to consume some more bytes, simply unpause the
	  // underlying stream.


	  this._read = function (n) {
	    debug$6('wrapped _read', n);

	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };

	  return this;
	};

	if (typeof Symbol === 'function') {
	  Readable.prototype[Symbol.asyncIterator] = function () {
	    if (createReadableStreamAsyncIterator === undefined) {
	      createReadableStreamAsyncIterator = async_iterator;
	    }

	    return createReadableStreamAsyncIterator(this);
	  };
	}

	Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._readableState.highWaterMark;
	  }
	});
	Object.defineProperty(Readable.prototype, 'readableBuffer', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._readableState && this._readableState.buffer;
	  }
	});
	Object.defineProperty(Readable.prototype, 'readableFlowing', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._readableState.flowing;
	  },
	  set: function set(state) {
	    if (this._readableState) {
	      this._readableState.flowing = state;
	    }
	  }
	}); // exposed for testing purposes only.

	Readable._fromList = fromList;
	Object.defineProperty(Readable.prototype, 'readableLength', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._readableState.length;
	  }
	}); // Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.

	function fromList(n, state) {
	  // nothing buffered
	  if (state.length === 0) return null;
	  var ret;
	  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
	    // read it all, truncate the list
	    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
	    state.buffer.clear();
	  } else {
	    // read part of list
	    ret = state.buffer.consume(n, state.decoder);
	  }
	  return ret;
	}

	function endReadable(stream) {
	  var state = stream._readableState;
	  debug$6('endReadable', state.endEmitted);

	  if (!state.endEmitted) {
	    state.ended = true;
	    process.nextTick(endReadableNT, state, stream);
	  }
	}

	function endReadableNT(state, stream) {
	  debug$6('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.

	  if (!state.endEmitted && state.length === 0) {
	    state.endEmitted = true;
	    stream.readable = false;
	    stream.emit('end');

	    if (state.autoDestroy) {
	      // In case of duplex streams we need a way to detect
	      // if the writable side is ready for autoDestroy as well
	      var wState = stream._writableState;

	      if (!wState || wState.autoDestroy && wState.finished) {
	        stream.destroy();
	      }
	    }
	  }
	}

	if (typeof Symbol === 'function') {
	  Readable.from = function (iterable, opts) {
	    if (from === undefined) {
	      from = from_1;
	    }

	    return from(Readable, iterable, opts);
	  };
	}

	function indexOf(xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }

	  return -1;
	}

	var _stream_transform$2 = Transform$3;

	var _require$codes$1 = errors$2.codes,
	    ERR_METHOD_NOT_IMPLEMENTED = _require$codes$1.ERR_METHOD_NOT_IMPLEMENTED,
	    ERR_MULTIPLE_CALLBACK = _require$codes$1.ERR_MULTIPLE_CALLBACK,
	    ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes$1.ERR_TRANSFORM_ALREADY_TRANSFORMING,
	    ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes$1.ERR_TRANSFORM_WITH_LENGTH_0;



	inherits(Transform$3, _stream_duplex$2);

	function afterTransform(er, data) {
	  var ts = this._transformState;
	  ts.transforming = false;
	  var cb = ts.writecb;

	  if (cb === null) {
	    return this.emit('error', new ERR_MULTIPLE_CALLBACK());
	  }

	  ts.writechunk = null;
	  ts.writecb = null;
	  if (data != null) // single equals check for both `null` and `undefined`
	    this.push(data);
	  cb(er);
	  var rs = this._readableState;
	  rs.reading = false;

	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    this._read(rs.highWaterMark);
	  }
	}

	function Transform$3(options) {
	  if (!(this instanceof Transform$3)) return new Transform$3(options);
	  _stream_duplex$2.call(this, options);
	  this._transformState = {
	    afterTransform: afterTransform.bind(this),
	    needTransform: false,
	    transforming: false,
	    writecb: null,
	    writechunk: null,
	    writeencoding: null
	  }; // start out asking for a readable event once data is transformed.

	  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.

	  this._readableState.sync = false;

	  if (options) {
	    if (typeof options.transform === 'function') this._transform = options.transform;
	    if (typeof options.flush === 'function') this._flush = options.flush;
	  } // When the writable side finishes, then flush out anything remaining.


	  this.on('prefinish', prefinish);
	}

	function prefinish() {
	  var _this = this;

	  if (typeof this._flush === 'function' && !this._readableState.destroyed) {
	    this._flush(function (er, data) {
	      done(_this, er, data);
	    });
	  } else {
	    done(this, null, null);
	  }
	}

	Transform$3.prototype.push = function (chunk, encoding) {
	  this._transformState.needTransform = false;
	  return _stream_duplex$2.prototype.push.call(this, chunk, encoding);
	}; // This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.


	Transform$3.prototype._transform = function (chunk, encoding, cb) {
	  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
	};

	Transform$3.prototype._write = function (chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;

	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
	  }
	}; // Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.


	Transform$3.prototype._read = function (n) {
	  var ts = this._transformState;

	  if (ts.writechunk !== null && !ts.transforming) {
	    ts.transforming = true;

	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};

	Transform$3.prototype._destroy = function (err, cb) {
	  _stream_duplex$2.prototype._destroy.call(this, err, function (err2) {
	    cb(err2);
	  });
	};

	function done(stream, er, data) {
	  if (er) return stream.emit('error', er);
	  if (data != null) // single equals check for both `null` and `undefined`
	    stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided

	  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
	  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
	  return stream.push(null);
	}

	var _stream_passthrough$2 = PassThrough$1;



	inherits(PassThrough$1, _stream_transform$2);

	function PassThrough$1(options) {
	  if (!(this instanceof PassThrough$1)) return new PassThrough$1(options);
	  _stream_transform$2.call(this, options);
	}

	PassThrough$1.prototype._transform = function (chunk, encoding, cb) {
	  cb(null, chunk);
	};

	var eos;

	function once(callback) {
	  var called = false;
	  return function () {
	    if (called) return;
	    called = true;
	    callback.apply(void 0, arguments);
	  };
	}

	var _require$codes = errors$2.codes,
	    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
	    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;

	function noop$8(err) {
	  // Rethrow the error if it exists to avoid swallowing it
	  if (err) throw err;
	}

	function isRequest(stream) {
	  return stream.setHeader && typeof stream.abort === 'function';
	}

	function destroyer(stream, reading, writing, callback) {
	  callback = once(callback);
	  var closed = false;
	  stream.on('close', function () {
	    closed = true;
	  });
	  if (eos === undefined) eos = endOfStream;
	  eos(stream, {
	    readable: reading,
	    writable: writing
	  }, function (err) {
	    if (err) return callback(err);
	    closed = true;
	    callback();
	  });
	  var destroyed = false;
	  return function (err) {
	    if (closed) return;
	    if (destroyed) return;
	    destroyed = true; // request.destroy just do .end - .abort is what we want

	    if (isRequest(stream)) return stream.abort();
	    if (typeof stream.destroy === 'function') return stream.destroy();
	    callback(err || new ERR_STREAM_DESTROYED('pipe'));
	  };
	}

	function call$1(fn) {
	  fn();
	}

	function pipe(from, to) {
	  return from.pipe(to);
	}

	function popCallback(streams) {
	  if (!streams.length) return noop$8;
	  if (typeof streams[streams.length - 1] !== 'function') return noop$8;
	  return streams.pop();
	}

	function pipeline() {
	  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
	    streams[_key] = arguments[_key];
	  }

	  var callback = popCallback(streams);
	  if (Array.isArray(streams[0])) streams = streams[0];

	  if (streams.length < 2) {
	    throw new ERR_MISSING_ARGS('streams');
	  }

	  var error;
	  var destroys = streams.map(function (stream, i) {
	    var reading = i < streams.length - 1;
	    var writing = i > 0;
	    return destroyer(stream, reading, writing, function (err) {
	      if (!error) error = err;
	      if (err) destroys.forEach(call$1);
	      if (reading) return;
	      destroys.forEach(call$1);
	      callback(error);
	    });
	  });
	  return streams.reduce(pipe);
	}

	var pipeline_1 = pipeline;

	var readable = createCommonjsModule(function (module, exports) {
	if (process.env.READABLE_STREAM === 'disable' && require$$0__default['default']) {
	  module.exports = require$$0__default['default'].Readable;
	  Object.assign(module.exports, require$$0__default['default']);
	  module.exports.Stream = require$$0__default['default'];
	} else {
	  exports = module.exports = _stream_readable$2;
	  exports.Stream = require$$0__default['default'] || exports;
	  exports.Readable = exports;
	  exports.Writable = _stream_writable$2;
	  exports.Duplex = _stream_duplex$2;
	  exports.Transform = _stream_transform$2;
	  exports.PassThrough = _stream_passthrough$2;
	  exports.finished = endOfStream;
	  exports.pipeline = pipeline_1;
	}
	});

	/**
	 * Contains all configured adapters for the given environment.
	 *
	 * @type {Array}
	 * @public
	 */
	var adapters$1 = [];

	/**
	 * Contains all modifier functions.
	 *
	 * @typs {Array}
	 * @public
	 */
	var modifiers = [];

	/**
	 * Our default logger.
	 *
	 * @public
	 */
	var logger$3 = function devnull() {};

	/**
	 * Register a new adapter that will used to find environments.
	 *
	 * @param {Function} adapter A function that will return the possible env.
	 * @returns {Boolean} Indication of a successful add.
	 * @public
	 */
	function use(adapter) {
	  if (~adapters$1.indexOf(adapter)) return false;

	  adapters$1.push(adapter);
	  return true;
	}

	/**
	 * Assign a new log method.
	 *
	 * @param {Function} custom The log method.
	 * @public
	 */
	function set$1(custom) {
	  logger$3 = custom;
	}

	/**
	 * Check if the namespace is allowed by any of our adapters.
	 *
	 * @param {String} namespace The namespace that needs to be enabled
	 * @returns {Boolean|Promise} Indication if the namespace is enabled by our adapters.
	 * @public
	 */
	function enabled$1(namespace) {
	  var async = [];

	  for (var i = 0; i < adapters$1.length; i++) {
	    if (adapters$1[i].async) {
	      async.push(adapters$1[i]);
	      continue;
	    }

	    if (adapters$1[i](namespace)) return true;
	  }

	  if (!async.length) return false;

	  //
	  // Now that we know that we Async functions, we know we run in an ES6
	  // environment and can use all the API's that they offer, in this case
	  // we want to return a Promise so that we can `await` in React-Native
	  // for an async adapter.
	  //
	  return new Promise(function pinky(resolve) {
	    Promise.all(
	      async.map(function prebind(fn) {
	        return fn(namespace);
	      })
	    ).then(function resolved(values) {
	      resolve(values.some(Boolean));
	    });
	  });
	}

	/**
	 * Add a new message modifier to the debugger.
	 *
	 * @param {Function} fn Modification function.
	 * @returns {Boolean} Indication of a successful add.
	 * @public
	 */
	function modify(fn) {
	  if (~modifiers.indexOf(fn)) return false;

	  modifiers.push(fn);
	  return true;
	}

	/**
	 * Write data to the supplied logger.
	 *
	 * @param {Object} meta Meta information about the log.
	 * @param {Array} args Arguments for console.log.
	 * @public
	 */
	function write$g() {
	  logger$3.apply(logger$3, arguments);
	}

	/**
	 * Process the message with the modifiers.
	 *
	 * @param {Mixed} message The message to be transformed by modifers.
	 * @returns {String} Transformed message.
	 * @public
	 */
	function process$3(message) {
	  for (var i = 0; i < modifiers.length; i++) {
	    message = modifiers[i].apply(modifiers[i], arguments);
	  }

	  return message;
	}

	/**
	 * Introduce options to the logger function.
	 *
	 * @param {Function} fn Calback function.
	 * @param {Object} options Properties to introduce on fn.
	 * @returns {Function} The passed function
	 * @public
	 */
	function introduce(fn, options) {
	  var has = Object.prototype.hasOwnProperty;

	  for (var key in options) {
	    if (has.call(options, key)) {
	      fn[key] = options[key];
	    }
	  }

	  return fn;
	}

	/**
	 * Nope, we're not allowed to write messages.
	 *
	 * @returns {Boolean} false
	 * @public
	 */
	function nope(options) {
	  options.enabled = false;
	  options.modify = modify;
	  options.set = set$1;
	  options.use = use;

	  return introduce(function diagnopes() {
	    return false;
	  }, options);
	}

	/**
	 * Yep, we're allowed to write debug messages.
	 *
	 * @param {Object} options The options for the process.
	 * @returns {Function} The function that does the logging.
	 * @public
	 */
	function yep(options) {
	  /**
	   * The function that receives the actual debug information.
	   *
	   * @returns {Boolean} indication that we're logging.
	   * @public
	   */
	  function diagnostics() {
	    var args = Array.prototype.slice.call(arguments, 0);

	    write$g.call(write$g, options, process$3(args, options));
	    return true;
	  }

	  options.enabled = true;
	  options.modify = modify;
	  options.set = set$1;
	  options.use = use;

	  return introduce(diagnostics, options);
	}

	/**
	 * Simple helper function to introduce various of helper methods to our given
	 * diagnostics function.
	 *
	 * @param {Function} diagnostics The diagnostics function.
	 * @returns {Function} diagnostics
	 * @public
	 */
	var diagnostics$2 = function create(diagnostics) {
	  diagnostics.introduce = introduce;
	  diagnostics.enabled = enabled$1;
	  diagnostics.process = process$3;
	  diagnostics.modify = modify;
	  diagnostics.write = write$g;
	  diagnostics.nope = nope;
	  diagnostics.yep = yep;
	  diagnostics.set = set$1;
	  diagnostics.use = use;

	  return diagnostics;
	};

	/**
	 * Create a new diagnostics logger.
	 *
	 * @param {String} namespace The namespace it should enable.
	 * @param {Object} options Additional options.
	 * @returns {Function} The logger.
	 * @public
	 */
	var diagnostics$1 = diagnostics$2(function prod(namespace, options) {
	  options = options || {};
	  options.namespace = namespace;
	  options.prod = true;
	  options.dev = false;

	  if (!(options.force || prod.force)) return prod.nope(options);
	  return prod.yep(options);
	});

	//
	// Expose the diagnostics logger.
	//
	var production = diagnostics$1;

	var colorName$1 = {
		"aliceblue": [240, 248, 255],
		"antiquewhite": [250, 235, 215],
		"aqua": [0, 255, 255],
		"aquamarine": [127, 255, 212],
		"azure": [240, 255, 255],
		"beige": [245, 245, 220],
		"bisque": [255, 228, 196],
		"black": [0, 0, 0],
		"blanchedalmond": [255, 235, 205],
		"blue": [0, 0, 255],
		"blueviolet": [138, 43, 226],
		"brown": [165, 42, 42],
		"burlywood": [222, 184, 135],
		"cadetblue": [95, 158, 160],
		"chartreuse": [127, 255, 0],
		"chocolate": [210, 105, 30],
		"coral": [255, 127, 80],
		"cornflowerblue": [100, 149, 237],
		"cornsilk": [255, 248, 220],
		"crimson": [220, 20, 60],
		"cyan": [0, 255, 255],
		"darkblue": [0, 0, 139],
		"darkcyan": [0, 139, 139],
		"darkgoldenrod": [184, 134, 11],
		"darkgray": [169, 169, 169],
		"darkgreen": [0, 100, 0],
		"darkgrey": [169, 169, 169],
		"darkkhaki": [189, 183, 107],
		"darkmagenta": [139, 0, 139],
		"darkolivegreen": [85, 107, 47],
		"darkorange": [255, 140, 0],
		"darkorchid": [153, 50, 204],
		"darkred": [139, 0, 0],
		"darksalmon": [233, 150, 122],
		"darkseagreen": [143, 188, 143],
		"darkslateblue": [72, 61, 139],
		"darkslategray": [47, 79, 79],
		"darkslategrey": [47, 79, 79],
		"darkturquoise": [0, 206, 209],
		"darkviolet": [148, 0, 211],
		"deeppink": [255, 20, 147],
		"deepskyblue": [0, 191, 255],
		"dimgray": [105, 105, 105],
		"dimgrey": [105, 105, 105],
		"dodgerblue": [30, 144, 255],
		"firebrick": [178, 34, 34],
		"floralwhite": [255, 250, 240],
		"forestgreen": [34, 139, 34],
		"fuchsia": [255, 0, 255],
		"gainsboro": [220, 220, 220],
		"ghostwhite": [248, 248, 255],
		"gold": [255, 215, 0],
		"goldenrod": [218, 165, 32],
		"gray": [128, 128, 128],
		"green": [0, 128, 0],
		"greenyellow": [173, 255, 47],
		"grey": [128, 128, 128],
		"honeydew": [240, 255, 240],
		"hotpink": [255, 105, 180],
		"indianred": [205, 92, 92],
		"indigo": [75, 0, 130],
		"ivory": [255, 255, 240],
		"khaki": [240, 230, 140],
		"lavender": [230, 230, 250],
		"lavenderblush": [255, 240, 245],
		"lawngreen": [124, 252, 0],
		"lemonchiffon": [255, 250, 205],
		"lightblue": [173, 216, 230],
		"lightcoral": [240, 128, 128],
		"lightcyan": [224, 255, 255],
		"lightgoldenrodyellow": [250, 250, 210],
		"lightgray": [211, 211, 211],
		"lightgreen": [144, 238, 144],
		"lightgrey": [211, 211, 211],
		"lightpink": [255, 182, 193],
		"lightsalmon": [255, 160, 122],
		"lightseagreen": [32, 178, 170],
		"lightskyblue": [135, 206, 250],
		"lightslategray": [119, 136, 153],
		"lightslategrey": [119, 136, 153],
		"lightsteelblue": [176, 196, 222],
		"lightyellow": [255, 255, 224],
		"lime": [0, 255, 0],
		"limegreen": [50, 205, 50],
		"linen": [250, 240, 230],
		"magenta": [255, 0, 255],
		"maroon": [128, 0, 0],
		"mediumaquamarine": [102, 205, 170],
		"mediumblue": [0, 0, 205],
		"mediumorchid": [186, 85, 211],
		"mediumpurple": [147, 112, 219],
		"mediumseagreen": [60, 179, 113],
		"mediumslateblue": [123, 104, 238],
		"mediumspringgreen": [0, 250, 154],
		"mediumturquoise": [72, 209, 204],
		"mediumvioletred": [199, 21, 133],
		"midnightblue": [25, 25, 112],
		"mintcream": [245, 255, 250],
		"mistyrose": [255, 228, 225],
		"moccasin": [255, 228, 181],
		"navajowhite": [255, 222, 173],
		"navy": [0, 0, 128],
		"oldlace": [253, 245, 230],
		"olive": [128, 128, 0],
		"olivedrab": [107, 142, 35],
		"orange": [255, 165, 0],
		"orangered": [255, 69, 0],
		"orchid": [218, 112, 214],
		"palegoldenrod": [238, 232, 170],
		"palegreen": [152, 251, 152],
		"paleturquoise": [175, 238, 238],
		"palevioletred": [219, 112, 147],
		"papayawhip": [255, 239, 213],
		"peachpuff": [255, 218, 185],
		"peru": [205, 133, 63],
		"pink": [255, 192, 203],
		"plum": [221, 160, 221],
		"powderblue": [176, 224, 230],
		"purple": [128, 0, 128],
		"rebeccapurple": [102, 51, 153],
		"red": [255, 0, 0],
		"rosybrown": [188, 143, 143],
		"royalblue": [65, 105, 225],
		"saddlebrown": [139, 69, 19],
		"salmon": [250, 128, 114],
		"sandybrown": [244, 164, 96],
		"seagreen": [46, 139, 87],
		"seashell": [255, 245, 238],
		"sienna": [160, 82, 45],
		"silver": [192, 192, 192],
		"skyblue": [135, 206, 235],
		"slateblue": [106, 90, 205],
		"slategray": [112, 128, 144],
		"slategrey": [112, 128, 144],
		"snow": [255, 250, 250],
		"springgreen": [0, 255, 127],
		"steelblue": [70, 130, 180],
		"tan": [210, 180, 140],
		"teal": [0, 128, 128],
		"thistle": [216, 191, 216],
		"tomato": [255, 99, 71],
		"turquoise": [64, 224, 208],
		"violet": [238, 130, 238],
		"wheat": [245, 222, 179],
		"white": [255, 255, 255],
		"whitesmoke": [245, 245, 245],
		"yellow": [255, 255, 0],
		"yellowgreen": [154, 205, 50]
	};

	var isArrayish$1 = function isArrayish(obj) {
		if (!obj || typeof obj === 'string') {
			return false;
		}

		return obj instanceof Array || Array.isArray(obj) ||
			(obj.length >= 0 && (obj.splice instanceof Function ||
				(Object.getOwnPropertyDescriptor(obj, (obj.length - 1)) && obj.constructor.name !== 'String')));
	};

	var simpleSwizzle = createCommonjsModule(function (module) {



	var concat = Array.prototype.concat;
	var slice = Array.prototype.slice;

	var swizzle = module.exports = function swizzle(args) {
		var results = [];

		for (var i = 0, len = args.length; i < len; i++) {
			var arg = args[i];

			if (isArrayish$1(arg)) {
				// http://jsperf.com/javascript-array-concat-vs-push/98
				results = concat.call(results, slice.call(arg));
			} else {
				results.push(arg);
			}
		}

		return results;
	};

	swizzle.wrap = function (fn) {
		return function () {
			return fn(swizzle(arguments));
		};
	};
	});

	/* MIT license */

	var colorString = createCommonjsModule(function (module) {
	var reverseNames = {};

	// create a list of reverse color names
	for (var name in colorName$1) {
		if (colorName$1.hasOwnProperty(name)) {
			reverseNames[colorName$1[name]] = name;
		}
	}

	var cs = module.exports = {
		to: {},
		get: {}
	};

	cs.get = function (string) {
		var prefix = string.substring(0, 3).toLowerCase();
		var val;
		var model;
		switch (prefix) {
			case 'hsl':
				val = cs.get.hsl(string);
				model = 'hsl';
				break;
			case 'hwb':
				val = cs.get.hwb(string);
				model = 'hwb';
				break;
			default:
				val = cs.get.rgb(string);
				model = 'rgb';
				break;
		}

		if (!val) {
			return null;
		}

		return {model: model, value: val};
	};

	cs.get.rgb = function (string) {
		if (!string) {
			return null;
		}

		var abbr = /^#([a-f0-9]{3,4})$/i;
		var hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;
		var rgba = /^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
		var per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
		var keyword = /(\D+)/;

		var rgb = [0, 0, 0, 1];
		var match;
		var i;
		var hexAlpha;

		if (match = string.match(hex)) {
			hexAlpha = match[2];
			match = match[1];

			for (i = 0; i < 3; i++) {
				// https://jsperf.com/slice-vs-substr-vs-substring-methods-long-string/19
				var i2 = i * 2;
				rgb[i] = parseInt(match.slice(i2, i2 + 2), 16);
			}

			if (hexAlpha) {
				rgb[3] = parseInt(hexAlpha, 16) / 255;
			}
		} else if (match = string.match(abbr)) {
			match = match[1];
			hexAlpha = match[3];

			for (i = 0; i < 3; i++) {
				rgb[i] = parseInt(match[i] + match[i], 16);
			}

			if (hexAlpha) {
				rgb[3] = parseInt(hexAlpha + hexAlpha, 16) / 255;
			}
		} else if (match = string.match(rgba)) {
			for (i = 0; i < 3; i++) {
				rgb[i] = parseInt(match[i + 1], 0);
			}

			if (match[4]) {
				rgb[3] = parseFloat(match[4]);
			}
		} else if (match = string.match(per)) {
			for (i = 0; i < 3; i++) {
				rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
			}

			if (match[4]) {
				rgb[3] = parseFloat(match[4]);
			}
		} else if (match = string.match(keyword)) {
			if (match[1] === 'transparent') {
				return [0, 0, 0, 0];
			}

			rgb = colorName$1[match[1]];

			if (!rgb) {
				return null;
			}

			rgb[3] = 1;

			return rgb;
		} else {
			return null;
		}

		for (i = 0; i < 3; i++) {
			rgb[i] = clamp(rgb[i], 0, 255);
		}
		rgb[3] = clamp(rgb[3], 0, 1);

		return rgb;
	};

	cs.get.hsl = function (string) {
		if (!string) {
			return null;
		}

		var hsl = /^hsla?\(\s*([+-]?(?:\d*\.)?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
		var match = string.match(hsl);

		if (match) {
			var alpha = parseFloat(match[4]);
			var h = (parseFloat(match[1]) + 360) % 360;
			var s = clamp(parseFloat(match[2]), 0, 100);
			var l = clamp(parseFloat(match[3]), 0, 100);
			var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);

			return [h, s, l, a];
		}

		return null;
	};

	cs.get.hwb = function (string) {
		if (!string) {
			return null;
		}

		var hwb = /^hwb\(\s*([+-]?\d*[\.]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
		var match = string.match(hwb);

		if (match) {
			var alpha = parseFloat(match[4]);
			var h = ((parseFloat(match[1]) % 360) + 360) % 360;
			var w = clamp(parseFloat(match[2]), 0, 100);
			var b = clamp(parseFloat(match[3]), 0, 100);
			var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
			return [h, w, b, a];
		}

		return null;
	};

	cs.to.hex = function () {
		var rgba = simpleSwizzle(arguments);

		return (
			'#' +
			hexDouble(rgba[0]) +
			hexDouble(rgba[1]) +
			hexDouble(rgba[2]) +
			(rgba[3] < 1
				? (hexDouble(Math.round(rgba[3] * 255)))
				: '')
		);
	};

	cs.to.rgb = function () {
		var rgba = simpleSwizzle(arguments);

		return rgba.length < 4 || rgba[3] === 1
			? 'rgb(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ')'
			: 'rgba(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ', ' + rgba[3] + ')';
	};

	cs.to.rgb.percent = function () {
		var rgba = simpleSwizzle(arguments);

		var r = Math.round(rgba[0] / 255 * 100);
		var g = Math.round(rgba[1] / 255 * 100);
		var b = Math.round(rgba[2] / 255 * 100);

		return rgba.length < 4 || rgba[3] === 1
			? 'rgb(' + r + '%, ' + g + '%, ' + b + '%)'
			: 'rgba(' + r + '%, ' + g + '%, ' + b + '%, ' + rgba[3] + ')';
	};

	cs.to.hsl = function () {
		var hsla = simpleSwizzle(arguments);
		return hsla.length < 4 || hsla[3] === 1
			? 'hsl(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%)'
			: 'hsla(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%, ' + hsla[3] + ')';
	};

	// hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax
	// (hwb have alpha optional & 1 is default value)
	cs.to.hwb = function () {
		var hwba = simpleSwizzle(arguments);

		var a = '';
		if (hwba.length >= 4 && hwba[3] !== 1) {
			a = ', ' + hwba[3];
		}

		return 'hwb(' + hwba[0] + ', ' + hwba[1] + '%, ' + hwba[2] + '%' + a + ')';
	};

	cs.to.keyword = function (rgb) {
		return reverseNames[rgb.slice(0, 3)];
	};

	// helpers
	function clamp(num, min, max) {
		return Math.min(Math.max(min, num), max);
	}

	function hexDouble(num) {
		var str = num.toString(16).toUpperCase();
		return (str.length < 2) ? '0' + str : str;
	}
	});

	var colorName = {
		"aliceblue": [240, 248, 255],
		"antiquewhite": [250, 235, 215],
		"aqua": [0, 255, 255],
		"aquamarine": [127, 255, 212],
		"azure": [240, 255, 255],
		"beige": [245, 245, 220],
		"bisque": [255, 228, 196],
		"black": [0, 0, 0],
		"blanchedalmond": [255, 235, 205],
		"blue": [0, 0, 255],
		"blueviolet": [138, 43, 226],
		"brown": [165, 42, 42],
		"burlywood": [222, 184, 135],
		"cadetblue": [95, 158, 160],
		"chartreuse": [127, 255, 0],
		"chocolate": [210, 105, 30],
		"coral": [255, 127, 80],
		"cornflowerblue": [100, 149, 237],
		"cornsilk": [255, 248, 220],
		"crimson": [220, 20, 60],
		"cyan": [0, 255, 255],
		"darkblue": [0, 0, 139],
		"darkcyan": [0, 139, 139],
		"darkgoldenrod": [184, 134, 11],
		"darkgray": [169, 169, 169],
		"darkgreen": [0, 100, 0],
		"darkgrey": [169, 169, 169],
		"darkkhaki": [189, 183, 107],
		"darkmagenta": [139, 0, 139],
		"darkolivegreen": [85, 107, 47],
		"darkorange": [255, 140, 0],
		"darkorchid": [153, 50, 204],
		"darkred": [139, 0, 0],
		"darksalmon": [233, 150, 122],
		"darkseagreen": [143, 188, 143],
		"darkslateblue": [72, 61, 139],
		"darkslategray": [47, 79, 79],
		"darkslategrey": [47, 79, 79],
		"darkturquoise": [0, 206, 209],
		"darkviolet": [148, 0, 211],
		"deeppink": [255, 20, 147],
		"deepskyblue": [0, 191, 255],
		"dimgray": [105, 105, 105],
		"dimgrey": [105, 105, 105],
		"dodgerblue": [30, 144, 255],
		"firebrick": [178, 34, 34],
		"floralwhite": [255, 250, 240],
		"forestgreen": [34, 139, 34],
		"fuchsia": [255, 0, 255],
		"gainsboro": [220, 220, 220],
		"ghostwhite": [248, 248, 255],
		"gold": [255, 215, 0],
		"goldenrod": [218, 165, 32],
		"gray": [128, 128, 128],
		"green": [0, 128, 0],
		"greenyellow": [173, 255, 47],
		"grey": [128, 128, 128],
		"honeydew": [240, 255, 240],
		"hotpink": [255, 105, 180],
		"indianred": [205, 92, 92],
		"indigo": [75, 0, 130],
		"ivory": [255, 255, 240],
		"khaki": [240, 230, 140],
		"lavender": [230, 230, 250],
		"lavenderblush": [255, 240, 245],
		"lawngreen": [124, 252, 0],
		"lemonchiffon": [255, 250, 205],
		"lightblue": [173, 216, 230],
		"lightcoral": [240, 128, 128],
		"lightcyan": [224, 255, 255],
		"lightgoldenrodyellow": [250, 250, 210],
		"lightgray": [211, 211, 211],
		"lightgreen": [144, 238, 144],
		"lightgrey": [211, 211, 211],
		"lightpink": [255, 182, 193],
		"lightsalmon": [255, 160, 122],
		"lightseagreen": [32, 178, 170],
		"lightskyblue": [135, 206, 250],
		"lightslategray": [119, 136, 153],
		"lightslategrey": [119, 136, 153],
		"lightsteelblue": [176, 196, 222],
		"lightyellow": [255, 255, 224],
		"lime": [0, 255, 0],
		"limegreen": [50, 205, 50],
		"linen": [250, 240, 230],
		"magenta": [255, 0, 255],
		"maroon": [128, 0, 0],
		"mediumaquamarine": [102, 205, 170],
		"mediumblue": [0, 0, 205],
		"mediumorchid": [186, 85, 211],
		"mediumpurple": [147, 112, 219],
		"mediumseagreen": [60, 179, 113],
		"mediumslateblue": [123, 104, 238],
		"mediumspringgreen": [0, 250, 154],
		"mediumturquoise": [72, 209, 204],
		"mediumvioletred": [199, 21, 133],
		"midnightblue": [25, 25, 112],
		"mintcream": [245, 255, 250],
		"mistyrose": [255, 228, 225],
		"moccasin": [255, 228, 181],
		"navajowhite": [255, 222, 173],
		"navy": [0, 0, 128],
		"oldlace": [253, 245, 230],
		"olive": [128, 128, 0],
		"olivedrab": [107, 142, 35],
		"orange": [255, 165, 0],
		"orangered": [255, 69, 0],
		"orchid": [218, 112, 214],
		"palegoldenrod": [238, 232, 170],
		"palegreen": [152, 251, 152],
		"paleturquoise": [175, 238, 238],
		"palevioletred": [219, 112, 147],
		"papayawhip": [255, 239, 213],
		"peachpuff": [255, 218, 185],
		"peru": [205, 133, 63],
		"pink": [255, 192, 203],
		"plum": [221, 160, 221],
		"powderblue": [176, 224, 230],
		"purple": [128, 0, 128],
		"rebeccapurple": [102, 51, 153],
		"red": [255, 0, 0],
		"rosybrown": [188, 143, 143],
		"royalblue": [65, 105, 225],
		"saddlebrown": [139, 69, 19],
		"salmon": [250, 128, 114],
		"sandybrown": [244, 164, 96],
		"seagreen": [46, 139, 87],
		"seashell": [255, 245, 238],
		"sienna": [160, 82, 45],
		"silver": [192, 192, 192],
		"skyblue": [135, 206, 235],
		"slateblue": [106, 90, 205],
		"slategray": [112, 128, 144],
		"slategrey": [112, 128, 144],
		"snow": [255, 250, 250],
		"springgreen": [0, 255, 127],
		"steelblue": [70, 130, 180],
		"tan": [210, 180, 140],
		"teal": [0, 128, 128],
		"thistle": [216, 191, 216],
		"tomato": [255, 99, 71],
		"turquoise": [64, 224, 208],
		"violet": [238, 130, 238],
		"wheat": [245, 222, 179],
		"white": [255, 255, 255],
		"whitesmoke": [245, 245, 245],
		"yellow": [255, 255, 0],
		"yellowgreen": [154, 205, 50]
	};

	/* MIT license */

	var conversions = createCommonjsModule(function (module) {
	// NOTE: conversions should only return primitive values (i.e. arrays, or
	//       values that give correct `typeof` results).
	//       do not use box values types (i.e. Number(), String(), etc.)

	var reverseKeywords = {};
	for (var key in colorName) {
		if (colorName.hasOwnProperty(key)) {
			reverseKeywords[colorName[key]] = key;
		}
	}

	var convert = module.exports = {
		rgb: {channels: 3, labels: 'rgb'},
		hsl: {channels: 3, labels: 'hsl'},
		hsv: {channels: 3, labels: 'hsv'},
		hwb: {channels: 3, labels: 'hwb'},
		cmyk: {channels: 4, labels: 'cmyk'},
		xyz: {channels: 3, labels: 'xyz'},
		lab: {channels: 3, labels: 'lab'},
		lch: {channels: 3, labels: 'lch'},
		hex: {channels: 1, labels: ['hex']},
		keyword: {channels: 1, labels: ['keyword']},
		ansi16: {channels: 1, labels: ['ansi16']},
		ansi256: {channels: 1, labels: ['ansi256']},
		hcg: {channels: 3, labels: ['h', 'c', 'g']},
		apple: {channels: 3, labels: ['r16', 'g16', 'b16']},
		gray: {channels: 1, labels: ['gray']}
	};

	// hide .channels and .labels properties
	for (var model in convert) {
		if (convert.hasOwnProperty(model)) {
			if (!('channels' in convert[model])) {
				throw new Error('missing channels property: ' + model);
			}

			if (!('labels' in convert[model])) {
				throw new Error('missing channel labels property: ' + model);
			}

			if (convert[model].labels.length !== convert[model].channels) {
				throw new Error('channel and label counts mismatch: ' + model);
			}

			var channels = convert[model].channels;
			var labels = convert[model].labels;
			delete convert[model].channels;
			delete convert[model].labels;
			Object.defineProperty(convert[model], 'channels', {value: channels});
			Object.defineProperty(convert[model], 'labels', {value: labels});
		}
	}

	convert.rgb.hsl = function (rgb) {
		var r = rgb[0] / 255;
		var g = rgb[1] / 255;
		var b = rgb[2] / 255;
		var min = Math.min(r, g, b);
		var max = Math.max(r, g, b);
		var delta = max - min;
		var h;
		var s;
		var l;

		if (max === min) {
			h = 0;
		} else if (r === max) {
			h = (g - b) / delta;
		} else if (g === max) {
			h = 2 + (b - r) / delta;
		} else if (b === max) {
			h = 4 + (r - g) / delta;
		}

		h = Math.min(h * 60, 360);

		if (h < 0) {
			h += 360;
		}

		l = (min + max) / 2;

		if (max === min) {
			s = 0;
		} else if (l <= 0.5) {
			s = delta / (max + min);
		} else {
			s = delta / (2 - max - min);
		}

		return [h, s * 100, l * 100];
	};

	convert.rgb.hsv = function (rgb) {
		var rdif;
		var gdif;
		var bdif;
		var h;
		var s;

		var r = rgb[0] / 255;
		var g = rgb[1] / 255;
		var b = rgb[2] / 255;
		var v = Math.max(r, g, b);
		var diff = v - Math.min(r, g, b);
		var diffc = function (c) {
			return (v - c) / 6 / diff + 1 / 2;
		};

		if (diff === 0) {
			h = s = 0;
		} else {
			s = diff / v;
			rdif = diffc(r);
			gdif = diffc(g);
			bdif = diffc(b);

			if (r === v) {
				h = bdif - gdif;
			} else if (g === v) {
				h = (1 / 3) + rdif - bdif;
			} else if (b === v) {
				h = (2 / 3) + gdif - rdif;
			}
			if (h < 0) {
				h += 1;
			} else if (h > 1) {
				h -= 1;
			}
		}

		return [
			h * 360,
			s * 100,
			v * 100
		];
	};

	convert.rgb.hwb = function (rgb) {
		var r = rgb[0];
		var g = rgb[1];
		var b = rgb[2];
		var h = convert.rgb.hsl(rgb)[0];
		var w = 1 / 255 * Math.min(r, Math.min(g, b));

		b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));

		return [h, w * 100, b * 100];
	};

	convert.rgb.cmyk = function (rgb) {
		var r = rgb[0] / 255;
		var g = rgb[1] / 255;
		var b = rgb[2] / 255;
		var c;
		var m;
		var y;
		var k;

		k = Math.min(1 - r, 1 - g, 1 - b);
		c = (1 - r - k) / (1 - k) || 0;
		m = (1 - g - k) / (1 - k) || 0;
		y = (1 - b - k) / (1 - k) || 0;

		return [c * 100, m * 100, y * 100, k * 100];
	};

	/**
	 * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
	 * */
	function comparativeDistance(x, y) {
		return (
			Math.pow(x[0] - y[0], 2) +
			Math.pow(x[1] - y[1], 2) +
			Math.pow(x[2] - y[2], 2)
		);
	}

	convert.rgb.keyword = function (rgb) {
		var reversed = reverseKeywords[rgb];
		if (reversed) {
			return reversed;
		}

		var currentClosestDistance = Infinity;
		var currentClosestKeyword;

		for (var keyword in colorName) {
			if (colorName.hasOwnProperty(keyword)) {
				var value = colorName[keyword];

				// Compute comparative distance
				var distance = comparativeDistance(rgb, value);

				// Check if its less, if so set as closest
				if (distance < currentClosestDistance) {
					currentClosestDistance = distance;
					currentClosestKeyword = keyword;
				}
			}
		}

		return currentClosestKeyword;
	};

	convert.keyword.rgb = function (keyword) {
		return colorName[keyword];
	};

	convert.rgb.xyz = function (rgb) {
		var r = rgb[0] / 255;
		var g = rgb[1] / 255;
		var b = rgb[2] / 255;

		// assume sRGB
		r = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);
		g = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);
		b = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);

		var x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);
		var y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);
		var z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);

		return [x * 100, y * 100, z * 100];
	};

	convert.rgb.lab = function (rgb) {
		var xyz = convert.rgb.xyz(rgb);
		var x = xyz[0];
		var y = xyz[1];
		var z = xyz[2];
		var l;
		var a;
		var b;

		x /= 95.047;
		y /= 100;
		z /= 108.883;

		x = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);
		y = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);
		z = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);

		l = (116 * y) - 16;
		a = 500 * (x - y);
		b = 200 * (y - z);

		return [l, a, b];
	};

	convert.hsl.rgb = function (hsl) {
		var h = hsl[0] / 360;
		var s = hsl[1] / 100;
		var l = hsl[2] / 100;
		var t1;
		var t2;
		var t3;
		var rgb;
		var val;

		if (s === 0) {
			val = l * 255;
			return [val, val, val];
		}

		if (l < 0.5) {
			t2 = l * (1 + s);
		} else {
			t2 = l + s - l * s;
		}

		t1 = 2 * l - t2;

		rgb = [0, 0, 0];
		for (var i = 0; i < 3; i++) {
			t3 = h + 1 / 3 * -(i - 1);
			if (t3 < 0) {
				t3++;
			}
			if (t3 > 1) {
				t3--;
			}

			if (6 * t3 < 1) {
				val = t1 + (t2 - t1) * 6 * t3;
			} else if (2 * t3 < 1) {
				val = t2;
			} else if (3 * t3 < 2) {
				val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
			} else {
				val = t1;
			}

			rgb[i] = val * 255;
		}

		return rgb;
	};

	convert.hsl.hsv = function (hsl) {
		var h = hsl[0];
		var s = hsl[1] / 100;
		var l = hsl[2] / 100;
		var smin = s;
		var lmin = Math.max(l, 0.01);
		var sv;
		var v;

		l *= 2;
		s *= (l <= 1) ? l : 2 - l;
		smin *= lmin <= 1 ? lmin : 2 - lmin;
		v = (l + s) / 2;
		sv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);

		return [h, sv * 100, v * 100];
	};

	convert.hsv.rgb = function (hsv) {
		var h = hsv[0] / 60;
		var s = hsv[1] / 100;
		var v = hsv[2] / 100;
		var hi = Math.floor(h) % 6;

		var f = h - Math.floor(h);
		var p = 255 * v * (1 - s);
		var q = 255 * v * (1 - (s * f));
		var t = 255 * v * (1 - (s * (1 - f)));
		v *= 255;

		switch (hi) {
			case 0:
				return [v, t, p];
			case 1:
				return [q, v, p];
			case 2:
				return [p, v, t];
			case 3:
				return [p, q, v];
			case 4:
				return [t, p, v];
			case 5:
				return [v, p, q];
		}
	};

	convert.hsv.hsl = function (hsv) {
		var h = hsv[0];
		var s = hsv[1] / 100;
		var v = hsv[2] / 100;
		var vmin = Math.max(v, 0.01);
		var lmin;
		var sl;
		var l;

		l = (2 - s) * v;
		lmin = (2 - s) * vmin;
		sl = s * vmin;
		sl /= (lmin <= 1) ? lmin : 2 - lmin;
		sl = sl || 0;
		l /= 2;

		return [h, sl * 100, l * 100];
	};

	// http://dev.w3.org/csswg/css-color/#hwb-to-rgb
	convert.hwb.rgb = function (hwb) {
		var h = hwb[0] / 360;
		var wh = hwb[1] / 100;
		var bl = hwb[2] / 100;
		var ratio = wh + bl;
		var i;
		var v;
		var f;
		var n;

		// wh + bl cant be > 1
		if (ratio > 1) {
			wh /= ratio;
			bl /= ratio;
		}

		i = Math.floor(6 * h);
		v = 1 - bl;
		f = 6 * h - i;

		if ((i & 0x01) !== 0) {
			f = 1 - f;
		}

		n = wh + f * (v - wh); // linear interpolation

		var r;
		var g;
		var b;
		switch (i) {
			default:
			case 6:
			case 0: r = v; g = n; b = wh; break;
			case 1: r = n; g = v; b = wh; break;
			case 2: r = wh; g = v; b = n; break;
			case 3: r = wh; g = n; b = v; break;
			case 4: r = n; g = wh; b = v; break;
			case 5: r = v; g = wh; b = n; break;
		}

		return [r * 255, g * 255, b * 255];
	};

	convert.cmyk.rgb = function (cmyk) {
		var c = cmyk[0] / 100;
		var m = cmyk[1] / 100;
		var y = cmyk[2] / 100;
		var k = cmyk[3] / 100;
		var r;
		var g;
		var b;

		r = 1 - Math.min(1, c * (1 - k) + k);
		g = 1 - Math.min(1, m * (1 - k) + k);
		b = 1 - Math.min(1, y * (1 - k) + k);

		return [r * 255, g * 255, b * 255];
	};

	convert.xyz.rgb = function (xyz) {
		var x = xyz[0] / 100;
		var y = xyz[1] / 100;
		var z = xyz[2] / 100;
		var r;
		var g;
		var b;

		r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);
		g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);
		b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);

		// assume sRGB
		r = r > 0.0031308
			? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)
			: r * 12.92;

		g = g > 0.0031308
			? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)
			: g * 12.92;

		b = b > 0.0031308
			? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)
			: b * 12.92;

		r = Math.min(Math.max(0, r), 1);
		g = Math.min(Math.max(0, g), 1);
		b = Math.min(Math.max(0, b), 1);

		return [r * 255, g * 255, b * 255];
	};

	convert.xyz.lab = function (xyz) {
		var x = xyz[0];
		var y = xyz[1];
		var z = xyz[2];
		var l;
		var a;
		var b;

		x /= 95.047;
		y /= 100;
		z /= 108.883;

		x = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);
		y = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);
		z = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);

		l = (116 * y) - 16;
		a = 500 * (x - y);
		b = 200 * (y - z);

		return [l, a, b];
	};

	convert.lab.xyz = function (lab) {
		var l = lab[0];
		var a = lab[1];
		var b = lab[2];
		var x;
		var y;
		var z;

		y = (l + 16) / 116;
		x = a / 500 + y;
		z = y - b / 200;

		var y2 = Math.pow(y, 3);
		var x2 = Math.pow(x, 3);
		var z2 = Math.pow(z, 3);
		y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
		x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
		z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;

		x *= 95.047;
		y *= 100;
		z *= 108.883;

		return [x, y, z];
	};

	convert.lab.lch = function (lab) {
		var l = lab[0];
		var a = lab[1];
		var b = lab[2];
		var hr;
		var h;
		var c;

		hr = Math.atan2(b, a);
		h = hr * 360 / 2 / Math.PI;

		if (h < 0) {
			h += 360;
		}

		c = Math.sqrt(a * a + b * b);

		return [l, c, h];
	};

	convert.lch.lab = function (lch) {
		var l = lch[0];
		var c = lch[1];
		var h = lch[2];
		var a;
		var b;
		var hr;

		hr = h / 360 * 2 * Math.PI;
		a = c * Math.cos(hr);
		b = c * Math.sin(hr);

		return [l, a, b];
	};

	convert.rgb.ansi16 = function (args) {
		var r = args[0];
		var g = args[1];
		var b = args[2];
		var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization

		value = Math.round(value / 50);

		if (value === 0) {
			return 30;
		}

		var ansi = 30
			+ ((Math.round(b / 255) << 2)
			| (Math.round(g / 255) << 1)
			| Math.round(r / 255));

		if (value === 2) {
			ansi += 60;
		}

		return ansi;
	};

	convert.hsv.ansi16 = function (args) {
		// optimization here; we already know the value and don't need to get
		// it converted for us.
		return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
	};

	convert.rgb.ansi256 = function (args) {
		var r = args[0];
		var g = args[1];
		var b = args[2];

		// we use the extended greyscale palette here, with the exception of
		// black and white. normal palette only has 4 greyscale shades.
		if (r === g && g === b) {
			if (r < 8) {
				return 16;
			}

			if (r > 248) {
				return 231;
			}

			return Math.round(((r - 8) / 247) * 24) + 232;
		}

		var ansi = 16
			+ (36 * Math.round(r / 255 * 5))
			+ (6 * Math.round(g / 255 * 5))
			+ Math.round(b / 255 * 5);

		return ansi;
	};

	convert.ansi16.rgb = function (args) {
		var color = args % 10;

		// handle greyscale
		if (color === 0 || color === 7) {
			if (args > 50) {
				color += 3.5;
			}

			color = color / 10.5 * 255;

			return [color, color, color];
		}

		var mult = (~~(args > 50) + 1) * 0.5;
		var r = ((color & 1) * mult) * 255;
		var g = (((color >> 1) & 1) * mult) * 255;
		var b = (((color >> 2) & 1) * mult) * 255;

		return [r, g, b];
	};

	convert.ansi256.rgb = function (args) {
		// handle greyscale
		if (args >= 232) {
			var c = (args - 232) * 10 + 8;
			return [c, c, c];
		}

		args -= 16;

		var rem;
		var r = Math.floor(args / 36) / 5 * 255;
		var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
		var b = (rem % 6) / 5 * 255;

		return [r, g, b];
	};

	convert.rgb.hex = function (args) {
		var integer = ((Math.round(args[0]) & 0xFF) << 16)
			+ ((Math.round(args[1]) & 0xFF) << 8)
			+ (Math.round(args[2]) & 0xFF);

		var string = integer.toString(16).toUpperCase();
		return '000000'.substring(string.length) + string;
	};

	convert.hex.rgb = function (args) {
		var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
		if (!match) {
			return [0, 0, 0];
		}

		var colorString = match[0];

		if (match[0].length === 3) {
			colorString = colorString.split('').map(function (char) {
				return char + char;
			}).join('');
		}

		var integer = parseInt(colorString, 16);
		var r = (integer >> 16) & 0xFF;
		var g = (integer >> 8) & 0xFF;
		var b = integer & 0xFF;

		return [r, g, b];
	};

	convert.rgb.hcg = function (rgb) {
		var r = rgb[0] / 255;
		var g = rgb[1] / 255;
		var b = rgb[2] / 255;
		var max = Math.max(Math.max(r, g), b);
		var min = Math.min(Math.min(r, g), b);
		var chroma = (max - min);
		var grayscale;
		var hue;

		if (chroma < 1) {
			grayscale = min / (1 - chroma);
		} else {
			grayscale = 0;
		}

		if (chroma <= 0) {
			hue = 0;
		} else
		if (max === r) {
			hue = ((g - b) / chroma) % 6;
		} else
		if (max === g) {
			hue = 2 + (b - r) / chroma;
		} else {
			hue = 4 + (r - g) / chroma + 4;
		}

		hue /= 6;
		hue %= 1;

		return [hue * 360, chroma * 100, grayscale * 100];
	};

	convert.hsl.hcg = function (hsl) {
		var s = hsl[1] / 100;
		var l = hsl[2] / 100;
		var c = 1;
		var f = 0;

		if (l < 0.5) {
			c = 2.0 * s * l;
		} else {
			c = 2.0 * s * (1.0 - l);
		}

		if (c < 1.0) {
			f = (l - 0.5 * c) / (1.0 - c);
		}

		return [hsl[0], c * 100, f * 100];
	};

	convert.hsv.hcg = function (hsv) {
		var s = hsv[1] / 100;
		var v = hsv[2] / 100;

		var c = s * v;
		var f = 0;

		if (c < 1.0) {
			f = (v - c) / (1 - c);
		}

		return [hsv[0], c * 100, f * 100];
	};

	convert.hcg.rgb = function (hcg) {
		var h = hcg[0] / 360;
		var c = hcg[1] / 100;
		var g = hcg[2] / 100;

		if (c === 0.0) {
			return [g * 255, g * 255, g * 255];
		}

		var pure = [0, 0, 0];
		var hi = (h % 1) * 6;
		var v = hi % 1;
		var w = 1 - v;
		var mg = 0;

		switch (Math.floor(hi)) {
			case 0:
				pure[0] = 1; pure[1] = v; pure[2] = 0; break;
			case 1:
				pure[0] = w; pure[1] = 1; pure[2] = 0; break;
			case 2:
				pure[0] = 0; pure[1] = 1; pure[2] = v; break;
			case 3:
				pure[0] = 0; pure[1] = w; pure[2] = 1; break;
			case 4:
				pure[0] = v; pure[1] = 0; pure[2] = 1; break;
			default:
				pure[0] = 1; pure[1] = 0; pure[2] = w;
		}

		mg = (1.0 - c) * g;

		return [
			(c * pure[0] + mg) * 255,
			(c * pure[1] + mg) * 255,
			(c * pure[2] + mg) * 255
		];
	};

	convert.hcg.hsv = function (hcg) {
		var c = hcg[1] / 100;
		var g = hcg[2] / 100;

		var v = c + g * (1.0 - c);
		var f = 0;

		if (v > 0.0) {
			f = c / v;
		}

		return [hcg[0], f * 100, v * 100];
	};

	convert.hcg.hsl = function (hcg) {
		var c = hcg[1] / 100;
		var g = hcg[2] / 100;

		var l = g * (1.0 - c) + 0.5 * c;
		var s = 0;

		if (l > 0.0 && l < 0.5) {
			s = c / (2 * l);
		} else
		if (l >= 0.5 && l < 1.0) {
			s = c / (2 * (1 - l));
		}

		return [hcg[0], s * 100, l * 100];
	};

	convert.hcg.hwb = function (hcg) {
		var c = hcg[1] / 100;
		var g = hcg[2] / 100;
		var v = c + g * (1.0 - c);
		return [hcg[0], (v - c) * 100, (1 - v) * 100];
	};

	convert.hwb.hcg = function (hwb) {
		var w = hwb[1] / 100;
		var b = hwb[2] / 100;
		var v = 1 - b;
		var c = v - w;
		var g = 0;

		if (c < 1) {
			g = (v - c) / (1 - c);
		}

		return [hwb[0], c * 100, g * 100];
	};

	convert.apple.rgb = function (apple) {
		return [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];
	};

	convert.rgb.apple = function (rgb) {
		return [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];
	};

	convert.gray.rgb = function (args) {
		return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
	};

	convert.gray.hsl = convert.gray.hsv = function (args) {
		return [0, 0, args[0]];
	};

	convert.gray.hwb = function (gray) {
		return [0, 100, gray[0]];
	};

	convert.gray.cmyk = function (gray) {
		return [0, 0, 0, gray[0]];
	};

	convert.gray.lab = function (gray) {
		return [gray[0], 0, 0];
	};

	convert.gray.hex = function (gray) {
		var val = Math.round(gray[0] / 100 * 255) & 0xFF;
		var integer = (val << 16) + (val << 8) + val;

		var string = integer.toString(16).toUpperCase();
		return '000000'.substring(string.length) + string;
	};

	convert.rgb.gray = function (rgb) {
		var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
		return [val / 255 * 100];
	};
	});

	/*
		this function routes a model to all other models.

		all functions that are routed have a property `.conversion` attached
		to the returned synthetic function. This property is an array
		of strings, each with the steps in between the 'from' and 'to'
		color models (inclusive).

		conversions that are not possible simply are not included.
	*/

	function buildGraph() {
		var graph = {};
		// https://jsperf.com/object-keys-vs-for-in-with-closure/3
		var models = Object.keys(conversions);

		for (var len = models.length, i = 0; i < len; i++) {
			graph[models[i]] = {
				// http://jsperf.com/1-vs-infinity
				// micro-opt, but this is simple.
				distance: -1,
				parent: null
			};
		}

		return graph;
	}

	// https://en.wikipedia.org/wiki/Breadth-first_search
	function deriveBFS(fromModel) {
		var graph = buildGraph();
		var queue = [fromModel]; // unshift -> queue -> pop

		graph[fromModel].distance = 0;

		while (queue.length) {
			var current = queue.pop();
			var adjacents = Object.keys(conversions[current]);

			for (var len = adjacents.length, i = 0; i < len; i++) {
				var adjacent = adjacents[i];
				var node = graph[adjacent];

				if (node.distance === -1) {
					node.distance = graph[current].distance + 1;
					node.parent = current;
					queue.unshift(adjacent);
				}
			}
		}

		return graph;
	}

	function link(from, to) {
		return function (args) {
			return to(from(args));
		};
	}

	function wrapConversion(toModel, graph) {
		var path = [graph[toModel].parent, toModel];
		var fn = conversions[graph[toModel].parent][toModel];

		var cur = graph[toModel].parent;
		while (graph[cur].parent) {
			path.unshift(graph[cur].parent);
			fn = link(conversions[graph[cur].parent][cur], fn);
			cur = graph[cur].parent;
		}

		fn.conversion = path;
		return fn;
	}

	var route = function (fromModel) {
		var graph = deriveBFS(fromModel);
		var conversion = {};

		var models = Object.keys(graph);
		for (var len = models.length, i = 0; i < len; i++) {
			var toModel = models[i];
			var node = graph[toModel];

			if (node.parent === null) {
				// no possible conversion, or this node is the source model.
				continue;
			}

			conversion[toModel] = wrapConversion(toModel, graph);
		}

		return conversion;
	};

	var convert = {};

	var models = Object.keys(conversions);

	function wrapRaw(fn) {
		var wrappedFn = function (args) {
			if (args === undefined || args === null) {
				return args;
			}

			if (arguments.length > 1) {
				args = Array.prototype.slice.call(arguments);
			}

			return fn(args);
		};

		// preserve .conversion property if there is one
		if ('conversion' in fn) {
			wrappedFn.conversion = fn.conversion;
		}

		return wrappedFn;
	}

	function wrapRounded(fn) {
		var wrappedFn = function (args) {
			if (args === undefined || args === null) {
				return args;
			}

			if (arguments.length > 1) {
				args = Array.prototype.slice.call(arguments);
			}

			var result = fn(args);

			// we're assuming the result is an array here.
			// see notice in conversions.js; don't use box types
			// in conversion functions.
			if (typeof result === 'object') {
				for (var len = result.length, i = 0; i < len; i++) {
					result[i] = Math.round(result[i]);
				}
			}

			return result;
		};

		// preserve .conversion property if there is one
		if ('conversion' in fn) {
			wrappedFn.conversion = fn.conversion;
		}

		return wrappedFn;
	}

	models.forEach(function (fromModel) {
		convert[fromModel] = {};

		Object.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});
		Object.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});

		var routes = route(fromModel);
		var routeModels = Object.keys(routes);

		routeModels.forEach(function (toModel) {
			var fn = routes[toModel];

			convert[fromModel][toModel] = wrapRounded(fn);
			convert[fromModel][toModel].raw = wrapRaw(fn);
		});
	});

	var colorConvert = convert;

	var _slice = [].slice;

	var skippedModels = [
		// to be honest, I don't really feel like keyword belongs in color convert, but eh.
		'keyword',

		// gray conflicts with some method names, and has its own method defined.
		'gray',

		// shouldn't really be in color-convert either...
		'hex'
	];

	var hashedModelKeys = {};
	Object.keys(colorConvert).forEach(function (model) {
		hashedModelKeys[_slice.call(colorConvert[model].labels).sort().join('')] = model;
	});

	var limiters = {};

	function Color(obj, model) {
		if (!(this instanceof Color)) {
			return new Color(obj, model);
		}

		if (model && model in skippedModels) {
			model = null;
		}

		if (model && !(model in colorConvert)) {
			throw new Error('Unknown model: ' + model);
		}

		var i;
		var channels;

		if (!obj) {
			this.model = 'rgb';
			this.color = [0, 0, 0];
			this.valpha = 1;
		} else if (obj instanceof Color) {
			this.model = obj.model;
			this.color = obj.color.slice();
			this.valpha = obj.valpha;
		} else if (typeof obj === 'string') {
			var result = colorString.get(obj);
			if (result === null) {
				throw new Error('Unable to parse color from string: ' + obj);
			}

			this.model = result.model;
			channels = colorConvert[this.model].channels;
			this.color = result.value.slice(0, channels);
			this.valpha = typeof result.value[channels] === 'number' ? result.value[channels] : 1;
		} else if (obj.length) {
			this.model = model || 'rgb';
			channels = colorConvert[this.model].channels;
			var newArr = _slice.call(obj, 0, channels);
			this.color = zeroArray(newArr, channels);
			this.valpha = typeof obj[channels] === 'number' ? obj[channels] : 1;
		} else if (typeof obj === 'number') {
			// this is always RGB - can be converted later on.
			obj &= 0xFFFFFF;
			this.model = 'rgb';
			this.color = [
				(obj >> 16) & 0xFF,
				(obj >> 8) & 0xFF,
				obj & 0xFF
			];
			this.valpha = 1;
		} else {
			this.valpha = 1;

			var keys = Object.keys(obj);
			if ('alpha' in obj) {
				keys.splice(keys.indexOf('alpha'), 1);
				this.valpha = typeof obj.alpha === 'number' ? obj.alpha : 0;
			}

			var hashedKeys = keys.sort().join('');
			if (!(hashedKeys in hashedModelKeys)) {
				throw new Error('Unable to parse color from object: ' + JSON.stringify(obj));
			}

			this.model = hashedModelKeys[hashedKeys];

			var labels = colorConvert[this.model].labels;
			var color = [];
			for (i = 0; i < labels.length; i++) {
				color.push(obj[labels[i]]);
			}

			this.color = zeroArray(color);
		}

		// perform limitations (clamping, etc.)
		if (limiters[this.model]) {
			channels = colorConvert[this.model].channels;
			for (i = 0; i < channels; i++) {
				var limit = limiters[this.model][i];
				if (limit) {
					this.color[i] = limit(this.color[i]);
				}
			}
		}

		this.valpha = Math.max(0, Math.min(1, this.valpha));

		if (Object.freeze) {
			Object.freeze(this);
		}
	}

	Color.prototype = {
		toString: function () {
			return this.string();
		},

		toJSON: function () {
			return this[this.model]();
		},

		string: function (places) {
			var self = this.model in colorString.to ? this : this.rgb();
			self = self.round(typeof places === 'number' ? places : 1);
			var args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);
			return colorString.to[self.model](args);
		},

		percentString: function (places) {
			var self = this.rgb().round(typeof places === 'number' ? places : 1);
			var args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);
			return colorString.to.rgb.percent(args);
		},

		array: function () {
			return this.valpha === 1 ? this.color.slice() : this.color.concat(this.valpha);
		},

		object: function () {
			var result = {};
			var channels = colorConvert[this.model].channels;
			var labels = colorConvert[this.model].labels;

			for (var i = 0; i < channels; i++) {
				result[labels[i]] = this.color[i];
			}

			if (this.valpha !== 1) {
				result.alpha = this.valpha;
			}

			return result;
		},

		unitArray: function () {
			var rgb = this.rgb().color;
			rgb[0] /= 255;
			rgb[1] /= 255;
			rgb[2] /= 255;

			if (this.valpha !== 1) {
				rgb.push(this.valpha);
			}

			return rgb;
		},

		unitObject: function () {
			var rgb = this.rgb().object();
			rgb.r /= 255;
			rgb.g /= 255;
			rgb.b /= 255;

			if (this.valpha !== 1) {
				rgb.alpha = this.valpha;
			}

			return rgb;
		},

		round: function (places) {
			places = Math.max(places || 0, 0);
			return new Color(this.color.map(roundToPlace(places)).concat(this.valpha), this.model);
		},

		alpha: function (val) {
			if (arguments.length) {
				return new Color(this.color.concat(Math.max(0, Math.min(1, val))), this.model);
			}

			return this.valpha;
		},

		// rgb
		red: getset('rgb', 0, maxfn(255)),
		green: getset('rgb', 1, maxfn(255)),
		blue: getset('rgb', 2, maxfn(255)),

		hue: getset(['hsl', 'hsv', 'hsl', 'hwb', 'hcg'], 0, function (val) { return ((val % 360) + 360) % 360; }), // eslint-disable-line brace-style

		saturationl: getset('hsl', 1, maxfn(100)),
		lightness: getset('hsl', 2, maxfn(100)),

		saturationv: getset('hsv', 1, maxfn(100)),
		value: getset('hsv', 2, maxfn(100)),

		chroma: getset('hcg', 1, maxfn(100)),
		gray: getset('hcg', 2, maxfn(100)),

		white: getset('hwb', 1, maxfn(100)),
		wblack: getset('hwb', 2, maxfn(100)),

		cyan: getset('cmyk', 0, maxfn(100)),
		magenta: getset('cmyk', 1, maxfn(100)),
		yellow: getset('cmyk', 2, maxfn(100)),
		black: getset('cmyk', 3, maxfn(100)),

		x: getset('xyz', 0, maxfn(100)),
		y: getset('xyz', 1, maxfn(100)),
		z: getset('xyz', 2, maxfn(100)),

		l: getset('lab', 0, maxfn(100)),
		a: getset('lab', 1),
		b: getset('lab', 2),

		keyword: function (val) {
			if (arguments.length) {
				return new Color(val);
			}

			return colorConvert[this.model].keyword(this.color);
		},

		hex: function (val) {
			if (arguments.length) {
				return new Color(val);
			}

			return colorString.to.hex(this.rgb().round().color);
		},

		rgbNumber: function () {
			var rgb = this.rgb().color;
			return ((rgb[0] & 0xFF) << 16) | ((rgb[1] & 0xFF) << 8) | (rgb[2] & 0xFF);
		},

		luminosity: function () {
			// http://www.w3.org/TR/WCAG20/#relativeluminancedef
			var rgb = this.rgb().color;

			var lum = [];
			for (var i = 0; i < rgb.length; i++) {
				var chan = rgb[i] / 255;
				lum[i] = (chan <= 0.03928) ? chan / 12.92 : Math.pow(((chan + 0.055) / 1.055), 2.4);
			}

			return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
		},

		contrast: function (color2) {
			// http://www.w3.org/TR/WCAG20/#contrast-ratiodef
			var lum1 = this.luminosity();
			var lum2 = color2.luminosity();

			if (lum1 > lum2) {
				return (lum1 + 0.05) / (lum2 + 0.05);
			}

			return (lum2 + 0.05) / (lum1 + 0.05);
		},

		level: function (color2) {
			var contrastRatio = this.contrast(color2);
			if (contrastRatio >= 7.1) {
				return 'AAA';
			}

			return (contrastRatio >= 4.5) ? 'AA' : '';
		},

		isDark: function () {
			// YIQ equation from http://24ways.org/2010/calculating-color-contrast
			var rgb = this.rgb().color;
			var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;
			return yiq < 128;
		},

		isLight: function () {
			return !this.isDark();
		},

		negate: function () {
			var rgb = this.rgb();
			for (var i = 0; i < 3; i++) {
				rgb.color[i] = 255 - rgb.color[i];
			}
			return rgb;
		},

		lighten: function (ratio) {
			var hsl = this.hsl();
			hsl.color[2] += hsl.color[2] * ratio;
			return hsl;
		},

		darken: function (ratio) {
			var hsl = this.hsl();
			hsl.color[2] -= hsl.color[2] * ratio;
			return hsl;
		},

		saturate: function (ratio) {
			var hsl = this.hsl();
			hsl.color[1] += hsl.color[1] * ratio;
			return hsl;
		},

		desaturate: function (ratio) {
			var hsl = this.hsl();
			hsl.color[1] -= hsl.color[1] * ratio;
			return hsl;
		},

		whiten: function (ratio) {
			var hwb = this.hwb();
			hwb.color[1] += hwb.color[1] * ratio;
			return hwb;
		},

		blacken: function (ratio) {
			var hwb = this.hwb();
			hwb.color[2] += hwb.color[2] * ratio;
			return hwb;
		},

		grayscale: function () {
			// http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale
			var rgb = this.rgb().color;
			var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
			return Color.rgb(val, val, val);
		},

		fade: function (ratio) {
			return this.alpha(this.valpha - (this.valpha * ratio));
		},

		opaquer: function (ratio) {
			return this.alpha(this.valpha + (this.valpha * ratio));
		},

		rotate: function (degrees) {
			var hsl = this.hsl();
			var hue = hsl.color[0];
			hue = (hue + degrees) % 360;
			hue = hue < 0 ? 360 + hue : hue;
			hsl.color[0] = hue;
			return hsl;
		},

		mix: function (mixinColor, weight) {
			// ported from sass implementation in C
			// https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209
			var color1 = mixinColor.rgb();
			var color2 = this.rgb();
			var p = weight === undefined ? 0.5 : weight;

			var w = 2 * p - 1;
			var a = color1.alpha() - color2.alpha();

			var w1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
			var w2 = 1 - w1;

			return Color.rgb(
					w1 * color1.red() + w2 * color2.red(),
					w1 * color1.green() + w2 * color2.green(),
					w1 * color1.blue() + w2 * color2.blue(),
					color1.alpha() * p + color2.alpha() * (1 - p));
		}
	};

	// model conversion methods and static constructors
	Object.keys(colorConvert).forEach(function (model) {
		if (skippedModels.indexOf(model) !== -1) {
			return;
		}

		var channels = colorConvert[model].channels;

		// conversion methods
		Color.prototype[model] = function () {
			if (this.model === model) {
				return new Color(this);
			}

			if (arguments.length) {
				return new Color(arguments, model);
			}

			var newAlpha = typeof arguments[channels] === 'number' ? channels : this.valpha;
			return new Color(assertArray(colorConvert[this.model][model].raw(this.color)).concat(newAlpha), model);
		};

		// 'static' construction methods
		Color[model] = function (color) {
			if (typeof color === 'number') {
				color = zeroArray(_slice.call(arguments), channels);
			}
			return new Color(color, model);
		};
	});

	function roundTo(num, places) {
		return Number(num.toFixed(places));
	}

	function roundToPlace(places) {
		return function (num) {
			return roundTo(num, places);
		};
	}

	function getset(model, channel, modifier) {
		model = Array.isArray(model) ? model : [model];

		model.forEach(function (m) {
			(limiters[m] || (limiters[m] = []))[channel] = modifier;
		});

		model = model[0];

		return function (val) {
			var result;

			if (arguments.length) {
				if (modifier) {
					val = modifier(val);
				}

				result = this[model]();
				result.color[channel] = val;
				return result;
			}

			result = this[model]().color[channel];
			if (modifier) {
				result = modifier(result);
			}

			return result;
		};
	}

	function maxfn(max) {
		return function (v) {
			return Math.max(0, Math.min(max, v));
		};
	}

	function assertArray(val) {
		return Array.isArray(val) ? val : [val];
	}

	function zeroArray(arr, length) {
		for (var i = 0; i < length; i++) {
			if (typeof arr[i] !== 'number') {
				arr[i] = 0;
			}
		}

		return arr;
	}

	var color = Color;

	/***
	 * Convert string to hex color.
	 *
	 * @param {String} str Text to hash and convert to hex.
	 * @returns {String}
	 * @api public
	 */
	var textHex = function hex(str) {
	  for (
	    var i = 0, hash = 0;
	    i < str.length;
	    hash = str.charCodeAt(i++) + ((hash << 5) - hash)
	  );

	  var color = Math.floor(
	    Math.abs(
	      (Math.sin(hash) * 10000) % 1 * 16777216
	    )
	  ).toString(16);

	  return '#' + Array(6 - color.length + 1).join('0') + color;
	};

	/**
	 * Generate a color for a given name. But be reasonably smart about it by
	 * understanding name spaces and coloring each namespace a bit lighter so they
	 * still have the same base color as the root.
	 *
	 * @param {string} namespace The namespace
	 * @param {string} [delimiter] The delimiter
	 * @returns {string} color
	 */
	var colorspace = function colorspace(namespace, delimiter) {
	  var split = namespace.split(delimiter || ':');
	  var base = textHex(split[0]);

	  if (!split.length) return base;

	  for (var i = 0, l = split.length - 1; i < l; i++) {
	    base = color(base)
	    .mix(color(textHex(split[i + 1])))
	    .saturate(1)
	    .hex();
	  }

	  return base;
	};

	/**
	 * Kuler: Color text using CSS colors
	 *
	 * @constructor
	 * @param {String} text The text that needs to be styled
	 * @param {String} color Optional color for alternate API.
	 * @api public
	 */
	function Kuler(text, color) {
	  if (color) return (new Kuler(text)).style(color);
	  if (!(this instanceof Kuler)) return new Kuler(text);

	  this.text = text;
	}

	/**
	 * ANSI color codes.
	 *
	 * @type {String}
	 * @private
	 */
	Kuler.prototype.prefix = '\x1b[';
	Kuler.prototype.suffix = 'm';

	/**
	 * Parse a hex color string and parse it to it's RGB equiv.
	 *
	 * @param {String} color
	 * @returns {Array}
	 * @api private
	 */
	Kuler.prototype.hex = function hex(color) {
	  color = color[0] === '#' ? color.substring(1) : color;

	  //
	  // Pre-parse for shorthand hex colors.
	  //
	  if (color.length === 3) {
	    color = color.split('');

	    color[5] = color[2]; // F60##0
	    color[4] = color[2]; // F60#00
	    color[3] = color[1]; // F60600
	    color[2] = color[1]; // F66600
	    color[1] = color[0]; // FF6600

	    color = color.join('');
	  }

	  var r = color.substring(0, 2)
	    , g = color.substring(2, 4)
	    , b = color.substring(4, 6);

	  return [ parseInt(r, 16), parseInt(g, 16), parseInt(b, 16) ];
	};

	/**
	 * Transform a 255 RGB value to an RGV code.
	 *
	 * @param {Number} r Red color channel.
	 * @param {Number} g Green color channel.
	 * @param {Number} b Blue color channel.
	 * @returns {String}
	 * @api public
	 */
	Kuler.prototype.rgb = function rgb(r, g, b) {
	  var red = r / 255 * 5
	    , green = g / 255 * 5
	    , blue = b / 255 * 5;

	  return this.ansi(red, green, blue);
	};

	/**
	 * Turns RGB 0-5 values into a single ANSI code.
	 *
	 * @param {Number} r Red color channel.
	 * @param {Number} g Green color channel.
	 * @param {Number} b Blue color channel.
	 * @returns {String}
	 * @api public
	 */
	Kuler.prototype.ansi = function ansi(r, g, b) {
	  var red = Math.round(r)
	    , green = Math.round(g)
	    , blue = Math.round(b);

	  return 16 + (red * 36) + (green * 6) + blue;
	};

	/**
	 * Marks an end of color sequence.
	 *
	 * @returns {String} Reset sequence.
	 * @api public
	 */
	Kuler.prototype.reset = function reset() {
	  return this.prefix +'39;49'+ this.suffix;
	};

	/**
	 * Colour the terminal using CSS.
	 *
	 * @param {String} color The HEX color code.
	 * @returns {String} the escape code.
	 * @api public
	 */
	Kuler.prototype.style = function style(color) {
	  return this.prefix +'38;5;'+ this.rgb.apply(this, this.hex(color)) + this.suffix + this.text + this.reset();
	};


	//
	// Expose the actual interface.
	//
	var kuler = Kuler;

	/**
	 * Prefix the messages with a colored namespace.
	 *
	 * @param {Array} args The messages array that is getting written.
	 * @param {Object} options Options for diagnostics.
	 * @returns {Array} Altered messages array.
	 * @public
	 */
	var namespaceAnsi = function ansiModifier(args, options) {
	  var namespace = options.namespace;
	  var ansi = options.colors !== false
	  ? kuler(namespace +':', colorspace(namespace))
	  : namespace +':';

	  args[0] = ansi +' '+ args[0];
	  return args;
	};

	/**
	 * Checks if a given namespace is allowed by the given variable.
	 *
	 * @param {String} name namespace that should be included.
	 * @param {String} variable Value that needs to be tested.
	 * @returns {Boolean} Indication if namespace is enabled.
	 * @public
	 */
	var enabled = function enabled(name, variable) {
	  if (!variable) return false;

	  var variables = variable.split(/[\s,]+/)
	    , i = 0;

	  for (; i < variables.length; i++) {
	    variable = variables[i].replace('*', '.*?');

	    if ('-' === variable.charAt(0)) {
	      if ((new RegExp('^'+ variable.substr(1) +'$')).test(name)) {
	        return false;
	      }

	      continue;
	    }

	    if ((new RegExp('^'+ variable +'$')).test(name)) {
	      return true;
	    }
	  }

	  return false;
	};

	/**
	 * Creates a new Adapter.
	 *
	 * @param {Function} fn Function that returns the value.
	 * @returns {Function} The adapter logic.
	 * @public
	 */
	var adapters = function create(fn) {
	  return function adapter(namespace) {
	    try {
	      return enabled(namespace, fn());
	    } catch (e) { /* Any failure means that we found nothing */ }

	    return false;
	  };
	};

	/**
	 * Extracts the values from process.env.
	 *
	 * @type {Function}
	 * @public
	 */
	var process_env = adapters(function processenv() {
	  return process.env.DEBUG || process.env.DIAGNOSTICS;
	});

	/**
	 * An idiot proof logger to be used as default. We've wrapped it in a try/catch
	 * statement to ensure the environments without the `console` API do not crash
	 * as well as an additional fix for ancient browsers like IE8 where the
	 * `console.log` API doesn't have an `apply`, so we need to use the Function's
	 * apply functionality to apply the arguments.
	 *
	 * @param {Object} meta Options of the logger.
	 * @param {Array} messages The actuall message that needs to be logged.
	 * @public
	 */
	var console_1 = function (meta, messages) {
	  //
	  // So yea. IE8 doesn't have an apply so we need a work around to puke the
	  // arguments in place.
	  //
	  try { Function.prototype.apply.call(console.log, console, messages); }
	  catch (e) {}
	};

	var tty$2 = require$$0__default$1['default'].isatty(1);

	/**
	 * Create a new diagnostics logger.
	 *
	 * @param {String} namespace The namespace it should enable.
	 * @param {Object} options Additional options.
	 * @returns {Function} The logger.
	 * @public
	 */
	var diagnostics = diagnostics$2(function dev(namespace, options) {
	  options = options || {};
	  options.colors = 'colors' in options ? options.colors : tty$2;
	  options.namespace = namespace;
	  options.prod = false;
	  options.dev = true;

	  if (!dev.enabled(namespace) && !(options.force || dev.force)) {
	    return dev.nope(options);
	  }
	  
	  return dev.yep(options);
	});

	//
	// Configure the logger for the given environment.
	//
	diagnostics.modify(namespaceAnsi);
	diagnostics.use(process_env);
	diagnostics.set(console_1);

	//
	// Expose the diagnostics logger.
	//
	var development = diagnostics;

	var node$1 = createCommonjsModule(function (module) {
	//
	// Select the correct build version depending on the environment.
	//
	if (process.env.NODE_ENV === 'production') {
	  module.exports = production;
	} else {
	  module.exports = development;
	}
	});

	/**
	 * tail-file.js: TODO: add file header description.
	 *
	 * (C) 2010 Charlie Robbins
	 * MIT LICENCE
	 */


	const { StringDecoder } = require$$0__default$2['default'];
	const { Stream: Stream$7 } = readable;

	/**
	 * Simple no-op function.
	 * @returns {undefined}
	 */
	function noop$7() {}

	/**
	 * TODO: add function description.
	 * @param {Object} options - Options for tail.
	 * @param {function} iter - Iterator function to execute on every line.
	* `tail -f` a file. Options must include file.
	 * @returns {mixed} - TODO: add return description.
	 */
	var tailFile = (options, iter) => {
	  const buffer = Buffer.alloc(64 * 1024);
	  const decode = new StringDecoder('utf8');
	  const stream = new Stream$7();
	  let buff = '';
	  let pos = 0;
	  let row = 0;

	  if (options.start === -1) {
	    delete options.start;
	  }

	  stream.readable = true;
	  stream.destroy = () => {
	    stream.destroyed = true;
	    stream.emit('end');
	    stream.emit('close');
	  };

	  fs__default['default'].open(options.file, 'a+', '0644', (err, fd) => {
	    if (err) {
	      if (!iter) {
	        stream.emit('error', err);
	      } else {
	        iter(err);
	      }
	      stream.destroy();
	      return;
	    }

	    (function read() {
	      if (stream.destroyed) {
	        fs__default['default'].close(fd, noop$7);
	        return;
	      }

	      return fs__default['default'].read(fd, buffer, 0, buffer.length, pos, (error, bytes) => {
	        if (error) {
	          if (!iter) {
	            stream.emit('error', error);
	          } else {
	            iter(error);
	          }
	          stream.destroy();
	          return;
	        }

	        if (!bytes) {
	          if (buff) {
	            // eslint-disable-next-line eqeqeq
	            if (options.start == null || row > options.start) {
	              if (!iter) {
	                stream.emit('line', buff);
	              } else {
	                iter(null, buff);
	              }
	            }
	            row++;
	            buff = '';
	          }
	          return setTimeout(read, 1000);
	        }

	        let data = decode.write(buffer.slice(0, bytes));
	        if (!iter) {
	          stream.emit('data', data);
	        }

	        data = (buff + data).split(/\n+/);

	        const l = data.length - 1;
	        let i = 0;

	        for (; i < l; i++) {
	          // eslint-disable-next-line eqeqeq
	          if (options.start == null || row > options.start) {
	            if (!iter) {
	              stream.emit('line', data[i]);
	            } else {
	              iter(null, data[i]);
	            }
	          }
	          row++;
	        }

	        buff = data[l];
	        pos += bytes;
	        return read();
	      });
	    }());
	  });

	  if (!iter) {
	    return stream;
	  }

	  return stream.destroy;
	};

	/* eslint-disable complexity,max-statements */





	const { MESSAGE: MESSAGE$2 } = tripleBeam;
	const { Stream: Stream$6, PassThrough } = readable;

	const debug$5 = node$1('winston:file');



	/**
	 * Transport for outputting to a local log file.
	 * @type {File}
	 * @extends {TransportStream}
	 */
	var file$1 = class File extends winstonTransport {
	  /**
	   * Constructor function for the File transport object responsible for
	   * persisting log messages and metadata to one or more files.
	   * @param {Object} options - Options for this instance.
	   */
	  constructor(options = {}) {
	    super(options);

	    // Expose the name of this Transport on the prototype.
	    this.name = options.name || 'file';

	    // Helper function which throws an `Error` in the event that any of the
	    // rest of the arguments is present in `options`.
	    function throwIf(target, ...args) {
	      args.slice(1).forEach(name => {
	        if (options[name]) {
	          throw new Error(`Cannot set ${name} and ${target} together`);
	        }
	      });
	    }

	    // Setup the base stream that always gets piped to to handle buffering.
	    this._stream = new PassThrough();
	    this._stream.setMaxListeners(30);

	    // Bind this context for listener methods.
	    this._onError = this._onError.bind(this);

	    if (options.filename || options.dirname) {
	      throwIf('filename or dirname', 'stream');
	      this._basename = this.filename = options.filename
	        ? path__default['default'].basename(options.filename)
	        : 'winston.log';

	      this.dirname = options.dirname || path__default['default'].dirname(options.filename);
	      this.options = options.options || { flags: 'a' };
	    } else if (options.stream) {
	      // eslint-disable-next-line no-console
	      console.warn('options.stream will be removed in winston@4. Use winston.transports.Stream');
	      throwIf('stream', 'filename', 'maxsize');
	      this._dest = this._stream.pipe(this._setupStream(options.stream));
	      this.dirname = path__default['default'].dirname(this._dest.path);
	      // We need to listen for drain events when write() returns false. This
	      // can make node mad at times.
	    } else {
	      throw new Error('Cannot log to file without filename or stream.');
	    }

	    this.maxsize = options.maxsize || null;
	    this.rotationFormat = options.rotationFormat || false;
	    this.zippedArchive = options.zippedArchive || false;
	    this.maxFiles = options.maxFiles || null;
	    this.eol = options.eol || os__default['default'].EOL;
	    this.tailable = options.tailable || false;

	    // Internal state variables representing the number of files this instance
	    // has created and the current size (in bytes) of the current logfile.
	    this._size = 0;
	    this._pendingSize = 0;
	    this._created = 0;
	    this._drain = false;
	    this._opening = false;
	    this._ending = false;

	    if (this.dirname) this._createLogDirIfNotExist(this.dirname);
	    this.open();
	  }

	  finishIfEnding() {
	    if (this._ending) {
	      if (this._opening) {
	        this.once('open', () => {
	          this._stream.once('finish', () => this.emit('finish'));
	          setImmediate(() => this._stream.end());
	        });
	      } else {
	        this._stream.once('finish', () => this.emit('finish'));
	        setImmediate(() => this._stream.end());
	      }
	    }
	  }


	  /**
	   * Core logging method exposed to Winston. Metadata is optional.
	   * @param {Object} info - TODO: add param description.
	   * @param {Function} callback - TODO: add param description.
	   * @returns {undefined}
	   */
	  log(info, callback = () => {}) {
	    // Remark: (jcrugzz) What is necessary about this callback(null, true) now
	    // when thinking about 3.x? Should silent be handled in the base
	    // TransportStream _write method?
	    if (this.silent) {
	      callback();
	      return true;
	    }

	    // Output stream buffer is full and has asked us to wait for the drain event
	    if (this._drain) {
	      this._stream.once('drain', () => {
	        this._drain = false;
	        this.log(info, callback);
	      });
	      return;
	    }
	    if (this._rotate) {
	      this._stream.once('rotate', () => {
	        this._rotate = false;
	        this.log(info, callback);
	      });
	      return;
	    }

	    // Grab the raw string and append the expected EOL.
	    const output = `${info[MESSAGE$2]}${this.eol}`;
	    const bytes = Buffer.byteLength(output);

	    // After we have written to the PassThrough check to see if we need
	    // to rotate to the next file.
	    //
	    // Remark: This gets called too early and does not depict when data
	    // has been actually flushed to disk.
	    function logged() {
	      this._size += bytes;
	      this._pendingSize -= bytes;

	      debug$5('logged %s %s', this._size, output);
	      this.emit('logged', info);

	      // Do not attempt to rotate files while opening
	      if (this._opening) {
	        return;
	      }

	      // Check to see if we need to end the stream and create a new one.
	      if (!this._needsNewFile()) {
	        return;
	      }

	      // End the current stream, ensure it flushes and create a new one.
	      // This could potentially be optimized to not run a stat call but its
	      // the safest way since we are supporting `maxFiles`.
	      this._rotate = true;
	      this._endStream(() => this._rotateFile());
	    }

	    // Keep track of the pending bytes being written while files are opening
	    // in order to properly rotate the PassThrough this._stream when the file
	    // eventually does open.
	    this._pendingSize += bytes;
	    if (this._opening
	      && !this.rotatedWhileOpening
	      && this._needsNewFile(this._size + this._pendingSize)) {
	      this.rotatedWhileOpening = true;
	    }

	    const written = this._stream.write(output, logged.bind(this));
	    if (!written) {
	      this._drain = true;
	      this._stream.once('drain', () => {
	        this._drain = false;
	        callback();
	      });
	    } else {
	      callback(); // eslint-disable-line callback-return
	    }

	    debug$5('written', written, this._drain);

	    this.finishIfEnding();

	    return written;
	  }

	  /**
	   * Query the transport. Options object is optional.
	   * @param {Object} options - Loggly-like query options for this instance.
	   * @param {function} callback - Continuation to respond to when complete.
	   * TODO: Refactor me.
	   */
	  query(options, callback) {
	    if (typeof options === 'function') {
	      callback = options;
	      options = {};
	    }

	    options = normalizeQuery(options);
	    const file = path__default['default'].join(this.dirname, this.filename);
	    let buff = '';
	    let results = [];
	    let row = 0;

	    const stream = fs__default['default'].createReadStream(file, {
	      encoding: 'utf8'
	    });

	    stream.on('error', err => {
	      if (stream.readable) {
	        stream.destroy();
	      }
	      if (!callback) {
	        return;
	      }

	      return err.code !== 'ENOENT' ? callback(err) : callback(null, results);
	    });

	    stream.on('data', data => {
	      data = (buff + data).split(/\n+/);
	      const l = data.length - 1;
	      let i = 0;

	      for (; i < l; i++) {
	        if (!options.start || row >= options.start) {
	          add(data[i]);
	        }
	        row++;
	      }

	      buff = data[l];
	    });

	    stream.on('close', () => {
	      if (buff) {
	        add(buff, true);
	      }
	      if (options.order === 'desc') {
	        results = results.reverse();
	      }

	      // eslint-disable-next-line callback-return
	      if (callback) callback(null, results);
	    });

	    function add(buff, attempt) {
	      try {
	        const log = JSON.parse(buff);
	        if (check(log)) {
	          push(log);
	        }
	      } catch (e) {
	        if (!attempt) {
	          stream.emit('error', e);
	        }
	      }
	    }

	    function push(log) {
	      if (
	        options.rows &&
	        results.length >= options.rows &&
	        options.order !== 'desc'
	      ) {
	        if (stream.readable) {
	          stream.destroy();
	        }
	        return;
	      }

	      if (options.fields) {
	        log = options.fields.reduce((obj, key) => {
	          obj[key] = log[key];
	          return obj;
	        }, {});
	      }

	      if (options.order === 'desc') {
	        if (results.length >= options.rows) {
	          results.shift();
	        }
	      }
	      results.push(log);
	    }

	    function check(log) {
	      if (!log) {
	        return;
	      }

	      if (typeof log !== 'object') {
	        return;
	      }

	      const time = new Date(log.timestamp);
	      if (
	        (options.from && time < options.from) ||
	        (options.until && time > options.until) ||
	        (options.level && options.level !== log.level)
	      ) {
	        return;
	      }

	      return true;
	    }

	    function normalizeQuery(options) {
	      options = options || {};

	      // limit
	      options.rows = options.rows || options.limit || 10;

	      // starting row offset
	      options.start = options.start || 0;

	      // now
	      options.until = options.until || new Date();
	      if (typeof options.until !== 'object') {
	        options.until = new Date(options.until);
	      }

	      // now - 24
	      options.from = options.from || (options.until - (24 * 60 * 60 * 1000));
	      if (typeof options.from !== 'object') {
	        options.from = new Date(options.from);
	      }

	      // 'asc' or 'desc'
	      options.order = options.order || 'desc';

	      return options;
	    }
	  }

	  /**
	   * Returns a log stream for this transport. Options object is optional.
	   * @param {Object} options - Stream options for this instance.
	   * @returns {Stream} - TODO: add return description.
	   * TODO: Refactor me.
	   */
	  stream(options = {}) {
	    const file = path__default['default'].join(this.dirname, this.filename);
	    const stream = new Stream$6();
	    const tail = {
	      file,
	      start: options.start
	    };

	    stream.destroy = tailFile(tail, (err, line) => {
	      if (err) {
	        return stream.emit('error', err);
	      }

	      try {
	        stream.emit('data', line);
	        line = JSON.parse(line);
	        stream.emit('log', line);
	      } catch (e) {
	        stream.emit('error', e);
	      }
	    });

	    return stream;
	  }

	  /**
	   * Checks to see the filesize of.
	   * @returns {undefined}
	   */
	  open() {
	    // If we do not have a filename then we were passed a stream and
	    // don't need to keep track of size.
	    if (!this.filename) return;
	    if (this._opening) return;

	    this._opening = true;

	    // Stat the target file to get the size and create the stream.
	    this.stat((err, size) => {
	      if (err) {
	        return this.emit('error', err);
	      }
	      debug$5('stat done: %s { size: %s }', this.filename, size);
	      this._size = size;
	      this._dest = this._createStream(this._stream);
	      this._opening = false;
	      this.once('open', () => {
	        if (this._stream.eventNames().includes('rotate')) {
	          this._stream.emit('rotate');
	        } else {
	          this._rotate = false;
	        }
	      });
	    });
	  }

	  /**
	   * Stat the file and assess information in order to create the proper stream.
	   * @param {function} callback - TODO: add param description.
	   * @returns {undefined}
	   */
	  stat(callback) {
	    const target = this._getFile();
	    const fullpath = path__default['default'].join(this.dirname, target);

	    fs__default['default'].stat(fullpath, (err, stat) => {
	      if (err && err.code === 'ENOENT') {
	        debug$5('ENOENT ok', fullpath);
	        // Update internally tracked filename with the new target name.
	        this.filename = target;
	        return callback(null, 0);
	      }

	      if (err) {
	        debug$5(`err ${err.code} ${fullpath}`);
	        return callback(err);
	      }

	      if (!stat || this._needsNewFile(stat.size)) {
	        // If `stats.size` is greater than the `maxsize` for this
	        // instance then try again.
	        return this._incFile(() => this.stat(callback));
	      }

	      // Once we have figured out what the filename is, set it
	      // and return the size.
	      this.filename = target;
	      callback(null, stat.size);
	    });
	  }

	  /**
	   * Closes the stream associated with this instance.
	   * @param {function} cb - TODO: add param description.
	   * @returns {undefined}
	   */
	  close(cb) {
	    if (!this._stream) {
	      return;
	    }

	    this._stream.end(() => {
	      if (cb) {
	        cb(); // eslint-disable-line callback-return
	      }
	      this.emit('flush');
	      this.emit('closed');
	    });
	  }

	  /**
	   * TODO: add method description.
	   * @param {number} size - TODO: add param description.
	   * @returns {undefined}
	   */
	  _needsNewFile(size) {
	    size = size || this._size;
	    return this.maxsize && size >= this.maxsize;
	  }

	  /**
	   * TODO: add method description.
	   * @param {Error} err - TODO: add param description.
	   * @returns {undefined}
	   */
	  _onError(err) {
	    this.emit('error', err);
	  }

	  /**
	   * TODO: add method description.
	   * @param {Stream} stream - TODO: add param description.
	   * @returns {mixed} - TODO: add return description.
	   */
	  _setupStream(stream) {
	    stream.on('error', this._onError);

	    return stream;
	  }

	  /**
	   * TODO: add method description.
	   * @param {Stream} stream - TODO: add param description.
	   * @returns {mixed} - TODO: add return description.
	   */
	  _cleanupStream(stream) {
	    stream.removeListener('error', this._onError);

	    return stream;
	  }

	  /**
	   * TODO: add method description.
	   */
	  _rotateFile() {
	    this._incFile(() => this.open());
	  }

	  /**
	   * Unpipe from the stream that has been marked as full and end it so it
	   * flushes to disk.
	   *
	   * @param {function} callback - Callback for when the current file has closed.
	   * @private
	   */
	  _endStream(callback = () => {}) {
	    if (this._dest) {
	      this._stream.unpipe(this._dest);
	      this._dest.end(() => {
	        this._cleanupStream(this._dest);
	        callback();
	      });
	    } else {
	      callback(); // eslint-disable-line callback-return
	    }
	  }

	  /**
	   * Returns the WritableStream for the active file on this instance. If we
	   * should gzip the file then a zlib stream is returned.
	   *
	   * @param {ReadableStream} source – PassThrough to pipe to the file when open.
	   * @returns {WritableStream} Stream that writes to disk for the active file.
	   */
	  _createStream(source) {
	    const fullpath = path__default['default'].join(this.dirname, this.filename);

	    debug$5('create stream start', fullpath, this.options);
	    const dest = fs__default['default'].createWriteStream(fullpath, this.options)
	      // TODO: What should we do with errors here?
	      .on('error', err => debug$5(err))
	      .on('close', () => debug$5('close', dest.path, dest.bytesWritten))
	      .on('open', () => {
	        debug$5('file open ok', fullpath);
	        this.emit('open', fullpath);
	        source.pipe(dest);

	        // If rotation occured during the open operation then we immediately
	        // start writing to a new PassThrough, begin opening the next file
	        // and cleanup the previous source and dest once the source has drained.
	        if (this.rotatedWhileOpening) {
	          this._stream = new PassThrough();
	          this._stream.setMaxListeners(30);
	          this._rotateFile();
	          this.rotatedWhileOpening = false;
	          this._cleanupStream(dest);
	          source.end();
	        }
	      });

	    debug$5('create stream ok', fullpath);
	    if (this.zippedArchive) {
	      const gzip = zlib__default['default'].createGzip();
	      gzip.pipe(dest);
	      return gzip;
	    }

	    return dest;
	  }

	  /**
	   * TODO: add method description.
	   * @param {function} callback - TODO: add param description.
	   * @returns {undefined}
	   */
	  _incFile(callback) {
	    debug$5('_incFile', this.filename);
	    const ext = path__default['default'].extname(this._basename);
	    const basename = path__default['default'].basename(this._basename, ext);

	    if (!this.tailable) {
	      this._created += 1;
	      this._checkMaxFilesIncrementing(ext, basename, callback);
	    } else {
	      this._checkMaxFilesTailable(ext, basename, callback);
	    }
	  }

	  /**
	   * Gets the next filename to use for this instance in the case that log
	   * filesizes are being capped.
	   * @returns {string} - TODO: add return description.
	   * @private
	   */
	  _getFile() {
	    const ext = path__default['default'].extname(this._basename);
	    const basename = path__default['default'].basename(this._basename, ext);
	    const isRotation = this.rotationFormat
	      ? this.rotationFormat()
	      : this._created;

	    // Caveat emptor (indexzero): rotationFormat() was broken by design When
	    // combined with max files because the set of files to unlink is never
	    // stored.
	    const target = !this.tailable && this._created
	      ? `${basename}${isRotation}${ext}`
	      : `${basename}${ext}`;

	    return this.zippedArchive && !this.tailable
	      ? `${target}.gz`
	      : target;
	  }

	  /**
	   * Increment the number of files created or checked by this instance.
	   * @param {mixed} ext - TODO: add param description.
	   * @param {mixed} basename - TODO: add param description.
	   * @param {mixed} callback - TODO: add param description.
	   * @returns {undefined}
	   * @private
	   */
	  _checkMaxFilesIncrementing(ext, basename, callback) {
	    // Check for maxFiles option and delete file.
	    if (!this.maxFiles || this._created < this.maxFiles) {
	      return setImmediate(callback);
	    }

	    const oldest = this._created - this.maxFiles;
	    const isOldest = oldest !== 0 ? oldest : '';
	    const isZipped = this.zippedArchive ? '.gz' : '';
	    const filePath = `${basename}${isOldest}${ext}${isZipped}`;
	    const target = path__default['default'].join(this.dirname, filePath);

	    fs__default['default'].unlink(target, callback);
	  }

	  /**
	   * Roll files forward based on integer, up to maxFiles. e.g. if base if
	   * file.log and it becomes oversized, roll to file1.log, and allow file.log
	   * to be re-used. If file is oversized again, roll file1.log to file2.log,
	   * roll file.log to file1.log, and so on.
	   * @param {mixed} ext - TODO: add param description.
	   * @param {mixed} basename - TODO: add param description.
	   * @param {mixed} callback - TODO: add param description.
	   * @returns {undefined}
	   * @private
	   */
	  _checkMaxFilesTailable(ext, basename, callback) {
	    const tasks = [];
	    if (!this.maxFiles) {
	      return;
	    }

	    // const isZipped = this.zippedArchive ? '.gz' : '';
	    const isZipped = this.zippedArchive ? '.gz' : '';
	    for (let x = this.maxFiles - 1; x > 1; x--) {
	      tasks.push(function (i, cb) {
	        let fileName = `${basename}${(i - 1)}${ext}${isZipped}`;
	        const tmppath = path__default['default'].join(this.dirname, fileName);

	        fs__default['default'].exists(tmppath, exists => {
	          if (!exists) {
	            return cb(null);
	          }

	          fileName = `${basename}${i}${ext}${isZipped}`;
	          fs__default['default'].rename(tmppath, path__default['default'].join(this.dirname, fileName), cb);
	        });
	      }.bind(this, x));
	    }

	    series_1(tasks, () => {
	      fs__default['default'].rename(
	        path__default['default'].join(this.dirname, `${basename}${ext}`),
	        path__default['default'].join(this.dirname, `${basename}1${ext}${isZipped}`),
	        callback
	      );
	    });
	  }

	  _createLogDirIfNotExist(dirPath) {
	    /* eslint-disable no-sync */
	    if (!fs__default['default'].existsSync(dirPath)) {
	      fs__default['default'].mkdirSync(dirPath, { recursive: true });
	    }
	    /* eslint-enable no-sync */
	  }
	};

	/**
	 * http.js: Transport for outputting to a json-rpcserver.
	 *
	 * (C) 2010 Charlie Robbins
	 * MIT LICENCE
	 */



	const { Stream: Stream$5 } = readable;


	/**
	 * Transport for outputting to a json-rpc server.
	 * @type {Stream}
	 * @extends {TransportStream}
	 */
	var http_1 = class Http extends winstonTransport {
	  /**
	   * Constructor function for the Http transport object responsible for
	   * persisting log messages and metadata to a terminal or TTY.
	   * @param {!Object} [options={}] - Options for this instance.
	   */
	  constructor(options = {}) {
	    super(options);

	    this.options = options;
	    this.name = options.name || 'http';
	    this.ssl = !!options.ssl;
	    this.host = options.host || 'localhost';
	    this.port = options.port;
	    this.auth = options.auth;
	    this.path = options.path || '';
	    this.agent = options.agent;
	    this.headers = options.headers || {};
	    this.headers['content-type'] = 'application/json';

	    if (!this.port) {
	      this.port = this.ssl ? 443 : 80;
	    }
	  }

	  /**
	   * Core logging method exposed to Winston.
	   * @param {Object} info - TODO: add param description.
	   * @param {function} callback - TODO: add param description.
	   * @returns {undefined}
	   */
	  log(info, callback) {
	    this._request(info, (err, res) => {
	      if (res && res.statusCode !== 200) {
	        err = new Error(`Invalid HTTP Status Code: ${res.statusCode}`);
	      }

	      if (err) {
	        this.emit('warn', err);
	      } else {
	        this.emit('logged', info);
	      }
	    });

	    // Remark: (jcrugzz) Fire and forget here so requests dont cause buffering
	    // and block more requests from happening?
	    if (callback) {
	      setImmediate(callback);
	    }
	  }

	  /**
	   * Query the transport. Options object is optional.
	   * @param {Object} options -  Loggly-like query options for this instance.
	   * @param {function} callback - Continuation to respond to when complete.
	   * @returns {undefined}
	   */
	  query(options, callback) {
	    if (typeof options === 'function') {
	      callback = options;
	      options = {};
	    }

	    options = {
	      method: 'query',
	      params: this.normalizeQuery(options)
	    };

	    if (options.params.path) {
	      options.path = options.params.path;
	      delete options.params.path;
	    }

	    if (options.params.auth) {
	      options.auth = options.params.auth;
	      delete options.params.auth;
	    }

	    this._request(options, (err, res, body) => {
	      if (res && res.statusCode !== 200) {
	        err = new Error(`Invalid HTTP Status Code: ${res.statusCode}`);
	      }

	      if (err) {
	        return callback(err);
	      }

	      if (typeof body === 'string') {
	        try {
	          body = JSON.parse(body);
	        } catch (e) {
	          return callback(e);
	        }
	      }

	      callback(null, body);
	    });
	  }

	  /**
	   * Returns a log stream for this transport. Options object is optional.
	   * @param {Object} options - Stream options for this instance.
	   * @returns {Stream} - TODO: add return description
	   */
	  stream(options = {}) {
	    const stream = new Stream$5();
	    options = {
	      method: 'stream',
	      params: options
	    };

	    if (options.params.path) {
	      options.path = options.params.path;
	      delete options.params.path;
	    }

	    if (options.params.auth) {
	      options.auth = options.params.auth;
	      delete options.params.auth;
	    }

	    let buff = '';
	    const req = this._request(options);

	    stream.destroy = () => req.destroy();
	    req.on('data', data => {
	      data = (buff + data).split(/\n+/);
	      const l = data.length - 1;

	      let i = 0;
	      for (; i < l; i++) {
	        try {
	          stream.emit('log', JSON.parse(data[i]));
	        } catch (e) {
	          stream.emit('error', e);
	        }
	      }

	      buff = data[l];
	    });
	    req.on('error', err => stream.emit('error', err));

	    return stream;
	  }

	  /**
	   * Make a request to a winstond server or any http server which can
	   * handle json-rpc.
	   * @param {function} options - Options to sent the request.
	   * @param {function} callback - Continuation to respond to when complete.
	   */
	  _request(options, callback) {
	    options = options || {};

	    const auth = options.auth || this.auth;
	    const path = options.path || this.path || '';

	    delete options.auth;
	    delete options.path;

	    // Prepare options for outgoing HTTP request
	    const headers = Object.assign({}, this.headers);
	    if (auth && auth.bearer) {
	      headers.Authorization = `Bearer ${auth.bearer}`;
	    }
	    const req = (this.ssl ? https__default['default'] : http__default['default']).request({
	      ...this.options,
	      method: 'POST',
	      host: this.host,
	      port: this.port,
	      path: `/${path.replace(/^\//, '')}`,
	      headers: headers,
	      auth: (auth && auth.username && auth.password) ? (`${auth.username}:${auth.password}`) : '',
	      agent: this.agent
	    });

	    req.on('error', callback);
	    req.on('response', res => (
	      res.on('end', () => callback(null, res)).resume()
	    ));
	    req.end(Buffer.from(JSON.stringify(options), 'utf8'));
	  }
	};

	const isStream$1 = stream =>
		stream !== null &&
		typeof stream === 'object' &&
		typeof stream.pipe === 'function';

	isStream$1.writable = stream =>
		isStream$1(stream) &&
		stream.writable !== false &&
		typeof stream._write === 'function' &&
		typeof stream._writableState === 'object';

	isStream$1.readable = stream =>
		isStream$1(stream) &&
		stream.readable !== false &&
		typeof stream._read === 'function' &&
		typeof stream._readableState === 'object';

	isStream$1.duplex = stream =>
		isStream$1.writable(stream) &&
		isStream$1.readable(stream);

	isStream$1.transform = stream =>
		isStream$1.duplex(stream) &&
		typeof stream._transform === 'function' &&
		typeof stream._transformState === 'object';

	var isStream_1 = isStream$1;

	/**
	 * stream.js: Transport for outputting to any arbitrary stream.
	 *
	 * (C) 2010 Charlie Robbins
	 * MIT LICENCE
	 */


	const { MESSAGE: MESSAGE$1 } = tripleBeam;



	/**
	 * Transport for outputting to any arbitrary stream.
	 * @type {Stream}
	 * @extends {TransportStream}
	 */
	var stream$3 = class Stream extends winstonTransport {
	  /**
	   * Constructor function for the Console transport object responsible for
	   * persisting log messages and metadata to a terminal or TTY.
	   * @param {!Object} [options={}] - Options for this instance.
	   */
	  constructor(options = {}) {
	    super(options);

	    if (!options.stream || !isStream_1(options.stream)) {
	      throw new Error('options.stream is required.');
	    }

	    // We need to listen for drain events when write() returns false. This can
	    // make node mad at times.
	    this._stream = options.stream;
	    this._stream.setMaxListeners(Infinity);
	    this.isObjectMode = options.stream._writableState.objectMode;
	    this.eol = options.eol || os__default['default'].EOL;
	  }

	  /**
	   * Core logging method exposed to Winston.
	   * @param {Object} info - TODO: add param description.
	   * @param {Function} callback - TODO: add param description.
	   * @returns {undefined}
	   */
	  log(info, callback) {
	    setImmediate(() => this.emit('logged', info));
	    if (this.isObjectMode) {
	      this._stream.write(info);
	      if (callback) {
	        callback(); // eslint-disable-line callback-return
	      }
	      return;
	    }

	    this._stream.write(`${info[MESSAGE$1]}${this.eol}`);
	    if (callback) {
	      callback(); // eslint-disable-line callback-return
	    }
	    return;
	  }
	};

	/**
	 * transports.js: Set of all transports Winston knows about.
	 *
	 * (C) 2010 Charlie Robbins
	 * MIT LICENCE
	 */

	var transports = createCommonjsModule(function (module, exports) {

	/**
	 * TODO: add property description.
	 * @type {Console}
	 */
	Object.defineProperty(exports, 'Console', {
	  configurable: true,
	  enumerable: true,
	  get() {
	    return console_1$1;
	  }
	});

	/**
	 * TODO: add property description.
	 * @type {File}
	 */
	Object.defineProperty(exports, 'File', {
	  configurable: true,
	  enumerable: true,
	  get() {
	    return file$1;
	  }
	});

	/**
	 * TODO: add property description.
	 * @type {Http}
	 */
	Object.defineProperty(exports, 'Http', {
	  configurable: true,
	  enumerable: true,
	  get() {
	    return http_1;
	  }
	});

	/**
	 * TODO: add property description.
	 * @type {Stream}
	 */
	Object.defineProperty(exports, 'Stream', {
	  configurable: true,
	  enumerable: true,
	  get() {
	    return stream$3;
	  }
	});
	});

	/**
	 * index.js: Default settings for all levels that winston knows about.
	 *
	 * (C) 2010 Charlie Robbins
	 * MIT LICENCE
	 */


	const { configs } = tripleBeam;

	/**
	 * Export config set for the CLI.
	 * @type {Object}
	 */
	var cli = logform.levels(configs.cli);

	/**
	 * Export config set for npm.
	 * @type {Object}
	 */
	var npm = logform.levels(configs.npm);

	/**
	 * Export config set for the syslog.
	 * @type {Object}
	 */
	var syslog = logform.levels(configs.syslog);

	/**
	 * Hoist addColors from logform where it was refactored into in winston@3.
	 * @type {Object}
	 */
	var addColors = logform.levels;

	var config$1 = {
		cli: cli,
		npm: npm,
		syslog: syslog,
		addColors: addColors
	};

	var eachOf_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});



	var _isArrayLike2 = _interopRequireDefault(isArrayLike_1);



	var _breakLoop2 = _interopRequireDefault(breakLoop_1);



	var _eachOfLimit2 = _interopRequireDefault(eachOfLimit_1);



	var _once2 = _interopRequireDefault(once_1);



	var _onlyOnce2 = _interopRequireDefault(onlyOnce_1);



	var _wrapAsync2 = _interopRequireDefault(wrapAsync_1);



	var _awaitify2 = _interopRequireDefault(awaitify_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// eachOf implementation optimized for array-likes
	function eachOfArrayLike(coll, iteratee, callback) {
	    callback = (0, _once2.default)(callback);
	    var index = 0,
	        completed = 0,
	        { length } = coll,
	        canceled = false;
	    if (length === 0) {
	        callback(null);
	    }

	    function iteratorCallback(err, value) {
	        if (err === false) {
	            canceled = true;
	        }
	        if (canceled === true) return;
	        if (err) {
	            callback(err);
	        } else if (++completed === length || value === _breakLoop2.default) {
	            callback(null);
	        }
	    }

	    for (; index < length; index++) {
	        iteratee(coll[index], index, (0, _onlyOnce2.default)(iteratorCallback));
	    }
	}

	// a generic version of eachOf which can handle array, object, and iterator cases.
	function eachOfGeneric(coll, iteratee, callback) {
	    return (0, _eachOfLimit2.default)(coll, Infinity, iteratee, callback);
	}

	/**
	 * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument
	 * to the iteratee.
	 *
	 * @name eachOf
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @alias forEachOf
	 * @category Collection
	 * @see [async.each]{@link module:Collections.each}
	 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
	 * @param {AsyncFunction} iteratee - A function to apply to each
	 * item in `coll`.
	 * The `key` is the item's key, or index in the case of an array.
	 * Invoked with (item, key, callback).
	 * @param {Function} [callback] - A callback which is called when all
	 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
	 * @returns {Promise} a promise, if a callback is omitted
	 * @example
	 *
	 * var obj = {dev: "/dev.json", test: "/test.json", prod: "/prod.json"};
	 * var configs = {};
	 *
	 * async.forEachOf(obj, function (value, key, callback) {
	 *     fs.readFile(__dirname + value, "utf8", function (err, data) {
	 *         if (err) return callback(err);
	 *         try {
	 *             configs[key] = JSON.parse(data);
	 *         } catch (e) {
	 *             return callback(e);
	 *         }
	 *         callback();
	 *     });
	 * }, function (err) {
	 *     if (err) console.error(err.message);
	 *     // configs is now a map of JSON data
	 *     doSomethingWith(configs);
	 * });
	 */
	function eachOf(coll, iteratee, callback) {
	    var eachOfImplementation = (0, _isArrayLike2.default)(coll) ? eachOfArrayLike : eachOfGeneric;
	    return eachOfImplementation(coll, (0, _wrapAsync2.default)(iteratee), callback);
	}

	exports.default = (0, _awaitify2.default)(eachOf, 3);
	module.exports = exports['default'];
	});

	var withoutIndex = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = _withoutIndex;
	function _withoutIndex(iteratee) {
	    return (value, index, callback) => iteratee(value, callback);
	}
	module.exports = exports["default"];
	});

	var forEach = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _eachOf2 = _interopRequireDefault(eachOf_1);



	var _withoutIndex2 = _interopRequireDefault(withoutIndex);



	var _wrapAsync2 = _interopRequireDefault(wrapAsync_1);



	var _awaitify2 = _interopRequireDefault(awaitify_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Applies the function `iteratee` to each item in `coll`, in parallel.
	 * The `iteratee` is called with an item from the list, and a callback for when
	 * it has finished. If the `iteratee` passes an error to its `callback`, the
	 * main `callback` (for the `each` function) is immediately called with the
	 * error.
	 *
	 * Note, that since this function applies `iteratee` to each item in parallel,
	 * there is no guarantee that the iteratee functions will complete in order.
	 *
	 * @name each
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @alias forEach
	 * @category Collection
	 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
	 * @param {AsyncFunction} iteratee - An async function to apply to
	 * each item in `coll`. Invoked with (item, callback).
	 * The array index is not passed to the iteratee.
	 * If you need the index, use `eachOf`.
	 * @param {Function} [callback] - A callback which is called when all
	 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
	 * @returns {Promise} a promise, if a callback is omitted
	 * @example
	 *
	 * // assuming openFiles is an array of file names and saveFile is a function
	 * // to save the modified contents of that file:
	 *
	 * async.each(openFiles, saveFile, function(err){
	 *   // if any of the saves produced an error, err would equal that error
	 * });
	 *
	 * // assuming openFiles is an array of file names
	 * async.each(openFiles, function(file, callback) {
	 *
	 *     // Perform operation on file here.
	 *     console.log('Processing file ' + file);
	 *
	 *     if( file.length > 32 ) {
	 *       console.log('This file name is too long');
	 *       callback('File name too long');
	 *     } else {
	 *       // Do work to process file here
	 *       console.log('File processed');
	 *       callback();
	 *     }
	 * }, function(err) {
	 *     // if any of the file processing produced an error, err would equal that error
	 *     if( err ) {
	 *       // One of the iterations produced an error.
	 *       // All processing will now stop.
	 *       console.log('A file failed to process');
	 *     } else {
	 *       console.log('All files have been processed successfully');
	 *     }
	 * });
	 */
	function eachLimit(coll, iteratee, callback) {
	  return (0, _eachOf2.default)(coll, (0, _withoutIndex2.default)((0, _wrapAsync2.default)(iteratee)), callback);
	}

	exports.default = (0, _awaitify2.default)(eachLimit, 3);
	module.exports = exports['default'];
	});

	var toString$8 = Object.prototype.toString;

	/**
	 * Extract names from functions.
	 *
	 * @param {Function} fn The function who's name we need to extract.
	 * @returns {String} The name of the function.
	 * @public
	 */
	var fn_name = function name(fn) {
	  if ('string' === typeof fn.displayName && fn.constructor.name) {
	    return fn.displayName;
	  } else if ('string' === typeof fn.name && fn.name) {
	    return fn.name;
	  }

	  //
	  // Check to see if the constructor has a name.
	  //
	  if (
	       'object' === typeof fn
	    && fn.constructor
	    && 'string' === typeof fn.constructor.name
	  ) return fn.constructor.name;

	  //
	  // toString the given function and attempt to parse it out of it, or determine
	  // the class.
	  //
	  var named = fn.toString()
	    , type = toString$8.call(fn).slice(8, -1);

	  if ('Function' === type) {
	    named = named.substring(named.indexOf('(') + 1, named.indexOf(')'));
	  } else {
	    named = type;
	  }

	  return named || 'anonymous';
	};

	/**
	 * Wrap callbacks to prevent double execution.
	 *
	 * @param {Function} fn Function that should only be called once.
	 * @returns {Function} A wrapped callback which prevents multiple executions.
	 * @public
	 */
	var oneTime = function one(fn) {
	  var called = 0
	    , value;

	  /**
	   * The function that prevents double execution.
	   *
	   * @private
	   */
	  function onetime() {
	    if (called) return value;

	    called = 1;
	    value = fn.apply(this, arguments);
	    fn = null;

	    return value;
	  }

	  //
	  // To make debugging more easy we want to use the name of the supplied
	  // function. So when you look at the functions that are assigned to event
	  // listeners you don't see a load of `onetime` functions but actually the
	  // names of the functions that this module will call.
	  //
	  // NOTE: We cannot override the `name` property, as that is `readOnly`
	  // property, so displayName will have to do.
	  //
	  onetime.displayName = fn_name(fn);
	  return onetime;
	};

	var stackTrace = createCommonjsModule(function (module, exports) {
	exports.get = function(belowFn) {
	  var oldLimit = Error.stackTraceLimit;
	  Error.stackTraceLimit = Infinity;

	  var dummyObject = {};

	  var v8Handler = Error.prepareStackTrace;
	  Error.prepareStackTrace = function(dummyObject, v8StackTrace) {
	    return v8StackTrace;
	  };
	  Error.captureStackTrace(dummyObject, belowFn || exports.get);

	  var v8StackTrace = dummyObject.stack;
	  Error.prepareStackTrace = v8Handler;
	  Error.stackTraceLimit = oldLimit;

	  return v8StackTrace;
	};

	exports.parse = function(err) {
	  if (!err.stack) {
	    return [];
	  }

	  var self = this;
	  var lines = err.stack.split('\n').slice(1);

	  return lines
	    .map(function(line) {
	      if (line.match(/^\s*[-]{4,}$/)) {
	        return self._createParsedCallSite({
	          fileName: line,
	          lineNumber: null,
	          functionName: null,
	          typeName: null,
	          methodName: null,
	          columnNumber: null,
	          'native': null,
	        });
	      }

	      var lineMatch = line.match(/at (?:(.+)\s+\()?(?:(.+?):(\d+)(?::(\d+))?|([^)]+))\)?/);
	      if (!lineMatch) {
	        return;
	      }

	      var object = null;
	      var method = null;
	      var functionName = null;
	      var typeName = null;
	      var methodName = null;
	      var isNative = (lineMatch[5] === 'native');

	      if (lineMatch[1]) {
	        functionName = lineMatch[1];
	        var methodStart = functionName.lastIndexOf('.');
	        if (functionName[methodStart-1] == '.')
	          methodStart--;
	        if (methodStart > 0) {
	          object = functionName.substr(0, methodStart);
	          method = functionName.substr(methodStart + 1);
	          var objectEnd = object.indexOf('.Module');
	          if (objectEnd > 0) {
	            functionName = functionName.substr(objectEnd + 1);
	            object = object.substr(0, objectEnd);
	          }
	        }
	        typeName = null;
	      }

	      if (method) {
	        typeName = object;
	        methodName = method;
	      }

	      if (method === '<anonymous>') {
	        methodName = null;
	        functionName = null;
	      }

	      var properties = {
	        fileName: lineMatch[2] || null,
	        lineNumber: parseInt(lineMatch[3], 10) || null,
	        functionName: functionName,
	        typeName: typeName,
	        methodName: methodName,
	        columnNumber: parseInt(lineMatch[4], 10) || null,
	        'native': isNative,
	      };

	      return self._createParsedCallSite(properties);
	    })
	    .filter(function(callSite) {
	      return !!callSite;
	    });
	};

	function CallSite(properties) {
	  for (var property in properties) {
	    this[property] = properties[property];
	  }
	}

	var strProperties = [
	  'this',
	  'typeName',
	  'functionName',
	  'methodName',
	  'fileName',
	  'lineNumber',
	  'columnNumber',
	  'function',
	  'evalOrigin'
	];
	var boolProperties = [
	  'topLevel',
	  'eval',
	  'native',
	  'constructor'
	];
	strProperties.forEach(function (property) {
	  CallSite.prototype[property] = null;
	  CallSite.prototype['get' + property[0].toUpperCase() + property.substr(1)] = function () {
	    return this[property];
	  };
	});
	boolProperties.forEach(function (property) {
	  CallSite.prototype[property] = false;
	  CallSite.prototype['is' + property[0].toUpperCase() + property.substr(1)] = function () {
	    return this[property];
	  };
	});

	exports._createParsedCallSite = function(properties) {
	  return new CallSite(properties);
	};
	});

	/**
	 * exception-stream.js: TODO: add file header handler.
	 *
	 * (C) 2010 Charlie Robbins
	 * MIT LICENCE
	 */

	const { Writable: Writable$1 } = readable;

	/**
	 * TODO: add class description.
	 * @type {ExceptionStream}
	 * @extends {Writable}
	 */
	var exceptionStream = class ExceptionStream extends Writable$1 {
	  /**
	   * Constructor function for the ExceptionStream responsible for wrapping a
	   * TransportStream; only allowing writes of `info` objects with
	   * `info.exception` set to true.
	   * @param {!TransportStream} transport - Stream to filter to exceptions
	   */
	  constructor(transport) {
	    super({ objectMode: true });

	    if (!transport) {
	      throw new Error('ExceptionStream requires a TransportStream instance.');
	    }

	    // Remark (indexzero): we set `handleExceptions` here because it's the
	    // predicate checked in ExceptionHandler.prototype.__getExceptionHandlers
	    this.handleExceptions = true;
	    this.transport = transport;
	  }

	  /**
	   * Writes the info object to our transport instance if (and only if) the
	   * `exception` property is set on the info.
	   * @param {mixed} info - TODO: add param description.
	   * @param {mixed} enc - TODO: add param description.
	   * @param {mixed} callback - TODO: add param description.
	   * @returns {mixed} - TODO: add return description.
	   * @private
	   */
	  _write(info, enc, callback) {
	    if (info.exception) {
	      return this.transport.log(info, callback);
	    }

	    callback();
	    return true;
	  }
	};

	/**
	 * exception-handler.js: Object for handling uncaughtException events.
	 *
	 * (C) 2010 Charlie Robbins
	 * MIT LICENCE
	 */



	const debug$4 = node$1('winston:exception');




	/**
	 * Object for handling uncaughtException events.
	 * @type {ExceptionHandler}
	 */
	var exceptionHandler = class ExceptionHandler {
	  /**
	   * TODO: add contructor description
	   * @param {!Logger} logger - TODO: add param description
	   */
	  constructor(logger) {
	    if (!logger) {
	      throw new Error('Logger is required to handle exceptions');
	    }

	    this.logger = logger;
	    this.handlers = new Map();
	  }

	  /**
	   * Handles `uncaughtException` events for the current process by adding any
	   * handlers passed in.
	   * @returns {undefined}
	   */
	  handle(...args) {
	    args.forEach(arg => {
	      if (Array.isArray(arg)) {
	        return arg.forEach(handler => this._addHandler(handler));
	      }

	      this._addHandler(arg);
	    });

	    if (!this.catcher) {
	      this.catcher = this._uncaughtException.bind(this);
	      process.on('uncaughtException', this.catcher);
	    }
	  }

	  /**
	   * Removes any handlers to `uncaughtException` events for the current
	   * process. This does not modify the state of the `this.handlers` set.
	   * @returns {undefined}
	   */
	  unhandle() {
	    if (this.catcher) {
	      process.removeListener('uncaughtException', this.catcher);
	      this.catcher = false;

	      Array.from(this.handlers.values())
	        .forEach(wrapper => this.logger.unpipe(wrapper));
	    }
	  }

	  /**
	   * TODO: add method description
	   * @param {Error} err - Error to get information about.
	   * @returns {mixed} - TODO: add return description.
	   */
	  getAllInfo(err) {
	    let { message } = err;
	    if (!message && typeof err === 'string') {
	      message = err;
	    }

	    return {
	      error: err,
	      // TODO (indexzero): how do we configure this?
	      level: 'error',
	      message: [
	        `uncaughtException: ${(message || '(no error message)')}`,
	        err.stack || '  No stack trace'
	      ].join('\n'),
	      stack: err.stack,
	      exception: true,
	      date: new Date().toString(),
	      process: this.getProcessInfo(),
	      os: this.getOsInfo(),
	      trace: this.getTrace(err)
	    };
	  }

	  /**
	   * Gets all relevant process information for the currently running process.
	   * @returns {mixed} - TODO: add return description.
	   */
	  getProcessInfo() {
	    return {
	      pid: process.pid,
	      uid: process.getuid ? process.getuid() : null,
	      gid: process.getgid ? process.getgid() : null,
	      cwd: process.cwd(),
	      execPath: process.execPath,
	      version: process.version,
	      argv: process.argv,
	      memoryUsage: process.memoryUsage()
	    };
	  }

	  /**
	   * Gets all relevant OS information for the currently running process.
	   * @returns {mixed} - TODO: add return description.
	   */
	  getOsInfo() {
	    return {
	      loadavg: os__default['default'].loadavg(),
	      uptime: os__default['default'].uptime()
	    };
	  }

	  /**
	   * Gets a stack trace for the specified error.
	   * @param {mixed} err - TODO: add param description.
	   * @returns {mixed} - TODO: add return description.
	   */
	  getTrace(err) {
	    const trace = err ? stackTrace.parse(err) : stackTrace.get();
	    return trace.map(site => {
	      return {
	        column: site.getColumnNumber(),
	        file: site.getFileName(),
	        function: site.getFunctionName(),
	        line: site.getLineNumber(),
	        method: site.getMethodName(),
	        native: site.isNative()
	      };
	    });
	  }

	  /**
	   * Helper method to add a transport as an exception handler.
	   * @param {Transport} handler - The transport to add as an exception handler.
	   * @returns {void}
	   */
	  _addHandler(handler) {
	    if (!this.handlers.has(handler)) {
	      handler.handleExceptions = true;
	      const wrapper = new exceptionStream(handler);
	      this.handlers.set(handler, wrapper);
	      this.logger.pipe(wrapper);
	    }
	  }

	  /**
	   * Logs all relevant information around the `err` and exits the current
	   * process.
	   * @param {Error} err - Error to handle
	   * @returns {mixed} - TODO: add return description.
	   * @private
	   */
	  _uncaughtException(err) {
	    const info = this.getAllInfo(err);
	    const handlers = this._getExceptionHandlers();
	    // Calculate if we should exit on this error
	    let doExit = typeof this.logger.exitOnError === 'function'
	      ? this.logger.exitOnError(err)
	      : this.logger.exitOnError;
	    let timeout;

	    if (!handlers.length && doExit) {
	      // eslint-disable-next-line no-console
	      console.warn('winston: exitOnError cannot be true with no exception handlers.');
	      // eslint-disable-next-line no-console
	      console.warn('winston: not exiting process.');
	      doExit = false;
	    }

	    function gracefulExit() {
	      debug$4('doExit', doExit);
	      debug$4('process._exiting', process._exiting);

	      if (doExit && !process._exiting) {
	        // Remark: Currently ignoring any exceptions from transports when
	        // catching uncaught exceptions.
	        if (timeout) {
	          clearTimeout(timeout);
	        }
	        // eslint-disable-next-line no-process-exit
	        process.exit(1);
	      }
	    }

	    if (!handlers || handlers.length === 0) {
	      return process.nextTick(gracefulExit);
	    }

	    // Log to all transports attempting to listen for when they are completed.
	    forEach(handlers, (handler, next) => {
	      const done = oneTime(next);
	      const transport = handler.transport || handler;

	      // Debug wrapping so that we can inspect what's going on under the covers.
	      function onDone(event) {
	        return () => {
	          debug$4(event);
	          done();
	        };
	      }

	      transport._ending = true;
	      transport.once('finish', onDone('finished'));
	      transport.once('error', onDone('error'));
	    }, () => doExit && gracefulExit());

	    this.logger.log(info);

	    // If exitOnError is true, then only allow the logging of exceptions to
	    // take up to `3000ms`.
	    if (doExit) {
	      timeout = setTimeout(gracefulExit, 3000);
	    }
	  }

	  /**
	   * Returns the list of transports and exceptionHandlers for this instance.
	   * @returns {Array} - List of transports and exceptionHandlers for this
	   * instance.
	   * @private
	   */
	  _getExceptionHandlers() {
	    // Remark (indexzero): since `logger.transports` returns all of the pipes
	    // from the _readableState of the stream we actually get the join of the
	    // explicit handlers and the implicit transports with
	    // `handleExceptions: true`
	    return this.logger.transports.filter(wrap => {
	      const transport = wrap.transport || wrap;
	      return transport.handleExceptions;
	    });
	  }
	};

	/**
	 * exception-handler.js: Object for handling uncaughtException events.
	 *
	 * (C) 2010 Charlie Robbins
	 * MIT LICENCE
	 */



	const debug$3 = node$1('winston:rejection');




	/**
	 * Object for handling unhandledRejection events.
	 * @type {RejectionHandler}
	 */
	var rejectionHandler = class RejectionHandler {
	  /**
	   * TODO: add contructor description
	   * @param {!Logger} logger - TODO: add param description
	   */
	  constructor(logger) {
	    if (!logger) {
	      throw new Error('Logger is required to handle rejections');
	    }

	    this.logger = logger;
	    this.handlers = new Map();
	  }

	  /**
	   * Handles `unhandledRejection` events for the current process by adding any
	   * handlers passed in.
	   * @returns {undefined}
	   */
	  handle(...args) {
	    args.forEach(arg => {
	      if (Array.isArray(arg)) {
	        return arg.forEach(handler => this._addHandler(handler));
	      }

	      this._addHandler(arg);
	    });

	    if (!this.catcher) {
	      this.catcher = this._unhandledRejection.bind(this);
	      process.on('unhandledRejection', this.catcher);
	    }
	  }

	  /**
	   * Removes any handlers to `unhandledRejection` events for the current
	   * process. This does not modify the state of the `this.handlers` set.
	   * @returns {undefined}
	   */
	  unhandle() {
	    if (this.catcher) {
	      process.removeListener('unhandledRejection', this.catcher);
	      this.catcher = false;

	      Array.from(this.handlers.values()).forEach(wrapper =>
	        this.logger.unpipe(wrapper)
	      );
	    }
	  }

	  /**
	   * TODO: add method description
	   * @param {Error} err - Error to get information about.
	   * @returns {mixed} - TODO: add return description.
	   */
	  getAllInfo(err) {
	    let { message } = err;
	    if (!message && typeof err === 'string') {
	      message = err;
	    }

	    return {
	      error: err,
	      // TODO (indexzero): how do we configure this?
	      level: 'error',
	      message: [
	        `unhandledRejection: ${message || '(no error message)'}`,
	        err.stack || '  No stack trace'
	      ].join('\n'),
	      stack: err.stack,
	      exception: true,
	      date: new Date().toString(),
	      process: this.getProcessInfo(),
	      os: this.getOsInfo(),
	      trace: this.getTrace(err)
	    };
	  }

	  /**
	   * Gets all relevant process information for the currently running process.
	   * @returns {mixed} - TODO: add return description.
	   */
	  getProcessInfo() {
	    return {
	      pid: process.pid,
	      uid: process.getuid ? process.getuid() : null,
	      gid: process.getgid ? process.getgid() : null,
	      cwd: process.cwd(),
	      execPath: process.execPath,
	      version: process.version,
	      argv: process.argv,
	      memoryUsage: process.memoryUsage()
	    };
	  }

	  /**
	   * Gets all relevant OS information for the currently running process.
	   * @returns {mixed} - TODO: add return description.
	   */
	  getOsInfo() {
	    return {
	      loadavg: os__default['default'].loadavg(),
	      uptime: os__default['default'].uptime()
	    };
	  }

	  /**
	   * Gets a stack trace for the specified error.
	   * @param {mixed} err - TODO: add param description.
	   * @returns {mixed} - TODO: add return description.
	   */
	  getTrace(err) {
	    const trace = err ? stackTrace.parse(err) : stackTrace.get();
	    return trace.map(site => {
	      return {
	        column: site.getColumnNumber(),
	        file: site.getFileName(),
	        function: site.getFunctionName(),
	        line: site.getLineNumber(),
	        method: site.getMethodName(),
	        native: site.isNative()
	      };
	    });
	  }

	  /**
	   * Helper method to add a transport as an exception handler.
	   * @param {Transport} handler - The transport to add as an exception handler.
	   * @returns {void}
	   */
	  _addHandler(handler) {
	    if (!this.handlers.has(handler)) {
	      handler.handleRejections = true;
	      const wrapper = new exceptionStream(handler);
	      this.handlers.set(handler, wrapper);
	      this.logger.pipe(wrapper);
	    }
	  }

	  /**
	   * Logs all relevant information around the `err` and exits the current
	   * process.
	   * @param {Error} err - Error to handle
	   * @returns {mixed} - TODO: add return description.
	   * @private
	   */
	  _unhandledRejection(err) {
	    const info = this.getAllInfo(err);
	    const handlers = this._getRejectionHandlers();
	    // Calculate if we should exit on this error
	    let doExit =
	      typeof this.logger.exitOnError === 'function'
	        ? this.logger.exitOnError(err)
	        : this.logger.exitOnError;
	    let timeout;

	    if (!handlers.length && doExit) {
	      // eslint-disable-next-line no-console
	      console.warn('winston: exitOnError cannot be true with no rejection handlers.');
	      // eslint-disable-next-line no-console
	      console.warn('winston: not exiting process.');
	      doExit = false;
	    }

	    function gracefulExit() {
	      debug$3('doExit', doExit);
	      debug$3('process._exiting', process._exiting);

	      if (doExit && !process._exiting) {
	        // Remark: Currently ignoring any rejections from transports when
	        // catching unhandled rejections.
	        if (timeout) {
	          clearTimeout(timeout);
	        }
	        // eslint-disable-next-line no-process-exit
	        process.exit(1);
	      }
	    }

	    if (!handlers || handlers.length === 0) {
	      return process.nextTick(gracefulExit);
	    }

	    // Log to all transports attempting to listen for when they are completed.
	    forEach(
	      handlers,
	      (handler, next) => {
	        const done = oneTime(next);
	        const transport = handler.transport || handler;

	        // Debug wrapping so that we can inspect what's going on under the covers.
	        function onDone(event) {
	          return () => {
	            debug$3(event);
	            done();
	          };
	        }

	        transport._ending = true;
	        transport.once('finish', onDone('finished'));
	        transport.once('error', onDone('error'));
	      },
	      () => doExit && gracefulExit()
	    );

	    this.logger.log(info);

	    // If exitOnError is true, then only allow the logging of exceptions to
	    // take up to `3000ms`.
	    if (doExit) {
	      timeout = setTimeout(gracefulExit, 3000);
	    }
	  }

	  /**
	   * Returns the list of transports and exceptionHandlers for this instance.
	   * @returns {Array} - List of transports and exceptionHandlers for this
	   * instance.
	   * @private
	   */
	  _getRejectionHandlers() {
	    // Remark (indexzero): since `logger.transports` returns all of the pipes
	    // from the _readableState of the stream we actually get the join of the
	    // explicit handlers and the implicit transports with
	    // `handleRejections: true`
	    return this.logger.transports.filter(wrap => {
	      const transport = wrap.transport || wrap;
	      return transport.handleRejections;
	    });
	  }
	};

	/**
	 * profiler.js: TODO: add file header description.
	 *
	 * (C) 2010 Charlie Robbins
	 * MIT LICENCE
	 */

	/**
	 * TODO: add class description.
	 * @type {Profiler}
	 * @private
	 */
	var profiler = class Profiler {
	  /**
	   * Constructor function for the Profiler instance used by
	   * `Logger.prototype.startTimer`. When done is called the timer will finish
	   * and log the duration.
	   * @param {!Logger} logger - TODO: add param description.
	   * @private
	   */
	  constructor(logger) {
	    if (!logger) {
	      throw new Error('Logger is required for profiling.');
	    }

	    this.logger = logger;
	    this.start = Date.now();
	  }

	  /**
	   * Ends the current timer (i.e. Profiler) instance and logs the `msg` along
	   * with the duration since creation.
	   * @returns {mixed} - TODO: add return description.
	   * @private
	   */
	  done(...args) {
	    if (typeof args[args.length - 1] === 'function') {
	      // eslint-disable-next-line no-console
	      console.warn('Callback function no longer supported as of winston@3.0.0');
	      args.pop();
	    }

	    const info = typeof args[args.length - 1] === 'object' ? args.pop() : {};
	    info.level = info.level || 'info';
	    info.durationMs = (Date.now()) - this.start;

	    return this.logger.write(info);
	  }
	};

	var fastSafeStringify = stringify$2;
	stringify$2.default = stringify$2;
	stringify$2.stable = deterministicStringify;
	stringify$2.stableStringify = deterministicStringify;

	var arr = [];
	var replacerStack = [];

	// Regular stringify
	function stringify$2 (obj, replacer, spacer) {
	  decirc(obj, '', [], undefined);
	  var res;
	  if (replacerStack.length === 0) {
	    res = JSON.stringify(obj, replacer, spacer);
	  } else {
	    res = JSON.stringify(obj, replaceGetterValues(replacer), spacer);
	  }
	  while (arr.length !== 0) {
	    var part = arr.pop();
	    if (part.length === 4) {
	      Object.defineProperty(part[0], part[1], part[3]);
	    } else {
	      part[0][part[1]] = part[2];
	    }
	  }
	  return res
	}
	function decirc (val, k, stack, parent) {
	  var i;
	  if (typeof val === 'object' && val !== null) {
	    for (i = 0; i < stack.length; i++) {
	      if (stack[i] === val) {
	        var propertyDescriptor = Object.getOwnPropertyDescriptor(parent, k);
	        if (propertyDescriptor.get !== undefined) {
	          if (propertyDescriptor.configurable) {
	            Object.defineProperty(parent, k, { value: '[Circular]' });
	            arr.push([parent, k, val, propertyDescriptor]);
	          } else {
	            replacerStack.push([val, k]);
	          }
	        } else {
	          parent[k] = '[Circular]';
	          arr.push([parent, k, val]);
	        }
	        return
	      }
	    }
	    stack.push(val);
	    // Optimize for Arrays. Big arrays could kill the performance otherwise!
	    if (Array.isArray(val)) {
	      for (i = 0; i < val.length; i++) {
	        decirc(val[i], i, stack, val);
	      }
	    } else {
	      var keys = Object.keys(val);
	      for (i = 0; i < keys.length; i++) {
	        var key = keys[i];
	        decirc(val[key], key, stack, val);
	      }
	    }
	    stack.pop();
	  }
	}

	// Stable-stringify
	function compareFunction (a, b) {
	  if (a < b) {
	    return -1
	  }
	  if (a > b) {
	    return 1
	  }
	  return 0
	}

	function deterministicStringify (obj, replacer, spacer) {
	  var tmp = deterministicDecirc(obj, '', [], undefined) || obj;
	  var res;
	  if (replacerStack.length === 0) {
	    res = JSON.stringify(tmp, replacer, spacer);
	  } else {
	    res = JSON.stringify(tmp, replaceGetterValues(replacer), spacer);
	  }
	  while (arr.length !== 0) {
	    var part = arr.pop();
	    if (part.length === 4) {
	      Object.defineProperty(part[0], part[1], part[3]);
	    } else {
	      part[0][part[1]] = part[2];
	    }
	  }
	  return res
	}

	function deterministicDecirc (val, k, stack, parent) {
	  var i;
	  if (typeof val === 'object' && val !== null) {
	    for (i = 0; i < stack.length; i++) {
	      if (stack[i] === val) {
	        var propertyDescriptor = Object.getOwnPropertyDescriptor(parent, k);
	        if (propertyDescriptor.get !== undefined) {
	          if (propertyDescriptor.configurable) {
	            Object.defineProperty(parent, k, { value: '[Circular]' });
	            arr.push([parent, k, val, propertyDescriptor]);
	          } else {
	            replacerStack.push([val, k]);
	          }
	        } else {
	          parent[k] = '[Circular]';
	          arr.push([parent, k, val]);
	        }
	        return
	      }
	    }
	    if (typeof val.toJSON === 'function') {
	      return
	    }
	    stack.push(val);
	    // Optimize for Arrays. Big arrays could kill the performance otherwise!
	    if (Array.isArray(val)) {
	      for (i = 0; i < val.length; i++) {
	        deterministicDecirc(val[i], i, stack, val);
	      }
	    } else {
	      // Create a temporary object in the required way
	      var tmp = {};
	      var keys = Object.keys(val).sort(compareFunction);
	      for (i = 0; i < keys.length; i++) {
	        var key = keys[i];
	        deterministicDecirc(val[key], key, stack, val);
	        tmp[key] = val[key];
	      }
	      if (parent !== undefined) {
	        arr.push([parent, k, val]);
	        parent[k] = tmp;
	      } else {
	        return tmp
	      }
	    }
	    stack.pop();
	  }
	}

	// wraps replacer function to handle values we couldn't replace
	// and mark them as [Circular]
	function replaceGetterValues (replacer) {
	  replacer = replacer !== undefined ? replacer : function (k, v) { return v };
	  return function (key, val) {
	    if (replacerStack.length > 0) {
	      for (var i = 0; i < replacerStack.length; i++) {
	        var part = replacerStack[i];
	        if (part[1] === key && part[0] === val) {
	          val = '[Circular]';
	          replacerStack.splice(i, 1);
	          break
	        }
	      }
	    }
	    return replacer.call(this, key, val)
	  }
	}

	const { MESSAGE } = tripleBeam;


	/*
	 * function replacer (key, value)
	 * Handles proper stringification of Buffer and bigint output.
	 */
	function replacer(key, value) {
	  if (value instanceof Buffer)
	    return value.toString('base64');
	  // eslint-disable-next-line valid-typeof
	  if (typeof value === 'bigint')
	    return value.toString();
	  return value;
	}

	/*
	 * function json (info)
	 * Returns a new instance of the JSON format that turns a log `info`
	 * object into pure JSON. This was previously exposed as { json: true }
	 * to transports in `winston < 3.0.0`.
	 */
	var json = format$7((info, opts = {}) => {
	  info[MESSAGE] = (opts.stable ? fastSafeStringify.stableStringify
	    : fastSafeStringify)(info, opts.replacer || replacer, opts.space);
	  return info;
	});

	/**
	 * logger.js: TODO: add file header description.
	 *
	 * (C) 2010 Charlie Robbins
	 * MIT LICENCE
	 */

	const { Stream: Stream$4, Transform: Transform$2 } = readable;

	const { LEVEL: LEVEL$1, SPLAT } = tripleBeam;





	const { warn } = common$1;


	/**
	 * Captures the number of format (i.e. %s strings) in a given string.
	 * Based on `util.format`, see Node.js source:
	 * https://github.com/nodejs/node/blob/b1c8f15c5f169e021f7c46eb7b219de95fe97603/lib/util.js#L201-L230
	 * @type {RegExp}
	 */
	const formatRegExp = /%[scdjifoO%]/g;

	/**
	 * TODO: add class description.
	 * @type {Logger}
	 * @extends {Transform}
	 */
	class Logger extends Transform$2 {
	  /**
	   * Constructor function for the Logger object responsible for persisting log
	   * messages and metadata to one or more transports.
	   * @param {!Object} options - foo
	   */
	  constructor(options) {
	    super({ objectMode: true });
	    this.configure(options);
	  }

	  child(defaultRequestMetadata) {
	    const logger = this;
	    return Object.create(logger, {
	      write: {
	        value: function (info) {
	          const infoClone = Object.assign(
	            {},
	            defaultRequestMetadata,
	            info
	          );

	          // Object.assign doesn't copy inherited Error
	          // properties so we have to do that explicitly
	          //
	          // Remark (indexzero): we should remove this
	          // since the errors format will handle this case.
	          //
	          if (info instanceof Error) {
	            infoClone.stack = info.stack;
	            infoClone.message = info.message;
	          }

	          logger.write(infoClone);
	        }
	      }
	    });
	  }

	  /**
	   * This will wholesale reconfigure this instance by:
	   * 1. Resetting all transports. Older transports will be removed implicitly.
	   * 2. Set all other options including levels, colors, rewriters, filters,
	   *    exceptionHandlers, etc.
	   * @param {!Object} options - TODO: add param description.
	   * @returns {undefined}
	   */
	  configure({
	    silent,
	    format,
	    defaultMeta,
	    levels,
	    level = 'info',
	    exitOnError = true,
	    transports,
	    colors,
	    emitErrs,
	    formatters,
	    padLevels,
	    rewriters,
	    stripColors,
	    exceptionHandlers,
	    rejectionHandlers
	  } = {}) {
	    // Reset transports if we already have them
	    if (this.transports.length) {
	      this.clear();
	    }

	    this.silent = silent;
	    this.format = format || this.format || json();

	    this.defaultMeta = defaultMeta || null;
	    // Hoist other options onto this instance.
	    this.levels = levels || this.levels || config$1.npm.levels;
	    this.level = level;
	    this.exceptions = new exceptionHandler(this);
	    this.rejections = new rejectionHandler(this);
	    this.profilers = {};
	    this.exitOnError = exitOnError;

	    // Add all transports we have been provided.
	    if (transports) {
	      transports = Array.isArray(transports) ? transports : [transports];
	      transports.forEach(transport => this.add(transport));
	    }

	    if (
	      colors ||
	      emitErrs ||
	      formatters ||
	      padLevels ||
	      rewriters ||
	      stripColors
	    ) {
	      throw new Error(
	        [
	          '{ colors, emitErrs, formatters, padLevels, rewriters, stripColors } were removed in winston@3.0.0.',
	          'Use a custom winston.format(function) instead.',
	          'See: https://github.com/winstonjs/winston/tree/master/UPGRADE-3.0.md'
	        ].join('\n')
	      );
	    }

	    if (exceptionHandlers) {
	      this.exceptions.handle(exceptionHandlers);
	    }
	    if (rejectionHandlers) {
	      this.rejections.handle(rejectionHandlers);
	    }
	  }

	  isLevelEnabled(level) {
	    const givenLevelValue = getLevelValue(this.levels, level);
	    if (givenLevelValue === null) {
	      return false;
	    }

	    const configuredLevelValue = getLevelValue(this.levels, this.level);
	    if (configuredLevelValue === null) {
	      return false;
	    }

	    if (!this.transports || this.transports.length === 0) {
	      return configuredLevelValue >= givenLevelValue;
	    }

	    const index = this.transports.findIndex(transport => {
	      let transportLevelValue = getLevelValue(this.levels, transport.level);
	      if (transportLevelValue === null) {
	        transportLevelValue = configuredLevelValue;
	      }
	      return transportLevelValue >= givenLevelValue;
	    });
	    return index !== -1;
	  }

	  /* eslint-disable valid-jsdoc */
	  /**
	   * Ensure backwards compatibility with a `log` method
	   * @param {mixed} level - Level the log message is written at.
	   * @param {mixed} msg - TODO: add param description.
	   * @param {mixed} meta - TODO: add param description.
	   * @returns {Logger} - TODO: add return description.
	   *
	   * @example
	   *    // Supports the existing API:
	   *    logger.log('info', 'Hello world', { custom: true });
	   *    logger.log('info', new Error('Yo, it\'s on fire'));
	   *
	   *    // Requires winston.format.splat()
	   *    logger.log('info', '%s %d%%', 'A string', 50, { thisIsMeta: true });
	   *
	   *    // And the new API with a single JSON literal:
	   *    logger.log({ level: 'info', message: 'Hello world', custom: true });
	   *    logger.log({ level: 'info', message: new Error('Yo, it\'s on fire') });
	   *
	   *    // Also requires winston.format.splat()
	   *    logger.log({
	   *      level: 'info',
	   *      message: '%s %d%%',
	   *      [SPLAT]: ['A string', 50],
	   *      meta: { thisIsMeta: true }
	   *    });
	   *
	   */
	  /* eslint-enable valid-jsdoc */
	  log(level, msg, ...splat) {
	    // eslint-disable-line max-params
	    // Optimize for the hotpath of logging JSON literals
	    if (arguments.length === 1) {
	      // Yo dawg, I heard you like levels ... seriously ...
	      // In this context the LHS `level` here is actually the `info` so read
	      // this as: info[LEVEL] = info.level;
	      level[LEVEL$1] = level.level;
	      this._addDefaultMeta(level);
	      this.write(level);
	      return this;
	    }

	    // Slightly less hotpath, but worth optimizing for.
	    if (arguments.length === 2) {
	      if (msg && typeof msg === 'object') {
	        msg[LEVEL$1] = msg.level = level;
	        this._addDefaultMeta(msg);
	        this.write(msg);
	        return this;
	      }

	      this.write({ [LEVEL$1]: level, level, message: msg });
	      return this;
	    }

	    const [meta] = splat;
	    if (typeof meta === 'object' && meta !== null) {
	      // Extract tokens, if none available default to empty array to
	      // ensure consistancy in expected results
	      const tokens = msg && msg.match && msg.match(formatRegExp);

	      if (!tokens) {
	        const info = Object.assign({}, this.defaultMeta, meta, {
	          [LEVEL$1]: level,
	          [SPLAT]: splat,
	          level,
	          message: msg
	        });

	        if (meta.message) info.message = `${info.message} ${meta.message}`;
	        if (meta.stack) info.stack = meta.stack;

	        this.write(info);
	        return this;
	      }
	    }

	    this.write(Object.assign({}, this.defaultMeta, {
	      [LEVEL$1]: level,
	      [SPLAT]: splat,
	      level,
	      message: msg
	    }));

	    return this;
	  }

	  /**
	   * Pushes data so that it can be picked up by all of our pipe targets.
	   * @param {mixed} info - TODO: add param description.
	   * @param {mixed} enc - TODO: add param description.
	   * @param {mixed} callback - Continues stream processing.
	   * @returns {undefined}
	   * @private
	   */
	  _transform(info, enc, callback) {
	    if (this.silent) {
	      return callback();
	    }

	    // [LEVEL] is only soft guaranteed to be set here since we are a proper
	    // stream. It is likely that `info` came in through `.log(info)` or
	    // `.info(info)`. If it is not defined, however, define it.
	    // This LEVEL symbol is provided by `triple-beam` and also used in:
	    // - logform
	    // - winston-transport
	    // - abstract-winston-transport
	    if (!info[LEVEL$1]) {
	      info[LEVEL$1] = info.level;
	    }

	    // Remark: really not sure what to do here, but this has been reported as
	    // very confusing by pre winston@2.0.0 users as quite confusing when using
	    // custom levels.
	    if (!this.levels[info[LEVEL$1]] && this.levels[info[LEVEL$1]] !== 0) {
	      // eslint-disable-next-line no-console
	      console.error('[winston] Unknown logger level: %s', info[LEVEL$1]);
	    }

	    // Remark: not sure if we should simply error here.
	    if (!this._readableState.pipes) {
	      // eslint-disable-next-line no-console
	      console.error(
	        '[winston] Attempt to write logs with no transports %j',
	        info
	      );
	    }

	    // Here we write to the `format` pipe-chain, which on `readable` above will
	    // push the formatted `info` Object onto the buffer for this instance. We trap
	    // (and re-throw) any errors generated by the user-provided format, but also
	    // guarantee that the streams callback is invoked so that we can continue flowing.
	    try {
	      this.push(this.format.transform(info, this.format.options));
	    } catch (ex) {
	      throw ex;
	    } finally {
	      // eslint-disable-next-line callback-return
	      callback();
	    }
	  }

	  /**
	   * Delays the 'finish' event until all transport pipe targets have
	   * also emitted 'finish' or are already finished.
	   * @param {mixed} callback - Continues stream processing.
	   */
	  _final(callback) {
	    const transports = this.transports.slice();
	    forEach(
	      transports,
	      (transport, next) => {
	        if (!transport || transport.finished) return setImmediate(next);
	        transport.once('finish', next);
	        transport.end();
	      },
	      callback
	    );
	  }

	  /**
	   * Adds the transport to this logger instance by piping to it.
	   * @param {mixed} transport - TODO: add param description.
	   * @returns {Logger} - TODO: add return description.
	   */
	  add(transport) {
	    // Support backwards compatibility with all existing `winston < 3.x.x`
	    // transports which meet one of two criteria:
	    // 1. They inherit from winston.Transport in  < 3.x.x which is NOT a stream.
	    // 2. They expose a log method which has a length greater than 2 (i.e. more then
	    //    just `log(info, callback)`.
	    const target =
	      !isStream_1(transport) || transport.log.length > 2
	        ? new legacy$1({ transport })
	        : transport;

	    if (!target._writableState || !target._writableState.objectMode) {
	      throw new Error(
	        'Transports must WritableStreams in objectMode. Set { objectMode: true }.'
	      );
	    }

	    // Listen for the `error` event and the `warn` event on the new Transport.
	    this._onEvent('error', target);
	    this._onEvent('warn', target);
	    this.pipe(target);

	    if (transport.handleExceptions) {
	      this.exceptions.handle();
	    }

	    if (transport.handleRejections) {
	      this.rejections.handle();
	    }

	    return this;
	  }

	  /**
	   * Removes the transport from this logger instance by unpiping from it.
	   * @param {mixed} transport - TODO: add param description.
	   * @returns {Logger} - TODO: add return description.
	   */
	  remove(transport) {
	    if (!transport) return this;
	    let target = transport;
	    if (!isStream_1(transport) || transport.log.length > 2) {
	      target = this.transports.filter(
	        match => match.transport === transport
	      )[0];
	    }

	    if (target) {
	      this.unpipe(target);
	    }
	    return this;
	  }

	  /**
	   * Removes all transports from this logger instance.
	   * @returns {Logger} - TODO: add return description.
	   */
	  clear() {
	    this.unpipe();
	    return this;
	  }

	  /**
	   * Cleans up resources (streams, event listeners) for all transports
	   * associated with this instance (if necessary).
	   * @returns {Logger} - TODO: add return description.
	   */
	  close() {
	    this.clear();
	    this.emit('close');
	    return this;
	  }

	  /**
	   * Sets the `target` levels specified on this instance.
	   * @param {Object} Target levels to use on this instance.
	   */
	  setLevels() {
	    warn.deprecated('setLevels');
	  }

	  /**
	   * Queries the all transports for this instance with the specified `options`.
	   * This will aggregate each transport's results into one object containing
	   * a property per transport.
	   * @param {Object} options - Query options for this instance.
	   * @param {function} callback - Continuation to respond to when complete.
	   */
	  query(options, callback) {
	    if (typeof options === 'function') {
	      callback = options;
	      options = {};
	    }

	    options = options || {};
	    const results = {};
	    const queryObject = Object.assign({}, options.query || {});

	    // Helper function to query a single transport
	    function queryTransport(transport, next) {
	      if (options.query && typeof transport.formatQuery === 'function') {
	        options.query = transport.formatQuery(queryObject);
	      }

	      transport.query(options, (err, res) => {
	        if (err) {
	          return next(err);
	        }

	        if (typeof transport.formatResults === 'function') {
	          res = transport.formatResults(res, options.format);
	        }

	        next(null, res);
	      });
	    }

	    // Helper function to accumulate the results from `queryTransport` into
	    // the `results`.
	    function addResults(transport, next) {
	      queryTransport(transport, (err, result) => {
	        // queryTransport could potentially invoke the callback multiple times
	        // since Transport code can be unpredictable.
	        if (next) {
	          result = err || result;
	          if (result) {
	            results[transport.name] = result;
	          }

	          // eslint-disable-next-line callback-return
	          next();
	        }

	        next = null;
	      });
	    }

	    // Iterate over the transports in parallel setting the appropriate key in
	    // the `results`.
	    forEach(
	      this.transports.filter(transport => !!transport.query),
	      addResults,
	      () => callback(null, results)
	    );
	  }

	  /**
	   * Returns a log stream for all transports. Options object is optional.
	   * @param{Object} options={} - Stream options for this instance.
	   * @returns {Stream} - TODO: add return description.
	   */
	  stream(options = {}) {
	    const out = new Stream$4();
	    const streams = [];

	    out._streams = streams;
	    out.destroy = () => {
	      let i = streams.length;
	      while (i--) {
	        streams[i].destroy();
	      }
	    };

	    // Create a list of all transports for this instance.
	    this.transports
	      .filter(transport => !!transport.stream)
	      .forEach(transport => {
	        const str = transport.stream(options);
	        if (!str) {
	          return;
	        }

	        streams.push(str);

	        str.on('log', log => {
	          log.transport = log.transport || [];
	          log.transport.push(transport.name);
	          out.emit('log', log);
	        });

	        str.on('error', err => {
	          err.transport = err.transport || [];
	          err.transport.push(transport.name);
	          out.emit('error', err);
	        });
	      });

	    return out;
	  }

	  /**
	   * Returns an object corresponding to a specific timing. When done is called
	   * the timer will finish and log the duration. e.g.:
	   * @returns {Profile} - TODO: add return description.
	   * @example
	   *    const timer = winston.startTimer()
	   *    setTimeout(() => {
	   *      timer.done({
	   *        message: 'Logging message'
	   *      });
	   *    }, 1000);
	   */
	  startTimer() {
	    return new profiler(this);
	  }

	  /**
	   * Tracks the time inbetween subsequent calls to this method with the same
	   * `id` parameter. The second call to this method will log the difference in
	   * milliseconds along with the message.
	   * @param {string} id Unique id of the profiler
	   * @returns {Logger} - TODO: add return description.
	   */
	  profile(id, ...args) {
	    const time = Date.now();
	    if (this.profilers[id]) {
	      const timeEnd = this.profilers[id];
	      delete this.profilers[id];

	      // Attempt to be kind to users if they are still using older APIs.
	      if (typeof args[args.length - 2] === 'function') {
	        // eslint-disable-next-line no-console
	        console.warn(
	          'Callback function no longer supported as of winston@3.0.0'
	        );
	        args.pop();
	      }

	      // Set the duration property of the metadata
	      const info = typeof args[args.length - 1] === 'object' ? args.pop() : {};
	      info.level = info.level || 'info';
	      info.durationMs = time - timeEnd;
	      info.message = info.message || id;
	      return this.write(info);
	    }

	    this.profilers[id] = time;
	    return this;
	  }

	  /**
	   * Backwards compatibility to `exceptions.handle` in winston < 3.0.0.
	   * @returns {undefined}
	   * @deprecated
	   */
	  handleExceptions(...args) {
	    // eslint-disable-next-line no-console
	    console.warn(
	      'Deprecated: .handleExceptions() will be removed in winston@4. Use .exceptions.handle()'
	    );
	    this.exceptions.handle(...args);
	  }

	  /**
	   * Backwards compatibility to `exceptions.handle` in winston < 3.0.0.
	   * @returns {undefined}
	   * @deprecated
	   */
	  unhandleExceptions(...args) {
	    // eslint-disable-next-line no-console
	    console.warn(
	      'Deprecated: .unhandleExceptions() will be removed in winston@4. Use .exceptions.unhandle()'
	    );
	    this.exceptions.unhandle(...args);
	  }

	  /**
	   * Throw a more meaningful deprecation notice
	   * @throws {Error} - TODO: add throws description.
	   */
	  cli() {
	    throw new Error(
	      [
	        'Logger.cli() was removed in winston@3.0.0',
	        'Use a custom winston.formats.cli() instead.',
	        'See: https://github.com/winstonjs/winston/tree/master/UPGRADE-3.0.md'
	      ].join('\n')
	    );
	  }

	  /**
	   * Bubbles the `event` that occured on the specified `transport` up
	   * from this instance.
	   * @param {string} event - The event that occured
	   * @param {Object} transport - Transport on which the event occured
	   * @private
	   */
	  _onEvent(event, transport) {
	    function transportEvent(err) {
	      // https://github.com/winstonjs/winston/issues/1364
	      if (event === 'error' && !this.transports.includes(transport)) {
	        this.add(transport);
	      }
	      this.emit(event, err, transport);
	    }

	    if (!transport['__winston' + event]) {
	      transport['__winston' + event] = transportEvent.bind(this);
	      transport.on(event, transport['__winston' + event]);
	    }
	  }

	  _addDefaultMeta(msg) {
	    if (this.defaultMeta) {
	      Object.assign(msg, this.defaultMeta);
	    }
	  }
	}

	function getLevelValue(levels, level) {
	  const value = levels[level];
	  if (!value && value !== 0) {
	    return null;
	  }
	  return value;
	}

	/**
	 * Represents the current readableState pipe targets for this Logger instance.
	 * @type {Array|Object}
	 */
	Object.defineProperty(Logger.prototype, 'transports', {
	  configurable: false,
	  enumerable: true,
	  get() {
	    const { pipes } = this._readableState;
	    return !Array.isArray(pipes) ? [pipes].filter(Boolean) : pipes;
	  }
	});

	var logger$2 = Logger;

	/**
	 * create-logger.js: Logger factory for winston logger instances.
	 *
	 * (C) 2010 Charlie Robbins
	 * MIT LICENCE
	 */

	const { LEVEL } = tripleBeam;


	const debug$2 = node$1('winston:create-logger');

	function isLevelEnabledFunctionName(level) {
	  return 'is' + level.charAt(0).toUpperCase() + level.slice(1) + 'Enabled';
	}

	/**
	 * Create a new instance of a winston Logger. Creates a new
	 * prototype for each instance.
	 * @param {!Object} opts - Options for the created logger.
	 * @returns {Logger} - A newly created logger instance.
	 */
	var createLogger = function (opts = {}) {
	  //
	  // Default levels: npm
	  //
	  opts.levels = opts.levels || config$1.npm.levels;

	  /**
	   * DerivedLogger to attach the logs level methods.
	   * @type {DerivedLogger}
	   * @extends {Logger}
	   */
	  class DerivedLogger extends logger$2 {
	    /**
	     * Create a new class derived logger for which the levels can be attached to
	     * the prototype of. This is a V8 optimization that is well know to increase
	     * performance of prototype functions.
	     * @param {!Object} options - Options for the created logger.
	     */
	    constructor(options) {
	      super(options);
	    }
	  }

	  const logger = new DerivedLogger(opts);

	  //
	  // Create the log level methods for the derived logger.
	  //
	  Object.keys(opts.levels).forEach(function (level) {
	    debug$2('Define prototype method for "%s"', level);
	    if (level === 'log') {
	      // eslint-disable-next-line no-console
	      console.warn('Level "log" not defined: conflicts with the method "log". Use a different level name.');
	      return;
	    }

	    //
	    // Define prototype methods for each log level e.g.:
	    // logger.log('info', msg) implies these methods are defined:
	    // - logger.info(msg)
	    // - logger.isInfoEnabled()
	    //
	    // Remark: to support logger.child this **MUST** be a function
	    // so it'll always be called on the instance instead of a fixed
	    // place in the prototype chain.
	    //
	    DerivedLogger.prototype[level] = function (...args) {
	      // Prefer any instance scope, but default to "root" logger
	      const self = this || logger;

	      // Optimize the hot-path which is the single object.
	      if (args.length === 1) {
	        const [msg] = args;
	        const info = msg && msg.message && msg || { message: msg };
	        info.level = info[LEVEL] = level;
	        self._addDefaultMeta(info);
	        self.write(info);
	        return (this || logger);
	      }

	      // When provided nothing assume the empty string
	      if (args.length === 0) {
	        self.log(level, '');
	        return self;
	      }

	      // Otherwise build argument list which could potentially conform to
	      // either:
	      // . v3 API: log(obj)
	      // 2. v1/v2 API: log(level, msg, ... [string interpolate], [{metadata}], [callback])
	      return self.log(level, ...args);
	    };

	    DerivedLogger.prototype[isLevelEnabledFunctionName(level)] = function () {
	      return (this || logger).isLevelEnabled(level);
	    };
	  });

	  return logger;
	};

	/**
	 * container.js: Inversion of control container for winston logger instances.
	 *
	 * (C) 2010 Charlie Robbins
	 * MIT LICENCE
	 */



	/**
	 * Inversion of control container for winston logger instances.
	 * @type {Container}
	 */
	var container = class Container {
	  /**
	   * Constructor function for the Container object responsible for managing a
	   * set of `winston.Logger` instances based on string ids.
	   * @param {!Object} [options={}] - Default pass-thru options for Loggers.
	   */
	  constructor(options = {}) {
	    this.loggers = new Map();
	    this.options = options;
	  }

	  /**
	   * Retreives a `winston.Logger` instance for the specified `id`. If an
	   * instance does not exist, one is created.
	   * @param {!string} id - The id of the Logger to get.
	   * @param {?Object} [options] - Options for the Logger instance.
	   * @returns {Logger} - A configured Logger instance with a specified id.
	   */
	  add(id, options) {
	    if (!this.loggers.has(id)) {
	      // Remark: Simple shallow clone for configuration options in case we pass
	      // in instantiated protoypal objects
	      options = Object.assign({}, options || this.options);
	      const existing = options.transports || this.options.transports;

	      // Remark: Make sure if we have an array of transports we slice it to
	      // make copies of those references.
	      options.transports = existing ? existing.slice() : [];

	      const logger = createLogger(options);
	      logger.on('close', () => this._delete(id));
	      this.loggers.set(id, logger);
	    }

	    return this.loggers.get(id);
	  }

	  /**
	   * Retreives a `winston.Logger` instance for the specified `id`. If
	   * an instance does not exist, one is created.
	   * @param {!string} id - The id of the Logger to get.
	   * @param {?Object} [options] - Options for the Logger instance.
	   * @returns {Logger} - A configured Logger instance with a specified id.
	   */
	  get(id, options) {
	    return this.add(id, options);
	  }

	  /**
	   * Check if the container has a logger with the id.
	   * @param {?string} id - The id of the Logger instance to find.
	   * @returns {boolean} - Boolean value indicating if this instance has a
	   * logger with the specified `id`.
	   */
	  has(id) {
	    return !!this.loggers.has(id);
	  }

	  /**
	   * Closes a `Logger` instance with the specified `id` if it exists.
	   * If no `id` is supplied then all Loggers are closed.
	   * @param {?string} id - The id of the Logger instance to close.
	   * @returns {undefined}
	   */
	  close(id) {
	    if (id) {
	      return this._removeLogger(id);
	    }

	    this.loggers.forEach((val, key) => this._removeLogger(key));
	  }

	  /**
	   * Remove a logger based on the id.
	   * @param {!string} id - The id of the logger to remove.
	   * @returns {undefined}
	   * @private
	   */
	  _removeLogger(id) {
	    if (!this.loggers.has(id)) {
	      return;
	    }

	    const logger = this.loggers.get(id);
	    logger.close();
	    this._delete(id);
	  }

	  /**
	   * Deletes a `Logger` instance with the specified `id`.
	   * @param {!string} id - The id of the Logger instance to delete from
	   * container.
	   * @returns {undefined}
	   * @private
	   */
	  _delete(id) {
	    this.loggers.delete(id);
	  }
	};

	/**
	 * winston.js: Top-level include defining Winston.
	 *
	 * (C) 2010 Charlie Robbins
	 * MIT LICENCE
	 */

	var winston_1 = createCommonjsModule(function (module, exports) {


	const { warn } = common$1;

	/**
	 * Setup to expose.
	 * @type {Object}
	 */
	const winston = exports;

	/**
	 * Expose version. Use `require` method for `webpack` support.
	 * @type {string}
	 */
	winston.version = require$$1$3.version;
	/**
	 * Include transports defined by default by winston
	 * @type {Array}
	 */
	winston.transports = transports;
	/**
	 * Expose utility methods
	 * @type {Object}
	 */
	winston.config = config$1;
	/**
	 * Hoist format-related functionality from logform.
	 * @type {Object}
	 */
	winston.addColors = logform.levels;
	/**
	 * Hoist format-related functionality from logform.
	 * @type {Object}
	 */
	winston.format = logform.format;
	/**
	 * Expose core Logging-related prototypes.
	 * @type {function}
	 */
	winston.createLogger = createLogger;
	/**
	 * Expose core Logging-related prototypes.
	 * @type {Object}
	 */
	winston.ExceptionHandler = exceptionHandler;
	/**
	 * Expose core Logging-related prototypes.
	 * @type {Object}
	 */
	winston.RejectionHandler = rejectionHandler;
	/**
	 * Expose core Logging-related prototypes.
	 * @type {Container}
	 */
	winston.Container = container;
	/**
	 * Expose core Logging-related prototypes.
	 * @type {Object}
	 */
	winston.Transport = winstonTransport;
	/**
	 * We create and expose a default `Container` to `winston.loggers` so that the
	 * programmer may manage multiple `winston.Logger` instances without any
	 * additional overhead.
	 * @example
	 *   // some-file1.js
	 *   const logger = require('winston').loggers.get('something');
	 *
	 *   // some-file2.js
	 *   const logger = require('winston').loggers.get('something');
	 */
	winston.loggers = new winston.Container();

	/**
	 * We create and expose a 'defaultLogger' so that the programmer may do the
	 * following without the need to create an instance of winston.Logger directly:
	 * @example
	 *   const winston = require('winston');
	 *   winston.log('info', 'some message');
	 *   winston.error('some error');
	 */
	const defaultLogger = winston.createLogger();

	// Pass through the target methods onto `winston.
	Object.keys(winston.config.npm.levels)
	  .concat([
	    'log',
	    'query',
	    'stream',
	    'add',
	    'remove',
	    'clear',
	    'profile',
	    'startTimer',
	    'handleExceptions',
	    'unhandleExceptions',
	    'handleRejections',
	    'unhandleRejections',
	    'configure',
	    'child'
	  ])
	  .forEach(
	    method => (winston[method] = (...args) => defaultLogger[method](...args))
	  );

	/**
	 * Define getter / setter for the default logger level which need to be exposed
	 * by winston.
	 * @type {string}
	 */
	Object.defineProperty(winston, 'level', {
	  get() {
	    return defaultLogger.level;
	  },
	  set(val) {
	    defaultLogger.level = val;
	  }
	});

	/**
	 * Define getter for `exceptions` which replaces `handleExceptions` and
	 * `unhandleExceptions`.
	 * @type {Object}
	 */
	Object.defineProperty(winston, 'exceptions', {
	  get() {
	    return defaultLogger.exceptions;
	  }
	});

	/**
	 * Define getters / setters for appropriate properties of the default logger
	 * which need to be exposed by winston.
	 * @type {Logger}
	 */
	['exitOnError'].forEach(prop => {
	  Object.defineProperty(winston, prop, {
	    get() {
	      return defaultLogger[prop];
	    },
	    set(val) {
	      defaultLogger[prop] = val;
	    }
	  });
	});

	/**
	 * The default transports and exceptionHandlers for the default winston logger.
	 * @type {Object}
	 */
	Object.defineProperty(winston, 'default', {
	  get() {
	    return {
	      exceptionHandlers: defaultLogger.exceptionHandlers,
	      rejectionHandlers: defaultLogger.rejectionHandlers,
	      transports: defaultLogger.transports
	    };
	  }
	});

	// Have friendlier breakage notices for properties that were exposed by default
	// on winston < 3.0.
	warn.deprecated(winston, 'setLevels');
	warn.forFunctions(winston, 'useFormat', ['cli']);
	warn.forProperties(winston, 'useFormat', ['padLevels', 'stripColors']);
	warn.forFunctions(winston, 'deprecated', [
	  'addRewriter',
	  'addFilter',
	  'clone',
	  'extend'
	]);
	warn.forProperties(winston, 'deprecated', ['emitErrs', 'levelLength']);
	// Throw a useful error when users attempt to run `new winston.Logger`.
	warn.moved(winston, 'createLogger', 'Logger');
	});

	// Copyright (C) 2020 Splunk, Inc. All rights reserved.



	var logger$1 = winston_1.createLogger({
	  level: process.env.SFX_CLIENT_LOG_LEVEL || 'info',
	  format: winston_1.format.combine(
	      winston_1.format.splat(),
	      winston_1.format.simple()
	  ),
	  transports: [
	    new winston_1.transports.Console()
	  ]
	});

	var logger_1 = logger$1;

	var hasOwn = Object.prototype.hasOwnProperty;
	var toStr$1 = Object.prototype.toString;
	var defineProperty$1 = Object.defineProperty;
	var gOPD = Object.getOwnPropertyDescriptor;

	var isArray$1 = function isArray(arr) {
		if (typeof Array.isArray === 'function') {
			return Array.isArray(arr);
		}

		return toStr$1.call(arr) === '[object Array]';
	};

	var isPlainObject = function isPlainObject(obj) {
		if (!obj || toStr$1.call(obj) !== '[object Object]') {
			return false;
		}

		var hasOwnConstructor = hasOwn.call(obj, 'constructor');
		var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
		// Not own constructor property must be Object
		if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
			return false;
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.
		var key;
		for (key in obj) { /**/ }

		return typeof key === 'undefined' || hasOwn.call(obj, key);
	};

	// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target
	var setProperty = function setProperty(target, options) {
		if (defineProperty$1 && options.name === '__proto__') {
			defineProperty$1(target, options.name, {
				enumerable: true,
				configurable: true,
				value: options.newValue,
				writable: true
			});
		} else {
			target[options.name] = options.newValue;
		}
	};

	// Return undefined instead of __proto__ if '__proto__' is not an own property
	var getProperty$1 = function getProperty(obj, name) {
		if (name === '__proto__') {
			if (!hasOwn.call(obj, name)) {
				return void 0;
			} else if (gOPD) {
				// In early versions of node, obj['__proto__'] is buggy when obj has
				// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.
				return gOPD(obj, name).value;
			}
		}

		return obj[name];
	};

	var extend$1 = function extend() {
		var options, name, src, copy, copyIsArray, clone;
		var target = arguments[0];
		var i = 1;
		var length = arguments.length;
		var deep = false;

		// Handle a deep copy situation
		if (typeof target === 'boolean') {
			deep = target;
			target = arguments[1] || {};
			// skip the boolean and the target
			i = 2;
		}
		if (target == null || (typeof target !== 'object' && typeof target !== 'function')) {
			target = {};
		}

		for (; i < length; ++i) {
			options = arguments[i];
			// Only deal with non-null/undefined values
			if (options != null) {
				// Extend the base object
				for (name in options) {
					src = getProperty$1(target, name);
					copy = getProperty$1(options, name);

					// Prevent never-ending loop
					if (target !== copy) {
						// Recurse if we're merging plain objects or arrays
						if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray$1(copy)))) {
							if (copyIsArray) {
								copyIsArray = false;
								clone = src && isArray$1(src) ? src : [];
							} else {
								clone = src && isPlainObject(src) ? src : {};
							}

							// Never move original objects, clone them
							setProperty(target, { name: name, newValue: extend(deep, clone, copy) });

						// Don't bring in undefined values
						} else if (typeof copy !== 'undefined') {
							setProperty(target, { name: name, newValue: copy });
						}
					}
				}
			}
		}

		// Return the modified object
		return target;
	};

	var require$$0$7 = [
		"ac",
		"com.ac",
		"edu.ac",
		"gov.ac",
		"net.ac",
		"mil.ac",
		"org.ac",
		"ad",
		"nom.ad",
		"ae",
		"co.ae",
		"net.ae",
		"org.ae",
		"sch.ae",
		"ac.ae",
		"gov.ae",
		"mil.ae",
		"aero",
		"accident-investigation.aero",
		"accident-prevention.aero",
		"aerobatic.aero",
		"aeroclub.aero",
		"aerodrome.aero",
		"agents.aero",
		"aircraft.aero",
		"airline.aero",
		"airport.aero",
		"air-surveillance.aero",
		"airtraffic.aero",
		"air-traffic-control.aero",
		"ambulance.aero",
		"amusement.aero",
		"association.aero",
		"author.aero",
		"ballooning.aero",
		"broker.aero",
		"caa.aero",
		"cargo.aero",
		"catering.aero",
		"certification.aero",
		"championship.aero",
		"charter.aero",
		"civilaviation.aero",
		"club.aero",
		"conference.aero",
		"consultant.aero",
		"consulting.aero",
		"control.aero",
		"council.aero",
		"crew.aero",
		"design.aero",
		"dgca.aero",
		"educator.aero",
		"emergency.aero",
		"engine.aero",
		"engineer.aero",
		"entertainment.aero",
		"equipment.aero",
		"exchange.aero",
		"express.aero",
		"federation.aero",
		"flight.aero",
		"freight.aero",
		"fuel.aero",
		"gliding.aero",
		"government.aero",
		"groundhandling.aero",
		"group.aero",
		"hanggliding.aero",
		"homebuilt.aero",
		"insurance.aero",
		"journal.aero",
		"journalist.aero",
		"leasing.aero",
		"logistics.aero",
		"magazine.aero",
		"maintenance.aero",
		"media.aero",
		"microlight.aero",
		"modelling.aero",
		"navigation.aero",
		"parachuting.aero",
		"paragliding.aero",
		"passenger-association.aero",
		"pilot.aero",
		"press.aero",
		"production.aero",
		"recreation.aero",
		"repbody.aero",
		"res.aero",
		"research.aero",
		"rotorcraft.aero",
		"safety.aero",
		"scientist.aero",
		"services.aero",
		"show.aero",
		"skydiving.aero",
		"software.aero",
		"student.aero",
		"trader.aero",
		"trading.aero",
		"trainer.aero",
		"union.aero",
		"workinggroup.aero",
		"works.aero",
		"af",
		"gov.af",
		"com.af",
		"org.af",
		"net.af",
		"edu.af",
		"ag",
		"com.ag",
		"org.ag",
		"net.ag",
		"co.ag",
		"nom.ag",
		"ai",
		"off.ai",
		"com.ai",
		"net.ai",
		"org.ai",
		"al",
		"com.al",
		"edu.al",
		"gov.al",
		"mil.al",
		"net.al",
		"org.al",
		"am",
		"co.am",
		"com.am",
		"commune.am",
		"net.am",
		"org.am",
		"ao",
		"ed.ao",
		"gv.ao",
		"og.ao",
		"co.ao",
		"pb.ao",
		"it.ao",
		"aq",
		"ar",
		"com.ar",
		"edu.ar",
		"gob.ar",
		"gov.ar",
		"int.ar",
		"mil.ar",
		"musica.ar",
		"net.ar",
		"org.ar",
		"tur.ar",
		"arpa",
		"e164.arpa",
		"in-addr.arpa",
		"ip6.arpa",
		"iris.arpa",
		"uri.arpa",
		"urn.arpa",
		"as",
		"gov.as",
		"asia",
		"at",
		"ac.at",
		"co.at",
		"gv.at",
		"or.at",
		"au",
		"com.au",
		"net.au",
		"org.au",
		"edu.au",
		"gov.au",
		"asn.au",
		"id.au",
		"info.au",
		"conf.au",
		"oz.au",
		"act.au",
		"nsw.au",
		"nt.au",
		"qld.au",
		"sa.au",
		"tas.au",
		"vic.au",
		"wa.au",
		"act.edu.au",
		"catholic.edu.au",
		"nsw.edu.au",
		"nt.edu.au",
		"qld.edu.au",
		"sa.edu.au",
		"tas.edu.au",
		"vic.edu.au",
		"wa.edu.au",
		"qld.gov.au",
		"sa.gov.au",
		"tas.gov.au",
		"vic.gov.au",
		"wa.gov.au",
		"education.tas.edu.au",
		"schools.nsw.edu.au",
		"aw",
		"com.aw",
		"ax",
		"az",
		"com.az",
		"net.az",
		"int.az",
		"gov.az",
		"org.az",
		"edu.az",
		"info.az",
		"pp.az",
		"mil.az",
		"name.az",
		"pro.az",
		"biz.az",
		"ba",
		"com.ba",
		"edu.ba",
		"gov.ba",
		"mil.ba",
		"net.ba",
		"org.ba",
		"bb",
		"biz.bb",
		"co.bb",
		"com.bb",
		"edu.bb",
		"gov.bb",
		"info.bb",
		"net.bb",
		"org.bb",
		"store.bb",
		"tv.bb",
		"*.bd",
		"be",
		"ac.be",
		"bf",
		"gov.bf",
		"bg",
		"a.bg",
		"b.bg",
		"c.bg",
		"d.bg",
		"e.bg",
		"f.bg",
		"g.bg",
		"h.bg",
		"i.bg",
		"j.bg",
		"k.bg",
		"l.bg",
		"m.bg",
		"n.bg",
		"o.bg",
		"p.bg",
		"q.bg",
		"r.bg",
		"s.bg",
		"t.bg",
		"u.bg",
		"v.bg",
		"w.bg",
		"x.bg",
		"y.bg",
		"z.bg",
		"0.bg",
		"1.bg",
		"2.bg",
		"3.bg",
		"4.bg",
		"5.bg",
		"6.bg",
		"7.bg",
		"8.bg",
		"9.bg",
		"bh",
		"com.bh",
		"edu.bh",
		"net.bh",
		"org.bh",
		"gov.bh",
		"bi",
		"co.bi",
		"com.bi",
		"edu.bi",
		"or.bi",
		"org.bi",
		"biz",
		"bj",
		"asso.bj",
		"barreau.bj",
		"gouv.bj",
		"bm",
		"com.bm",
		"edu.bm",
		"gov.bm",
		"net.bm",
		"org.bm",
		"bn",
		"com.bn",
		"edu.bn",
		"gov.bn",
		"net.bn",
		"org.bn",
		"bo",
		"com.bo",
		"edu.bo",
		"gob.bo",
		"int.bo",
		"org.bo",
		"net.bo",
		"mil.bo",
		"tv.bo",
		"web.bo",
		"academia.bo",
		"agro.bo",
		"arte.bo",
		"blog.bo",
		"bolivia.bo",
		"ciencia.bo",
		"cooperativa.bo",
		"democracia.bo",
		"deporte.bo",
		"ecologia.bo",
		"economia.bo",
		"empresa.bo",
		"indigena.bo",
		"industria.bo",
		"info.bo",
		"medicina.bo",
		"movimiento.bo",
		"musica.bo",
		"natural.bo",
		"nombre.bo",
		"noticias.bo",
		"patria.bo",
		"politica.bo",
		"profesional.bo",
		"plurinacional.bo",
		"pueblo.bo",
		"revista.bo",
		"salud.bo",
		"tecnologia.bo",
		"tksat.bo",
		"transporte.bo",
		"wiki.bo",
		"br",
		"9guacu.br",
		"abc.br",
		"adm.br",
		"adv.br",
		"agr.br",
		"aju.br",
		"am.br",
		"anani.br",
		"aparecida.br",
		"arq.br",
		"art.br",
		"ato.br",
		"b.br",
		"barueri.br",
		"belem.br",
		"bhz.br",
		"bio.br",
		"blog.br",
		"bmd.br",
		"boavista.br",
		"bsb.br",
		"campinagrande.br",
		"campinas.br",
		"caxias.br",
		"cim.br",
		"cng.br",
		"cnt.br",
		"com.br",
		"contagem.br",
		"coop.br",
		"cri.br",
		"cuiaba.br",
		"curitiba.br",
		"def.br",
		"ecn.br",
		"eco.br",
		"edu.br",
		"emp.br",
		"eng.br",
		"esp.br",
		"etc.br",
		"eti.br",
		"far.br",
		"feira.br",
		"flog.br",
		"floripa.br",
		"fm.br",
		"fnd.br",
		"fortal.br",
		"fot.br",
		"foz.br",
		"fst.br",
		"g12.br",
		"ggf.br",
		"goiania.br",
		"gov.br",
		"ac.gov.br",
		"al.gov.br",
		"am.gov.br",
		"ap.gov.br",
		"ba.gov.br",
		"ce.gov.br",
		"df.gov.br",
		"es.gov.br",
		"go.gov.br",
		"ma.gov.br",
		"mg.gov.br",
		"ms.gov.br",
		"mt.gov.br",
		"pa.gov.br",
		"pb.gov.br",
		"pe.gov.br",
		"pi.gov.br",
		"pr.gov.br",
		"rj.gov.br",
		"rn.gov.br",
		"ro.gov.br",
		"rr.gov.br",
		"rs.gov.br",
		"sc.gov.br",
		"se.gov.br",
		"sp.gov.br",
		"to.gov.br",
		"gru.br",
		"imb.br",
		"ind.br",
		"inf.br",
		"jab.br",
		"jampa.br",
		"jdf.br",
		"joinville.br",
		"jor.br",
		"jus.br",
		"leg.br",
		"lel.br",
		"londrina.br",
		"macapa.br",
		"maceio.br",
		"manaus.br",
		"maringa.br",
		"mat.br",
		"med.br",
		"mil.br",
		"morena.br",
		"mp.br",
		"mus.br",
		"natal.br",
		"net.br",
		"niteroi.br",
		"*.nom.br",
		"not.br",
		"ntr.br",
		"odo.br",
		"ong.br",
		"org.br",
		"osasco.br",
		"palmas.br",
		"poa.br",
		"ppg.br",
		"pro.br",
		"psc.br",
		"psi.br",
		"pvh.br",
		"qsl.br",
		"radio.br",
		"rec.br",
		"recife.br",
		"ribeirao.br",
		"rio.br",
		"riobranco.br",
		"riopreto.br",
		"salvador.br",
		"sampa.br",
		"santamaria.br",
		"santoandre.br",
		"saobernardo.br",
		"saogonca.br",
		"sjc.br",
		"slg.br",
		"slz.br",
		"sorocaba.br",
		"srv.br",
		"taxi.br",
		"tc.br",
		"teo.br",
		"the.br",
		"tmp.br",
		"trd.br",
		"tur.br",
		"tv.br",
		"udi.br",
		"vet.br",
		"vix.br",
		"vlog.br",
		"wiki.br",
		"zlg.br",
		"bs",
		"com.bs",
		"net.bs",
		"org.bs",
		"edu.bs",
		"gov.bs",
		"bt",
		"com.bt",
		"edu.bt",
		"gov.bt",
		"net.bt",
		"org.bt",
		"bv",
		"bw",
		"co.bw",
		"org.bw",
		"by",
		"gov.by",
		"mil.by",
		"com.by",
		"of.by",
		"bz",
		"com.bz",
		"net.bz",
		"org.bz",
		"edu.bz",
		"gov.bz",
		"ca",
		"ab.ca",
		"bc.ca",
		"mb.ca",
		"nb.ca",
		"nf.ca",
		"nl.ca",
		"ns.ca",
		"nt.ca",
		"nu.ca",
		"on.ca",
		"pe.ca",
		"qc.ca",
		"sk.ca",
		"yk.ca",
		"gc.ca",
		"cat",
		"cc",
		"cd",
		"gov.cd",
		"cf",
		"cg",
		"ch",
		"ci",
		"org.ci",
		"or.ci",
		"com.ci",
		"co.ci",
		"edu.ci",
		"ed.ci",
		"ac.ci",
		"net.ci",
		"go.ci",
		"asso.ci",
		"aéroport.ci",
		"int.ci",
		"presse.ci",
		"md.ci",
		"gouv.ci",
		"*.ck",
		"!www.ck",
		"cl",
		"aprendemas.cl",
		"co.cl",
		"gob.cl",
		"gov.cl",
		"mil.cl",
		"cm",
		"co.cm",
		"com.cm",
		"gov.cm",
		"net.cm",
		"cn",
		"ac.cn",
		"com.cn",
		"edu.cn",
		"gov.cn",
		"net.cn",
		"org.cn",
		"mil.cn",
		"公司.cn",
		"网络.cn",
		"網絡.cn",
		"ah.cn",
		"bj.cn",
		"cq.cn",
		"fj.cn",
		"gd.cn",
		"gs.cn",
		"gz.cn",
		"gx.cn",
		"ha.cn",
		"hb.cn",
		"he.cn",
		"hi.cn",
		"hl.cn",
		"hn.cn",
		"jl.cn",
		"js.cn",
		"jx.cn",
		"ln.cn",
		"nm.cn",
		"nx.cn",
		"qh.cn",
		"sc.cn",
		"sd.cn",
		"sh.cn",
		"sn.cn",
		"sx.cn",
		"tj.cn",
		"xj.cn",
		"xz.cn",
		"yn.cn",
		"zj.cn",
		"hk.cn",
		"mo.cn",
		"tw.cn",
		"co",
		"arts.co",
		"com.co",
		"edu.co",
		"firm.co",
		"gov.co",
		"info.co",
		"int.co",
		"mil.co",
		"net.co",
		"nom.co",
		"org.co",
		"rec.co",
		"web.co",
		"com",
		"coop",
		"cr",
		"ac.cr",
		"co.cr",
		"ed.cr",
		"fi.cr",
		"go.cr",
		"or.cr",
		"sa.cr",
		"cu",
		"com.cu",
		"edu.cu",
		"org.cu",
		"net.cu",
		"gov.cu",
		"inf.cu",
		"cv",
		"cw",
		"com.cw",
		"edu.cw",
		"net.cw",
		"org.cw",
		"cx",
		"gov.cx",
		"cy",
		"ac.cy",
		"biz.cy",
		"com.cy",
		"ekloges.cy",
		"gov.cy",
		"ltd.cy",
		"name.cy",
		"net.cy",
		"org.cy",
		"parliament.cy",
		"press.cy",
		"pro.cy",
		"tm.cy",
		"cz",
		"de",
		"dj",
		"dk",
		"dm",
		"com.dm",
		"net.dm",
		"org.dm",
		"edu.dm",
		"gov.dm",
		"do",
		"art.do",
		"com.do",
		"edu.do",
		"gob.do",
		"gov.do",
		"mil.do",
		"net.do",
		"org.do",
		"sld.do",
		"web.do",
		"dz",
		"com.dz",
		"org.dz",
		"net.dz",
		"gov.dz",
		"edu.dz",
		"asso.dz",
		"pol.dz",
		"art.dz",
		"ec",
		"com.ec",
		"info.ec",
		"net.ec",
		"fin.ec",
		"k12.ec",
		"med.ec",
		"pro.ec",
		"org.ec",
		"edu.ec",
		"gov.ec",
		"gob.ec",
		"mil.ec",
		"edu",
		"ee",
		"edu.ee",
		"gov.ee",
		"riik.ee",
		"lib.ee",
		"med.ee",
		"com.ee",
		"pri.ee",
		"aip.ee",
		"org.ee",
		"fie.ee",
		"eg",
		"com.eg",
		"edu.eg",
		"eun.eg",
		"gov.eg",
		"mil.eg",
		"name.eg",
		"net.eg",
		"org.eg",
		"sci.eg",
		"*.er",
		"es",
		"com.es",
		"nom.es",
		"org.es",
		"gob.es",
		"edu.es",
		"et",
		"com.et",
		"gov.et",
		"org.et",
		"edu.et",
		"biz.et",
		"name.et",
		"info.et",
		"net.et",
		"eu",
		"fi",
		"aland.fi",
		"fj",
		"ac.fj",
		"biz.fj",
		"com.fj",
		"gov.fj",
		"info.fj",
		"mil.fj",
		"name.fj",
		"net.fj",
		"org.fj",
		"pro.fj",
		"*.fk",
		"fm",
		"fo",
		"fr",
		"asso.fr",
		"com.fr",
		"gouv.fr",
		"nom.fr",
		"prd.fr",
		"tm.fr",
		"aeroport.fr",
		"avocat.fr",
		"avoues.fr",
		"cci.fr",
		"chambagri.fr",
		"chirurgiens-dentistes.fr",
		"experts-comptables.fr",
		"geometre-expert.fr",
		"greta.fr",
		"huissier-justice.fr",
		"medecin.fr",
		"notaires.fr",
		"pharmacien.fr",
		"port.fr",
		"veterinaire.fr",
		"ga",
		"gb",
		"gd",
		"ge",
		"com.ge",
		"edu.ge",
		"gov.ge",
		"org.ge",
		"mil.ge",
		"net.ge",
		"pvt.ge",
		"gf",
		"gg",
		"co.gg",
		"net.gg",
		"org.gg",
		"gh",
		"com.gh",
		"edu.gh",
		"gov.gh",
		"org.gh",
		"mil.gh",
		"gi",
		"com.gi",
		"ltd.gi",
		"gov.gi",
		"mod.gi",
		"edu.gi",
		"org.gi",
		"gl",
		"co.gl",
		"com.gl",
		"edu.gl",
		"net.gl",
		"org.gl",
		"gm",
		"gn",
		"ac.gn",
		"com.gn",
		"edu.gn",
		"gov.gn",
		"org.gn",
		"net.gn",
		"gov",
		"gp",
		"com.gp",
		"net.gp",
		"mobi.gp",
		"edu.gp",
		"org.gp",
		"asso.gp",
		"gq",
		"gr",
		"com.gr",
		"edu.gr",
		"net.gr",
		"org.gr",
		"gov.gr",
		"gs",
		"gt",
		"com.gt",
		"edu.gt",
		"gob.gt",
		"ind.gt",
		"mil.gt",
		"net.gt",
		"org.gt",
		"gu",
		"com.gu",
		"edu.gu",
		"gov.gu",
		"guam.gu",
		"info.gu",
		"net.gu",
		"org.gu",
		"web.gu",
		"gw",
		"gy",
		"co.gy",
		"com.gy",
		"edu.gy",
		"gov.gy",
		"net.gy",
		"org.gy",
		"hk",
		"com.hk",
		"edu.hk",
		"gov.hk",
		"idv.hk",
		"net.hk",
		"org.hk",
		"公司.hk",
		"教育.hk",
		"敎育.hk",
		"政府.hk",
		"個人.hk",
		"个人.hk",
		"箇人.hk",
		"網络.hk",
		"网络.hk",
		"组織.hk",
		"網絡.hk",
		"网絡.hk",
		"组织.hk",
		"組織.hk",
		"組织.hk",
		"hm",
		"hn",
		"com.hn",
		"edu.hn",
		"org.hn",
		"net.hn",
		"mil.hn",
		"gob.hn",
		"hr",
		"iz.hr",
		"from.hr",
		"name.hr",
		"com.hr",
		"ht",
		"com.ht",
		"shop.ht",
		"firm.ht",
		"info.ht",
		"adult.ht",
		"net.ht",
		"pro.ht",
		"org.ht",
		"med.ht",
		"art.ht",
		"coop.ht",
		"pol.ht",
		"asso.ht",
		"edu.ht",
		"rel.ht",
		"gouv.ht",
		"perso.ht",
		"hu",
		"co.hu",
		"info.hu",
		"org.hu",
		"priv.hu",
		"sport.hu",
		"tm.hu",
		"2000.hu",
		"agrar.hu",
		"bolt.hu",
		"casino.hu",
		"city.hu",
		"erotica.hu",
		"erotika.hu",
		"film.hu",
		"forum.hu",
		"games.hu",
		"hotel.hu",
		"ingatlan.hu",
		"jogasz.hu",
		"konyvelo.hu",
		"lakas.hu",
		"media.hu",
		"news.hu",
		"reklam.hu",
		"sex.hu",
		"shop.hu",
		"suli.hu",
		"szex.hu",
		"tozsde.hu",
		"utazas.hu",
		"video.hu",
		"id",
		"ac.id",
		"biz.id",
		"co.id",
		"desa.id",
		"go.id",
		"mil.id",
		"my.id",
		"net.id",
		"or.id",
		"ponpes.id",
		"sch.id",
		"web.id",
		"ie",
		"gov.ie",
		"il",
		"ac.il",
		"co.il",
		"gov.il",
		"idf.il",
		"k12.il",
		"muni.il",
		"net.il",
		"org.il",
		"im",
		"ac.im",
		"co.im",
		"com.im",
		"ltd.co.im",
		"net.im",
		"org.im",
		"plc.co.im",
		"tt.im",
		"tv.im",
		"in",
		"co.in",
		"firm.in",
		"net.in",
		"org.in",
		"gen.in",
		"ind.in",
		"nic.in",
		"ac.in",
		"edu.in",
		"res.in",
		"gov.in",
		"mil.in",
		"info",
		"int",
		"eu.int",
		"io",
		"com.io",
		"iq",
		"gov.iq",
		"edu.iq",
		"mil.iq",
		"com.iq",
		"org.iq",
		"net.iq",
		"ir",
		"ac.ir",
		"co.ir",
		"gov.ir",
		"id.ir",
		"net.ir",
		"org.ir",
		"sch.ir",
		"ایران.ir",
		"ايران.ir",
		"is",
		"net.is",
		"com.is",
		"edu.is",
		"gov.is",
		"org.is",
		"int.is",
		"it",
		"gov.it",
		"edu.it",
		"abr.it",
		"abruzzo.it",
		"aosta-valley.it",
		"aostavalley.it",
		"bas.it",
		"basilicata.it",
		"cal.it",
		"calabria.it",
		"cam.it",
		"campania.it",
		"emilia-romagna.it",
		"emiliaromagna.it",
		"emr.it",
		"friuli-v-giulia.it",
		"friuli-ve-giulia.it",
		"friuli-vegiulia.it",
		"friuli-venezia-giulia.it",
		"friuli-veneziagiulia.it",
		"friuli-vgiulia.it",
		"friuliv-giulia.it",
		"friulive-giulia.it",
		"friulivegiulia.it",
		"friulivenezia-giulia.it",
		"friuliveneziagiulia.it",
		"friulivgiulia.it",
		"fvg.it",
		"laz.it",
		"lazio.it",
		"lig.it",
		"liguria.it",
		"lom.it",
		"lombardia.it",
		"lombardy.it",
		"lucania.it",
		"mar.it",
		"marche.it",
		"mol.it",
		"molise.it",
		"piedmont.it",
		"piemonte.it",
		"pmn.it",
		"pug.it",
		"puglia.it",
		"sar.it",
		"sardegna.it",
		"sardinia.it",
		"sic.it",
		"sicilia.it",
		"sicily.it",
		"taa.it",
		"tos.it",
		"toscana.it",
		"trentin-sud-tirol.it",
		"trentin-süd-tirol.it",
		"trentin-sudtirol.it",
		"trentin-südtirol.it",
		"trentin-sued-tirol.it",
		"trentin-suedtirol.it",
		"trentino-a-adige.it",
		"trentino-aadige.it",
		"trentino-alto-adige.it",
		"trentino-altoadige.it",
		"trentino-s-tirol.it",
		"trentino-stirol.it",
		"trentino-sud-tirol.it",
		"trentino-süd-tirol.it",
		"trentino-sudtirol.it",
		"trentino-südtirol.it",
		"trentino-sued-tirol.it",
		"trentino-suedtirol.it",
		"trentino.it",
		"trentinoa-adige.it",
		"trentinoaadige.it",
		"trentinoalto-adige.it",
		"trentinoaltoadige.it",
		"trentinos-tirol.it",
		"trentinostirol.it",
		"trentinosud-tirol.it",
		"trentinosüd-tirol.it",
		"trentinosudtirol.it",
		"trentinosüdtirol.it",
		"trentinosued-tirol.it",
		"trentinosuedtirol.it",
		"trentinsud-tirol.it",
		"trentinsüd-tirol.it",
		"trentinsudtirol.it",
		"trentinsüdtirol.it",
		"trentinsued-tirol.it",
		"trentinsuedtirol.it",
		"tuscany.it",
		"umb.it",
		"umbria.it",
		"val-d-aosta.it",
		"val-daosta.it",
		"vald-aosta.it",
		"valdaosta.it",
		"valle-aosta.it",
		"valle-d-aosta.it",
		"valle-daosta.it",
		"valleaosta.it",
		"valled-aosta.it",
		"valledaosta.it",
		"vallee-aoste.it",
		"vallée-aoste.it",
		"vallee-d-aoste.it",
		"vallée-d-aoste.it",
		"valleeaoste.it",
		"valléeaoste.it",
		"valleedaoste.it",
		"valléedaoste.it",
		"vao.it",
		"vda.it",
		"ven.it",
		"veneto.it",
		"ag.it",
		"agrigento.it",
		"al.it",
		"alessandria.it",
		"alto-adige.it",
		"altoadige.it",
		"an.it",
		"ancona.it",
		"andria-barletta-trani.it",
		"andria-trani-barletta.it",
		"andriabarlettatrani.it",
		"andriatranibarletta.it",
		"ao.it",
		"aosta.it",
		"aoste.it",
		"ap.it",
		"aq.it",
		"aquila.it",
		"ar.it",
		"arezzo.it",
		"ascoli-piceno.it",
		"ascolipiceno.it",
		"asti.it",
		"at.it",
		"av.it",
		"avellino.it",
		"ba.it",
		"balsan-sudtirol.it",
		"balsan-südtirol.it",
		"balsan-suedtirol.it",
		"balsan.it",
		"bari.it",
		"barletta-trani-andria.it",
		"barlettatraniandria.it",
		"belluno.it",
		"benevento.it",
		"bergamo.it",
		"bg.it",
		"bi.it",
		"biella.it",
		"bl.it",
		"bn.it",
		"bo.it",
		"bologna.it",
		"bolzano-altoadige.it",
		"bolzano.it",
		"bozen-sudtirol.it",
		"bozen-südtirol.it",
		"bozen-suedtirol.it",
		"bozen.it",
		"br.it",
		"brescia.it",
		"brindisi.it",
		"bs.it",
		"bt.it",
		"bulsan-sudtirol.it",
		"bulsan-südtirol.it",
		"bulsan-suedtirol.it",
		"bulsan.it",
		"bz.it",
		"ca.it",
		"cagliari.it",
		"caltanissetta.it",
		"campidano-medio.it",
		"campidanomedio.it",
		"campobasso.it",
		"carbonia-iglesias.it",
		"carboniaiglesias.it",
		"carrara-massa.it",
		"carraramassa.it",
		"caserta.it",
		"catania.it",
		"catanzaro.it",
		"cb.it",
		"ce.it",
		"cesena-forli.it",
		"cesena-forlì.it",
		"cesenaforli.it",
		"cesenaforlì.it",
		"ch.it",
		"chieti.it",
		"ci.it",
		"cl.it",
		"cn.it",
		"co.it",
		"como.it",
		"cosenza.it",
		"cr.it",
		"cremona.it",
		"crotone.it",
		"cs.it",
		"ct.it",
		"cuneo.it",
		"cz.it",
		"dell-ogliastra.it",
		"dellogliastra.it",
		"en.it",
		"enna.it",
		"fc.it",
		"fe.it",
		"fermo.it",
		"ferrara.it",
		"fg.it",
		"fi.it",
		"firenze.it",
		"florence.it",
		"fm.it",
		"foggia.it",
		"forli-cesena.it",
		"forlì-cesena.it",
		"forlicesena.it",
		"forlìcesena.it",
		"fr.it",
		"frosinone.it",
		"ge.it",
		"genoa.it",
		"genova.it",
		"go.it",
		"gorizia.it",
		"gr.it",
		"grosseto.it",
		"iglesias-carbonia.it",
		"iglesiascarbonia.it",
		"im.it",
		"imperia.it",
		"is.it",
		"isernia.it",
		"kr.it",
		"la-spezia.it",
		"laquila.it",
		"laspezia.it",
		"latina.it",
		"lc.it",
		"le.it",
		"lecce.it",
		"lecco.it",
		"li.it",
		"livorno.it",
		"lo.it",
		"lodi.it",
		"lt.it",
		"lu.it",
		"lucca.it",
		"macerata.it",
		"mantova.it",
		"massa-carrara.it",
		"massacarrara.it",
		"matera.it",
		"mb.it",
		"mc.it",
		"me.it",
		"medio-campidano.it",
		"mediocampidano.it",
		"messina.it",
		"mi.it",
		"milan.it",
		"milano.it",
		"mn.it",
		"mo.it",
		"modena.it",
		"monza-brianza.it",
		"monza-e-della-brianza.it",
		"monza.it",
		"monzabrianza.it",
		"monzaebrianza.it",
		"monzaedellabrianza.it",
		"ms.it",
		"mt.it",
		"na.it",
		"naples.it",
		"napoli.it",
		"no.it",
		"novara.it",
		"nu.it",
		"nuoro.it",
		"og.it",
		"ogliastra.it",
		"olbia-tempio.it",
		"olbiatempio.it",
		"or.it",
		"oristano.it",
		"ot.it",
		"pa.it",
		"padova.it",
		"padua.it",
		"palermo.it",
		"parma.it",
		"pavia.it",
		"pc.it",
		"pd.it",
		"pe.it",
		"perugia.it",
		"pesaro-urbino.it",
		"pesarourbino.it",
		"pescara.it",
		"pg.it",
		"pi.it",
		"piacenza.it",
		"pisa.it",
		"pistoia.it",
		"pn.it",
		"po.it",
		"pordenone.it",
		"potenza.it",
		"pr.it",
		"prato.it",
		"pt.it",
		"pu.it",
		"pv.it",
		"pz.it",
		"ra.it",
		"ragusa.it",
		"ravenna.it",
		"rc.it",
		"re.it",
		"reggio-calabria.it",
		"reggio-emilia.it",
		"reggiocalabria.it",
		"reggioemilia.it",
		"rg.it",
		"ri.it",
		"rieti.it",
		"rimini.it",
		"rm.it",
		"rn.it",
		"ro.it",
		"roma.it",
		"rome.it",
		"rovigo.it",
		"sa.it",
		"salerno.it",
		"sassari.it",
		"savona.it",
		"si.it",
		"siena.it",
		"siracusa.it",
		"so.it",
		"sondrio.it",
		"sp.it",
		"sr.it",
		"ss.it",
		"suedtirol.it",
		"südtirol.it",
		"sv.it",
		"ta.it",
		"taranto.it",
		"te.it",
		"tempio-olbia.it",
		"tempioolbia.it",
		"teramo.it",
		"terni.it",
		"tn.it",
		"to.it",
		"torino.it",
		"tp.it",
		"tr.it",
		"trani-andria-barletta.it",
		"trani-barletta-andria.it",
		"traniandriabarletta.it",
		"tranibarlettaandria.it",
		"trapani.it",
		"trento.it",
		"treviso.it",
		"trieste.it",
		"ts.it",
		"turin.it",
		"tv.it",
		"ud.it",
		"udine.it",
		"urbino-pesaro.it",
		"urbinopesaro.it",
		"va.it",
		"varese.it",
		"vb.it",
		"vc.it",
		"ve.it",
		"venezia.it",
		"venice.it",
		"verbania.it",
		"vercelli.it",
		"verona.it",
		"vi.it",
		"vibo-valentia.it",
		"vibovalentia.it",
		"vicenza.it",
		"viterbo.it",
		"vr.it",
		"vs.it",
		"vt.it",
		"vv.it",
		"je",
		"co.je",
		"net.je",
		"org.je",
		"*.jm",
		"jo",
		"com.jo",
		"org.jo",
		"net.jo",
		"edu.jo",
		"sch.jo",
		"gov.jo",
		"mil.jo",
		"name.jo",
		"jobs",
		"jp",
		"ac.jp",
		"ad.jp",
		"co.jp",
		"ed.jp",
		"go.jp",
		"gr.jp",
		"lg.jp",
		"ne.jp",
		"or.jp",
		"aichi.jp",
		"akita.jp",
		"aomori.jp",
		"chiba.jp",
		"ehime.jp",
		"fukui.jp",
		"fukuoka.jp",
		"fukushima.jp",
		"gifu.jp",
		"gunma.jp",
		"hiroshima.jp",
		"hokkaido.jp",
		"hyogo.jp",
		"ibaraki.jp",
		"ishikawa.jp",
		"iwate.jp",
		"kagawa.jp",
		"kagoshima.jp",
		"kanagawa.jp",
		"kochi.jp",
		"kumamoto.jp",
		"kyoto.jp",
		"mie.jp",
		"miyagi.jp",
		"miyazaki.jp",
		"nagano.jp",
		"nagasaki.jp",
		"nara.jp",
		"niigata.jp",
		"oita.jp",
		"okayama.jp",
		"okinawa.jp",
		"osaka.jp",
		"saga.jp",
		"saitama.jp",
		"shiga.jp",
		"shimane.jp",
		"shizuoka.jp",
		"tochigi.jp",
		"tokushima.jp",
		"tokyo.jp",
		"tottori.jp",
		"toyama.jp",
		"wakayama.jp",
		"yamagata.jp",
		"yamaguchi.jp",
		"yamanashi.jp",
		"栃木.jp",
		"愛知.jp",
		"愛媛.jp",
		"兵庫.jp",
		"熊本.jp",
		"茨城.jp",
		"北海道.jp",
		"千葉.jp",
		"和歌山.jp",
		"長崎.jp",
		"長野.jp",
		"新潟.jp",
		"青森.jp",
		"静岡.jp",
		"東京.jp",
		"石川.jp",
		"埼玉.jp",
		"三重.jp",
		"京都.jp",
		"佐賀.jp",
		"大分.jp",
		"大阪.jp",
		"奈良.jp",
		"宮城.jp",
		"宮崎.jp",
		"富山.jp",
		"山口.jp",
		"山形.jp",
		"山梨.jp",
		"岩手.jp",
		"岐阜.jp",
		"岡山.jp",
		"島根.jp",
		"広島.jp",
		"徳島.jp",
		"沖縄.jp",
		"滋賀.jp",
		"神奈川.jp",
		"福井.jp",
		"福岡.jp",
		"福島.jp",
		"秋田.jp",
		"群馬.jp",
		"香川.jp",
		"高知.jp",
		"鳥取.jp",
		"鹿児島.jp",
		"*.kawasaki.jp",
		"*.kitakyushu.jp",
		"*.kobe.jp",
		"*.nagoya.jp",
		"*.sapporo.jp",
		"*.sendai.jp",
		"*.yokohama.jp",
		"!city.kawasaki.jp",
		"!city.kitakyushu.jp",
		"!city.kobe.jp",
		"!city.nagoya.jp",
		"!city.sapporo.jp",
		"!city.sendai.jp",
		"!city.yokohama.jp",
		"aisai.aichi.jp",
		"ama.aichi.jp",
		"anjo.aichi.jp",
		"asuke.aichi.jp",
		"chiryu.aichi.jp",
		"chita.aichi.jp",
		"fuso.aichi.jp",
		"gamagori.aichi.jp",
		"handa.aichi.jp",
		"hazu.aichi.jp",
		"hekinan.aichi.jp",
		"higashiura.aichi.jp",
		"ichinomiya.aichi.jp",
		"inazawa.aichi.jp",
		"inuyama.aichi.jp",
		"isshiki.aichi.jp",
		"iwakura.aichi.jp",
		"kanie.aichi.jp",
		"kariya.aichi.jp",
		"kasugai.aichi.jp",
		"kira.aichi.jp",
		"kiyosu.aichi.jp",
		"komaki.aichi.jp",
		"konan.aichi.jp",
		"kota.aichi.jp",
		"mihama.aichi.jp",
		"miyoshi.aichi.jp",
		"nishio.aichi.jp",
		"nisshin.aichi.jp",
		"obu.aichi.jp",
		"oguchi.aichi.jp",
		"oharu.aichi.jp",
		"okazaki.aichi.jp",
		"owariasahi.aichi.jp",
		"seto.aichi.jp",
		"shikatsu.aichi.jp",
		"shinshiro.aichi.jp",
		"shitara.aichi.jp",
		"tahara.aichi.jp",
		"takahama.aichi.jp",
		"tobishima.aichi.jp",
		"toei.aichi.jp",
		"togo.aichi.jp",
		"tokai.aichi.jp",
		"tokoname.aichi.jp",
		"toyoake.aichi.jp",
		"toyohashi.aichi.jp",
		"toyokawa.aichi.jp",
		"toyone.aichi.jp",
		"toyota.aichi.jp",
		"tsushima.aichi.jp",
		"yatomi.aichi.jp",
		"akita.akita.jp",
		"daisen.akita.jp",
		"fujisato.akita.jp",
		"gojome.akita.jp",
		"hachirogata.akita.jp",
		"happou.akita.jp",
		"higashinaruse.akita.jp",
		"honjo.akita.jp",
		"honjyo.akita.jp",
		"ikawa.akita.jp",
		"kamikoani.akita.jp",
		"kamioka.akita.jp",
		"katagami.akita.jp",
		"kazuno.akita.jp",
		"kitaakita.akita.jp",
		"kosaka.akita.jp",
		"kyowa.akita.jp",
		"misato.akita.jp",
		"mitane.akita.jp",
		"moriyoshi.akita.jp",
		"nikaho.akita.jp",
		"noshiro.akita.jp",
		"odate.akita.jp",
		"oga.akita.jp",
		"ogata.akita.jp",
		"semboku.akita.jp",
		"yokote.akita.jp",
		"yurihonjo.akita.jp",
		"aomori.aomori.jp",
		"gonohe.aomori.jp",
		"hachinohe.aomori.jp",
		"hashikami.aomori.jp",
		"hiranai.aomori.jp",
		"hirosaki.aomori.jp",
		"itayanagi.aomori.jp",
		"kuroishi.aomori.jp",
		"misawa.aomori.jp",
		"mutsu.aomori.jp",
		"nakadomari.aomori.jp",
		"noheji.aomori.jp",
		"oirase.aomori.jp",
		"owani.aomori.jp",
		"rokunohe.aomori.jp",
		"sannohe.aomori.jp",
		"shichinohe.aomori.jp",
		"shingo.aomori.jp",
		"takko.aomori.jp",
		"towada.aomori.jp",
		"tsugaru.aomori.jp",
		"tsuruta.aomori.jp",
		"abiko.chiba.jp",
		"asahi.chiba.jp",
		"chonan.chiba.jp",
		"chosei.chiba.jp",
		"choshi.chiba.jp",
		"chuo.chiba.jp",
		"funabashi.chiba.jp",
		"futtsu.chiba.jp",
		"hanamigawa.chiba.jp",
		"ichihara.chiba.jp",
		"ichikawa.chiba.jp",
		"ichinomiya.chiba.jp",
		"inzai.chiba.jp",
		"isumi.chiba.jp",
		"kamagaya.chiba.jp",
		"kamogawa.chiba.jp",
		"kashiwa.chiba.jp",
		"katori.chiba.jp",
		"katsuura.chiba.jp",
		"kimitsu.chiba.jp",
		"kisarazu.chiba.jp",
		"kozaki.chiba.jp",
		"kujukuri.chiba.jp",
		"kyonan.chiba.jp",
		"matsudo.chiba.jp",
		"midori.chiba.jp",
		"mihama.chiba.jp",
		"minamiboso.chiba.jp",
		"mobara.chiba.jp",
		"mutsuzawa.chiba.jp",
		"nagara.chiba.jp",
		"nagareyama.chiba.jp",
		"narashino.chiba.jp",
		"narita.chiba.jp",
		"noda.chiba.jp",
		"oamishirasato.chiba.jp",
		"omigawa.chiba.jp",
		"onjuku.chiba.jp",
		"otaki.chiba.jp",
		"sakae.chiba.jp",
		"sakura.chiba.jp",
		"shimofusa.chiba.jp",
		"shirako.chiba.jp",
		"shiroi.chiba.jp",
		"shisui.chiba.jp",
		"sodegaura.chiba.jp",
		"sosa.chiba.jp",
		"tako.chiba.jp",
		"tateyama.chiba.jp",
		"togane.chiba.jp",
		"tohnosho.chiba.jp",
		"tomisato.chiba.jp",
		"urayasu.chiba.jp",
		"yachimata.chiba.jp",
		"yachiyo.chiba.jp",
		"yokaichiba.chiba.jp",
		"yokoshibahikari.chiba.jp",
		"yotsukaido.chiba.jp",
		"ainan.ehime.jp",
		"honai.ehime.jp",
		"ikata.ehime.jp",
		"imabari.ehime.jp",
		"iyo.ehime.jp",
		"kamijima.ehime.jp",
		"kihoku.ehime.jp",
		"kumakogen.ehime.jp",
		"masaki.ehime.jp",
		"matsuno.ehime.jp",
		"matsuyama.ehime.jp",
		"namikata.ehime.jp",
		"niihama.ehime.jp",
		"ozu.ehime.jp",
		"saijo.ehime.jp",
		"seiyo.ehime.jp",
		"shikokuchuo.ehime.jp",
		"tobe.ehime.jp",
		"toon.ehime.jp",
		"uchiko.ehime.jp",
		"uwajima.ehime.jp",
		"yawatahama.ehime.jp",
		"echizen.fukui.jp",
		"eiheiji.fukui.jp",
		"fukui.fukui.jp",
		"ikeda.fukui.jp",
		"katsuyama.fukui.jp",
		"mihama.fukui.jp",
		"minamiechizen.fukui.jp",
		"obama.fukui.jp",
		"ohi.fukui.jp",
		"ono.fukui.jp",
		"sabae.fukui.jp",
		"sakai.fukui.jp",
		"takahama.fukui.jp",
		"tsuruga.fukui.jp",
		"wakasa.fukui.jp",
		"ashiya.fukuoka.jp",
		"buzen.fukuoka.jp",
		"chikugo.fukuoka.jp",
		"chikuho.fukuoka.jp",
		"chikujo.fukuoka.jp",
		"chikushino.fukuoka.jp",
		"chikuzen.fukuoka.jp",
		"chuo.fukuoka.jp",
		"dazaifu.fukuoka.jp",
		"fukuchi.fukuoka.jp",
		"hakata.fukuoka.jp",
		"higashi.fukuoka.jp",
		"hirokawa.fukuoka.jp",
		"hisayama.fukuoka.jp",
		"iizuka.fukuoka.jp",
		"inatsuki.fukuoka.jp",
		"kaho.fukuoka.jp",
		"kasuga.fukuoka.jp",
		"kasuya.fukuoka.jp",
		"kawara.fukuoka.jp",
		"keisen.fukuoka.jp",
		"koga.fukuoka.jp",
		"kurate.fukuoka.jp",
		"kurogi.fukuoka.jp",
		"kurume.fukuoka.jp",
		"minami.fukuoka.jp",
		"miyako.fukuoka.jp",
		"miyama.fukuoka.jp",
		"miyawaka.fukuoka.jp",
		"mizumaki.fukuoka.jp",
		"munakata.fukuoka.jp",
		"nakagawa.fukuoka.jp",
		"nakama.fukuoka.jp",
		"nishi.fukuoka.jp",
		"nogata.fukuoka.jp",
		"ogori.fukuoka.jp",
		"okagaki.fukuoka.jp",
		"okawa.fukuoka.jp",
		"oki.fukuoka.jp",
		"omuta.fukuoka.jp",
		"onga.fukuoka.jp",
		"onojo.fukuoka.jp",
		"oto.fukuoka.jp",
		"saigawa.fukuoka.jp",
		"sasaguri.fukuoka.jp",
		"shingu.fukuoka.jp",
		"shinyoshitomi.fukuoka.jp",
		"shonai.fukuoka.jp",
		"soeda.fukuoka.jp",
		"sue.fukuoka.jp",
		"tachiarai.fukuoka.jp",
		"tagawa.fukuoka.jp",
		"takata.fukuoka.jp",
		"toho.fukuoka.jp",
		"toyotsu.fukuoka.jp",
		"tsuiki.fukuoka.jp",
		"ukiha.fukuoka.jp",
		"umi.fukuoka.jp",
		"usui.fukuoka.jp",
		"yamada.fukuoka.jp",
		"yame.fukuoka.jp",
		"yanagawa.fukuoka.jp",
		"yukuhashi.fukuoka.jp",
		"aizubange.fukushima.jp",
		"aizumisato.fukushima.jp",
		"aizuwakamatsu.fukushima.jp",
		"asakawa.fukushima.jp",
		"bandai.fukushima.jp",
		"date.fukushima.jp",
		"fukushima.fukushima.jp",
		"furudono.fukushima.jp",
		"futaba.fukushima.jp",
		"hanawa.fukushima.jp",
		"higashi.fukushima.jp",
		"hirata.fukushima.jp",
		"hirono.fukushima.jp",
		"iitate.fukushima.jp",
		"inawashiro.fukushima.jp",
		"ishikawa.fukushima.jp",
		"iwaki.fukushima.jp",
		"izumizaki.fukushima.jp",
		"kagamiishi.fukushima.jp",
		"kaneyama.fukushima.jp",
		"kawamata.fukushima.jp",
		"kitakata.fukushima.jp",
		"kitashiobara.fukushima.jp",
		"koori.fukushima.jp",
		"koriyama.fukushima.jp",
		"kunimi.fukushima.jp",
		"miharu.fukushima.jp",
		"mishima.fukushima.jp",
		"namie.fukushima.jp",
		"nango.fukushima.jp",
		"nishiaizu.fukushima.jp",
		"nishigo.fukushima.jp",
		"okuma.fukushima.jp",
		"omotego.fukushima.jp",
		"ono.fukushima.jp",
		"otama.fukushima.jp",
		"samegawa.fukushima.jp",
		"shimogo.fukushima.jp",
		"shirakawa.fukushima.jp",
		"showa.fukushima.jp",
		"soma.fukushima.jp",
		"sukagawa.fukushima.jp",
		"taishin.fukushima.jp",
		"tamakawa.fukushima.jp",
		"tanagura.fukushima.jp",
		"tenei.fukushima.jp",
		"yabuki.fukushima.jp",
		"yamato.fukushima.jp",
		"yamatsuri.fukushima.jp",
		"yanaizu.fukushima.jp",
		"yugawa.fukushima.jp",
		"anpachi.gifu.jp",
		"ena.gifu.jp",
		"gifu.gifu.jp",
		"ginan.gifu.jp",
		"godo.gifu.jp",
		"gujo.gifu.jp",
		"hashima.gifu.jp",
		"hichiso.gifu.jp",
		"hida.gifu.jp",
		"higashishirakawa.gifu.jp",
		"ibigawa.gifu.jp",
		"ikeda.gifu.jp",
		"kakamigahara.gifu.jp",
		"kani.gifu.jp",
		"kasahara.gifu.jp",
		"kasamatsu.gifu.jp",
		"kawaue.gifu.jp",
		"kitagata.gifu.jp",
		"mino.gifu.jp",
		"minokamo.gifu.jp",
		"mitake.gifu.jp",
		"mizunami.gifu.jp",
		"motosu.gifu.jp",
		"nakatsugawa.gifu.jp",
		"ogaki.gifu.jp",
		"sakahogi.gifu.jp",
		"seki.gifu.jp",
		"sekigahara.gifu.jp",
		"shirakawa.gifu.jp",
		"tajimi.gifu.jp",
		"takayama.gifu.jp",
		"tarui.gifu.jp",
		"toki.gifu.jp",
		"tomika.gifu.jp",
		"wanouchi.gifu.jp",
		"yamagata.gifu.jp",
		"yaotsu.gifu.jp",
		"yoro.gifu.jp",
		"annaka.gunma.jp",
		"chiyoda.gunma.jp",
		"fujioka.gunma.jp",
		"higashiagatsuma.gunma.jp",
		"isesaki.gunma.jp",
		"itakura.gunma.jp",
		"kanna.gunma.jp",
		"kanra.gunma.jp",
		"katashina.gunma.jp",
		"kawaba.gunma.jp",
		"kiryu.gunma.jp",
		"kusatsu.gunma.jp",
		"maebashi.gunma.jp",
		"meiwa.gunma.jp",
		"midori.gunma.jp",
		"minakami.gunma.jp",
		"naganohara.gunma.jp",
		"nakanojo.gunma.jp",
		"nanmoku.gunma.jp",
		"numata.gunma.jp",
		"oizumi.gunma.jp",
		"ora.gunma.jp",
		"ota.gunma.jp",
		"shibukawa.gunma.jp",
		"shimonita.gunma.jp",
		"shinto.gunma.jp",
		"showa.gunma.jp",
		"takasaki.gunma.jp",
		"takayama.gunma.jp",
		"tamamura.gunma.jp",
		"tatebayashi.gunma.jp",
		"tomioka.gunma.jp",
		"tsukiyono.gunma.jp",
		"tsumagoi.gunma.jp",
		"ueno.gunma.jp",
		"yoshioka.gunma.jp",
		"asaminami.hiroshima.jp",
		"daiwa.hiroshima.jp",
		"etajima.hiroshima.jp",
		"fuchu.hiroshima.jp",
		"fukuyama.hiroshima.jp",
		"hatsukaichi.hiroshima.jp",
		"higashihiroshima.hiroshima.jp",
		"hongo.hiroshima.jp",
		"jinsekikogen.hiroshima.jp",
		"kaita.hiroshima.jp",
		"kui.hiroshima.jp",
		"kumano.hiroshima.jp",
		"kure.hiroshima.jp",
		"mihara.hiroshima.jp",
		"miyoshi.hiroshima.jp",
		"naka.hiroshima.jp",
		"onomichi.hiroshima.jp",
		"osakikamijima.hiroshima.jp",
		"otake.hiroshima.jp",
		"saka.hiroshima.jp",
		"sera.hiroshima.jp",
		"seranishi.hiroshima.jp",
		"shinichi.hiroshima.jp",
		"shobara.hiroshima.jp",
		"takehara.hiroshima.jp",
		"abashiri.hokkaido.jp",
		"abira.hokkaido.jp",
		"aibetsu.hokkaido.jp",
		"akabira.hokkaido.jp",
		"akkeshi.hokkaido.jp",
		"asahikawa.hokkaido.jp",
		"ashibetsu.hokkaido.jp",
		"ashoro.hokkaido.jp",
		"assabu.hokkaido.jp",
		"atsuma.hokkaido.jp",
		"bibai.hokkaido.jp",
		"biei.hokkaido.jp",
		"bifuka.hokkaido.jp",
		"bihoro.hokkaido.jp",
		"biratori.hokkaido.jp",
		"chippubetsu.hokkaido.jp",
		"chitose.hokkaido.jp",
		"date.hokkaido.jp",
		"ebetsu.hokkaido.jp",
		"embetsu.hokkaido.jp",
		"eniwa.hokkaido.jp",
		"erimo.hokkaido.jp",
		"esan.hokkaido.jp",
		"esashi.hokkaido.jp",
		"fukagawa.hokkaido.jp",
		"fukushima.hokkaido.jp",
		"furano.hokkaido.jp",
		"furubira.hokkaido.jp",
		"haboro.hokkaido.jp",
		"hakodate.hokkaido.jp",
		"hamatonbetsu.hokkaido.jp",
		"hidaka.hokkaido.jp",
		"higashikagura.hokkaido.jp",
		"higashikawa.hokkaido.jp",
		"hiroo.hokkaido.jp",
		"hokuryu.hokkaido.jp",
		"hokuto.hokkaido.jp",
		"honbetsu.hokkaido.jp",
		"horokanai.hokkaido.jp",
		"horonobe.hokkaido.jp",
		"ikeda.hokkaido.jp",
		"imakane.hokkaido.jp",
		"ishikari.hokkaido.jp",
		"iwamizawa.hokkaido.jp",
		"iwanai.hokkaido.jp",
		"kamifurano.hokkaido.jp",
		"kamikawa.hokkaido.jp",
		"kamishihoro.hokkaido.jp",
		"kamisunagawa.hokkaido.jp",
		"kamoenai.hokkaido.jp",
		"kayabe.hokkaido.jp",
		"kembuchi.hokkaido.jp",
		"kikonai.hokkaido.jp",
		"kimobetsu.hokkaido.jp",
		"kitahiroshima.hokkaido.jp",
		"kitami.hokkaido.jp",
		"kiyosato.hokkaido.jp",
		"koshimizu.hokkaido.jp",
		"kunneppu.hokkaido.jp",
		"kuriyama.hokkaido.jp",
		"kuromatsunai.hokkaido.jp",
		"kushiro.hokkaido.jp",
		"kutchan.hokkaido.jp",
		"kyowa.hokkaido.jp",
		"mashike.hokkaido.jp",
		"matsumae.hokkaido.jp",
		"mikasa.hokkaido.jp",
		"minamifurano.hokkaido.jp",
		"mombetsu.hokkaido.jp",
		"moseushi.hokkaido.jp",
		"mukawa.hokkaido.jp",
		"muroran.hokkaido.jp",
		"naie.hokkaido.jp",
		"nakagawa.hokkaido.jp",
		"nakasatsunai.hokkaido.jp",
		"nakatombetsu.hokkaido.jp",
		"nanae.hokkaido.jp",
		"nanporo.hokkaido.jp",
		"nayoro.hokkaido.jp",
		"nemuro.hokkaido.jp",
		"niikappu.hokkaido.jp",
		"niki.hokkaido.jp",
		"nishiokoppe.hokkaido.jp",
		"noboribetsu.hokkaido.jp",
		"numata.hokkaido.jp",
		"obihiro.hokkaido.jp",
		"obira.hokkaido.jp",
		"oketo.hokkaido.jp",
		"okoppe.hokkaido.jp",
		"otaru.hokkaido.jp",
		"otobe.hokkaido.jp",
		"otofuke.hokkaido.jp",
		"otoineppu.hokkaido.jp",
		"oumu.hokkaido.jp",
		"ozora.hokkaido.jp",
		"pippu.hokkaido.jp",
		"rankoshi.hokkaido.jp",
		"rebun.hokkaido.jp",
		"rikubetsu.hokkaido.jp",
		"rishiri.hokkaido.jp",
		"rishirifuji.hokkaido.jp",
		"saroma.hokkaido.jp",
		"sarufutsu.hokkaido.jp",
		"shakotan.hokkaido.jp",
		"shari.hokkaido.jp",
		"shibecha.hokkaido.jp",
		"shibetsu.hokkaido.jp",
		"shikabe.hokkaido.jp",
		"shikaoi.hokkaido.jp",
		"shimamaki.hokkaido.jp",
		"shimizu.hokkaido.jp",
		"shimokawa.hokkaido.jp",
		"shinshinotsu.hokkaido.jp",
		"shintoku.hokkaido.jp",
		"shiranuka.hokkaido.jp",
		"shiraoi.hokkaido.jp",
		"shiriuchi.hokkaido.jp",
		"sobetsu.hokkaido.jp",
		"sunagawa.hokkaido.jp",
		"taiki.hokkaido.jp",
		"takasu.hokkaido.jp",
		"takikawa.hokkaido.jp",
		"takinoue.hokkaido.jp",
		"teshikaga.hokkaido.jp",
		"tobetsu.hokkaido.jp",
		"tohma.hokkaido.jp",
		"tomakomai.hokkaido.jp",
		"tomari.hokkaido.jp",
		"toya.hokkaido.jp",
		"toyako.hokkaido.jp",
		"toyotomi.hokkaido.jp",
		"toyoura.hokkaido.jp",
		"tsubetsu.hokkaido.jp",
		"tsukigata.hokkaido.jp",
		"urakawa.hokkaido.jp",
		"urausu.hokkaido.jp",
		"uryu.hokkaido.jp",
		"utashinai.hokkaido.jp",
		"wakkanai.hokkaido.jp",
		"wassamu.hokkaido.jp",
		"yakumo.hokkaido.jp",
		"yoichi.hokkaido.jp",
		"aioi.hyogo.jp",
		"akashi.hyogo.jp",
		"ako.hyogo.jp",
		"amagasaki.hyogo.jp",
		"aogaki.hyogo.jp",
		"asago.hyogo.jp",
		"ashiya.hyogo.jp",
		"awaji.hyogo.jp",
		"fukusaki.hyogo.jp",
		"goshiki.hyogo.jp",
		"harima.hyogo.jp",
		"himeji.hyogo.jp",
		"ichikawa.hyogo.jp",
		"inagawa.hyogo.jp",
		"itami.hyogo.jp",
		"kakogawa.hyogo.jp",
		"kamigori.hyogo.jp",
		"kamikawa.hyogo.jp",
		"kasai.hyogo.jp",
		"kasuga.hyogo.jp",
		"kawanishi.hyogo.jp",
		"miki.hyogo.jp",
		"minamiawaji.hyogo.jp",
		"nishinomiya.hyogo.jp",
		"nishiwaki.hyogo.jp",
		"ono.hyogo.jp",
		"sanda.hyogo.jp",
		"sannan.hyogo.jp",
		"sasayama.hyogo.jp",
		"sayo.hyogo.jp",
		"shingu.hyogo.jp",
		"shinonsen.hyogo.jp",
		"shiso.hyogo.jp",
		"sumoto.hyogo.jp",
		"taishi.hyogo.jp",
		"taka.hyogo.jp",
		"takarazuka.hyogo.jp",
		"takasago.hyogo.jp",
		"takino.hyogo.jp",
		"tamba.hyogo.jp",
		"tatsuno.hyogo.jp",
		"toyooka.hyogo.jp",
		"yabu.hyogo.jp",
		"yashiro.hyogo.jp",
		"yoka.hyogo.jp",
		"yokawa.hyogo.jp",
		"ami.ibaraki.jp",
		"asahi.ibaraki.jp",
		"bando.ibaraki.jp",
		"chikusei.ibaraki.jp",
		"daigo.ibaraki.jp",
		"fujishiro.ibaraki.jp",
		"hitachi.ibaraki.jp",
		"hitachinaka.ibaraki.jp",
		"hitachiomiya.ibaraki.jp",
		"hitachiota.ibaraki.jp",
		"ibaraki.ibaraki.jp",
		"ina.ibaraki.jp",
		"inashiki.ibaraki.jp",
		"itako.ibaraki.jp",
		"iwama.ibaraki.jp",
		"joso.ibaraki.jp",
		"kamisu.ibaraki.jp",
		"kasama.ibaraki.jp",
		"kashima.ibaraki.jp",
		"kasumigaura.ibaraki.jp",
		"koga.ibaraki.jp",
		"miho.ibaraki.jp",
		"mito.ibaraki.jp",
		"moriya.ibaraki.jp",
		"naka.ibaraki.jp",
		"namegata.ibaraki.jp",
		"oarai.ibaraki.jp",
		"ogawa.ibaraki.jp",
		"omitama.ibaraki.jp",
		"ryugasaki.ibaraki.jp",
		"sakai.ibaraki.jp",
		"sakuragawa.ibaraki.jp",
		"shimodate.ibaraki.jp",
		"shimotsuma.ibaraki.jp",
		"shirosato.ibaraki.jp",
		"sowa.ibaraki.jp",
		"suifu.ibaraki.jp",
		"takahagi.ibaraki.jp",
		"tamatsukuri.ibaraki.jp",
		"tokai.ibaraki.jp",
		"tomobe.ibaraki.jp",
		"tone.ibaraki.jp",
		"toride.ibaraki.jp",
		"tsuchiura.ibaraki.jp",
		"tsukuba.ibaraki.jp",
		"uchihara.ibaraki.jp",
		"ushiku.ibaraki.jp",
		"yachiyo.ibaraki.jp",
		"yamagata.ibaraki.jp",
		"yawara.ibaraki.jp",
		"yuki.ibaraki.jp",
		"anamizu.ishikawa.jp",
		"hakui.ishikawa.jp",
		"hakusan.ishikawa.jp",
		"kaga.ishikawa.jp",
		"kahoku.ishikawa.jp",
		"kanazawa.ishikawa.jp",
		"kawakita.ishikawa.jp",
		"komatsu.ishikawa.jp",
		"nakanoto.ishikawa.jp",
		"nanao.ishikawa.jp",
		"nomi.ishikawa.jp",
		"nonoichi.ishikawa.jp",
		"noto.ishikawa.jp",
		"shika.ishikawa.jp",
		"suzu.ishikawa.jp",
		"tsubata.ishikawa.jp",
		"tsurugi.ishikawa.jp",
		"uchinada.ishikawa.jp",
		"wajima.ishikawa.jp",
		"fudai.iwate.jp",
		"fujisawa.iwate.jp",
		"hanamaki.iwate.jp",
		"hiraizumi.iwate.jp",
		"hirono.iwate.jp",
		"ichinohe.iwate.jp",
		"ichinoseki.iwate.jp",
		"iwaizumi.iwate.jp",
		"iwate.iwate.jp",
		"joboji.iwate.jp",
		"kamaishi.iwate.jp",
		"kanegasaki.iwate.jp",
		"karumai.iwate.jp",
		"kawai.iwate.jp",
		"kitakami.iwate.jp",
		"kuji.iwate.jp",
		"kunohe.iwate.jp",
		"kuzumaki.iwate.jp",
		"miyako.iwate.jp",
		"mizusawa.iwate.jp",
		"morioka.iwate.jp",
		"ninohe.iwate.jp",
		"noda.iwate.jp",
		"ofunato.iwate.jp",
		"oshu.iwate.jp",
		"otsuchi.iwate.jp",
		"rikuzentakata.iwate.jp",
		"shiwa.iwate.jp",
		"shizukuishi.iwate.jp",
		"sumita.iwate.jp",
		"tanohata.iwate.jp",
		"tono.iwate.jp",
		"yahaba.iwate.jp",
		"yamada.iwate.jp",
		"ayagawa.kagawa.jp",
		"higashikagawa.kagawa.jp",
		"kanonji.kagawa.jp",
		"kotohira.kagawa.jp",
		"manno.kagawa.jp",
		"marugame.kagawa.jp",
		"mitoyo.kagawa.jp",
		"naoshima.kagawa.jp",
		"sanuki.kagawa.jp",
		"tadotsu.kagawa.jp",
		"takamatsu.kagawa.jp",
		"tonosho.kagawa.jp",
		"uchinomi.kagawa.jp",
		"utazu.kagawa.jp",
		"zentsuji.kagawa.jp",
		"akune.kagoshima.jp",
		"amami.kagoshima.jp",
		"hioki.kagoshima.jp",
		"isa.kagoshima.jp",
		"isen.kagoshima.jp",
		"izumi.kagoshima.jp",
		"kagoshima.kagoshima.jp",
		"kanoya.kagoshima.jp",
		"kawanabe.kagoshima.jp",
		"kinko.kagoshima.jp",
		"kouyama.kagoshima.jp",
		"makurazaki.kagoshima.jp",
		"matsumoto.kagoshima.jp",
		"minamitane.kagoshima.jp",
		"nakatane.kagoshima.jp",
		"nishinoomote.kagoshima.jp",
		"satsumasendai.kagoshima.jp",
		"soo.kagoshima.jp",
		"tarumizu.kagoshima.jp",
		"yusui.kagoshima.jp",
		"aikawa.kanagawa.jp",
		"atsugi.kanagawa.jp",
		"ayase.kanagawa.jp",
		"chigasaki.kanagawa.jp",
		"ebina.kanagawa.jp",
		"fujisawa.kanagawa.jp",
		"hadano.kanagawa.jp",
		"hakone.kanagawa.jp",
		"hiratsuka.kanagawa.jp",
		"isehara.kanagawa.jp",
		"kaisei.kanagawa.jp",
		"kamakura.kanagawa.jp",
		"kiyokawa.kanagawa.jp",
		"matsuda.kanagawa.jp",
		"minamiashigara.kanagawa.jp",
		"miura.kanagawa.jp",
		"nakai.kanagawa.jp",
		"ninomiya.kanagawa.jp",
		"odawara.kanagawa.jp",
		"oi.kanagawa.jp",
		"oiso.kanagawa.jp",
		"sagamihara.kanagawa.jp",
		"samukawa.kanagawa.jp",
		"tsukui.kanagawa.jp",
		"yamakita.kanagawa.jp",
		"yamato.kanagawa.jp",
		"yokosuka.kanagawa.jp",
		"yugawara.kanagawa.jp",
		"zama.kanagawa.jp",
		"zushi.kanagawa.jp",
		"aki.kochi.jp",
		"geisei.kochi.jp",
		"hidaka.kochi.jp",
		"higashitsuno.kochi.jp",
		"ino.kochi.jp",
		"kagami.kochi.jp",
		"kami.kochi.jp",
		"kitagawa.kochi.jp",
		"kochi.kochi.jp",
		"mihara.kochi.jp",
		"motoyama.kochi.jp",
		"muroto.kochi.jp",
		"nahari.kochi.jp",
		"nakamura.kochi.jp",
		"nankoku.kochi.jp",
		"nishitosa.kochi.jp",
		"niyodogawa.kochi.jp",
		"ochi.kochi.jp",
		"okawa.kochi.jp",
		"otoyo.kochi.jp",
		"otsuki.kochi.jp",
		"sakawa.kochi.jp",
		"sukumo.kochi.jp",
		"susaki.kochi.jp",
		"tosa.kochi.jp",
		"tosashimizu.kochi.jp",
		"toyo.kochi.jp",
		"tsuno.kochi.jp",
		"umaji.kochi.jp",
		"yasuda.kochi.jp",
		"yusuhara.kochi.jp",
		"amakusa.kumamoto.jp",
		"arao.kumamoto.jp",
		"aso.kumamoto.jp",
		"choyo.kumamoto.jp",
		"gyokuto.kumamoto.jp",
		"kamiamakusa.kumamoto.jp",
		"kikuchi.kumamoto.jp",
		"kumamoto.kumamoto.jp",
		"mashiki.kumamoto.jp",
		"mifune.kumamoto.jp",
		"minamata.kumamoto.jp",
		"minamioguni.kumamoto.jp",
		"nagasu.kumamoto.jp",
		"nishihara.kumamoto.jp",
		"oguni.kumamoto.jp",
		"ozu.kumamoto.jp",
		"sumoto.kumamoto.jp",
		"takamori.kumamoto.jp",
		"uki.kumamoto.jp",
		"uto.kumamoto.jp",
		"yamaga.kumamoto.jp",
		"yamato.kumamoto.jp",
		"yatsushiro.kumamoto.jp",
		"ayabe.kyoto.jp",
		"fukuchiyama.kyoto.jp",
		"higashiyama.kyoto.jp",
		"ide.kyoto.jp",
		"ine.kyoto.jp",
		"joyo.kyoto.jp",
		"kameoka.kyoto.jp",
		"kamo.kyoto.jp",
		"kita.kyoto.jp",
		"kizu.kyoto.jp",
		"kumiyama.kyoto.jp",
		"kyotamba.kyoto.jp",
		"kyotanabe.kyoto.jp",
		"kyotango.kyoto.jp",
		"maizuru.kyoto.jp",
		"minami.kyoto.jp",
		"minamiyamashiro.kyoto.jp",
		"miyazu.kyoto.jp",
		"muko.kyoto.jp",
		"nagaokakyo.kyoto.jp",
		"nakagyo.kyoto.jp",
		"nantan.kyoto.jp",
		"oyamazaki.kyoto.jp",
		"sakyo.kyoto.jp",
		"seika.kyoto.jp",
		"tanabe.kyoto.jp",
		"uji.kyoto.jp",
		"ujitawara.kyoto.jp",
		"wazuka.kyoto.jp",
		"yamashina.kyoto.jp",
		"yawata.kyoto.jp",
		"asahi.mie.jp",
		"inabe.mie.jp",
		"ise.mie.jp",
		"kameyama.mie.jp",
		"kawagoe.mie.jp",
		"kiho.mie.jp",
		"kisosaki.mie.jp",
		"kiwa.mie.jp",
		"komono.mie.jp",
		"kumano.mie.jp",
		"kuwana.mie.jp",
		"matsusaka.mie.jp",
		"meiwa.mie.jp",
		"mihama.mie.jp",
		"minamiise.mie.jp",
		"misugi.mie.jp",
		"miyama.mie.jp",
		"nabari.mie.jp",
		"shima.mie.jp",
		"suzuka.mie.jp",
		"tado.mie.jp",
		"taiki.mie.jp",
		"taki.mie.jp",
		"tamaki.mie.jp",
		"toba.mie.jp",
		"tsu.mie.jp",
		"udono.mie.jp",
		"ureshino.mie.jp",
		"watarai.mie.jp",
		"yokkaichi.mie.jp",
		"furukawa.miyagi.jp",
		"higashimatsushima.miyagi.jp",
		"ishinomaki.miyagi.jp",
		"iwanuma.miyagi.jp",
		"kakuda.miyagi.jp",
		"kami.miyagi.jp",
		"kawasaki.miyagi.jp",
		"marumori.miyagi.jp",
		"matsushima.miyagi.jp",
		"minamisanriku.miyagi.jp",
		"misato.miyagi.jp",
		"murata.miyagi.jp",
		"natori.miyagi.jp",
		"ogawara.miyagi.jp",
		"ohira.miyagi.jp",
		"onagawa.miyagi.jp",
		"osaki.miyagi.jp",
		"rifu.miyagi.jp",
		"semine.miyagi.jp",
		"shibata.miyagi.jp",
		"shichikashuku.miyagi.jp",
		"shikama.miyagi.jp",
		"shiogama.miyagi.jp",
		"shiroishi.miyagi.jp",
		"tagajo.miyagi.jp",
		"taiwa.miyagi.jp",
		"tome.miyagi.jp",
		"tomiya.miyagi.jp",
		"wakuya.miyagi.jp",
		"watari.miyagi.jp",
		"yamamoto.miyagi.jp",
		"zao.miyagi.jp",
		"aya.miyazaki.jp",
		"ebino.miyazaki.jp",
		"gokase.miyazaki.jp",
		"hyuga.miyazaki.jp",
		"kadogawa.miyazaki.jp",
		"kawaminami.miyazaki.jp",
		"kijo.miyazaki.jp",
		"kitagawa.miyazaki.jp",
		"kitakata.miyazaki.jp",
		"kitaura.miyazaki.jp",
		"kobayashi.miyazaki.jp",
		"kunitomi.miyazaki.jp",
		"kushima.miyazaki.jp",
		"mimata.miyazaki.jp",
		"miyakonojo.miyazaki.jp",
		"miyazaki.miyazaki.jp",
		"morotsuka.miyazaki.jp",
		"nichinan.miyazaki.jp",
		"nishimera.miyazaki.jp",
		"nobeoka.miyazaki.jp",
		"saito.miyazaki.jp",
		"shiiba.miyazaki.jp",
		"shintomi.miyazaki.jp",
		"takaharu.miyazaki.jp",
		"takanabe.miyazaki.jp",
		"takazaki.miyazaki.jp",
		"tsuno.miyazaki.jp",
		"achi.nagano.jp",
		"agematsu.nagano.jp",
		"anan.nagano.jp",
		"aoki.nagano.jp",
		"asahi.nagano.jp",
		"azumino.nagano.jp",
		"chikuhoku.nagano.jp",
		"chikuma.nagano.jp",
		"chino.nagano.jp",
		"fujimi.nagano.jp",
		"hakuba.nagano.jp",
		"hara.nagano.jp",
		"hiraya.nagano.jp",
		"iida.nagano.jp",
		"iijima.nagano.jp",
		"iiyama.nagano.jp",
		"iizuna.nagano.jp",
		"ikeda.nagano.jp",
		"ikusaka.nagano.jp",
		"ina.nagano.jp",
		"karuizawa.nagano.jp",
		"kawakami.nagano.jp",
		"kiso.nagano.jp",
		"kisofukushima.nagano.jp",
		"kitaaiki.nagano.jp",
		"komagane.nagano.jp",
		"komoro.nagano.jp",
		"matsukawa.nagano.jp",
		"matsumoto.nagano.jp",
		"miasa.nagano.jp",
		"minamiaiki.nagano.jp",
		"minamimaki.nagano.jp",
		"minamiminowa.nagano.jp",
		"minowa.nagano.jp",
		"miyada.nagano.jp",
		"miyota.nagano.jp",
		"mochizuki.nagano.jp",
		"nagano.nagano.jp",
		"nagawa.nagano.jp",
		"nagiso.nagano.jp",
		"nakagawa.nagano.jp",
		"nakano.nagano.jp",
		"nozawaonsen.nagano.jp",
		"obuse.nagano.jp",
		"ogawa.nagano.jp",
		"okaya.nagano.jp",
		"omachi.nagano.jp",
		"omi.nagano.jp",
		"ookuwa.nagano.jp",
		"ooshika.nagano.jp",
		"otaki.nagano.jp",
		"otari.nagano.jp",
		"sakae.nagano.jp",
		"sakaki.nagano.jp",
		"saku.nagano.jp",
		"sakuho.nagano.jp",
		"shimosuwa.nagano.jp",
		"shinanomachi.nagano.jp",
		"shiojiri.nagano.jp",
		"suwa.nagano.jp",
		"suzaka.nagano.jp",
		"takagi.nagano.jp",
		"takamori.nagano.jp",
		"takayama.nagano.jp",
		"tateshina.nagano.jp",
		"tatsuno.nagano.jp",
		"togakushi.nagano.jp",
		"togura.nagano.jp",
		"tomi.nagano.jp",
		"ueda.nagano.jp",
		"wada.nagano.jp",
		"yamagata.nagano.jp",
		"yamanouchi.nagano.jp",
		"yasaka.nagano.jp",
		"yasuoka.nagano.jp",
		"chijiwa.nagasaki.jp",
		"futsu.nagasaki.jp",
		"goto.nagasaki.jp",
		"hasami.nagasaki.jp",
		"hirado.nagasaki.jp",
		"iki.nagasaki.jp",
		"isahaya.nagasaki.jp",
		"kawatana.nagasaki.jp",
		"kuchinotsu.nagasaki.jp",
		"matsuura.nagasaki.jp",
		"nagasaki.nagasaki.jp",
		"obama.nagasaki.jp",
		"omura.nagasaki.jp",
		"oseto.nagasaki.jp",
		"saikai.nagasaki.jp",
		"sasebo.nagasaki.jp",
		"seihi.nagasaki.jp",
		"shimabara.nagasaki.jp",
		"shinkamigoto.nagasaki.jp",
		"togitsu.nagasaki.jp",
		"tsushima.nagasaki.jp",
		"unzen.nagasaki.jp",
		"ando.nara.jp",
		"gose.nara.jp",
		"heguri.nara.jp",
		"higashiyoshino.nara.jp",
		"ikaruga.nara.jp",
		"ikoma.nara.jp",
		"kamikitayama.nara.jp",
		"kanmaki.nara.jp",
		"kashiba.nara.jp",
		"kashihara.nara.jp",
		"katsuragi.nara.jp",
		"kawai.nara.jp",
		"kawakami.nara.jp",
		"kawanishi.nara.jp",
		"koryo.nara.jp",
		"kurotaki.nara.jp",
		"mitsue.nara.jp",
		"miyake.nara.jp",
		"nara.nara.jp",
		"nosegawa.nara.jp",
		"oji.nara.jp",
		"ouda.nara.jp",
		"oyodo.nara.jp",
		"sakurai.nara.jp",
		"sango.nara.jp",
		"shimoichi.nara.jp",
		"shimokitayama.nara.jp",
		"shinjo.nara.jp",
		"soni.nara.jp",
		"takatori.nara.jp",
		"tawaramoto.nara.jp",
		"tenkawa.nara.jp",
		"tenri.nara.jp",
		"uda.nara.jp",
		"yamatokoriyama.nara.jp",
		"yamatotakada.nara.jp",
		"yamazoe.nara.jp",
		"yoshino.nara.jp",
		"aga.niigata.jp",
		"agano.niigata.jp",
		"gosen.niigata.jp",
		"itoigawa.niigata.jp",
		"izumozaki.niigata.jp",
		"joetsu.niigata.jp",
		"kamo.niigata.jp",
		"kariwa.niigata.jp",
		"kashiwazaki.niigata.jp",
		"minamiuonuma.niigata.jp",
		"mitsuke.niigata.jp",
		"muika.niigata.jp",
		"murakami.niigata.jp",
		"myoko.niigata.jp",
		"nagaoka.niigata.jp",
		"niigata.niigata.jp",
		"ojiya.niigata.jp",
		"omi.niigata.jp",
		"sado.niigata.jp",
		"sanjo.niigata.jp",
		"seiro.niigata.jp",
		"seirou.niigata.jp",
		"sekikawa.niigata.jp",
		"shibata.niigata.jp",
		"tagami.niigata.jp",
		"tainai.niigata.jp",
		"tochio.niigata.jp",
		"tokamachi.niigata.jp",
		"tsubame.niigata.jp",
		"tsunan.niigata.jp",
		"uonuma.niigata.jp",
		"yahiko.niigata.jp",
		"yoita.niigata.jp",
		"yuzawa.niigata.jp",
		"beppu.oita.jp",
		"bungoono.oita.jp",
		"bungotakada.oita.jp",
		"hasama.oita.jp",
		"hiji.oita.jp",
		"himeshima.oita.jp",
		"hita.oita.jp",
		"kamitsue.oita.jp",
		"kokonoe.oita.jp",
		"kuju.oita.jp",
		"kunisaki.oita.jp",
		"kusu.oita.jp",
		"oita.oita.jp",
		"saiki.oita.jp",
		"taketa.oita.jp",
		"tsukumi.oita.jp",
		"usa.oita.jp",
		"usuki.oita.jp",
		"yufu.oita.jp",
		"akaiwa.okayama.jp",
		"asakuchi.okayama.jp",
		"bizen.okayama.jp",
		"hayashima.okayama.jp",
		"ibara.okayama.jp",
		"kagamino.okayama.jp",
		"kasaoka.okayama.jp",
		"kibichuo.okayama.jp",
		"kumenan.okayama.jp",
		"kurashiki.okayama.jp",
		"maniwa.okayama.jp",
		"misaki.okayama.jp",
		"nagi.okayama.jp",
		"niimi.okayama.jp",
		"nishiawakura.okayama.jp",
		"okayama.okayama.jp",
		"satosho.okayama.jp",
		"setouchi.okayama.jp",
		"shinjo.okayama.jp",
		"shoo.okayama.jp",
		"soja.okayama.jp",
		"takahashi.okayama.jp",
		"tamano.okayama.jp",
		"tsuyama.okayama.jp",
		"wake.okayama.jp",
		"yakage.okayama.jp",
		"aguni.okinawa.jp",
		"ginowan.okinawa.jp",
		"ginoza.okinawa.jp",
		"gushikami.okinawa.jp",
		"haebaru.okinawa.jp",
		"higashi.okinawa.jp",
		"hirara.okinawa.jp",
		"iheya.okinawa.jp",
		"ishigaki.okinawa.jp",
		"ishikawa.okinawa.jp",
		"itoman.okinawa.jp",
		"izena.okinawa.jp",
		"kadena.okinawa.jp",
		"kin.okinawa.jp",
		"kitadaito.okinawa.jp",
		"kitanakagusuku.okinawa.jp",
		"kumejima.okinawa.jp",
		"kunigami.okinawa.jp",
		"minamidaito.okinawa.jp",
		"motobu.okinawa.jp",
		"nago.okinawa.jp",
		"naha.okinawa.jp",
		"nakagusuku.okinawa.jp",
		"nakijin.okinawa.jp",
		"nanjo.okinawa.jp",
		"nishihara.okinawa.jp",
		"ogimi.okinawa.jp",
		"okinawa.okinawa.jp",
		"onna.okinawa.jp",
		"shimoji.okinawa.jp",
		"taketomi.okinawa.jp",
		"tarama.okinawa.jp",
		"tokashiki.okinawa.jp",
		"tomigusuku.okinawa.jp",
		"tonaki.okinawa.jp",
		"urasoe.okinawa.jp",
		"uruma.okinawa.jp",
		"yaese.okinawa.jp",
		"yomitan.okinawa.jp",
		"yonabaru.okinawa.jp",
		"yonaguni.okinawa.jp",
		"zamami.okinawa.jp",
		"abeno.osaka.jp",
		"chihayaakasaka.osaka.jp",
		"chuo.osaka.jp",
		"daito.osaka.jp",
		"fujiidera.osaka.jp",
		"habikino.osaka.jp",
		"hannan.osaka.jp",
		"higashiosaka.osaka.jp",
		"higashisumiyoshi.osaka.jp",
		"higashiyodogawa.osaka.jp",
		"hirakata.osaka.jp",
		"ibaraki.osaka.jp",
		"ikeda.osaka.jp",
		"izumi.osaka.jp",
		"izumiotsu.osaka.jp",
		"izumisano.osaka.jp",
		"kadoma.osaka.jp",
		"kaizuka.osaka.jp",
		"kanan.osaka.jp",
		"kashiwara.osaka.jp",
		"katano.osaka.jp",
		"kawachinagano.osaka.jp",
		"kishiwada.osaka.jp",
		"kita.osaka.jp",
		"kumatori.osaka.jp",
		"matsubara.osaka.jp",
		"minato.osaka.jp",
		"minoh.osaka.jp",
		"misaki.osaka.jp",
		"moriguchi.osaka.jp",
		"neyagawa.osaka.jp",
		"nishi.osaka.jp",
		"nose.osaka.jp",
		"osakasayama.osaka.jp",
		"sakai.osaka.jp",
		"sayama.osaka.jp",
		"sennan.osaka.jp",
		"settsu.osaka.jp",
		"shijonawate.osaka.jp",
		"shimamoto.osaka.jp",
		"suita.osaka.jp",
		"tadaoka.osaka.jp",
		"taishi.osaka.jp",
		"tajiri.osaka.jp",
		"takaishi.osaka.jp",
		"takatsuki.osaka.jp",
		"tondabayashi.osaka.jp",
		"toyonaka.osaka.jp",
		"toyono.osaka.jp",
		"yao.osaka.jp",
		"ariake.saga.jp",
		"arita.saga.jp",
		"fukudomi.saga.jp",
		"genkai.saga.jp",
		"hamatama.saga.jp",
		"hizen.saga.jp",
		"imari.saga.jp",
		"kamimine.saga.jp",
		"kanzaki.saga.jp",
		"karatsu.saga.jp",
		"kashima.saga.jp",
		"kitagata.saga.jp",
		"kitahata.saga.jp",
		"kiyama.saga.jp",
		"kouhoku.saga.jp",
		"kyuragi.saga.jp",
		"nishiarita.saga.jp",
		"ogi.saga.jp",
		"omachi.saga.jp",
		"ouchi.saga.jp",
		"saga.saga.jp",
		"shiroishi.saga.jp",
		"taku.saga.jp",
		"tara.saga.jp",
		"tosu.saga.jp",
		"yoshinogari.saga.jp",
		"arakawa.saitama.jp",
		"asaka.saitama.jp",
		"chichibu.saitama.jp",
		"fujimi.saitama.jp",
		"fujimino.saitama.jp",
		"fukaya.saitama.jp",
		"hanno.saitama.jp",
		"hanyu.saitama.jp",
		"hasuda.saitama.jp",
		"hatogaya.saitama.jp",
		"hatoyama.saitama.jp",
		"hidaka.saitama.jp",
		"higashichichibu.saitama.jp",
		"higashimatsuyama.saitama.jp",
		"honjo.saitama.jp",
		"ina.saitama.jp",
		"iruma.saitama.jp",
		"iwatsuki.saitama.jp",
		"kamiizumi.saitama.jp",
		"kamikawa.saitama.jp",
		"kamisato.saitama.jp",
		"kasukabe.saitama.jp",
		"kawagoe.saitama.jp",
		"kawaguchi.saitama.jp",
		"kawajima.saitama.jp",
		"kazo.saitama.jp",
		"kitamoto.saitama.jp",
		"koshigaya.saitama.jp",
		"kounosu.saitama.jp",
		"kuki.saitama.jp",
		"kumagaya.saitama.jp",
		"matsubushi.saitama.jp",
		"minano.saitama.jp",
		"misato.saitama.jp",
		"miyashiro.saitama.jp",
		"miyoshi.saitama.jp",
		"moroyama.saitama.jp",
		"nagatoro.saitama.jp",
		"namegawa.saitama.jp",
		"niiza.saitama.jp",
		"ogano.saitama.jp",
		"ogawa.saitama.jp",
		"ogose.saitama.jp",
		"okegawa.saitama.jp",
		"omiya.saitama.jp",
		"otaki.saitama.jp",
		"ranzan.saitama.jp",
		"ryokami.saitama.jp",
		"saitama.saitama.jp",
		"sakado.saitama.jp",
		"satte.saitama.jp",
		"sayama.saitama.jp",
		"shiki.saitama.jp",
		"shiraoka.saitama.jp",
		"soka.saitama.jp",
		"sugito.saitama.jp",
		"toda.saitama.jp",
		"tokigawa.saitama.jp",
		"tokorozawa.saitama.jp",
		"tsurugashima.saitama.jp",
		"urawa.saitama.jp",
		"warabi.saitama.jp",
		"yashio.saitama.jp",
		"yokoze.saitama.jp",
		"yono.saitama.jp",
		"yorii.saitama.jp",
		"yoshida.saitama.jp",
		"yoshikawa.saitama.jp",
		"yoshimi.saitama.jp",
		"aisho.shiga.jp",
		"gamo.shiga.jp",
		"higashiomi.shiga.jp",
		"hikone.shiga.jp",
		"koka.shiga.jp",
		"konan.shiga.jp",
		"kosei.shiga.jp",
		"koto.shiga.jp",
		"kusatsu.shiga.jp",
		"maibara.shiga.jp",
		"moriyama.shiga.jp",
		"nagahama.shiga.jp",
		"nishiazai.shiga.jp",
		"notogawa.shiga.jp",
		"omihachiman.shiga.jp",
		"otsu.shiga.jp",
		"ritto.shiga.jp",
		"ryuoh.shiga.jp",
		"takashima.shiga.jp",
		"takatsuki.shiga.jp",
		"torahime.shiga.jp",
		"toyosato.shiga.jp",
		"yasu.shiga.jp",
		"akagi.shimane.jp",
		"ama.shimane.jp",
		"gotsu.shimane.jp",
		"hamada.shimane.jp",
		"higashiizumo.shimane.jp",
		"hikawa.shimane.jp",
		"hikimi.shimane.jp",
		"izumo.shimane.jp",
		"kakinoki.shimane.jp",
		"masuda.shimane.jp",
		"matsue.shimane.jp",
		"misato.shimane.jp",
		"nishinoshima.shimane.jp",
		"ohda.shimane.jp",
		"okinoshima.shimane.jp",
		"okuizumo.shimane.jp",
		"shimane.shimane.jp",
		"tamayu.shimane.jp",
		"tsuwano.shimane.jp",
		"unnan.shimane.jp",
		"yakumo.shimane.jp",
		"yasugi.shimane.jp",
		"yatsuka.shimane.jp",
		"arai.shizuoka.jp",
		"atami.shizuoka.jp",
		"fuji.shizuoka.jp",
		"fujieda.shizuoka.jp",
		"fujikawa.shizuoka.jp",
		"fujinomiya.shizuoka.jp",
		"fukuroi.shizuoka.jp",
		"gotemba.shizuoka.jp",
		"haibara.shizuoka.jp",
		"hamamatsu.shizuoka.jp",
		"higashiizu.shizuoka.jp",
		"ito.shizuoka.jp",
		"iwata.shizuoka.jp",
		"izu.shizuoka.jp",
		"izunokuni.shizuoka.jp",
		"kakegawa.shizuoka.jp",
		"kannami.shizuoka.jp",
		"kawanehon.shizuoka.jp",
		"kawazu.shizuoka.jp",
		"kikugawa.shizuoka.jp",
		"kosai.shizuoka.jp",
		"makinohara.shizuoka.jp",
		"matsuzaki.shizuoka.jp",
		"minamiizu.shizuoka.jp",
		"mishima.shizuoka.jp",
		"morimachi.shizuoka.jp",
		"nishiizu.shizuoka.jp",
		"numazu.shizuoka.jp",
		"omaezaki.shizuoka.jp",
		"shimada.shizuoka.jp",
		"shimizu.shizuoka.jp",
		"shimoda.shizuoka.jp",
		"shizuoka.shizuoka.jp",
		"susono.shizuoka.jp",
		"yaizu.shizuoka.jp",
		"yoshida.shizuoka.jp",
		"ashikaga.tochigi.jp",
		"bato.tochigi.jp",
		"haga.tochigi.jp",
		"ichikai.tochigi.jp",
		"iwafune.tochigi.jp",
		"kaminokawa.tochigi.jp",
		"kanuma.tochigi.jp",
		"karasuyama.tochigi.jp",
		"kuroiso.tochigi.jp",
		"mashiko.tochigi.jp",
		"mibu.tochigi.jp",
		"moka.tochigi.jp",
		"motegi.tochigi.jp",
		"nasu.tochigi.jp",
		"nasushiobara.tochigi.jp",
		"nikko.tochigi.jp",
		"nishikata.tochigi.jp",
		"nogi.tochigi.jp",
		"ohira.tochigi.jp",
		"ohtawara.tochigi.jp",
		"oyama.tochigi.jp",
		"sakura.tochigi.jp",
		"sano.tochigi.jp",
		"shimotsuke.tochigi.jp",
		"shioya.tochigi.jp",
		"takanezawa.tochigi.jp",
		"tochigi.tochigi.jp",
		"tsuga.tochigi.jp",
		"ujiie.tochigi.jp",
		"utsunomiya.tochigi.jp",
		"yaita.tochigi.jp",
		"aizumi.tokushima.jp",
		"anan.tokushima.jp",
		"ichiba.tokushima.jp",
		"itano.tokushima.jp",
		"kainan.tokushima.jp",
		"komatsushima.tokushima.jp",
		"matsushige.tokushima.jp",
		"mima.tokushima.jp",
		"minami.tokushima.jp",
		"miyoshi.tokushima.jp",
		"mugi.tokushima.jp",
		"nakagawa.tokushima.jp",
		"naruto.tokushima.jp",
		"sanagochi.tokushima.jp",
		"shishikui.tokushima.jp",
		"tokushima.tokushima.jp",
		"wajiki.tokushima.jp",
		"adachi.tokyo.jp",
		"akiruno.tokyo.jp",
		"akishima.tokyo.jp",
		"aogashima.tokyo.jp",
		"arakawa.tokyo.jp",
		"bunkyo.tokyo.jp",
		"chiyoda.tokyo.jp",
		"chofu.tokyo.jp",
		"chuo.tokyo.jp",
		"edogawa.tokyo.jp",
		"fuchu.tokyo.jp",
		"fussa.tokyo.jp",
		"hachijo.tokyo.jp",
		"hachioji.tokyo.jp",
		"hamura.tokyo.jp",
		"higashikurume.tokyo.jp",
		"higashimurayama.tokyo.jp",
		"higashiyamato.tokyo.jp",
		"hino.tokyo.jp",
		"hinode.tokyo.jp",
		"hinohara.tokyo.jp",
		"inagi.tokyo.jp",
		"itabashi.tokyo.jp",
		"katsushika.tokyo.jp",
		"kita.tokyo.jp",
		"kiyose.tokyo.jp",
		"kodaira.tokyo.jp",
		"koganei.tokyo.jp",
		"kokubunji.tokyo.jp",
		"komae.tokyo.jp",
		"koto.tokyo.jp",
		"kouzushima.tokyo.jp",
		"kunitachi.tokyo.jp",
		"machida.tokyo.jp",
		"meguro.tokyo.jp",
		"minato.tokyo.jp",
		"mitaka.tokyo.jp",
		"mizuho.tokyo.jp",
		"musashimurayama.tokyo.jp",
		"musashino.tokyo.jp",
		"nakano.tokyo.jp",
		"nerima.tokyo.jp",
		"ogasawara.tokyo.jp",
		"okutama.tokyo.jp",
		"ome.tokyo.jp",
		"oshima.tokyo.jp",
		"ota.tokyo.jp",
		"setagaya.tokyo.jp",
		"shibuya.tokyo.jp",
		"shinagawa.tokyo.jp",
		"shinjuku.tokyo.jp",
		"suginami.tokyo.jp",
		"sumida.tokyo.jp",
		"tachikawa.tokyo.jp",
		"taito.tokyo.jp",
		"tama.tokyo.jp",
		"toshima.tokyo.jp",
		"chizu.tottori.jp",
		"hino.tottori.jp",
		"kawahara.tottori.jp",
		"koge.tottori.jp",
		"kotoura.tottori.jp",
		"misasa.tottori.jp",
		"nanbu.tottori.jp",
		"nichinan.tottori.jp",
		"sakaiminato.tottori.jp",
		"tottori.tottori.jp",
		"wakasa.tottori.jp",
		"yazu.tottori.jp",
		"yonago.tottori.jp",
		"asahi.toyama.jp",
		"fuchu.toyama.jp",
		"fukumitsu.toyama.jp",
		"funahashi.toyama.jp",
		"himi.toyama.jp",
		"imizu.toyama.jp",
		"inami.toyama.jp",
		"johana.toyama.jp",
		"kamiichi.toyama.jp",
		"kurobe.toyama.jp",
		"nakaniikawa.toyama.jp",
		"namerikawa.toyama.jp",
		"nanto.toyama.jp",
		"nyuzen.toyama.jp",
		"oyabe.toyama.jp",
		"taira.toyama.jp",
		"takaoka.toyama.jp",
		"tateyama.toyama.jp",
		"toga.toyama.jp",
		"tonami.toyama.jp",
		"toyama.toyama.jp",
		"unazuki.toyama.jp",
		"uozu.toyama.jp",
		"yamada.toyama.jp",
		"arida.wakayama.jp",
		"aridagawa.wakayama.jp",
		"gobo.wakayama.jp",
		"hashimoto.wakayama.jp",
		"hidaka.wakayama.jp",
		"hirogawa.wakayama.jp",
		"inami.wakayama.jp",
		"iwade.wakayama.jp",
		"kainan.wakayama.jp",
		"kamitonda.wakayama.jp",
		"katsuragi.wakayama.jp",
		"kimino.wakayama.jp",
		"kinokawa.wakayama.jp",
		"kitayama.wakayama.jp",
		"koya.wakayama.jp",
		"koza.wakayama.jp",
		"kozagawa.wakayama.jp",
		"kudoyama.wakayama.jp",
		"kushimoto.wakayama.jp",
		"mihama.wakayama.jp",
		"misato.wakayama.jp",
		"nachikatsuura.wakayama.jp",
		"shingu.wakayama.jp",
		"shirahama.wakayama.jp",
		"taiji.wakayama.jp",
		"tanabe.wakayama.jp",
		"wakayama.wakayama.jp",
		"yuasa.wakayama.jp",
		"yura.wakayama.jp",
		"asahi.yamagata.jp",
		"funagata.yamagata.jp",
		"higashine.yamagata.jp",
		"iide.yamagata.jp",
		"kahoku.yamagata.jp",
		"kaminoyama.yamagata.jp",
		"kaneyama.yamagata.jp",
		"kawanishi.yamagata.jp",
		"mamurogawa.yamagata.jp",
		"mikawa.yamagata.jp",
		"murayama.yamagata.jp",
		"nagai.yamagata.jp",
		"nakayama.yamagata.jp",
		"nanyo.yamagata.jp",
		"nishikawa.yamagata.jp",
		"obanazawa.yamagata.jp",
		"oe.yamagata.jp",
		"oguni.yamagata.jp",
		"ohkura.yamagata.jp",
		"oishida.yamagata.jp",
		"sagae.yamagata.jp",
		"sakata.yamagata.jp",
		"sakegawa.yamagata.jp",
		"shinjo.yamagata.jp",
		"shirataka.yamagata.jp",
		"shonai.yamagata.jp",
		"takahata.yamagata.jp",
		"tendo.yamagata.jp",
		"tozawa.yamagata.jp",
		"tsuruoka.yamagata.jp",
		"yamagata.yamagata.jp",
		"yamanobe.yamagata.jp",
		"yonezawa.yamagata.jp",
		"yuza.yamagata.jp",
		"abu.yamaguchi.jp",
		"hagi.yamaguchi.jp",
		"hikari.yamaguchi.jp",
		"hofu.yamaguchi.jp",
		"iwakuni.yamaguchi.jp",
		"kudamatsu.yamaguchi.jp",
		"mitou.yamaguchi.jp",
		"nagato.yamaguchi.jp",
		"oshima.yamaguchi.jp",
		"shimonoseki.yamaguchi.jp",
		"shunan.yamaguchi.jp",
		"tabuse.yamaguchi.jp",
		"tokuyama.yamaguchi.jp",
		"toyota.yamaguchi.jp",
		"ube.yamaguchi.jp",
		"yuu.yamaguchi.jp",
		"chuo.yamanashi.jp",
		"doshi.yamanashi.jp",
		"fuefuki.yamanashi.jp",
		"fujikawa.yamanashi.jp",
		"fujikawaguchiko.yamanashi.jp",
		"fujiyoshida.yamanashi.jp",
		"hayakawa.yamanashi.jp",
		"hokuto.yamanashi.jp",
		"ichikawamisato.yamanashi.jp",
		"kai.yamanashi.jp",
		"kofu.yamanashi.jp",
		"koshu.yamanashi.jp",
		"kosuge.yamanashi.jp",
		"minami-alps.yamanashi.jp",
		"minobu.yamanashi.jp",
		"nakamichi.yamanashi.jp",
		"nanbu.yamanashi.jp",
		"narusawa.yamanashi.jp",
		"nirasaki.yamanashi.jp",
		"nishikatsura.yamanashi.jp",
		"oshino.yamanashi.jp",
		"otsuki.yamanashi.jp",
		"showa.yamanashi.jp",
		"tabayama.yamanashi.jp",
		"tsuru.yamanashi.jp",
		"uenohara.yamanashi.jp",
		"yamanakako.yamanashi.jp",
		"yamanashi.yamanashi.jp",
		"ke",
		"ac.ke",
		"co.ke",
		"go.ke",
		"info.ke",
		"me.ke",
		"mobi.ke",
		"ne.ke",
		"or.ke",
		"sc.ke",
		"kg",
		"org.kg",
		"net.kg",
		"com.kg",
		"edu.kg",
		"gov.kg",
		"mil.kg",
		"*.kh",
		"ki",
		"edu.ki",
		"biz.ki",
		"net.ki",
		"org.ki",
		"gov.ki",
		"info.ki",
		"com.ki",
		"km",
		"org.km",
		"nom.km",
		"gov.km",
		"prd.km",
		"tm.km",
		"edu.km",
		"mil.km",
		"ass.km",
		"com.km",
		"coop.km",
		"asso.km",
		"presse.km",
		"medecin.km",
		"notaires.km",
		"pharmaciens.km",
		"veterinaire.km",
		"gouv.km",
		"kn",
		"net.kn",
		"org.kn",
		"edu.kn",
		"gov.kn",
		"kp",
		"com.kp",
		"edu.kp",
		"gov.kp",
		"org.kp",
		"rep.kp",
		"tra.kp",
		"kr",
		"ac.kr",
		"co.kr",
		"es.kr",
		"go.kr",
		"hs.kr",
		"kg.kr",
		"mil.kr",
		"ms.kr",
		"ne.kr",
		"or.kr",
		"pe.kr",
		"re.kr",
		"sc.kr",
		"busan.kr",
		"chungbuk.kr",
		"chungnam.kr",
		"daegu.kr",
		"daejeon.kr",
		"gangwon.kr",
		"gwangju.kr",
		"gyeongbuk.kr",
		"gyeonggi.kr",
		"gyeongnam.kr",
		"incheon.kr",
		"jeju.kr",
		"jeonbuk.kr",
		"jeonnam.kr",
		"seoul.kr",
		"ulsan.kr",
		"kw",
		"com.kw",
		"edu.kw",
		"emb.kw",
		"gov.kw",
		"ind.kw",
		"net.kw",
		"org.kw",
		"ky",
		"edu.ky",
		"gov.ky",
		"com.ky",
		"org.ky",
		"net.ky",
		"kz",
		"org.kz",
		"edu.kz",
		"net.kz",
		"gov.kz",
		"mil.kz",
		"com.kz",
		"la",
		"int.la",
		"net.la",
		"info.la",
		"edu.la",
		"gov.la",
		"per.la",
		"com.la",
		"org.la",
		"lb",
		"com.lb",
		"edu.lb",
		"gov.lb",
		"net.lb",
		"org.lb",
		"lc",
		"com.lc",
		"net.lc",
		"co.lc",
		"org.lc",
		"edu.lc",
		"gov.lc",
		"li",
		"lk",
		"gov.lk",
		"sch.lk",
		"net.lk",
		"int.lk",
		"com.lk",
		"org.lk",
		"edu.lk",
		"ngo.lk",
		"soc.lk",
		"web.lk",
		"ltd.lk",
		"assn.lk",
		"grp.lk",
		"hotel.lk",
		"ac.lk",
		"lr",
		"com.lr",
		"edu.lr",
		"gov.lr",
		"org.lr",
		"net.lr",
		"ls",
		"ac.ls",
		"biz.ls",
		"co.ls",
		"edu.ls",
		"gov.ls",
		"info.ls",
		"net.ls",
		"org.ls",
		"sc.ls",
		"lt",
		"gov.lt",
		"lu",
		"lv",
		"com.lv",
		"edu.lv",
		"gov.lv",
		"org.lv",
		"mil.lv",
		"id.lv",
		"net.lv",
		"asn.lv",
		"conf.lv",
		"ly",
		"com.ly",
		"net.ly",
		"gov.ly",
		"plc.ly",
		"edu.ly",
		"sch.ly",
		"med.ly",
		"org.ly",
		"id.ly",
		"ma",
		"co.ma",
		"net.ma",
		"gov.ma",
		"org.ma",
		"ac.ma",
		"press.ma",
		"mc",
		"tm.mc",
		"asso.mc",
		"md",
		"me",
		"co.me",
		"net.me",
		"org.me",
		"edu.me",
		"ac.me",
		"gov.me",
		"its.me",
		"priv.me",
		"mg",
		"org.mg",
		"nom.mg",
		"gov.mg",
		"prd.mg",
		"tm.mg",
		"edu.mg",
		"mil.mg",
		"com.mg",
		"co.mg",
		"mh",
		"mil",
		"mk",
		"com.mk",
		"org.mk",
		"net.mk",
		"edu.mk",
		"gov.mk",
		"inf.mk",
		"name.mk",
		"ml",
		"com.ml",
		"edu.ml",
		"gouv.ml",
		"gov.ml",
		"net.ml",
		"org.ml",
		"presse.ml",
		"*.mm",
		"mn",
		"gov.mn",
		"edu.mn",
		"org.mn",
		"mo",
		"com.mo",
		"net.mo",
		"org.mo",
		"edu.mo",
		"gov.mo",
		"mobi",
		"mp",
		"mq",
		"mr",
		"gov.mr",
		"ms",
		"com.ms",
		"edu.ms",
		"gov.ms",
		"net.ms",
		"org.ms",
		"mt",
		"com.mt",
		"edu.mt",
		"net.mt",
		"org.mt",
		"mu",
		"com.mu",
		"net.mu",
		"org.mu",
		"gov.mu",
		"ac.mu",
		"co.mu",
		"or.mu",
		"museum",
		"academy.museum",
		"agriculture.museum",
		"air.museum",
		"airguard.museum",
		"alabama.museum",
		"alaska.museum",
		"amber.museum",
		"ambulance.museum",
		"american.museum",
		"americana.museum",
		"americanantiques.museum",
		"americanart.museum",
		"amsterdam.museum",
		"and.museum",
		"annefrank.museum",
		"anthro.museum",
		"anthropology.museum",
		"antiques.museum",
		"aquarium.museum",
		"arboretum.museum",
		"archaeological.museum",
		"archaeology.museum",
		"architecture.museum",
		"art.museum",
		"artanddesign.museum",
		"artcenter.museum",
		"artdeco.museum",
		"arteducation.museum",
		"artgallery.museum",
		"arts.museum",
		"artsandcrafts.museum",
		"asmatart.museum",
		"assassination.museum",
		"assisi.museum",
		"association.museum",
		"astronomy.museum",
		"atlanta.museum",
		"austin.museum",
		"australia.museum",
		"automotive.museum",
		"aviation.museum",
		"axis.museum",
		"badajoz.museum",
		"baghdad.museum",
		"bahn.museum",
		"bale.museum",
		"baltimore.museum",
		"barcelona.museum",
		"baseball.museum",
		"basel.museum",
		"baths.museum",
		"bauern.museum",
		"beauxarts.museum",
		"beeldengeluid.museum",
		"bellevue.museum",
		"bergbau.museum",
		"berkeley.museum",
		"berlin.museum",
		"bern.museum",
		"bible.museum",
		"bilbao.museum",
		"bill.museum",
		"birdart.museum",
		"birthplace.museum",
		"bonn.museum",
		"boston.museum",
		"botanical.museum",
		"botanicalgarden.museum",
		"botanicgarden.museum",
		"botany.museum",
		"brandywinevalley.museum",
		"brasil.museum",
		"bristol.museum",
		"british.museum",
		"britishcolumbia.museum",
		"broadcast.museum",
		"brunel.museum",
		"brussel.museum",
		"brussels.museum",
		"bruxelles.museum",
		"building.museum",
		"burghof.museum",
		"bus.museum",
		"bushey.museum",
		"cadaques.museum",
		"california.museum",
		"cambridge.museum",
		"can.museum",
		"canada.museum",
		"capebreton.museum",
		"carrier.museum",
		"cartoonart.museum",
		"casadelamoneda.museum",
		"castle.museum",
		"castres.museum",
		"celtic.museum",
		"center.museum",
		"chattanooga.museum",
		"cheltenham.museum",
		"chesapeakebay.museum",
		"chicago.museum",
		"children.museum",
		"childrens.museum",
		"childrensgarden.museum",
		"chiropractic.museum",
		"chocolate.museum",
		"christiansburg.museum",
		"cincinnati.museum",
		"cinema.museum",
		"circus.museum",
		"civilisation.museum",
		"civilization.museum",
		"civilwar.museum",
		"clinton.museum",
		"clock.museum",
		"coal.museum",
		"coastaldefence.museum",
		"cody.museum",
		"coldwar.museum",
		"collection.museum",
		"colonialwilliamsburg.museum",
		"coloradoplateau.museum",
		"columbia.museum",
		"columbus.museum",
		"communication.museum",
		"communications.museum",
		"community.museum",
		"computer.museum",
		"computerhistory.museum",
		"comunicações.museum",
		"contemporary.museum",
		"contemporaryart.museum",
		"convent.museum",
		"copenhagen.museum",
		"corporation.museum",
		"correios-e-telecomunicações.museum",
		"corvette.museum",
		"costume.museum",
		"countryestate.museum",
		"county.museum",
		"crafts.museum",
		"cranbrook.museum",
		"creation.museum",
		"cultural.museum",
		"culturalcenter.museum",
		"culture.museum",
		"cyber.museum",
		"cymru.museum",
		"dali.museum",
		"dallas.museum",
		"database.museum",
		"ddr.museum",
		"decorativearts.museum",
		"delaware.museum",
		"delmenhorst.museum",
		"denmark.museum",
		"depot.museum",
		"design.museum",
		"detroit.museum",
		"dinosaur.museum",
		"discovery.museum",
		"dolls.museum",
		"donostia.museum",
		"durham.museum",
		"eastafrica.museum",
		"eastcoast.museum",
		"education.museum",
		"educational.museum",
		"egyptian.museum",
		"eisenbahn.museum",
		"elburg.museum",
		"elvendrell.museum",
		"embroidery.museum",
		"encyclopedic.museum",
		"england.museum",
		"entomology.museum",
		"environment.museum",
		"environmentalconservation.museum",
		"epilepsy.museum",
		"essex.museum",
		"estate.museum",
		"ethnology.museum",
		"exeter.museum",
		"exhibition.museum",
		"family.museum",
		"farm.museum",
		"farmequipment.museum",
		"farmers.museum",
		"farmstead.museum",
		"field.museum",
		"figueres.museum",
		"filatelia.museum",
		"film.museum",
		"fineart.museum",
		"finearts.museum",
		"finland.museum",
		"flanders.museum",
		"florida.museum",
		"force.museum",
		"fortmissoula.museum",
		"fortworth.museum",
		"foundation.museum",
		"francaise.museum",
		"frankfurt.museum",
		"franziskaner.museum",
		"freemasonry.museum",
		"freiburg.museum",
		"fribourg.museum",
		"frog.museum",
		"fundacio.museum",
		"furniture.museum",
		"gallery.museum",
		"garden.museum",
		"gateway.museum",
		"geelvinck.museum",
		"gemological.museum",
		"geology.museum",
		"georgia.museum",
		"giessen.museum",
		"glas.museum",
		"glass.museum",
		"gorge.museum",
		"grandrapids.museum",
		"graz.museum",
		"guernsey.museum",
		"halloffame.museum",
		"hamburg.museum",
		"handson.museum",
		"harvestcelebration.museum",
		"hawaii.museum",
		"health.museum",
		"heimatunduhren.museum",
		"hellas.museum",
		"helsinki.museum",
		"hembygdsforbund.museum",
		"heritage.museum",
		"histoire.museum",
		"historical.museum",
		"historicalsociety.museum",
		"historichouses.museum",
		"historisch.museum",
		"historisches.museum",
		"history.museum",
		"historyofscience.museum",
		"horology.museum",
		"house.museum",
		"humanities.museum",
		"illustration.museum",
		"imageandsound.museum",
		"indian.museum",
		"indiana.museum",
		"indianapolis.museum",
		"indianmarket.museum",
		"intelligence.museum",
		"interactive.museum",
		"iraq.museum",
		"iron.museum",
		"isleofman.museum",
		"jamison.museum",
		"jefferson.museum",
		"jerusalem.museum",
		"jewelry.museum",
		"jewish.museum",
		"jewishart.museum",
		"jfk.museum",
		"journalism.museum",
		"judaica.museum",
		"judygarland.museum",
		"juedisches.museum",
		"juif.museum",
		"karate.museum",
		"karikatur.museum",
		"kids.museum",
		"koebenhavn.museum",
		"koeln.museum",
		"kunst.museum",
		"kunstsammlung.museum",
		"kunstunddesign.museum",
		"labor.museum",
		"labour.museum",
		"lajolla.museum",
		"lancashire.museum",
		"landes.museum",
		"lans.museum",
		"läns.museum",
		"larsson.museum",
		"lewismiller.museum",
		"lincoln.museum",
		"linz.museum",
		"living.museum",
		"livinghistory.museum",
		"localhistory.museum",
		"london.museum",
		"losangeles.museum",
		"louvre.museum",
		"loyalist.museum",
		"lucerne.museum",
		"luxembourg.museum",
		"luzern.museum",
		"mad.museum",
		"madrid.museum",
		"mallorca.museum",
		"manchester.museum",
		"mansion.museum",
		"mansions.museum",
		"manx.museum",
		"marburg.museum",
		"maritime.museum",
		"maritimo.museum",
		"maryland.museum",
		"marylhurst.museum",
		"media.museum",
		"medical.museum",
		"medizinhistorisches.museum",
		"meeres.museum",
		"memorial.museum",
		"mesaverde.museum",
		"michigan.museum",
		"midatlantic.museum",
		"military.museum",
		"mill.museum",
		"miners.museum",
		"mining.museum",
		"minnesota.museum",
		"missile.museum",
		"missoula.museum",
		"modern.museum",
		"moma.museum",
		"money.museum",
		"monmouth.museum",
		"monticello.museum",
		"montreal.museum",
		"moscow.museum",
		"motorcycle.museum",
		"muenchen.museum",
		"muenster.museum",
		"mulhouse.museum",
		"muncie.museum",
		"museet.museum",
		"museumcenter.museum",
		"museumvereniging.museum",
		"music.museum",
		"national.museum",
		"nationalfirearms.museum",
		"nationalheritage.museum",
		"nativeamerican.museum",
		"naturalhistory.museum",
		"naturalhistorymuseum.museum",
		"naturalsciences.museum",
		"nature.museum",
		"naturhistorisches.museum",
		"natuurwetenschappen.museum",
		"naumburg.museum",
		"naval.museum",
		"nebraska.museum",
		"neues.museum",
		"newhampshire.museum",
		"newjersey.museum",
		"newmexico.museum",
		"newport.museum",
		"newspaper.museum",
		"newyork.museum",
		"niepce.museum",
		"norfolk.museum",
		"north.museum",
		"nrw.museum",
		"nyc.museum",
		"nyny.museum",
		"oceanographic.museum",
		"oceanographique.museum",
		"omaha.museum",
		"online.museum",
		"ontario.museum",
		"openair.museum",
		"oregon.museum",
		"oregontrail.museum",
		"otago.museum",
		"oxford.museum",
		"pacific.museum",
		"paderborn.museum",
		"palace.museum",
		"paleo.museum",
		"palmsprings.museum",
		"panama.museum",
		"paris.museum",
		"pasadena.museum",
		"pharmacy.museum",
		"philadelphia.museum",
		"philadelphiaarea.museum",
		"philately.museum",
		"phoenix.museum",
		"photography.museum",
		"pilots.museum",
		"pittsburgh.museum",
		"planetarium.museum",
		"plantation.museum",
		"plants.museum",
		"plaza.museum",
		"portal.museum",
		"portland.museum",
		"portlligat.museum",
		"posts-and-telecommunications.museum",
		"preservation.museum",
		"presidio.museum",
		"press.museum",
		"project.museum",
		"public.museum",
		"pubol.museum",
		"quebec.museum",
		"railroad.museum",
		"railway.museum",
		"research.museum",
		"resistance.museum",
		"riodejaneiro.museum",
		"rochester.museum",
		"rockart.museum",
		"roma.museum",
		"russia.museum",
		"saintlouis.museum",
		"salem.museum",
		"salvadordali.museum",
		"salzburg.museum",
		"sandiego.museum",
		"sanfrancisco.museum",
		"santabarbara.museum",
		"santacruz.museum",
		"santafe.museum",
		"saskatchewan.museum",
		"satx.museum",
		"savannahga.museum",
		"schlesisches.museum",
		"schoenbrunn.museum",
		"schokoladen.museum",
		"school.museum",
		"schweiz.museum",
		"science.museum",
		"scienceandhistory.museum",
		"scienceandindustry.museum",
		"sciencecenter.museum",
		"sciencecenters.museum",
		"science-fiction.museum",
		"sciencehistory.museum",
		"sciences.museum",
		"sciencesnaturelles.museum",
		"scotland.museum",
		"seaport.museum",
		"settlement.museum",
		"settlers.museum",
		"shell.museum",
		"sherbrooke.museum",
		"sibenik.museum",
		"silk.museum",
		"ski.museum",
		"skole.museum",
		"society.museum",
		"sologne.museum",
		"soundandvision.museum",
		"southcarolina.museum",
		"southwest.museum",
		"space.museum",
		"spy.museum",
		"square.museum",
		"stadt.museum",
		"stalbans.museum",
		"starnberg.museum",
		"state.museum",
		"stateofdelaware.museum",
		"station.museum",
		"steam.museum",
		"steiermark.museum",
		"stjohn.museum",
		"stockholm.museum",
		"stpetersburg.museum",
		"stuttgart.museum",
		"suisse.museum",
		"surgeonshall.museum",
		"surrey.museum",
		"svizzera.museum",
		"sweden.museum",
		"sydney.museum",
		"tank.museum",
		"tcm.museum",
		"technology.museum",
		"telekommunikation.museum",
		"television.museum",
		"texas.museum",
		"textile.museum",
		"theater.museum",
		"time.museum",
		"timekeeping.museum",
		"topology.museum",
		"torino.museum",
		"touch.museum",
		"town.museum",
		"transport.museum",
		"tree.museum",
		"trolley.museum",
		"trust.museum",
		"trustee.museum",
		"uhren.museum",
		"ulm.museum",
		"undersea.museum",
		"university.museum",
		"usa.museum",
		"usantiques.museum",
		"usarts.museum",
		"uscountryestate.museum",
		"usculture.museum",
		"usdecorativearts.museum",
		"usgarden.museum",
		"ushistory.museum",
		"ushuaia.museum",
		"uslivinghistory.museum",
		"utah.museum",
		"uvic.museum",
		"valley.museum",
		"vantaa.museum",
		"versailles.museum",
		"viking.museum",
		"village.museum",
		"virginia.museum",
		"virtual.museum",
		"virtuel.museum",
		"vlaanderen.museum",
		"volkenkunde.museum",
		"wales.museum",
		"wallonie.museum",
		"war.museum",
		"washingtondc.museum",
		"watchandclock.museum",
		"watch-and-clock.museum",
		"western.museum",
		"westfalen.museum",
		"whaling.museum",
		"wildlife.museum",
		"williamsburg.museum",
		"windmill.museum",
		"workshop.museum",
		"york.museum",
		"yorkshire.museum",
		"yosemite.museum",
		"youth.museum",
		"zoological.museum",
		"zoology.museum",
		"ירושלים.museum",
		"иком.museum",
		"mv",
		"aero.mv",
		"biz.mv",
		"com.mv",
		"coop.mv",
		"edu.mv",
		"gov.mv",
		"info.mv",
		"int.mv",
		"mil.mv",
		"museum.mv",
		"name.mv",
		"net.mv",
		"org.mv",
		"pro.mv",
		"mw",
		"ac.mw",
		"biz.mw",
		"co.mw",
		"com.mw",
		"coop.mw",
		"edu.mw",
		"gov.mw",
		"int.mw",
		"museum.mw",
		"net.mw",
		"org.mw",
		"mx",
		"com.mx",
		"org.mx",
		"gob.mx",
		"edu.mx",
		"net.mx",
		"my",
		"com.my",
		"net.my",
		"org.my",
		"gov.my",
		"edu.my",
		"mil.my",
		"name.my",
		"mz",
		"ac.mz",
		"adv.mz",
		"co.mz",
		"edu.mz",
		"gov.mz",
		"mil.mz",
		"net.mz",
		"org.mz",
		"na",
		"info.na",
		"pro.na",
		"name.na",
		"school.na",
		"or.na",
		"dr.na",
		"us.na",
		"mx.na",
		"ca.na",
		"in.na",
		"cc.na",
		"tv.na",
		"ws.na",
		"mobi.na",
		"co.na",
		"com.na",
		"org.na",
		"name",
		"nc",
		"asso.nc",
		"nom.nc",
		"ne",
		"net",
		"nf",
		"com.nf",
		"net.nf",
		"per.nf",
		"rec.nf",
		"web.nf",
		"arts.nf",
		"firm.nf",
		"info.nf",
		"other.nf",
		"store.nf",
		"ng",
		"com.ng",
		"edu.ng",
		"gov.ng",
		"i.ng",
		"mil.ng",
		"mobi.ng",
		"name.ng",
		"net.ng",
		"org.ng",
		"sch.ng",
		"ni",
		"ac.ni",
		"biz.ni",
		"co.ni",
		"com.ni",
		"edu.ni",
		"gob.ni",
		"in.ni",
		"info.ni",
		"int.ni",
		"mil.ni",
		"net.ni",
		"nom.ni",
		"org.ni",
		"web.ni",
		"nl",
		"no",
		"fhs.no",
		"vgs.no",
		"fylkesbibl.no",
		"folkebibl.no",
		"museum.no",
		"idrett.no",
		"priv.no",
		"mil.no",
		"stat.no",
		"dep.no",
		"kommune.no",
		"herad.no",
		"aa.no",
		"ah.no",
		"bu.no",
		"fm.no",
		"hl.no",
		"hm.no",
		"jan-mayen.no",
		"mr.no",
		"nl.no",
		"nt.no",
		"of.no",
		"ol.no",
		"oslo.no",
		"rl.no",
		"sf.no",
		"st.no",
		"svalbard.no",
		"tm.no",
		"tr.no",
		"va.no",
		"vf.no",
		"gs.aa.no",
		"gs.ah.no",
		"gs.bu.no",
		"gs.fm.no",
		"gs.hl.no",
		"gs.hm.no",
		"gs.jan-mayen.no",
		"gs.mr.no",
		"gs.nl.no",
		"gs.nt.no",
		"gs.of.no",
		"gs.ol.no",
		"gs.oslo.no",
		"gs.rl.no",
		"gs.sf.no",
		"gs.st.no",
		"gs.svalbard.no",
		"gs.tm.no",
		"gs.tr.no",
		"gs.va.no",
		"gs.vf.no",
		"akrehamn.no",
		"åkrehamn.no",
		"algard.no",
		"ålgård.no",
		"arna.no",
		"brumunddal.no",
		"bryne.no",
		"bronnoysund.no",
		"brønnøysund.no",
		"drobak.no",
		"drøbak.no",
		"egersund.no",
		"fetsund.no",
		"floro.no",
		"florø.no",
		"fredrikstad.no",
		"hokksund.no",
		"honefoss.no",
		"hønefoss.no",
		"jessheim.no",
		"jorpeland.no",
		"jørpeland.no",
		"kirkenes.no",
		"kopervik.no",
		"krokstadelva.no",
		"langevag.no",
		"langevåg.no",
		"leirvik.no",
		"mjondalen.no",
		"mjøndalen.no",
		"mo-i-rana.no",
		"mosjoen.no",
		"mosjøen.no",
		"nesoddtangen.no",
		"orkanger.no",
		"osoyro.no",
		"osøyro.no",
		"raholt.no",
		"råholt.no",
		"sandnessjoen.no",
		"sandnessjøen.no",
		"skedsmokorset.no",
		"slattum.no",
		"spjelkavik.no",
		"stathelle.no",
		"stavern.no",
		"stjordalshalsen.no",
		"stjørdalshalsen.no",
		"tananger.no",
		"tranby.no",
		"vossevangen.no",
		"afjord.no",
		"åfjord.no",
		"agdenes.no",
		"al.no",
		"ål.no",
		"alesund.no",
		"ålesund.no",
		"alstahaug.no",
		"alta.no",
		"áltá.no",
		"alaheadju.no",
		"álaheadju.no",
		"alvdal.no",
		"amli.no",
		"åmli.no",
		"amot.no",
		"åmot.no",
		"andebu.no",
		"andoy.no",
		"andøy.no",
		"andasuolo.no",
		"ardal.no",
		"årdal.no",
		"aremark.no",
		"arendal.no",
		"ås.no",
		"aseral.no",
		"åseral.no",
		"asker.no",
		"askim.no",
		"askvoll.no",
		"askoy.no",
		"askøy.no",
		"asnes.no",
		"åsnes.no",
		"audnedaln.no",
		"aukra.no",
		"aure.no",
		"aurland.no",
		"aurskog-holand.no",
		"aurskog-høland.no",
		"austevoll.no",
		"austrheim.no",
		"averoy.no",
		"averøy.no",
		"balestrand.no",
		"ballangen.no",
		"balat.no",
		"bálát.no",
		"balsfjord.no",
		"bahccavuotna.no",
		"báhccavuotna.no",
		"bamble.no",
		"bardu.no",
		"beardu.no",
		"beiarn.no",
		"bajddar.no",
		"bájddar.no",
		"baidar.no",
		"báidár.no",
		"berg.no",
		"bergen.no",
		"berlevag.no",
		"berlevåg.no",
		"bearalvahki.no",
		"bearalváhki.no",
		"bindal.no",
		"birkenes.no",
		"bjarkoy.no",
		"bjarkøy.no",
		"bjerkreim.no",
		"bjugn.no",
		"bodo.no",
		"bodø.no",
		"badaddja.no",
		"bådåddjå.no",
		"budejju.no",
		"bokn.no",
		"bremanger.no",
		"bronnoy.no",
		"brønnøy.no",
		"bygland.no",
		"bykle.no",
		"barum.no",
		"bærum.no",
		"bo.telemark.no",
		"bø.telemark.no",
		"bo.nordland.no",
		"bø.nordland.no",
		"bievat.no",
		"bievát.no",
		"bomlo.no",
		"bømlo.no",
		"batsfjord.no",
		"båtsfjord.no",
		"bahcavuotna.no",
		"báhcavuotna.no",
		"dovre.no",
		"drammen.no",
		"drangedal.no",
		"dyroy.no",
		"dyrøy.no",
		"donna.no",
		"dønna.no",
		"eid.no",
		"eidfjord.no",
		"eidsberg.no",
		"eidskog.no",
		"eidsvoll.no",
		"eigersund.no",
		"elverum.no",
		"enebakk.no",
		"engerdal.no",
		"etne.no",
		"etnedal.no",
		"evenes.no",
		"evenassi.no",
		"evenášši.no",
		"evje-og-hornnes.no",
		"farsund.no",
		"fauske.no",
		"fuossko.no",
		"fuoisku.no",
		"fedje.no",
		"fet.no",
		"finnoy.no",
		"finnøy.no",
		"fitjar.no",
		"fjaler.no",
		"fjell.no",
		"flakstad.no",
		"flatanger.no",
		"flekkefjord.no",
		"flesberg.no",
		"flora.no",
		"fla.no",
		"flå.no",
		"folldal.no",
		"forsand.no",
		"fosnes.no",
		"frei.no",
		"frogn.no",
		"froland.no",
		"frosta.no",
		"frana.no",
		"fræna.no",
		"froya.no",
		"frøya.no",
		"fusa.no",
		"fyresdal.no",
		"forde.no",
		"førde.no",
		"gamvik.no",
		"gangaviika.no",
		"gáŋgaviika.no",
		"gaular.no",
		"gausdal.no",
		"gildeskal.no",
		"gildeskål.no",
		"giske.no",
		"gjemnes.no",
		"gjerdrum.no",
		"gjerstad.no",
		"gjesdal.no",
		"gjovik.no",
		"gjøvik.no",
		"gloppen.no",
		"gol.no",
		"gran.no",
		"grane.no",
		"granvin.no",
		"gratangen.no",
		"grimstad.no",
		"grong.no",
		"kraanghke.no",
		"kråanghke.no",
		"grue.no",
		"gulen.no",
		"hadsel.no",
		"halden.no",
		"halsa.no",
		"hamar.no",
		"hamaroy.no",
		"habmer.no",
		"hábmer.no",
		"hapmir.no",
		"hápmir.no",
		"hammerfest.no",
		"hammarfeasta.no",
		"hámmárfeasta.no",
		"haram.no",
		"hareid.no",
		"harstad.no",
		"hasvik.no",
		"aknoluokta.no",
		"ákŋoluokta.no",
		"hattfjelldal.no",
		"aarborte.no",
		"haugesund.no",
		"hemne.no",
		"hemnes.no",
		"hemsedal.no",
		"heroy.more-og-romsdal.no",
		"herøy.møre-og-romsdal.no",
		"heroy.nordland.no",
		"herøy.nordland.no",
		"hitra.no",
		"hjartdal.no",
		"hjelmeland.no",
		"hobol.no",
		"hobøl.no",
		"hof.no",
		"hol.no",
		"hole.no",
		"holmestrand.no",
		"holtalen.no",
		"holtålen.no",
		"hornindal.no",
		"horten.no",
		"hurdal.no",
		"hurum.no",
		"hvaler.no",
		"hyllestad.no",
		"hagebostad.no",
		"hægebostad.no",
		"hoyanger.no",
		"høyanger.no",
		"hoylandet.no",
		"høylandet.no",
		"ha.no",
		"hå.no",
		"ibestad.no",
		"inderoy.no",
		"inderøy.no",
		"iveland.no",
		"jevnaker.no",
		"jondal.no",
		"jolster.no",
		"jølster.no",
		"karasjok.no",
		"karasjohka.no",
		"kárášjohka.no",
		"karlsoy.no",
		"galsa.no",
		"gálsá.no",
		"karmoy.no",
		"karmøy.no",
		"kautokeino.no",
		"guovdageaidnu.no",
		"klepp.no",
		"klabu.no",
		"klæbu.no",
		"kongsberg.no",
		"kongsvinger.no",
		"kragero.no",
		"kragerø.no",
		"kristiansand.no",
		"kristiansund.no",
		"krodsherad.no",
		"krødsherad.no",
		"kvalsund.no",
		"rahkkeravju.no",
		"ráhkkerávju.no",
		"kvam.no",
		"kvinesdal.no",
		"kvinnherad.no",
		"kviteseid.no",
		"kvitsoy.no",
		"kvitsøy.no",
		"kvafjord.no",
		"kvæfjord.no",
		"giehtavuoatna.no",
		"kvanangen.no",
		"kvænangen.no",
		"navuotna.no",
		"návuotna.no",
		"kafjord.no",
		"kåfjord.no",
		"gaivuotna.no",
		"gáivuotna.no",
		"larvik.no",
		"lavangen.no",
		"lavagis.no",
		"loabat.no",
		"loabát.no",
		"lebesby.no",
		"davvesiida.no",
		"leikanger.no",
		"leirfjord.no",
		"leka.no",
		"leksvik.no",
		"lenvik.no",
		"leangaviika.no",
		"leaŋgaviika.no",
		"lesja.no",
		"levanger.no",
		"lier.no",
		"lierne.no",
		"lillehammer.no",
		"lillesand.no",
		"lindesnes.no",
		"lindas.no",
		"lindås.no",
		"lom.no",
		"loppa.no",
		"lahppi.no",
		"láhppi.no",
		"lund.no",
		"lunner.no",
		"luroy.no",
		"lurøy.no",
		"luster.no",
		"lyngdal.no",
		"lyngen.no",
		"ivgu.no",
		"lardal.no",
		"lerdal.no",
		"lærdal.no",
		"lodingen.no",
		"lødingen.no",
		"lorenskog.no",
		"lørenskog.no",
		"loten.no",
		"løten.no",
		"malvik.no",
		"masoy.no",
		"måsøy.no",
		"muosat.no",
		"muosát.no",
		"mandal.no",
		"marker.no",
		"marnardal.no",
		"masfjorden.no",
		"meland.no",
		"meldal.no",
		"melhus.no",
		"meloy.no",
		"meløy.no",
		"meraker.no",
		"meråker.no",
		"moareke.no",
		"moåreke.no",
		"midsund.no",
		"midtre-gauldal.no",
		"modalen.no",
		"modum.no",
		"molde.no",
		"moskenes.no",
		"moss.no",
		"mosvik.no",
		"malselv.no",
		"målselv.no",
		"malatvuopmi.no",
		"málatvuopmi.no",
		"namdalseid.no",
		"aejrie.no",
		"namsos.no",
		"namsskogan.no",
		"naamesjevuemie.no",
		"nååmesjevuemie.no",
		"laakesvuemie.no",
		"nannestad.no",
		"narvik.no",
		"narviika.no",
		"naustdal.no",
		"nedre-eiker.no",
		"nes.akershus.no",
		"nes.buskerud.no",
		"nesna.no",
		"nesodden.no",
		"nesseby.no",
		"unjarga.no",
		"unjárga.no",
		"nesset.no",
		"nissedal.no",
		"nittedal.no",
		"nord-aurdal.no",
		"nord-fron.no",
		"nord-odal.no",
		"norddal.no",
		"nordkapp.no",
		"davvenjarga.no",
		"davvenjárga.no",
		"nordre-land.no",
		"nordreisa.no",
		"raisa.no",
		"ráisa.no",
		"nore-og-uvdal.no",
		"notodden.no",
		"naroy.no",
		"nærøy.no",
		"notteroy.no",
		"nøtterøy.no",
		"odda.no",
		"oksnes.no",
		"øksnes.no",
		"oppdal.no",
		"oppegard.no",
		"oppegård.no",
		"orkdal.no",
		"orland.no",
		"ørland.no",
		"orskog.no",
		"ørskog.no",
		"orsta.no",
		"ørsta.no",
		"os.hedmark.no",
		"os.hordaland.no",
		"osen.no",
		"osteroy.no",
		"osterøy.no",
		"ostre-toten.no",
		"østre-toten.no",
		"overhalla.no",
		"ovre-eiker.no",
		"øvre-eiker.no",
		"oyer.no",
		"øyer.no",
		"oygarden.no",
		"øygarden.no",
		"oystre-slidre.no",
		"øystre-slidre.no",
		"porsanger.no",
		"porsangu.no",
		"porsáŋgu.no",
		"porsgrunn.no",
		"radoy.no",
		"radøy.no",
		"rakkestad.no",
		"rana.no",
		"ruovat.no",
		"randaberg.no",
		"rauma.no",
		"rendalen.no",
		"rennebu.no",
		"rennesoy.no",
		"rennesøy.no",
		"rindal.no",
		"ringebu.no",
		"ringerike.no",
		"ringsaker.no",
		"rissa.no",
		"risor.no",
		"risør.no",
		"roan.no",
		"rollag.no",
		"rygge.no",
		"ralingen.no",
		"rælingen.no",
		"rodoy.no",
		"rødøy.no",
		"romskog.no",
		"rømskog.no",
		"roros.no",
		"røros.no",
		"rost.no",
		"røst.no",
		"royken.no",
		"røyken.no",
		"royrvik.no",
		"røyrvik.no",
		"rade.no",
		"råde.no",
		"salangen.no",
		"siellak.no",
		"saltdal.no",
		"salat.no",
		"sálát.no",
		"sálat.no",
		"samnanger.no",
		"sande.more-og-romsdal.no",
		"sande.møre-og-romsdal.no",
		"sande.vestfold.no",
		"sandefjord.no",
		"sandnes.no",
		"sandoy.no",
		"sandøy.no",
		"sarpsborg.no",
		"sauda.no",
		"sauherad.no",
		"sel.no",
		"selbu.no",
		"selje.no",
		"seljord.no",
		"sigdal.no",
		"siljan.no",
		"sirdal.no",
		"skaun.no",
		"skedsmo.no",
		"ski.no",
		"skien.no",
		"skiptvet.no",
		"skjervoy.no",
		"skjervøy.no",
		"skierva.no",
		"skiervá.no",
		"skjak.no",
		"skjåk.no",
		"skodje.no",
		"skanland.no",
		"skånland.no",
		"skanit.no",
		"skánit.no",
		"smola.no",
		"smøla.no",
		"snillfjord.no",
		"snasa.no",
		"snåsa.no",
		"snoasa.no",
		"snaase.no",
		"snåase.no",
		"sogndal.no",
		"sokndal.no",
		"sola.no",
		"solund.no",
		"songdalen.no",
		"sortland.no",
		"spydeberg.no",
		"stange.no",
		"stavanger.no",
		"steigen.no",
		"steinkjer.no",
		"stjordal.no",
		"stjørdal.no",
		"stokke.no",
		"stor-elvdal.no",
		"stord.no",
		"stordal.no",
		"storfjord.no",
		"omasvuotna.no",
		"strand.no",
		"stranda.no",
		"stryn.no",
		"sula.no",
		"suldal.no",
		"sund.no",
		"sunndal.no",
		"surnadal.no",
		"sveio.no",
		"svelvik.no",
		"sykkylven.no",
		"sogne.no",
		"søgne.no",
		"somna.no",
		"sømna.no",
		"sondre-land.no",
		"søndre-land.no",
		"sor-aurdal.no",
		"sør-aurdal.no",
		"sor-fron.no",
		"sør-fron.no",
		"sor-odal.no",
		"sør-odal.no",
		"sor-varanger.no",
		"sør-varanger.no",
		"matta-varjjat.no",
		"mátta-várjjat.no",
		"sorfold.no",
		"sørfold.no",
		"sorreisa.no",
		"sørreisa.no",
		"sorum.no",
		"sørum.no",
		"tana.no",
		"deatnu.no",
		"time.no",
		"tingvoll.no",
		"tinn.no",
		"tjeldsund.no",
		"dielddanuorri.no",
		"tjome.no",
		"tjøme.no",
		"tokke.no",
		"tolga.no",
		"torsken.no",
		"tranoy.no",
		"tranøy.no",
		"tromso.no",
		"tromsø.no",
		"tromsa.no",
		"romsa.no",
		"trondheim.no",
		"troandin.no",
		"trysil.no",
		"trana.no",
		"træna.no",
		"trogstad.no",
		"trøgstad.no",
		"tvedestrand.no",
		"tydal.no",
		"tynset.no",
		"tysfjord.no",
		"divtasvuodna.no",
		"divttasvuotna.no",
		"tysnes.no",
		"tysvar.no",
		"tysvær.no",
		"tonsberg.no",
		"tønsberg.no",
		"ullensaker.no",
		"ullensvang.no",
		"ulvik.no",
		"utsira.no",
		"vadso.no",
		"vadsø.no",
		"cahcesuolo.no",
		"čáhcesuolo.no",
		"vaksdal.no",
		"valle.no",
		"vang.no",
		"vanylven.no",
		"vardo.no",
		"vardø.no",
		"varggat.no",
		"várggát.no",
		"vefsn.no",
		"vaapste.no",
		"vega.no",
		"vegarshei.no",
		"vegårshei.no",
		"vennesla.no",
		"verdal.no",
		"verran.no",
		"vestby.no",
		"vestnes.no",
		"vestre-slidre.no",
		"vestre-toten.no",
		"vestvagoy.no",
		"vestvågøy.no",
		"vevelstad.no",
		"vik.no",
		"vikna.no",
		"vindafjord.no",
		"volda.no",
		"voss.no",
		"varoy.no",
		"værøy.no",
		"vagan.no",
		"vågan.no",
		"voagat.no",
		"vagsoy.no",
		"vågsøy.no",
		"vaga.no",
		"vågå.no",
		"valer.ostfold.no",
		"våler.østfold.no",
		"valer.hedmark.no",
		"våler.hedmark.no",
		"*.np",
		"nr",
		"biz.nr",
		"info.nr",
		"gov.nr",
		"edu.nr",
		"org.nr",
		"net.nr",
		"com.nr",
		"nu",
		"nz",
		"ac.nz",
		"co.nz",
		"cri.nz",
		"geek.nz",
		"gen.nz",
		"govt.nz",
		"health.nz",
		"iwi.nz",
		"kiwi.nz",
		"maori.nz",
		"mil.nz",
		"māori.nz",
		"net.nz",
		"org.nz",
		"parliament.nz",
		"school.nz",
		"om",
		"co.om",
		"com.om",
		"edu.om",
		"gov.om",
		"med.om",
		"museum.om",
		"net.om",
		"org.om",
		"pro.om",
		"onion",
		"org",
		"pa",
		"ac.pa",
		"gob.pa",
		"com.pa",
		"org.pa",
		"sld.pa",
		"edu.pa",
		"net.pa",
		"ing.pa",
		"abo.pa",
		"med.pa",
		"nom.pa",
		"pe",
		"edu.pe",
		"gob.pe",
		"nom.pe",
		"mil.pe",
		"org.pe",
		"com.pe",
		"net.pe",
		"pf",
		"com.pf",
		"org.pf",
		"edu.pf",
		"*.pg",
		"ph",
		"com.ph",
		"net.ph",
		"org.ph",
		"gov.ph",
		"edu.ph",
		"ngo.ph",
		"mil.ph",
		"i.ph",
		"pk",
		"com.pk",
		"net.pk",
		"edu.pk",
		"org.pk",
		"fam.pk",
		"biz.pk",
		"web.pk",
		"gov.pk",
		"gob.pk",
		"gok.pk",
		"gon.pk",
		"gop.pk",
		"gos.pk",
		"info.pk",
		"pl",
		"com.pl",
		"net.pl",
		"org.pl",
		"aid.pl",
		"agro.pl",
		"atm.pl",
		"auto.pl",
		"biz.pl",
		"edu.pl",
		"gmina.pl",
		"gsm.pl",
		"info.pl",
		"mail.pl",
		"miasta.pl",
		"media.pl",
		"mil.pl",
		"nieruchomosci.pl",
		"nom.pl",
		"pc.pl",
		"powiat.pl",
		"priv.pl",
		"realestate.pl",
		"rel.pl",
		"sex.pl",
		"shop.pl",
		"sklep.pl",
		"sos.pl",
		"szkola.pl",
		"targi.pl",
		"tm.pl",
		"tourism.pl",
		"travel.pl",
		"turystyka.pl",
		"gov.pl",
		"ap.gov.pl",
		"ic.gov.pl",
		"is.gov.pl",
		"us.gov.pl",
		"kmpsp.gov.pl",
		"kppsp.gov.pl",
		"kwpsp.gov.pl",
		"psp.gov.pl",
		"wskr.gov.pl",
		"kwp.gov.pl",
		"mw.gov.pl",
		"ug.gov.pl",
		"um.gov.pl",
		"umig.gov.pl",
		"ugim.gov.pl",
		"upow.gov.pl",
		"uw.gov.pl",
		"starostwo.gov.pl",
		"pa.gov.pl",
		"po.gov.pl",
		"psse.gov.pl",
		"pup.gov.pl",
		"rzgw.gov.pl",
		"sa.gov.pl",
		"so.gov.pl",
		"sr.gov.pl",
		"wsa.gov.pl",
		"sko.gov.pl",
		"uzs.gov.pl",
		"wiih.gov.pl",
		"winb.gov.pl",
		"pinb.gov.pl",
		"wios.gov.pl",
		"witd.gov.pl",
		"wzmiuw.gov.pl",
		"piw.gov.pl",
		"wiw.gov.pl",
		"griw.gov.pl",
		"wif.gov.pl",
		"oum.gov.pl",
		"sdn.gov.pl",
		"zp.gov.pl",
		"uppo.gov.pl",
		"mup.gov.pl",
		"wuoz.gov.pl",
		"konsulat.gov.pl",
		"oirm.gov.pl",
		"augustow.pl",
		"babia-gora.pl",
		"bedzin.pl",
		"beskidy.pl",
		"bialowieza.pl",
		"bialystok.pl",
		"bielawa.pl",
		"bieszczady.pl",
		"boleslawiec.pl",
		"bydgoszcz.pl",
		"bytom.pl",
		"cieszyn.pl",
		"czeladz.pl",
		"czest.pl",
		"dlugoleka.pl",
		"elblag.pl",
		"elk.pl",
		"glogow.pl",
		"gniezno.pl",
		"gorlice.pl",
		"grajewo.pl",
		"ilawa.pl",
		"jaworzno.pl",
		"jelenia-gora.pl",
		"jgora.pl",
		"kalisz.pl",
		"kazimierz-dolny.pl",
		"karpacz.pl",
		"kartuzy.pl",
		"kaszuby.pl",
		"katowice.pl",
		"kepno.pl",
		"ketrzyn.pl",
		"klodzko.pl",
		"kobierzyce.pl",
		"kolobrzeg.pl",
		"konin.pl",
		"konskowola.pl",
		"kutno.pl",
		"lapy.pl",
		"lebork.pl",
		"legnica.pl",
		"lezajsk.pl",
		"limanowa.pl",
		"lomza.pl",
		"lowicz.pl",
		"lubin.pl",
		"lukow.pl",
		"malbork.pl",
		"malopolska.pl",
		"mazowsze.pl",
		"mazury.pl",
		"mielec.pl",
		"mielno.pl",
		"mragowo.pl",
		"naklo.pl",
		"nowaruda.pl",
		"nysa.pl",
		"olawa.pl",
		"olecko.pl",
		"olkusz.pl",
		"olsztyn.pl",
		"opoczno.pl",
		"opole.pl",
		"ostroda.pl",
		"ostroleka.pl",
		"ostrowiec.pl",
		"ostrowwlkp.pl",
		"pila.pl",
		"pisz.pl",
		"podhale.pl",
		"podlasie.pl",
		"polkowice.pl",
		"pomorze.pl",
		"pomorskie.pl",
		"prochowice.pl",
		"pruszkow.pl",
		"przeworsk.pl",
		"pulawy.pl",
		"radom.pl",
		"rawa-maz.pl",
		"rybnik.pl",
		"rzeszow.pl",
		"sanok.pl",
		"sejny.pl",
		"slask.pl",
		"slupsk.pl",
		"sosnowiec.pl",
		"stalowa-wola.pl",
		"skoczow.pl",
		"starachowice.pl",
		"stargard.pl",
		"suwalki.pl",
		"swidnica.pl",
		"swiebodzin.pl",
		"swinoujscie.pl",
		"szczecin.pl",
		"szczytno.pl",
		"tarnobrzeg.pl",
		"tgory.pl",
		"turek.pl",
		"tychy.pl",
		"ustka.pl",
		"walbrzych.pl",
		"warmia.pl",
		"warszawa.pl",
		"waw.pl",
		"wegrow.pl",
		"wielun.pl",
		"wlocl.pl",
		"wloclawek.pl",
		"wodzislaw.pl",
		"wolomin.pl",
		"wroclaw.pl",
		"zachpomor.pl",
		"zagan.pl",
		"zarow.pl",
		"zgora.pl",
		"zgorzelec.pl",
		"pm",
		"pn",
		"gov.pn",
		"co.pn",
		"org.pn",
		"edu.pn",
		"net.pn",
		"post",
		"pr",
		"com.pr",
		"net.pr",
		"org.pr",
		"gov.pr",
		"edu.pr",
		"isla.pr",
		"pro.pr",
		"biz.pr",
		"info.pr",
		"name.pr",
		"est.pr",
		"prof.pr",
		"ac.pr",
		"pro",
		"aaa.pro",
		"aca.pro",
		"acct.pro",
		"avocat.pro",
		"bar.pro",
		"cpa.pro",
		"eng.pro",
		"jur.pro",
		"law.pro",
		"med.pro",
		"recht.pro",
		"ps",
		"edu.ps",
		"gov.ps",
		"sec.ps",
		"plo.ps",
		"com.ps",
		"org.ps",
		"net.ps",
		"pt",
		"net.pt",
		"gov.pt",
		"org.pt",
		"edu.pt",
		"int.pt",
		"publ.pt",
		"com.pt",
		"nome.pt",
		"pw",
		"co.pw",
		"ne.pw",
		"or.pw",
		"ed.pw",
		"go.pw",
		"belau.pw",
		"py",
		"com.py",
		"coop.py",
		"edu.py",
		"gov.py",
		"mil.py",
		"net.py",
		"org.py",
		"qa",
		"com.qa",
		"edu.qa",
		"gov.qa",
		"mil.qa",
		"name.qa",
		"net.qa",
		"org.qa",
		"sch.qa",
		"re",
		"asso.re",
		"com.re",
		"nom.re",
		"ro",
		"arts.ro",
		"com.ro",
		"firm.ro",
		"info.ro",
		"nom.ro",
		"nt.ro",
		"org.ro",
		"rec.ro",
		"store.ro",
		"tm.ro",
		"www.ro",
		"rs",
		"ac.rs",
		"co.rs",
		"edu.rs",
		"gov.rs",
		"in.rs",
		"org.rs",
		"ru",
		"rw",
		"ac.rw",
		"co.rw",
		"coop.rw",
		"gov.rw",
		"mil.rw",
		"net.rw",
		"org.rw",
		"sa",
		"com.sa",
		"net.sa",
		"org.sa",
		"gov.sa",
		"med.sa",
		"pub.sa",
		"edu.sa",
		"sch.sa",
		"sb",
		"com.sb",
		"edu.sb",
		"gov.sb",
		"net.sb",
		"org.sb",
		"sc",
		"com.sc",
		"gov.sc",
		"net.sc",
		"org.sc",
		"edu.sc",
		"sd",
		"com.sd",
		"net.sd",
		"org.sd",
		"edu.sd",
		"med.sd",
		"tv.sd",
		"gov.sd",
		"info.sd",
		"se",
		"a.se",
		"ac.se",
		"b.se",
		"bd.se",
		"brand.se",
		"c.se",
		"d.se",
		"e.se",
		"f.se",
		"fh.se",
		"fhsk.se",
		"fhv.se",
		"g.se",
		"h.se",
		"i.se",
		"k.se",
		"komforb.se",
		"kommunalforbund.se",
		"komvux.se",
		"l.se",
		"lanbib.se",
		"m.se",
		"n.se",
		"naturbruksgymn.se",
		"o.se",
		"org.se",
		"p.se",
		"parti.se",
		"pp.se",
		"press.se",
		"r.se",
		"s.se",
		"t.se",
		"tm.se",
		"u.se",
		"w.se",
		"x.se",
		"y.se",
		"z.se",
		"sg",
		"com.sg",
		"net.sg",
		"org.sg",
		"gov.sg",
		"edu.sg",
		"per.sg",
		"sh",
		"com.sh",
		"net.sh",
		"gov.sh",
		"org.sh",
		"mil.sh",
		"si",
		"sj",
		"sk",
		"sl",
		"com.sl",
		"net.sl",
		"edu.sl",
		"gov.sl",
		"org.sl",
		"sm",
		"sn",
		"art.sn",
		"com.sn",
		"edu.sn",
		"gouv.sn",
		"org.sn",
		"perso.sn",
		"univ.sn",
		"so",
		"com.so",
		"edu.so",
		"gov.so",
		"me.so",
		"net.so",
		"org.so",
		"sr",
		"ss",
		"biz.ss",
		"com.ss",
		"edu.ss",
		"gov.ss",
		"net.ss",
		"org.ss",
		"st",
		"co.st",
		"com.st",
		"consulado.st",
		"edu.st",
		"embaixada.st",
		"gov.st",
		"mil.st",
		"net.st",
		"org.st",
		"principe.st",
		"saotome.st",
		"store.st",
		"su",
		"sv",
		"com.sv",
		"edu.sv",
		"gob.sv",
		"org.sv",
		"red.sv",
		"sx",
		"gov.sx",
		"sy",
		"edu.sy",
		"gov.sy",
		"net.sy",
		"mil.sy",
		"com.sy",
		"org.sy",
		"sz",
		"co.sz",
		"ac.sz",
		"org.sz",
		"tc",
		"td",
		"tel",
		"tf",
		"tg",
		"th",
		"ac.th",
		"co.th",
		"go.th",
		"in.th",
		"mi.th",
		"net.th",
		"or.th",
		"tj",
		"ac.tj",
		"biz.tj",
		"co.tj",
		"com.tj",
		"edu.tj",
		"go.tj",
		"gov.tj",
		"int.tj",
		"mil.tj",
		"name.tj",
		"net.tj",
		"nic.tj",
		"org.tj",
		"test.tj",
		"web.tj",
		"tk",
		"tl",
		"gov.tl",
		"tm",
		"com.tm",
		"co.tm",
		"org.tm",
		"net.tm",
		"nom.tm",
		"gov.tm",
		"mil.tm",
		"edu.tm",
		"tn",
		"com.tn",
		"ens.tn",
		"fin.tn",
		"gov.tn",
		"ind.tn",
		"intl.tn",
		"nat.tn",
		"net.tn",
		"org.tn",
		"info.tn",
		"perso.tn",
		"tourism.tn",
		"edunet.tn",
		"rnrt.tn",
		"rns.tn",
		"rnu.tn",
		"mincom.tn",
		"agrinet.tn",
		"defense.tn",
		"turen.tn",
		"to",
		"com.to",
		"gov.to",
		"net.to",
		"org.to",
		"edu.to",
		"mil.to",
		"tr",
		"av.tr",
		"bbs.tr",
		"bel.tr",
		"biz.tr",
		"com.tr",
		"dr.tr",
		"edu.tr",
		"gen.tr",
		"gov.tr",
		"info.tr",
		"mil.tr",
		"k12.tr",
		"kep.tr",
		"name.tr",
		"net.tr",
		"org.tr",
		"pol.tr",
		"tel.tr",
		"tsk.tr",
		"tv.tr",
		"web.tr",
		"nc.tr",
		"gov.nc.tr",
		"tt",
		"co.tt",
		"com.tt",
		"org.tt",
		"net.tt",
		"biz.tt",
		"info.tt",
		"pro.tt",
		"int.tt",
		"coop.tt",
		"jobs.tt",
		"mobi.tt",
		"travel.tt",
		"museum.tt",
		"aero.tt",
		"name.tt",
		"gov.tt",
		"edu.tt",
		"tv",
		"tw",
		"edu.tw",
		"gov.tw",
		"mil.tw",
		"com.tw",
		"net.tw",
		"org.tw",
		"idv.tw",
		"game.tw",
		"ebiz.tw",
		"club.tw",
		"網路.tw",
		"組織.tw",
		"商業.tw",
		"tz",
		"ac.tz",
		"co.tz",
		"go.tz",
		"hotel.tz",
		"info.tz",
		"me.tz",
		"mil.tz",
		"mobi.tz",
		"ne.tz",
		"or.tz",
		"sc.tz",
		"tv.tz",
		"ua",
		"com.ua",
		"edu.ua",
		"gov.ua",
		"in.ua",
		"net.ua",
		"org.ua",
		"cherkassy.ua",
		"cherkasy.ua",
		"chernigov.ua",
		"chernihiv.ua",
		"chernivtsi.ua",
		"chernovtsy.ua",
		"ck.ua",
		"cn.ua",
		"cr.ua",
		"crimea.ua",
		"cv.ua",
		"dn.ua",
		"dnepropetrovsk.ua",
		"dnipropetrovsk.ua",
		"dominic.ua",
		"donetsk.ua",
		"dp.ua",
		"if.ua",
		"ivano-frankivsk.ua",
		"kh.ua",
		"kharkiv.ua",
		"kharkov.ua",
		"kherson.ua",
		"khmelnitskiy.ua",
		"khmelnytskyi.ua",
		"kiev.ua",
		"kirovograd.ua",
		"km.ua",
		"kr.ua",
		"krym.ua",
		"ks.ua",
		"kv.ua",
		"kyiv.ua",
		"lg.ua",
		"lt.ua",
		"lugansk.ua",
		"lutsk.ua",
		"lv.ua",
		"lviv.ua",
		"mk.ua",
		"mykolaiv.ua",
		"nikolaev.ua",
		"od.ua",
		"odesa.ua",
		"odessa.ua",
		"pl.ua",
		"poltava.ua",
		"rivne.ua",
		"rovno.ua",
		"rv.ua",
		"sb.ua",
		"sebastopol.ua",
		"sevastopol.ua",
		"sm.ua",
		"sumy.ua",
		"te.ua",
		"ternopil.ua",
		"uz.ua",
		"uzhgorod.ua",
		"vinnica.ua",
		"vinnytsia.ua",
		"vn.ua",
		"volyn.ua",
		"yalta.ua",
		"zaporizhzhe.ua",
		"zaporizhzhia.ua",
		"zhitomir.ua",
		"zhytomyr.ua",
		"zp.ua",
		"zt.ua",
		"ug",
		"co.ug",
		"or.ug",
		"ac.ug",
		"sc.ug",
		"go.ug",
		"ne.ug",
		"com.ug",
		"org.ug",
		"uk",
		"ac.uk",
		"co.uk",
		"gov.uk",
		"ltd.uk",
		"me.uk",
		"net.uk",
		"nhs.uk",
		"org.uk",
		"plc.uk",
		"police.uk",
		"*.sch.uk",
		"us",
		"dni.us",
		"fed.us",
		"isa.us",
		"kids.us",
		"nsn.us",
		"ak.us",
		"al.us",
		"ar.us",
		"as.us",
		"az.us",
		"ca.us",
		"co.us",
		"ct.us",
		"dc.us",
		"de.us",
		"fl.us",
		"ga.us",
		"gu.us",
		"hi.us",
		"ia.us",
		"id.us",
		"il.us",
		"in.us",
		"ks.us",
		"ky.us",
		"la.us",
		"ma.us",
		"md.us",
		"me.us",
		"mi.us",
		"mn.us",
		"mo.us",
		"ms.us",
		"mt.us",
		"nc.us",
		"nd.us",
		"ne.us",
		"nh.us",
		"nj.us",
		"nm.us",
		"nv.us",
		"ny.us",
		"oh.us",
		"ok.us",
		"or.us",
		"pa.us",
		"pr.us",
		"ri.us",
		"sc.us",
		"sd.us",
		"tn.us",
		"tx.us",
		"ut.us",
		"vi.us",
		"vt.us",
		"va.us",
		"wa.us",
		"wi.us",
		"wv.us",
		"wy.us",
		"k12.ak.us",
		"k12.al.us",
		"k12.ar.us",
		"k12.as.us",
		"k12.az.us",
		"k12.ca.us",
		"k12.co.us",
		"k12.ct.us",
		"k12.dc.us",
		"k12.de.us",
		"k12.fl.us",
		"k12.ga.us",
		"k12.gu.us",
		"k12.ia.us",
		"k12.id.us",
		"k12.il.us",
		"k12.in.us",
		"k12.ks.us",
		"k12.ky.us",
		"k12.la.us",
		"k12.ma.us",
		"k12.md.us",
		"k12.me.us",
		"k12.mi.us",
		"k12.mn.us",
		"k12.mo.us",
		"k12.ms.us",
		"k12.mt.us",
		"k12.nc.us",
		"k12.ne.us",
		"k12.nh.us",
		"k12.nj.us",
		"k12.nm.us",
		"k12.nv.us",
		"k12.ny.us",
		"k12.oh.us",
		"k12.ok.us",
		"k12.or.us",
		"k12.pa.us",
		"k12.pr.us",
		"k12.ri.us",
		"k12.sc.us",
		"k12.tn.us",
		"k12.tx.us",
		"k12.ut.us",
		"k12.vi.us",
		"k12.vt.us",
		"k12.va.us",
		"k12.wa.us",
		"k12.wi.us",
		"k12.wy.us",
		"cc.ak.us",
		"cc.al.us",
		"cc.ar.us",
		"cc.as.us",
		"cc.az.us",
		"cc.ca.us",
		"cc.co.us",
		"cc.ct.us",
		"cc.dc.us",
		"cc.de.us",
		"cc.fl.us",
		"cc.ga.us",
		"cc.gu.us",
		"cc.hi.us",
		"cc.ia.us",
		"cc.id.us",
		"cc.il.us",
		"cc.in.us",
		"cc.ks.us",
		"cc.ky.us",
		"cc.la.us",
		"cc.ma.us",
		"cc.md.us",
		"cc.me.us",
		"cc.mi.us",
		"cc.mn.us",
		"cc.mo.us",
		"cc.ms.us",
		"cc.mt.us",
		"cc.nc.us",
		"cc.nd.us",
		"cc.ne.us",
		"cc.nh.us",
		"cc.nj.us",
		"cc.nm.us",
		"cc.nv.us",
		"cc.ny.us",
		"cc.oh.us",
		"cc.ok.us",
		"cc.or.us",
		"cc.pa.us",
		"cc.pr.us",
		"cc.ri.us",
		"cc.sc.us",
		"cc.sd.us",
		"cc.tn.us",
		"cc.tx.us",
		"cc.ut.us",
		"cc.vi.us",
		"cc.vt.us",
		"cc.va.us",
		"cc.wa.us",
		"cc.wi.us",
		"cc.wv.us",
		"cc.wy.us",
		"lib.ak.us",
		"lib.al.us",
		"lib.ar.us",
		"lib.as.us",
		"lib.az.us",
		"lib.ca.us",
		"lib.co.us",
		"lib.ct.us",
		"lib.dc.us",
		"lib.fl.us",
		"lib.ga.us",
		"lib.gu.us",
		"lib.hi.us",
		"lib.ia.us",
		"lib.id.us",
		"lib.il.us",
		"lib.in.us",
		"lib.ks.us",
		"lib.ky.us",
		"lib.la.us",
		"lib.ma.us",
		"lib.md.us",
		"lib.me.us",
		"lib.mi.us",
		"lib.mn.us",
		"lib.mo.us",
		"lib.ms.us",
		"lib.mt.us",
		"lib.nc.us",
		"lib.nd.us",
		"lib.ne.us",
		"lib.nh.us",
		"lib.nj.us",
		"lib.nm.us",
		"lib.nv.us",
		"lib.ny.us",
		"lib.oh.us",
		"lib.ok.us",
		"lib.or.us",
		"lib.pa.us",
		"lib.pr.us",
		"lib.ri.us",
		"lib.sc.us",
		"lib.sd.us",
		"lib.tn.us",
		"lib.tx.us",
		"lib.ut.us",
		"lib.vi.us",
		"lib.vt.us",
		"lib.va.us",
		"lib.wa.us",
		"lib.wi.us",
		"lib.wy.us",
		"pvt.k12.ma.us",
		"chtr.k12.ma.us",
		"paroch.k12.ma.us",
		"ann-arbor.mi.us",
		"cog.mi.us",
		"dst.mi.us",
		"eaton.mi.us",
		"gen.mi.us",
		"mus.mi.us",
		"tec.mi.us",
		"washtenaw.mi.us",
		"uy",
		"com.uy",
		"edu.uy",
		"gub.uy",
		"mil.uy",
		"net.uy",
		"org.uy",
		"uz",
		"co.uz",
		"com.uz",
		"net.uz",
		"org.uz",
		"va",
		"vc",
		"com.vc",
		"net.vc",
		"org.vc",
		"gov.vc",
		"mil.vc",
		"edu.vc",
		"ve",
		"arts.ve",
		"co.ve",
		"com.ve",
		"e12.ve",
		"edu.ve",
		"firm.ve",
		"gob.ve",
		"gov.ve",
		"info.ve",
		"int.ve",
		"mil.ve",
		"net.ve",
		"org.ve",
		"rec.ve",
		"store.ve",
		"tec.ve",
		"web.ve",
		"vg",
		"vi",
		"co.vi",
		"com.vi",
		"k12.vi",
		"net.vi",
		"org.vi",
		"vn",
		"com.vn",
		"net.vn",
		"org.vn",
		"edu.vn",
		"gov.vn",
		"int.vn",
		"ac.vn",
		"biz.vn",
		"info.vn",
		"name.vn",
		"pro.vn",
		"health.vn",
		"vu",
		"com.vu",
		"edu.vu",
		"net.vu",
		"org.vu",
		"wf",
		"ws",
		"com.ws",
		"net.ws",
		"org.ws",
		"gov.ws",
		"edu.ws",
		"yt",
		"امارات",
		"հայ",
		"বাংলা",
		"бг",
		"бел",
		"中国",
		"中國",
		"الجزائر",
		"مصر",
		"ею",
		"ευ",
		"موريتانيا",
		"გე",
		"ελ",
		"香港",
		"公司.香港",
		"教育.香港",
		"政府.香港",
		"個人.香港",
		"網絡.香港",
		"組織.香港",
		"ಭಾರತ",
		"ଭାରତ",
		"ভাৰত",
		"भारतम्",
		"भारोत",
		"ڀارت",
		"ഭാരതം",
		"भारत",
		"بارت",
		"بھارت",
		"భారత్",
		"ભારત",
		"ਭਾਰਤ",
		"ভারত",
		"இந்தியா",
		"ایران",
		"ايران",
		"عراق",
		"الاردن",
		"한국",
		"қаз",
		"ලංකා",
		"இலங்கை",
		"المغرب",
		"мкд",
		"мон",
		"澳門",
		"澳门",
		"مليسيا",
		"عمان",
		"پاکستان",
		"پاكستان",
		"فلسطين",
		"срб",
		"пр.срб",
		"орг.срб",
		"обр.срб",
		"од.срб",
		"упр.срб",
		"ак.срб",
		"рф",
		"قطر",
		"السعودية",
		"السعودیة",
		"السعودیۃ",
		"السعوديه",
		"سودان",
		"新加坡",
		"சிங்கப்பூர்",
		"سورية",
		"سوريا",
		"ไทย",
		"ศึกษา.ไทย",
		"ธุรกิจ.ไทย",
		"รัฐบาล.ไทย",
		"ทหาร.ไทย",
		"เน็ต.ไทย",
		"องค์กร.ไทย",
		"تونس",
		"台灣",
		"台湾",
		"臺灣",
		"укр",
		"اليمن",
		"xxx",
		"*.ye",
		"ac.za",
		"agric.za",
		"alt.za",
		"co.za",
		"edu.za",
		"gov.za",
		"grondar.za",
		"law.za",
		"mil.za",
		"net.za",
		"ngo.za",
		"nic.za",
		"nis.za",
		"nom.za",
		"org.za",
		"school.za",
		"tm.za",
		"web.za",
		"zm",
		"ac.zm",
		"biz.zm",
		"co.zm",
		"com.zm",
		"edu.zm",
		"gov.zm",
		"info.zm",
		"mil.zm",
		"net.zm",
		"org.zm",
		"sch.zm",
		"zw",
		"ac.zw",
		"co.zw",
		"gov.zw",
		"mil.zw",
		"org.zw",
		"aaa",
		"aarp",
		"abarth",
		"abb",
		"abbott",
		"abbvie",
		"abc",
		"able",
		"abogado",
		"abudhabi",
		"academy",
		"accenture",
		"accountant",
		"accountants",
		"aco",
		"actor",
		"adac",
		"ads",
		"adult",
		"aeg",
		"aetna",
		"afamilycompany",
		"afl",
		"africa",
		"agakhan",
		"agency",
		"aig",
		"aigo",
		"airbus",
		"airforce",
		"airtel",
		"akdn",
		"alfaromeo",
		"alibaba",
		"alipay",
		"allfinanz",
		"allstate",
		"ally",
		"alsace",
		"alstom",
		"amazon",
		"americanexpress",
		"americanfamily",
		"amex",
		"amfam",
		"amica",
		"amsterdam",
		"analytics",
		"android",
		"anquan",
		"anz",
		"aol",
		"apartments",
		"app",
		"apple",
		"aquarelle",
		"arab",
		"aramco",
		"archi",
		"army",
		"art",
		"arte",
		"asda",
		"associates",
		"athleta",
		"attorney",
		"auction",
		"audi",
		"audible",
		"audio",
		"auspost",
		"author",
		"auto",
		"autos",
		"avianca",
		"aws",
		"axa",
		"azure",
		"baby",
		"baidu",
		"banamex",
		"bananarepublic",
		"band",
		"bank",
		"bar",
		"barcelona",
		"barclaycard",
		"barclays",
		"barefoot",
		"bargains",
		"baseball",
		"basketball",
		"bauhaus",
		"bayern",
		"bbc",
		"bbt",
		"bbva",
		"bcg",
		"bcn",
		"beats",
		"beauty",
		"beer",
		"bentley",
		"berlin",
		"best",
		"bestbuy",
		"bet",
		"bharti",
		"bible",
		"bid",
		"bike",
		"bing",
		"bingo",
		"bio",
		"black",
		"blackfriday",
		"blockbuster",
		"blog",
		"bloomberg",
		"blue",
		"bms",
		"bmw",
		"bnpparibas",
		"boats",
		"boehringer",
		"bofa",
		"bom",
		"bond",
		"boo",
		"book",
		"booking",
		"bosch",
		"bostik",
		"boston",
		"bot",
		"boutique",
		"box",
		"bradesco",
		"bridgestone",
		"broadway",
		"broker",
		"brother",
		"brussels",
		"budapest",
		"bugatti",
		"build",
		"builders",
		"business",
		"buy",
		"buzz",
		"bzh",
		"cab",
		"cafe",
		"cal",
		"call",
		"calvinklein",
		"cam",
		"camera",
		"camp",
		"cancerresearch",
		"canon",
		"capetown",
		"capital",
		"capitalone",
		"car",
		"caravan",
		"cards",
		"care",
		"career",
		"careers",
		"cars",
		"casa",
		"case",
		"caseih",
		"cash",
		"casino",
		"catering",
		"catholic",
		"cba",
		"cbn",
		"cbre",
		"cbs",
		"ceb",
		"center",
		"ceo",
		"cern",
		"cfa",
		"cfd",
		"chanel",
		"channel",
		"charity",
		"chase",
		"chat",
		"cheap",
		"chintai",
		"christmas",
		"chrome",
		"church",
		"cipriani",
		"circle",
		"cisco",
		"citadel",
		"citi",
		"citic",
		"city",
		"cityeats",
		"claims",
		"cleaning",
		"click",
		"clinic",
		"clinique",
		"clothing",
		"cloud",
		"club",
		"clubmed",
		"coach",
		"codes",
		"coffee",
		"college",
		"cologne",
		"comcast",
		"commbank",
		"community",
		"company",
		"compare",
		"computer",
		"comsec",
		"condos",
		"construction",
		"consulting",
		"contact",
		"contractors",
		"cooking",
		"cookingchannel",
		"cool",
		"corsica",
		"country",
		"coupon",
		"coupons",
		"courses",
		"cpa",
		"credit",
		"creditcard",
		"creditunion",
		"cricket",
		"crown",
		"crs",
		"cruise",
		"cruises",
		"csc",
		"cuisinella",
		"cymru",
		"cyou",
		"dabur",
		"dad",
		"dance",
		"data",
		"date",
		"dating",
		"datsun",
		"day",
		"dclk",
		"dds",
		"deal",
		"dealer",
		"deals",
		"degree",
		"delivery",
		"dell",
		"deloitte",
		"delta",
		"democrat",
		"dental",
		"dentist",
		"desi",
		"design",
		"dev",
		"dhl",
		"diamonds",
		"diet",
		"digital",
		"direct",
		"directory",
		"discount",
		"discover",
		"dish",
		"diy",
		"dnp",
		"docs",
		"doctor",
		"dog",
		"domains",
		"dot",
		"download",
		"drive",
		"dtv",
		"dubai",
		"duck",
		"dunlop",
		"dupont",
		"durban",
		"dvag",
		"dvr",
		"earth",
		"eat",
		"eco",
		"edeka",
		"education",
		"email",
		"emerck",
		"energy",
		"engineer",
		"engineering",
		"enterprises",
		"epson",
		"equipment",
		"ericsson",
		"erni",
		"esq",
		"estate",
		"esurance",
		"etisalat",
		"eurovision",
		"eus",
		"events",
		"exchange",
		"expert",
		"exposed",
		"express",
		"extraspace",
		"fage",
		"fail",
		"fairwinds",
		"faith",
		"family",
		"fan",
		"fans",
		"farm",
		"farmers",
		"fashion",
		"fast",
		"fedex",
		"feedback",
		"ferrari",
		"ferrero",
		"fiat",
		"fidelity",
		"fido",
		"film",
		"final",
		"finance",
		"financial",
		"fire",
		"firestone",
		"firmdale",
		"fish",
		"fishing",
		"fit",
		"fitness",
		"flickr",
		"flights",
		"flir",
		"florist",
		"flowers",
		"fly",
		"foo",
		"food",
		"foodnetwork",
		"football",
		"ford",
		"forex",
		"forsale",
		"forum",
		"foundation",
		"fox",
		"free",
		"fresenius",
		"frl",
		"frogans",
		"frontdoor",
		"frontier",
		"ftr",
		"fujitsu",
		"fujixerox",
		"fun",
		"fund",
		"furniture",
		"futbol",
		"fyi",
		"gal",
		"gallery",
		"gallo",
		"gallup",
		"game",
		"games",
		"gap",
		"garden",
		"gay",
		"gbiz",
		"gdn",
		"gea",
		"gent",
		"genting",
		"george",
		"ggee",
		"gift",
		"gifts",
		"gives",
		"giving",
		"glade",
		"glass",
		"gle",
		"global",
		"globo",
		"gmail",
		"gmbh",
		"gmo",
		"gmx",
		"godaddy",
		"gold",
		"goldpoint",
		"golf",
		"goo",
		"goodyear",
		"goog",
		"google",
		"gop",
		"got",
		"grainger",
		"graphics",
		"gratis",
		"green",
		"gripe",
		"grocery",
		"group",
		"guardian",
		"gucci",
		"guge",
		"guide",
		"guitars",
		"guru",
		"hair",
		"hamburg",
		"hangout",
		"haus",
		"hbo",
		"hdfc",
		"hdfcbank",
		"health",
		"healthcare",
		"help",
		"helsinki",
		"here",
		"hermes",
		"hgtv",
		"hiphop",
		"hisamitsu",
		"hitachi",
		"hiv",
		"hkt",
		"hockey",
		"holdings",
		"holiday",
		"homedepot",
		"homegoods",
		"homes",
		"homesense",
		"honda",
		"horse",
		"hospital",
		"host",
		"hosting",
		"hot",
		"hoteles",
		"hotels",
		"hotmail",
		"house",
		"how",
		"hsbc",
		"hughes",
		"hyatt",
		"hyundai",
		"ibm",
		"icbc",
		"ice",
		"icu",
		"ieee",
		"ifm",
		"ikano",
		"imamat",
		"imdb",
		"immo",
		"immobilien",
		"inc",
		"industries",
		"infiniti",
		"ing",
		"ink",
		"institute",
		"insurance",
		"insure",
		"intel",
		"international",
		"intuit",
		"investments",
		"ipiranga",
		"irish",
		"ismaili",
		"ist",
		"istanbul",
		"itau",
		"itv",
		"iveco",
		"jaguar",
		"java",
		"jcb",
		"jcp",
		"jeep",
		"jetzt",
		"jewelry",
		"jio",
		"jll",
		"jmp",
		"jnj",
		"joburg",
		"jot",
		"joy",
		"jpmorgan",
		"jprs",
		"juegos",
		"juniper",
		"kaufen",
		"kddi",
		"kerryhotels",
		"kerrylogistics",
		"kerryproperties",
		"kfh",
		"kia",
		"kim",
		"kinder",
		"kindle",
		"kitchen",
		"kiwi",
		"koeln",
		"komatsu",
		"kosher",
		"kpmg",
		"kpn",
		"krd",
		"kred",
		"kuokgroup",
		"kyoto",
		"lacaixa",
		"lamborghini",
		"lamer",
		"lancaster",
		"lancia",
		"land",
		"landrover",
		"lanxess",
		"lasalle",
		"lat",
		"latino",
		"latrobe",
		"law",
		"lawyer",
		"lds",
		"lease",
		"leclerc",
		"lefrak",
		"legal",
		"lego",
		"lexus",
		"lgbt",
		"lidl",
		"life",
		"lifeinsurance",
		"lifestyle",
		"lighting",
		"like",
		"lilly",
		"limited",
		"limo",
		"lincoln",
		"linde",
		"link",
		"lipsy",
		"live",
		"living",
		"lixil",
		"llc",
		"llp",
		"loan",
		"loans",
		"locker",
		"locus",
		"loft",
		"lol",
		"london",
		"lotte",
		"lotto",
		"love",
		"lpl",
		"lplfinancial",
		"ltd",
		"ltda",
		"lundbeck",
		"lupin",
		"luxe",
		"luxury",
		"macys",
		"madrid",
		"maif",
		"maison",
		"makeup",
		"man",
		"management",
		"mango",
		"map",
		"market",
		"marketing",
		"markets",
		"marriott",
		"marshalls",
		"maserati",
		"mattel",
		"mba",
		"mckinsey",
		"med",
		"media",
		"meet",
		"melbourne",
		"meme",
		"memorial",
		"men",
		"menu",
		"merckmsd",
		"metlife",
		"miami",
		"microsoft",
		"mini",
		"mint",
		"mit",
		"mitsubishi",
		"mlb",
		"mls",
		"mma",
		"mobile",
		"moda",
		"moe",
		"moi",
		"mom",
		"monash",
		"money",
		"monster",
		"mormon",
		"mortgage",
		"moscow",
		"moto",
		"motorcycles",
		"mov",
		"movie",
		"msd",
		"mtn",
		"mtr",
		"mutual",
		"nab",
		"nadex",
		"nagoya",
		"nationwide",
		"natura",
		"navy",
		"nba",
		"nec",
		"netbank",
		"netflix",
		"network",
		"neustar",
		"new",
		"newholland",
		"news",
		"next",
		"nextdirect",
		"nexus",
		"nfl",
		"ngo",
		"nhk",
		"nico",
		"nike",
		"nikon",
		"ninja",
		"nissan",
		"nissay",
		"nokia",
		"northwesternmutual",
		"norton",
		"now",
		"nowruz",
		"nowtv",
		"nra",
		"nrw",
		"ntt",
		"nyc",
		"obi",
		"observer",
		"off",
		"office",
		"okinawa",
		"olayan",
		"olayangroup",
		"oldnavy",
		"ollo",
		"omega",
		"one",
		"ong",
		"onl",
		"online",
		"onyourside",
		"ooo",
		"open",
		"oracle",
		"orange",
		"organic",
		"origins",
		"osaka",
		"otsuka",
		"ott",
		"ovh",
		"page",
		"panasonic",
		"paris",
		"pars",
		"partners",
		"parts",
		"party",
		"passagens",
		"pay",
		"pccw",
		"pet",
		"pfizer",
		"pharmacy",
		"phd",
		"philips",
		"phone",
		"photo",
		"photography",
		"photos",
		"physio",
		"pics",
		"pictet",
		"pictures",
		"pid",
		"pin",
		"ping",
		"pink",
		"pioneer",
		"pizza",
		"place",
		"play",
		"playstation",
		"plumbing",
		"plus",
		"pnc",
		"pohl",
		"poker",
		"politie",
		"porn",
		"pramerica",
		"praxi",
		"press",
		"prime",
		"prod",
		"productions",
		"prof",
		"progressive",
		"promo",
		"properties",
		"property",
		"protection",
		"pru",
		"prudential",
		"pub",
		"pwc",
		"qpon",
		"quebec",
		"quest",
		"qvc",
		"racing",
		"radio",
		"raid",
		"read",
		"realestate",
		"realtor",
		"realty",
		"recipes",
		"red",
		"redstone",
		"redumbrella",
		"rehab",
		"reise",
		"reisen",
		"reit",
		"reliance",
		"ren",
		"rent",
		"rentals",
		"repair",
		"report",
		"republican",
		"rest",
		"restaurant",
		"review",
		"reviews",
		"rexroth",
		"rich",
		"richardli",
		"ricoh",
		"rightathome",
		"ril",
		"rio",
		"rip",
		"rmit",
		"rocher",
		"rocks",
		"rodeo",
		"rogers",
		"room",
		"rsvp",
		"rugby",
		"ruhr",
		"run",
		"rwe",
		"ryukyu",
		"saarland",
		"safe",
		"safety",
		"sakura",
		"sale",
		"salon",
		"samsclub",
		"samsung",
		"sandvik",
		"sandvikcoromant",
		"sanofi",
		"sap",
		"sarl",
		"sas",
		"save",
		"saxo",
		"sbi",
		"sbs",
		"sca",
		"scb",
		"schaeffler",
		"schmidt",
		"scholarships",
		"school",
		"schule",
		"schwarz",
		"science",
		"scjohnson",
		"scor",
		"scot",
		"search",
		"seat",
		"secure",
		"security",
		"seek",
		"select",
		"sener",
		"services",
		"ses",
		"seven",
		"sew",
		"sex",
		"sexy",
		"sfr",
		"shangrila",
		"sharp",
		"shaw",
		"shell",
		"shia",
		"shiksha",
		"shoes",
		"shop",
		"shopping",
		"shouji",
		"show",
		"showtime",
		"shriram",
		"silk",
		"sina",
		"singles",
		"site",
		"ski",
		"skin",
		"sky",
		"skype",
		"sling",
		"smart",
		"smile",
		"sncf",
		"soccer",
		"social",
		"softbank",
		"software",
		"sohu",
		"solar",
		"solutions",
		"song",
		"sony",
		"soy",
		"spa",
		"space",
		"sport",
		"spot",
		"spreadbetting",
		"srl",
		"stada",
		"staples",
		"star",
		"statebank",
		"statefarm",
		"stc",
		"stcgroup",
		"stockholm",
		"storage",
		"store",
		"stream",
		"studio",
		"study",
		"style",
		"sucks",
		"supplies",
		"supply",
		"support",
		"surf",
		"surgery",
		"suzuki",
		"swatch",
		"swiftcover",
		"swiss",
		"sydney",
		"symantec",
		"systems",
		"tab",
		"taipei",
		"talk",
		"taobao",
		"target",
		"tatamotors",
		"tatar",
		"tattoo",
		"tax",
		"taxi",
		"tci",
		"tdk",
		"team",
		"tech",
		"technology",
		"temasek",
		"tennis",
		"teva",
		"thd",
		"theater",
		"theatre",
		"tiaa",
		"tickets",
		"tienda",
		"tiffany",
		"tips",
		"tires",
		"tirol",
		"tjmaxx",
		"tjx",
		"tkmaxx",
		"tmall",
		"today",
		"tokyo",
		"tools",
		"top",
		"toray",
		"toshiba",
		"total",
		"tours",
		"town",
		"toyota",
		"toys",
		"trade",
		"trading",
		"training",
		"travel",
		"travelchannel",
		"travelers",
		"travelersinsurance",
		"trust",
		"trv",
		"tube",
		"tui",
		"tunes",
		"tushu",
		"tvs",
		"ubank",
		"ubs",
		"unicom",
		"university",
		"uno",
		"uol",
		"ups",
		"vacations",
		"vana",
		"vanguard",
		"vegas",
		"ventures",
		"verisign",
		"versicherung",
		"vet",
		"viajes",
		"video",
		"vig",
		"viking",
		"villas",
		"vin",
		"vip",
		"virgin",
		"visa",
		"vision",
		"viva",
		"vivo",
		"vlaanderen",
		"vodka",
		"volkswagen",
		"volvo",
		"vote",
		"voting",
		"voto",
		"voyage",
		"vuelos",
		"wales",
		"walmart",
		"walter",
		"wang",
		"wanggou",
		"watch",
		"watches",
		"weather",
		"weatherchannel",
		"webcam",
		"weber",
		"website",
		"wed",
		"wedding",
		"weibo",
		"weir",
		"whoswho",
		"wien",
		"wiki",
		"williamhill",
		"win",
		"windows",
		"wine",
		"winners",
		"wme",
		"wolterskluwer",
		"woodside",
		"work",
		"works",
		"world",
		"wow",
		"wtc",
		"wtf",
		"xbox",
		"xerox",
		"xfinity",
		"xihuan",
		"xin",
		"कॉम",
		"セール",
		"佛山",
		"慈善",
		"集团",
		"在线",
		"大众汽车",
		"点看",
		"คอม",
		"八卦",
		"موقع",
		"公益",
		"公司",
		"香格里拉",
		"网站",
		"移动",
		"我爱你",
		"москва",
		"католик",
		"онлайн",
		"сайт",
		"联通",
		"קום",
		"时尚",
		"微博",
		"淡马锡",
		"ファッション",
		"орг",
		"नेट",
		"ストア",
		"アマゾン",
		"삼성",
		"商标",
		"商店",
		"商城",
		"дети",
		"ポイント",
		"新闻",
		"工行",
		"家電",
		"كوم",
		"中文网",
		"中信",
		"娱乐",
		"谷歌",
		"電訊盈科",
		"购物",
		"クラウド",
		"通販",
		"网店",
		"संगठन",
		"餐厅",
		"网络",
		"ком",
		"亚马逊",
		"诺基亚",
		"食品",
		"飞利浦",
		"手表",
		"手机",
		"ارامكو",
		"العليان",
		"اتصالات",
		"بازار",
		"ابوظبي",
		"كاثوليك",
		"همراه",
		"닷컴",
		"政府",
		"شبكة",
		"بيتك",
		"عرب",
		"机构",
		"组织机构",
		"健康",
		"招聘",
		"рус",
		"珠宝",
		"大拿",
		"みんな",
		"グーグル",
		"世界",
		"書籍",
		"网址",
		"닷넷",
		"コム",
		"天主教",
		"游戏",
		"vermögensberater",
		"vermögensberatung",
		"企业",
		"信息",
		"嘉里大酒店",
		"嘉里",
		"广东",
		"政务",
		"xyz",
		"yachts",
		"yahoo",
		"yamaxun",
		"yandex",
		"yodobashi",
		"yoga",
		"yokohama",
		"you",
		"youtube",
		"yun",
		"zappos",
		"zara",
		"zero",
		"zip",
		"zone",
		"zuerich",
		"cc.ua",
		"inf.ua",
		"ltd.ua",
		"adobeaemcloud.com",
		"adobeaemcloud.net",
		"*.dev.adobeaemcloud.com",
		"beep.pl",
		"barsy.ca",
		"*.compute.estate",
		"*.alces.network",
		"altervista.org",
		"alwaysdata.net",
		"cloudfront.net",
		"*.compute.amazonaws.com",
		"*.compute-1.amazonaws.com",
		"*.compute.amazonaws.com.cn",
		"us-east-1.amazonaws.com",
		"cn-north-1.eb.amazonaws.com.cn",
		"cn-northwest-1.eb.amazonaws.com.cn",
		"elasticbeanstalk.com",
		"ap-northeast-1.elasticbeanstalk.com",
		"ap-northeast-2.elasticbeanstalk.com",
		"ap-northeast-3.elasticbeanstalk.com",
		"ap-south-1.elasticbeanstalk.com",
		"ap-southeast-1.elasticbeanstalk.com",
		"ap-southeast-2.elasticbeanstalk.com",
		"ca-central-1.elasticbeanstalk.com",
		"eu-central-1.elasticbeanstalk.com",
		"eu-west-1.elasticbeanstalk.com",
		"eu-west-2.elasticbeanstalk.com",
		"eu-west-3.elasticbeanstalk.com",
		"sa-east-1.elasticbeanstalk.com",
		"us-east-1.elasticbeanstalk.com",
		"us-east-2.elasticbeanstalk.com",
		"us-gov-west-1.elasticbeanstalk.com",
		"us-west-1.elasticbeanstalk.com",
		"us-west-2.elasticbeanstalk.com",
		"*.elb.amazonaws.com",
		"*.elb.amazonaws.com.cn",
		"s3.amazonaws.com",
		"s3-ap-northeast-1.amazonaws.com",
		"s3-ap-northeast-2.amazonaws.com",
		"s3-ap-south-1.amazonaws.com",
		"s3-ap-southeast-1.amazonaws.com",
		"s3-ap-southeast-2.amazonaws.com",
		"s3-ca-central-1.amazonaws.com",
		"s3-eu-central-1.amazonaws.com",
		"s3-eu-west-1.amazonaws.com",
		"s3-eu-west-2.amazonaws.com",
		"s3-eu-west-3.amazonaws.com",
		"s3-external-1.amazonaws.com",
		"s3-fips-us-gov-west-1.amazonaws.com",
		"s3-sa-east-1.amazonaws.com",
		"s3-us-gov-west-1.amazonaws.com",
		"s3-us-east-2.amazonaws.com",
		"s3-us-west-1.amazonaws.com",
		"s3-us-west-2.amazonaws.com",
		"s3.ap-northeast-2.amazonaws.com",
		"s3.ap-south-1.amazonaws.com",
		"s3.cn-north-1.amazonaws.com.cn",
		"s3.ca-central-1.amazonaws.com",
		"s3.eu-central-1.amazonaws.com",
		"s3.eu-west-2.amazonaws.com",
		"s3.eu-west-3.amazonaws.com",
		"s3.us-east-2.amazonaws.com",
		"s3.dualstack.ap-northeast-1.amazonaws.com",
		"s3.dualstack.ap-northeast-2.amazonaws.com",
		"s3.dualstack.ap-south-1.amazonaws.com",
		"s3.dualstack.ap-southeast-1.amazonaws.com",
		"s3.dualstack.ap-southeast-2.amazonaws.com",
		"s3.dualstack.ca-central-1.amazonaws.com",
		"s3.dualstack.eu-central-1.amazonaws.com",
		"s3.dualstack.eu-west-1.amazonaws.com",
		"s3.dualstack.eu-west-2.amazonaws.com",
		"s3.dualstack.eu-west-3.amazonaws.com",
		"s3.dualstack.sa-east-1.amazonaws.com",
		"s3.dualstack.us-east-1.amazonaws.com",
		"s3.dualstack.us-east-2.amazonaws.com",
		"s3-website-us-east-1.amazonaws.com",
		"s3-website-us-west-1.amazonaws.com",
		"s3-website-us-west-2.amazonaws.com",
		"s3-website-ap-northeast-1.amazonaws.com",
		"s3-website-ap-southeast-1.amazonaws.com",
		"s3-website-ap-southeast-2.amazonaws.com",
		"s3-website-eu-west-1.amazonaws.com",
		"s3-website-sa-east-1.amazonaws.com",
		"s3-website.ap-northeast-2.amazonaws.com",
		"s3-website.ap-south-1.amazonaws.com",
		"s3-website.ca-central-1.amazonaws.com",
		"s3-website.eu-central-1.amazonaws.com",
		"s3-website.eu-west-2.amazonaws.com",
		"s3-website.eu-west-3.amazonaws.com",
		"s3-website.us-east-2.amazonaws.com",
		"amsw.nl",
		"t3l3p0rt.net",
		"tele.amune.org",
		"apigee.io",
		"on-aptible.com",
		"user.aseinet.ne.jp",
		"gv.vc",
		"d.gv.vc",
		"user.party.eus",
		"pimienta.org",
		"poivron.org",
		"potager.org",
		"sweetpepper.org",
		"myasustor.com",
		"myfritz.net",
		"*.awdev.ca",
		"*.advisor.ws",
		"b-data.io",
		"backplaneapp.io",
		"balena-devices.com",
		"app.banzaicloud.io",
		"betainabox.com",
		"bnr.la",
		"blackbaudcdn.net",
		"boomla.net",
		"boxfuse.io",
		"square7.ch",
		"bplaced.com",
		"bplaced.de",
		"square7.de",
		"bplaced.net",
		"square7.net",
		"browsersafetymark.io",
		"uk0.bigv.io",
		"dh.bytemark.co.uk",
		"vm.bytemark.co.uk",
		"mycd.eu",
		"carrd.co",
		"crd.co",
		"uwu.ai",
		"ae.org",
		"ar.com",
		"br.com",
		"cn.com",
		"com.de",
		"com.se",
		"de.com",
		"eu.com",
		"gb.com",
		"gb.net",
		"hu.com",
		"hu.net",
		"jp.net",
		"jpn.com",
		"kr.com",
		"mex.com",
		"no.com",
		"qc.com",
		"ru.com",
		"sa.com",
		"se.net",
		"uk.com",
		"uk.net",
		"us.com",
		"uy.com",
		"za.bz",
		"za.com",
		"africa.com",
		"gr.com",
		"in.net",
		"us.org",
		"co.com",
		"c.la",
		"certmgr.org",
		"xenapponazure.com",
		"discourse.group",
		"discourse.team",
		"virtueeldomein.nl",
		"cleverapps.io",
		"*.lcl.dev",
		"*.stg.dev",
		"c66.me",
		"cloud66.ws",
		"cloud66.zone",
		"jdevcloud.com",
		"wpdevcloud.com",
		"cloudaccess.host",
		"freesite.host",
		"cloudaccess.net",
		"cloudcontrolled.com",
		"cloudcontrolapp.com",
		"cloudera.site",
		"trycloudflare.com",
		"workers.dev",
		"wnext.app",
		"co.ca",
		"*.otap.co",
		"co.cz",
		"c.cdn77.org",
		"cdn77-ssl.net",
		"r.cdn77.net",
		"rsc.cdn77.org",
		"ssl.origin.cdn77-secure.org",
		"cloudns.asia",
		"cloudns.biz",
		"cloudns.club",
		"cloudns.cc",
		"cloudns.eu",
		"cloudns.in",
		"cloudns.info",
		"cloudns.org",
		"cloudns.pro",
		"cloudns.pw",
		"cloudns.us",
		"cloudeity.net",
		"cnpy.gdn",
		"co.nl",
		"co.no",
		"webhosting.be",
		"hosting-cluster.nl",
		"ac.ru",
		"edu.ru",
		"gov.ru",
		"int.ru",
		"mil.ru",
		"test.ru",
		"dyn.cosidns.de",
		"dynamisches-dns.de",
		"dnsupdater.de",
		"internet-dns.de",
		"l-o-g-i-n.de",
		"dynamic-dns.info",
		"feste-ip.net",
		"knx-server.net",
		"static-access.net",
		"realm.cz",
		"*.cryptonomic.net",
		"cupcake.is",
		"*.customer-oci.com",
		"*.oci.customer-oci.com",
		"*.ocp.customer-oci.com",
		"*.ocs.customer-oci.com",
		"cyon.link",
		"cyon.site",
		"daplie.me",
		"localhost.daplie.me",
		"dattolocal.com",
		"dattorelay.com",
		"dattoweb.com",
		"mydatto.com",
		"dattolocal.net",
		"mydatto.net",
		"biz.dk",
		"co.dk",
		"firm.dk",
		"reg.dk",
		"store.dk",
		"*.dapps.earth",
		"*.bzz.dapps.earth",
		"builtwithdark.com",
		"edgestack.me",
		"debian.net",
		"dedyn.io",
		"dnshome.de",
		"online.th",
		"shop.th",
		"drayddns.com",
		"dreamhosters.com",
		"mydrobo.com",
		"drud.io",
		"drud.us",
		"duckdns.org",
		"dy.fi",
		"tunk.org",
		"dyndns-at-home.com",
		"dyndns-at-work.com",
		"dyndns-blog.com",
		"dyndns-free.com",
		"dyndns-home.com",
		"dyndns-ip.com",
		"dyndns-mail.com",
		"dyndns-office.com",
		"dyndns-pics.com",
		"dyndns-remote.com",
		"dyndns-server.com",
		"dyndns-web.com",
		"dyndns-wiki.com",
		"dyndns-work.com",
		"dyndns.biz",
		"dyndns.info",
		"dyndns.org",
		"dyndns.tv",
		"at-band-camp.net",
		"ath.cx",
		"barrel-of-knowledge.info",
		"barrell-of-knowledge.info",
		"better-than.tv",
		"blogdns.com",
		"blogdns.net",
		"blogdns.org",
		"blogsite.org",
		"boldlygoingnowhere.org",
		"broke-it.net",
		"buyshouses.net",
		"cechire.com",
		"dnsalias.com",
		"dnsalias.net",
		"dnsalias.org",
		"dnsdojo.com",
		"dnsdojo.net",
		"dnsdojo.org",
		"does-it.net",
		"doesntexist.com",
		"doesntexist.org",
		"dontexist.com",
		"dontexist.net",
		"dontexist.org",
		"doomdns.com",
		"doomdns.org",
		"dvrdns.org",
		"dyn-o-saur.com",
		"dynalias.com",
		"dynalias.net",
		"dynalias.org",
		"dynathome.net",
		"dyndns.ws",
		"endofinternet.net",
		"endofinternet.org",
		"endoftheinternet.org",
		"est-a-la-maison.com",
		"est-a-la-masion.com",
		"est-le-patron.com",
		"est-mon-blogueur.com",
		"for-better.biz",
		"for-more.biz",
		"for-our.info",
		"for-some.biz",
		"for-the.biz",
		"forgot.her.name",
		"forgot.his.name",
		"from-ak.com",
		"from-al.com",
		"from-ar.com",
		"from-az.net",
		"from-ca.com",
		"from-co.net",
		"from-ct.com",
		"from-dc.com",
		"from-de.com",
		"from-fl.com",
		"from-ga.com",
		"from-hi.com",
		"from-ia.com",
		"from-id.com",
		"from-il.com",
		"from-in.com",
		"from-ks.com",
		"from-ky.com",
		"from-la.net",
		"from-ma.com",
		"from-md.com",
		"from-me.org",
		"from-mi.com",
		"from-mn.com",
		"from-mo.com",
		"from-ms.com",
		"from-mt.com",
		"from-nc.com",
		"from-nd.com",
		"from-ne.com",
		"from-nh.com",
		"from-nj.com",
		"from-nm.com",
		"from-nv.com",
		"from-ny.net",
		"from-oh.com",
		"from-ok.com",
		"from-or.com",
		"from-pa.com",
		"from-pr.com",
		"from-ri.com",
		"from-sc.com",
		"from-sd.com",
		"from-tn.com",
		"from-tx.com",
		"from-ut.com",
		"from-va.com",
		"from-vt.com",
		"from-wa.com",
		"from-wi.com",
		"from-wv.com",
		"from-wy.com",
		"ftpaccess.cc",
		"fuettertdasnetz.de",
		"game-host.org",
		"game-server.cc",
		"getmyip.com",
		"gets-it.net",
		"go.dyndns.org",
		"gotdns.com",
		"gotdns.org",
		"groks-the.info",
		"groks-this.info",
		"ham-radio-op.net",
		"here-for-more.info",
		"hobby-site.com",
		"hobby-site.org",
		"home.dyndns.org",
		"homedns.org",
		"homeftp.net",
		"homeftp.org",
		"homeip.net",
		"homelinux.com",
		"homelinux.net",
		"homelinux.org",
		"homeunix.com",
		"homeunix.net",
		"homeunix.org",
		"iamallama.com",
		"in-the-band.net",
		"is-a-anarchist.com",
		"is-a-blogger.com",
		"is-a-bookkeeper.com",
		"is-a-bruinsfan.org",
		"is-a-bulls-fan.com",
		"is-a-candidate.org",
		"is-a-caterer.com",
		"is-a-celticsfan.org",
		"is-a-chef.com",
		"is-a-chef.net",
		"is-a-chef.org",
		"is-a-conservative.com",
		"is-a-cpa.com",
		"is-a-cubicle-slave.com",
		"is-a-democrat.com",
		"is-a-designer.com",
		"is-a-doctor.com",
		"is-a-financialadvisor.com",
		"is-a-geek.com",
		"is-a-geek.net",
		"is-a-geek.org",
		"is-a-green.com",
		"is-a-guru.com",
		"is-a-hard-worker.com",
		"is-a-hunter.com",
		"is-a-knight.org",
		"is-a-landscaper.com",
		"is-a-lawyer.com",
		"is-a-liberal.com",
		"is-a-libertarian.com",
		"is-a-linux-user.org",
		"is-a-llama.com",
		"is-a-musician.com",
		"is-a-nascarfan.com",
		"is-a-nurse.com",
		"is-a-painter.com",
		"is-a-patsfan.org",
		"is-a-personaltrainer.com",
		"is-a-photographer.com",
		"is-a-player.com",
		"is-a-republican.com",
		"is-a-rockstar.com",
		"is-a-socialist.com",
		"is-a-soxfan.org",
		"is-a-student.com",
		"is-a-teacher.com",
		"is-a-techie.com",
		"is-a-therapist.com",
		"is-an-accountant.com",
		"is-an-actor.com",
		"is-an-actress.com",
		"is-an-anarchist.com",
		"is-an-artist.com",
		"is-an-engineer.com",
		"is-an-entertainer.com",
		"is-by.us",
		"is-certified.com",
		"is-found.org",
		"is-gone.com",
		"is-into-anime.com",
		"is-into-cars.com",
		"is-into-cartoons.com",
		"is-into-games.com",
		"is-leet.com",
		"is-lost.org",
		"is-not-certified.com",
		"is-saved.org",
		"is-slick.com",
		"is-uberleet.com",
		"is-very-bad.org",
		"is-very-evil.org",
		"is-very-good.org",
		"is-very-nice.org",
		"is-very-sweet.org",
		"is-with-theband.com",
		"isa-geek.com",
		"isa-geek.net",
		"isa-geek.org",
		"isa-hockeynut.com",
		"issmarterthanyou.com",
		"isteingeek.de",
		"istmein.de",
		"kicks-ass.net",
		"kicks-ass.org",
		"knowsitall.info",
		"land-4-sale.us",
		"lebtimnetz.de",
		"leitungsen.de",
		"likes-pie.com",
		"likescandy.com",
		"merseine.nu",
		"mine.nu",
		"misconfused.org",
		"mypets.ws",
		"myphotos.cc",
		"neat-url.com",
		"office-on-the.net",
		"on-the-web.tv",
		"podzone.net",
		"podzone.org",
		"readmyblog.org",
		"saves-the-whales.com",
		"scrapper-site.net",
		"scrapping.cc",
		"selfip.biz",
		"selfip.com",
		"selfip.info",
		"selfip.net",
		"selfip.org",
		"sells-for-less.com",
		"sells-for-u.com",
		"sells-it.net",
		"sellsyourhome.org",
		"servebbs.com",
		"servebbs.net",
		"servebbs.org",
		"serveftp.net",
		"serveftp.org",
		"servegame.org",
		"shacknet.nu",
		"simple-url.com",
		"space-to-rent.com",
		"stuff-4-sale.org",
		"stuff-4-sale.us",
		"teaches-yoga.com",
		"thruhere.net",
		"traeumtgerade.de",
		"webhop.biz",
		"webhop.info",
		"webhop.net",
		"webhop.org",
		"worse-than.tv",
		"writesthisblog.com",
		"ddnss.de",
		"dyn.ddnss.de",
		"dyndns.ddnss.de",
		"dyndns1.de",
		"dyn-ip24.de",
		"home-webserver.de",
		"dyn.home-webserver.de",
		"myhome-server.de",
		"ddnss.org",
		"definima.net",
		"definima.io",
		"bci.dnstrace.pro",
		"ddnsfree.com",
		"ddnsgeek.com",
		"giize.com",
		"gleeze.com",
		"kozow.com",
		"loseyourip.com",
		"ooguy.com",
		"theworkpc.com",
		"casacam.net",
		"dynu.net",
		"accesscam.org",
		"camdvr.org",
		"freeddns.org",
		"mywire.org",
		"webredirect.org",
		"myddns.rocks",
		"blogsite.xyz",
		"dynv6.net",
		"e4.cz",
		"en-root.fr",
		"mytuleap.com",
		"onred.one",
		"staging.onred.one",
		"enonic.io",
		"customer.enonic.io",
		"eu.org",
		"al.eu.org",
		"asso.eu.org",
		"at.eu.org",
		"au.eu.org",
		"be.eu.org",
		"bg.eu.org",
		"ca.eu.org",
		"cd.eu.org",
		"ch.eu.org",
		"cn.eu.org",
		"cy.eu.org",
		"cz.eu.org",
		"de.eu.org",
		"dk.eu.org",
		"edu.eu.org",
		"ee.eu.org",
		"es.eu.org",
		"fi.eu.org",
		"fr.eu.org",
		"gr.eu.org",
		"hr.eu.org",
		"hu.eu.org",
		"ie.eu.org",
		"il.eu.org",
		"in.eu.org",
		"int.eu.org",
		"is.eu.org",
		"it.eu.org",
		"jp.eu.org",
		"kr.eu.org",
		"lt.eu.org",
		"lu.eu.org",
		"lv.eu.org",
		"mc.eu.org",
		"me.eu.org",
		"mk.eu.org",
		"mt.eu.org",
		"my.eu.org",
		"net.eu.org",
		"ng.eu.org",
		"nl.eu.org",
		"no.eu.org",
		"nz.eu.org",
		"paris.eu.org",
		"pl.eu.org",
		"pt.eu.org",
		"q-a.eu.org",
		"ro.eu.org",
		"ru.eu.org",
		"se.eu.org",
		"si.eu.org",
		"sk.eu.org",
		"tr.eu.org",
		"uk.eu.org",
		"us.eu.org",
		"eu-1.evennode.com",
		"eu-2.evennode.com",
		"eu-3.evennode.com",
		"eu-4.evennode.com",
		"us-1.evennode.com",
		"us-2.evennode.com",
		"us-3.evennode.com",
		"us-4.evennode.com",
		"twmail.cc",
		"twmail.net",
		"twmail.org",
		"mymailer.com.tw",
		"url.tw",
		"apps.fbsbx.com",
		"ru.net",
		"adygeya.ru",
		"bashkiria.ru",
		"bir.ru",
		"cbg.ru",
		"com.ru",
		"dagestan.ru",
		"grozny.ru",
		"kalmykia.ru",
		"kustanai.ru",
		"marine.ru",
		"mordovia.ru",
		"msk.ru",
		"mytis.ru",
		"nalchik.ru",
		"nov.ru",
		"pyatigorsk.ru",
		"spb.ru",
		"vladikavkaz.ru",
		"vladimir.ru",
		"abkhazia.su",
		"adygeya.su",
		"aktyubinsk.su",
		"arkhangelsk.su",
		"armenia.su",
		"ashgabad.su",
		"azerbaijan.su",
		"balashov.su",
		"bashkiria.su",
		"bryansk.su",
		"bukhara.su",
		"chimkent.su",
		"dagestan.su",
		"east-kazakhstan.su",
		"exnet.su",
		"georgia.su",
		"grozny.su",
		"ivanovo.su",
		"jambyl.su",
		"kalmykia.su",
		"kaluga.su",
		"karacol.su",
		"karaganda.su",
		"karelia.su",
		"khakassia.su",
		"krasnodar.su",
		"kurgan.su",
		"kustanai.su",
		"lenug.su",
		"mangyshlak.su",
		"mordovia.su",
		"msk.su",
		"murmansk.su",
		"nalchik.su",
		"navoi.su",
		"north-kazakhstan.su",
		"nov.su",
		"obninsk.su",
		"penza.su",
		"pokrovsk.su",
		"sochi.su",
		"spb.su",
		"tashkent.su",
		"termez.su",
		"togliatti.su",
		"troitsk.su",
		"tselinograd.su",
		"tula.su",
		"tuva.su",
		"vladikavkaz.su",
		"vladimir.su",
		"vologda.su",
		"channelsdvr.net",
		"u.channelsdvr.net",
		"fastly-terrarium.com",
		"fastlylb.net",
		"map.fastlylb.net",
		"freetls.fastly.net",
		"map.fastly.net",
		"a.prod.fastly.net",
		"global.prod.fastly.net",
		"a.ssl.fastly.net",
		"b.ssl.fastly.net",
		"global.ssl.fastly.net",
		"fastpanel.direct",
		"fastvps-server.com",
		"fhapp.xyz",
		"fedorainfracloud.org",
		"fedorapeople.org",
		"cloud.fedoraproject.org",
		"app.os.fedoraproject.org",
		"app.os.stg.fedoraproject.org",
		"mydobiss.com",
		"filegear.me",
		"filegear-au.me",
		"filegear-de.me",
		"filegear-gb.me",
		"filegear-ie.me",
		"filegear-jp.me",
		"filegear-sg.me",
		"firebaseapp.com",
		"flynnhub.com",
		"flynnhosting.net",
		"0e.vc",
		"freebox-os.com",
		"freeboxos.com",
		"fbx-os.fr",
		"fbxos.fr",
		"freebox-os.fr",
		"freeboxos.fr",
		"freedesktop.org",
		"*.futurecms.at",
		"*.ex.futurecms.at",
		"*.in.futurecms.at",
		"futurehosting.at",
		"futuremailing.at",
		"*.ex.ortsinfo.at",
		"*.kunden.ortsinfo.at",
		"*.statics.cloud",
		"service.gov.uk",
		"gehirn.ne.jp",
		"usercontent.jp",
		"gentapps.com",
		"lab.ms",
		"github.io",
		"githubusercontent.com",
		"gitlab.io",
		"glitch.me",
		"lolipop.io",
		"cloudapps.digital",
		"london.cloudapps.digital",
		"homeoffice.gov.uk",
		"ro.im",
		"shop.ro",
		"goip.de",
		"run.app",
		"a.run.app",
		"web.app",
		"*.0emm.com",
		"appspot.com",
		"*.r.appspot.com",
		"blogspot.ae",
		"blogspot.al",
		"blogspot.am",
		"blogspot.ba",
		"blogspot.be",
		"blogspot.bg",
		"blogspot.bj",
		"blogspot.ca",
		"blogspot.cf",
		"blogspot.ch",
		"blogspot.cl",
		"blogspot.co.at",
		"blogspot.co.id",
		"blogspot.co.il",
		"blogspot.co.ke",
		"blogspot.co.nz",
		"blogspot.co.uk",
		"blogspot.co.za",
		"blogspot.com",
		"blogspot.com.ar",
		"blogspot.com.au",
		"blogspot.com.br",
		"blogspot.com.by",
		"blogspot.com.co",
		"blogspot.com.cy",
		"blogspot.com.ee",
		"blogspot.com.eg",
		"blogspot.com.es",
		"blogspot.com.mt",
		"blogspot.com.ng",
		"blogspot.com.tr",
		"blogspot.com.uy",
		"blogspot.cv",
		"blogspot.cz",
		"blogspot.de",
		"blogspot.dk",
		"blogspot.fi",
		"blogspot.fr",
		"blogspot.gr",
		"blogspot.hk",
		"blogspot.hr",
		"blogspot.hu",
		"blogspot.ie",
		"blogspot.in",
		"blogspot.is",
		"blogspot.it",
		"blogspot.jp",
		"blogspot.kr",
		"blogspot.li",
		"blogspot.lt",
		"blogspot.lu",
		"blogspot.md",
		"blogspot.mk",
		"blogspot.mr",
		"blogspot.mx",
		"blogspot.my",
		"blogspot.nl",
		"blogspot.no",
		"blogspot.pe",
		"blogspot.pt",
		"blogspot.qa",
		"blogspot.re",
		"blogspot.ro",
		"blogspot.rs",
		"blogspot.ru",
		"blogspot.se",
		"blogspot.sg",
		"blogspot.si",
		"blogspot.sk",
		"blogspot.sn",
		"blogspot.td",
		"blogspot.tw",
		"blogspot.ug",
		"blogspot.vn",
		"cloudfunctions.net",
		"cloud.goog",
		"codespot.com",
		"googleapis.com",
		"googlecode.com",
		"pagespeedmobilizer.com",
		"publishproxy.com",
		"withgoogle.com",
		"withyoutube.com",
		"awsmppl.com",
		"fin.ci",
		"free.hr",
		"caa.li",
		"ua.rs",
		"conf.se",
		"hs.zone",
		"hs.run",
		"hashbang.sh",
		"hasura.app",
		"hasura-app.io",
		"hepforge.org",
		"herokuapp.com",
		"herokussl.com",
		"myravendb.com",
		"ravendb.community",
		"ravendb.me",
		"development.run",
		"ravendb.run",
		"bpl.biz",
		"orx.biz",
		"ng.city",
		"biz.gl",
		"ng.ink",
		"col.ng",
		"firm.ng",
		"gen.ng",
		"ltd.ng",
		"ngo.ng",
		"ng.school",
		"sch.so",
		"häkkinen.fi",
		"*.moonscale.io",
		"moonscale.net",
		"iki.fi",
		"dyn-berlin.de",
		"in-berlin.de",
		"in-brb.de",
		"in-butter.de",
		"in-dsl.de",
		"in-dsl.net",
		"in-dsl.org",
		"in-vpn.de",
		"in-vpn.net",
		"in-vpn.org",
		"biz.at",
		"info.at",
		"info.cx",
		"ac.leg.br",
		"al.leg.br",
		"am.leg.br",
		"ap.leg.br",
		"ba.leg.br",
		"ce.leg.br",
		"df.leg.br",
		"es.leg.br",
		"go.leg.br",
		"ma.leg.br",
		"mg.leg.br",
		"ms.leg.br",
		"mt.leg.br",
		"pa.leg.br",
		"pb.leg.br",
		"pe.leg.br",
		"pi.leg.br",
		"pr.leg.br",
		"rj.leg.br",
		"rn.leg.br",
		"ro.leg.br",
		"rr.leg.br",
		"rs.leg.br",
		"sc.leg.br",
		"se.leg.br",
		"sp.leg.br",
		"to.leg.br",
		"pixolino.com",
		"ipifony.net",
		"mein-iserv.de",
		"test-iserv.de",
		"iserv.dev",
		"iobb.net",
		"myjino.ru",
		"*.hosting.myjino.ru",
		"*.landing.myjino.ru",
		"*.spectrum.myjino.ru",
		"*.vps.myjino.ru",
		"*.triton.zone",
		"*.cns.joyent.com",
		"js.org",
		"kaas.gg",
		"khplay.nl",
		"keymachine.de",
		"kinghost.net",
		"uni5.net",
		"knightpoint.systems",
		"oya.to",
		"co.krd",
		"edu.krd",
		"git-repos.de",
		"lcube-server.de",
		"svn-repos.de",
		"leadpages.co",
		"lpages.co",
		"lpusercontent.com",
		"lelux.site",
		"co.business",
		"co.education",
		"co.events",
		"co.financial",
		"co.network",
		"co.place",
		"co.technology",
		"app.lmpm.com",
		"linkitools.space",
		"linkyard.cloud",
		"linkyard-cloud.ch",
		"members.linode.com",
		"nodebalancer.linode.com",
		"we.bs",
		"loginline.app",
		"loginline.dev",
		"loginline.io",
		"loginline.services",
		"loginline.site",
		"krasnik.pl",
		"leczna.pl",
		"lubartow.pl",
		"lublin.pl",
		"poniatowa.pl",
		"swidnik.pl",
		"uklugs.org",
		"glug.org.uk",
		"lug.org.uk",
		"lugs.org.uk",
		"barsy.bg",
		"barsy.co.uk",
		"barsyonline.co.uk",
		"barsycenter.com",
		"barsyonline.com",
		"barsy.club",
		"barsy.de",
		"barsy.eu",
		"barsy.in",
		"barsy.info",
		"barsy.io",
		"barsy.me",
		"barsy.menu",
		"barsy.mobi",
		"barsy.net",
		"barsy.online",
		"barsy.org",
		"barsy.pro",
		"barsy.pub",
		"barsy.shop",
		"barsy.site",
		"barsy.support",
		"barsy.uk",
		"*.magentosite.cloud",
		"mayfirst.info",
		"mayfirst.org",
		"hb.cldmail.ru",
		"miniserver.com",
		"memset.net",
		"cloud.metacentrum.cz",
		"custom.metacentrum.cz",
		"flt.cloud.muni.cz",
		"usr.cloud.muni.cz",
		"meteorapp.com",
		"eu.meteorapp.com",
		"co.pl",
		"azurecontainer.io",
		"azurewebsites.net",
		"azure-mobile.net",
		"cloudapp.net",
		"mozilla-iot.org",
		"bmoattachments.org",
		"net.ru",
		"org.ru",
		"pp.ru",
		"ui.nabu.casa",
		"pony.club",
		"of.fashion",
		"on.fashion",
		"of.football",
		"in.london",
		"of.london",
		"for.men",
		"and.mom",
		"for.mom",
		"for.one",
		"for.sale",
		"of.work",
		"to.work",
		"nctu.me",
		"bitballoon.com",
		"netlify.com",
		"4u.com",
		"ngrok.io",
		"nh-serv.co.uk",
		"nfshost.com",
		"dnsking.ch",
		"mypi.co",
		"n4t.co",
		"001www.com",
		"ddnslive.com",
		"myiphost.com",
		"forumz.info",
		"16-b.it",
		"32-b.it",
		"64-b.it",
		"soundcast.me",
		"tcp4.me",
		"dnsup.net",
		"hicam.net",
		"now-dns.net",
		"ownip.net",
		"vpndns.net",
		"dynserv.org",
		"now-dns.org",
		"x443.pw",
		"now-dns.top",
		"ntdll.top",
		"freeddns.us",
		"crafting.xyz",
		"zapto.xyz",
		"nsupdate.info",
		"nerdpol.ovh",
		"blogsyte.com",
		"brasilia.me",
		"cable-modem.org",
		"ciscofreak.com",
		"collegefan.org",
		"couchpotatofries.org",
		"damnserver.com",
		"ddns.me",
		"ditchyourip.com",
		"dnsfor.me",
		"dnsiskinky.com",
		"dvrcam.info",
		"dynns.com",
		"eating-organic.net",
		"fantasyleague.cc",
		"geekgalaxy.com",
		"golffan.us",
		"health-carereform.com",
		"homesecuritymac.com",
		"homesecuritypc.com",
		"hopto.me",
		"ilovecollege.info",
		"loginto.me",
		"mlbfan.org",
		"mmafan.biz",
		"myactivedirectory.com",
		"mydissent.net",
		"myeffect.net",
		"mymediapc.net",
		"mypsx.net",
		"mysecuritycamera.com",
		"mysecuritycamera.net",
		"mysecuritycamera.org",
		"net-freaks.com",
		"nflfan.org",
		"nhlfan.net",
		"no-ip.ca",
		"no-ip.co.uk",
		"no-ip.net",
		"noip.us",
		"onthewifi.com",
		"pgafan.net",
		"point2this.com",
		"pointto.us",
		"privatizehealthinsurance.net",
		"quicksytes.com",
		"read-books.org",
		"securitytactics.com",
		"serveexchange.com",
		"servehumour.com",
		"servep2p.com",
		"servesarcasm.com",
		"stufftoread.com",
		"ufcfan.org",
		"unusualperson.com",
		"workisboring.com",
		"3utilities.com",
		"bounceme.net",
		"ddns.net",
		"ddnsking.com",
		"gotdns.ch",
		"hopto.org",
		"myftp.biz",
		"myftp.org",
		"myvnc.com",
		"no-ip.biz",
		"no-ip.info",
		"no-ip.org",
		"noip.me",
		"redirectme.net",
		"servebeer.com",
		"serveblog.net",
		"servecounterstrike.com",
		"serveftp.com",
		"servegame.com",
		"servehalflife.com",
		"servehttp.com",
		"serveirc.com",
		"serveminecraft.net",
		"servemp3.com",
		"servepics.com",
		"servequake.com",
		"sytes.net",
		"webhop.me",
		"zapto.org",
		"stage.nodeart.io",
		"nodum.co",
		"nodum.io",
		"pcloud.host",
		"nyc.mn",
		"nom.ae",
		"nom.af",
		"nom.ai",
		"nom.al",
		"nym.by",
		"nom.bz",
		"nym.bz",
		"nom.cl",
		"nym.ec",
		"nom.gd",
		"nom.ge",
		"nom.gl",
		"nym.gr",
		"nom.gt",
		"nym.gy",
		"nym.hk",
		"nom.hn",
		"nym.ie",
		"nom.im",
		"nom.ke",
		"nym.kz",
		"nym.la",
		"nym.lc",
		"nom.li",
		"nym.li",
		"nym.lt",
		"nym.lu",
		"nom.lv",
		"nym.me",
		"nom.mk",
		"nym.mn",
		"nym.mx",
		"nom.nu",
		"nym.nz",
		"nym.pe",
		"nym.pt",
		"nom.pw",
		"nom.qa",
		"nym.ro",
		"nom.rs",
		"nom.si",
		"nym.sk",
		"nom.st",
		"nym.su",
		"nym.sx",
		"nom.tj",
		"nym.tw",
		"nom.ug",
		"nom.uy",
		"nom.vc",
		"nom.vg",
		"static.observableusercontent.com",
		"cya.gg",
		"cloudycluster.net",
		"nid.io",
		"opencraft.hosting",
		"operaunite.com",
		"skygearapp.com",
		"outsystemscloud.com",
		"ownprovider.com",
		"own.pm",
		"ox.rs",
		"oy.lc",
		"pgfog.com",
		"pagefrontapp.com",
		"art.pl",
		"gliwice.pl",
		"krakow.pl",
		"poznan.pl",
		"wroc.pl",
		"zakopane.pl",
		"pantheonsite.io",
		"gotpantheon.com",
		"mypep.link",
		"perspecta.cloud",
		"on-web.fr",
		"*.platform.sh",
		"*.platformsh.site",
		"dyn53.io",
		"co.bn",
		"xen.prgmr.com",
		"priv.at",
		"prvcy.page",
		"*.dweb.link",
		"protonet.io",
		"chirurgiens-dentistes-en-france.fr",
		"byen.site",
		"pubtls.org",
		"qualifioapp.com",
		"qbuser.com",
		"instantcloud.cn",
		"ras.ru",
		"qa2.com",
		"qcx.io",
		"*.sys.qcx.io",
		"dev-myqnapcloud.com",
		"alpha-myqnapcloud.com",
		"myqnapcloud.com",
		"*.quipelements.com",
		"vapor.cloud",
		"vaporcloud.io",
		"rackmaze.com",
		"rackmaze.net",
		"*.on-k3s.io",
		"*.on-rancher.cloud",
		"*.on-rio.io",
		"readthedocs.io",
		"rhcloud.com",
		"app.render.com",
		"onrender.com",
		"repl.co",
		"repl.run",
		"resindevice.io",
		"devices.resinstaging.io",
		"hzc.io",
		"wellbeingzone.eu",
		"ptplus.fit",
		"wellbeingzone.co.uk",
		"git-pages.rit.edu",
		"sandcats.io",
		"logoip.de",
		"logoip.com",
		"schokokeks.net",
		"gov.scot",
		"scrysec.com",
		"firewall-gateway.com",
		"firewall-gateway.de",
		"my-gateway.de",
		"my-router.de",
		"spdns.de",
		"spdns.eu",
		"firewall-gateway.net",
		"my-firewall.org",
		"myfirewall.org",
		"spdns.org",
		"senseering.net",
		"biz.ua",
		"co.ua",
		"pp.ua",
		"shiftedit.io",
		"myshopblocks.com",
		"shopitsite.com",
		"mo-siemens.io",
		"1kapp.com",
		"appchizi.com",
		"applinzi.com",
		"sinaapp.com",
		"vipsinaapp.com",
		"siteleaf.net",
		"bounty-full.com",
		"alpha.bounty-full.com",
		"beta.bounty-full.com",
		"stackhero-network.com",
		"static.land",
		"dev.static.land",
		"sites.static.land",
		"apps.lair.io",
		"*.stolos.io",
		"spacekit.io",
		"customer.speedpartner.de",
		"api.stdlib.com",
		"storj.farm",
		"utwente.io",
		"soc.srcf.net",
		"user.srcf.net",
		"temp-dns.com",
		"applicationcloud.io",
		"scapp.io",
		"*.s5y.io",
		"*.sensiosite.cloud",
		"syncloud.it",
		"diskstation.me",
		"dscloud.biz",
		"dscloud.me",
		"dscloud.mobi",
		"dsmynas.com",
		"dsmynas.net",
		"dsmynas.org",
		"familyds.com",
		"familyds.net",
		"familyds.org",
		"i234.me",
		"myds.me",
		"synology.me",
		"vpnplus.to",
		"direct.quickconnect.to",
		"taifun-dns.de",
		"gda.pl",
		"gdansk.pl",
		"gdynia.pl",
		"med.pl",
		"sopot.pl",
		"edugit.org",
		"telebit.app",
		"telebit.io",
		"*.telebit.xyz",
		"gwiddle.co.uk",
		"thingdustdata.com",
		"cust.dev.thingdust.io",
		"cust.disrec.thingdust.io",
		"cust.prod.thingdust.io",
		"cust.testing.thingdust.io",
		"arvo.network",
		"azimuth.network",
		"bloxcms.com",
		"townnews-staging.com",
		"12hp.at",
		"2ix.at",
		"4lima.at",
		"lima-city.at",
		"12hp.ch",
		"2ix.ch",
		"4lima.ch",
		"lima-city.ch",
		"trafficplex.cloud",
		"de.cool",
		"12hp.de",
		"2ix.de",
		"4lima.de",
		"lima-city.de",
		"1337.pictures",
		"clan.rip",
		"lima-city.rocks",
		"webspace.rocks",
		"lima.zone",
		"*.transurl.be",
		"*.transurl.eu",
		"*.transurl.nl",
		"tuxfamily.org",
		"dd-dns.de",
		"diskstation.eu",
		"diskstation.org",
		"dray-dns.de",
		"draydns.de",
		"dyn-vpn.de",
		"dynvpn.de",
		"mein-vigor.de",
		"my-vigor.de",
		"my-wan.de",
		"syno-ds.de",
		"synology-diskstation.de",
		"synology-ds.de",
		"uber.space",
		"*.uberspace.de",
		"hk.com",
		"hk.org",
		"ltd.hk",
		"inc.hk",
		"virtualuser.de",
		"virtual-user.de",
		"urown.cloud",
		"dnsupdate.info",
		"lib.de.us",
		"2038.io",
		"router.management",
		"v-info.info",
		"voorloper.cloud",
		"v.ua",
		"wafflecell.com",
		"*.webhare.dev",
		"wedeploy.io",
		"wedeploy.me",
		"wedeploy.sh",
		"remotewd.com",
		"wmflabs.org",
		"myforum.community",
		"community-pro.de",
		"diskussionsbereich.de",
		"community-pro.net",
		"meinforum.net",
		"half.host",
		"xnbay.com",
		"u2.xnbay.com",
		"u2-local.xnbay.com",
		"cistron.nl",
		"demon.nl",
		"xs4all.space",
		"yandexcloud.net",
		"storage.yandexcloud.net",
		"website.yandexcloud.net",
		"official.academy",
		"yolasite.com",
		"ybo.faith",
		"yombo.me",
		"homelink.one",
		"ybo.party",
		"ybo.review",
		"ybo.science",
		"ybo.trade",
		"nohost.me",
		"noho.st",
		"za.net",
		"za.org",
		"now.sh",
		"bss.design",
		"basicserver.io",
		"virtualserver.io",
		"enterprisecloud.nu"
	];

	/*eslint no-var:0, prefer-arrow-callback: 0, object-shorthand: 0 */

	var psl = createCommonjsModule(function (module, exports) {





	var internals = {};


	//
	// Read rules from file.
	//
	internals.rules = require$$0$7.map(function (rule) {

	  return {
	    rule: rule,
	    suffix: rule.replace(/^(\*\.|\!)/, ''),
	    punySuffix: -1,
	    wildcard: rule.charAt(0) === '*',
	    exception: rule.charAt(0) === '!'
	  };
	});


	//
	// Check is given string ends with `suffix`.
	//
	internals.endsWith = function (str, suffix) {

	  return str.indexOf(suffix, str.length - suffix.length) !== -1;
	};


	//
	// Find rule for a given domain.
	//
	internals.findRule = function (domain) {

	  var punyDomain = Punycode__default['default'].toASCII(domain);
	  return internals.rules.reduce(function (memo, rule) {

	    if (rule.punySuffix === -1){
	      rule.punySuffix = Punycode__default['default'].toASCII(rule.suffix);
	    }
	    if (!internals.endsWith(punyDomain, '.' + rule.punySuffix) && punyDomain !== rule.punySuffix) {
	      return memo;
	    }
	    // This has been commented out as it never seems to run. This is because
	    // sub tlds always appear after their parents and we never find a shorter
	    // match.
	    //if (memo) {
	    //  var memoSuffix = Punycode.toASCII(memo.suffix);
	    //  if (memoSuffix.length >= punySuffix.length) {
	    //    return memo;
	    //  }
	    //}
	    return rule;
	  }, null);
	};


	//
	// Error codes and messages.
	//
	exports.errorCodes = {
	  DOMAIN_TOO_SHORT: 'Domain name too short.',
	  DOMAIN_TOO_LONG: 'Domain name too long. It should be no more than 255 chars.',
	  LABEL_STARTS_WITH_DASH: 'Domain name label can not start with a dash.',
	  LABEL_ENDS_WITH_DASH: 'Domain name label can not end with a dash.',
	  LABEL_TOO_LONG: 'Domain name label should be at most 63 chars long.',
	  LABEL_TOO_SHORT: 'Domain name label should be at least 1 character long.',
	  LABEL_INVALID_CHARS: 'Domain name label can only contain alphanumeric characters or dashes.'
	};


	//
	// Validate domain name and throw if not valid.
	//
	// From wikipedia:
	//
	// Hostnames are composed of series of labels concatenated with dots, as are all
	// domain names. Each label must be between 1 and 63 characters long, and the
	// entire hostname (including the delimiting dots) has a maximum of 255 chars.
	//
	// Allowed chars:
	//
	// * `a-z`
	// * `0-9`
	// * `-` but not as a starting or ending character
	// * `.` as a separator for the textual portions of a domain name
	//
	// * http://en.wikipedia.org/wiki/Domain_name
	// * http://en.wikipedia.org/wiki/Hostname
	//
	internals.validate = function (input) {

	  // Before we can validate we need to take care of IDNs with unicode chars.
	  var ascii = Punycode__default['default'].toASCII(input);

	  if (ascii.length < 1) {
	    return 'DOMAIN_TOO_SHORT';
	  }
	  if (ascii.length > 255) {
	    return 'DOMAIN_TOO_LONG';
	  }

	  // Check each part's length and allowed chars.
	  var labels = ascii.split('.');
	  var label;

	  for (var i = 0; i < labels.length; ++i) {
	    label = labels[i];
	    if (!label.length) {
	      return 'LABEL_TOO_SHORT';
	    }
	    if (label.length > 63) {
	      return 'LABEL_TOO_LONG';
	    }
	    if (label.charAt(0) === '-') {
	      return 'LABEL_STARTS_WITH_DASH';
	    }
	    if (label.charAt(label.length - 1) === '-') {
	      return 'LABEL_ENDS_WITH_DASH';
	    }
	    if (!/^[a-z0-9\-]+$/.test(label)) {
	      return 'LABEL_INVALID_CHARS';
	    }
	  }
	};


	//
	// Public API
	//


	//
	// Parse domain.
	//
	exports.parse = function (input) {

	  if (typeof input !== 'string') {
	    throw new TypeError('Domain name must be a string.');
	  }

	  // Force domain to lowercase.
	  var domain = input.slice(0).toLowerCase();

	  // Handle FQDN.
	  // TODO: Simply remove trailing dot?
	  if (domain.charAt(domain.length - 1) === '.') {
	    domain = domain.slice(0, domain.length - 1);
	  }

	  // Validate and sanitise input.
	  var error = internals.validate(domain);
	  if (error) {
	    return {
	      input: input,
	      error: {
	        message: exports.errorCodes[error],
	        code: error
	      }
	    };
	  }

	  var parsed = {
	    input: input,
	    tld: null,
	    sld: null,
	    domain: null,
	    subdomain: null,
	    listed: false
	  };

	  var domainParts = domain.split('.');

	  // Non-Internet TLD
	  if (domainParts[domainParts.length - 1] === 'local') {
	    return parsed;
	  }

	  var handlePunycode = function () {

	    if (!/xn--/.test(domain)) {
	      return parsed;
	    }
	    if (parsed.domain) {
	      parsed.domain = Punycode__default['default'].toASCII(parsed.domain);
	    }
	    if (parsed.subdomain) {
	      parsed.subdomain = Punycode__default['default'].toASCII(parsed.subdomain);
	    }
	    return parsed;
	  };

	  var rule = internals.findRule(domain);

	  // Unlisted tld.
	  if (!rule) {
	    if (domainParts.length < 2) {
	      return parsed;
	    }
	    parsed.tld = domainParts.pop();
	    parsed.sld = domainParts.pop();
	    parsed.domain = [parsed.sld, parsed.tld].join('.');
	    if (domainParts.length) {
	      parsed.subdomain = domainParts.pop();
	    }
	    return handlePunycode();
	  }

	  // At this point we know the public suffix is listed.
	  parsed.listed = true;

	  var tldParts = rule.suffix.split('.');
	  var privateParts = domainParts.slice(0, domainParts.length - tldParts.length);

	  if (rule.exception) {
	    privateParts.push(tldParts.shift());
	  }

	  parsed.tld = tldParts.join('.');

	  if (!privateParts.length) {
	    return handlePunycode();
	  }

	  if (rule.wildcard) {
	    tldParts.unshift(privateParts.pop());
	    parsed.tld = tldParts.join('.');
	  }

	  if (!privateParts.length) {
	    return handlePunycode();
	  }

	  parsed.sld = privateParts.pop();
	  parsed.domain = [parsed.sld,  parsed.tld].join('.');

	  if (privateParts.length) {
	    parsed.subdomain = privateParts.join('.');
	  }

	  return handlePunycode();
	};


	//
	// Get domain.
	//
	exports.get = function (domain) {

	  if (!domain) {
	    return null;
	  }
	  return exports.parse(domain).domain || null;
	};


	//
	// Check whether domain belongs to a known public suffix.
	//
	exports.isValid = function (domain) {

	  var parsed = exports.parse(domain);
	  return Boolean(parsed.domain && parsed.listed);
	};
	});

	/*!
	 * Copyright (c) 2018, Salesforce.com, Inc.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are met:
	 *
	 * 1. Redistributions of source code must retain the above copyright notice,
	 * this list of conditions and the following disclaimer.
	 *
	 * 2. Redistributions in binary form must reproduce the above copyright notice,
	 * this list of conditions and the following disclaimer in the documentation
	 * and/or other materials provided with the distribution.
	 *
	 * 3. Neither the name of Salesforce.com nor the names of its contributors may
	 * be used to endorse or promote products derived from this software without
	 * specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
	 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
	 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
	 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
	 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
	 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 * POSSIBILITY OF SUCH DAMAGE.
	 */


	function getPublicSuffix$1(domain) {
	  return psl.get(domain);
	}

	var getPublicSuffix_1 = getPublicSuffix$1;

	var pubsuffixPsl = {
		getPublicSuffix: getPublicSuffix_1
	};

	/*!
	 * Copyright (c) 2015, Salesforce.com, Inc.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are met:
	 *
	 * 1. Redistributions of source code must retain the above copyright notice,
	 * this list of conditions and the following disclaimer.
	 *
	 * 2. Redistributions in binary form must reproduce the above copyright notice,
	 * this list of conditions and the following disclaimer in the documentation
	 * and/or other materials provided with the distribution.
	 *
	 * 3. Neither the name of Salesforce.com nor the names of its contributors may
	 * be used to endorse or promote products derived from this software without
	 * specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
	 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
	 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
	 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
	 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
	 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 * POSSIBILITY OF SUCH DAMAGE.
	 */
	/*jshint unused:false */

	function Store$2() {
	}
	var Store_1$1 = Store$2;

	// Stores may be synchronous, but are still required to use a
	// Continuation-Passing Style API.  The CookieJar itself will expose a "*Sync"
	// API that converts from synchronous-callbacks to imperative style.
	Store$2.prototype.synchronous = false;

	Store$2.prototype.findCookie = function(domain, path, key, cb) {
	  throw new Error('findCookie is not implemented');
	};

	Store$2.prototype.findCookies = function(domain, path, cb) {
	  throw new Error('findCookies is not implemented');
	};

	Store$2.prototype.putCookie = function(cookie, cb) {
	  throw new Error('putCookie is not implemented');
	};

	Store$2.prototype.updateCookie = function(oldCookie, newCookie, cb) {
	  // recommended default implementation:
	  // return this.putCookie(newCookie, cb);
	  throw new Error('updateCookie is not implemented');
	};

	Store$2.prototype.removeCookie = function(domain, path, key, cb) {
	  throw new Error('removeCookie is not implemented');
	};

	Store$2.prototype.removeCookies = function(domain, path, cb) {
	  throw new Error('removeCookies is not implemented');
	};

	Store$2.prototype.removeAllCookies = function(cb) {
	  throw new Error('removeAllCookies is not implemented');
	};

	Store$2.prototype.getAllCookies = function(cb) {
	  throw new Error('getAllCookies is not implemented (therefore jar cannot be serialized)');
	};

	var store = {
		Store: Store_1$1
	};

	/*!
	 * Copyright (c) 2015, Salesforce.com, Inc.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are met:
	 *
	 * 1. Redistributions of source code must retain the above copyright notice,
	 * this list of conditions and the following disclaimer.
	 *
	 * 2. Redistributions in binary form must reproduce the above copyright notice,
	 * this list of conditions and the following disclaimer in the documentation
	 * and/or other materials provided with the distribution.
	 *
	 * 3. Neither the name of Salesforce.com nor the names of its contributors may
	 * be used to endorse or promote products derived from this software without
	 * specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
	 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
	 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
	 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
	 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
	 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 * POSSIBILITY OF SUCH DAMAGE.
	 */


	// Gives the permutation of all possible domainMatch()es of a given domain. The
	// array is in shortest-to-longest order.  Handy for indexing.
	function permuteDomain$2 (domain) {
	  var pubSuf = pubsuffixPsl.getPublicSuffix(domain);
	  if (!pubSuf) {
	    return null;
	  }
	  if (pubSuf == domain) {
	    return [domain];
	  }

	  var prefix = domain.slice(0, -(pubSuf.length + 1)); // ".example.com"
	  var parts = prefix.split('.').reverse();
	  var cur = pubSuf;
	  var permutations = [cur];
	  while (parts.length) {
	    cur = parts.shift() + '.' + cur;
	    permutations.push(cur);
	  }
	  return permutations;
	}

	var permuteDomain_2 = permuteDomain$2;

	var permuteDomain_1 = {
		permuteDomain: permuteDomain_2
	};

	/*!
	 * Copyright (c) 2015, Salesforce.com, Inc.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are met:
	 *
	 * 1. Redistributions of source code must retain the above copyright notice,
	 * this list of conditions and the following disclaimer.
	 *
	 * 2. Redistributions in binary form must reproduce the above copyright notice,
	 * this list of conditions and the following disclaimer in the documentation
	 * and/or other materials provided with the distribution.
	 *
	 * 3. Neither the name of Salesforce.com nor the names of its contributors may
	 * be used to endorse or promote products derived from this software without
	 * specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
	 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
	 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
	 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
	 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
	 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 * POSSIBILITY OF SUCH DAMAGE.
	 */
	/*
	 * "A request-path path-matches a given cookie-path if at least one of the
	 * following conditions holds:"
	 */
	function pathMatch$2 (reqPath, cookiePath) {
	  // "o  The cookie-path and the request-path are identical."
	  if (cookiePath === reqPath) {
	    return true;
	  }

	  var idx = reqPath.indexOf(cookiePath);
	  if (idx === 0) {
	    // "o  The cookie-path is a prefix of the request-path, and the last
	    // character of the cookie-path is %x2F ("/")."
	    if (cookiePath.substr(-1) === "/") {
	      return true;
	    }

	    // " o  The cookie-path is a prefix of the request-path, and the first
	    // character of the request-path that is not included in the cookie- path
	    // is a %x2F ("/") character."
	    if (reqPath.substr(cookiePath.length, 1) === "/") {
	      return true;
	    }
	  }

	  return false;
	}

	var pathMatch_2 = pathMatch$2;

	var pathMatch_1$1 = {
		pathMatch: pathMatch_2
	};

	/*!
	 * Copyright (c) 2015, Salesforce.com, Inc.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are met:
	 *
	 * 1. Redistributions of source code must retain the above copyright notice,
	 * this list of conditions and the following disclaimer.
	 *
	 * 2. Redistributions in binary form must reproduce the above copyright notice,
	 * this list of conditions and the following disclaimer in the documentation
	 * and/or other materials provided with the distribution.
	 *
	 * 3. Neither the name of Salesforce.com nor the names of its contributors may
	 * be used to endorse or promote products derived from this software without
	 * specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
	 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
	 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
	 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
	 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
	 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 * POSSIBILITY OF SUCH DAMAGE.
	 */
	var Store$1 = store.Store;
	var permuteDomain$1 = permuteDomain_1.permuteDomain;
	var pathMatch$1 = pathMatch_1$1.pathMatch;


	function MemoryCookieStore$1() {
	  Store$1.call(this);
	  this.idx = {};
	}
	util__default['default'].inherits(MemoryCookieStore$1, Store$1);
	var MemoryCookieStore_1$1 = MemoryCookieStore$1;
	MemoryCookieStore$1.prototype.idx = null;

	// Since it's just a struct in RAM, this Store is synchronous
	MemoryCookieStore$1.prototype.synchronous = true;

	// force a default depth:
	MemoryCookieStore$1.prototype.inspect = function() {
	  return "{ idx: "+util__default['default'].inspect(this.idx, false, 2)+' }';
	};

	// Use the new custom inspection symbol to add the custom inspect function if
	// available.
	if (util__default['default'].inspect.custom) {
	  MemoryCookieStore$1.prototype[util__default['default'].inspect.custom] = MemoryCookieStore$1.prototype.inspect;
	}

	MemoryCookieStore$1.prototype.findCookie = function(domain, path, key, cb) {
	  if (!this.idx[domain]) {
	    return cb(null,undefined);
	  }
	  if (!this.idx[domain][path]) {
	    return cb(null,undefined);
	  }
	  return cb(null,this.idx[domain][path][key]||null);
	};

	MemoryCookieStore$1.prototype.findCookies = function(domain, path, cb) {
	  var results = [];
	  if (!domain) {
	    return cb(null,[]);
	  }

	  var pathMatcher;
	  if (!path) {
	    // null means "all paths"
	    pathMatcher = function matchAll(domainIndex) {
	      for (var curPath in domainIndex) {
	        var pathIndex = domainIndex[curPath];
	        for (var key in pathIndex) {
	          results.push(pathIndex[key]);
	        }
	      }
	    };

	  } else {
	    pathMatcher = function matchRFC(domainIndex) {
	       //NOTE: we should use path-match algorithm from S5.1.4 here
	       //(see : https://github.com/ChromiumWebApps/chromium/blob/b3d3b4da8bb94c1b2e061600df106d590fda3620/net/cookies/canonical_cookie.cc#L299)
	       Object.keys(domainIndex).forEach(function (cookiePath) {
	         if (pathMatch$1(path, cookiePath)) {
	           var pathIndex = domainIndex[cookiePath];

	           for (var key in pathIndex) {
	             results.push(pathIndex[key]);
	           }
	         }
	       });
	     };
	  }

	  var domains = permuteDomain$1(domain) || [domain];
	  var idx = this.idx;
	  domains.forEach(function(curDomain) {
	    var domainIndex = idx[curDomain];
	    if (!domainIndex) {
	      return;
	    }
	    pathMatcher(domainIndex);
	  });

	  cb(null,results);
	};

	MemoryCookieStore$1.prototype.putCookie = function(cookie, cb) {
	  if (!this.idx[cookie.domain]) {
	    this.idx[cookie.domain] = {};
	  }
	  if (!this.idx[cookie.domain][cookie.path]) {
	    this.idx[cookie.domain][cookie.path] = {};
	  }
	  this.idx[cookie.domain][cookie.path][cookie.key] = cookie;
	  cb(null);
	};

	MemoryCookieStore$1.prototype.updateCookie = function(oldCookie, newCookie, cb) {
	  // updateCookie() may avoid updating cookies that are identical.  For example,
	  // lastAccessed may not be important to some stores and an equality
	  // comparison could exclude that field.
	  this.putCookie(newCookie,cb);
	};

	MemoryCookieStore$1.prototype.removeCookie = function(domain, path, key, cb) {
	  if (this.idx[domain] && this.idx[domain][path] && this.idx[domain][path][key]) {
	    delete this.idx[domain][path][key];
	  }
	  cb(null);
	};

	MemoryCookieStore$1.prototype.removeCookies = function(domain, path, cb) {
	  if (this.idx[domain]) {
	    if (path) {
	      delete this.idx[domain][path];
	    } else {
	      delete this.idx[domain];
	    }
	  }
	  return cb(null);
	};

	MemoryCookieStore$1.prototype.removeAllCookies = function(cb) {
	  this.idx = {};
	  return cb(null);
	};

	MemoryCookieStore$1.prototype.getAllCookies = function(cb) {
	  var cookies = [];
	  var idx = this.idx;

	  var domains = Object.keys(idx);
	  domains.forEach(function(domain) {
	    var paths = Object.keys(idx[domain]);
	    paths.forEach(function(path) {
	      var keys = Object.keys(idx[domain][path]);
	      keys.forEach(function(key) {
	        if (key !== null) {
	          cookies.push(idx[domain][path][key]);
	        }
	      });
	    });
	  });

	  // Sort by creationIndex so deserializing retains the creation order.
	  // When implementing your own store, this SHOULD retain the order too
	  cookies.sort(function(a,b) {
	    return (a.creationIndex||0) - (b.creationIndex||0);
	  });

	  cb(null, cookies);
	};

	var memstore = {
		MemoryCookieStore: MemoryCookieStore_1$1
	};

	// generated by genversion
	var version$a = '2.5.0';

	/*!
	 * Copyright (c) 2015, Salesforce.com, Inc.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are met:
	 *
	 * 1. Redistributions of source code must retain the above copyright notice,
	 * this list of conditions and the following disclaimer.
	 *
	 * 2. Redistributions in binary form must reproduce the above copyright notice,
	 * this list of conditions and the following disclaimer in the documentation
	 * and/or other materials provided with the distribution.
	 *
	 * 3. Neither the name of Salesforce.com nor the names of its contributors may
	 * be used to endorse or promote products derived from this software without
	 * specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
	 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
	 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
	 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
	 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
	 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 * POSSIBILITY OF SUCH DAMAGE.
	 */

	var urlParse$1 = url__default['default'].parse;


	var Store = store.Store;
	var MemoryCookieStore = memstore.MemoryCookieStore;
	var pathMatch = pathMatch_1$1.pathMatch;


	var punycode$2;
	try {
	  punycode$2 = Punycode__default['default'];
	} catch(e) {
	  console.warn("tough-cookie: can't load punycode; won't use punycode for domain normalization");
	}

	// From RFC6265 S4.1.1
	// note that it excludes \x3B ";"
	var COOKIE_OCTETS = /^[\x21\x23-\x2B\x2D-\x3A\x3C-\x5B\x5D-\x7E]+$/;

	var CONTROL_CHARS = /[\x00-\x1F]/;

	// From Chromium // '\r', '\n' and '\0' should be treated as a terminator in
	// the "relaxed" mode, see:
	// https://github.com/ChromiumWebApps/chromium/blob/b3d3b4da8bb94c1b2e061600df106d590fda3620/net/cookies/parsed_cookie.cc#L60
	var TERMINATORS = ['\n', '\r', '\0'];

	// RFC6265 S4.1.1 defines path value as 'any CHAR except CTLs or ";"'
	// Note ';' is \x3B
	var PATH_VALUE = /[\x20-\x3A\x3C-\x7E]+/;

	// date-time parsing constants (RFC6265 S5.1.1)

	var DATE_DELIM = /[\x09\x20-\x2F\x3B-\x40\x5B-\x60\x7B-\x7E]/;

	var MONTH_TO_NUM = {
	  jan:0, feb:1, mar:2, apr:3, may:4, jun:5,
	  jul:6, aug:7, sep:8, oct:9, nov:10, dec:11
	};
	var NUM_TO_MONTH = [
	  'Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'
	];
	var NUM_TO_DAY = [
	  'Sun','Mon','Tue','Wed','Thu','Fri','Sat'
	];

	var MAX_TIME = 2147483647000; // 31-bit max
	var MIN_TIME = 0; // 31-bit min

	/*
	 * Parses a Natural number (i.e., non-negative integer) with either the
	 *    <min>*<max>DIGIT ( non-digit *OCTET )
	 * or
	 *    <min>*<max>DIGIT
	 * grammar (RFC6265 S5.1.1).
	 *
	 * The "trailingOK" boolean controls if the grammar accepts a
	 * "( non-digit *OCTET )" trailer.
	 */
	function parseDigits(token, minDigits, maxDigits, trailingOK) {
	  var count = 0;
	  while (count < token.length) {
	    var c = token.charCodeAt(count);
	    // "non-digit = %x00-2F / %x3A-FF"
	    if (c <= 0x2F || c >= 0x3A) {
	      break;
	    }
	    count++;
	  }

	  // constrain to a minimum and maximum number of digits.
	  if (count < minDigits || count > maxDigits) {
	    return null;
	  }

	  if (!trailingOK && count != token.length) {
	    return null;
	  }

	  return parseInt(token.substr(0,count), 10);
	}

	function parseTime(token) {
	  var parts = token.split(':');
	  var result = [0,0,0];

	  /* RF6256 S5.1.1:
	   *      time            = hms-time ( non-digit *OCTET )
	   *      hms-time        = time-field ":" time-field ":" time-field
	   *      time-field      = 1*2DIGIT
	   */

	  if (parts.length !== 3) {
	    return null;
	  }

	  for (var i = 0; i < 3; i++) {
	    // "time-field" must be strictly "1*2DIGIT", HOWEVER, "hms-time" can be
	    // followed by "( non-digit *OCTET )" so therefore the last time-field can
	    // have a trailer
	    var trailingOK = (i == 2);
	    var num = parseDigits(parts[i], 1, 2, trailingOK);
	    if (num === null) {
	      return null;
	    }
	    result[i] = num;
	  }

	  return result;
	}

	function parseMonth(token) {
	  token = String(token).substr(0,3).toLowerCase();
	  var num = MONTH_TO_NUM[token];
	  return num >= 0 ? num : null;
	}

	/*
	 * RFC6265 S5.1.1 date parser (see RFC for full grammar)
	 */
	function parseDate(str) {
	  if (!str) {
	    return;
	  }

	  /* RFC6265 S5.1.1:
	   * 2. Process each date-token sequentially in the order the date-tokens
	   * appear in the cookie-date
	   */
	  var tokens = str.split(DATE_DELIM);
	  if (!tokens) {
	    return;
	  }

	  var hour = null;
	  var minute = null;
	  var second = null;
	  var dayOfMonth = null;
	  var month = null;
	  var year = null;

	  for (var i=0; i<tokens.length; i++) {
	    var token = tokens[i].trim();
	    if (!token.length) {
	      continue;
	    }

	    var result;

	    /* 2.1. If the found-time flag is not set and the token matches the time
	     * production, set the found-time flag and set the hour- value,
	     * minute-value, and second-value to the numbers denoted by the digits in
	     * the date-token, respectively.  Skip the remaining sub-steps and continue
	     * to the next date-token.
	     */
	    if (second === null) {
	      result = parseTime(token);
	      if (result) {
	        hour = result[0];
	        minute = result[1];
	        second = result[2];
	        continue;
	      }
	    }

	    /* 2.2. If the found-day-of-month flag is not set and the date-token matches
	     * the day-of-month production, set the found-day-of- month flag and set
	     * the day-of-month-value to the number denoted by the date-token.  Skip
	     * the remaining sub-steps and continue to the next date-token.
	     */
	    if (dayOfMonth === null) {
	      // "day-of-month = 1*2DIGIT ( non-digit *OCTET )"
	      result = parseDigits(token, 1, 2, true);
	      if (result !== null) {
	        dayOfMonth = result;
	        continue;
	      }
	    }

	    /* 2.3. If the found-month flag is not set and the date-token matches the
	     * month production, set the found-month flag and set the month-value to
	     * the month denoted by the date-token.  Skip the remaining sub-steps and
	     * continue to the next date-token.
	     */
	    if (month === null) {
	      result = parseMonth(token);
	      if (result !== null) {
	        month = result;
	        continue;
	      }
	    }

	    /* 2.4. If the found-year flag is not set and the date-token matches the
	     * year production, set the found-year flag and set the year-value to the
	     * number denoted by the date-token.  Skip the remaining sub-steps and
	     * continue to the next date-token.
	     */
	    if (year === null) {
	      // "year = 2*4DIGIT ( non-digit *OCTET )"
	      result = parseDigits(token, 2, 4, true);
	      if (result !== null) {
	        year = result;
	        /* From S5.1.1:
	         * 3.  If the year-value is greater than or equal to 70 and less
	         * than or equal to 99, increment the year-value by 1900.
	         * 4.  If the year-value is greater than or equal to 0 and less
	         * than or equal to 69, increment the year-value by 2000.
	         */
	        if (year >= 70 && year <= 99) {
	          year += 1900;
	        } else if (year >= 0 && year <= 69) {
	          year += 2000;
	        }
	      }
	    }
	  }

	  /* RFC 6265 S5.1.1
	   * "5. Abort these steps and fail to parse the cookie-date if:
	   *     *  at least one of the found-day-of-month, found-month, found-
	   *        year, or found-time flags is not set,
	   *     *  the day-of-month-value is less than 1 or greater than 31,
	   *     *  the year-value is less than 1601,
	   *     *  the hour-value is greater than 23,
	   *     *  the minute-value is greater than 59, or
	   *     *  the second-value is greater than 59.
	   *     (Note that leap seconds cannot be represented in this syntax.)"
	   *
	   * So, in order as above:
	   */
	  if (
	    dayOfMonth === null || month === null || year === null || second === null ||
	    dayOfMonth < 1 || dayOfMonth > 31 ||
	    year < 1601 ||
	    hour > 23 ||
	    minute > 59 ||
	    second > 59
	  ) {
	    return;
	  }

	  return new Date(Date.UTC(year, month, dayOfMonth, hour, minute, second));
	}

	function formatDate(date) {
	  var d = date.getUTCDate(); d = d >= 10 ? d : '0'+d;
	  var h = date.getUTCHours(); h = h >= 10 ? h : '0'+h;
	  var m = date.getUTCMinutes(); m = m >= 10 ? m : '0'+m;
	  var s = date.getUTCSeconds(); s = s >= 10 ? s : '0'+s;
	  return NUM_TO_DAY[date.getUTCDay()] + ', ' +
	    d+' '+ NUM_TO_MONTH[date.getUTCMonth()] +' '+ date.getUTCFullYear() +' '+
	    h+':'+m+':'+s+' GMT';
	}

	// S5.1.2 Canonicalized Host Names
	function canonicalDomain(str) {
	  if (str == null) {
	    return null;
	  }
	  str = str.trim().replace(/^\./,''); // S4.1.2.3 & S5.2.3: ignore leading .

	  // convert to IDN if any non-ASCII characters
	  if (punycode$2 && /[^\u0001-\u007f]/.test(str)) {
	    str = punycode$2.toASCII(str);
	  }

	  return str.toLowerCase();
	}

	// S5.1.3 Domain Matching
	function domainMatch(str, domStr, canonicalize) {
	  if (str == null || domStr == null) {
	    return null;
	  }
	  if (canonicalize !== false) {
	    str = canonicalDomain(str);
	    domStr = canonicalDomain(domStr);
	  }

	  /*
	   * "The domain string and the string are identical. (Note that both the
	   * domain string and the string will have been canonicalized to lower case at
	   * this point)"
	   */
	  if (str == domStr) {
	    return true;
	  }

	  /* "All of the following [three] conditions hold:" (order adjusted from the RFC) */

	  /* "* The string is a host name (i.e., not an IP address)." */
	  if (net__default['default'].isIP(str)) {
	    return false;
	  }

	  /* "* The domain string is a suffix of the string" */
	  var idx = str.indexOf(domStr);
	  if (idx <= 0) {
	    return false; // it's a non-match (-1) or prefix (0)
	  }

	  // e.g "a.b.c".indexOf("b.c") === 2
	  // 5 === 3+2
	  if (str.length !== domStr.length + idx) { // it's not a suffix
	    return false;
	  }

	  /* "* The last character of the string that is not included in the domain
	  * string is a %x2E (".") character." */
	  if (str.substr(idx-1,1) !== '.') {
	    return false;
	  }

	  return true;
	}


	// RFC6265 S5.1.4 Paths and Path-Match

	/*
	 * "The user agent MUST use an algorithm equivalent to the following algorithm
	 * to compute the default-path of a cookie:"
	 *
	 * Assumption: the path (and not query part or absolute uri) is passed in.
	 */
	function defaultPath(path) {
	  // "2. If the uri-path is empty or if the first character of the uri-path is not
	  // a %x2F ("/") character, output %x2F ("/") and skip the remaining steps.
	  if (!path || path.substr(0,1) !== "/") {
	    return "/";
	  }

	  // "3. If the uri-path contains no more than one %x2F ("/") character, output
	  // %x2F ("/") and skip the remaining step."
	  if (path === "/") {
	    return path;
	  }

	  var rightSlash = path.lastIndexOf("/");
	  if (rightSlash === 0) {
	    return "/";
	  }

	  // "4. Output the characters of the uri-path from the first character up to,
	  // but not including, the right-most %x2F ("/")."
	  return path.slice(0, rightSlash);
	}

	function trimTerminator(str) {
	  for (var t = 0; t < TERMINATORS.length; t++) {
	    var terminatorIdx = str.indexOf(TERMINATORS[t]);
	    if (terminatorIdx !== -1) {
	      str = str.substr(0,terminatorIdx);
	    }
	  }

	  return str;
	}

	function parseCookiePair(cookiePair, looseMode) {
	  cookiePair = trimTerminator(cookiePair);

	  var firstEq = cookiePair.indexOf('=');
	  if (looseMode) {
	    if (firstEq === 0) { // '=' is immediately at start
	      cookiePair = cookiePair.substr(1);
	      firstEq = cookiePair.indexOf('='); // might still need to split on '='
	    }
	  } else { // non-loose mode
	    if (firstEq <= 0) { // no '=' or is at start
	      return; // needs to have non-empty "cookie-name"
	    }
	  }

	  var cookieName, cookieValue;
	  if (firstEq <= 0) {
	    cookieName = "";
	    cookieValue = cookiePair.trim();
	  } else {
	    cookieName = cookiePair.substr(0, firstEq).trim();
	    cookieValue = cookiePair.substr(firstEq+1).trim();
	  }

	  if (CONTROL_CHARS.test(cookieName) || CONTROL_CHARS.test(cookieValue)) {
	    return;
	  }

	  var c = new Cookie$1();
	  c.key = cookieName;
	  c.value = cookieValue;
	  return c;
	}

	function parse$a(str, options) {
	  if (!options || typeof options !== 'object') {
	    options = {};
	  }
	  str = str.trim();

	  // We use a regex to parse the "name-value-pair" part of S5.2
	  var firstSemi = str.indexOf(';'); // S5.2 step 1
	  var cookiePair = (firstSemi === -1) ? str : str.substr(0, firstSemi);
	  var c = parseCookiePair(cookiePair, !!options.loose);
	  if (!c) {
	    return;
	  }

	  if (firstSemi === -1) {
	    return c;
	  }

	  // S5.2.3 "unparsed-attributes consist of the remainder of the set-cookie-string
	  // (including the %x3B (";") in question)." plus later on in the same section
	  // "discard the first ";" and trim".
	  var unparsed = str.slice(firstSemi + 1).trim();

	  // "If the unparsed-attributes string is empty, skip the rest of these
	  // steps."
	  if (unparsed.length === 0) {
	    return c;
	  }

	  /*
	   * S5.2 says that when looping over the items "[p]rocess the attribute-name
	   * and attribute-value according to the requirements in the following
	   * subsections" for every item.  Plus, for many of the individual attributes
	   * in S5.3 it says to use the "attribute-value of the last attribute in the
	   * cookie-attribute-list".  Therefore, in this implementation, we overwrite
	   * the previous value.
	   */
	  var cookie_avs = unparsed.split(';');
	  while (cookie_avs.length) {
	    var av = cookie_avs.shift().trim();
	    if (av.length === 0) { // happens if ";;" appears
	      continue;
	    }
	    var av_sep = av.indexOf('=');
	    var av_key, av_value;

	    if (av_sep === -1) {
	      av_key = av;
	      av_value = null;
	    } else {
	      av_key = av.substr(0,av_sep);
	      av_value = av.substr(av_sep+1);
	    }

	    av_key = av_key.trim().toLowerCase();

	    if (av_value) {
	      av_value = av_value.trim();
	    }

	    switch(av_key) {
	    case 'expires': // S5.2.1
	      if (av_value) {
	        var exp = parseDate(av_value);
	        // "If the attribute-value failed to parse as a cookie date, ignore the
	        // cookie-av."
	        if (exp) {
	          // over and underflow not realistically a concern: V8's getTime() seems to
	          // store something larger than a 32-bit time_t (even with 32-bit node)
	          c.expires = exp;
	        }
	      }
	      break;

	    case 'max-age': // S5.2.2
	      if (av_value) {
	        // "If the first character of the attribute-value is not a DIGIT or a "-"
	        // character ...[or]... If the remainder of attribute-value contains a
	        // non-DIGIT character, ignore the cookie-av."
	        if (/^-?[0-9]+$/.test(av_value)) {
	          var delta = parseInt(av_value, 10);
	          // "If delta-seconds is less than or equal to zero (0), let expiry-time
	          // be the earliest representable date and time."
	          c.setMaxAge(delta);
	        }
	      }
	      break;

	    case 'domain': // S5.2.3
	      // "If the attribute-value is empty, the behavior is undefined.  However,
	      // the user agent SHOULD ignore the cookie-av entirely."
	      if (av_value) {
	        // S5.2.3 "Let cookie-domain be the attribute-value without the leading %x2E
	        // (".") character."
	        var domain = av_value.trim().replace(/^\./, '');
	        if (domain) {
	          // "Convert the cookie-domain to lower case."
	          c.domain = domain.toLowerCase();
	        }
	      }
	      break;

	    case 'path': // S5.2.4
	      /*
	       * "If the attribute-value is empty or if the first character of the
	       * attribute-value is not %x2F ("/"):
	       *   Let cookie-path be the default-path.
	       * Otherwise:
	       *   Let cookie-path be the attribute-value."
	       *
	       * We'll represent the default-path as null since it depends on the
	       * context of the parsing.
	       */
	      c.path = av_value && av_value[0] === "/" ? av_value : null;
	      break;

	    case 'secure': // S5.2.5
	      /*
	       * "If the attribute-name case-insensitively matches the string "Secure",
	       * the user agent MUST append an attribute to the cookie-attribute-list
	       * with an attribute-name of Secure and an empty attribute-value."
	       */
	      c.secure = true;
	      break;

	    case 'httponly': // S5.2.6 -- effectively the same as 'secure'
	      c.httpOnly = true;
	      break;

	    default:
	      c.extensions = c.extensions || [];
	      c.extensions.push(av);
	      break;
	    }
	  }

	  return c;
	}

	// avoid the V8 deoptimization monster!
	function jsonParse(str) {
	  var obj;
	  try {
	    obj = JSON.parse(str);
	  } catch (e) {
	    return e;
	  }
	  return obj;
	}

	function fromJSON(str) {
	  if (!str) {
	    return null;
	  }

	  var obj;
	  if (typeof str === 'string') {
	    obj = jsonParse(str);
	    if (obj instanceof Error) {
	      return null;
	    }
	  } else {
	    // assume it's an Object
	    obj = str;
	  }

	  var c = new Cookie$1();
	  for (var i=0; i<Cookie$1.serializableProperties.length; i++) {
	    var prop = Cookie$1.serializableProperties[i];
	    if (obj[prop] === undefined ||
	        obj[prop] === Cookie$1.prototype[prop])
	    {
	      continue; // leave as prototype default
	    }

	    if (prop === 'expires' ||
	        prop === 'creation' ||
	        prop === 'lastAccessed')
	    {
	      if (obj[prop] === null) {
	        c[prop] = null;
	      } else {
	        c[prop] = obj[prop] == "Infinity" ?
	          "Infinity" : new Date(obj[prop]);
	      }
	    } else {
	      c[prop] = obj[prop];
	    }
	  }

	  return c;
	}

	/* Section 5.4 part 2:
	 * "*  Cookies with longer paths are listed before cookies with
	 *     shorter paths.
	 *
	 *  *  Among cookies that have equal-length path fields, cookies with
	 *     earlier creation-times are listed before cookies with later
	 *     creation-times."
	 */

	function cookieCompare(a,b) {
	  var cmp = 0;

	  // descending for length: b CMP a
	  var aPathLen = a.path ? a.path.length : 0;
	  var bPathLen = b.path ? b.path.length : 0;
	  cmp = bPathLen - aPathLen;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  // ascending for time: a CMP b
	  var aTime = a.creation ? a.creation.getTime() : MAX_TIME;
	  var bTime = b.creation ? b.creation.getTime() : MAX_TIME;
	  cmp = aTime - bTime;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  // break ties for the same millisecond (precision of JavaScript's clock)
	  cmp = a.creationIndex - b.creationIndex;

	  return cmp;
	}

	// Gives the permutation of all possible pathMatch()es of a given path. The
	// array is in longest-to-shortest order.  Handy for indexing.
	function permutePath(path) {
	  if (path === '/') {
	    return ['/'];
	  }
	  if (path.lastIndexOf('/') === path.length-1) {
	    path = path.substr(0,path.length-1);
	  }
	  var permutations = [path];
	  while (path.length > 1) {
	    var lindex = path.lastIndexOf('/');
	    if (lindex === 0) {
	      break;
	    }
	    path = path.substr(0,lindex);
	    permutations.push(path);
	  }
	  permutations.push('/');
	  return permutations;
	}

	function getCookieContext(url) {
	  if (url instanceof Object) {
	    return url;
	  }
	  // NOTE: decodeURI will throw on malformed URIs (see GH-32).
	  // Therefore, we will just skip decoding for such URIs.
	  try {
	    url = decodeURI(url);
	  }
	  catch(err) {
	    // Silently swallow error
	  }

	  return urlParse$1(url);
	}

	function Cookie$1(options) {
	  options = options || {};

	  Object.keys(options).forEach(function(prop) {
	    if (Cookie$1.prototype.hasOwnProperty(prop) &&
	        Cookie$1.prototype[prop] !== options[prop] &&
	        prop.substr(0,1) !== '_')
	    {
	      this[prop] = options[prop];
	    }
	  }, this);

	  this.creation = this.creation || new Date();

	  // used to break creation ties in cookieCompare():
	  Object.defineProperty(this, 'creationIndex', {
	    configurable: false,
	    enumerable: false, // important for assert.deepEqual checks
	    writable: true,
	    value: ++Cookie$1.cookiesCreated
	  });
	}

	Cookie$1.cookiesCreated = 0; // incremented each time a cookie is created

	Cookie$1.parse = parse$a;
	Cookie$1.fromJSON = fromJSON;

	Cookie$1.prototype.key = "";
	Cookie$1.prototype.value = "";

	// the order in which the RFC has them:
	Cookie$1.prototype.expires = "Infinity"; // coerces to literal Infinity
	Cookie$1.prototype.maxAge = null; // takes precedence over expires for TTL
	Cookie$1.prototype.domain = null;
	Cookie$1.prototype.path = null;
	Cookie$1.prototype.secure = false;
	Cookie$1.prototype.httpOnly = false;
	Cookie$1.prototype.extensions = null;

	// set by the CookieJar:
	Cookie$1.prototype.hostOnly = null; // boolean when set
	Cookie$1.prototype.pathIsDefault = null; // boolean when set
	Cookie$1.prototype.creation = null; // Date when set; defaulted by Cookie.parse
	Cookie$1.prototype.lastAccessed = null; // Date when set
	Object.defineProperty(Cookie$1.prototype, 'creationIndex', {
	  configurable: true,
	  enumerable: false,
	  writable: true,
	  value: 0
	});

	Cookie$1.serializableProperties = Object.keys(Cookie$1.prototype)
	  .filter(function(prop) {
	    return !(
	      Cookie$1.prototype[prop] instanceof Function ||
	      prop === 'creationIndex' ||
	      prop.substr(0,1) === '_'
	    );
	  });

	Cookie$1.prototype.inspect = function inspect() {
	  var now = Date.now();
	  return 'Cookie="'+this.toString() +
	    '; hostOnly='+(this.hostOnly != null ? this.hostOnly : '?') +
	    '; aAge='+(this.lastAccessed ? (now-this.lastAccessed.getTime())+'ms' : '?') +
	    '; cAge='+(this.creation ? (now-this.creation.getTime())+'ms' : '?') +
	    '"';
	};

	// Use the new custom inspection symbol to add the custom inspect function if
	// available.
	if (util__default['default'].inspect.custom) {
	  Cookie$1.prototype[util__default['default'].inspect.custom] = Cookie$1.prototype.inspect;
	}

	Cookie$1.prototype.toJSON = function() {
	  var obj = {};

	  var props = Cookie$1.serializableProperties;
	  for (var i=0; i<props.length; i++) {
	    var prop = props[i];
	    if (this[prop] === Cookie$1.prototype[prop]) {
	      continue; // leave as prototype default
	    }

	    if (prop === 'expires' ||
	        prop === 'creation' ||
	        prop === 'lastAccessed')
	    {
	      if (this[prop] === null) {
	        obj[prop] = null;
	      } else {
	        obj[prop] = this[prop] == "Infinity" ? // intentionally not ===
	          "Infinity" : this[prop].toISOString();
	      }
	    } else if (prop === 'maxAge') {
	      if (this[prop] !== null) {
	        // again, intentionally not ===
	        obj[prop] = (this[prop] == Infinity || this[prop] == -Infinity) ?
	          this[prop].toString() : this[prop];
	      }
	    } else {
	      if (this[prop] !== Cookie$1.prototype[prop]) {
	        obj[prop] = this[prop];
	      }
	    }
	  }

	  return obj;
	};

	Cookie$1.prototype.clone = function() {
	  return fromJSON(this.toJSON());
	};

	Cookie$1.prototype.validate = function validate() {
	  if (!COOKIE_OCTETS.test(this.value)) {
	    return false;
	  }
	  if (this.expires != Infinity && !(this.expires instanceof Date) && !parseDate(this.expires)) {
	    return false;
	  }
	  if (this.maxAge != null && this.maxAge <= 0) {
	    return false; // "Max-Age=" non-zero-digit *DIGIT
	  }
	  if (this.path != null && !PATH_VALUE.test(this.path)) {
	    return false;
	  }

	  var cdomain = this.cdomain();
	  if (cdomain) {
	    if (cdomain.match(/\.$/)) {
	      return false; // S4.1.2.3 suggests that this is bad. domainMatch() tests confirm this
	    }
	    var suffix = pubsuffixPsl.getPublicSuffix(cdomain);
	    if (suffix == null) { // it's a public suffix
	      return false;
	    }
	  }
	  return true;
	};

	Cookie$1.prototype.setExpires = function setExpires(exp) {
	  if (exp instanceof Date) {
	    this.expires = exp;
	  } else {
	    this.expires = parseDate(exp) || "Infinity";
	  }
	};

	Cookie$1.prototype.setMaxAge = function setMaxAge(age) {
	  if (age === Infinity || age === -Infinity) {
	    this.maxAge = age.toString(); // so JSON.stringify() works
	  } else {
	    this.maxAge = age;
	  }
	};

	// gives Cookie header format
	Cookie$1.prototype.cookieString = function cookieString() {
	  var val = this.value;
	  if (val == null) {
	    val = '';
	  }
	  if (this.key === '') {
	    return val;
	  }
	  return this.key+'='+val;
	};

	// gives Set-Cookie header format
	Cookie$1.prototype.toString = function toString() {
	  var str = this.cookieString();

	  if (this.expires != Infinity) {
	    if (this.expires instanceof Date) {
	      str += '; Expires='+formatDate(this.expires);
	    } else {
	      str += '; Expires='+this.expires;
	    }
	  }

	  if (this.maxAge != null && this.maxAge != Infinity) {
	    str += '; Max-Age='+this.maxAge;
	  }

	  if (this.domain && !this.hostOnly) {
	    str += '; Domain='+this.domain;
	  }
	  if (this.path) {
	    str += '; Path='+this.path;
	  }

	  if (this.secure) {
	    str += '; Secure';
	  }
	  if (this.httpOnly) {
	    str += '; HttpOnly';
	  }
	  if (this.extensions) {
	    this.extensions.forEach(function(ext) {
	      str += '; '+ext;
	    });
	  }

	  return str;
	};

	// TTL() partially replaces the "expiry-time" parts of S5.3 step 3 (setCookie()
	// elsewhere)
	// S5.3 says to give the "latest representable date" for which we use Infinity
	// For "expired" we use 0
	Cookie$1.prototype.TTL = function TTL(now) {
	  /* RFC6265 S4.1.2.2 If a cookie has both the Max-Age and the Expires
	   * attribute, the Max-Age attribute has precedence and controls the
	   * expiration date of the cookie.
	   * (Concurs with S5.3 step 3)
	   */
	  if (this.maxAge != null) {
	    return this.maxAge<=0 ? 0 : this.maxAge*1000;
	  }

	  var expires = this.expires;
	  if (expires != Infinity) {
	    if (!(expires instanceof Date)) {
	      expires = parseDate(expires) || Infinity;
	    }

	    if (expires == Infinity) {
	      return Infinity;
	    }

	    return expires.getTime() - (now || Date.now());
	  }

	  return Infinity;
	};

	// expiryTime() replaces the "expiry-time" parts of S5.3 step 3 (setCookie()
	// elsewhere)
	Cookie$1.prototype.expiryTime = function expiryTime(now) {
	  if (this.maxAge != null) {
	    var relativeTo = now || this.creation || new Date();
	    var age = (this.maxAge <= 0) ? -Infinity : this.maxAge*1000;
	    return relativeTo.getTime() + age;
	  }

	  if (this.expires == Infinity) {
	    return Infinity;
	  }
	  return this.expires.getTime();
	};

	// expiryDate() replaces the "expiry-time" parts of S5.3 step 3 (setCookie()
	// elsewhere), except it returns a Date
	Cookie$1.prototype.expiryDate = function expiryDate(now) {
	  var millisec = this.expiryTime(now);
	  if (millisec == Infinity) {
	    return new Date(MAX_TIME);
	  } else if (millisec == -Infinity) {
	    return new Date(MIN_TIME);
	  } else {
	    return new Date(millisec);
	  }
	};

	// This replaces the "persistent-flag" parts of S5.3 step 3
	Cookie$1.prototype.isPersistent = function isPersistent() {
	  return (this.maxAge != null || this.expires != Infinity);
	};

	// Mostly S5.1.2 and S5.2.3:
	Cookie$1.prototype.cdomain =
	Cookie$1.prototype.canonicalizedDomain = function canonicalizedDomain() {
	  if (this.domain == null) {
	    return null;
	  }
	  return canonicalDomain(this.domain);
	};

	function CookieJar$1(store, options) {
	  if (typeof options === "boolean") {
	    options = {rejectPublicSuffixes: options};
	  } else if (options == null) {
	    options = {};
	  }
	  if (options.rejectPublicSuffixes != null) {
	    this.rejectPublicSuffixes = options.rejectPublicSuffixes;
	  }
	  if (options.looseMode != null) {
	    this.enableLooseMode = options.looseMode;
	  }

	  if (!store) {
	    store = new MemoryCookieStore();
	  }
	  this.store = store;
	}
	CookieJar$1.prototype.store = null;
	CookieJar$1.prototype.rejectPublicSuffixes = true;
	CookieJar$1.prototype.enableLooseMode = false;
	var CAN_BE_SYNC = [];

	CAN_BE_SYNC.push('setCookie');
	CookieJar$1.prototype.setCookie = function(cookie, url, options, cb) {
	  var err;
	  var context = getCookieContext(url);
	  if (options instanceof Function) {
	    cb = options;
	    options = {};
	  }

	  var host = canonicalDomain(context.hostname);
	  var loose = this.enableLooseMode;
	  if (options.loose != null) {
	    loose = options.loose;
	  }

	  // S5.3 step 1
	  if (!(cookie instanceof Cookie$1)) {
	    cookie = Cookie$1.parse(cookie, { loose: loose });
	  }
	  if (!cookie) {
	    err = new Error("Cookie failed to parse");
	    return cb(options.ignoreError ? null : err);
	  }

	  // S5.3 step 2
	  var now = options.now || new Date(); // will assign later to save effort in the face of errors

	  // S5.3 step 3: NOOP; persistent-flag and expiry-time is handled by getCookie()

	  // S5.3 step 4: NOOP; domain is null by default

	  // S5.3 step 5: public suffixes
	  if (this.rejectPublicSuffixes && cookie.domain) {
	    var suffix = pubsuffixPsl.getPublicSuffix(cookie.cdomain());
	    if (suffix == null) { // e.g. "com"
	      err = new Error("Cookie has domain set to a public suffix");
	      return cb(options.ignoreError ? null : err);
	    }
	  }

	  // S5.3 step 6:
	  if (cookie.domain) {
	    if (!domainMatch(host, cookie.cdomain(), false)) {
	      err = new Error("Cookie not in this host's domain. Cookie:"+cookie.cdomain()+" Request:"+host);
	      return cb(options.ignoreError ? null : err);
	    }

	    if (cookie.hostOnly == null) { // don't reset if already set
	      cookie.hostOnly = false;
	    }

	  } else {
	    cookie.hostOnly = true;
	    cookie.domain = host;
	  }

	  //S5.2.4 If the attribute-value is empty or if the first character of the
	  //attribute-value is not %x2F ("/"):
	  //Let cookie-path be the default-path.
	  if (!cookie.path || cookie.path[0] !== '/') {
	    cookie.path = defaultPath(context.pathname);
	    cookie.pathIsDefault = true;
	  }

	  // S5.3 step 8: NOOP; secure attribute
	  // S5.3 step 9: NOOP; httpOnly attribute

	  // S5.3 step 10
	  if (options.http === false && cookie.httpOnly) {
	    err = new Error("Cookie is HttpOnly and this isn't an HTTP API");
	    return cb(options.ignoreError ? null : err);
	  }

	  var store = this.store;

	  if (!store.updateCookie) {
	    store.updateCookie = function(oldCookie, newCookie, cb) {
	      this.putCookie(newCookie, cb);
	    };
	  }

	  function withCookie(err, oldCookie) {
	    if (err) {
	      return cb(err);
	    }

	    var next = function(err) {
	      if (err) {
	        return cb(err);
	      } else {
	        cb(null, cookie);
	      }
	    };

	    if (oldCookie) {
	      // S5.3 step 11 - "If the cookie store contains a cookie with the same name,
	      // domain, and path as the newly created cookie:"
	      if (options.http === false && oldCookie.httpOnly) { // step 11.2
	        err = new Error("old Cookie is HttpOnly and this isn't an HTTP API");
	        return cb(options.ignoreError ? null : err);
	      }
	      cookie.creation = oldCookie.creation; // step 11.3
	      cookie.creationIndex = oldCookie.creationIndex; // preserve tie-breaker
	      cookie.lastAccessed = now;
	      // Step 11.4 (delete cookie) is implied by just setting the new one:
	      store.updateCookie(oldCookie, cookie, next); // step 12

	    } else {
	      cookie.creation = cookie.lastAccessed = now;
	      store.putCookie(cookie, next); // step 12
	    }
	  }

	  store.findCookie(cookie.domain, cookie.path, cookie.key, withCookie);
	};

	// RFC6365 S5.4
	CAN_BE_SYNC.push('getCookies');
	CookieJar$1.prototype.getCookies = function(url, options, cb) {
	  var context = getCookieContext(url);
	  if (options instanceof Function) {
	    cb = options;
	    options = {};
	  }

	  var host = canonicalDomain(context.hostname);
	  var path = context.pathname || '/';

	  var secure = options.secure;
	  if (secure == null && context.protocol &&
	      (context.protocol == 'https:' || context.protocol == 'wss:'))
	  {
	    secure = true;
	  }

	  var http = options.http;
	  if (http == null) {
	    http = true;
	  }

	  var now = options.now || Date.now();
	  var expireCheck = options.expire !== false;
	  var allPaths = !!options.allPaths;
	  var store = this.store;

	  function matchingCookie(c) {
	    // "Either:
	    //   The cookie's host-only-flag is true and the canonicalized
	    //   request-host is identical to the cookie's domain.
	    // Or:
	    //   The cookie's host-only-flag is false and the canonicalized
	    //   request-host domain-matches the cookie's domain."
	    if (c.hostOnly) {
	      if (c.domain != host) {
	        return false;
	      }
	    } else {
	      if (!domainMatch(host, c.domain, false)) {
	        return false;
	      }
	    }

	    // "The request-uri's path path-matches the cookie's path."
	    if (!allPaths && !pathMatch(path, c.path)) {
	      return false;
	    }

	    // "If the cookie's secure-only-flag is true, then the request-uri's
	    // scheme must denote a "secure" protocol"
	    if (c.secure && !secure) {
	      return false;
	    }

	    // "If the cookie's http-only-flag is true, then exclude the cookie if the
	    // cookie-string is being generated for a "non-HTTP" API"
	    if (c.httpOnly && !http) {
	      return false;
	    }

	    // deferred from S5.3
	    // non-RFC: allow retention of expired cookies by choice
	    if (expireCheck && c.expiryTime() <= now) {
	      store.removeCookie(c.domain, c.path, c.key, function(){}); // result ignored
	      return false;
	    }

	    return true;
	  }

	  store.findCookies(host, allPaths ? null : path, function(err,cookies) {
	    if (err) {
	      return cb(err);
	    }

	    cookies = cookies.filter(matchingCookie);

	    // sorting of S5.4 part 2
	    if (options.sort !== false) {
	      cookies = cookies.sort(cookieCompare);
	    }

	    // S5.4 part 3
	    var now = new Date();
	    cookies.forEach(function(c) {
	      c.lastAccessed = now;
	    });
	    // TODO persist lastAccessed

	    cb(null,cookies);
	  });
	};

	CAN_BE_SYNC.push('getCookieString');
	CookieJar$1.prototype.getCookieString = function(/*..., cb*/) {
	  var args = Array.prototype.slice.call(arguments,0);
	  var cb = args.pop();
	  var next = function(err,cookies) {
	    if (err) {
	      cb(err);
	    } else {
	      cb(null, cookies
	        .sort(cookieCompare)
	        .map(function(c){
	          return c.cookieString();
	        })
	        .join('; '));
	    }
	  };
	  args.push(next);
	  this.getCookies.apply(this,args);
	};

	CAN_BE_SYNC.push('getSetCookieStrings');
	CookieJar$1.prototype.getSetCookieStrings = function(/*..., cb*/) {
	  var args = Array.prototype.slice.call(arguments,0);
	  var cb = args.pop();
	  var next = function(err,cookies) {
	    if (err) {
	      cb(err);
	    } else {
	      cb(null, cookies.map(function(c){
	        return c.toString();
	      }));
	    }
	  };
	  args.push(next);
	  this.getCookies.apply(this,args);
	};

	CAN_BE_SYNC.push('serialize');
	CookieJar$1.prototype.serialize = function(cb) {
	  var type = this.store.constructor.name;
	  if (type === 'Object') {
	    type = null;
	  }

	  // update README.md "Serialization Format" if you change this, please!
	  var serialized = {
	    // The version of tough-cookie that serialized this jar. Generally a good
	    // practice since future versions can make data import decisions based on
	    // known past behavior. When/if this matters, use `semver`.
	    version: 'tough-cookie@'+version$a,

	    // add the store type, to make humans happy:
	    storeType: type,

	    // CookieJar configuration:
	    rejectPublicSuffixes: !!this.rejectPublicSuffixes,

	    // this gets filled from getAllCookies:
	    cookies: []
	  };

	  if (!(this.store.getAllCookies &&
	        typeof this.store.getAllCookies === 'function'))
	  {
	    return cb(new Error('store does not support getAllCookies and cannot be serialized'));
	  }

	  this.store.getAllCookies(function(err,cookies) {
	    if (err) {
	      return cb(err);
	    }

	    serialized.cookies = cookies.map(function(cookie) {
	      // convert to serialized 'raw' cookies
	      cookie = (cookie instanceof Cookie$1) ? cookie.toJSON() : cookie;

	      // Remove the index so new ones get assigned during deserialization
	      delete cookie.creationIndex;

	      return cookie;
	    });

	    return cb(null, serialized);
	  });
	};

	// well-known name that JSON.stringify calls
	CookieJar$1.prototype.toJSON = function() {
	  return this.serializeSync();
	};

	// use the class method CookieJar.deserialize instead of calling this directly
	CAN_BE_SYNC.push('_importCookies');
	CookieJar$1.prototype._importCookies = function(serialized, cb) {
	  var jar = this;
	  var cookies = serialized.cookies;
	  if (!cookies || !Array.isArray(cookies)) {
	    return cb(new Error('serialized jar has no cookies array'));
	  }
	  cookies = cookies.slice(); // do not modify the original

	  function putNext(err) {
	    if (err) {
	      return cb(err);
	    }

	    if (!cookies.length) {
	      return cb(err, jar);
	    }

	    var cookie;
	    try {
	      cookie = fromJSON(cookies.shift());
	    } catch (e) {
	      return cb(e);
	    }

	    if (cookie === null) {
	      return putNext(null); // skip this cookie
	    }

	    jar.store.putCookie(cookie, putNext);
	  }

	  putNext();
	};

	CookieJar$1.deserialize = function(strOrObj, store, cb) {
	  if (arguments.length !== 3) {
	    // store is optional
	    cb = store;
	    store = null;
	  }

	  var serialized;
	  if (typeof strOrObj === 'string') {
	    serialized = jsonParse(strOrObj);
	    if (serialized instanceof Error) {
	      return cb(serialized);
	    }
	  } else {
	    serialized = strOrObj;
	  }

	  var jar = new CookieJar$1(store, serialized.rejectPublicSuffixes);
	  jar._importCookies(serialized, function(err) {
	    if (err) {
	      return cb(err);
	    }
	    cb(null, jar);
	  });
	};

	CookieJar$1.deserializeSync = function(strOrObj, store) {
	  var serialized = typeof strOrObj === 'string' ?
	    JSON.parse(strOrObj) : strOrObj;
	  var jar = new CookieJar$1(store, serialized.rejectPublicSuffixes);

	  // catch this mistake early:
	  if (!jar.store.synchronous) {
	    throw new Error('CookieJar store is not synchronous; use async API instead.');
	  }

	  jar._importCookiesSync(serialized);
	  return jar;
	};
	CookieJar$1.fromJSON = CookieJar$1.deserializeSync;

	CookieJar$1.prototype.clone = function(newStore, cb) {
	  if (arguments.length === 1) {
	    cb = newStore;
	    newStore = null;
	  }

	  this.serialize(function(err,serialized) {
	    if (err) {
	      return cb(err);
	    }
	    CookieJar$1.deserialize(serialized, newStore, cb);
	  });
	};

	CAN_BE_SYNC.push('removeAllCookies');
	CookieJar$1.prototype.removeAllCookies = function(cb) {
	  var store = this.store;

	  // Check that the store implements its own removeAllCookies(). The default
	  // implementation in Store will immediately call the callback with a "not
	  // implemented" Error.
	  if (store.removeAllCookies instanceof Function &&
	      store.removeAllCookies !== Store.prototype.removeAllCookies)
	  {
	    return store.removeAllCookies(cb);
	  }

	  store.getAllCookies(function(err, cookies) {
	    if (err) {
	      return cb(err);
	    }

	    if (cookies.length === 0) {
	      return cb(null);
	    }

	    var completedCount = 0;
	    var removeErrors = [];

	    function removeCookieCb(removeErr) {
	      if (removeErr) {
	        removeErrors.push(removeErr);
	      }

	      completedCount++;

	      if (completedCount === cookies.length) {
	        return cb(removeErrors.length ? removeErrors[0] : null);
	      }
	    }

	    cookies.forEach(function(cookie) {
	      store.removeCookie(cookie.domain, cookie.path, cookie.key, removeCookieCb);
	    });
	  });
	};

	CookieJar$1.prototype._cloneSync = syncWrap('clone');
	CookieJar$1.prototype.cloneSync = function(newStore) {
	  if (!newStore.synchronous) {
	    throw new Error('CookieJar clone destination store is not synchronous; use async API instead.');
	  }
	  return this._cloneSync(newStore);
	};

	// Use a closure to provide a true imperative API for synchronous stores.
	function syncWrap(method) {
	  return function() {
	    if (!this.store.synchronous) {
	      throw new Error('CookieJar store is not synchronous; use async API instead.');
	    }

	    var args = Array.prototype.slice.call(arguments);
	    var syncErr, syncResult;
	    args.push(function syncCb(err, result) {
	      syncErr = err;
	      syncResult = result;
	    });
	    this[method].apply(this, args);

	    if (syncErr) {
	      throw syncErr;
	    }
	    return syncResult;
	  };
	}

	// wrap all declared CAN_BE_SYNC methods in the sync wrapper
	CAN_BE_SYNC.forEach(function(method) {
	  CookieJar$1.prototype[method+'Sync'] = syncWrap(method);
	});

	var version$9 = version$a;
	var CookieJar_1 = CookieJar$1;
	var Cookie_1 = Cookie$1;
	var Store_1 = Store;
	var MemoryCookieStore_1 = MemoryCookieStore;
	var parseDate_1 = parseDate;
	var formatDate_1 = formatDate;
	var parse_1 = parse$a;
	var fromJSON_1 = fromJSON;
	var domainMatch_1 = domainMatch;
	var defaultPath_1 = defaultPath;
	var pathMatch_1 = pathMatch;
	var getPublicSuffix = pubsuffixPsl.getPublicSuffix;
	var cookieCompare_1 = cookieCompare;
	var permuteDomain = permuteDomain_1.permuteDomain;
	var permutePath_1 = permutePath;
	var canonicalDomain_1 = canonicalDomain;

	var cookie$1 = {
		version: version$9,
		CookieJar: CookieJar_1,
		Cookie: Cookie_1,
		Store: Store_1,
		MemoryCookieStore: MemoryCookieStore_1,
		parseDate: parseDate_1,
		formatDate: formatDate_1,
		parse: parse_1,
		fromJSON: fromJSON_1,
		domainMatch: domainMatch_1,
		defaultPath: defaultPath_1,
		pathMatch: pathMatch_1,
		getPublicSuffix: getPublicSuffix,
		cookieCompare: cookieCompare_1,
		permuteDomain: permuteDomain,
		permutePath: permutePath_1,
		canonicalDomain: canonicalDomain_1
	};

	var Cookie = cookie$1.Cookie;
	var CookieJar = cookie$1.CookieJar;

	var parse$9 = function (str) {
	  if (str && str.uri) {
	    str = str.uri;
	  }
	  if (typeof str !== 'string') {
	    throw new Error('The cookie function only accepts STRING as param')
	  }
	  return Cookie.parse(str, {loose: true})
	};

	// Adapt the sometimes-Async api of tough.CookieJar to our requirements
	function RequestJar (store) {
	  var self = this;
	  self._jar = new CookieJar(store, {looseMode: true});
	}
	RequestJar.prototype.setCookie = function (cookieOrStr, uri, options) {
	  var self = this;
	  return self._jar.setCookieSync(cookieOrStr, uri, options || {})
	};
	RequestJar.prototype.getCookieString = function (uri) {
	  var self = this;
	  return self._jar.getCookieStringSync(uri)
	};
	RequestJar.prototype.getCookies = function (uri) {
	  var self = this;
	  return self._jar.getCookiesSync(uri)
	};

	var jar = function (store) {
	  return new RequestJar(store)
	};

	var cookies$1 = {
		parse: parse$9,
		jar: jar
	};

	var stringify_1$1 = createCommonjsModule(function (module, exports) {
	exports = module.exports = stringify;
	exports.getSerialize = serializer;

	function stringify(obj, replacer, spaces, cycleReplacer) {
	  return JSON.stringify(obj, serializer(replacer, cycleReplacer), spaces)
	}

	function serializer(replacer, cycleReplacer) {
	  var stack = [], keys = [];

	  if (cycleReplacer == null) cycleReplacer = function(key, value) {
	    if (stack[0] === value) return "[Circular ~]"
	    return "[Circular ~." + keys.slice(0, stack.indexOf(value)).join(".") + "]"
	  };

	  return function(key, value) {
	    if (stack.length > 0) {
	      var thisPos = stack.indexOf(this);
	      ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);
	      ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key);
	      if (~stack.indexOf(value)) value = cycleReplacer.call(this, key, value);
	    }
	    else stack.push(value);

	    return replacer == null ? value : replacer.call(this, key, value)
	  }
	}
	});

	var Buffer$C = safeBuffer.Buffer;

	var defer$2 = typeof setImmediate === 'undefined'
	  ? process.nextTick
	  : setImmediate;

	function paramsHaveRequestBody$1 (params) {
	  return (
	    params.body ||
	    params.requestBodyStream ||
	    (params.json && typeof params.json !== 'boolean') ||
	    params.multipart
	  )
	}

	function safeStringify$1 (obj, replacer) {
	  var ret;
	  try {
	    ret = JSON.stringify(obj, replacer);
	  } catch (e) {
	    ret = stringify_1$1(obj, replacer);
	  }
	  return ret
	}

	function md5$1 (str) {
	  return crypto__default['default'].createHash('md5').update(str).digest('hex')
	}

	function isReadStream$1 (rs) {
	  return rs.readable && rs.path && rs.mode
	}

	function toBase64$2 (str) {
	  return Buffer$C.from(str || '', 'utf8').toString('base64')
	}

	function copy$4 (obj) {
	  var o = {};
	  Object.keys(obj).forEach(function (i) {
	    o[i] = obj[i];
	  });
	  return o
	}

	function version$8 () {
	  var numbers = process.version.replace('v', '').split('.');
	  return {
	    major: parseInt(numbers[0], 10),
	    minor: parseInt(numbers[1], 10),
	    patch: parseInt(numbers[2], 10)
	  }
	}

	var paramsHaveRequestBody_1 = paramsHaveRequestBody$1;
	var safeStringify_1 = safeStringify$1;
	var md5_1 = md5$1;
	var isReadStream_1 = isReadStream$1;
	var toBase64_1 = toBase64$2;
	var copy_1$2 = copy$4;
	var version_1 = version$8;
	var defer_1$1 = defer$2;

	var helpers = {
		paramsHaveRequestBody: paramsHaveRequestBody_1,
		safeStringify: safeStringify_1,
		md5: md5_1,
		isReadStream: isReadStream_1,
		toBase64: toBase64_1,
		copy: copy_1$2,
		version: version_1,
		defer: defer_1$1
	};

	/*!
	 *  Copyright 2010 LearnBoost <dev@learnboost.com>
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/**
	 * Module dependencies.
	 */

	var parse$8 = url__default['default'].parse
	  ;

	/**
	 * Valid keys.
	 */

	var keys = 
	  [ 'acl'
	  , 'location'
	  , 'logging'
	  , 'notification'
	  , 'partNumber'
	  , 'policy'
	  , 'requestPayment'
	  , 'torrent'
	  , 'uploadId'
	  , 'uploads'
	  , 'versionId'
	  , 'versioning'
	  , 'versions'
	  , 'website'
	  ];

	/**
	 * Return an "Authorization" header value with the given `options`
	 * in the form of "AWS <key>:<signature>"
	 *
	 * @param {Object} options
	 * @return {String}
	 * @api private
	 */

	function authorization (options) {
	  return 'AWS ' + options.key + ':' + sign$3(options)
	}

	var awsSign2 = authorization;
	var authorization_1 = authorization;

	/**
	 * Simple HMAC-SHA1 Wrapper
	 *
	 * @param {Object} options
	 * @return {String}
	 * @api private
	 */ 

	function hmacSha1 (options) {
	  return crypto__default['default'].createHmac('sha1', options.secret).update(options.message).digest('base64')
	}

	var hmacSha1_1 = hmacSha1;

	/**
	 * Create a base64 sha1 HMAC for `options`. 
	 * 
	 * @param {Object} options
	 * @return {String}
	 * @api private
	 */

	function sign$3 (options) {
	  options.message = stringToSign(options);
	  return hmacSha1(options)
	}
	var sign_1$1 = sign$3;

	/**
	 * Create a base64 sha1 HMAC for `options`. 
	 *
	 * Specifically to be used with S3 presigned URLs
	 * 
	 * @param {Object} options
	 * @return {String}
	 * @api private
	 */

	function signQuery (options) {
	  options.message = queryStringToSign(options);
	  return hmacSha1(options)
	}
	var signQuery_1= signQuery;

	/**
	 * Return a string for sign() with the given `options`.
	 *
	 * Spec:
	 * 
	 *    <verb>\n
	 *    <md5>\n
	 *    <content-type>\n
	 *    <date>\n
	 *    [headers\n]
	 *    <resource>
	 *
	 * @param {Object} options
	 * @return {String}
	 * @api private
	 */

	function stringToSign (options) {
	  var headers = options.amazonHeaders || '';
	  if (headers) headers += '\n';
	  var r = 
	    [ options.verb
	    , options.md5
	    , options.contentType
	    , options.date ? options.date.toUTCString() : ''
	    , headers + options.resource
	    ];
	  return r.join('\n')
	}
	var stringToSign_1 = stringToSign;

	/**
	 * Return a string for sign() with the given `options`, but is meant exclusively
	 * for S3 presigned URLs
	 *
	 * Spec:
	 * 
	 *    <date>\n
	 *    <resource>
	 *
	 * @param {Object} options
	 * @return {String}
	 * @api private
	 */

	function queryStringToSign (options){
	  return 'GET\n\n\n' + options.date + '\n' + options.resource
	}
	var queryStringToSign_1 = queryStringToSign;

	/**
	 * Perform the following:
	 *
	 *  - ignore non-amazon headers
	 *  - lowercase fields
	 *  - sort lexicographically
	 *  - trim whitespace between ":"
	 *  - join with newline
	 *
	 * @param {Object} headers
	 * @return {String}
	 * @api private
	 */

	function canonicalizeHeaders (headers) {
	  var buf = []
	    , fields = Object.keys(headers)
	    ;
	  for (var i = 0, len = fields.length; i < len; ++i) {
	    var field = fields[i]
	      , val = headers[field]
	      , field = field.toLowerCase()
	      ;
	    if (0 !== field.indexOf('x-amz')) continue
	    buf.push(field + ':' + val);
	  }
	  return buf.sort().join('\n')
	}
	var canonicalizeHeaders_1 = canonicalizeHeaders;

	/**
	 * Perform the following:
	 *
	 *  - ignore non sub-resources
	 *  - sort lexicographically
	 *
	 * @param {String} resource
	 * @return {String}
	 * @api private
	 */

	function canonicalizeResource (resource) {
	  var url = parse$8(resource, true)
	    , path = url.pathname
	    , buf = []
	    ;

	  Object.keys(url.query).forEach(function(key){
	    if (!~keys.indexOf(key)) return
	    var val = '' == url.query[key] ? '' : '=' + encodeURIComponent(url.query[key]);
	    buf.push(key + val);
	  });

	  return path + (buf.length ? '?' + buf.sort().join('&') : '')
	}
	var canonicalizeResource_1 = canonicalizeResource;
	awsSign2.authorization = authorization_1;
	awsSign2.hmacSha1 = hmacSha1_1;
	awsSign2.sign = sign_1$1;
	awsSign2.signQuery = signQuery_1;
	awsSign2.stringToSign = stringToSign_1;
	awsSign2.queryStringToSign = queryStringToSign_1;
	awsSign2.canonicalizeHeaders = canonicalizeHeaders_1;
	awsSign2.canonicalizeResource = canonicalizeResource_1;

	var lru = function(size) {
	  return new LruCache(size)
	};

	function LruCache(size) {
	  this.capacity = size | 0;
	  this.map = Object.create(null);
	  this.list = new DoublyLinkedList();
	}

	LruCache.prototype.get = function(key) {
	  var node = this.map[key];
	  if (node == null) return undefined
	  this.used(node);
	  return node.val
	};

	LruCache.prototype.set = function(key, val) {
	  var node = this.map[key];
	  if (node != null) {
	    node.val = val;
	  } else {
	    if (!this.capacity) this.prune();
	    if (!this.capacity) return false
	    node = new DoublyLinkedNode(key, val);
	    this.map[key] = node;
	    this.capacity--;
	  }
	  this.used(node);
	  return true
	};

	LruCache.prototype.used = function(node) {
	  this.list.moveToFront(node);
	};

	LruCache.prototype.prune = function() {
	  var node = this.list.pop();
	  if (node != null) {
	    delete this.map[node.key];
	    this.capacity++;
	  }
	};


	function DoublyLinkedList() {
	  this.firstNode = null;
	  this.lastNode = null;
	}

	DoublyLinkedList.prototype.moveToFront = function(node) {
	  if (this.firstNode == node) return

	  this.remove(node);

	  if (this.firstNode == null) {
	    this.firstNode = node;
	    this.lastNode = node;
	    node.prev = null;
	    node.next = null;
	  } else {
	    node.prev = null;
	    node.next = this.firstNode;
	    node.next.prev = node;
	    this.firstNode = node;
	  }
	};

	DoublyLinkedList.prototype.pop = function() {
	  var lastNode = this.lastNode;
	  if (lastNode != null) {
	    this.remove(lastNode);
	  }
	  return lastNode
	};

	DoublyLinkedList.prototype.remove = function(node) {
	  if (this.firstNode == node) {
	    this.firstNode = node.next;
	  } else if (node.prev != null) {
	    node.prev.next = node.next;
	  }
	  if (this.lastNode == node) {
	    this.lastNode = node.prev;
	  } else if (node.next != null) {
	    node.next.prev = node.prev;
	  }
	};


	function DoublyLinkedNode(key, val) {
	  this.key = key;
	  this.val = val;
	  this.prev = null;
	  this.next = null;
	}

	var aws4_1 = createCommonjsModule(function (module, exports) {
	var aws4 = exports,
	    credentialsCache = lru(1000);

	// http://docs.amazonwebservices.com/general/latest/gr/signature-version-4.html

	function hmac(key, string, encoding) {
	  return crypto__default['default'].createHmac('sha256', key).update(string, 'utf8').digest(encoding)
	}

	function hash(string, encoding) {
	  return crypto__default['default'].createHash('sha256').update(string, 'utf8').digest(encoding)
	}

	// This function assumes the string has already been percent encoded
	function encodeRfc3986(urlEncodedString) {
	  return urlEncodedString.replace(/[!'()*]/g, function(c) {
	    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
	  })
	}

	function encodeRfc3986Full(str) {
	  return encodeRfc3986(encodeURIComponent(str))
	}

	// A bit of a combination of:
	// https://github.com/aws/aws-sdk-java-v2/blob/dc695de6ab49ad03934e1b02e7263abbd2354be0/core/auth/src/main/java/software/amazon/awssdk/auth/signer/internal/AbstractAws4Signer.java#L59
	// https://github.com/aws/aws-sdk-js/blob/18cb7e5b463b46239f9fdd4a65e2ff8c81831e8f/lib/signers/v4.js#L191-L199
	// https://github.com/mhart/aws4fetch/blob/b3aed16b6f17384cf36ea33bcba3c1e9f3bdfefd/src/main.js#L25-L34
	var HEADERS_TO_IGNORE = {
	  'authorization': true,
	  'connection': true,
	  'x-amzn-trace-id': true,
	  'user-agent': true,
	  'expect': true,
	  'presigned-expires': true,
	  'range': true,
	};

	// request: { path | body, [host], [method], [headers], [service], [region] }
	// credentials: { accessKeyId, secretAccessKey, [sessionToken] }
	function RequestSigner(request, credentials) {

	  if (typeof request === 'string') request = url__default['default'].parse(request);

	  var headers = request.headers = (request.headers || {}),
	      hostParts = (!this.service || !this.region) && this.matchHost(request.hostname || request.host || headers.Host || headers.host);

	  this.request = request;
	  this.credentials = credentials || this.defaultCredentials();

	  this.service = request.service || hostParts[0] || '';
	  this.region = request.region || hostParts[1] || 'us-east-1';

	  // SES uses a different domain from the service name
	  if (this.service === 'email') this.service = 'ses';

	  if (!request.method && request.body)
	    request.method = 'POST';

	  if (!headers.Host && !headers.host) {
	    headers.Host = request.hostname || request.host || this.createHost();

	    // If a port is specified explicitly, use it as is
	    if (request.port)
	      headers.Host += ':' + request.port;
	  }
	  if (!request.hostname && !request.host)
	    request.hostname = headers.Host || headers.host;

	  this.isCodeCommitGit = this.service === 'codecommit' && request.method === 'GIT';
	}

	RequestSigner.prototype.matchHost = function(host) {
	  var match = (host || '').match(/([^\.]+)\.(?:([^\.]*)\.)?amazonaws\.com(\.cn)?$/);
	  var hostParts = (match || []).slice(1, 3);

	  // ES's hostParts are sometimes the other way round, if the value that is expected
	  // to be region equals ‘es’ switch them back
	  // e.g. search-cluster-name-aaaa00aaaa0aaa0aaaaaaa0aaa.us-east-1.es.amazonaws.com
	  if (hostParts[1] === 'es')
	    hostParts = hostParts.reverse();

	  if (hostParts[1] == 's3') {
	    hostParts[0] = 's3';
	    hostParts[1] = 'us-east-1';
	  } else {
	    for (var i = 0; i < 2; i++) {
	      if (/^s3-/.test(hostParts[i])) {
	        hostParts[1] = hostParts[i].slice(3);
	        hostParts[0] = 's3';
	        break
	      }
	    }
	  }

	  return hostParts
	};

	// http://docs.aws.amazon.com/general/latest/gr/rande.html
	RequestSigner.prototype.isSingleRegion = function() {
	  // Special case for S3 and SimpleDB in us-east-1
	  if (['s3', 'sdb'].indexOf(this.service) >= 0 && this.region === 'us-east-1') return true

	  return ['cloudfront', 'ls', 'route53', 'iam', 'importexport', 'sts']
	    .indexOf(this.service) >= 0
	};

	RequestSigner.prototype.createHost = function() {
	  var region = this.isSingleRegion() ? '' : '.' + this.region,
	      subdomain = this.service === 'ses' ? 'email' : this.service;
	  return subdomain + region + '.amazonaws.com'
	};

	RequestSigner.prototype.prepareRequest = function() {
	  this.parsePath();

	  var request = this.request, headers = request.headers, query;

	  if (request.signQuery) {

	    this.parsedPath.query = query = this.parsedPath.query || {};

	    if (this.credentials.sessionToken)
	      query['X-Amz-Security-Token'] = this.credentials.sessionToken;

	    if (this.service === 's3' && !query['X-Amz-Expires'])
	      query['X-Amz-Expires'] = 86400;

	    if (query['X-Amz-Date'])
	      this.datetime = query['X-Amz-Date'];
	    else
	      query['X-Amz-Date'] = this.getDateTime();

	    query['X-Amz-Algorithm'] = 'AWS4-HMAC-SHA256';
	    query['X-Amz-Credential'] = this.credentials.accessKeyId + '/' + this.credentialString();
	    query['X-Amz-SignedHeaders'] = this.signedHeaders();

	  } else {

	    if (!request.doNotModifyHeaders && !this.isCodeCommitGit) {
	      if (request.body && !headers['Content-Type'] && !headers['content-type'])
	        headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=utf-8';

	      if (request.body && !headers['Content-Length'] && !headers['content-length'])
	        headers['Content-Length'] = Buffer.byteLength(request.body);

	      if (this.credentials.sessionToken && !headers['X-Amz-Security-Token'] && !headers['x-amz-security-token'])
	        headers['X-Amz-Security-Token'] = this.credentials.sessionToken;

	      if (this.service === 's3' && !headers['X-Amz-Content-Sha256'] && !headers['x-amz-content-sha256'])
	        headers['X-Amz-Content-Sha256'] = hash(this.request.body || '', 'hex');

	      if (headers['X-Amz-Date'] || headers['x-amz-date'])
	        this.datetime = headers['X-Amz-Date'] || headers['x-amz-date'];
	      else
	        headers['X-Amz-Date'] = this.getDateTime();
	    }

	    delete headers.Authorization;
	    delete headers.authorization;
	  }
	};

	RequestSigner.prototype.sign = function() {
	  if (!this.parsedPath) this.prepareRequest();

	  if (this.request.signQuery) {
	    this.parsedPath.query['X-Amz-Signature'] = this.signature();
	  } else {
	    this.request.headers.Authorization = this.authHeader();
	  }

	  this.request.path = this.formatPath();

	  return this.request
	};

	RequestSigner.prototype.getDateTime = function() {
	  if (!this.datetime) {
	    var headers = this.request.headers,
	      date = new Date(headers.Date || headers.date || new Date);

	    this.datetime = date.toISOString().replace(/[:\-]|\.\d{3}/g, '');

	    // Remove the trailing 'Z' on the timestamp string for CodeCommit git access
	    if (this.isCodeCommitGit) this.datetime = this.datetime.slice(0, -1);
	  }
	  return this.datetime
	};

	RequestSigner.prototype.getDate = function() {
	  return this.getDateTime().substr(0, 8)
	};

	RequestSigner.prototype.authHeader = function() {
	  return [
	    'AWS4-HMAC-SHA256 Credential=' + this.credentials.accessKeyId + '/' + this.credentialString(),
	    'SignedHeaders=' + this.signedHeaders(),
	    'Signature=' + this.signature(),
	  ].join(', ')
	};

	RequestSigner.prototype.signature = function() {
	  var date = this.getDate(),
	      cacheKey = [this.credentials.secretAccessKey, date, this.region, this.service].join(),
	      kDate, kRegion, kService, kCredentials = credentialsCache.get(cacheKey);
	  if (!kCredentials) {
	    kDate = hmac('AWS4' + this.credentials.secretAccessKey, date);
	    kRegion = hmac(kDate, this.region);
	    kService = hmac(kRegion, this.service);
	    kCredentials = hmac(kService, 'aws4_request');
	    credentialsCache.set(cacheKey, kCredentials);
	  }
	  return hmac(kCredentials, this.stringToSign(), 'hex')
	};

	RequestSigner.prototype.stringToSign = function() {
	  return [
	    'AWS4-HMAC-SHA256',
	    this.getDateTime(),
	    this.credentialString(),
	    hash(this.canonicalString(), 'hex'),
	  ].join('\n')
	};

	RequestSigner.prototype.canonicalString = function() {
	  if (!this.parsedPath) this.prepareRequest();

	  var pathStr = this.parsedPath.path,
	      query = this.parsedPath.query,
	      headers = this.request.headers,
	      queryStr = '',
	      normalizePath = this.service !== 's3',
	      decodePath = this.service === 's3' || this.request.doNotEncodePath,
	      decodeSlashesInPath = this.service === 's3',
	      firstValOnly = this.service === 's3',
	      bodyHash;

	  if (this.service === 's3' && this.request.signQuery) {
	    bodyHash = 'UNSIGNED-PAYLOAD';
	  } else if (this.isCodeCommitGit) {
	    bodyHash = '';
	  } else {
	    bodyHash = headers['X-Amz-Content-Sha256'] || headers['x-amz-content-sha256'] ||
	      hash(this.request.body || '', 'hex');
	  }

	  if (query) {
	    var reducedQuery = Object.keys(query).reduce(function(obj, key) {
	      if (!key) return obj
	      obj[encodeRfc3986Full(key)] = !Array.isArray(query[key]) ? query[key] :
	        (firstValOnly ? query[key][0] : query[key]);
	      return obj
	    }, {});
	    var encodedQueryPieces = [];
	    Object.keys(reducedQuery).sort().forEach(function(key) {
	      if (!Array.isArray(reducedQuery[key])) {
	        encodedQueryPieces.push(key + '=' + encodeRfc3986Full(reducedQuery[key]));
	      } else {
	        reducedQuery[key].map(encodeRfc3986Full).sort()
	          .forEach(function(val) { encodedQueryPieces.push(key + '=' + val); });
	      }
	    });
	    queryStr = encodedQueryPieces.join('&');
	  }
	  if (pathStr !== '/') {
	    if (normalizePath) pathStr = pathStr.replace(/\/{2,}/g, '/');
	    pathStr = pathStr.split('/').reduce(function(path, piece) {
	      if (normalizePath && piece === '..') {
	        path.pop();
	      } else if (!normalizePath || piece !== '.') {
	        if (decodePath) piece = decodeURIComponent(piece.replace(/\+/g, ' '));
	        path.push(encodeRfc3986Full(piece));
	      }
	      return path
	    }, []).join('/');
	    if (pathStr[0] !== '/') pathStr = '/' + pathStr;
	    if (decodeSlashesInPath) pathStr = pathStr.replace(/%2F/g, '/');
	  }

	  return [
	    this.request.method || 'GET',
	    pathStr,
	    queryStr,
	    this.canonicalHeaders() + '\n',
	    this.signedHeaders(),
	    bodyHash,
	  ].join('\n')
	};

	RequestSigner.prototype.canonicalHeaders = function() {
	  var headers = this.request.headers;
	  function trimAll(header) {
	    return header.toString().trim().replace(/\s+/g, ' ')
	  }
	  return Object.keys(headers)
	    .filter(function(key) { return HEADERS_TO_IGNORE[key.toLowerCase()] == null })
	    .sort(function(a, b) { return a.toLowerCase() < b.toLowerCase() ? -1 : 1 })
	    .map(function(key) { return key.toLowerCase() + ':' + trimAll(headers[key]) })
	    .join('\n')
	};

	RequestSigner.prototype.signedHeaders = function() {
	  return Object.keys(this.request.headers)
	    .map(function(key) { return key.toLowerCase() })
	    .filter(function(key) { return HEADERS_TO_IGNORE[key] == null })
	    .sort()
	    .join(';')
	};

	RequestSigner.prototype.credentialString = function() {
	  return [
	    this.getDate(),
	    this.region,
	    this.service,
	    'aws4_request',
	  ].join('/')
	};

	RequestSigner.prototype.defaultCredentials = function() {
	  var env = process.env;
	  return {
	    accessKeyId: env.AWS_ACCESS_KEY_ID || env.AWS_ACCESS_KEY,
	    secretAccessKey: env.AWS_SECRET_ACCESS_KEY || env.AWS_SECRET_KEY,
	    sessionToken: env.AWS_SESSION_TOKEN,
	  }
	};

	RequestSigner.prototype.parsePath = function() {
	  var path = this.request.path || '/';

	  // S3 doesn't always encode characters > 127 correctly and
	  // all services don't encode characters > 255 correctly
	  // So if there are non-reserved chars (and it's not already all % encoded), just encode them all
	  if (/[^0-9A-Za-z;,/?:@&=+$\-_.!~*'()#%]/.test(path)) {
	    path = encodeURI(decodeURI(path));
	  }

	  var queryIx = path.indexOf('?'),
	      query = null;

	  if (queryIx >= 0) {
	    query = querystring__default['default'].parse(path.slice(queryIx + 1));
	    path = path.slice(0, queryIx);
	  }

	  this.parsedPath = {
	    path: path,
	    query: query,
	  };
	};

	RequestSigner.prototype.formatPath = function() {
	  var path = this.parsedPath.path,
	      query = this.parsedPath.query;

	  if (!query) return path

	  // Services don't support empty query string keys
	  if (query[''] != null) delete query[''];

	  return path + '?' + encodeRfc3986(querystring__default['default'].stringify(query))
	};

	aws4.RequestSigner = RequestSigner;

	aws4.sign = function(request, credentials) {
	  return new RequestSigner(request, credentials).sign()
	};
	});

	// Copyright (c) 2012, Mark Cavage. All rights reserved.
	// Copyright 2015 Joyent, Inc.


	var Stream$3 = require$$0__default['default'].Stream;



	///--- Globals

	/* JSSTYLED */
	var UUID_REGEXP = /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/;


	///--- Internal

	function _capitalize(str) {
	    return (str.charAt(0).toUpperCase() + str.slice(1));
	}

	function _toss(name, expected, oper, arg, actual) {
	    throw new assert__default['default'].AssertionError({
	        message: util__default['default'].format('%s (%s) is required', name, expected),
	        actual: (actual === undefined) ? typeof (arg) : actual(arg),
	        expected: expected,
	        operator: oper || '===',
	        stackStartFunction: _toss.caller
	    });
	}

	function _getClass(arg) {
	    return (Object.prototype.toString.call(arg).slice(8, -1));
	}

	function noop$6() {
	    // Why even bother with asserts?
	}


	///--- Exports

	var types$2 = {
	    bool: {
	        check: function (arg) { return typeof (arg) === 'boolean'; }
	    },
	    func: {
	        check: function (arg) { return typeof (arg) === 'function'; }
	    },
	    string: {
	        check: function (arg) { return typeof (arg) === 'string'; }
	    },
	    object: {
	        check: function (arg) {
	            return typeof (arg) === 'object' && arg !== null;
	        }
	    },
	    number: {
	        check: function (arg) {
	            return typeof (arg) === 'number' && !isNaN(arg);
	        }
	    },
	    finite: {
	        check: function (arg) {
	            return typeof (arg) === 'number' && !isNaN(arg) && isFinite(arg);
	        }
	    },
	    buffer: {
	        check: function (arg) { return Buffer.isBuffer(arg); },
	        operator: 'Buffer.isBuffer'
	    },
	    array: {
	        check: function (arg) { return Array.isArray(arg); },
	        operator: 'Array.isArray'
	    },
	    stream: {
	        check: function (arg) { return arg instanceof Stream$3; },
	        operator: 'instanceof',
	        actual: _getClass
	    },
	    date: {
	        check: function (arg) { return arg instanceof Date; },
	        operator: 'instanceof',
	        actual: _getClass
	    },
	    regexp: {
	        check: function (arg) { return arg instanceof RegExp; },
	        operator: 'instanceof',
	        actual: _getClass
	    },
	    uuid: {
	        check: function (arg) {
	            return typeof (arg) === 'string' && UUID_REGEXP.test(arg);
	        },
	        operator: 'isUUID'
	    }
	};

	function _setExports(ndebug) {
	    var keys = Object.keys(types$2);
	    var out;

	    /* re-export standard assert */
	    if (process.env.NODE_NDEBUG) {
	        out = noop$6;
	    } else {
	        out = function (arg, msg) {
	            if (!arg) {
	                _toss(msg, 'true', arg);
	            }
	        };
	    }

	    /* standard checks */
	    keys.forEach(function (k) {
	        if (ndebug) {
	            out[k] = noop$6;
	            return;
	        }
	        var type = types$2[k];
	        out[k] = function (arg, msg) {
	            if (!type.check(arg)) {
	                _toss(msg, k, type.operator, arg, type.actual);
	            }
	        };
	    });

	    /* optional checks */
	    keys.forEach(function (k) {
	        var name = 'optional' + _capitalize(k);
	        if (ndebug) {
	            out[name] = noop$6;
	            return;
	        }
	        var type = types$2[k];
	        out[name] = function (arg, msg) {
	            if (arg === undefined || arg === null) {
	                return;
	            }
	            if (!type.check(arg)) {
	                _toss(msg, k, type.operator, arg, type.actual);
	            }
	        };
	    });

	    /* arrayOf checks */
	    keys.forEach(function (k) {
	        var name = 'arrayOf' + _capitalize(k);
	        if (ndebug) {
	            out[name] = noop$6;
	            return;
	        }
	        var type = types$2[k];
	        var expected = '[' + k + ']';
	        out[name] = function (arg, msg) {
	            if (!Array.isArray(arg)) {
	                _toss(msg, expected, type.operator, arg, type.actual);
	            }
	            var i;
	            for (i = 0; i < arg.length; i++) {
	                if (!type.check(arg[i])) {
	                    _toss(msg, expected, type.operator, arg, type.actual);
	                }
	            }
	        };
	    });

	    /* optionalArrayOf checks */
	    keys.forEach(function (k) {
	        var name = 'optionalArrayOf' + _capitalize(k);
	        if (ndebug) {
	            out[name] = noop$6;
	            return;
	        }
	        var type = types$2[k];
	        var expected = '[' + k + ']';
	        out[name] = function (arg, msg) {
	            if (arg === undefined || arg === null) {
	                return;
	            }
	            if (!Array.isArray(arg)) {
	                _toss(msg, expected, type.operator, arg, type.actual);
	            }
	            var i;
	            for (i = 0; i < arg.length; i++) {
	                if (!type.check(arg[i])) {
	                    _toss(msg, expected, type.operator, arg, type.actual);
	                }
	            }
	        };
	    });

	    /* re-export built-in assertions */
	    Object.keys(assert__default['default']).forEach(function (k) {
	        if (k === 'AssertionError') {
	            out[k] = assert__default['default'][k];
	            return;
	        }
	        if (ndebug) {
	            out[k] = noop$6;
	            return;
	        }
	        out[k] = assert__default['default'][k];
	    });

	    /* export ourselves (for unit tests _only_) */
	    out._setExports = _setExports;

	    return out;
	}

	var assert_1 = _setExports(process.env.NODE_NDEBUG);

	/* eslint-disable node/no-deprecated-api */


	var Buffer$B = buffer__default['default'].Buffer;

	var safer = {};

	var key$1;

	for (key$1 in buffer__default['default']) {
	  if (!buffer__default['default'].hasOwnProperty(key$1)) continue
	  if (key$1 === 'SlowBuffer' || key$1 === 'Buffer') continue
	  safer[key$1] = buffer__default['default'][key$1];
	}

	var Safer = safer.Buffer = {};
	for (key$1 in Buffer$B) {
	  if (!Buffer$B.hasOwnProperty(key$1)) continue
	  if (key$1 === 'allocUnsafe' || key$1 === 'allocUnsafeSlow') continue
	  Safer[key$1] = Buffer$B[key$1];
	}

	safer.Buffer.prototype = Buffer$B.prototype;

	if (!Safer.from || Safer.from === Uint8Array.from) {
	  Safer.from = function (value, encodingOrOffset, length) {
	    if (typeof value === 'number') {
	      throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof value)
	    }
	    if (value && typeof value.length === 'undefined') {
	      throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + typeof value)
	    }
	    return Buffer$B(value, encodingOrOffset, length)
	  };
	}

	if (!Safer.alloc) {
	  Safer.alloc = function (size, fill, encoding) {
	    if (typeof size !== 'number') {
	      throw new TypeError('The "size" argument must be of type number. Received type ' + typeof size)
	    }
	    if (size < 0 || size >= 2 * (1 << 30)) {
	      throw new RangeError('The value "' + size + '" is invalid for option "size"')
	    }
	    var buf = Buffer$B(size);
	    if (!fill || fill.length === 0) {
	      buf.fill(0);
	    } else if (typeof encoding === 'string') {
	      buf.fill(fill, encoding);
	    } else {
	      buf.fill(fill);
	    }
	    return buf
	  };
	}

	if (!safer.kStringMaxLength) {
	  try {
	    safer.kStringMaxLength = process.binding('buffer').kStringMaxLength;
	  } catch (e) {
	    // we can't determine kStringMaxLength in environments where process.binding
	    // is unsupported, so let's not set it
	  }
	}

	if (!safer.constants) {
	  safer.constants = {
	    MAX_LENGTH: safer.kMaxLength
	  };
	  if (safer.kStringMaxLength) {
	    safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength;
	  }
	}

	var safer_1 = safer;

	// Copyright 2015 Joyent, Inc.

	var Buffer$A = safer_1.Buffer;

	var algInfo = {
		'dsa': {
			parts: ['p', 'q', 'g', 'y'],
			sizePart: 'p'
		},
		'rsa': {
			parts: ['e', 'n'],
			sizePart: 'n'
		},
		'ecdsa': {
			parts: ['curve', 'Q'],
			sizePart: 'Q'
		},
		'ed25519': {
			parts: ['A'],
			sizePart: 'A'
		}
	};
	algInfo['curve25519'] = algInfo['ed25519'];

	var algPrivInfo = {
		'dsa': {
			parts: ['p', 'q', 'g', 'y', 'x']
		},
		'rsa': {
			parts: ['n', 'e', 'd', 'iqmp', 'p', 'q']
		},
		'ecdsa': {
			parts: ['curve', 'Q', 'd']
		},
		'ed25519': {
			parts: ['A', 'k']
		}
	};
	algPrivInfo['curve25519'] = algPrivInfo['ed25519'];

	var hashAlgs = {
		'md5': true,
		'sha1': true,
		'sha256': true,
		'sha384': true,
		'sha512': true
	};

	/*
	 * Taken from
	 * http://csrc.nist.gov/groups/ST/toolkit/documents/dss/NISTReCur.pdf
	 */
	var curves = {
		'nistp256': {
			size: 256,
			pkcs8oid: '1.2.840.10045.3.1.7',
			p: Buffer$A.from(('00' +
			    'ffffffff 00000001 00000000 00000000' +
			    '00000000 ffffffff ffffffff ffffffff').
			    replace(/ /g, ''), 'hex'),
			a: Buffer$A.from(('00' +
			    'FFFFFFFF 00000001 00000000 00000000' +
			    '00000000 FFFFFFFF FFFFFFFF FFFFFFFC').
			    replace(/ /g, ''), 'hex'),
			b: Buffer$A.from((
			    '5ac635d8 aa3a93e7 b3ebbd55 769886bc' +
			    '651d06b0 cc53b0f6 3bce3c3e 27d2604b').
			    replace(/ /g, ''), 'hex'),
			s: Buffer$A.from(('00' +
			    'c49d3608 86e70493 6a6678e1 139d26b7' +
			    '819f7e90').
			    replace(/ /g, ''), 'hex'),
			n: Buffer$A.from(('00' +
			    'ffffffff 00000000 ffffffff ffffffff' +
			    'bce6faad a7179e84 f3b9cac2 fc632551').
			    replace(/ /g, ''), 'hex'),
			G: Buffer$A.from(('04' +
			    '6b17d1f2 e12c4247 f8bce6e5 63a440f2' +
			    '77037d81 2deb33a0 f4a13945 d898c296' +
			    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16' +
			    '2bce3357 6b315ece cbb64068 37bf51f5').
			    replace(/ /g, ''), 'hex')
		},
		'nistp384': {
			size: 384,
			pkcs8oid: '1.3.132.0.34',
			p: Buffer$A.from(('00' +
			    'ffffffff ffffffff ffffffff ffffffff' +
			    'ffffffff ffffffff ffffffff fffffffe' +
			    'ffffffff 00000000 00000000 ffffffff').
			    replace(/ /g, ''), 'hex'),
			a: Buffer$A.from(('00' +
			    'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF' +
			    'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE' +
			    'FFFFFFFF 00000000 00000000 FFFFFFFC').
			    replace(/ /g, ''), 'hex'),
			b: Buffer$A.from((
			    'b3312fa7 e23ee7e4 988e056b e3f82d19' +
			    '181d9c6e fe814112 0314088f 5013875a' +
			    'c656398d 8a2ed19d 2a85c8ed d3ec2aef').
			    replace(/ /g, ''), 'hex'),
			s: Buffer$A.from(('00' +
			    'a335926a a319a27a 1d00896a 6773a482' +
			    '7acdac73').
			    replace(/ /g, ''), 'hex'),
			n: Buffer$A.from(('00' +
			    'ffffffff ffffffff ffffffff ffffffff' +
			    'ffffffff ffffffff c7634d81 f4372ddf' +
			    '581a0db2 48b0a77a ecec196a ccc52973').
			    replace(/ /g, ''), 'hex'),
			G: Buffer$A.from(('04' +
			    'aa87ca22 be8b0537 8eb1c71e f320ad74' +
			    '6e1d3b62 8ba79b98 59f741e0 82542a38' +
			    '5502f25d bf55296c 3a545e38 72760ab7' +
			    '3617de4a 96262c6f 5d9e98bf 9292dc29' +
			    'f8f41dbd 289a147c e9da3113 b5f0b8c0' +
			    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f').
			    replace(/ /g, ''), 'hex')
		},
		'nistp521': {
			size: 521,
			pkcs8oid: '1.3.132.0.35',
			p: Buffer$A.from((
			    '01ffffff ffffffff ffffffff ffffffff' +
			    'ffffffff ffffffff ffffffff ffffffff' +
			    'ffffffff ffffffff ffffffff ffffffff' +
			    'ffffffff ffffffff ffffffff ffffffff' +
			    'ffff').replace(/ /g, ''), 'hex'),
			a: Buffer$A.from(('01FF' +
			    'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF' +
			    'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF' +
			    'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF' +
			    'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFC').
			    replace(/ /g, ''), 'hex'),
			b: Buffer$A.from(('51' +
			    '953eb961 8e1c9a1f 929a21a0 b68540ee' +
			    'a2da725b 99b315f3 b8b48991 8ef109e1' +
			    '56193951 ec7e937b 1652c0bd 3bb1bf07' +
			    '3573df88 3d2c34f1 ef451fd4 6b503f00').
			    replace(/ /g, ''), 'hex'),
			s: Buffer$A.from(('00' +
			    'd09e8800 291cb853 96cc6717 393284aa' +
			    'a0da64ba').replace(/ /g, ''), 'hex'),
			n: Buffer$A.from(('01ff' +
			    'ffffffff ffffffff ffffffff ffffffff' +
			    'ffffffff ffffffff ffffffff fffffffa' +
			    '51868783 bf2f966b 7fcc0148 f709a5d0' +
			    '3bb5c9b8 899c47ae bb6fb71e 91386409').
			    replace(/ /g, ''), 'hex'),
			G: Buffer$A.from(('04' +
			    '00c6 858e06b7 0404e9cd 9e3ecb66 2395b442' +
			         '9c648139 053fb521 f828af60 6b4d3dba' +
			         'a14b5e77 efe75928 fe1dc127 a2ffa8de' +
			         '3348b3c1 856a429b f97e7e31 c2e5bd66' +
			    '0118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9' +
			         '98f54449 579b4468 17afbd17 273e662c' +
			         '97ee7299 5ef42640 c550b901 3fad0761' +
			         '353c7086 a272c240 88be9476 9fd16650').
			    replace(/ /g, ''), 'hex')
		}
	};

	var algs = {
		info: algInfo,
		privInfo: algPrivInfo,
		hashAlgs: hashAlgs,
		curves: curves
	};

	// Copyright 2015 Joyent, Inc.




	function FingerprintFormatError$1(fp, format) {
		if (Error.captureStackTrace)
			Error.captureStackTrace(this, FingerprintFormatError$1);
		this.name = 'FingerprintFormatError';
		this.fingerprint = fp;
		this.format = format;
		this.message = 'Fingerprint format is not supported, or is invalid: ';
		if (fp !== undefined)
			this.message += ' fingerprint = ' + fp;
		if (format !== undefined)
			this.message += ' format = ' + format;
	}
	util__default['default'].inherits(FingerprintFormatError$1, Error);

	function InvalidAlgorithmError$7(alg) {
		if (Error.captureStackTrace)
			Error.captureStackTrace(this, InvalidAlgorithmError$7);
		this.name = 'InvalidAlgorithmError';
		this.algorithm = alg;
		this.message = 'Algorithm "' + alg + '" is not supported';
	}
	util__default['default'].inherits(InvalidAlgorithmError$7, Error);

	function KeyParseError$2(name, format, innerErr) {
		if (Error.captureStackTrace)
			Error.captureStackTrace(this, KeyParseError$2);
		this.name = 'KeyParseError';
		this.format = format;
		this.keyName = name;
		this.innerErr = innerErr;
		this.message = 'Failed to parse ' + name + ' as a valid ' + format +
		    ' format key: ' + innerErr.message;
	}
	util__default['default'].inherits(KeyParseError$2, Error);

	function SignatureParseError$1(type, format, innerErr) {
		if (Error.captureStackTrace)
			Error.captureStackTrace(this, SignatureParseError$1);
		this.name = 'SignatureParseError';
		this.type = type;
		this.format = format;
		this.innerErr = innerErr;
		this.message = 'Failed to parse the given data as a ' + type +
		    ' signature in ' + format + ' format: ' + innerErr.message;
	}
	util__default['default'].inherits(SignatureParseError$1, Error);

	function CertificateParseError$1(name, format, innerErr) {
		if (Error.captureStackTrace)
			Error.captureStackTrace(this, CertificateParseError$1);
		this.name = 'CertificateParseError';
		this.format = format;
		this.certName = name;
		this.innerErr = innerErr;
		this.message = 'Failed to parse ' + name + ' as a valid ' + format +
		    ' format certificate: ' + innerErr.message;
	}
	util__default['default'].inherits(CertificateParseError$1, Error);

	function KeyEncryptedError(name, format) {
		if (Error.captureStackTrace)
			Error.captureStackTrace(this, KeyEncryptedError);
		this.name = 'KeyEncryptedError';
		this.format = format;
		this.keyName = name;
		this.message = 'The ' + format + ' format key ' + name + ' is ' +
		    'encrypted (password-protected), and no passphrase was ' +
		    'provided in `options`';
	}
	util__default['default'].inherits(KeyEncryptedError, Error);

	var errors$1 = {
		FingerprintFormatError: FingerprintFormatError$1,
		InvalidAlgorithmError: InvalidAlgorithmError$7,
		KeyParseError: KeyParseError$2,
		SignatureParseError: SignatureParseError$1,
		KeyEncryptedError: KeyEncryptedError,
		CertificateParseError: CertificateParseError$1
	};

	// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.


	var errors = {

	  newInvalidAsn1Error: function (msg) {
	    var e = new Error();
	    e.name = 'InvalidAsn1Error';
	    e.message = msg || '';
	    return e;
	  }

	};

	// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.


	var types$1 = {
	  EOC: 0,
	  Boolean: 1,
	  Integer: 2,
	  BitString: 3,
	  OctetString: 4,
	  Null: 5,
	  OID: 6,
	  ObjectDescriptor: 7,
	  External: 8,
	  Real: 9, // float
	  Enumeration: 10,
	  PDV: 11,
	  Utf8String: 12,
	  RelativeOID: 13,
	  Sequence: 16,
	  Set: 17,
	  NumericString: 18,
	  PrintableString: 19,
	  T61String: 20,
	  VideotexString: 21,
	  IA5String: 22,
	  UTCTime: 23,
	  GeneralizedTime: 24,
	  GraphicString: 25,
	  VisibleString: 26,
	  GeneralString: 28,
	  UniversalString: 29,
	  CharacterString: 30,
	  BMPString: 31,
	  Constructor: 32,
	  Context: 128
	};

	// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.


	var Buffer$z = safer_1.Buffer;





	// --- Globals

	var newInvalidAsn1Error$1 = errors.newInvalidAsn1Error;



	// --- API

	function Reader$1(data) {
	  if (!data || !Buffer$z.isBuffer(data))
	    throw new TypeError('data must be a node Buffer');

	  this._buf = data;
	  this._size = data.length;

	  // These hold the "current" state
	  this._len = 0;
	  this._offset = 0;
	}

	Object.defineProperty(Reader$1.prototype, 'length', {
	  enumerable: true,
	  get: function () { return (this._len); }
	});

	Object.defineProperty(Reader$1.prototype, 'offset', {
	  enumerable: true,
	  get: function () { return (this._offset); }
	});

	Object.defineProperty(Reader$1.prototype, 'remain', {
	  get: function () { return (this._size - this._offset); }
	});

	Object.defineProperty(Reader$1.prototype, 'buffer', {
	  get: function () { return (this._buf.slice(this._offset)); }
	});


	/**
	 * Reads a single byte and advances offset; you can pass in `true` to make this
	 * a "peek" operation (i.e., get the byte, but don't advance the offset).
	 *
	 * @param {Boolean} peek true means don't move offset.
	 * @return {Number} the next byte, null if not enough data.
	 */
	Reader$1.prototype.readByte = function (peek) {
	  if (this._size - this._offset < 1)
	    return null;

	  var b = this._buf[this._offset] & 0xff;

	  if (!peek)
	    this._offset += 1;

	  return b;
	};


	Reader$1.prototype.peek = function () {
	  return this.readByte(true);
	};


	/**
	 * Reads a (potentially) variable length off the BER buffer.  This call is
	 * not really meant to be called directly, as callers have to manipulate
	 * the internal buffer afterwards.
	 *
	 * As a result of this call, you can call `Reader.length`, until the
	 * next thing called that does a readLength.
	 *
	 * @return {Number} the amount of offset to advance the buffer.
	 * @throws {InvalidAsn1Error} on bad ASN.1
	 */
	Reader$1.prototype.readLength = function (offset) {
	  if (offset === undefined)
	    offset = this._offset;

	  if (offset >= this._size)
	    return null;

	  var lenB = this._buf[offset++] & 0xff;
	  if (lenB === null)
	    return null;

	  if ((lenB & 0x80) === 0x80) {
	    lenB &= 0x7f;

	    if (lenB === 0)
	      throw newInvalidAsn1Error$1('Indefinite length not supported');

	    if (lenB > 4)
	      throw newInvalidAsn1Error$1('encoding too long');

	    if (this._size - offset < lenB)
	      return null;

	    this._len = 0;
	    for (var i = 0; i < lenB; i++)
	      this._len = (this._len << 8) + (this._buf[offset++] & 0xff);

	  } else {
	    // Wasn't a variable length
	    this._len = lenB;
	  }

	  return offset;
	};


	/**
	 * Parses the next sequence in this BER buffer.
	 *
	 * To get the length of the sequence, call `Reader.length`.
	 *
	 * @return {Number} the sequence's tag.
	 */
	Reader$1.prototype.readSequence = function (tag) {
	  var seq = this.peek();
	  if (seq === null)
	    return null;
	  if (tag !== undefined && tag !== seq)
	    throw newInvalidAsn1Error$1('Expected 0x' + tag.toString(16) +
	                              ': got 0x' + seq.toString(16));

	  var o = this.readLength(this._offset + 1); // stored in `length`
	  if (o === null)
	    return null;

	  this._offset = o;
	  return seq;
	};


	Reader$1.prototype.readInt = function () {
	  return this._readTag(types$1.Integer);
	};


	Reader$1.prototype.readBoolean = function () {
	  return (this._readTag(types$1.Boolean) === 0 ? false : true);
	};


	Reader$1.prototype.readEnumeration = function () {
	  return this._readTag(types$1.Enumeration);
	};


	Reader$1.prototype.readString = function (tag, retbuf) {
	  if (!tag)
	    tag = types$1.OctetString;

	  var b = this.peek();
	  if (b === null)
	    return null;

	  if (b !== tag)
	    throw newInvalidAsn1Error$1('Expected 0x' + tag.toString(16) +
	                              ': got 0x' + b.toString(16));

	  var o = this.readLength(this._offset + 1); // stored in `length`

	  if (o === null)
	    return null;

	  if (this.length > this._size - o)
	    return null;

	  this._offset = o;

	  if (this.length === 0)
	    return retbuf ? Buffer$z.alloc(0) : '';

	  var str = this._buf.slice(this._offset, this._offset + this.length);
	  this._offset += this.length;

	  return retbuf ? str : str.toString('utf8');
	};

	Reader$1.prototype.readOID = function (tag) {
	  if (!tag)
	    tag = types$1.OID;

	  var b = this.readString(tag, true);
	  if (b === null)
	    return null;

	  var values = [];
	  var value = 0;

	  for (var i = 0; i < b.length; i++) {
	    var byte = b[i] & 0xff;

	    value <<= 7;
	    value += byte & 0x7f;
	    if ((byte & 0x80) === 0) {
	      values.push(value);
	      value = 0;
	    }
	  }

	  value = values.shift();
	  values.unshift(value % 40);
	  values.unshift((value / 40) >> 0);

	  return values.join('.');
	};


	Reader$1.prototype._readTag = function (tag) {
	  assert__default['default'].ok(tag !== undefined);

	  var b = this.peek();

	  if (b === null)
	    return null;

	  if (b !== tag)
	    throw newInvalidAsn1Error$1('Expected 0x' + tag.toString(16) +
	                              ': got 0x' + b.toString(16));

	  var o = this.readLength(this._offset + 1); // stored in `length`
	  if (o === null)
	    return null;

	  if (this.length > 4)
	    throw newInvalidAsn1Error$1('Integer too long: ' + this.length);

	  if (this.length > this._size - o)
	    return null;
	  this._offset = o;

	  var fb = this._buf[this._offset];
	  var value = 0;

	  for (var i = 0; i < this.length; i++) {
	    value <<= 8;
	    value |= (this._buf[this._offset++] & 0xff);
	  }

	  if ((fb & 0x80) === 0x80 && i !== 4)
	    value -= (1 << (i * 8));

	  return value >> 0;
	};



	// --- Exported API

	var reader$1 = Reader$1;

	// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.


	var Buffer$y = safer_1.Buffer;




	// --- Globals

	var newInvalidAsn1Error = errors.newInvalidAsn1Error;

	var DEFAULT_OPTS = {
	  size: 1024,
	  growthFactor: 8
	};


	// --- Helpers

	function merge$1(from, to) {
	  assert__default['default'].ok(from);
	  assert__default['default'].equal(typeof (from), 'object');
	  assert__default['default'].ok(to);
	  assert__default['default'].equal(typeof (to), 'object');

	  var keys = Object.getOwnPropertyNames(from);
	  keys.forEach(function (key) {
	    if (to[key])
	      return;

	    var value = Object.getOwnPropertyDescriptor(from, key);
	    Object.defineProperty(to, key, value);
	  });

	  return to;
	}



	// --- API

	function Writer$2(options) {
	  options = merge$1(DEFAULT_OPTS, options || {});

	  this._buf = Buffer$y.alloc(options.size || 1024);
	  this._size = this._buf.length;
	  this._offset = 0;
	  this._options = options;

	  // A list of offsets in the buffer where we need to insert
	  // sequence tag/len pairs.
	  this._seq = [];
	}

	Object.defineProperty(Writer$2.prototype, 'buffer', {
	  get: function () {
	    if (this._seq.length)
	      throw newInvalidAsn1Error(this._seq.length + ' unended sequence(s)');

	    return (this._buf.slice(0, this._offset));
	  }
	});

	Writer$2.prototype.writeByte = function (b) {
	  if (typeof (b) !== 'number')
	    throw new TypeError('argument must be a Number');

	  this._ensure(1);
	  this._buf[this._offset++] = b;
	};


	Writer$2.prototype.writeInt = function (i, tag) {
	  if (typeof (i) !== 'number')
	    throw new TypeError('argument must be a Number');
	  if (typeof (tag) !== 'number')
	    tag = types$1.Integer;

	  var sz = 4;

	  while ((((i & 0xff800000) === 0) || ((i & 0xff800000) === 0xff800000 >> 0)) &&
	        (sz > 1)) {
	    sz--;
	    i <<= 8;
	  }

	  if (sz > 4)
	    throw newInvalidAsn1Error('BER ints cannot be > 0xffffffff');

	  this._ensure(2 + sz);
	  this._buf[this._offset++] = tag;
	  this._buf[this._offset++] = sz;

	  while (sz-- > 0) {
	    this._buf[this._offset++] = ((i & 0xff000000) >>> 24);
	    i <<= 8;
	  }

	};


	Writer$2.prototype.writeNull = function () {
	  this.writeByte(types$1.Null);
	  this.writeByte(0x00);
	};


	Writer$2.prototype.writeEnumeration = function (i, tag) {
	  if (typeof (i) !== 'number')
	    throw new TypeError('argument must be a Number');
	  if (typeof (tag) !== 'number')
	    tag = types$1.Enumeration;

	  return this.writeInt(i, tag);
	};


	Writer$2.prototype.writeBoolean = function (b, tag) {
	  if (typeof (b) !== 'boolean')
	    throw new TypeError('argument must be a Boolean');
	  if (typeof (tag) !== 'number')
	    tag = types$1.Boolean;

	  this._ensure(3);
	  this._buf[this._offset++] = tag;
	  this._buf[this._offset++] = 0x01;
	  this._buf[this._offset++] = b ? 0xff : 0x00;
	};


	Writer$2.prototype.writeString = function (s, tag) {
	  if (typeof (s) !== 'string')
	    throw new TypeError('argument must be a string (was: ' + typeof (s) + ')');
	  if (typeof (tag) !== 'number')
	    tag = types$1.OctetString;

	  var len = Buffer$y.byteLength(s);
	  this.writeByte(tag);
	  this.writeLength(len);
	  if (len) {
	    this._ensure(len);
	    this._buf.write(s, this._offset);
	    this._offset += len;
	  }
	};


	Writer$2.prototype.writeBuffer = function (buf, tag) {
	  if (typeof (tag) !== 'number')
	    throw new TypeError('tag must be a number');
	  if (!Buffer$y.isBuffer(buf))
	    throw new TypeError('argument must be a buffer');

	  this.writeByte(tag);
	  this.writeLength(buf.length);
	  this._ensure(buf.length);
	  buf.copy(this._buf, this._offset, 0, buf.length);
	  this._offset += buf.length;
	};


	Writer$2.prototype.writeStringArray = function (strings) {
	  if ((!strings instanceof Array))
	    throw new TypeError('argument must be an Array[String]');

	  var self = this;
	  strings.forEach(function (s) {
	    self.writeString(s);
	  });
	};

	// This is really to solve DER cases, but whatever for now
	Writer$2.prototype.writeOID = function (s, tag) {
	  if (typeof (s) !== 'string')
	    throw new TypeError('argument must be a string');
	  if (typeof (tag) !== 'number')
	    tag = types$1.OID;

	  if (!/^([0-9]+\.){3,}[0-9]+$/.test(s))
	    throw new Error('argument is not a valid OID string');

	  function encodeOctet(bytes, octet) {
	    if (octet < 128) {
	        bytes.push(octet);
	    } else if (octet < 16384) {
	        bytes.push((octet >>> 7) | 0x80);
	        bytes.push(octet & 0x7F);
	    } else if (octet < 2097152) {
	      bytes.push((octet >>> 14) | 0x80);
	      bytes.push(((octet >>> 7) | 0x80) & 0xFF);
	      bytes.push(octet & 0x7F);
	    } else if (octet < 268435456) {
	      bytes.push((octet >>> 21) | 0x80);
	      bytes.push(((octet >>> 14) | 0x80) & 0xFF);
	      bytes.push(((octet >>> 7) | 0x80) & 0xFF);
	      bytes.push(octet & 0x7F);
	    } else {
	      bytes.push(((octet >>> 28) | 0x80) & 0xFF);
	      bytes.push(((octet >>> 21) | 0x80) & 0xFF);
	      bytes.push(((octet >>> 14) | 0x80) & 0xFF);
	      bytes.push(((octet >>> 7) | 0x80) & 0xFF);
	      bytes.push(octet & 0x7F);
	    }
	  }

	  var tmp = s.split('.');
	  var bytes = [];
	  bytes.push(parseInt(tmp[0], 10) * 40 + parseInt(tmp[1], 10));
	  tmp.slice(2).forEach(function (b) {
	    encodeOctet(bytes, parseInt(b, 10));
	  });

	  var self = this;
	  this._ensure(2 + bytes.length);
	  this.writeByte(tag);
	  this.writeLength(bytes.length);
	  bytes.forEach(function (b) {
	    self.writeByte(b);
	  });
	};


	Writer$2.prototype.writeLength = function (len) {
	  if (typeof (len) !== 'number')
	    throw new TypeError('argument must be a Number');

	  this._ensure(4);

	  if (len <= 0x7f) {
	    this._buf[this._offset++] = len;
	  } else if (len <= 0xff) {
	    this._buf[this._offset++] = 0x81;
	    this._buf[this._offset++] = len;
	  } else if (len <= 0xffff) {
	    this._buf[this._offset++] = 0x82;
	    this._buf[this._offset++] = len >> 8;
	    this._buf[this._offset++] = len;
	  } else if (len <= 0xffffff) {
	    this._buf[this._offset++] = 0x83;
	    this._buf[this._offset++] = len >> 16;
	    this._buf[this._offset++] = len >> 8;
	    this._buf[this._offset++] = len;
	  } else {
	    throw newInvalidAsn1Error('Length too long (> 4 bytes)');
	  }
	};

	Writer$2.prototype.startSequence = function (tag) {
	  if (typeof (tag) !== 'number')
	    tag = types$1.Sequence | types$1.Constructor;

	  this.writeByte(tag);
	  this._seq.push(this._offset);
	  this._ensure(3);
	  this._offset += 3;
	};


	Writer$2.prototype.endSequence = function () {
	  var seq = this._seq.pop();
	  var start = seq + 3;
	  var len = this._offset - start;

	  if (len <= 0x7f) {
	    this._shift(start, len, -2);
	    this._buf[seq] = len;
	  } else if (len <= 0xff) {
	    this._shift(start, len, -1);
	    this._buf[seq] = 0x81;
	    this._buf[seq + 1] = len;
	  } else if (len <= 0xffff) {
	    this._buf[seq] = 0x82;
	    this._buf[seq + 1] = len >> 8;
	    this._buf[seq + 2] = len;
	  } else if (len <= 0xffffff) {
	    this._shift(start, len, 1);
	    this._buf[seq] = 0x83;
	    this._buf[seq + 1] = len >> 16;
	    this._buf[seq + 2] = len >> 8;
	    this._buf[seq + 3] = len;
	  } else {
	    throw newInvalidAsn1Error('Sequence too long');
	  }
	};


	Writer$2.prototype._shift = function (start, len, shift) {
	  assert__default['default'].ok(start !== undefined);
	  assert__default['default'].ok(len !== undefined);
	  assert__default['default'].ok(shift);

	  this._buf.copy(this._buf, start + shift, start, start + len);
	  this._offset += shift;
	};

	Writer$2.prototype._ensure = function (len) {
	  assert__default['default'].ok(len);

	  if (this._size - this._offset < len) {
	    var sz = this._size * this._options.growthFactor;
	    if (sz - this._offset < len)
	      sz += len;

	    var buf = Buffer$y.alloc(sz);

	    this._buf.copy(buf, 0, 0, this._offset);
	    this._buf = buf;
	    this._size = sz;
	  }
	};



	// --- Exported API

	var writer$3 = Writer$2;

	var ber = createCommonjsModule(function (module) {
	// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.








	// --- Exports

	module.exports = {

	  Reader: reader$1,

	  Writer: writer$3

	};

	for (var t in types$1) {
	  if (types$1.hasOwnProperty(t))
	    module.exports[t] = types$1[t];
	}
	for (var e in errors) {
	  if (errors.hasOwnProperty(e))
	    module.exports[e] = errors[e];
	}
	});

	// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.

	// If you have no idea what ASN.1 or BER is, see this:
	// ftp://ftp.rsa.com/pub/pkcs/ascii/layman.asc





	// --- Exported API

	var lib$6 = {

	  Ber: ber,

	  BerReader: ber.Reader,

	  BerWriter: ber.Writer

	};

	var jsbn$2 = createCommonjsModule(function (module, exports) {
	(function(){

	    // Copyright (c) 2005  Tom Wu
	    // All Rights Reserved.
	    // See "LICENSE" for details.

	    // Basic JavaScript BN library - subset useful for RSA encryption.

	    // Bits per digit
	    var dbits;

	    // JavaScript engine analysis
	    var canary = 0xdeadbeefcafe;
	    var j_lm = ((canary&0xffffff)==0xefcafe);

	    // (public) Constructor
	    function BigInteger(a,b,c) {
	      if(a != null)
	        if("number" == typeof a) this.fromNumber(a,b,c);
	        else if(b == null && "string" != typeof a) this.fromString(a,256);
	        else this.fromString(a,b);
	    }

	    // return new, unset BigInteger
	    function nbi() { return new BigInteger(null); }

	    // am: Compute w_j += (x*this_i), propagate carries,
	    // c is initial carry, returns final carry.
	    // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
	    // We need to select the fastest one that works in this environment.

	    // am1: use a single mult and divide to get the high bits,
	    // max digit bits should be 26 because
	    // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
	    function am1(i,x,w,j,c,n) {
	      while(--n >= 0) {
	        var v = x*this[i++]+w[j]+c;
	        c = Math.floor(v/0x4000000);
	        w[j++] = v&0x3ffffff;
	      }
	      return c;
	    }
	    // am2 avoids a big mult-and-extract completely.
	    // Max digit bits should be <= 30 because we do bitwise ops
	    // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
	    function am2(i,x,w,j,c,n) {
	      var xl = x&0x7fff, xh = x>>15;
	      while(--n >= 0) {
	        var l = this[i]&0x7fff;
	        var h = this[i++]>>15;
	        var m = xh*l+h*xl;
	        l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
	        c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
	        w[j++] = l&0x3fffffff;
	      }
	      return c;
	    }
	    // Alternately, set max digit bits to 28 since some
	    // browsers slow down when dealing with 32-bit numbers.
	    function am3(i,x,w,j,c,n) {
	      var xl = x&0x3fff, xh = x>>14;
	      while(--n >= 0) {
	        var l = this[i]&0x3fff;
	        var h = this[i++]>>14;
	        var m = xh*l+h*xl;
	        l = xl*l+((m&0x3fff)<<14)+w[j]+c;
	        c = (l>>28)+(m>>14)+xh*h;
	        w[j++] = l&0xfffffff;
	      }
	      return c;
	    }
	    var inBrowser = typeof navigator !== "undefined";
	    if(inBrowser && j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
	      BigInteger.prototype.am = am2;
	      dbits = 30;
	    }
	    else if(inBrowser && j_lm && (navigator.appName != "Netscape")) {
	      BigInteger.prototype.am = am1;
	      dbits = 26;
	    }
	    else { // Mozilla/Netscape seems to prefer am3
	      BigInteger.prototype.am = am3;
	      dbits = 28;
	    }

	    BigInteger.prototype.DB = dbits;
	    BigInteger.prototype.DM = ((1<<dbits)-1);
	    BigInteger.prototype.DV = (1<<dbits);

	    var BI_FP = 52;
	    BigInteger.prototype.FV = Math.pow(2,BI_FP);
	    BigInteger.prototype.F1 = BI_FP-dbits;
	    BigInteger.prototype.F2 = 2*dbits-BI_FP;

	    // Digit conversions
	    var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
	    var BI_RC = new Array();
	    var rr,vv;
	    rr = "0".charCodeAt(0);
	    for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
	    rr = "a".charCodeAt(0);
	    for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
	    rr = "A".charCodeAt(0);
	    for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

	    function int2char(n) { return BI_RM.charAt(n); }
	    function intAt(s,i) {
	      var c = BI_RC[s.charCodeAt(i)];
	      return (c==null)?-1:c;
	    }

	    // (protected) copy this to r
	    function bnpCopyTo(r) {
	      for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
	      r.t = this.t;
	      r.s = this.s;
	    }

	    // (protected) set from integer value x, -DV <= x < DV
	    function bnpFromInt(x) {
	      this.t = 1;
	      this.s = (x<0)?-1:0;
	      if(x > 0) this[0] = x;
	      else if(x < -1) this[0] = x+this.DV;
	      else this.t = 0;
	    }

	    // return bigint initialized to value
	    function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

	    // (protected) set from string and radix
	    function bnpFromString(s,b) {
	      var k;
	      if(b == 16) k = 4;
	      else if(b == 8) k = 3;
	      else if(b == 256) k = 8; // byte array
	      else if(b == 2) k = 1;
	      else if(b == 32) k = 5;
	      else if(b == 4) k = 2;
	      else { this.fromRadix(s,b); return; }
	      this.t = 0;
	      this.s = 0;
	      var i = s.length, mi = false, sh = 0;
	      while(--i >= 0) {
	        var x = (k==8)?s[i]&0xff:intAt(s,i);
	        if(x < 0) {
	          if(s.charAt(i) == "-") mi = true;
	          continue;
	        }
	        mi = false;
	        if(sh == 0)
	          this[this.t++] = x;
	        else if(sh+k > this.DB) {
	          this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
	          this[this.t++] = (x>>(this.DB-sh));
	        }
	        else
	          this[this.t-1] |= x<<sh;
	        sh += k;
	        if(sh >= this.DB) sh -= this.DB;
	      }
	      if(k == 8 && (s[0]&0x80) != 0) {
	        this.s = -1;
	        if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
	      }
	      this.clamp();
	      if(mi) BigInteger.ZERO.subTo(this,this);
	    }

	    // (protected) clamp off excess high words
	    function bnpClamp() {
	      var c = this.s&this.DM;
	      while(this.t > 0 && this[this.t-1] == c) --this.t;
	    }

	    // (public) return string representation in given radix
	    function bnToString(b) {
	      if(this.s < 0) return "-"+this.negate().toString(b);
	      var k;
	      if(b == 16) k = 4;
	      else if(b == 8) k = 3;
	      else if(b == 2) k = 1;
	      else if(b == 32) k = 5;
	      else if(b == 4) k = 2;
	      else return this.toRadix(b);
	      var km = (1<<k)-1, d, m = false, r = "", i = this.t;
	      var p = this.DB-(i*this.DB)%k;
	      if(i-- > 0) {
	        if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
	        while(i >= 0) {
	          if(p < k) {
	            d = (this[i]&((1<<p)-1))<<(k-p);
	            d |= this[--i]>>(p+=this.DB-k);
	          }
	          else {
	            d = (this[i]>>(p-=k))&km;
	            if(p <= 0) { p += this.DB; --i; }
	          }
	          if(d > 0) m = true;
	          if(m) r += int2char(d);
	        }
	      }
	      return m?r:"0";
	    }

	    // (public) -this
	    function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

	    // (public) |this|
	    function bnAbs() { return (this.s<0)?this.negate():this; }

	    // (public) return + if this > a, - if this < a, 0 if equal
	    function bnCompareTo(a) {
	      var r = this.s-a.s;
	      if(r != 0) return r;
	      var i = this.t;
	      r = i-a.t;
	      if(r != 0) return (this.s<0)?-r:r;
	      while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
	      return 0;
	    }

	    // returns bit length of the integer x
	    function nbits(x) {
	      var r = 1, t;
	      if((t=x>>>16) != 0) { x = t; r += 16; }
	      if((t=x>>8) != 0) { x = t; r += 8; }
	      if((t=x>>4) != 0) { x = t; r += 4; }
	      if((t=x>>2) != 0) { x = t; r += 2; }
	      if((t=x>>1) != 0) { x = t; r += 1; }
	      return r;
	    }

	    // (public) return the number of bits in "this"
	    function bnBitLength() {
	      if(this.t <= 0) return 0;
	      return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
	    }

	    // (protected) r = this << n*DB
	    function bnpDLShiftTo(n,r) {
	      var i;
	      for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
	      for(i = n-1; i >= 0; --i) r[i] = 0;
	      r.t = this.t+n;
	      r.s = this.s;
	    }

	    // (protected) r = this >> n*DB
	    function bnpDRShiftTo(n,r) {
	      for(var i = n; i < this.t; ++i) r[i-n] = this[i];
	      r.t = Math.max(this.t-n,0);
	      r.s = this.s;
	    }

	    // (protected) r = this << n
	    function bnpLShiftTo(n,r) {
	      var bs = n%this.DB;
	      var cbs = this.DB-bs;
	      var bm = (1<<cbs)-1;
	      var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
	      for(i = this.t-1; i >= 0; --i) {
	        r[i+ds+1] = (this[i]>>cbs)|c;
	        c = (this[i]&bm)<<bs;
	      }
	      for(i = ds-1; i >= 0; --i) r[i] = 0;
	      r[ds] = c;
	      r.t = this.t+ds+1;
	      r.s = this.s;
	      r.clamp();
	    }

	    // (protected) r = this >> n
	    function bnpRShiftTo(n,r) {
	      r.s = this.s;
	      var ds = Math.floor(n/this.DB);
	      if(ds >= this.t) { r.t = 0; return; }
	      var bs = n%this.DB;
	      var cbs = this.DB-bs;
	      var bm = (1<<bs)-1;
	      r[0] = this[ds]>>bs;
	      for(var i = ds+1; i < this.t; ++i) {
	        r[i-ds-1] |= (this[i]&bm)<<cbs;
	        r[i-ds] = this[i]>>bs;
	      }
	      if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
	      r.t = this.t-ds;
	      r.clamp();
	    }

	    // (protected) r = this - a
	    function bnpSubTo(a,r) {
	      var i = 0, c = 0, m = Math.min(a.t,this.t);
	      while(i < m) {
	        c += this[i]-a[i];
	        r[i++] = c&this.DM;
	        c >>= this.DB;
	      }
	      if(a.t < this.t) {
	        c -= a.s;
	        while(i < this.t) {
	          c += this[i];
	          r[i++] = c&this.DM;
	          c >>= this.DB;
	        }
	        c += this.s;
	      }
	      else {
	        c += this.s;
	        while(i < a.t) {
	          c -= a[i];
	          r[i++] = c&this.DM;
	          c >>= this.DB;
	        }
	        c -= a.s;
	      }
	      r.s = (c<0)?-1:0;
	      if(c < -1) r[i++] = this.DV+c;
	      else if(c > 0) r[i++] = c;
	      r.t = i;
	      r.clamp();
	    }

	    // (protected) r = this * a, r != this,a (HAC 14.12)
	    // "this" should be the larger one if appropriate.
	    function bnpMultiplyTo(a,r) {
	      var x = this.abs(), y = a.abs();
	      var i = x.t;
	      r.t = i+y.t;
	      while(--i >= 0) r[i] = 0;
	      for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
	      r.s = 0;
	      r.clamp();
	      if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
	    }

	    // (protected) r = this^2, r != this (HAC 14.16)
	    function bnpSquareTo(r) {
	      var x = this.abs();
	      var i = r.t = 2*x.t;
	      while(--i >= 0) r[i] = 0;
	      for(i = 0; i < x.t-1; ++i) {
	        var c = x.am(i,x[i],r,2*i,0,1);
	        if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
	          r[i+x.t] -= x.DV;
	          r[i+x.t+1] = 1;
	        }
	      }
	      if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
	      r.s = 0;
	      r.clamp();
	    }

	    // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
	    // r != q, this != m.  q or r may be null.
	    function bnpDivRemTo(m,q,r) {
	      var pm = m.abs();
	      if(pm.t <= 0) return;
	      var pt = this.abs();
	      if(pt.t < pm.t) {
	        if(q != null) q.fromInt(0);
	        if(r != null) this.copyTo(r);
	        return;
	      }
	      if(r == null) r = nbi();
	      var y = nbi(), ts = this.s, ms = m.s;
	      var nsh = this.DB-nbits(pm[pm.t-1]);   // normalize modulus
	      if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
	      else { pm.copyTo(y); pt.copyTo(r); }
	      var ys = y.t;
	      var y0 = y[ys-1];
	      if(y0 == 0) return;
	      var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
	      var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
	      var i = r.t, j = i-ys, t = (q==null)?nbi():q;
	      y.dlShiftTo(j,t);
	      if(r.compareTo(t) >= 0) {
	        r[r.t++] = 1;
	        r.subTo(t,r);
	      }
	      BigInteger.ONE.dlShiftTo(ys,t);
	      t.subTo(y,y);  // "negative" y so we can replace sub with am later
	      while(y.t < ys) y[y.t++] = 0;
	      while(--j >= 0) {
	        // Estimate quotient digit
	        var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
	        if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {   // Try it out
	          y.dlShiftTo(j,t);
	          r.subTo(t,r);
	          while(r[i] < --qd) r.subTo(t,r);
	        }
	      }
	      if(q != null) {
	        r.drShiftTo(ys,q);
	        if(ts != ms) BigInteger.ZERO.subTo(q,q);
	      }
	      r.t = ys;
	      r.clamp();
	      if(nsh > 0) r.rShiftTo(nsh,r); // Denormalize remainder
	      if(ts < 0) BigInteger.ZERO.subTo(r,r);
	    }

	    // (public) this mod a
	    function bnMod(a) {
	      var r = nbi();
	      this.abs().divRemTo(a,null,r);
	      if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
	      return r;
	    }

	    // Modular reduction using "classic" algorithm
	    function Classic(m) { this.m = m; }
	    function cConvert(x) {
	      if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
	      else return x;
	    }
	    function cRevert(x) { return x; }
	    function cReduce(x) { x.divRemTo(this.m,null,x); }
	    function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
	    function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

	    Classic.prototype.convert = cConvert;
	    Classic.prototype.revert = cRevert;
	    Classic.prototype.reduce = cReduce;
	    Classic.prototype.mulTo = cMulTo;
	    Classic.prototype.sqrTo = cSqrTo;

	    // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
	    // justification:
	    //         xy == 1 (mod m)
	    //         xy =  1+km
	    //   xy(2-xy) = (1+km)(1-km)
	    // x[y(2-xy)] = 1-k^2m^2
	    // x[y(2-xy)] == 1 (mod m^2)
	    // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
	    // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
	    // JS multiply "overflows" differently from C/C++, so care is needed here.
	    function bnpInvDigit() {
	      if(this.t < 1) return 0;
	      var x = this[0];
	      if((x&1) == 0) return 0;
	      var y = x&3;       // y == 1/x mod 2^2
	      y = (y*(2-(x&0xf)*y))&0xf; // y == 1/x mod 2^4
	      y = (y*(2-(x&0xff)*y))&0xff;   // y == 1/x mod 2^8
	      y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;    // y == 1/x mod 2^16
	      // last step - calculate inverse mod DV directly;
	      // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
	      y = (y*(2-x*y%this.DV))%this.DV;       // y == 1/x mod 2^dbits
	      // we really want the negative inverse, and -DV < y < DV
	      return (y>0)?this.DV-y:-y;
	    }

	    // Montgomery reduction
	    function Montgomery(m) {
	      this.m = m;
	      this.mp = m.invDigit();
	      this.mpl = this.mp&0x7fff;
	      this.mph = this.mp>>15;
	      this.um = (1<<(m.DB-15))-1;
	      this.mt2 = 2*m.t;
	    }

	    // xR mod m
	    function montConvert(x) {
	      var r = nbi();
	      x.abs().dlShiftTo(this.m.t,r);
	      r.divRemTo(this.m,null,r);
	      if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
	      return r;
	    }

	    // x/R mod m
	    function montRevert(x) {
	      var r = nbi();
	      x.copyTo(r);
	      this.reduce(r);
	      return r;
	    }

	    // x = x/R mod m (HAC 14.32)
	    function montReduce(x) {
	      while(x.t <= this.mt2) // pad x so am has enough room later
	        x[x.t++] = 0;
	      for(var i = 0; i < this.m.t; ++i) {
	        // faster way of calculating u0 = x[i]*mp mod DV
	        var j = x[i]&0x7fff;
	        var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
	        // use am to combine the multiply-shift-add into one call
	        j = i+this.m.t;
	        x[j] += this.m.am(0,u0,x,i,0,this.m.t);
	        // propagate carry
	        while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
	      }
	      x.clamp();
	      x.drShiftTo(this.m.t,x);
	      if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
	    }

	    // r = "x^2/R mod m"; x != r
	    function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

	    // r = "xy/R mod m"; x,y != r
	    function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

	    Montgomery.prototype.convert = montConvert;
	    Montgomery.prototype.revert = montRevert;
	    Montgomery.prototype.reduce = montReduce;
	    Montgomery.prototype.mulTo = montMulTo;
	    Montgomery.prototype.sqrTo = montSqrTo;

	    // (protected) true iff this is even
	    function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

	    // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
	    function bnpExp(e,z) {
	      if(e > 0xffffffff || e < 1) return BigInteger.ONE;
	      var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
	      g.copyTo(r);
	      while(--i >= 0) {
	        z.sqrTo(r,r2);
	        if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
	        else { var t = r; r = r2; r2 = t; }
	      }
	      return z.revert(r);
	    }

	    // (public) this^e % m, 0 <= e < 2^32
	    function bnModPowInt(e,m) {
	      var z;
	      if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
	      return this.exp(e,z);
	    }

	    // protected
	    BigInteger.prototype.copyTo = bnpCopyTo;
	    BigInteger.prototype.fromInt = bnpFromInt;
	    BigInteger.prototype.fromString = bnpFromString;
	    BigInteger.prototype.clamp = bnpClamp;
	    BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
	    BigInteger.prototype.drShiftTo = bnpDRShiftTo;
	    BigInteger.prototype.lShiftTo = bnpLShiftTo;
	    BigInteger.prototype.rShiftTo = bnpRShiftTo;
	    BigInteger.prototype.subTo = bnpSubTo;
	    BigInteger.prototype.multiplyTo = bnpMultiplyTo;
	    BigInteger.prototype.squareTo = bnpSquareTo;
	    BigInteger.prototype.divRemTo = bnpDivRemTo;
	    BigInteger.prototype.invDigit = bnpInvDigit;
	    BigInteger.prototype.isEven = bnpIsEven;
	    BigInteger.prototype.exp = bnpExp;

	    // public
	    BigInteger.prototype.toString = bnToString;
	    BigInteger.prototype.negate = bnNegate;
	    BigInteger.prototype.abs = bnAbs;
	    BigInteger.prototype.compareTo = bnCompareTo;
	    BigInteger.prototype.bitLength = bnBitLength;
	    BigInteger.prototype.mod = bnMod;
	    BigInteger.prototype.modPowInt = bnModPowInt;

	    // "constants"
	    BigInteger.ZERO = nbv(0);
	    BigInteger.ONE = nbv(1);

	    // Copyright (c) 2005-2009  Tom Wu
	    // All Rights Reserved.
	    // See "LICENSE" for details.

	    // Extended JavaScript BN functions, required for RSA private ops.

	    // Version 1.1: new BigInteger("0", 10) returns "proper" zero
	    // Version 1.2: square() API, isProbablePrime fix

	    // (public)
	    function bnClone() { var r = nbi(); this.copyTo(r); return r; }

	    // (public) return value as integer
	    function bnIntValue() {
	      if(this.s < 0) {
	        if(this.t == 1) return this[0]-this.DV;
	        else if(this.t == 0) return -1;
	      }
	      else if(this.t == 1) return this[0];
	      else if(this.t == 0) return 0;
	      // assumes 16 < DB < 32
	      return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
	    }

	    // (public) return value as byte
	    function bnByteValue() { return (this.t==0)?this.s:(this[0]<<24)>>24; }

	    // (public) return value as short (assumes DB>=16)
	    function bnShortValue() { return (this.t==0)?this.s:(this[0]<<16)>>16; }

	    // (protected) return x s.t. r^x < DV
	    function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

	    // (public) 0 if this == 0, 1 if this > 0
	    function bnSigNum() {
	      if(this.s < 0) return -1;
	      else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
	      else return 1;
	    }

	    // (protected) convert to radix string
	    function bnpToRadix(b) {
	      if(b == null) b = 10;
	      if(this.signum() == 0 || b < 2 || b > 36) return "0";
	      var cs = this.chunkSize(b);
	      var a = Math.pow(b,cs);
	      var d = nbv(a), y = nbi(), z = nbi(), r = "";
	      this.divRemTo(d,y,z);
	      while(y.signum() > 0) {
	        r = (a+z.intValue()).toString(b).substr(1) + r;
	        y.divRemTo(d,y,z);
	      }
	      return z.intValue().toString(b) + r;
	    }

	    // (protected) convert from radix string
	    function bnpFromRadix(s,b) {
	      this.fromInt(0);
	      if(b == null) b = 10;
	      var cs = this.chunkSize(b);
	      var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
	      for(var i = 0; i < s.length; ++i) {
	        var x = intAt(s,i);
	        if(x < 0) {
	          if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
	          continue;
	        }
	        w = b*w+x;
	        if(++j >= cs) {
	          this.dMultiply(d);
	          this.dAddOffset(w,0);
	          j = 0;
	          w = 0;
	        }
	      }
	      if(j > 0) {
	        this.dMultiply(Math.pow(b,j));
	        this.dAddOffset(w,0);
	      }
	      if(mi) BigInteger.ZERO.subTo(this,this);
	    }

	    // (protected) alternate constructor
	    function bnpFromNumber(a,b,c) {
	      if("number" == typeof b) {
	        // new BigInteger(int,int,RNG)
	        if(a < 2) this.fromInt(1);
	        else {
	          this.fromNumber(a,c);
	          if(!this.testBit(a-1))	// force MSB set
	            this.bitwiseTo(BigInteger.ONE.shiftLeft(a-1),op_or,this);
	          if(this.isEven()) this.dAddOffset(1,0); // force odd
	          while(!this.isProbablePrime(b)) {
	            this.dAddOffset(2,0);
	            if(this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a-1),this);
	          }
	        }
	      }
	      else {
	        // new BigInteger(int,RNG)
	        var x = new Array(), t = a&7;
	        x.length = (a>>3)+1;
	        b.nextBytes(x);
	        if(t > 0) x[0] &= ((1<<t)-1); else x[0] = 0;
	        this.fromString(x,256);
	      }
	    }

	    // (public) convert to bigendian byte array
	    function bnToByteArray() {
	      var i = this.t, r = new Array();
	      r[0] = this.s;
	      var p = this.DB-(i*this.DB)%8, d, k = 0;
	      if(i-- > 0) {
	        if(p < this.DB && (d = this[i]>>p) != (this.s&this.DM)>>p)
	          r[k++] = d|(this.s<<(this.DB-p));
	        while(i >= 0) {
	          if(p < 8) {
	            d = (this[i]&((1<<p)-1))<<(8-p);
	            d |= this[--i]>>(p+=this.DB-8);
	          }
	          else {
	            d = (this[i]>>(p-=8))&0xff;
	            if(p <= 0) { p += this.DB; --i; }
	          }
	          if((d&0x80) != 0) d |= -256;
	          if(k == 0 && (this.s&0x80) != (d&0x80)) ++k;
	          if(k > 0 || d != this.s) r[k++] = d;
	        }
	      }
	      return r;
	    }

	    function bnEquals(a) { return(this.compareTo(a)==0); }
	    function bnMin(a) { return (this.compareTo(a)<0)?this:a; }
	    function bnMax(a) { return (this.compareTo(a)>0)?this:a; }

	    // (protected) r = this op a (bitwise)
	    function bnpBitwiseTo(a,op,r) {
	      var i, f, m = Math.min(a.t,this.t);
	      for(i = 0; i < m; ++i) r[i] = op(this[i],a[i]);
	      if(a.t < this.t) {
	        f = a.s&this.DM;
	        for(i = m; i < this.t; ++i) r[i] = op(this[i],f);
	        r.t = this.t;
	      }
	      else {
	        f = this.s&this.DM;
	        for(i = m; i < a.t; ++i) r[i] = op(f,a[i]);
	        r.t = a.t;
	      }
	      r.s = op(this.s,a.s);
	      r.clamp();
	    }

	    // (public) this & a
	    function op_and(x,y) { return x&y; }
	    function bnAnd(a) { var r = nbi(); this.bitwiseTo(a,op_and,r); return r; }

	    // (public) this | a
	    function op_or(x,y) { return x|y; }
	    function bnOr(a) { var r = nbi(); this.bitwiseTo(a,op_or,r); return r; }

	    // (public) this ^ a
	    function op_xor(x,y) { return x^y; }
	    function bnXor(a) { var r = nbi(); this.bitwiseTo(a,op_xor,r); return r; }

	    // (public) this & ~a
	    function op_andnot(x,y) { return x&~y; }
	    function bnAndNot(a) { var r = nbi(); this.bitwiseTo(a,op_andnot,r); return r; }

	    // (public) ~this
	    function bnNot() {
	      var r = nbi();
	      for(var i = 0; i < this.t; ++i) r[i] = this.DM&~this[i];
	      r.t = this.t;
	      r.s = ~this.s;
	      return r;
	    }

	    // (public) this << n
	    function bnShiftLeft(n) {
	      var r = nbi();
	      if(n < 0) this.rShiftTo(-n,r); else this.lShiftTo(n,r);
	      return r;
	    }

	    // (public) this >> n
	    function bnShiftRight(n) {
	      var r = nbi();
	      if(n < 0) this.lShiftTo(-n,r); else this.rShiftTo(n,r);
	      return r;
	    }

	    // return index of lowest 1-bit in x, x < 2^31
	    function lbit(x) {
	      if(x == 0) return -1;
	      var r = 0;
	      if((x&0xffff) == 0) { x >>= 16; r += 16; }
	      if((x&0xff) == 0) { x >>= 8; r += 8; }
	      if((x&0xf) == 0) { x >>= 4; r += 4; }
	      if((x&3) == 0) { x >>= 2; r += 2; }
	      if((x&1) == 0) ++r;
	      return r;
	    }

	    // (public) returns index of lowest 1-bit (or -1 if none)
	    function bnGetLowestSetBit() {
	      for(var i = 0; i < this.t; ++i)
	        if(this[i] != 0) return i*this.DB+lbit(this[i]);
	      if(this.s < 0) return this.t*this.DB;
	      return -1;
	    }

	    // return number of 1 bits in x
	    function cbit(x) {
	      var r = 0;
	      while(x != 0) { x &= x-1; ++r; }
	      return r;
	    }

	    // (public) return number of set bits
	    function bnBitCount() {
	      var r = 0, x = this.s&this.DM;
	      for(var i = 0; i < this.t; ++i) r += cbit(this[i]^x);
	      return r;
	    }

	    // (public) true iff nth bit is set
	    function bnTestBit(n) {
	      var j = Math.floor(n/this.DB);
	      if(j >= this.t) return(this.s!=0);
	      return((this[j]&(1<<(n%this.DB)))!=0);
	    }

	    // (protected) this op (1<<n)
	    function bnpChangeBit(n,op) {
	      var r = BigInteger.ONE.shiftLeft(n);
	      this.bitwiseTo(r,op,r);
	      return r;
	    }

	    // (public) this | (1<<n)
	    function bnSetBit(n) { return this.changeBit(n,op_or); }

	    // (public) this & ~(1<<n)
	    function bnClearBit(n) { return this.changeBit(n,op_andnot); }

	    // (public) this ^ (1<<n)
	    function bnFlipBit(n) { return this.changeBit(n,op_xor); }

	    // (protected) r = this + a
	    function bnpAddTo(a,r) {
	      var i = 0, c = 0, m = Math.min(a.t,this.t);
	      while(i < m) {
	        c += this[i]+a[i];
	        r[i++] = c&this.DM;
	        c >>= this.DB;
	      }
	      if(a.t < this.t) {
	        c += a.s;
	        while(i < this.t) {
	          c += this[i];
	          r[i++] = c&this.DM;
	          c >>= this.DB;
	        }
	        c += this.s;
	      }
	      else {
	        c += this.s;
	        while(i < a.t) {
	          c += a[i];
	          r[i++] = c&this.DM;
	          c >>= this.DB;
	        }
	        c += a.s;
	      }
	      r.s = (c<0)?-1:0;
	      if(c > 0) r[i++] = c;
	      else if(c < -1) r[i++] = this.DV+c;
	      r.t = i;
	      r.clamp();
	    }

	    // (public) this + a
	    function bnAdd(a) { var r = nbi(); this.addTo(a,r); return r; }

	    // (public) this - a
	    function bnSubtract(a) { var r = nbi(); this.subTo(a,r); return r; }

	    // (public) this * a
	    function bnMultiply(a) { var r = nbi(); this.multiplyTo(a,r); return r; }

	    // (public) this^2
	    function bnSquare() { var r = nbi(); this.squareTo(r); return r; }

	    // (public) this / a
	    function bnDivide(a) { var r = nbi(); this.divRemTo(a,r,null); return r; }

	    // (public) this % a
	    function bnRemainder(a) { var r = nbi(); this.divRemTo(a,null,r); return r; }

	    // (public) [this/a,this%a]
	    function bnDivideAndRemainder(a) {
	      var q = nbi(), r = nbi();
	      this.divRemTo(a,q,r);
	      return new Array(q,r);
	    }

	    // (protected) this *= n, this >= 0, 1 < n < DV
	    function bnpDMultiply(n) {
	      this[this.t] = this.am(0,n-1,this,0,0,this.t);
	      ++this.t;
	      this.clamp();
	    }

	    // (protected) this += n << w words, this >= 0
	    function bnpDAddOffset(n,w) {
	      if(n == 0) return;
	      while(this.t <= w) this[this.t++] = 0;
	      this[w] += n;
	      while(this[w] >= this.DV) {
	        this[w] -= this.DV;
	        if(++w >= this.t) this[this.t++] = 0;
	        ++this[w];
	      }
	    }

	    // A "null" reducer
	    function NullExp() {}
	    function nNop(x) { return x; }
	    function nMulTo(x,y,r) { x.multiplyTo(y,r); }
	    function nSqrTo(x,r) { x.squareTo(r); }

	    NullExp.prototype.convert = nNop;
	    NullExp.prototype.revert = nNop;
	    NullExp.prototype.mulTo = nMulTo;
	    NullExp.prototype.sqrTo = nSqrTo;

	    // (public) this^e
	    function bnPow(e) { return this.exp(e,new NullExp()); }

	    // (protected) r = lower n words of "this * a", a.t <= n
	    // "this" should be the larger one if appropriate.
	    function bnpMultiplyLowerTo(a,n,r) {
	      var i = Math.min(this.t+a.t,n);
	      r.s = 0; // assumes a,this >= 0
	      r.t = i;
	      while(i > 0) r[--i] = 0;
	      var j;
	      for(j = r.t-this.t; i < j; ++i) r[i+this.t] = this.am(0,a[i],r,i,0,this.t);
	      for(j = Math.min(a.t,n); i < j; ++i) this.am(0,a[i],r,i,0,n-i);
	      r.clamp();
	    }

	    // (protected) r = "this * a" without lower n words, n > 0
	    // "this" should be the larger one if appropriate.
	    function bnpMultiplyUpperTo(a,n,r) {
	      --n;
	      var i = r.t = this.t+a.t-n;
	      r.s = 0; // assumes a,this >= 0
	      while(--i >= 0) r[i] = 0;
	      for(i = Math.max(n-this.t,0); i < a.t; ++i)
	        r[this.t+i-n] = this.am(n-i,a[i],r,0,0,this.t+i-n);
	      r.clamp();
	      r.drShiftTo(1,r);
	    }

	    // Barrett modular reduction
	    function Barrett(m) {
	      // setup Barrett
	      this.r2 = nbi();
	      this.q3 = nbi();
	      BigInteger.ONE.dlShiftTo(2*m.t,this.r2);
	      this.mu = this.r2.divide(m);
	      this.m = m;
	    }

	    function barrettConvert(x) {
	      if(x.s < 0 || x.t > 2*this.m.t) return x.mod(this.m);
	      else if(x.compareTo(this.m) < 0) return x;
	      else { var r = nbi(); x.copyTo(r); this.reduce(r); return r; }
	    }

	    function barrettRevert(x) { return x; }

	    // x = x mod m (HAC 14.42)
	    function barrettReduce(x) {
	      x.drShiftTo(this.m.t-1,this.r2);
	      if(x.t > this.m.t+1) { x.t = this.m.t+1; x.clamp(); }
	      this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3);
	      this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);
	      while(x.compareTo(this.r2) < 0) x.dAddOffset(1,this.m.t+1);
	      x.subTo(this.r2,x);
	      while(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
	    }

	    // r = x^2 mod m; x != r
	    function barrettSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

	    // r = x*y mod m; x,y != r
	    function barrettMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

	    Barrett.prototype.convert = barrettConvert;
	    Barrett.prototype.revert = barrettRevert;
	    Barrett.prototype.reduce = barrettReduce;
	    Barrett.prototype.mulTo = barrettMulTo;
	    Barrett.prototype.sqrTo = barrettSqrTo;

	    // (public) this^e % m (HAC 14.85)
	    function bnModPow(e,m) {
	      var i = e.bitLength(), k, r = nbv(1), z;
	      if(i <= 0) return r;
	      else if(i < 18) k = 1;
	      else if(i < 48) k = 3;
	      else if(i < 144) k = 4;
	      else if(i < 768) k = 5;
	      else k = 6;
	      if(i < 8)
	        z = new Classic(m);
	      else if(m.isEven())
	        z = new Barrett(m);
	      else
	        z = new Montgomery(m);

	      // precomputation
	      var g = new Array(), n = 3, k1 = k-1, km = (1<<k)-1;
	      g[1] = z.convert(this);
	      if(k > 1) {
	        var g2 = nbi();
	        z.sqrTo(g[1],g2);
	        while(n <= km) {
	          g[n] = nbi();
	          z.mulTo(g2,g[n-2],g[n]);
	          n += 2;
	        }
	      }

	      var j = e.t-1, w, is1 = true, r2 = nbi(), t;
	      i = nbits(e[j])-1;
	      while(j >= 0) {
	        if(i >= k1) w = (e[j]>>(i-k1))&km;
	        else {
	          w = (e[j]&((1<<(i+1))-1))<<(k1-i);
	          if(j > 0) w |= e[j-1]>>(this.DB+i-k1);
	        }

	        n = k;
	        while((w&1) == 0) { w >>= 1; --n; }
	        if((i -= n) < 0) { i += this.DB; --j; }
	        if(is1) {	// ret == 1, don't bother squaring or multiplying it
	          g[w].copyTo(r);
	          is1 = false;
	        }
	        else {
	          while(n > 1) { z.sqrTo(r,r2); z.sqrTo(r2,r); n -= 2; }
	          if(n > 0) z.sqrTo(r,r2); else { t = r; r = r2; r2 = t; }
	          z.mulTo(r2,g[w],r);
	        }

	        while(j >= 0 && (e[j]&(1<<i)) == 0) {
	          z.sqrTo(r,r2); t = r; r = r2; r2 = t;
	          if(--i < 0) { i = this.DB-1; --j; }
	        }
	      }
	      return z.revert(r);
	    }

	    // (public) gcd(this,a) (HAC 14.54)
	    function bnGCD(a) {
	      var x = (this.s<0)?this.negate():this.clone();
	      var y = (a.s<0)?a.negate():a.clone();
	      if(x.compareTo(y) < 0) { var t = x; x = y; y = t; }
	      var i = x.getLowestSetBit(), g = y.getLowestSetBit();
	      if(g < 0) return x;
	      if(i < g) g = i;
	      if(g > 0) {
	        x.rShiftTo(g,x);
	        y.rShiftTo(g,y);
	      }
	      while(x.signum() > 0) {
	        if((i = x.getLowestSetBit()) > 0) x.rShiftTo(i,x);
	        if((i = y.getLowestSetBit()) > 0) y.rShiftTo(i,y);
	        if(x.compareTo(y) >= 0) {
	          x.subTo(y,x);
	          x.rShiftTo(1,x);
	        }
	        else {
	          y.subTo(x,y);
	          y.rShiftTo(1,y);
	        }
	      }
	      if(g > 0) y.lShiftTo(g,y);
	      return y;
	    }

	    // (protected) this % n, n < 2^26
	    function bnpModInt(n) {
	      if(n <= 0) return 0;
	      var d = this.DV%n, r = (this.s<0)?n-1:0;
	      if(this.t > 0)
	        if(d == 0) r = this[0]%n;
	        else for(var i = this.t-1; i >= 0; --i) r = (d*r+this[i])%n;
	      return r;
	    }

	    // (public) 1/this % m (HAC 14.61)
	    function bnModInverse(m) {
	      var ac = m.isEven();
	      if((this.isEven() && ac) || m.signum() == 0) return BigInteger.ZERO;
	      var u = m.clone(), v = this.clone();
	      var a = nbv(1), b = nbv(0), c = nbv(0), d = nbv(1);
	      while(u.signum() != 0) {
	        while(u.isEven()) {
	          u.rShiftTo(1,u);
	          if(ac) {
	            if(!a.isEven() || !b.isEven()) { a.addTo(this,a); b.subTo(m,b); }
	            a.rShiftTo(1,a);
	          }
	          else if(!b.isEven()) b.subTo(m,b);
	          b.rShiftTo(1,b);
	        }
	        while(v.isEven()) {
	          v.rShiftTo(1,v);
	          if(ac) {
	            if(!c.isEven() || !d.isEven()) { c.addTo(this,c); d.subTo(m,d); }
	            c.rShiftTo(1,c);
	          }
	          else if(!d.isEven()) d.subTo(m,d);
	          d.rShiftTo(1,d);
	        }
	        if(u.compareTo(v) >= 0) {
	          u.subTo(v,u);
	          if(ac) a.subTo(c,a);
	          b.subTo(d,b);
	        }
	        else {
	          v.subTo(u,v);
	          if(ac) c.subTo(a,c);
	          d.subTo(b,d);
	        }
	      }
	      if(v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;
	      if(d.compareTo(m) >= 0) return d.subtract(m);
	      if(d.signum() < 0) d.addTo(m,d); else return d;
	      if(d.signum() < 0) return d.add(m); else return d;
	    }

	    var lowprimes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997];
	    var lplim = (1<<26)/lowprimes[lowprimes.length-1];

	    // (public) test primality with certainty >= 1-.5^t
	    function bnIsProbablePrime(t) {
	      var i, x = this.abs();
	      if(x.t == 1 && x[0] <= lowprimes[lowprimes.length-1]) {
	        for(i = 0; i < lowprimes.length; ++i)
	          if(x[0] == lowprimes[i]) return true;
	        return false;
	      }
	      if(x.isEven()) return false;
	      i = 1;
	      while(i < lowprimes.length) {
	        var m = lowprimes[i], j = i+1;
	        while(j < lowprimes.length && m < lplim) m *= lowprimes[j++];
	        m = x.modInt(m);
	        while(i < j) if(m%lowprimes[i++] == 0) return false;
	      }
	      return x.millerRabin(t);
	    }

	    // (protected) true if probably prime (HAC 4.24, Miller-Rabin)
	    function bnpMillerRabin(t) {
	      var n1 = this.subtract(BigInteger.ONE);
	      var k = n1.getLowestSetBit();
	      if(k <= 0) return false;
	      var r = n1.shiftRight(k);
	      t = (t+1)>>1;
	      if(t > lowprimes.length) t = lowprimes.length;
	      var a = nbi();
	      for(var i = 0; i < t; ++i) {
	        //Pick bases at random, instead of starting at 2
	        a.fromInt(lowprimes[Math.floor(Math.random()*lowprimes.length)]);
	        var y = a.modPow(r,this);
	        if(y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {
	          var j = 1;
	          while(j++ < k && y.compareTo(n1) != 0) {
	            y = y.modPowInt(2,this);
	            if(y.compareTo(BigInteger.ONE) == 0) return false;
	          }
	          if(y.compareTo(n1) != 0) return false;
	        }
	      }
	      return true;
	    }

	    // protected
	    BigInteger.prototype.chunkSize = bnpChunkSize;
	    BigInteger.prototype.toRadix = bnpToRadix;
	    BigInteger.prototype.fromRadix = bnpFromRadix;
	    BigInteger.prototype.fromNumber = bnpFromNumber;
	    BigInteger.prototype.bitwiseTo = bnpBitwiseTo;
	    BigInteger.prototype.changeBit = bnpChangeBit;
	    BigInteger.prototype.addTo = bnpAddTo;
	    BigInteger.prototype.dMultiply = bnpDMultiply;
	    BigInteger.prototype.dAddOffset = bnpDAddOffset;
	    BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;
	    BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;
	    BigInteger.prototype.modInt = bnpModInt;
	    BigInteger.prototype.millerRabin = bnpMillerRabin;

	    // public
	    BigInteger.prototype.clone = bnClone;
	    BigInteger.prototype.intValue = bnIntValue;
	    BigInteger.prototype.byteValue = bnByteValue;
	    BigInteger.prototype.shortValue = bnShortValue;
	    BigInteger.prototype.signum = bnSigNum;
	    BigInteger.prototype.toByteArray = bnToByteArray;
	    BigInteger.prototype.equals = bnEquals;
	    BigInteger.prototype.min = bnMin;
	    BigInteger.prototype.max = bnMax;
	    BigInteger.prototype.and = bnAnd;
	    BigInteger.prototype.or = bnOr;
	    BigInteger.prototype.xor = bnXor;
	    BigInteger.prototype.andNot = bnAndNot;
	    BigInteger.prototype.not = bnNot;
	    BigInteger.prototype.shiftLeft = bnShiftLeft;
	    BigInteger.prototype.shiftRight = bnShiftRight;
	    BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;
	    BigInteger.prototype.bitCount = bnBitCount;
	    BigInteger.prototype.testBit = bnTestBit;
	    BigInteger.prototype.setBit = bnSetBit;
	    BigInteger.prototype.clearBit = bnClearBit;
	    BigInteger.prototype.flipBit = bnFlipBit;
	    BigInteger.prototype.add = bnAdd;
	    BigInteger.prototype.subtract = bnSubtract;
	    BigInteger.prototype.multiply = bnMultiply;
	    BigInteger.prototype.divide = bnDivide;
	    BigInteger.prototype.remainder = bnRemainder;
	    BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;
	    BigInteger.prototype.modPow = bnModPow;
	    BigInteger.prototype.modInverse = bnModInverse;
	    BigInteger.prototype.pow = bnPow;
	    BigInteger.prototype.gcd = bnGCD;
	    BigInteger.prototype.isProbablePrime = bnIsProbablePrime;

	    // JSBN-specific extension
	    BigInteger.prototype.square = bnSquare;

	    // Expose the Barrett function
	    BigInteger.prototype.Barrett = Barrett;

	    // BigInteger interfaces not implemented in jsbn:

	    // BigInteger(int signum, byte[] magnitude)
	    // double doubleValue()
	    // float floatValue()
	    // int hashCode()
	    // long longValue()
	    // static BigInteger valueOf(long val)

		// Random number generator - requires a PRNG backend, e.g. prng4.js

		// For best results, put code like
		// <body onClick='rng_seed_time();' onKeyPress='rng_seed_time();'>
		// in your main HTML document.

		var rng_state;
		var rng_pool;
		var rng_pptr;

		// Mix in a 32-bit integer into the pool
		function rng_seed_int(x) {
		  rng_pool[rng_pptr++] ^= x & 255;
		  rng_pool[rng_pptr++] ^= (x >> 8) & 255;
		  rng_pool[rng_pptr++] ^= (x >> 16) & 255;
		  rng_pool[rng_pptr++] ^= (x >> 24) & 255;
		  if(rng_pptr >= rng_psize) rng_pptr -= rng_psize;
		}

		// Mix in the current time (w/milliseconds) into the pool
		function rng_seed_time() {
		  rng_seed_int(new Date().getTime());
		}

		// Initialize the pool with junk if needed.
		if(rng_pool == null) {
		  rng_pool = new Array();
		  rng_pptr = 0;
		  var t;
		  if(typeof window !== "undefined" && window.crypto) {
			if (window.crypto.getRandomValues) {
			  // Use webcrypto if available
			  var ua = new Uint8Array(32);
			  window.crypto.getRandomValues(ua);
			  for(t = 0; t < 32; ++t)
				rng_pool[rng_pptr++] = ua[t];
			}
			else if(navigator.appName == "Netscape" && navigator.appVersion < "5") {
			  // Extract entropy (256 bits) from NS4 RNG if available
			  var z = window.crypto.random(32);
			  for(t = 0; t < z.length; ++t)
				rng_pool[rng_pptr++] = z.charCodeAt(t) & 255;
			}
		  }
		  while(rng_pptr < rng_psize) {  // extract some randomness from Math.random()
			t = Math.floor(65536 * Math.random());
			rng_pool[rng_pptr++] = t >>> 8;
			rng_pool[rng_pptr++] = t & 255;
		  }
		  rng_pptr = 0;
		  rng_seed_time();
		  //rng_seed_int(window.screenX);
		  //rng_seed_int(window.screenY);
		}

		function rng_get_byte() {
		  if(rng_state == null) {
			rng_seed_time();
			rng_state = prng_newstate();
			rng_state.init(rng_pool);
			for(rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr)
			  rng_pool[rng_pptr] = 0;
			rng_pptr = 0;
			//rng_pool = null;
		  }
		  // TODO: allow reseeding after first request
		  return rng_state.next();
		}

		function rng_get_bytes(ba) {
		  var i;
		  for(i = 0; i < ba.length; ++i) ba[i] = rng_get_byte();
		}

		function SecureRandom() {}

		SecureRandom.prototype.nextBytes = rng_get_bytes;

		// prng4.js - uses Arcfour as a PRNG

		function Arcfour() {
		  this.i = 0;
		  this.j = 0;
		  this.S = new Array();
		}

		// Initialize arcfour context from key, an array of ints, each from [0..255]
		function ARC4init(key) {
		  var i, j, t;
		  for(i = 0; i < 256; ++i)
			this.S[i] = i;
		  j = 0;
		  for(i = 0; i < 256; ++i) {
			j = (j + this.S[i] + key[i % key.length]) & 255;
			t = this.S[i];
			this.S[i] = this.S[j];
			this.S[j] = t;
		  }
		  this.i = 0;
		  this.j = 0;
		}

		function ARC4next() {
		  var t;
		  this.i = (this.i + 1) & 255;
		  this.j = (this.j + this.S[this.i]) & 255;
		  t = this.S[this.i];
		  this.S[this.i] = this.S[this.j];
		  this.S[this.j] = t;
		  return this.S[(t + this.S[this.i]) & 255];
		}

		Arcfour.prototype.init = ARC4init;
		Arcfour.prototype.next = ARC4next;

		// Plug in your RNG constructor here
		function prng_newstate() {
		  return new Arcfour();
		}

		// Pool size must be a multiple of 4 and greater than 32.
		// An array of bytes the size of the pool will be passed to init()
		var rng_psize = 256;

	  BigInteger.SecureRandom = SecureRandom;
	  BigInteger.BigInteger = BigInteger;
	  {
	    module.exports = BigInteger;
	  }

	}).call(commonjsGlobal);
	});

	// Basic Javascript Elliptic Curve implementation
	// Ported loosely from BouncyCastle's Java EC code
	// Only Fp curves implemented for now

	// Requires jsbn.js and jsbn2.js
	var BigInteger = jsbn$2.BigInteger;
	var Barrett = BigInteger.prototype.Barrett;

	// ----------------
	// ECFieldElementFp

	// constructor
	function ECFieldElementFp(q,x) {
	    this.x = x;
	    // TODO if(x.compareTo(q) >= 0) error
	    this.q = q;
	}

	function feFpEquals(other) {
	    if(other == this) return true;
	    return (this.q.equals(other.q) && this.x.equals(other.x));
	}

	function feFpToBigInteger() {
	    return this.x;
	}

	function feFpNegate() {
	    return new ECFieldElementFp(this.q, this.x.negate().mod(this.q));
	}

	function feFpAdd(b) {
	    return new ECFieldElementFp(this.q, this.x.add(b.toBigInteger()).mod(this.q));
	}

	function feFpSubtract(b) {
	    return new ECFieldElementFp(this.q, this.x.subtract(b.toBigInteger()).mod(this.q));
	}

	function feFpMultiply(b) {
	    return new ECFieldElementFp(this.q, this.x.multiply(b.toBigInteger()).mod(this.q));
	}

	function feFpSquare() {
	    return new ECFieldElementFp(this.q, this.x.square().mod(this.q));
	}

	function feFpDivide(b) {
	    return new ECFieldElementFp(this.q, this.x.multiply(b.toBigInteger().modInverse(this.q)).mod(this.q));
	}

	ECFieldElementFp.prototype.equals = feFpEquals;
	ECFieldElementFp.prototype.toBigInteger = feFpToBigInteger;
	ECFieldElementFp.prototype.negate = feFpNegate;
	ECFieldElementFp.prototype.add = feFpAdd;
	ECFieldElementFp.prototype.subtract = feFpSubtract;
	ECFieldElementFp.prototype.multiply = feFpMultiply;
	ECFieldElementFp.prototype.square = feFpSquare;
	ECFieldElementFp.prototype.divide = feFpDivide;

	// ----------------
	// ECPointFp

	// constructor
	function ECPointFp(curve,x,y,z) {
	    this.curve = curve;
	    this.x = x;
	    this.y = y;
	    // Projective coordinates: either zinv == null or z * zinv == 1
	    // z and zinv are just BigIntegers, not fieldElements
	    if(z == null) {
	      this.z = BigInteger.ONE;
	    }
	    else {
	      this.z = z;
	    }
	    this.zinv = null;
	    //TODO: compression flag
	}

	function pointFpGetX() {
	    if(this.zinv == null) {
	      this.zinv = this.z.modInverse(this.curve.q);
	    }
	    var r = this.x.toBigInteger().multiply(this.zinv);
	    this.curve.reduce(r);
	    return this.curve.fromBigInteger(r);
	}

	function pointFpGetY() {
	    if(this.zinv == null) {
	      this.zinv = this.z.modInverse(this.curve.q);
	    }
	    var r = this.y.toBigInteger().multiply(this.zinv);
	    this.curve.reduce(r);
	    return this.curve.fromBigInteger(r);
	}

	function pointFpEquals(other) {
	    if(other == this) return true;
	    if(this.isInfinity()) return other.isInfinity();
	    if(other.isInfinity()) return this.isInfinity();
	    var u, v;
	    // u = Y2 * Z1 - Y1 * Z2
	    u = other.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(other.z)).mod(this.curve.q);
	    if(!u.equals(BigInteger.ZERO)) return false;
	    // v = X2 * Z1 - X1 * Z2
	    v = other.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(other.z)).mod(this.curve.q);
	    return v.equals(BigInteger.ZERO);
	}

	function pointFpIsInfinity() {
	    if((this.x == null) && (this.y == null)) return true;
	    return this.z.equals(BigInteger.ZERO) && !this.y.toBigInteger().equals(BigInteger.ZERO);
	}

	function pointFpNegate() {
	    return new ECPointFp(this.curve, this.x, this.y.negate(), this.z);
	}

	function pointFpAdd(b) {
	    if(this.isInfinity()) return b;
	    if(b.isInfinity()) return this;

	    // u = Y2 * Z1 - Y1 * Z2
	    var u = b.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(b.z)).mod(this.curve.q);
	    // v = X2 * Z1 - X1 * Z2
	    var v = b.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(b.z)).mod(this.curve.q);

	    if(BigInteger.ZERO.equals(v)) {
	        if(BigInteger.ZERO.equals(u)) {
	            return this.twice(); // this == b, so double
	        }
		return this.curve.getInfinity(); // this = -b, so infinity
	    }

	    var THREE = new BigInteger("3");
	    var x1 = this.x.toBigInteger();
	    var y1 = this.y.toBigInteger();
	    b.x.toBigInteger();
	    b.y.toBigInteger();

	    var v2 = v.square();
	    var v3 = v2.multiply(v);
	    var x1v2 = x1.multiply(v2);
	    var zu2 = u.square().multiply(this.z);

	    // x3 = v * (z2 * (z1 * u^2 - 2 * x1 * v^2) - v^3)
	    var x3 = zu2.subtract(x1v2.shiftLeft(1)).multiply(b.z).subtract(v3).multiply(v).mod(this.curve.q);
	    // y3 = z2 * (3 * x1 * u * v^2 - y1 * v^3 - z1 * u^3) + u * v^3
	    var y3 = x1v2.multiply(THREE).multiply(u).subtract(y1.multiply(v3)).subtract(zu2.multiply(u)).multiply(b.z).add(u.multiply(v3)).mod(this.curve.q);
	    // z3 = v^3 * z1 * z2
	    var z3 = v3.multiply(this.z).multiply(b.z).mod(this.curve.q);

	    return new ECPointFp(this.curve, this.curve.fromBigInteger(x3), this.curve.fromBigInteger(y3), z3);
	}

	function pointFpTwice() {
	    if(this.isInfinity()) return this;
	    if(this.y.toBigInteger().signum() == 0) return this.curve.getInfinity();

	    // TODO: optimized handling of constants
	    var THREE = new BigInteger("3");
	    var x1 = this.x.toBigInteger();
	    var y1 = this.y.toBigInteger();

	    var y1z1 = y1.multiply(this.z);
	    var y1sqz1 = y1z1.multiply(y1).mod(this.curve.q);
	    var a = this.curve.a.toBigInteger();

	    // w = 3 * x1^2 + a * z1^2
	    var w = x1.square().multiply(THREE);
	    if(!BigInteger.ZERO.equals(a)) {
	      w = w.add(this.z.square().multiply(a));
	    }
	    w = w.mod(this.curve.q);
	    //this.curve.reduce(w);
	    // x3 = 2 * y1 * z1 * (w^2 - 8 * x1 * y1^2 * z1)
	    var x3 = w.square().subtract(x1.shiftLeft(3).multiply(y1sqz1)).shiftLeft(1).multiply(y1z1).mod(this.curve.q);
	    // y3 = 4 * y1^2 * z1 * (3 * w * x1 - 2 * y1^2 * z1) - w^3
	    var y3 = w.multiply(THREE).multiply(x1).subtract(y1sqz1.shiftLeft(1)).shiftLeft(2).multiply(y1sqz1).subtract(w.square().multiply(w)).mod(this.curve.q);
	    // z3 = 8 * (y1 * z1)^3
	    var z3 = y1z1.square().multiply(y1z1).shiftLeft(3).mod(this.curve.q);

	    return new ECPointFp(this.curve, this.curve.fromBigInteger(x3), this.curve.fromBigInteger(y3), z3);
	}

	// Simple NAF (Non-Adjacent Form) multiplication algorithm
	// TODO: modularize the multiplication algorithm
	function pointFpMultiply(k) {
	    if(this.isInfinity()) return this;
	    if(k.signum() == 0) return this.curve.getInfinity();

	    var e = k;
	    var h = e.multiply(new BigInteger("3"));

	    var neg = this.negate();
	    var R = this;

	    var i;
	    for(i = h.bitLength() - 2; i > 0; --i) {
		R = R.twice();

		var hBit = h.testBit(i);
		var eBit = e.testBit(i);

		if (hBit != eBit) {
		    R = R.add(hBit ? this : neg);
		}
	    }

	    return R;
	}

	// Compute this*j + x*k (simultaneous multiplication)
	function pointFpMultiplyTwo(j,x,k) {
	  var i;
	  if(j.bitLength() > k.bitLength())
	    i = j.bitLength() - 1;
	  else
	    i = k.bitLength() - 1;

	  var R = this.curve.getInfinity();
	  var both = this.add(x);
	  while(i >= 0) {
	    R = R.twice();
	    if(j.testBit(i)) {
	      if(k.testBit(i)) {
	        R = R.add(both);
	      }
	      else {
	        R = R.add(this);
	      }
	    }
	    else {
	      if(k.testBit(i)) {
	        R = R.add(x);
	      }
	    }
	    --i;
	  }

	  return R;
	}

	ECPointFp.prototype.getX = pointFpGetX;
	ECPointFp.prototype.getY = pointFpGetY;
	ECPointFp.prototype.equals = pointFpEquals;
	ECPointFp.prototype.isInfinity = pointFpIsInfinity;
	ECPointFp.prototype.negate = pointFpNegate;
	ECPointFp.prototype.add = pointFpAdd;
	ECPointFp.prototype.twice = pointFpTwice;
	ECPointFp.prototype.multiply = pointFpMultiply;
	ECPointFp.prototype.multiplyTwo = pointFpMultiplyTwo;

	// ----------------
	// ECCurveFp

	// constructor
	function ECCurveFp(q,a,b) {
	    this.q = q;
	    this.a = this.fromBigInteger(a);
	    this.b = this.fromBigInteger(b);
	    this.infinity = new ECPointFp(this, null, null);
	    this.reducer = new Barrett(this.q);
	}

	function curveFpGetQ() {
	    return this.q;
	}

	function curveFpGetA() {
	    return this.a;
	}

	function curveFpGetB() {
	    return this.b;
	}

	function curveFpEquals(other) {
	    if(other == this) return true;
	    return(this.q.equals(other.q) && this.a.equals(other.a) && this.b.equals(other.b));
	}

	function curveFpGetInfinity() {
	    return this.infinity;
	}

	function curveFpFromBigInteger(x) {
	    return new ECFieldElementFp(this.q, x);
	}

	function curveReduce(x) {
	    this.reducer.reduce(x);
	}

	function curveFpEncodePointHex(p) {
		if (p.isInfinity()) return "00";
		var xHex = p.getX().toBigInteger().toString(16);
		var yHex = p.getY().toBigInteger().toString(16);
		var oLen = this.getQ().toString(16).length;
		if ((oLen % 2) != 0) oLen++;
		while (xHex.length < oLen) {
			xHex = "0" + xHex;
		}
		while (yHex.length < oLen) {
			yHex = "0" + yHex;
		}
		return "04" + xHex + yHex;
	}

	ECCurveFp.prototype.getQ = curveFpGetQ;
	ECCurveFp.prototype.getA = curveFpGetA;
	ECCurveFp.prototype.getB = curveFpGetB;
	ECCurveFp.prototype.equals = curveFpEquals;
	ECCurveFp.prototype.getInfinity = curveFpGetInfinity;
	ECCurveFp.prototype.fromBigInteger = curveFpFromBigInteger;
	ECCurveFp.prototype.reduce = curveReduce;
	//ECCurveFp.prototype.decodePointHex = curveFpDecodePointHex;
	ECCurveFp.prototype.encodePointHex = curveFpEncodePointHex;

	// from: https://github.com/kaielvin/jsbn-ec-point-compression
	ECCurveFp.prototype.decodePointHex = function(s)
	{
		var yIsEven;
	    switch(parseInt(s.substr(0,2), 16)) { // first byte
	    case 0:
		return this.infinity;
	    case 2:
		yIsEven = false;
	    case 3:
		if(yIsEven == undefined) yIsEven = true;
		var len = s.length - 2;
		var xHex = s.substr(2, len);
		var x = this.fromBigInteger(new BigInteger(xHex,16));
		var alpha = x.multiply(x.square().add(this.getA())).add(this.getB());
		var beta = alpha.sqrt();

	    if (beta == null) throw "Invalid point compression";

	    var betaValue = beta.toBigInteger();
	    if (betaValue.testBit(0) != yIsEven)
	    {
	        // Use the other root
	        beta = this.fromBigInteger(this.getQ().subtract(betaValue));
	    }
	    return new ECPointFp(this,x,beta);
	    case 4:
	    case 6:
	    case 7:
		var len = (s.length - 2) / 2;
		var xHex = s.substr(2, len);
		var yHex = s.substr(len+2, len);

		return new ECPointFp(this,
				     this.fromBigInteger(new BigInteger(xHex, 16)),
				     this.fromBigInteger(new BigInteger(yHex, 16)));

	    default: // unsupported
		return null;
	    }
	};
	ECCurveFp.prototype.encodeCompressedPointHex = function(p)
	{
		if (p.isInfinity()) return "00";
		var xHex = p.getX().toBigInteger().toString(16);
		var oLen = this.getQ().toString(16).length;
		if ((oLen % 2) != 0) oLen++;
		while (xHex.length < oLen)
			xHex = "0" + xHex;
		var yPrefix;
		if(p.getY().toBigInteger().isEven()) yPrefix = "02";
		else                                 yPrefix = "03";

		return yPrefix + xHex;
	};


	ECFieldElementFp.prototype.getR = function()
	{
		if(this.r != undefined) return this.r;

	    this.r = null;
	    var bitLength = this.q.bitLength();
	    if (bitLength > 128)
	    {
	        var firstWord = this.q.shiftRight(bitLength - 64);
	        if (firstWord.intValue() == -1)
	        {
	            this.r = BigInteger.ONE.shiftLeft(bitLength).subtract(this.q);
	        }
	    }
	    return this.r;
	};
	ECFieldElementFp.prototype.modMult = function(x1,x2)
	{
	    return this.modReduce(x1.multiply(x2));
	};
	ECFieldElementFp.prototype.modReduce = function(x)
	{
	    if (this.getR() != null)
	    {
	        var qLen = q.bitLength();
	        while (x.bitLength() > (qLen + 1))
	        {
	            var u = x.shiftRight(qLen);
	            var v = x.subtract(u.shiftLeft(qLen));
	            if (!this.getR().equals(BigInteger.ONE))
	            {
	                u = u.multiply(this.getR());
	            }
	            x = u.add(v); 
	        }
	        while (x.compareTo(q) >= 0)
	        {
	            x = x.subtract(q);
	        }
	    }
	    else
	    {
	        x = x.mod(q);
	    }
	    return x;
	};
	ECFieldElementFp.prototype.sqrt = function()
	{
	    if (!this.q.testBit(0)) throw "unsupported";

	    // p mod 4 == 3
	    if (this.q.testBit(1))
	    {
	    	var z = new ECFieldElementFp(this.q,this.x.modPow(this.q.shiftRight(2).add(BigInteger.ONE),this.q));
	    	return z.square().equals(this) ? z : null;
	    }

	    // p mod 4 == 1
	    var qMinusOne = this.q.subtract(BigInteger.ONE);

	    var legendreExponent = qMinusOne.shiftRight(1);
	    if (!(this.x.modPow(legendreExponent, this.q).equals(BigInteger.ONE)))
	    {
	        return null;
	    }

	    var u = qMinusOne.shiftRight(2);
	    var k = u.shiftLeft(1).add(BigInteger.ONE);

	    var Q = this.x;
	    var fourQ = modDouble(modDouble(Q));

	    var U, V;
	    do
	    {
	        var P;
	        do
	        {
	            P = new BigInteger(this.q.bitLength(), new SecureRandom());
	        }
	        while (P.compareTo(this.q) >= 0
	            || !(P.multiply(P).subtract(fourQ).modPow(legendreExponent, this.q).equals(qMinusOne)));

	        var result = this.lucasSequence(P, Q, k);
	        U = result[0];
	        V = result[1];

	        if (this.modMult(V, V).equals(fourQ))
	        {
	            // Integer division by 2, mod q
	            if (V.testBit(0))
	            {
	                V = V.add(q);
	            }

	            V = V.shiftRight(1);

	            return new ECFieldElementFp(q,V);
	        }
	    }
	    while (U.equals(BigInteger.ONE) || U.equals(qMinusOne));

	    return null;
	};
	ECFieldElementFp.prototype.lucasSequence = function(P,Q,k)
	{
	    var n = k.bitLength();
	    var s = k.getLowestSetBit();

	    var Uh = BigInteger.ONE;
	    var Vl = BigInteger.TWO;
	    var Vh = P;
	    var Ql = BigInteger.ONE;
	    var Qh = BigInteger.ONE;

	    for (var j = n - 1; j >= s + 1; --j)
	    {
	        Ql = this.modMult(Ql, Qh);

	        if (k.testBit(j))
	        {
	            Qh = this.modMult(Ql, Q);
	            Uh = this.modMult(Uh, Vh);
	            Vl = this.modReduce(Vh.multiply(Vl).subtract(P.multiply(Ql)));
	            Vh = this.modReduce(Vh.multiply(Vh).subtract(Qh.shiftLeft(1)));
	        }
	        else
	        {
	            Qh = Ql;
	            Uh = this.modReduce(Uh.multiply(Vl).subtract(Ql));
	            Vh = this.modReduce(Vh.multiply(Vl).subtract(P.multiply(Ql)));
	            Vl = this.modReduce(Vl.multiply(Vl).subtract(Ql.shiftLeft(1)));
	        }
	    }

	    Ql = this.modMult(Ql, Qh);
	    Qh = this.modMult(Ql, Q);
	    Uh = this.modReduce(Uh.multiply(Vl).subtract(Ql));
	    Vl = this.modReduce(Vh.multiply(Vl).subtract(P.multiply(Ql)));
	    Ql = this.modMult(Ql, Qh);

	    for (var j = 1; j <= s; ++j)
	    {
	        Uh = this.modMult(Uh, Vl);
	        Vl = this.modReduce(Vl.multiply(Vl).subtract(Ql.shiftLeft(1)));
	        Ql = this.modMult(Ql, Ql);
	    }

	    return [ Uh, Vl ];
	};

	var exports$1 = {
	  ECCurveFp: ECCurveFp,
	  ECPointFp: ECPointFp,
	  ECFieldElementFp: ECFieldElementFp
	};

	var ec = exports$1;

	var naclFast = createCommonjsModule(function (module) {
	(function(nacl) {

	// Ported in 2014 by Dmitry Chestnykh and Devi Mandiri.
	// Public domain.
	//
	// Implementation derived from TweetNaCl version 20140427.
	// See for details: http://tweetnacl.cr.yp.to/

	var gf = function(init) {
	  var i, r = new Float64Array(16);
	  if (init) for (i = 0; i < init.length; i++) r[i] = init[i];
	  return r;
	};

	//  Pluggable, initialized in high-level API below.
	var randombytes = function(/* x, n */) { throw new Error('no PRNG'); };

	var _0 = new Uint8Array(16);
	var _9 = new Uint8Array(32); _9[0] = 9;

	var gf0 = gf(),
	    gf1 = gf([1]),
	    _121665 = gf([0xdb41, 1]),
	    D = gf([0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]),
	    D2 = gf([0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0, 0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406]),
	    X = gf([0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c, 0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169]),
	    Y = gf([0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666]),
	    I = gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);

	function ts64(x, i, h, l) {
	  x[i]   = (h >> 24) & 0xff;
	  x[i+1] = (h >> 16) & 0xff;
	  x[i+2] = (h >>  8) & 0xff;
	  x[i+3] = h & 0xff;
	  x[i+4] = (l >> 24)  & 0xff;
	  x[i+5] = (l >> 16)  & 0xff;
	  x[i+6] = (l >>  8)  & 0xff;
	  x[i+7] = l & 0xff;
	}

	function vn(x, xi, y, yi, n) {
	  var i,d = 0;
	  for (i = 0; i < n; i++) d |= x[xi+i]^y[yi+i];
	  return (1 & ((d - 1) >>> 8)) - 1;
	}

	function crypto_verify_16(x, xi, y, yi) {
	  return vn(x,xi,y,yi,16);
	}

	function crypto_verify_32(x, xi, y, yi) {
	  return vn(x,xi,y,yi,32);
	}

	function core_salsa20(o, p, k, c) {
	  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,
	      j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,
	      j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,
	      j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,
	      j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,
	      j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,
	      j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,
	      j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,
	      j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,
	      j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,
	      j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,
	      j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,
	      j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,
	      j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,
	      j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,
	      j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;

	  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,
	      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,
	      x15 = j15, u;

	  for (var i = 0; i < 20; i += 2) {
	    u = x0 + x12 | 0;
	    x4 ^= u<<7 | u>>>(32-7);
	    u = x4 + x0 | 0;
	    x8 ^= u<<9 | u>>>(32-9);
	    u = x8 + x4 | 0;
	    x12 ^= u<<13 | u>>>(32-13);
	    u = x12 + x8 | 0;
	    x0 ^= u<<18 | u>>>(32-18);

	    u = x5 + x1 | 0;
	    x9 ^= u<<7 | u>>>(32-7);
	    u = x9 + x5 | 0;
	    x13 ^= u<<9 | u>>>(32-9);
	    u = x13 + x9 | 0;
	    x1 ^= u<<13 | u>>>(32-13);
	    u = x1 + x13 | 0;
	    x5 ^= u<<18 | u>>>(32-18);

	    u = x10 + x6 | 0;
	    x14 ^= u<<7 | u>>>(32-7);
	    u = x14 + x10 | 0;
	    x2 ^= u<<9 | u>>>(32-9);
	    u = x2 + x14 | 0;
	    x6 ^= u<<13 | u>>>(32-13);
	    u = x6 + x2 | 0;
	    x10 ^= u<<18 | u>>>(32-18);

	    u = x15 + x11 | 0;
	    x3 ^= u<<7 | u>>>(32-7);
	    u = x3 + x15 | 0;
	    x7 ^= u<<9 | u>>>(32-9);
	    u = x7 + x3 | 0;
	    x11 ^= u<<13 | u>>>(32-13);
	    u = x11 + x7 | 0;
	    x15 ^= u<<18 | u>>>(32-18);

	    u = x0 + x3 | 0;
	    x1 ^= u<<7 | u>>>(32-7);
	    u = x1 + x0 | 0;
	    x2 ^= u<<9 | u>>>(32-9);
	    u = x2 + x1 | 0;
	    x3 ^= u<<13 | u>>>(32-13);
	    u = x3 + x2 | 0;
	    x0 ^= u<<18 | u>>>(32-18);

	    u = x5 + x4 | 0;
	    x6 ^= u<<7 | u>>>(32-7);
	    u = x6 + x5 | 0;
	    x7 ^= u<<9 | u>>>(32-9);
	    u = x7 + x6 | 0;
	    x4 ^= u<<13 | u>>>(32-13);
	    u = x4 + x7 | 0;
	    x5 ^= u<<18 | u>>>(32-18);

	    u = x10 + x9 | 0;
	    x11 ^= u<<7 | u>>>(32-7);
	    u = x11 + x10 | 0;
	    x8 ^= u<<9 | u>>>(32-9);
	    u = x8 + x11 | 0;
	    x9 ^= u<<13 | u>>>(32-13);
	    u = x9 + x8 | 0;
	    x10 ^= u<<18 | u>>>(32-18);

	    u = x15 + x14 | 0;
	    x12 ^= u<<7 | u>>>(32-7);
	    u = x12 + x15 | 0;
	    x13 ^= u<<9 | u>>>(32-9);
	    u = x13 + x12 | 0;
	    x14 ^= u<<13 | u>>>(32-13);
	    u = x14 + x13 | 0;
	    x15 ^= u<<18 | u>>>(32-18);
	  }
	   x0 =  x0 +  j0 | 0;
	   x1 =  x1 +  j1 | 0;
	   x2 =  x2 +  j2 | 0;
	   x3 =  x3 +  j3 | 0;
	   x4 =  x4 +  j4 | 0;
	   x5 =  x5 +  j5 | 0;
	   x6 =  x6 +  j6 | 0;
	   x7 =  x7 +  j7 | 0;
	   x8 =  x8 +  j8 | 0;
	   x9 =  x9 +  j9 | 0;
	  x10 = x10 + j10 | 0;
	  x11 = x11 + j11 | 0;
	  x12 = x12 + j12 | 0;
	  x13 = x13 + j13 | 0;
	  x14 = x14 + j14 | 0;
	  x15 = x15 + j15 | 0;

	  o[ 0] = x0 >>>  0 & 0xff;
	  o[ 1] = x0 >>>  8 & 0xff;
	  o[ 2] = x0 >>> 16 & 0xff;
	  o[ 3] = x0 >>> 24 & 0xff;

	  o[ 4] = x1 >>>  0 & 0xff;
	  o[ 5] = x1 >>>  8 & 0xff;
	  o[ 6] = x1 >>> 16 & 0xff;
	  o[ 7] = x1 >>> 24 & 0xff;

	  o[ 8] = x2 >>>  0 & 0xff;
	  o[ 9] = x2 >>>  8 & 0xff;
	  o[10] = x2 >>> 16 & 0xff;
	  o[11] = x2 >>> 24 & 0xff;

	  o[12] = x3 >>>  0 & 0xff;
	  o[13] = x3 >>>  8 & 0xff;
	  o[14] = x3 >>> 16 & 0xff;
	  o[15] = x3 >>> 24 & 0xff;

	  o[16] = x4 >>>  0 & 0xff;
	  o[17] = x4 >>>  8 & 0xff;
	  o[18] = x4 >>> 16 & 0xff;
	  o[19] = x4 >>> 24 & 0xff;

	  o[20] = x5 >>>  0 & 0xff;
	  o[21] = x5 >>>  8 & 0xff;
	  o[22] = x5 >>> 16 & 0xff;
	  o[23] = x5 >>> 24 & 0xff;

	  o[24] = x6 >>>  0 & 0xff;
	  o[25] = x6 >>>  8 & 0xff;
	  o[26] = x6 >>> 16 & 0xff;
	  o[27] = x6 >>> 24 & 0xff;

	  o[28] = x7 >>>  0 & 0xff;
	  o[29] = x7 >>>  8 & 0xff;
	  o[30] = x7 >>> 16 & 0xff;
	  o[31] = x7 >>> 24 & 0xff;

	  o[32] = x8 >>>  0 & 0xff;
	  o[33] = x8 >>>  8 & 0xff;
	  o[34] = x8 >>> 16 & 0xff;
	  o[35] = x8 >>> 24 & 0xff;

	  o[36] = x9 >>>  0 & 0xff;
	  o[37] = x9 >>>  8 & 0xff;
	  o[38] = x9 >>> 16 & 0xff;
	  o[39] = x9 >>> 24 & 0xff;

	  o[40] = x10 >>>  0 & 0xff;
	  o[41] = x10 >>>  8 & 0xff;
	  o[42] = x10 >>> 16 & 0xff;
	  o[43] = x10 >>> 24 & 0xff;

	  o[44] = x11 >>>  0 & 0xff;
	  o[45] = x11 >>>  8 & 0xff;
	  o[46] = x11 >>> 16 & 0xff;
	  o[47] = x11 >>> 24 & 0xff;

	  o[48] = x12 >>>  0 & 0xff;
	  o[49] = x12 >>>  8 & 0xff;
	  o[50] = x12 >>> 16 & 0xff;
	  o[51] = x12 >>> 24 & 0xff;

	  o[52] = x13 >>>  0 & 0xff;
	  o[53] = x13 >>>  8 & 0xff;
	  o[54] = x13 >>> 16 & 0xff;
	  o[55] = x13 >>> 24 & 0xff;

	  o[56] = x14 >>>  0 & 0xff;
	  o[57] = x14 >>>  8 & 0xff;
	  o[58] = x14 >>> 16 & 0xff;
	  o[59] = x14 >>> 24 & 0xff;

	  o[60] = x15 >>>  0 & 0xff;
	  o[61] = x15 >>>  8 & 0xff;
	  o[62] = x15 >>> 16 & 0xff;
	  o[63] = x15 >>> 24 & 0xff;
	}

	function core_hsalsa20(o,p,k,c) {
	  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,
	      j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,
	      j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,
	      j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,
	      j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,
	      j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,
	      j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,
	      j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,
	      j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,
	      j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,
	      j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,
	      j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,
	      j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,
	      j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,
	      j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,
	      j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;

	  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,
	      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,
	      x15 = j15, u;

	  for (var i = 0; i < 20; i += 2) {
	    u = x0 + x12 | 0;
	    x4 ^= u<<7 | u>>>(32-7);
	    u = x4 + x0 | 0;
	    x8 ^= u<<9 | u>>>(32-9);
	    u = x8 + x4 | 0;
	    x12 ^= u<<13 | u>>>(32-13);
	    u = x12 + x8 | 0;
	    x0 ^= u<<18 | u>>>(32-18);

	    u = x5 + x1 | 0;
	    x9 ^= u<<7 | u>>>(32-7);
	    u = x9 + x5 | 0;
	    x13 ^= u<<9 | u>>>(32-9);
	    u = x13 + x9 | 0;
	    x1 ^= u<<13 | u>>>(32-13);
	    u = x1 + x13 | 0;
	    x5 ^= u<<18 | u>>>(32-18);

	    u = x10 + x6 | 0;
	    x14 ^= u<<7 | u>>>(32-7);
	    u = x14 + x10 | 0;
	    x2 ^= u<<9 | u>>>(32-9);
	    u = x2 + x14 | 0;
	    x6 ^= u<<13 | u>>>(32-13);
	    u = x6 + x2 | 0;
	    x10 ^= u<<18 | u>>>(32-18);

	    u = x15 + x11 | 0;
	    x3 ^= u<<7 | u>>>(32-7);
	    u = x3 + x15 | 0;
	    x7 ^= u<<9 | u>>>(32-9);
	    u = x7 + x3 | 0;
	    x11 ^= u<<13 | u>>>(32-13);
	    u = x11 + x7 | 0;
	    x15 ^= u<<18 | u>>>(32-18);

	    u = x0 + x3 | 0;
	    x1 ^= u<<7 | u>>>(32-7);
	    u = x1 + x0 | 0;
	    x2 ^= u<<9 | u>>>(32-9);
	    u = x2 + x1 | 0;
	    x3 ^= u<<13 | u>>>(32-13);
	    u = x3 + x2 | 0;
	    x0 ^= u<<18 | u>>>(32-18);

	    u = x5 + x4 | 0;
	    x6 ^= u<<7 | u>>>(32-7);
	    u = x6 + x5 | 0;
	    x7 ^= u<<9 | u>>>(32-9);
	    u = x7 + x6 | 0;
	    x4 ^= u<<13 | u>>>(32-13);
	    u = x4 + x7 | 0;
	    x5 ^= u<<18 | u>>>(32-18);

	    u = x10 + x9 | 0;
	    x11 ^= u<<7 | u>>>(32-7);
	    u = x11 + x10 | 0;
	    x8 ^= u<<9 | u>>>(32-9);
	    u = x8 + x11 | 0;
	    x9 ^= u<<13 | u>>>(32-13);
	    u = x9 + x8 | 0;
	    x10 ^= u<<18 | u>>>(32-18);

	    u = x15 + x14 | 0;
	    x12 ^= u<<7 | u>>>(32-7);
	    u = x12 + x15 | 0;
	    x13 ^= u<<9 | u>>>(32-9);
	    u = x13 + x12 | 0;
	    x14 ^= u<<13 | u>>>(32-13);
	    u = x14 + x13 | 0;
	    x15 ^= u<<18 | u>>>(32-18);
	  }

	  o[ 0] = x0 >>>  0 & 0xff;
	  o[ 1] = x0 >>>  8 & 0xff;
	  o[ 2] = x0 >>> 16 & 0xff;
	  o[ 3] = x0 >>> 24 & 0xff;

	  o[ 4] = x5 >>>  0 & 0xff;
	  o[ 5] = x5 >>>  8 & 0xff;
	  o[ 6] = x5 >>> 16 & 0xff;
	  o[ 7] = x5 >>> 24 & 0xff;

	  o[ 8] = x10 >>>  0 & 0xff;
	  o[ 9] = x10 >>>  8 & 0xff;
	  o[10] = x10 >>> 16 & 0xff;
	  o[11] = x10 >>> 24 & 0xff;

	  o[12] = x15 >>>  0 & 0xff;
	  o[13] = x15 >>>  8 & 0xff;
	  o[14] = x15 >>> 16 & 0xff;
	  o[15] = x15 >>> 24 & 0xff;

	  o[16] = x6 >>>  0 & 0xff;
	  o[17] = x6 >>>  8 & 0xff;
	  o[18] = x6 >>> 16 & 0xff;
	  o[19] = x6 >>> 24 & 0xff;

	  o[20] = x7 >>>  0 & 0xff;
	  o[21] = x7 >>>  8 & 0xff;
	  o[22] = x7 >>> 16 & 0xff;
	  o[23] = x7 >>> 24 & 0xff;

	  o[24] = x8 >>>  0 & 0xff;
	  o[25] = x8 >>>  8 & 0xff;
	  o[26] = x8 >>> 16 & 0xff;
	  o[27] = x8 >>> 24 & 0xff;

	  o[28] = x9 >>>  0 & 0xff;
	  o[29] = x9 >>>  8 & 0xff;
	  o[30] = x9 >>> 16 & 0xff;
	  o[31] = x9 >>> 24 & 0xff;
	}

	function crypto_core_salsa20(out,inp,k,c) {
	  core_salsa20(out,inp,k,c);
	}

	function crypto_core_hsalsa20(out,inp,k,c) {
	  core_hsalsa20(out,inp,k,c);
	}

	var sigma = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107]);
	            // "expand 32-byte k"

	function crypto_stream_salsa20_xor(c,cpos,m,mpos,b,n,k) {
	  var z = new Uint8Array(16), x = new Uint8Array(64);
	  var u, i;
	  for (i = 0; i < 16; i++) z[i] = 0;
	  for (i = 0; i < 8; i++) z[i] = n[i];
	  while (b >= 64) {
	    crypto_core_salsa20(x,z,k,sigma);
	    for (i = 0; i < 64; i++) c[cpos+i] = m[mpos+i] ^ x[i];
	    u = 1;
	    for (i = 8; i < 16; i++) {
	      u = u + (z[i] & 0xff) | 0;
	      z[i] = u & 0xff;
	      u >>>= 8;
	    }
	    b -= 64;
	    cpos += 64;
	    mpos += 64;
	  }
	  if (b > 0) {
	    crypto_core_salsa20(x,z,k,sigma);
	    for (i = 0; i < b; i++) c[cpos+i] = m[mpos+i] ^ x[i];
	  }
	  return 0;
	}

	function crypto_stream_salsa20(c,cpos,b,n,k) {
	  var z = new Uint8Array(16), x = new Uint8Array(64);
	  var u, i;
	  for (i = 0; i < 16; i++) z[i] = 0;
	  for (i = 0; i < 8; i++) z[i] = n[i];
	  while (b >= 64) {
	    crypto_core_salsa20(x,z,k,sigma);
	    for (i = 0; i < 64; i++) c[cpos+i] = x[i];
	    u = 1;
	    for (i = 8; i < 16; i++) {
	      u = u + (z[i] & 0xff) | 0;
	      z[i] = u & 0xff;
	      u >>>= 8;
	    }
	    b -= 64;
	    cpos += 64;
	  }
	  if (b > 0) {
	    crypto_core_salsa20(x,z,k,sigma);
	    for (i = 0; i < b; i++) c[cpos+i] = x[i];
	  }
	  return 0;
	}

	function crypto_stream(c,cpos,d,n,k) {
	  var s = new Uint8Array(32);
	  crypto_core_hsalsa20(s,n,k,sigma);
	  var sn = new Uint8Array(8);
	  for (var i = 0; i < 8; i++) sn[i] = n[i+16];
	  return crypto_stream_salsa20(c,cpos,d,sn,s);
	}

	function crypto_stream_xor(c,cpos,m,mpos,d,n,k) {
	  var s = new Uint8Array(32);
	  crypto_core_hsalsa20(s,n,k,sigma);
	  var sn = new Uint8Array(8);
	  for (var i = 0; i < 8; i++) sn[i] = n[i+16];
	  return crypto_stream_salsa20_xor(c,cpos,m,mpos,d,sn,s);
	}

	/*
	* Port of Andrew Moon's Poly1305-donna-16. Public domain.
	* https://github.com/floodyberry/poly1305-donna
	*/

	var poly1305 = function(key) {
	  this.buffer = new Uint8Array(16);
	  this.r = new Uint16Array(10);
	  this.h = new Uint16Array(10);
	  this.pad = new Uint16Array(8);
	  this.leftover = 0;
	  this.fin = 0;

	  var t0, t1, t2, t3, t4, t5, t6, t7;

	  t0 = key[ 0] & 0xff | (key[ 1] & 0xff) << 8; this.r[0] = ( t0                     ) & 0x1fff;
	  t1 = key[ 2] & 0xff | (key[ 3] & 0xff) << 8; this.r[1] = ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;
	  t2 = key[ 4] & 0xff | (key[ 5] & 0xff) << 8; this.r[2] = ((t1 >>> 10) | (t2 <<  6)) & 0x1f03;
	  t3 = key[ 6] & 0xff | (key[ 7] & 0xff) << 8; this.r[3] = ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;
	  t4 = key[ 8] & 0xff | (key[ 9] & 0xff) << 8; this.r[4] = ((t3 >>>  4) | (t4 << 12)) & 0x00ff;
	  this.r[5] = ((t4 >>>  1)) & 0x1ffe;
	  t5 = key[10] & 0xff | (key[11] & 0xff) << 8; this.r[6] = ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;
	  t6 = key[12] & 0xff | (key[13] & 0xff) << 8; this.r[7] = ((t5 >>> 11) | (t6 <<  5)) & 0x1f81;
	  t7 = key[14] & 0xff | (key[15] & 0xff) << 8; this.r[8] = ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;
	  this.r[9] = ((t7 >>>  5)) & 0x007f;

	  this.pad[0] = key[16] & 0xff | (key[17] & 0xff) << 8;
	  this.pad[1] = key[18] & 0xff | (key[19] & 0xff) << 8;
	  this.pad[2] = key[20] & 0xff | (key[21] & 0xff) << 8;
	  this.pad[3] = key[22] & 0xff | (key[23] & 0xff) << 8;
	  this.pad[4] = key[24] & 0xff | (key[25] & 0xff) << 8;
	  this.pad[5] = key[26] & 0xff | (key[27] & 0xff) << 8;
	  this.pad[6] = key[28] & 0xff | (key[29] & 0xff) << 8;
	  this.pad[7] = key[30] & 0xff | (key[31] & 0xff) << 8;
	};

	poly1305.prototype.blocks = function(m, mpos, bytes) {
	  var hibit = this.fin ? 0 : (1 << 11);
	  var t0, t1, t2, t3, t4, t5, t6, t7, c;
	  var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;

	  var h0 = this.h[0],
	      h1 = this.h[1],
	      h2 = this.h[2],
	      h3 = this.h[3],
	      h4 = this.h[4],
	      h5 = this.h[5],
	      h6 = this.h[6],
	      h7 = this.h[7],
	      h8 = this.h[8],
	      h9 = this.h[9];

	  var r0 = this.r[0],
	      r1 = this.r[1],
	      r2 = this.r[2],
	      r3 = this.r[3],
	      r4 = this.r[4],
	      r5 = this.r[5],
	      r6 = this.r[6],
	      r7 = this.r[7],
	      r8 = this.r[8],
	      r9 = this.r[9];

	  while (bytes >= 16) {
	    t0 = m[mpos+ 0] & 0xff | (m[mpos+ 1] & 0xff) << 8; h0 += ( t0                     ) & 0x1fff;
	    t1 = m[mpos+ 2] & 0xff | (m[mpos+ 3] & 0xff) << 8; h1 += ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;
	    t2 = m[mpos+ 4] & 0xff | (m[mpos+ 5] & 0xff) << 8; h2 += ((t1 >>> 10) | (t2 <<  6)) & 0x1fff;
	    t3 = m[mpos+ 6] & 0xff | (m[mpos+ 7] & 0xff) << 8; h3 += ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;
	    t4 = m[mpos+ 8] & 0xff | (m[mpos+ 9] & 0xff) << 8; h4 += ((t3 >>>  4) | (t4 << 12)) & 0x1fff;
	    h5 += ((t4 >>>  1)) & 0x1fff;
	    t5 = m[mpos+10] & 0xff | (m[mpos+11] & 0xff) << 8; h6 += ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;
	    t6 = m[mpos+12] & 0xff | (m[mpos+13] & 0xff) << 8; h7 += ((t5 >>> 11) | (t6 <<  5)) & 0x1fff;
	    t7 = m[mpos+14] & 0xff | (m[mpos+15] & 0xff) << 8; h8 += ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;
	    h9 += ((t7 >>> 5)) | hibit;

	    c = 0;

	    d0 = c;
	    d0 += h0 * r0;
	    d0 += h1 * (5 * r9);
	    d0 += h2 * (5 * r8);
	    d0 += h3 * (5 * r7);
	    d0 += h4 * (5 * r6);
	    c = (d0 >>> 13); d0 &= 0x1fff;
	    d0 += h5 * (5 * r5);
	    d0 += h6 * (5 * r4);
	    d0 += h7 * (5 * r3);
	    d0 += h8 * (5 * r2);
	    d0 += h9 * (5 * r1);
	    c += (d0 >>> 13); d0 &= 0x1fff;

	    d1 = c;
	    d1 += h0 * r1;
	    d1 += h1 * r0;
	    d1 += h2 * (5 * r9);
	    d1 += h3 * (5 * r8);
	    d1 += h4 * (5 * r7);
	    c = (d1 >>> 13); d1 &= 0x1fff;
	    d1 += h5 * (5 * r6);
	    d1 += h6 * (5 * r5);
	    d1 += h7 * (5 * r4);
	    d1 += h8 * (5 * r3);
	    d1 += h9 * (5 * r2);
	    c += (d1 >>> 13); d1 &= 0x1fff;

	    d2 = c;
	    d2 += h0 * r2;
	    d2 += h1 * r1;
	    d2 += h2 * r0;
	    d2 += h3 * (5 * r9);
	    d2 += h4 * (5 * r8);
	    c = (d2 >>> 13); d2 &= 0x1fff;
	    d2 += h5 * (5 * r7);
	    d2 += h6 * (5 * r6);
	    d2 += h7 * (5 * r5);
	    d2 += h8 * (5 * r4);
	    d2 += h9 * (5 * r3);
	    c += (d2 >>> 13); d2 &= 0x1fff;

	    d3 = c;
	    d3 += h0 * r3;
	    d3 += h1 * r2;
	    d3 += h2 * r1;
	    d3 += h3 * r0;
	    d3 += h4 * (5 * r9);
	    c = (d3 >>> 13); d3 &= 0x1fff;
	    d3 += h5 * (5 * r8);
	    d3 += h6 * (5 * r7);
	    d3 += h7 * (5 * r6);
	    d3 += h8 * (5 * r5);
	    d3 += h9 * (5 * r4);
	    c += (d3 >>> 13); d3 &= 0x1fff;

	    d4 = c;
	    d4 += h0 * r4;
	    d4 += h1 * r3;
	    d4 += h2 * r2;
	    d4 += h3 * r1;
	    d4 += h4 * r0;
	    c = (d4 >>> 13); d4 &= 0x1fff;
	    d4 += h5 * (5 * r9);
	    d4 += h6 * (5 * r8);
	    d4 += h7 * (5 * r7);
	    d4 += h8 * (5 * r6);
	    d4 += h9 * (5 * r5);
	    c += (d4 >>> 13); d4 &= 0x1fff;

	    d5 = c;
	    d5 += h0 * r5;
	    d5 += h1 * r4;
	    d5 += h2 * r3;
	    d5 += h3 * r2;
	    d5 += h4 * r1;
	    c = (d5 >>> 13); d5 &= 0x1fff;
	    d5 += h5 * r0;
	    d5 += h6 * (5 * r9);
	    d5 += h7 * (5 * r8);
	    d5 += h8 * (5 * r7);
	    d5 += h9 * (5 * r6);
	    c += (d5 >>> 13); d5 &= 0x1fff;

	    d6 = c;
	    d6 += h0 * r6;
	    d6 += h1 * r5;
	    d6 += h2 * r4;
	    d6 += h3 * r3;
	    d6 += h4 * r2;
	    c = (d6 >>> 13); d6 &= 0x1fff;
	    d6 += h5 * r1;
	    d6 += h6 * r0;
	    d6 += h7 * (5 * r9);
	    d6 += h8 * (5 * r8);
	    d6 += h9 * (5 * r7);
	    c += (d6 >>> 13); d6 &= 0x1fff;

	    d7 = c;
	    d7 += h0 * r7;
	    d7 += h1 * r6;
	    d7 += h2 * r5;
	    d7 += h3 * r4;
	    d7 += h4 * r3;
	    c = (d7 >>> 13); d7 &= 0x1fff;
	    d7 += h5 * r2;
	    d7 += h6 * r1;
	    d7 += h7 * r0;
	    d7 += h8 * (5 * r9);
	    d7 += h9 * (5 * r8);
	    c += (d7 >>> 13); d7 &= 0x1fff;

	    d8 = c;
	    d8 += h0 * r8;
	    d8 += h1 * r7;
	    d8 += h2 * r6;
	    d8 += h3 * r5;
	    d8 += h4 * r4;
	    c = (d8 >>> 13); d8 &= 0x1fff;
	    d8 += h5 * r3;
	    d8 += h6 * r2;
	    d8 += h7 * r1;
	    d8 += h8 * r0;
	    d8 += h9 * (5 * r9);
	    c += (d8 >>> 13); d8 &= 0x1fff;

	    d9 = c;
	    d9 += h0 * r9;
	    d9 += h1 * r8;
	    d9 += h2 * r7;
	    d9 += h3 * r6;
	    d9 += h4 * r5;
	    c = (d9 >>> 13); d9 &= 0x1fff;
	    d9 += h5 * r4;
	    d9 += h6 * r3;
	    d9 += h7 * r2;
	    d9 += h8 * r1;
	    d9 += h9 * r0;
	    c += (d9 >>> 13); d9 &= 0x1fff;

	    c = (((c << 2) + c)) | 0;
	    c = (c + d0) | 0;
	    d0 = c & 0x1fff;
	    c = (c >>> 13);
	    d1 += c;

	    h0 = d0;
	    h1 = d1;
	    h2 = d2;
	    h3 = d3;
	    h4 = d4;
	    h5 = d5;
	    h6 = d6;
	    h7 = d7;
	    h8 = d8;
	    h9 = d9;

	    mpos += 16;
	    bytes -= 16;
	  }
	  this.h[0] = h0;
	  this.h[1] = h1;
	  this.h[2] = h2;
	  this.h[3] = h3;
	  this.h[4] = h4;
	  this.h[5] = h5;
	  this.h[6] = h6;
	  this.h[7] = h7;
	  this.h[8] = h8;
	  this.h[9] = h9;
	};

	poly1305.prototype.finish = function(mac, macpos) {
	  var g = new Uint16Array(10);
	  var c, mask, f, i;

	  if (this.leftover) {
	    i = this.leftover;
	    this.buffer[i++] = 1;
	    for (; i < 16; i++) this.buffer[i] = 0;
	    this.fin = 1;
	    this.blocks(this.buffer, 0, 16);
	  }

	  c = this.h[1] >>> 13;
	  this.h[1] &= 0x1fff;
	  for (i = 2; i < 10; i++) {
	    this.h[i] += c;
	    c = this.h[i] >>> 13;
	    this.h[i] &= 0x1fff;
	  }
	  this.h[0] += (c * 5);
	  c = this.h[0] >>> 13;
	  this.h[0] &= 0x1fff;
	  this.h[1] += c;
	  c = this.h[1] >>> 13;
	  this.h[1] &= 0x1fff;
	  this.h[2] += c;

	  g[0] = this.h[0] + 5;
	  c = g[0] >>> 13;
	  g[0] &= 0x1fff;
	  for (i = 1; i < 10; i++) {
	    g[i] = this.h[i] + c;
	    c = g[i] >>> 13;
	    g[i] &= 0x1fff;
	  }
	  g[9] -= (1 << 13);

	  mask = (c ^ 1) - 1;
	  for (i = 0; i < 10; i++) g[i] &= mask;
	  mask = ~mask;
	  for (i = 0; i < 10; i++) this.h[i] = (this.h[i] & mask) | g[i];

	  this.h[0] = ((this.h[0]       ) | (this.h[1] << 13)                    ) & 0xffff;
	  this.h[1] = ((this.h[1] >>>  3) | (this.h[2] << 10)                    ) & 0xffff;
	  this.h[2] = ((this.h[2] >>>  6) | (this.h[3] <<  7)                    ) & 0xffff;
	  this.h[3] = ((this.h[3] >>>  9) | (this.h[4] <<  4)                    ) & 0xffff;
	  this.h[4] = ((this.h[4] >>> 12) | (this.h[5] <<  1) | (this.h[6] << 14)) & 0xffff;
	  this.h[5] = ((this.h[6] >>>  2) | (this.h[7] << 11)                    ) & 0xffff;
	  this.h[6] = ((this.h[7] >>>  5) | (this.h[8] <<  8)                    ) & 0xffff;
	  this.h[7] = ((this.h[8] >>>  8) | (this.h[9] <<  5)                    ) & 0xffff;

	  f = this.h[0] + this.pad[0];
	  this.h[0] = f & 0xffff;
	  for (i = 1; i < 8; i++) {
	    f = (((this.h[i] + this.pad[i]) | 0) + (f >>> 16)) | 0;
	    this.h[i] = f & 0xffff;
	  }

	  mac[macpos+ 0] = (this.h[0] >>> 0) & 0xff;
	  mac[macpos+ 1] = (this.h[0] >>> 8) & 0xff;
	  mac[macpos+ 2] = (this.h[1] >>> 0) & 0xff;
	  mac[macpos+ 3] = (this.h[1] >>> 8) & 0xff;
	  mac[macpos+ 4] = (this.h[2] >>> 0) & 0xff;
	  mac[macpos+ 5] = (this.h[2] >>> 8) & 0xff;
	  mac[macpos+ 6] = (this.h[3] >>> 0) & 0xff;
	  mac[macpos+ 7] = (this.h[3] >>> 8) & 0xff;
	  mac[macpos+ 8] = (this.h[4] >>> 0) & 0xff;
	  mac[macpos+ 9] = (this.h[4] >>> 8) & 0xff;
	  mac[macpos+10] = (this.h[5] >>> 0) & 0xff;
	  mac[macpos+11] = (this.h[5] >>> 8) & 0xff;
	  mac[macpos+12] = (this.h[6] >>> 0) & 0xff;
	  mac[macpos+13] = (this.h[6] >>> 8) & 0xff;
	  mac[macpos+14] = (this.h[7] >>> 0) & 0xff;
	  mac[macpos+15] = (this.h[7] >>> 8) & 0xff;
	};

	poly1305.prototype.update = function(m, mpos, bytes) {
	  var i, want;

	  if (this.leftover) {
	    want = (16 - this.leftover);
	    if (want > bytes)
	      want = bytes;
	    for (i = 0; i < want; i++)
	      this.buffer[this.leftover + i] = m[mpos+i];
	    bytes -= want;
	    mpos += want;
	    this.leftover += want;
	    if (this.leftover < 16)
	      return;
	    this.blocks(this.buffer, 0, 16);
	    this.leftover = 0;
	  }

	  if (bytes >= 16) {
	    want = bytes - (bytes % 16);
	    this.blocks(m, mpos, want);
	    mpos += want;
	    bytes -= want;
	  }

	  if (bytes) {
	    for (i = 0; i < bytes; i++)
	      this.buffer[this.leftover + i] = m[mpos+i];
	    this.leftover += bytes;
	  }
	};

	function crypto_onetimeauth(out, outpos, m, mpos, n, k) {
	  var s = new poly1305(k);
	  s.update(m, mpos, n);
	  s.finish(out, outpos);
	  return 0;
	}

	function crypto_onetimeauth_verify(h, hpos, m, mpos, n, k) {
	  var x = new Uint8Array(16);
	  crypto_onetimeauth(x,0,m,mpos,n,k);
	  return crypto_verify_16(h,hpos,x,0);
	}

	function crypto_secretbox(c,m,d,n,k) {
	  var i;
	  if (d < 32) return -1;
	  crypto_stream_xor(c,0,m,0,d,n,k);
	  crypto_onetimeauth(c, 16, c, 32, d - 32, c);
	  for (i = 0; i < 16; i++) c[i] = 0;
	  return 0;
	}

	function crypto_secretbox_open(m,c,d,n,k) {
	  var i;
	  var x = new Uint8Array(32);
	  if (d < 32) return -1;
	  crypto_stream(x,0,32,n,k);
	  if (crypto_onetimeauth_verify(c, 16,c, 32,d - 32,x) !== 0) return -1;
	  crypto_stream_xor(m,0,c,0,d,n,k);
	  for (i = 0; i < 32; i++) m[i] = 0;
	  return 0;
	}

	function set25519(r, a) {
	  var i;
	  for (i = 0; i < 16; i++) r[i] = a[i]|0;
	}

	function car25519(o) {
	  var i, v, c = 1;
	  for (i = 0; i < 16; i++) {
	    v = o[i] + c + 65535;
	    c = Math.floor(v / 65536);
	    o[i] = v - c * 65536;
	  }
	  o[0] += c-1 + 37 * (c-1);
	}

	function sel25519(p, q, b) {
	  var t, c = ~(b-1);
	  for (var i = 0; i < 16; i++) {
	    t = c & (p[i] ^ q[i]);
	    p[i] ^= t;
	    q[i] ^= t;
	  }
	}

	function pack25519(o, n) {
	  var i, j, b;
	  var m = gf(), t = gf();
	  for (i = 0; i < 16; i++) t[i] = n[i];
	  car25519(t);
	  car25519(t);
	  car25519(t);
	  for (j = 0; j < 2; j++) {
	    m[0] = t[0] - 0xffed;
	    for (i = 1; i < 15; i++) {
	      m[i] = t[i] - 0xffff - ((m[i-1]>>16) & 1);
	      m[i-1] &= 0xffff;
	    }
	    m[15] = t[15] - 0x7fff - ((m[14]>>16) & 1);
	    b = (m[15]>>16) & 1;
	    m[14] &= 0xffff;
	    sel25519(t, m, 1-b);
	  }
	  for (i = 0; i < 16; i++) {
	    o[2*i] = t[i] & 0xff;
	    o[2*i+1] = t[i]>>8;
	  }
	}

	function neq25519(a, b) {
	  var c = new Uint8Array(32), d = new Uint8Array(32);
	  pack25519(c, a);
	  pack25519(d, b);
	  return crypto_verify_32(c, 0, d, 0);
	}

	function par25519(a) {
	  var d = new Uint8Array(32);
	  pack25519(d, a);
	  return d[0] & 1;
	}

	function unpack25519(o, n) {
	  var i;
	  for (i = 0; i < 16; i++) o[i] = n[2*i] + (n[2*i+1] << 8);
	  o[15] &= 0x7fff;
	}

	function A(o, a, b) {
	  for (var i = 0; i < 16; i++) o[i] = a[i] + b[i];
	}

	function Z(o, a, b) {
	  for (var i = 0; i < 16; i++) o[i] = a[i] - b[i];
	}

	function M(o, a, b) {
	  var v, c,
	     t0 = 0,  t1 = 0,  t2 = 0,  t3 = 0,  t4 = 0,  t5 = 0,  t6 = 0,  t7 = 0,
	     t8 = 0,  t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0,
	    t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0,
	    t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0,
	    b0 = b[0],
	    b1 = b[1],
	    b2 = b[2],
	    b3 = b[3],
	    b4 = b[4],
	    b5 = b[5],
	    b6 = b[6],
	    b7 = b[7],
	    b8 = b[8],
	    b9 = b[9],
	    b10 = b[10],
	    b11 = b[11],
	    b12 = b[12],
	    b13 = b[13],
	    b14 = b[14],
	    b15 = b[15];

	  v = a[0];
	  t0 += v * b0;
	  t1 += v * b1;
	  t2 += v * b2;
	  t3 += v * b3;
	  t4 += v * b4;
	  t5 += v * b5;
	  t6 += v * b6;
	  t7 += v * b7;
	  t8 += v * b8;
	  t9 += v * b9;
	  t10 += v * b10;
	  t11 += v * b11;
	  t12 += v * b12;
	  t13 += v * b13;
	  t14 += v * b14;
	  t15 += v * b15;
	  v = a[1];
	  t1 += v * b0;
	  t2 += v * b1;
	  t3 += v * b2;
	  t4 += v * b3;
	  t5 += v * b4;
	  t6 += v * b5;
	  t7 += v * b6;
	  t8 += v * b7;
	  t9 += v * b8;
	  t10 += v * b9;
	  t11 += v * b10;
	  t12 += v * b11;
	  t13 += v * b12;
	  t14 += v * b13;
	  t15 += v * b14;
	  t16 += v * b15;
	  v = a[2];
	  t2 += v * b0;
	  t3 += v * b1;
	  t4 += v * b2;
	  t5 += v * b3;
	  t6 += v * b4;
	  t7 += v * b5;
	  t8 += v * b6;
	  t9 += v * b7;
	  t10 += v * b8;
	  t11 += v * b9;
	  t12 += v * b10;
	  t13 += v * b11;
	  t14 += v * b12;
	  t15 += v * b13;
	  t16 += v * b14;
	  t17 += v * b15;
	  v = a[3];
	  t3 += v * b0;
	  t4 += v * b1;
	  t5 += v * b2;
	  t6 += v * b3;
	  t7 += v * b4;
	  t8 += v * b5;
	  t9 += v * b6;
	  t10 += v * b7;
	  t11 += v * b8;
	  t12 += v * b9;
	  t13 += v * b10;
	  t14 += v * b11;
	  t15 += v * b12;
	  t16 += v * b13;
	  t17 += v * b14;
	  t18 += v * b15;
	  v = a[4];
	  t4 += v * b0;
	  t5 += v * b1;
	  t6 += v * b2;
	  t7 += v * b3;
	  t8 += v * b4;
	  t9 += v * b5;
	  t10 += v * b6;
	  t11 += v * b7;
	  t12 += v * b8;
	  t13 += v * b9;
	  t14 += v * b10;
	  t15 += v * b11;
	  t16 += v * b12;
	  t17 += v * b13;
	  t18 += v * b14;
	  t19 += v * b15;
	  v = a[5];
	  t5 += v * b0;
	  t6 += v * b1;
	  t7 += v * b2;
	  t8 += v * b3;
	  t9 += v * b4;
	  t10 += v * b5;
	  t11 += v * b6;
	  t12 += v * b7;
	  t13 += v * b8;
	  t14 += v * b9;
	  t15 += v * b10;
	  t16 += v * b11;
	  t17 += v * b12;
	  t18 += v * b13;
	  t19 += v * b14;
	  t20 += v * b15;
	  v = a[6];
	  t6 += v * b0;
	  t7 += v * b1;
	  t8 += v * b2;
	  t9 += v * b3;
	  t10 += v * b4;
	  t11 += v * b5;
	  t12 += v * b6;
	  t13 += v * b7;
	  t14 += v * b8;
	  t15 += v * b9;
	  t16 += v * b10;
	  t17 += v * b11;
	  t18 += v * b12;
	  t19 += v * b13;
	  t20 += v * b14;
	  t21 += v * b15;
	  v = a[7];
	  t7 += v * b0;
	  t8 += v * b1;
	  t9 += v * b2;
	  t10 += v * b3;
	  t11 += v * b4;
	  t12 += v * b5;
	  t13 += v * b6;
	  t14 += v * b7;
	  t15 += v * b8;
	  t16 += v * b9;
	  t17 += v * b10;
	  t18 += v * b11;
	  t19 += v * b12;
	  t20 += v * b13;
	  t21 += v * b14;
	  t22 += v * b15;
	  v = a[8];
	  t8 += v * b0;
	  t9 += v * b1;
	  t10 += v * b2;
	  t11 += v * b3;
	  t12 += v * b4;
	  t13 += v * b5;
	  t14 += v * b6;
	  t15 += v * b7;
	  t16 += v * b8;
	  t17 += v * b9;
	  t18 += v * b10;
	  t19 += v * b11;
	  t20 += v * b12;
	  t21 += v * b13;
	  t22 += v * b14;
	  t23 += v * b15;
	  v = a[9];
	  t9 += v * b0;
	  t10 += v * b1;
	  t11 += v * b2;
	  t12 += v * b3;
	  t13 += v * b4;
	  t14 += v * b5;
	  t15 += v * b6;
	  t16 += v * b7;
	  t17 += v * b8;
	  t18 += v * b9;
	  t19 += v * b10;
	  t20 += v * b11;
	  t21 += v * b12;
	  t22 += v * b13;
	  t23 += v * b14;
	  t24 += v * b15;
	  v = a[10];
	  t10 += v * b0;
	  t11 += v * b1;
	  t12 += v * b2;
	  t13 += v * b3;
	  t14 += v * b4;
	  t15 += v * b5;
	  t16 += v * b6;
	  t17 += v * b7;
	  t18 += v * b8;
	  t19 += v * b9;
	  t20 += v * b10;
	  t21 += v * b11;
	  t22 += v * b12;
	  t23 += v * b13;
	  t24 += v * b14;
	  t25 += v * b15;
	  v = a[11];
	  t11 += v * b0;
	  t12 += v * b1;
	  t13 += v * b2;
	  t14 += v * b3;
	  t15 += v * b4;
	  t16 += v * b5;
	  t17 += v * b6;
	  t18 += v * b7;
	  t19 += v * b8;
	  t20 += v * b9;
	  t21 += v * b10;
	  t22 += v * b11;
	  t23 += v * b12;
	  t24 += v * b13;
	  t25 += v * b14;
	  t26 += v * b15;
	  v = a[12];
	  t12 += v * b0;
	  t13 += v * b1;
	  t14 += v * b2;
	  t15 += v * b3;
	  t16 += v * b4;
	  t17 += v * b5;
	  t18 += v * b6;
	  t19 += v * b7;
	  t20 += v * b8;
	  t21 += v * b9;
	  t22 += v * b10;
	  t23 += v * b11;
	  t24 += v * b12;
	  t25 += v * b13;
	  t26 += v * b14;
	  t27 += v * b15;
	  v = a[13];
	  t13 += v * b0;
	  t14 += v * b1;
	  t15 += v * b2;
	  t16 += v * b3;
	  t17 += v * b4;
	  t18 += v * b5;
	  t19 += v * b6;
	  t20 += v * b7;
	  t21 += v * b8;
	  t22 += v * b9;
	  t23 += v * b10;
	  t24 += v * b11;
	  t25 += v * b12;
	  t26 += v * b13;
	  t27 += v * b14;
	  t28 += v * b15;
	  v = a[14];
	  t14 += v * b0;
	  t15 += v * b1;
	  t16 += v * b2;
	  t17 += v * b3;
	  t18 += v * b4;
	  t19 += v * b5;
	  t20 += v * b6;
	  t21 += v * b7;
	  t22 += v * b8;
	  t23 += v * b9;
	  t24 += v * b10;
	  t25 += v * b11;
	  t26 += v * b12;
	  t27 += v * b13;
	  t28 += v * b14;
	  t29 += v * b15;
	  v = a[15];
	  t15 += v * b0;
	  t16 += v * b1;
	  t17 += v * b2;
	  t18 += v * b3;
	  t19 += v * b4;
	  t20 += v * b5;
	  t21 += v * b6;
	  t22 += v * b7;
	  t23 += v * b8;
	  t24 += v * b9;
	  t25 += v * b10;
	  t26 += v * b11;
	  t27 += v * b12;
	  t28 += v * b13;
	  t29 += v * b14;
	  t30 += v * b15;

	  t0  += 38 * t16;
	  t1  += 38 * t17;
	  t2  += 38 * t18;
	  t3  += 38 * t19;
	  t4  += 38 * t20;
	  t5  += 38 * t21;
	  t6  += 38 * t22;
	  t7  += 38 * t23;
	  t8  += 38 * t24;
	  t9  += 38 * t25;
	  t10 += 38 * t26;
	  t11 += 38 * t27;
	  t12 += 38 * t28;
	  t13 += 38 * t29;
	  t14 += 38 * t30;
	  // t15 left as is

	  // first car
	  c = 1;
	  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;
	  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;
	  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;
	  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;
	  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;
	  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;
	  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;
	  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;
	  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;
	  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;
	  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;
	  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;
	  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;
	  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;
	  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;
	  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;
	  t0 += c-1 + 37 * (c-1);

	  // second car
	  c = 1;
	  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;
	  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;
	  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;
	  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;
	  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;
	  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;
	  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;
	  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;
	  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;
	  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;
	  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;
	  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;
	  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;
	  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;
	  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;
	  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;
	  t0 += c-1 + 37 * (c-1);

	  o[ 0] = t0;
	  o[ 1] = t1;
	  o[ 2] = t2;
	  o[ 3] = t3;
	  o[ 4] = t4;
	  o[ 5] = t5;
	  o[ 6] = t6;
	  o[ 7] = t7;
	  o[ 8] = t8;
	  o[ 9] = t9;
	  o[10] = t10;
	  o[11] = t11;
	  o[12] = t12;
	  o[13] = t13;
	  o[14] = t14;
	  o[15] = t15;
	}

	function S(o, a) {
	  M(o, a, a);
	}

	function inv25519(o, i) {
	  var c = gf();
	  var a;
	  for (a = 0; a < 16; a++) c[a] = i[a];
	  for (a = 253; a >= 0; a--) {
	    S(c, c);
	    if(a !== 2 && a !== 4) M(c, c, i);
	  }
	  for (a = 0; a < 16; a++) o[a] = c[a];
	}

	function pow2523(o, i) {
	  var c = gf();
	  var a;
	  for (a = 0; a < 16; a++) c[a] = i[a];
	  for (a = 250; a >= 0; a--) {
	      S(c, c);
	      if(a !== 1) M(c, c, i);
	  }
	  for (a = 0; a < 16; a++) o[a] = c[a];
	}

	function crypto_scalarmult(q, n, p) {
	  var z = new Uint8Array(32);
	  var x = new Float64Array(80), r, i;
	  var a = gf(), b = gf(), c = gf(),
	      d = gf(), e = gf(), f = gf();
	  for (i = 0; i < 31; i++) z[i] = n[i];
	  z[31]=(n[31]&127)|64;
	  z[0]&=248;
	  unpack25519(x,p);
	  for (i = 0; i < 16; i++) {
	    b[i]=x[i];
	    d[i]=a[i]=c[i]=0;
	  }
	  a[0]=d[0]=1;
	  for (i=254; i>=0; --i) {
	    r=(z[i>>>3]>>>(i&7))&1;
	    sel25519(a,b,r);
	    sel25519(c,d,r);
	    A(e,a,c);
	    Z(a,a,c);
	    A(c,b,d);
	    Z(b,b,d);
	    S(d,e);
	    S(f,a);
	    M(a,c,a);
	    M(c,b,e);
	    A(e,a,c);
	    Z(a,a,c);
	    S(b,a);
	    Z(c,d,f);
	    M(a,c,_121665);
	    A(a,a,d);
	    M(c,c,a);
	    M(a,d,f);
	    M(d,b,x);
	    S(b,e);
	    sel25519(a,b,r);
	    sel25519(c,d,r);
	  }
	  for (i = 0; i < 16; i++) {
	    x[i+16]=a[i];
	    x[i+32]=c[i];
	    x[i+48]=b[i];
	    x[i+64]=d[i];
	  }
	  var x32 = x.subarray(32);
	  var x16 = x.subarray(16);
	  inv25519(x32,x32);
	  M(x16,x16,x32);
	  pack25519(q,x16);
	  return 0;
	}

	function crypto_scalarmult_base(q, n) {
	  return crypto_scalarmult(q, n, _9);
	}

	function crypto_box_keypair(y, x) {
	  randombytes(x, 32);
	  return crypto_scalarmult_base(y, x);
	}

	function crypto_box_beforenm(k, y, x) {
	  var s = new Uint8Array(32);
	  crypto_scalarmult(s, x, y);
	  return crypto_core_hsalsa20(k, _0, s, sigma);
	}

	var crypto_box_afternm = crypto_secretbox;
	var crypto_box_open_afternm = crypto_secretbox_open;

	function crypto_box(c, m, d, n, y, x) {
	  var k = new Uint8Array(32);
	  crypto_box_beforenm(k, y, x);
	  return crypto_box_afternm(c, m, d, n, k);
	}

	function crypto_box_open(m, c, d, n, y, x) {
	  var k = new Uint8Array(32);
	  crypto_box_beforenm(k, y, x);
	  return crypto_box_open_afternm(m, c, d, n, k);
	}

	var K = [
	  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
	  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
	  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
	  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
	  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
	  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
	  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
	  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
	  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
	  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
	  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
	  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
	  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
	  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
	  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
	  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
	  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
	  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
	  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
	  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
	  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
	  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
	  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
	  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
	  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
	  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
	  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
	  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
	  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
	  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
	  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
	  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
	  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
	  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
	  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
	  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
	  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
	  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
	  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
	  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
	];

	function crypto_hashblocks_hl(hh, hl, m, n) {
	  var wh = new Int32Array(16), wl = new Int32Array(16),
	      bh0, bh1, bh2, bh3, bh4, bh5, bh6, bh7,
	      bl0, bl1, bl2, bl3, bl4, bl5, bl6, bl7,
	      th, tl, i, j, h, l, a, b, c, d;

	  var ah0 = hh[0],
	      ah1 = hh[1],
	      ah2 = hh[2],
	      ah3 = hh[3],
	      ah4 = hh[4],
	      ah5 = hh[5],
	      ah6 = hh[6],
	      ah7 = hh[7],

	      al0 = hl[0],
	      al1 = hl[1],
	      al2 = hl[2],
	      al3 = hl[3],
	      al4 = hl[4],
	      al5 = hl[5],
	      al6 = hl[6],
	      al7 = hl[7];

	  var pos = 0;
	  while (n >= 128) {
	    for (i = 0; i < 16; i++) {
	      j = 8 * i + pos;
	      wh[i] = (m[j+0] << 24) | (m[j+1] << 16) | (m[j+2] << 8) | m[j+3];
	      wl[i] = (m[j+4] << 24) | (m[j+5] << 16) | (m[j+6] << 8) | m[j+7];
	    }
	    for (i = 0; i < 80; i++) {
	      bh0 = ah0;
	      bh1 = ah1;
	      bh2 = ah2;
	      bh3 = ah3;
	      bh4 = ah4;
	      bh5 = ah5;
	      bh6 = ah6;
	      bh7 = ah7;

	      bl0 = al0;
	      bl1 = al1;
	      bl2 = al2;
	      bl3 = al3;
	      bl4 = al4;
	      bl5 = al5;
	      bl6 = al6;
	      bl7 = al7;

	      // add
	      h = ah7;
	      l = al7;

	      a = l & 0xffff; b = l >>> 16;
	      c = h & 0xffff; d = h >>> 16;

	      // Sigma1
	      h = ((ah4 >>> 14) | (al4 << (32-14))) ^ ((ah4 >>> 18) | (al4 << (32-18))) ^ ((al4 >>> (41-32)) | (ah4 << (32-(41-32))));
	      l = ((al4 >>> 14) | (ah4 << (32-14))) ^ ((al4 >>> 18) | (ah4 << (32-18))) ^ ((ah4 >>> (41-32)) | (al4 << (32-(41-32))));

	      a += l & 0xffff; b += l >>> 16;
	      c += h & 0xffff; d += h >>> 16;

	      // Ch
	      h = (ah4 & ah5) ^ (~ah4 & ah6);
	      l = (al4 & al5) ^ (~al4 & al6);

	      a += l & 0xffff; b += l >>> 16;
	      c += h & 0xffff; d += h >>> 16;

	      // K
	      h = K[i*2];
	      l = K[i*2+1];

	      a += l & 0xffff; b += l >>> 16;
	      c += h & 0xffff; d += h >>> 16;

	      // w
	      h = wh[i%16];
	      l = wl[i%16];

	      a += l & 0xffff; b += l >>> 16;
	      c += h & 0xffff; d += h >>> 16;

	      b += a >>> 16;
	      c += b >>> 16;
	      d += c >>> 16;

	      th = c & 0xffff | d << 16;
	      tl = a & 0xffff | b << 16;

	      // add
	      h = th;
	      l = tl;

	      a = l & 0xffff; b = l >>> 16;
	      c = h & 0xffff; d = h >>> 16;

	      // Sigma0
	      h = ((ah0 >>> 28) | (al0 << (32-28))) ^ ((al0 >>> (34-32)) | (ah0 << (32-(34-32)))) ^ ((al0 >>> (39-32)) | (ah0 << (32-(39-32))));
	      l = ((al0 >>> 28) | (ah0 << (32-28))) ^ ((ah0 >>> (34-32)) | (al0 << (32-(34-32)))) ^ ((ah0 >>> (39-32)) | (al0 << (32-(39-32))));

	      a += l & 0xffff; b += l >>> 16;
	      c += h & 0xffff; d += h >>> 16;

	      // Maj
	      h = (ah0 & ah1) ^ (ah0 & ah2) ^ (ah1 & ah2);
	      l = (al0 & al1) ^ (al0 & al2) ^ (al1 & al2);

	      a += l & 0xffff; b += l >>> 16;
	      c += h & 0xffff; d += h >>> 16;

	      b += a >>> 16;
	      c += b >>> 16;
	      d += c >>> 16;

	      bh7 = (c & 0xffff) | (d << 16);
	      bl7 = (a & 0xffff) | (b << 16);

	      // add
	      h = bh3;
	      l = bl3;

	      a = l & 0xffff; b = l >>> 16;
	      c = h & 0xffff; d = h >>> 16;

	      h = th;
	      l = tl;

	      a += l & 0xffff; b += l >>> 16;
	      c += h & 0xffff; d += h >>> 16;

	      b += a >>> 16;
	      c += b >>> 16;
	      d += c >>> 16;

	      bh3 = (c & 0xffff) | (d << 16);
	      bl3 = (a & 0xffff) | (b << 16);

	      ah1 = bh0;
	      ah2 = bh1;
	      ah3 = bh2;
	      ah4 = bh3;
	      ah5 = bh4;
	      ah6 = bh5;
	      ah7 = bh6;
	      ah0 = bh7;

	      al1 = bl0;
	      al2 = bl1;
	      al3 = bl2;
	      al4 = bl3;
	      al5 = bl4;
	      al6 = bl5;
	      al7 = bl6;
	      al0 = bl7;

	      if (i%16 === 15) {
	        for (j = 0; j < 16; j++) {
	          // add
	          h = wh[j];
	          l = wl[j];

	          a = l & 0xffff; b = l >>> 16;
	          c = h & 0xffff; d = h >>> 16;

	          h = wh[(j+9)%16];
	          l = wl[(j+9)%16];

	          a += l & 0xffff; b += l >>> 16;
	          c += h & 0xffff; d += h >>> 16;

	          // sigma0
	          th = wh[(j+1)%16];
	          tl = wl[(j+1)%16];
	          h = ((th >>> 1) | (tl << (32-1))) ^ ((th >>> 8) | (tl << (32-8))) ^ (th >>> 7);
	          l = ((tl >>> 1) | (th << (32-1))) ^ ((tl >>> 8) | (th << (32-8))) ^ ((tl >>> 7) | (th << (32-7)));

	          a += l & 0xffff; b += l >>> 16;
	          c += h & 0xffff; d += h >>> 16;

	          // sigma1
	          th = wh[(j+14)%16];
	          tl = wl[(j+14)%16];
	          h = ((th >>> 19) | (tl << (32-19))) ^ ((tl >>> (61-32)) | (th << (32-(61-32)))) ^ (th >>> 6);
	          l = ((tl >>> 19) | (th << (32-19))) ^ ((th >>> (61-32)) | (tl << (32-(61-32)))) ^ ((tl >>> 6) | (th << (32-6)));

	          a += l & 0xffff; b += l >>> 16;
	          c += h & 0xffff; d += h >>> 16;

	          b += a >>> 16;
	          c += b >>> 16;
	          d += c >>> 16;

	          wh[j] = (c & 0xffff) | (d << 16);
	          wl[j] = (a & 0xffff) | (b << 16);
	        }
	      }
	    }

	    // add
	    h = ah0;
	    l = al0;

	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;

	    h = hh[0];
	    l = hl[0];

	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;

	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;

	    hh[0] = ah0 = (c & 0xffff) | (d << 16);
	    hl[0] = al0 = (a & 0xffff) | (b << 16);

	    h = ah1;
	    l = al1;

	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;

	    h = hh[1];
	    l = hl[1];

	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;

	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;

	    hh[1] = ah1 = (c & 0xffff) | (d << 16);
	    hl[1] = al1 = (a & 0xffff) | (b << 16);

	    h = ah2;
	    l = al2;

	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;

	    h = hh[2];
	    l = hl[2];

	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;

	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;

	    hh[2] = ah2 = (c & 0xffff) | (d << 16);
	    hl[2] = al2 = (a & 0xffff) | (b << 16);

	    h = ah3;
	    l = al3;

	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;

	    h = hh[3];
	    l = hl[3];

	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;

	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;

	    hh[3] = ah3 = (c & 0xffff) | (d << 16);
	    hl[3] = al3 = (a & 0xffff) | (b << 16);

	    h = ah4;
	    l = al4;

	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;

	    h = hh[4];
	    l = hl[4];

	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;

	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;

	    hh[4] = ah4 = (c & 0xffff) | (d << 16);
	    hl[4] = al4 = (a & 0xffff) | (b << 16);

	    h = ah5;
	    l = al5;

	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;

	    h = hh[5];
	    l = hl[5];

	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;

	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;

	    hh[5] = ah5 = (c & 0xffff) | (d << 16);
	    hl[5] = al5 = (a & 0xffff) | (b << 16);

	    h = ah6;
	    l = al6;

	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;

	    h = hh[6];
	    l = hl[6];

	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;

	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;

	    hh[6] = ah6 = (c & 0xffff) | (d << 16);
	    hl[6] = al6 = (a & 0xffff) | (b << 16);

	    h = ah7;
	    l = al7;

	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;

	    h = hh[7];
	    l = hl[7];

	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;

	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;

	    hh[7] = ah7 = (c & 0xffff) | (d << 16);
	    hl[7] = al7 = (a & 0xffff) | (b << 16);

	    pos += 128;
	    n -= 128;
	  }

	  return n;
	}

	function crypto_hash(out, m, n) {
	  var hh = new Int32Array(8),
	      hl = new Int32Array(8),
	      x = new Uint8Array(256),
	      i, b = n;

	  hh[0] = 0x6a09e667;
	  hh[1] = 0xbb67ae85;
	  hh[2] = 0x3c6ef372;
	  hh[3] = 0xa54ff53a;
	  hh[4] = 0x510e527f;
	  hh[5] = 0x9b05688c;
	  hh[6] = 0x1f83d9ab;
	  hh[7] = 0x5be0cd19;

	  hl[0] = 0xf3bcc908;
	  hl[1] = 0x84caa73b;
	  hl[2] = 0xfe94f82b;
	  hl[3] = 0x5f1d36f1;
	  hl[4] = 0xade682d1;
	  hl[5] = 0x2b3e6c1f;
	  hl[6] = 0xfb41bd6b;
	  hl[7] = 0x137e2179;

	  crypto_hashblocks_hl(hh, hl, m, n);
	  n %= 128;

	  for (i = 0; i < n; i++) x[i] = m[b-n+i];
	  x[n] = 128;

	  n = 256-128*(n<112?1:0);
	  x[n-9] = 0;
	  ts64(x, n-8,  (b / 0x20000000) | 0, b << 3);
	  crypto_hashblocks_hl(hh, hl, x, n);

	  for (i = 0; i < 8; i++) ts64(out, 8*i, hh[i], hl[i]);

	  return 0;
	}

	function add(p, q) {
	  var a = gf(), b = gf(), c = gf(),
	      d = gf(), e = gf(), f = gf(),
	      g = gf(), h = gf(), t = gf();

	  Z(a, p[1], p[0]);
	  Z(t, q[1], q[0]);
	  M(a, a, t);
	  A(b, p[0], p[1]);
	  A(t, q[0], q[1]);
	  M(b, b, t);
	  M(c, p[3], q[3]);
	  M(c, c, D2);
	  M(d, p[2], q[2]);
	  A(d, d, d);
	  Z(e, b, a);
	  Z(f, d, c);
	  A(g, d, c);
	  A(h, b, a);

	  M(p[0], e, f);
	  M(p[1], h, g);
	  M(p[2], g, f);
	  M(p[3], e, h);
	}

	function cswap(p, q, b) {
	  var i;
	  for (i = 0; i < 4; i++) {
	    sel25519(p[i], q[i], b);
	  }
	}

	function pack(r, p) {
	  var tx = gf(), ty = gf(), zi = gf();
	  inv25519(zi, p[2]);
	  M(tx, p[0], zi);
	  M(ty, p[1], zi);
	  pack25519(r, ty);
	  r[31] ^= par25519(tx) << 7;
	}

	function scalarmult(p, q, s) {
	  var b, i;
	  set25519(p[0], gf0);
	  set25519(p[1], gf1);
	  set25519(p[2], gf1);
	  set25519(p[3], gf0);
	  for (i = 255; i >= 0; --i) {
	    b = (s[(i/8)|0] >> (i&7)) & 1;
	    cswap(p, q, b);
	    add(q, p);
	    add(p, p);
	    cswap(p, q, b);
	  }
	}

	function scalarbase(p, s) {
	  var q = [gf(), gf(), gf(), gf()];
	  set25519(q[0], X);
	  set25519(q[1], Y);
	  set25519(q[2], gf1);
	  M(q[3], X, Y);
	  scalarmult(p, q, s);
	}

	function crypto_sign_keypair(pk, sk, seeded) {
	  var d = new Uint8Array(64);
	  var p = [gf(), gf(), gf(), gf()];
	  var i;

	  if (!seeded) randombytes(sk, 32);
	  crypto_hash(d, sk, 32);
	  d[0] &= 248;
	  d[31] &= 127;
	  d[31] |= 64;

	  scalarbase(p, d);
	  pack(pk, p);

	  for (i = 0; i < 32; i++) sk[i+32] = pk[i];
	  return 0;
	}

	var L = new Float64Array([0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10]);

	function modL(r, x) {
	  var carry, i, j, k;
	  for (i = 63; i >= 32; --i) {
	    carry = 0;
	    for (j = i - 32, k = i - 12; j < k; ++j) {
	      x[j] += carry - 16 * x[i] * L[j - (i - 32)];
	      carry = (x[j] + 128) >> 8;
	      x[j] -= carry * 256;
	    }
	    x[j] += carry;
	    x[i] = 0;
	  }
	  carry = 0;
	  for (j = 0; j < 32; j++) {
	    x[j] += carry - (x[31] >> 4) * L[j];
	    carry = x[j] >> 8;
	    x[j] &= 255;
	  }
	  for (j = 0; j < 32; j++) x[j] -= carry * L[j];
	  for (i = 0; i < 32; i++) {
	    x[i+1] += x[i] >> 8;
	    r[i] = x[i] & 255;
	  }
	}

	function reduce(r) {
	  var x = new Float64Array(64), i;
	  for (i = 0; i < 64; i++) x[i] = r[i];
	  for (i = 0; i < 64; i++) r[i] = 0;
	  modL(r, x);
	}

	// Note: difference from C - smlen returned, not passed as argument.
	function crypto_sign(sm, m, n, sk) {
	  var d = new Uint8Array(64), h = new Uint8Array(64), r = new Uint8Array(64);
	  var i, j, x = new Float64Array(64);
	  var p = [gf(), gf(), gf(), gf()];

	  crypto_hash(d, sk, 32);
	  d[0] &= 248;
	  d[31] &= 127;
	  d[31] |= 64;

	  var smlen = n + 64;
	  for (i = 0; i < n; i++) sm[64 + i] = m[i];
	  for (i = 0; i < 32; i++) sm[32 + i] = d[32 + i];

	  crypto_hash(r, sm.subarray(32), n+32);
	  reduce(r);
	  scalarbase(p, r);
	  pack(sm, p);

	  for (i = 32; i < 64; i++) sm[i] = sk[i];
	  crypto_hash(h, sm, n + 64);
	  reduce(h);

	  for (i = 0; i < 64; i++) x[i] = 0;
	  for (i = 0; i < 32; i++) x[i] = r[i];
	  for (i = 0; i < 32; i++) {
	    for (j = 0; j < 32; j++) {
	      x[i+j] += h[i] * d[j];
	    }
	  }

	  modL(sm.subarray(32), x);
	  return smlen;
	}

	function unpackneg(r, p) {
	  var t = gf(), chk = gf(), num = gf(),
	      den = gf(), den2 = gf(), den4 = gf(),
	      den6 = gf();

	  set25519(r[2], gf1);
	  unpack25519(r[1], p);
	  S(num, r[1]);
	  M(den, num, D);
	  Z(num, num, r[2]);
	  A(den, r[2], den);

	  S(den2, den);
	  S(den4, den2);
	  M(den6, den4, den2);
	  M(t, den6, num);
	  M(t, t, den);

	  pow2523(t, t);
	  M(t, t, num);
	  M(t, t, den);
	  M(t, t, den);
	  M(r[0], t, den);

	  S(chk, r[0]);
	  M(chk, chk, den);
	  if (neq25519(chk, num)) M(r[0], r[0], I);

	  S(chk, r[0]);
	  M(chk, chk, den);
	  if (neq25519(chk, num)) return -1;

	  if (par25519(r[0]) === (p[31]>>7)) Z(r[0], gf0, r[0]);

	  M(r[3], r[0], r[1]);
	  return 0;
	}

	function crypto_sign_open(m, sm, n, pk) {
	  var i, mlen;
	  var t = new Uint8Array(32), h = new Uint8Array(64);
	  var p = [gf(), gf(), gf(), gf()],
	      q = [gf(), gf(), gf(), gf()];

	  mlen = -1;
	  if (n < 64) return -1;

	  if (unpackneg(q, pk)) return -1;

	  for (i = 0; i < n; i++) m[i] = sm[i];
	  for (i = 0; i < 32; i++) m[i+32] = pk[i];
	  crypto_hash(h, m, n);
	  reduce(h);
	  scalarmult(p, q, h);

	  scalarbase(q, sm.subarray(32));
	  add(p, q);
	  pack(t, p);

	  n -= 64;
	  if (crypto_verify_32(sm, 0, t, 0)) {
	    for (i = 0; i < n; i++) m[i] = 0;
	    return -1;
	  }

	  for (i = 0; i < n; i++) m[i] = sm[i + 64];
	  mlen = n;
	  return mlen;
	}

	var crypto_secretbox_KEYBYTES = 32,
	    crypto_secretbox_NONCEBYTES = 24,
	    crypto_secretbox_ZEROBYTES = 32,
	    crypto_secretbox_BOXZEROBYTES = 16,
	    crypto_scalarmult_BYTES = 32,
	    crypto_scalarmult_SCALARBYTES = 32,
	    crypto_box_PUBLICKEYBYTES = 32,
	    crypto_box_SECRETKEYBYTES = 32,
	    crypto_box_BEFORENMBYTES = 32,
	    crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES,
	    crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES,
	    crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES,
	    crypto_sign_BYTES = 64,
	    crypto_sign_PUBLICKEYBYTES = 32,
	    crypto_sign_SECRETKEYBYTES = 64,
	    crypto_sign_SEEDBYTES = 32,
	    crypto_hash_BYTES = 64;

	nacl.lowlevel = {
	  crypto_core_hsalsa20: crypto_core_hsalsa20,
	  crypto_stream_xor: crypto_stream_xor,
	  crypto_stream: crypto_stream,
	  crypto_stream_salsa20_xor: crypto_stream_salsa20_xor,
	  crypto_stream_salsa20: crypto_stream_salsa20,
	  crypto_onetimeauth: crypto_onetimeauth,
	  crypto_onetimeauth_verify: crypto_onetimeauth_verify,
	  crypto_verify_16: crypto_verify_16,
	  crypto_verify_32: crypto_verify_32,
	  crypto_secretbox: crypto_secretbox,
	  crypto_secretbox_open: crypto_secretbox_open,
	  crypto_scalarmult: crypto_scalarmult,
	  crypto_scalarmult_base: crypto_scalarmult_base,
	  crypto_box_beforenm: crypto_box_beforenm,
	  crypto_box_afternm: crypto_box_afternm,
	  crypto_box: crypto_box,
	  crypto_box_open: crypto_box_open,
	  crypto_box_keypair: crypto_box_keypair,
	  crypto_hash: crypto_hash,
	  crypto_sign: crypto_sign,
	  crypto_sign_keypair: crypto_sign_keypair,
	  crypto_sign_open: crypto_sign_open,

	  crypto_secretbox_KEYBYTES: crypto_secretbox_KEYBYTES,
	  crypto_secretbox_NONCEBYTES: crypto_secretbox_NONCEBYTES,
	  crypto_secretbox_ZEROBYTES: crypto_secretbox_ZEROBYTES,
	  crypto_secretbox_BOXZEROBYTES: crypto_secretbox_BOXZEROBYTES,
	  crypto_scalarmult_BYTES: crypto_scalarmult_BYTES,
	  crypto_scalarmult_SCALARBYTES: crypto_scalarmult_SCALARBYTES,
	  crypto_box_PUBLICKEYBYTES: crypto_box_PUBLICKEYBYTES,
	  crypto_box_SECRETKEYBYTES: crypto_box_SECRETKEYBYTES,
	  crypto_box_BEFORENMBYTES: crypto_box_BEFORENMBYTES,
	  crypto_box_NONCEBYTES: crypto_box_NONCEBYTES,
	  crypto_box_ZEROBYTES: crypto_box_ZEROBYTES,
	  crypto_box_BOXZEROBYTES: crypto_box_BOXZEROBYTES,
	  crypto_sign_BYTES: crypto_sign_BYTES,
	  crypto_sign_PUBLICKEYBYTES: crypto_sign_PUBLICKEYBYTES,
	  crypto_sign_SECRETKEYBYTES: crypto_sign_SECRETKEYBYTES,
	  crypto_sign_SEEDBYTES: crypto_sign_SEEDBYTES,
	  crypto_hash_BYTES: crypto_hash_BYTES
	};

	/* High-level API */

	function checkLengths(k, n) {
	  if (k.length !== crypto_secretbox_KEYBYTES) throw new Error('bad key size');
	  if (n.length !== crypto_secretbox_NONCEBYTES) throw new Error('bad nonce size');
	}

	function checkBoxLengths(pk, sk) {
	  if (pk.length !== crypto_box_PUBLICKEYBYTES) throw new Error('bad public key size');
	  if (sk.length !== crypto_box_SECRETKEYBYTES) throw new Error('bad secret key size');
	}

	function checkArrayTypes() {
	  var t, i;
	  for (i = 0; i < arguments.length; i++) {
	     if ((t = Object.prototype.toString.call(arguments[i])) !== '[object Uint8Array]')
	       throw new TypeError('unexpected type ' + t + ', use Uint8Array');
	  }
	}

	function cleanup(arr) {
	  for (var i = 0; i < arr.length; i++) arr[i] = 0;
	}

	// TODO: Completely remove this in v0.15.
	if (!nacl.util) {
	  nacl.util = {};
	  nacl.util.decodeUTF8 = nacl.util.encodeUTF8 = nacl.util.encodeBase64 = nacl.util.decodeBase64 = function() {
	    throw new Error('nacl.util moved into separate package: https://github.com/dchest/tweetnacl-util-js');
	  };
	}

	nacl.randomBytes = function(n) {
	  var b = new Uint8Array(n);
	  randombytes(b, n);
	  return b;
	};

	nacl.secretbox = function(msg, nonce, key) {
	  checkArrayTypes(msg, nonce, key);
	  checkLengths(key, nonce);
	  var m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);
	  var c = new Uint8Array(m.length);
	  for (var i = 0; i < msg.length; i++) m[i+crypto_secretbox_ZEROBYTES] = msg[i];
	  crypto_secretbox(c, m, m.length, nonce, key);
	  return c.subarray(crypto_secretbox_BOXZEROBYTES);
	};

	nacl.secretbox.open = function(box, nonce, key) {
	  checkArrayTypes(box, nonce, key);
	  checkLengths(key, nonce);
	  var c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);
	  var m = new Uint8Array(c.length);
	  for (var i = 0; i < box.length; i++) c[i+crypto_secretbox_BOXZEROBYTES] = box[i];
	  if (c.length < 32) return false;
	  if (crypto_secretbox_open(m, c, c.length, nonce, key) !== 0) return false;
	  return m.subarray(crypto_secretbox_ZEROBYTES);
	};

	nacl.secretbox.keyLength = crypto_secretbox_KEYBYTES;
	nacl.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;
	nacl.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;

	nacl.scalarMult = function(n, p) {
	  checkArrayTypes(n, p);
	  if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
	  if (p.length !== crypto_scalarmult_BYTES) throw new Error('bad p size');
	  var q = new Uint8Array(crypto_scalarmult_BYTES);
	  crypto_scalarmult(q, n, p);
	  return q;
	};

	nacl.scalarMult.base = function(n) {
	  checkArrayTypes(n);
	  if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
	  var q = new Uint8Array(crypto_scalarmult_BYTES);
	  crypto_scalarmult_base(q, n);
	  return q;
	};

	nacl.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;
	nacl.scalarMult.groupElementLength = crypto_scalarmult_BYTES;

	nacl.box = function(msg, nonce, publicKey, secretKey) {
	  var k = nacl.box.before(publicKey, secretKey);
	  return nacl.secretbox(msg, nonce, k);
	};

	nacl.box.before = function(publicKey, secretKey) {
	  checkArrayTypes(publicKey, secretKey);
	  checkBoxLengths(publicKey, secretKey);
	  var k = new Uint8Array(crypto_box_BEFORENMBYTES);
	  crypto_box_beforenm(k, publicKey, secretKey);
	  return k;
	};

	nacl.box.after = nacl.secretbox;

	nacl.box.open = function(msg, nonce, publicKey, secretKey) {
	  var k = nacl.box.before(publicKey, secretKey);
	  return nacl.secretbox.open(msg, nonce, k);
	};

	nacl.box.open.after = nacl.secretbox.open;

	nacl.box.keyPair = function() {
	  var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
	  var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);
	  crypto_box_keypair(pk, sk);
	  return {publicKey: pk, secretKey: sk};
	};

	nacl.box.keyPair.fromSecretKey = function(secretKey) {
	  checkArrayTypes(secretKey);
	  if (secretKey.length !== crypto_box_SECRETKEYBYTES)
	    throw new Error('bad secret key size');
	  var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
	  crypto_scalarmult_base(pk, secretKey);
	  return {publicKey: pk, secretKey: new Uint8Array(secretKey)};
	};

	nacl.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;
	nacl.box.secretKeyLength = crypto_box_SECRETKEYBYTES;
	nacl.box.sharedKeyLength = crypto_box_BEFORENMBYTES;
	nacl.box.nonceLength = crypto_box_NONCEBYTES;
	nacl.box.overheadLength = nacl.secretbox.overheadLength;

	nacl.sign = function(msg, secretKey) {
	  checkArrayTypes(msg, secretKey);
	  if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
	    throw new Error('bad secret key size');
	  var signedMsg = new Uint8Array(crypto_sign_BYTES+msg.length);
	  crypto_sign(signedMsg, msg, msg.length, secretKey);
	  return signedMsg;
	};

	nacl.sign.open = function(signedMsg, publicKey) {
	  if (arguments.length !== 2)
	    throw new Error('nacl.sign.open accepts 2 arguments; did you mean to use nacl.sign.detached.verify?');
	  checkArrayTypes(signedMsg, publicKey);
	  if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
	    throw new Error('bad public key size');
	  var tmp = new Uint8Array(signedMsg.length);
	  var mlen = crypto_sign_open(tmp, signedMsg, signedMsg.length, publicKey);
	  if (mlen < 0) return null;
	  var m = new Uint8Array(mlen);
	  for (var i = 0; i < m.length; i++) m[i] = tmp[i];
	  return m;
	};

	nacl.sign.detached = function(msg, secretKey) {
	  var signedMsg = nacl.sign(msg, secretKey);
	  var sig = new Uint8Array(crypto_sign_BYTES);
	  for (var i = 0; i < sig.length; i++) sig[i] = signedMsg[i];
	  return sig;
	};

	nacl.sign.detached.verify = function(msg, sig, publicKey) {
	  checkArrayTypes(msg, sig, publicKey);
	  if (sig.length !== crypto_sign_BYTES)
	    throw new Error('bad signature size');
	  if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
	    throw new Error('bad public key size');
	  var sm = new Uint8Array(crypto_sign_BYTES + msg.length);
	  var m = new Uint8Array(crypto_sign_BYTES + msg.length);
	  var i;
	  for (i = 0; i < crypto_sign_BYTES; i++) sm[i] = sig[i];
	  for (i = 0; i < msg.length; i++) sm[i+crypto_sign_BYTES] = msg[i];
	  return (crypto_sign_open(m, sm, sm.length, publicKey) >= 0);
	};

	nacl.sign.keyPair = function() {
	  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
	  var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
	  crypto_sign_keypair(pk, sk);
	  return {publicKey: pk, secretKey: sk};
	};

	nacl.sign.keyPair.fromSecretKey = function(secretKey) {
	  checkArrayTypes(secretKey);
	  if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
	    throw new Error('bad secret key size');
	  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
	  for (var i = 0; i < pk.length; i++) pk[i] = secretKey[32+i];
	  return {publicKey: pk, secretKey: new Uint8Array(secretKey)};
	};

	nacl.sign.keyPair.fromSeed = function(seed) {
	  checkArrayTypes(seed);
	  if (seed.length !== crypto_sign_SEEDBYTES)
	    throw new Error('bad seed size');
	  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
	  var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
	  for (var i = 0; i < 32; i++) sk[i] = seed[i];
	  crypto_sign_keypair(pk, sk, true);
	  return {publicKey: pk, secretKey: sk};
	};

	nacl.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;
	nacl.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;
	nacl.sign.seedLength = crypto_sign_SEEDBYTES;
	nacl.sign.signatureLength = crypto_sign_BYTES;

	nacl.hash = function(msg) {
	  checkArrayTypes(msg);
	  var h = new Uint8Array(crypto_hash_BYTES);
	  crypto_hash(h, msg, msg.length);
	  return h;
	};

	nacl.hash.hashLength = crypto_hash_BYTES;

	nacl.verify = function(x, y) {
	  checkArrayTypes(x, y);
	  // Zero length arguments are considered not equal.
	  if (x.length === 0 || y.length === 0) return false;
	  if (x.length !== y.length) return false;
	  return (vn(x, 0, y, 0, x.length) === 0) ? true : false;
	};

	nacl.setPRNG = function(fn) {
	  randombytes = fn;
	};

	(function() {
	  // Initialize PRNG if environment provides CSPRNG.
	  // If not, methods calling randombytes will throw.
	  var crypto = typeof self !== 'undefined' ? (self.crypto || self.msCrypto) : null;
	  if (crypto && crypto.getRandomValues) {
	    // Browsers.
	    var QUOTA = 65536;
	    nacl.setPRNG(function(x, n) {
	      var i, v = new Uint8Array(n);
	      for (i = 0; i < n; i += QUOTA) {
	        crypto.getRandomValues(v.subarray(i, i + Math.min(n - i, QUOTA)));
	      }
	      for (i = 0; i < n; i++) x[i] = v[i];
	      cleanup(v);
	    });
	  } else if (typeof commonjsRequire !== 'undefined') {
	    // Node.js.
	    crypto = crypto__default['default'];
	    if (crypto && crypto.randomBytes) {
	      nacl.setPRNG(function(x, n) {
	        var i, v = crypto.randomBytes(n);
	        for (i = 0; i < n; i++) x[i] = v[i];
	        cleanup(v);
	      });
	    }
	  }
	})();

	})(module.exports ? module.exports : (self.nacl = self.nacl || {}));
	});

	// Copyright 2015 Joyent, Inc.

	var utils$3 = {
		bufferSplit: bufferSplit,
		addRSAMissing: addRSAMissing,
		calculateDSAPublic: calculateDSAPublic,
		calculateED25519Public: calculateED25519Public,
		calculateX25519Public: calculateX25519Public,
		mpNormalize: mpNormalize,
		mpDenormalize: mpDenormalize,
		ecNormalize: ecNormalize,
		countZeros: countZeros,
		assertCompatible: assertCompatible,
		isCompatible: isCompatible,
		opensslKeyDeriv: opensslKeyDeriv,
		opensshCipherInfo: opensshCipherInfo,
		publicFromPrivateECDSA: publicFromPrivateECDSA,
		zeroPadToLength: zeroPadToLength,
		writeBitString: writeBitString,
		readBitString: readBitString,
		pbkdf2: pbkdf2
	};


	var Buffer$x = safer_1.Buffer;







	var jsbn$1 = jsbn$2.BigInteger;


	var MAX_CLASS_DEPTH = 3;

	function isCompatible(obj, klass, needVer) {
		if (obj === null || typeof (obj) !== 'object')
			return (false);
		if (needVer === undefined)
			needVer = klass.prototype._sshpkApiVersion;
		if (obj instanceof klass &&
		    klass.prototype._sshpkApiVersion[0] == needVer[0])
			return (true);
		var proto = Object.getPrototypeOf(obj);
		var depth = 0;
		while (proto.constructor.name !== klass.name) {
			proto = Object.getPrototypeOf(proto);
			if (!proto || ++depth > MAX_CLASS_DEPTH)
				return (false);
		}
		if (proto.constructor.name !== klass.name)
			return (false);
		var ver = proto._sshpkApiVersion;
		if (ver === undefined)
			ver = klass._oldVersionDetect(obj);
		if (ver[0] != needVer[0] || ver[1] < needVer[1])
			return (false);
		return (true);
	}

	function assertCompatible(obj, klass, needVer, name) {
		if (name === undefined)
			name = 'object';
		assert_1.ok(obj, name + ' must not be null');
		assert_1.object(obj, name + ' must be an object');
		if (needVer === undefined)
			needVer = klass.prototype._sshpkApiVersion;
		if (obj instanceof klass &&
		    klass.prototype._sshpkApiVersion[0] == needVer[0])
			return;
		var proto = Object.getPrototypeOf(obj);
		var depth = 0;
		while (proto.constructor.name !== klass.name) {
			proto = Object.getPrototypeOf(proto);
			assert_1.ok(proto && ++depth <= MAX_CLASS_DEPTH,
			    name + ' must be a ' + klass.name + ' instance');
		}
		assert_1.strictEqual(proto.constructor.name, klass.name,
		    name + ' must be a ' + klass.name + ' instance');
		var ver = proto._sshpkApiVersion;
		if (ver === undefined)
			ver = klass._oldVersionDetect(obj);
		assert_1.ok(ver[0] == needVer[0] && ver[1] >= needVer[1],
		    name + ' must be compatible with ' + klass.name + ' klass ' +
		    'version ' + needVer[0] + '.' + needVer[1]);
	}

	var CIPHER_LEN = {
		'des-ede3-cbc': { key: 24, iv: 8 },
		'aes-128-cbc': { key: 16, iv: 16 },
		'aes-256-cbc': { key: 32, iv: 16 }
	};
	var PKCS5_SALT_LEN = 8;

	function opensslKeyDeriv(cipher, salt, passphrase, count) {
		assert_1.buffer(salt, 'salt');
		assert_1.buffer(passphrase, 'passphrase');
		assert_1.number(count, 'iteration count');

		var clen = CIPHER_LEN[cipher];
		assert_1.object(clen, 'supported cipher');

		salt = salt.slice(0, PKCS5_SALT_LEN);

		var D, D_prev, bufs;
		var material = Buffer$x.alloc(0);
		while (material.length < clen.key + clen.iv) {
			bufs = [];
			if (D_prev)
				bufs.push(D_prev);
			bufs.push(passphrase);
			bufs.push(salt);
			D = Buffer$x.concat(bufs);
			for (var j = 0; j < count; ++j)
				D = crypto__default['default'].createHash('md5').update(D).digest();
			material = Buffer$x.concat([material, D]);
			D_prev = D;
		}

		return ({
		    key: material.slice(0, clen.key),
		    iv: material.slice(clen.key, clen.key + clen.iv)
		});
	}

	/* See: RFC2898 */
	function pbkdf2(hashAlg, salt, iterations, size, passphrase) {
		var hkey = Buffer$x.alloc(salt.length + 4);
		salt.copy(hkey);

		var gen = 0, ts = [];
		var i = 1;
		while (gen < size) {
			var t = T(i++);
			gen += t.length;
			ts.push(t);
		}
		return (Buffer$x.concat(ts).slice(0, size));

		function T(I) {
			hkey.writeUInt32BE(I, hkey.length - 4);

			var hmac = crypto__default['default'].createHmac(hashAlg, passphrase);
			hmac.update(hkey);

			var Ti = hmac.digest();
			var Uc = Ti;
			var c = 1;
			while (c++ < iterations) {
				hmac = crypto__default['default'].createHmac(hashAlg, passphrase);
				hmac.update(Uc);
				Uc = hmac.digest();
				for (var x = 0; x < Ti.length; ++x)
					Ti[x] ^= Uc[x];
			}
			return (Ti);
		}
	}

	/* Count leading zero bits on a buffer */
	function countZeros(buf) {
		var o = 0, obit = 8;
		while (o < buf.length) {
			var mask = (1 << obit);
			if ((buf[o] & mask) === mask)
				break;
			obit--;
			if (obit < 0) {
				o++;
				obit = 8;
			}
		}
		return (o*8 + (8 - obit) - 1);
	}

	function bufferSplit(buf, chr) {
		assert_1.buffer(buf);
		assert_1.string(chr);

		var parts = [];
		var lastPart = 0;
		var matches = 0;
		for (var i = 0; i < buf.length; ++i) {
			if (buf[i] === chr.charCodeAt(matches))
				++matches;
			else if (buf[i] === chr.charCodeAt(0))
				matches = 1;
			else
				matches = 0;

			if (matches >= chr.length) {
				var newPart = i + 1;
				parts.push(buf.slice(lastPart, newPart - matches));
				lastPart = newPart;
				matches = 0;
			}
		}
		if (lastPart <= buf.length)
			parts.push(buf.slice(lastPart, buf.length));

		return (parts);
	}

	function ecNormalize(buf, addZero) {
		assert_1.buffer(buf);
		if (buf[0] === 0x00 && buf[1] === 0x04) {
			if (addZero)
				return (buf);
			return (buf.slice(1));
		} else if (buf[0] === 0x04) {
			if (!addZero)
				return (buf);
		} else {
			while (buf[0] === 0x00)
				buf = buf.slice(1);
			if (buf[0] === 0x02 || buf[0] === 0x03)
				throw (new Error('Compressed elliptic curve points ' +
				    'are not supported'));
			if (buf[0] !== 0x04)
				throw (new Error('Not a valid elliptic curve point'));
			if (!addZero)
				return (buf);
		}
		var b = Buffer$x.alloc(buf.length + 1);
		b[0] = 0x0;
		buf.copy(b, 1);
		return (b);
	}

	function readBitString(der, tag) {
		if (tag === undefined)
			tag = lib$6.Ber.BitString;
		var buf = der.readString(tag, true);
		assert_1.strictEqual(buf[0], 0x00, 'bit strings with unused bits are ' +
		    'not supported (0x' + buf[0].toString(16) + ')');
		return (buf.slice(1));
	}

	function writeBitString(der, buf, tag) {
		if (tag === undefined)
			tag = lib$6.Ber.BitString;
		var b = Buffer$x.alloc(buf.length + 1);
		b[0] = 0x00;
		buf.copy(b, 1);
		der.writeBuffer(b, tag);
	}

	function mpNormalize(buf) {
		assert_1.buffer(buf);
		while (buf.length > 1 && buf[0] === 0x00 && (buf[1] & 0x80) === 0x00)
			buf = buf.slice(1);
		if ((buf[0] & 0x80) === 0x80) {
			var b = Buffer$x.alloc(buf.length + 1);
			b[0] = 0x00;
			buf.copy(b, 1);
			buf = b;
		}
		return (buf);
	}

	function mpDenormalize(buf) {
		assert_1.buffer(buf);
		while (buf.length > 1 && buf[0] === 0x00)
			buf = buf.slice(1);
		return (buf);
	}

	function zeroPadToLength(buf, len) {
		assert_1.buffer(buf);
		assert_1.number(len);
		while (buf.length > len) {
			assert_1.equal(buf[0], 0x00);
			buf = buf.slice(1);
		}
		while (buf.length < len) {
			var b = Buffer$x.alloc(buf.length + 1);
			b[0] = 0x00;
			buf.copy(b, 1);
			buf = b;
		}
		return (buf);
	}

	function bigintToMpBuf(bigint) {
		var buf = Buffer$x.from(bigint.toByteArray());
		buf = mpNormalize(buf);
		return (buf);
	}

	function calculateDSAPublic(g, p, x) {
		assert_1.buffer(g);
		assert_1.buffer(p);
		assert_1.buffer(x);
		g = new jsbn$1(g);
		p = new jsbn$1(p);
		x = new jsbn$1(x);
		var y = g.modPow(x, p);
		var ybuf = bigintToMpBuf(y);
		return (ybuf);
	}

	function calculateED25519Public(k) {
		assert_1.buffer(k);

		var kp = naclFast.sign.keyPair.fromSeed(new Uint8Array(k));
		return (Buffer$x.from(kp.publicKey));
	}

	function calculateX25519Public(k) {
		assert_1.buffer(k);

		var kp = naclFast.box.keyPair.fromSeed(new Uint8Array(k));
		return (Buffer$x.from(kp.publicKey));
	}

	function addRSAMissing(key) {
		assert_1.object(key);
		assertCompatible(key, privateKey, [1, 1]);

		var d = new jsbn$1(key.part.d.data);
		var buf;

		if (!key.part.dmodp) {
			var p = new jsbn$1(key.part.p.data);
			var dmodp = d.mod(p.subtract(1));

			buf = bigintToMpBuf(dmodp);
			key.part.dmodp = {name: 'dmodp', data: buf};
			key.parts.push(key.part.dmodp);
		}
		if (!key.part.dmodq) {
			var q = new jsbn$1(key.part.q.data);
			var dmodq = d.mod(q.subtract(1));

			buf = bigintToMpBuf(dmodq);
			key.part.dmodq = {name: 'dmodq', data: buf};
			key.parts.push(key.part.dmodq);
		}
	}

	function publicFromPrivateECDSA(curveName, priv) {
		assert_1.string(curveName, 'curveName');
		assert_1.buffer(priv);
		var params = algs.curves[curveName];
		var p = new jsbn$1(params.p);
		var a = new jsbn$1(params.a);
		var b = new jsbn$1(params.b);
		var curve = new ec.ECCurveFp(p, a, b);
		var G = curve.decodePointHex(params.G.toString('hex'));

		var d = new jsbn$1(mpNormalize(priv));
		var pub = G.multiply(d);
		pub = Buffer$x.from(curve.encodePointHex(pub), 'hex');

		var parts = [];
		parts.push({name: 'curve', data: Buffer$x.from(curveName)});
		parts.push({name: 'Q', data: pub});

		var key$1 = new key({type: 'ecdsa', curve: curve, parts: parts});
		return (key$1);
	}

	function opensshCipherInfo(cipher) {
		var inf = {};
		switch (cipher) {
		case '3des-cbc':
			inf.keySize = 24;
			inf.blockSize = 8;
			inf.opensslName = 'des-ede3-cbc';
			break;
		case 'blowfish-cbc':
			inf.keySize = 16;
			inf.blockSize = 8;
			inf.opensslName = 'bf-cbc';
			break;
		case 'aes128-cbc':
		case 'aes128-ctr':
		case 'aes128-gcm@openssh.com':
			inf.keySize = 16;
			inf.blockSize = 16;
			inf.opensslName = 'aes-128-' + cipher.slice(7, 10);
			break;
		case 'aes192-cbc':
		case 'aes192-ctr':
		case 'aes192-gcm@openssh.com':
			inf.keySize = 24;
			inf.blockSize = 16;
			inf.opensslName = 'aes-192-' + cipher.slice(7, 10);
			break;
		case 'aes256-cbc':
		case 'aes256-ctr':
		case 'aes256-gcm@openssh.com':
			inf.keySize = 32;
			inf.blockSize = 16;
			inf.opensslName = 'aes-256-' + cipher.slice(7, 10);
			break;
		default:
			throw (new Error(
			    'Unsupported openssl cipher "' + cipher + '"'));
		}
		return (inf);
	}

	// Copyright 2015 Joyent, Inc.

	var sshBuffer = SSHBuffer;


	var Buffer$w = safer_1.Buffer;

	function SSHBuffer(opts) {
		assert_1.object(opts, 'options');
		if (opts.buffer !== undefined)
			assert_1.buffer(opts.buffer, 'options.buffer');

		this._size = opts.buffer ? opts.buffer.length : 1024;
		this._buffer = opts.buffer || Buffer$w.alloc(this._size);
		this._offset = 0;
	}

	SSHBuffer.prototype.toBuffer = function () {
		return (this._buffer.slice(0, this._offset));
	};

	SSHBuffer.prototype.atEnd = function () {
		return (this._offset >= this._buffer.length);
	};

	SSHBuffer.prototype.remainder = function () {
		return (this._buffer.slice(this._offset));
	};

	SSHBuffer.prototype.skip = function (n) {
		this._offset += n;
	};

	SSHBuffer.prototype.expand = function () {
		this._size *= 2;
		var buf = Buffer$w.alloc(this._size);
		this._buffer.copy(buf, 0);
		this._buffer = buf;
	};

	SSHBuffer.prototype.readPart = function () {
		return ({data: this.readBuffer()});
	};

	SSHBuffer.prototype.readBuffer = function () {
		var len = this._buffer.readUInt32BE(this._offset);
		this._offset += 4;
		assert_1.ok(this._offset + len <= this._buffer.length,
		    'length out of bounds at +0x' + this._offset.toString(16) +
		    ' (data truncated?)');
		var buf = this._buffer.slice(this._offset, this._offset + len);
		this._offset += len;
		return (buf);
	};

	SSHBuffer.prototype.readString = function () {
		return (this.readBuffer().toString());
	};

	SSHBuffer.prototype.readCString = function () {
		var offset = this._offset;
		while (offset < this._buffer.length &&
		    this._buffer[offset] !== 0x00)
			offset++;
		assert_1.ok(offset < this._buffer.length, 'c string does not terminate');
		var str = this._buffer.slice(this._offset, offset).toString();
		this._offset = offset + 1;
		return (str);
	};

	SSHBuffer.prototype.readInt = function () {
		var v = this._buffer.readUInt32BE(this._offset);
		this._offset += 4;
		return (v);
	};

	SSHBuffer.prototype.readInt64 = function () {
		assert_1.ok(this._offset + 8 < this._buffer.length,
		    'buffer not long enough to read Int64');
		var v = this._buffer.slice(this._offset, this._offset + 8);
		this._offset += 8;
		return (v);
	};

	SSHBuffer.prototype.readChar = function () {
		var v = this._buffer[this._offset++];
		return (v);
	};

	SSHBuffer.prototype.writeBuffer = function (buf) {
		while (this._offset + 4 + buf.length > this._size)
			this.expand();
		this._buffer.writeUInt32BE(buf.length, this._offset);
		this._offset += 4;
		buf.copy(this._buffer, this._offset);
		this._offset += buf.length;
	};

	SSHBuffer.prototype.writeString = function (str) {
		this.writeBuffer(Buffer$w.from(str, 'utf8'));
	};

	SSHBuffer.prototype.writeCString = function (str) {
		while (this._offset + 1 + str.length > this._size)
			this.expand();
		this._buffer.write(str, this._offset);
		this._offset += str.length;
		this._buffer[this._offset++] = 0;
	};

	SSHBuffer.prototype.writeInt = function (v) {
		while (this._offset + 4 > this._size)
			this.expand();
		this._buffer.writeUInt32BE(v, this._offset);
		this._offset += 4;
	};

	SSHBuffer.prototype.writeInt64 = function (v) {
		assert_1.buffer(v, 'value');
		if (v.length > 8) {
			var lead = v.slice(0, v.length - 8);
			for (var i = 0; i < lead.length; ++i) {
				assert_1.strictEqual(lead[i], 0,
				    'must fit in 64 bits of precision');
			}
			v = v.slice(v.length - 8, v.length);
		}
		while (this._offset + 8 > this._size)
			this.expand();
		v.copy(this._buffer, this._offset);
		this._offset += 8;
	};

	SSHBuffer.prototype.writeChar = function (v) {
		while (this._offset + 1 > this._size)
			this.expand();
		this._buffer[this._offset++] = v;
	};

	SSHBuffer.prototype.writePart = function (p) {
		this.writeBuffer(p.data);
	};

	SSHBuffer.prototype.write = function (buf) {
		while (this._offset + buf.length > this._size)
			this.expand();
		buf.copy(this._buffer, this._offset);
		this._offset += buf.length;
	};

	// Copyright 2015 Joyent, Inc.

	var signature$1 = Signature;


	var Buffer$v = safer_1.Buffer;







	var InvalidAlgorithmError$6 = errors$1.InvalidAlgorithmError;
	var SignatureParseError = errors$1.SignatureParseError;

	function Signature(opts) {
		assert_1.object(opts, 'options');
		assert_1.arrayOfObject(opts.parts, 'options.parts');
		assert_1.string(opts.type, 'options.type');

		var partLookup = {};
		for (var i = 0; i < opts.parts.length; ++i) {
			var part = opts.parts[i];
			partLookup[part.name] = part;
		}

		this.type = opts.type;
		this.hashAlgorithm = opts.hashAlgo;
		this.curve = opts.curve;
		this.parts = opts.parts;
		this.part = partLookup;
	}

	Signature.prototype.toBuffer = function (format) {
		if (format === undefined)
			format = 'asn1';
		assert_1.string(format, 'format');

		var buf;
		var stype = 'ssh-' + this.type;

		switch (this.type) {
		case 'rsa':
			switch (this.hashAlgorithm) {
			case 'sha256':
				stype = 'rsa-sha2-256';
				break;
			case 'sha512':
				stype = 'rsa-sha2-512';
				break;
			case 'sha1':
			case undefined:
				break;
			default:
				throw (new Error('SSH signature ' +
				    'format does not support hash ' +
				    'algorithm ' + this.hashAlgorithm));
			}
			if (format === 'ssh') {
				buf = new sshBuffer({});
				buf.writeString(stype);
				buf.writePart(this.part.sig);
				return (buf.toBuffer());
			} else {
				return (this.part.sig.data);
			}

		case 'ed25519':
			if (format === 'ssh') {
				buf = new sshBuffer({});
				buf.writeString(stype);
				buf.writePart(this.part.sig);
				return (buf.toBuffer());
			} else {
				return (this.part.sig.data);
			}

		case 'dsa':
		case 'ecdsa':
			var r, s;
			if (format === 'asn1') {
				var der = new lib$6.BerWriter();
				der.startSequence();
				r = utils$3.mpNormalize(this.part.r.data);
				s = utils$3.mpNormalize(this.part.s.data);
				der.writeBuffer(r, lib$6.Ber.Integer);
				der.writeBuffer(s, lib$6.Ber.Integer);
				der.endSequence();
				return (der.buffer);
			} else if (format === 'ssh' && this.type === 'dsa') {
				buf = new sshBuffer({});
				buf.writeString('ssh-dss');
				r = this.part.r.data;
				if (r.length > 20 && r[0] === 0x00)
					r = r.slice(1);
				s = this.part.s.data;
				if (s.length > 20 && s[0] === 0x00)
					s = s.slice(1);
				if ((this.hashAlgorithm &&
				    this.hashAlgorithm !== 'sha1') ||
				    r.length + s.length !== 40) {
					throw (new Error('OpenSSH only supports ' +
					    'DSA signatures with SHA1 hash'));
				}
				buf.writeBuffer(Buffer$v.concat([r, s]));
				return (buf.toBuffer());
			} else if (format === 'ssh' && this.type === 'ecdsa') {
				var inner = new sshBuffer({});
				r = this.part.r.data;
				inner.writeBuffer(r);
				inner.writePart(this.part.s);

				buf = new sshBuffer({});
				/* XXX: find a more proper way to do this? */
				var curve;
				if (r[0] === 0x00)
					r = r.slice(1);
				var sz = r.length * 8;
				if (sz === 256)
					curve = 'nistp256';
				else if (sz === 384)
					curve = 'nistp384';
				else if (sz === 528)
					curve = 'nistp521';
				buf.writeString('ecdsa-sha2-' + curve);
				buf.writeBuffer(inner.toBuffer());
				return (buf.toBuffer());
			}
			throw (new Error('Invalid signature format'));
		default:
			throw (new Error('Invalid signature data'));
		}
	};

	Signature.prototype.toString = function (format) {
		assert_1.optionalString(format, 'format');
		return (this.toBuffer(format).toString('base64'));
	};

	Signature.parse = function (data, type, format) {
		if (typeof (data) === 'string')
			data = Buffer$v.from(data, 'base64');
		assert_1.buffer(data, 'data');
		assert_1.string(format, 'format');
		assert_1.string(type, 'type');

		var opts = {};
		opts.type = type.toLowerCase();
		opts.parts = [];

		try {
			assert_1.ok(data.length > 0, 'signature must not be empty');
			switch (opts.type) {
			case 'rsa':
				return (parseOneNum(data, type, format, opts));
			case 'ed25519':
				return (parseOneNum(data, type, format, opts));

			case 'dsa':
			case 'ecdsa':
				if (format === 'asn1')
					return (parseDSAasn1(data, type, format, opts));
				else if (opts.type === 'dsa')
					return (parseDSA(data, type, format, opts));
				else
					return (parseECDSA(data, type, format, opts));

			default:
				throw (new InvalidAlgorithmError$6(type));
			}

		} catch (e) {
			if (e instanceof InvalidAlgorithmError$6)
				throw (e);
			throw (new SignatureParseError(type, format, e));
		}
	};

	function parseOneNum(data, type, format, opts) {
		if (format === 'ssh') {
			try {
				var buf = new sshBuffer({buffer: data});
				var head = buf.readString();
			} catch (e) {
				/* fall through */
			}
			if (buf !== undefined) {
				var msg = 'SSH signature does not match expected ' +
				    'type (expected ' + type + ', got ' + head + ')';
				switch (head) {
				case 'ssh-rsa':
					assert_1.strictEqual(type, 'rsa', msg);
					opts.hashAlgo = 'sha1';
					break;
				case 'rsa-sha2-256':
					assert_1.strictEqual(type, 'rsa', msg);
					opts.hashAlgo = 'sha256';
					break;
				case 'rsa-sha2-512':
					assert_1.strictEqual(type, 'rsa', msg);
					opts.hashAlgo = 'sha512';
					break;
				case 'ssh-ed25519':
					assert_1.strictEqual(type, 'ed25519', msg);
					opts.hashAlgo = 'sha512';
					break;
				default:
					throw (new Error('Unknown SSH signature ' +
					    'type: ' + head));
				}
				var sig = buf.readPart();
				assert_1.ok(buf.atEnd(), 'extra trailing bytes');
				sig.name = 'sig';
				opts.parts.push(sig);
				return (new Signature(opts));
			}
		}
		opts.parts.push({name: 'sig', data: data});
		return (new Signature(opts));
	}

	function parseDSAasn1(data, type, format, opts) {
		var der = new lib$6.BerReader(data);
		der.readSequence();
		var r = der.readString(lib$6.Ber.Integer, true);
		var s = der.readString(lib$6.Ber.Integer, true);

		opts.parts.push({name: 'r', data: utils$3.mpNormalize(r)});
		opts.parts.push({name: 's', data: utils$3.mpNormalize(s)});

		return (new Signature(opts));
	}

	function parseDSA(data, type, format, opts) {
		if (data.length != 40) {
			var buf = new sshBuffer({buffer: data});
			var d = buf.readBuffer();
			if (d.toString('ascii') === 'ssh-dss')
				d = buf.readBuffer();
			assert_1.ok(buf.atEnd(), 'extra trailing bytes');
			assert_1.strictEqual(d.length, 40, 'invalid inner length');
			data = d;
		}
		opts.parts.push({name: 'r', data: data.slice(0, 20)});
		opts.parts.push({name: 's', data: data.slice(20, 40)});
		return (new Signature(opts));
	}

	function parseECDSA(data, type, format, opts) {
		var buf = new sshBuffer({buffer: data});

		var r, s;
		var inner = buf.readBuffer();
		var stype = inner.toString('ascii');
		if (stype.slice(0, 6) === 'ecdsa-') {
			var parts = stype.split('-');
			assert_1.strictEqual(parts[0], 'ecdsa');
			assert_1.strictEqual(parts[1], 'sha2');
			opts.curve = parts[2];
			switch (opts.curve) {
			case 'nistp256':
				opts.hashAlgo = 'sha256';
				break;
			case 'nistp384':
				opts.hashAlgo = 'sha384';
				break;
			case 'nistp521':
				opts.hashAlgo = 'sha512';
				break;
			default:
				throw (new Error('Unsupported ECDSA curve: ' +
				    opts.curve));
			}
			inner = buf.readBuffer();
			assert_1.ok(buf.atEnd(), 'extra trailing bytes on outer');
			buf = new sshBuffer({buffer: inner});
			r = buf.readPart();
		} else {
			r = {data: inner};
		}

		s = buf.readPart();
		assert_1.ok(buf.atEnd(), 'extra trailing bytes');

		r.name = 'r';
		s.name = 's';

		opts.parts.push(r);
		opts.parts.push(s);
		return (new Signature(opts));
	}

	Signature.isSignature = function (obj, ver) {
		return (utils$3.isCompatible(obj, Signature, ver));
	};

	/*
	 * API versions for Signature:
	 * [1,0] -- initial ver
	 * [2,0] -- support for rsa in full ssh format, compat with sshpk-agent
	 *          hashAlgorithm property
	 * [2,1] -- first tagged version
	 */
	Signature.prototype._sshpkApiVersion = [2, 1];

	Signature._oldVersionDetect = function (obj) {
		assert_1.func(obj.toBuffer);
		if (obj.hasOwnProperty('hashAlgorithm'))
			return ([2, 0]);
		return ([1, 0]);
	};

	// Named EC curves

	// Requires ec.js, jsbn.js, and jsbn2.js
	jsbn$2.BigInteger;

	jsbn$2.BigInteger;

	// Copyright 2017 Joyent, Inc.

	var dhe = {
		DiffieHellman: DiffieHellman$1,
		generateECDSA: generateECDSA$1,
		generateED25519: generateED25519$1
	};



	var Buffer$u = safer_1.Buffer;







	var CRYPTO_HAVE_ECDH = (crypto__default['default'].createECDH !== undefined);



	var jsbn = jsbn$2.BigInteger;

	function DiffieHellman$1(key$1) {
		utils$3.assertCompatible(key$1, key, [1, 4], 'key');
		this._isPriv = privateKey.isPrivateKey(key$1, [1, 3]);
		this._algo = key$1.type;
		this._curve = key$1.curve;
		this._key = key$1;
		if (key$1.type === 'dsa') {
			if (!CRYPTO_HAVE_ECDH) {
				throw (new Error('Due to bugs in the node 0.10 ' +
				    'crypto API, node 0.12.x or later is required ' +
				    'to use DH'));
			}
			this._dh = crypto__default['default'].createDiffieHellman(
			    key$1.part.p.data, undefined,
			    key$1.part.g.data, undefined);
			this._p = key$1.part.p;
			this._g = key$1.part.g;
			if (this._isPriv)
				this._dh.setPrivateKey(key$1.part.x.data);
			this._dh.setPublicKey(key$1.part.y.data);

		} else if (key$1.type === 'ecdsa') {
			if (!CRYPTO_HAVE_ECDH) {
				this._ecParams = new X9ECParameters(this._curve);

				if (this._isPriv) {
					this._priv = new ECPrivate(
					    this._ecParams, key$1.part.d.data);
				}
				return;
			}

			var curve = {
				'nistp256': 'prime256v1',
				'nistp384': 'secp384r1',
				'nistp521': 'secp521r1'
			}[key$1.curve];
			this._dh = crypto__default['default'].createECDH(curve);
			if (typeof (this._dh) !== 'object' ||
			    typeof (this._dh.setPrivateKey) !== 'function') {
				CRYPTO_HAVE_ECDH = false;
				DiffieHellman$1.call(this, key$1);
				return;
			}
			if (this._isPriv)
				this._dh.setPrivateKey(key$1.part.d.data);
			this._dh.setPublicKey(key$1.part.Q.data);

		} else if (key$1.type === 'curve25519') {
			if (this._isPriv) {
				utils$3.assertCompatible(key$1, privateKey, [1, 5], 'key');
				this._priv = key$1.part.k.data;
			}

		} else {
			throw (new Error('DH not supported for ' + key$1.type + ' keys'));
		}
	}

	DiffieHellman$1.prototype.getPublicKey = function () {
		if (this._isPriv)
			return (this._key.toPublic());
		return (this._key);
	};

	DiffieHellman$1.prototype.getPrivateKey = function () {
		if (this._isPriv)
			return (this._key);
		else
			return (undefined);
	};
	DiffieHellman$1.prototype.getKey = DiffieHellman$1.prototype.getPrivateKey;

	DiffieHellman$1.prototype._keyCheck = function (pk, isPub) {
		assert_1.object(pk, 'key');
		if (!isPub)
			utils$3.assertCompatible(pk, privateKey, [1, 3], 'key');
		utils$3.assertCompatible(pk, key, [1, 4], 'key');

		if (pk.type !== this._algo) {
			throw (new Error('A ' + pk.type + ' key cannot be used in ' +
			    this._algo + ' Diffie-Hellman'));
		}

		if (pk.curve !== this._curve) {
			throw (new Error('A key from the ' + pk.curve + ' curve ' +
			    'cannot be used with a ' + this._curve +
			    ' Diffie-Hellman'));
		}

		if (pk.type === 'dsa') {
			assert_1.deepEqual(pk.part.p, this._p,
			    'DSA key prime does not match');
			assert_1.deepEqual(pk.part.g, this._g,
			    'DSA key generator does not match');
		}
	};

	DiffieHellman$1.prototype.setKey = function (pk) {
		this._keyCheck(pk);

		if (pk.type === 'dsa') {
			this._dh.setPrivateKey(pk.part.x.data);
			this._dh.setPublicKey(pk.part.y.data);

		} else if (pk.type === 'ecdsa') {
			if (CRYPTO_HAVE_ECDH) {
				this._dh.setPrivateKey(pk.part.d.data);
				this._dh.setPublicKey(pk.part.Q.data);
			} else {
				this._priv = new ECPrivate(
				    this._ecParams, pk.part.d.data);
			}

		} else if (pk.type === 'curve25519') {
			var k = pk.part.k;
			if (!pk.part.k)
				k = pk.part.r;
			this._priv = k.data;
			if (this._priv[0] === 0x00)
				this._priv = this._priv.slice(1);
			this._priv = this._priv.slice(0, 32);
		}
		this._key = pk;
		this._isPriv = true;
	};
	DiffieHellman$1.prototype.setPrivateKey = DiffieHellman$1.prototype.setKey;

	DiffieHellman$1.prototype.computeSecret = function (otherpk) {
		this._keyCheck(otherpk, true);
		if (!this._isPriv)
			throw (new Error('DH exchange has not been initialized with ' +
			    'a private key yet'));

		var pub;
		if (this._algo === 'dsa') {
			return (this._dh.computeSecret(
			    otherpk.part.y.data));

		} else if (this._algo === 'ecdsa') {
			if (CRYPTO_HAVE_ECDH) {
				return (this._dh.computeSecret(
				    otherpk.part.Q.data));
			} else {
				pub = new ECPublic(
				    this._ecParams, otherpk.part.Q.data);
				return (this._priv.deriveSharedSecret(pub));
			}

		} else if (this._algo === 'curve25519') {
			pub = otherpk.part.A.data;
			while (pub[0] === 0x00 && pub.length > 32)
				pub = pub.slice(1);
			var priv = this._priv;
			assert_1.strictEqual(pub.length, 32);
			assert_1.strictEqual(priv.length, 32);

			var secret = naclFast.box.before(new Uint8Array(pub),
			    new Uint8Array(priv));

			return (Buffer$u.from(secret));
		}

		throw (new Error('Invalid algorithm: ' + this._algo));
	};

	DiffieHellman$1.prototype.generateKey = function () {
		var parts = [];
		var priv, pub;
		if (this._algo === 'dsa') {
			this._dh.generateKeys();

			parts.push({name: 'p', data: this._p.data});
			parts.push({name: 'q', data: this._key.part.q.data});
			parts.push({name: 'g', data: this._g.data});
			parts.push({name: 'y', data: this._dh.getPublicKey()});
			parts.push({name: 'x', data: this._dh.getPrivateKey()});
			this._key = new privateKey({
				type: 'dsa',
				parts: parts
			});
			this._isPriv = true;
			return (this._key);

		} else if (this._algo === 'ecdsa') {
			if (CRYPTO_HAVE_ECDH) {
				this._dh.generateKeys();

				parts.push({name: 'curve',
				    data: Buffer$u.from(this._curve)});
				parts.push({name: 'Q', data: this._dh.getPublicKey()});
				parts.push({name: 'd', data: this._dh.getPrivateKey()});
				this._key = new privateKey({
					type: 'ecdsa',
					curve: this._curve,
					parts: parts
				});
				this._isPriv = true;
				return (this._key);

			} else {
				var n = this._ecParams.getN();
				var r = new jsbn(crypto__default['default'].randomBytes(n.bitLength()));
				var n1 = n.subtract(jsbn.ONE);
				priv = r.mod(n1).add(jsbn.ONE);
				pub = this._ecParams.getG().multiply(priv);

				priv = Buffer$u.from(priv.toByteArray());
				pub = Buffer$u.from(this._ecParams.getCurve().
				    encodePointHex(pub), 'hex');

				this._priv = new ECPrivate(this._ecParams, priv);

				parts.push({name: 'curve',
				    data: Buffer$u.from(this._curve)});
				parts.push({name: 'Q', data: pub});
				parts.push({name: 'd', data: priv});

				this._key = new privateKey({
					type: 'ecdsa',
					curve: this._curve,
					parts: parts
				});
				this._isPriv = true;
				return (this._key);
			}

		} else if (this._algo === 'curve25519') {
			var pair = naclFast.box.keyPair();
			priv = Buffer$u.from(pair.secretKey);
			pub = Buffer$u.from(pair.publicKey);
			priv = Buffer$u.concat([priv, pub]);
			assert_1.strictEqual(priv.length, 64);
			assert_1.strictEqual(pub.length, 32);

			parts.push({name: 'A', data: pub});
			parts.push({name: 'k', data: priv});
			this._key = new privateKey({
				type: 'curve25519',
				parts: parts
			});
			this._isPriv = true;
			return (this._key);
		}

		throw (new Error('Invalid algorithm: ' + this._algo));
	};
	DiffieHellman$1.prototype.generateKeys = DiffieHellman$1.prototype.generateKey;

	/* These are helpers for using ecc-jsbn (for node 0.10 compatibility). */

	function X9ECParameters(name) {
		var params = algs.curves[name];
		assert_1.object(params);

		var p = new jsbn(params.p);
		var a = new jsbn(params.a);
		var b = new jsbn(params.b);
		var n = new jsbn(params.n);
		var h = jsbn.ONE;
		var curve = new ec.ECCurveFp(p, a, b);
		var G = curve.decodePointHex(params.G.toString('hex'));

		this.curve = curve;
		this.g = G;
		this.n = n;
		this.h = h;
	}
	X9ECParameters.prototype.getCurve = function () { return (this.curve); };
	X9ECParameters.prototype.getG = function () { return (this.g); };
	X9ECParameters.prototype.getN = function () { return (this.n); };
	X9ECParameters.prototype.getH = function () { return (this.h); };

	function ECPublic(params, buffer) {
		this._params = params;
		if (buffer[0] === 0x00)
			buffer = buffer.slice(1);
		this._pub = params.getCurve().decodePointHex(buffer.toString('hex'));
	}

	function ECPrivate(params, buffer) {
		this._params = params;
		this._priv = new jsbn(utils$3.mpNormalize(buffer));
	}
	ECPrivate.prototype.deriveSharedSecret = function (pubKey) {
		assert_1.ok(pubKey instanceof ECPublic);
		var S = pubKey._pub.multiply(this._priv);
		return (Buffer$u.from(S.getX().toBigInteger().toByteArray()));
	};

	function generateED25519$1() {
		var pair = naclFast.sign.keyPair();
		var priv = Buffer$u.from(pair.secretKey);
		var pub = Buffer$u.from(pair.publicKey);
		assert_1.strictEqual(priv.length, 64);
		assert_1.strictEqual(pub.length, 32);

		var parts = [];
		parts.push({name: 'A', data: pub});
		parts.push({name: 'k', data: priv.slice(0, 32)});
		var key = new privateKey({
			type: 'ed25519',
			parts: parts
		});
		return (key);
	}

	/* Generates a new ECDSA private key on a given curve. */
	function generateECDSA$1(curve) {
		var parts = [];
		var key;

		if (CRYPTO_HAVE_ECDH) {
			/*
			 * Node crypto doesn't expose key generation directly, but the
			 * ECDH instances can generate keys. It turns out this just
			 * calls into the OpenSSL generic key generator, and we can
			 * read its output happily without doing an actual DH. So we
			 * use that here.
			 */
			var osCurve = {
				'nistp256': 'prime256v1',
				'nistp384': 'secp384r1',
				'nistp521': 'secp521r1'
			}[curve];

			var dh = crypto__default['default'].createECDH(osCurve);
			dh.generateKeys();

			parts.push({name: 'curve',
			    data: Buffer$u.from(curve)});
			parts.push({name: 'Q', data: dh.getPublicKey()});
			parts.push({name: 'd', data: dh.getPrivateKey()});

			key = new privateKey({
				type: 'ecdsa',
				curve: curve,
				parts: parts
			});
			return (key);
		} else {

			var ecParams = new X9ECParameters(curve);

			/* This algorithm taken from FIPS PUB 186-4 (section B.4.1) */
			var n = ecParams.getN();
			/*
			 * The crypto.randomBytes() function can only give us whole
			 * bytes, so taking a nod from X9.62, we round up.
			 */
			var cByteLen = Math.ceil((n.bitLength() + 64) / 8);
			var c = new jsbn(crypto__default['default'].randomBytes(cByteLen));

			var n1 = n.subtract(jsbn.ONE);
			var priv = c.mod(n1).add(jsbn.ONE);
			var pub = ecParams.getG().multiply(priv);

			priv = Buffer$u.from(priv.toByteArray());
			pub = Buffer$u.from(ecParams.getCurve().
			    encodePointHex(pub), 'hex');

			parts.push({name: 'curve', data: Buffer$u.from(curve)});
			parts.push({name: 'Q', data: pub});
			parts.push({name: 'd', data: priv});

			key = new privateKey({
				type: 'ecdsa',
				curve: curve,
				parts: parts
			});
			return (key);
		}
	}

	// Copyright 2015 Joyent, Inc.

	var edCompat$1 = {
		Verifier: Verifier,
		Signer: Signer
	};





	var Buffer$t = safer_1.Buffer;


	function Verifier(key, hashAlgo) {
		if (hashAlgo.toLowerCase() !== 'sha512')
			throw (new Error('ED25519 only supports the use of ' +
			    'SHA-512 hashes'));

		this.key = key;
		this.chunks = [];

		require$$0__default['default'].Writable.call(this, {});
	}
	util__default['default'].inherits(Verifier, require$$0__default['default'].Writable);

	Verifier.prototype._write = function (chunk, enc, cb) {
		this.chunks.push(chunk);
		cb();
	};

	Verifier.prototype.update = function (chunk) {
		if (typeof (chunk) === 'string')
			chunk = Buffer$t.from(chunk, 'binary');
		this.chunks.push(chunk);
	};

	Verifier.prototype.verify = function (signature, fmt) {
		var sig;
		if (signature$1.isSignature(signature, [2, 0])) {
			if (signature.type !== 'ed25519')
				return (false);
			sig = signature.toBuffer('raw');

		} else if (typeof (signature) === 'string') {
			sig = Buffer$t.from(signature, 'base64');

		} else if (signature$1.isSignature(signature, [1, 0])) {
			throw (new Error('signature was created by too old ' +
			    'a version of sshpk and cannot be verified'));
		}

		assert_1.buffer(sig);
		return (naclFast.sign.detached.verify(
		    new Uint8Array(Buffer$t.concat(this.chunks)),
		    new Uint8Array(sig),
		    new Uint8Array(this.key.part.A.data)));
	};

	function Signer(key, hashAlgo) {
		if (hashAlgo.toLowerCase() !== 'sha512')
			throw (new Error('ED25519 only supports the use of ' +
			    'SHA-512 hashes'));

		this.key = key;
		this.chunks = [];

		require$$0__default['default'].Writable.call(this, {});
	}
	util__default['default'].inherits(Signer, require$$0__default['default'].Writable);

	Signer.prototype._write = function (chunk, enc, cb) {
		this.chunks.push(chunk);
		cb();
	};

	Signer.prototype.update = function (chunk) {
		if (typeof (chunk) === 'string')
			chunk = Buffer$t.from(chunk, 'binary');
		this.chunks.push(chunk);
	};

	Signer.prototype.sign = function () {
		var sig = naclFast.sign.detached(
		    new Uint8Array(Buffer$t.concat(this.chunks)),
		    new Uint8Array(Buffer$t.concat([
			this.key.part.k.data, this.key.part.A.data])));
		var sigBuf = Buffer$t.from(sig);
		var sigObj = signature$1.parse(sigBuf, 'ed25519', 'raw');
		sigObj.hashAlgorithm = 'sha512';
		return (sigObj);
	};

	// Copyright 2018 Joyent, Inc.

	var pkcs8 = {
		read: read$e,
		readPkcs8: readPkcs8,
		write: write$f,
		writePkcs8: writePkcs8,
		pkcs8ToBuffer: pkcs8ToBuffer,

		readECDSACurve: readECDSACurve$1,
		writeECDSACurve: writeECDSACurve
	};



	var Buffer$s = safer_1.Buffer;






	function read$e(buf, options) {
		return (pem.read(buf, options, 'pkcs8'));
	}

	function write$f(key, options) {
		return (pem.write(key, options, 'pkcs8'));
	}

	/* Helper to read in a single mpint */
	function readMPInt$2(der, nm) {
		assert_1.strictEqual(der.peek(), lib$6.Ber.Integer,
		    nm + ' is not an Integer');
		return (utils$3.mpNormalize(der.readString(lib$6.Ber.Integer, true)));
	}

	function readPkcs8(alg, type, der) {
		/* Private keys in pkcs#8 format have a weird extra int */
		if (der.peek() === lib$6.Ber.Integer) {
			assert_1.strictEqual(type, 'private',
			    'unexpected Integer at start of public key');
			der.readString(lib$6.Ber.Integer, true);
		}

		der.readSequence();
		var next = der.offset + der.length;

		var oid = der.readOID();
		switch (oid) {
		case '1.2.840.113549.1.1.1':
			der._offset = next;
			if (type === 'public')
				return (readPkcs8RSAPublic(der));
			else
				return (readPkcs8RSAPrivate(der));
		case '1.2.840.10040.4.1':
			if (type === 'public')
				return (readPkcs8DSAPublic(der));
			else
				return (readPkcs8DSAPrivate(der));
		case '1.2.840.10045.2.1':
			if (type === 'public')
				return (readPkcs8ECDSAPublic(der));
			else
				return (readPkcs8ECDSAPrivate(der));
		case '1.3.101.112':
			if (type === 'public') {
				return (readPkcs8EdDSAPublic(der));
			} else {
				return (readPkcs8EdDSAPrivate(der));
			}
		case '1.3.101.110':
			if (type === 'public') {
				return (readPkcs8X25519Public(der));
			} else {
				return (readPkcs8X25519Private(der));
			}
		default:
			throw (new Error('Unknown key type OID ' + oid));
		}
	}

	function readPkcs8RSAPublic(der) {
		// bit string sequence
		der.readSequence(lib$6.Ber.BitString);
		der.readByte();
		der.readSequence();

		// modulus
		var n = readMPInt$2(der, 'modulus');
		var e = readMPInt$2(der, 'exponent');

		// now, make the key
		var key$1 = {
			type: 'rsa',
			source: der.originalInput,
			parts: [
				{ name: 'e', data: e },
				{ name: 'n', data: n }
			]
		};

		return (new key(key$1));
	}

	function readPkcs8RSAPrivate(der) {
		der.readSequence(lib$6.Ber.OctetString);
		der.readSequence();

		var ver = readMPInt$2(der, 'version');
		assert_1.equal(ver[0], 0x0, 'unknown RSA private key version');

		// modulus then public exponent
		var n = readMPInt$2(der, 'modulus');
		var e = readMPInt$2(der, 'public exponent');
		var d = readMPInt$2(der, 'private exponent');
		var p = readMPInt$2(der, 'prime1');
		var q = readMPInt$2(der, 'prime2');
		var dmodp = readMPInt$2(der, 'exponent1');
		var dmodq = readMPInt$2(der, 'exponent2');
		var iqmp = readMPInt$2(der, 'iqmp');

		// now, make the key
		var key = {
			type: 'rsa',
			parts: [
				{ name: 'n', data: n },
				{ name: 'e', data: e },
				{ name: 'd', data: d },
				{ name: 'iqmp', data: iqmp },
				{ name: 'p', data: p },
				{ name: 'q', data: q },
				{ name: 'dmodp', data: dmodp },
				{ name: 'dmodq', data: dmodq }
			]
		};

		return (new privateKey(key));
	}

	function readPkcs8DSAPublic(der) {
		der.readSequence();

		var p = readMPInt$2(der, 'p');
		var q = readMPInt$2(der, 'q');
		var g = readMPInt$2(der, 'g');

		// bit string sequence
		der.readSequence(lib$6.Ber.BitString);
		der.readByte();

		var y = readMPInt$2(der, 'y');

		// now, make the key
		var key$1 = {
			type: 'dsa',
			parts: [
				{ name: 'p', data: p },
				{ name: 'q', data: q },
				{ name: 'g', data: g },
				{ name: 'y', data: y }
			]
		};

		return (new key(key$1));
	}

	function readPkcs8DSAPrivate(der) {
		der.readSequence();

		var p = readMPInt$2(der, 'p');
		var q = readMPInt$2(der, 'q');
		var g = readMPInt$2(der, 'g');

		der.readSequence(lib$6.Ber.OctetString);
		var x = readMPInt$2(der, 'x');

		/* The pkcs#8 format does not include the public key */
		var y = utils$3.calculateDSAPublic(g, p, x);

		var key = {
			type: 'dsa',
			parts: [
				{ name: 'p', data: p },
				{ name: 'q', data: q },
				{ name: 'g', data: g },
				{ name: 'y', data: y },
				{ name: 'x', data: x }
			]
		};

		return (new privateKey(key));
	}

	function readECDSACurve$1(der) {
		var curveName, curveNames;
		var j, c, cd;

		if (der.peek() === lib$6.Ber.OID) {
			var oid = der.readOID();

			curveNames = Object.keys(algs.curves);
			for (j = 0; j < curveNames.length; ++j) {
				c = curveNames[j];
				cd = algs.curves[c];
				if (cd.pkcs8oid === oid) {
					curveName = c;
					break;
				}
			}

		} else {
			// ECParameters sequence
			der.readSequence();
			var version = der.readString(lib$6.Ber.Integer, true);
			assert_1.strictEqual(version[0], 1, 'ECDSA key not version 1');

			var curve = {};

			// FieldID sequence
			der.readSequence();
			var fieldTypeOid = der.readOID();
			assert_1.strictEqual(fieldTypeOid, '1.2.840.10045.1.1',
			    'ECDSA key is not from a prime-field');
			var p = curve.p = utils$3.mpNormalize(
			    der.readString(lib$6.Ber.Integer, true));
			/*
			 * p always starts with a 1 bit, so count the zeros to get its
			 * real size.
			 */
			curve.size = p.length * 8 - utils$3.countZeros(p);

			// Curve sequence
			der.readSequence();
			curve.a = utils$3.mpNormalize(
			    der.readString(lib$6.Ber.OctetString, true));
			curve.b = utils$3.mpNormalize(
			    der.readString(lib$6.Ber.OctetString, true));
			if (der.peek() === lib$6.Ber.BitString)
				curve.s = der.readString(lib$6.Ber.BitString, true);

			// Combined Gx and Gy
			curve.G = der.readString(lib$6.Ber.OctetString, true);
			assert_1.strictEqual(curve.G[0], 0x4,
			    'uncompressed G is required');

			curve.n = utils$3.mpNormalize(
			    der.readString(lib$6.Ber.Integer, true));
			curve.h = utils$3.mpNormalize(
			    der.readString(lib$6.Ber.Integer, true));
			assert_1.strictEqual(curve.h[0], 0x1, 'a cofactor=1 curve is ' +
			    'required');

			curveNames = Object.keys(algs.curves);
			var ks = Object.keys(curve);
			for (j = 0; j < curveNames.length; ++j) {
				c = curveNames[j];
				cd = algs.curves[c];
				var equal = true;
				for (var i = 0; i < ks.length; ++i) {
					var k = ks[i];
					if (cd[k] === undefined)
						continue;
					if (typeof (cd[k]) === 'object' &&
					    cd[k].equals !== undefined) {
						if (!cd[k].equals(curve[k])) {
							equal = false;
							break;
						}
					} else if (Buffer$s.isBuffer(cd[k])) {
						if (cd[k].toString('binary')
						    !== curve[k].toString('binary')) {
							equal = false;
							break;
						}
					} else {
						if (cd[k] !== curve[k]) {
							equal = false;
							break;
						}
					}
				}
				if (equal) {
					curveName = c;
					break;
				}
			}
		}
		return (curveName);
	}

	function readPkcs8ECDSAPrivate(der) {
		var curveName = readECDSACurve$1(der);
		assert_1.string(curveName, 'a known elliptic curve');

		der.readSequence(lib$6.Ber.OctetString);
		der.readSequence();

		var version = readMPInt$2(der, 'version');
		assert_1.equal(version[0], 1, 'unknown version of ECDSA key');

		var d = der.readString(lib$6.Ber.OctetString, true);
		var Q;

		if (der.peek() == 0xa0) {
			der.readSequence(0xa0);
			der._offset += der.length;
		}
		if (der.peek() == 0xa1) {
			der.readSequence(0xa1);
			Q = der.readString(lib$6.Ber.BitString, true);
			Q = utils$3.ecNormalize(Q);
		}

		if (Q === undefined) {
			var pub = utils$3.publicFromPrivateECDSA(curveName, d);
			Q = pub.part.Q.data;
		}

		var key = {
			type: 'ecdsa',
			parts: [
				{ name: 'curve', data: Buffer$s.from(curveName) },
				{ name: 'Q', data: Q },
				{ name: 'd', data: d }
			]
		};

		return (new privateKey(key));
	}

	function readPkcs8ECDSAPublic(der) {
		var curveName = readECDSACurve$1(der);
		assert_1.string(curveName, 'a known elliptic curve');

		var Q = der.readString(lib$6.Ber.BitString, true);
		Q = utils$3.ecNormalize(Q);

		var key$1 = {
			type: 'ecdsa',
			parts: [
				{ name: 'curve', data: Buffer$s.from(curveName) },
				{ name: 'Q', data: Q }
			]
		};

		return (new key(key$1));
	}

	function readPkcs8EdDSAPublic(der) {
		if (der.peek() === 0x00)
			der.readByte();

		var A = utils$3.readBitString(der);

		var key$1 = {
			type: 'ed25519',
			parts: [
				{ name: 'A', data: utils$3.zeroPadToLength(A, 32) }
			]
		};

		return (new key(key$1));
	}

	function readPkcs8X25519Public(der) {
		var A = utils$3.readBitString(der);

		var key$1 = {
			type: 'curve25519',
			parts: [
				{ name: 'A', data: utils$3.zeroPadToLength(A, 32) }
			]
		};

		return (new key(key$1));
	}

	function readPkcs8EdDSAPrivate(der) {
		if (der.peek() === 0x00)
			der.readByte();

		der.readSequence(lib$6.Ber.OctetString);
		var k = der.readString(lib$6.Ber.OctetString, true);
		k = utils$3.zeroPadToLength(k, 32);

		var A;
		if (der.peek() === lib$6.Ber.BitString) {
			A = utils$3.readBitString(der);
			A = utils$3.zeroPadToLength(A, 32);
		} else {
			A = utils$3.calculateED25519Public(k);
		}

		var key = {
			type: 'ed25519',
			parts: [
				{ name: 'A', data: utils$3.zeroPadToLength(A, 32) },
				{ name: 'k', data: utils$3.zeroPadToLength(k, 32) }
			]
		};

		return (new privateKey(key));
	}

	function readPkcs8X25519Private(der) {
		if (der.peek() === 0x00)
			der.readByte();

		der.readSequence(lib$6.Ber.OctetString);
		var k = der.readString(lib$6.Ber.OctetString, true);
		k = utils$3.zeroPadToLength(k, 32);

		var A = utils$3.calculateX25519Public(k);

		var key = {
			type: 'curve25519',
			parts: [
				{ name: 'A', data: utils$3.zeroPadToLength(A, 32) },
				{ name: 'k', data: utils$3.zeroPadToLength(k, 32) }
			]
		};

		return (new privateKey(key));
	}

	function pkcs8ToBuffer(key) {
		var der = new lib$6.BerWriter();
		writePkcs8(der, key);
		return (der.buffer);
	}

	function writePkcs8(der, key) {
		der.startSequence();

		if (privateKey.isPrivateKey(key)) {
			var sillyInt = Buffer$s.from([0]);
			der.writeBuffer(sillyInt, lib$6.Ber.Integer);
		}

		der.startSequence();
		switch (key.type) {
		case 'rsa':
			der.writeOID('1.2.840.113549.1.1.1');
			if (privateKey.isPrivateKey(key))
				writePkcs8RSAPrivate(key, der);
			else
				writePkcs8RSAPublic(key, der);
			break;
		case 'dsa':
			der.writeOID('1.2.840.10040.4.1');
			if (privateKey.isPrivateKey(key))
				writePkcs8DSAPrivate(key, der);
			else
				writePkcs8DSAPublic(key, der);
			break;
		case 'ecdsa':
			der.writeOID('1.2.840.10045.2.1');
			if (privateKey.isPrivateKey(key))
				writePkcs8ECDSAPrivate(key, der);
			else
				writePkcs8ECDSAPublic(key, der);
			break;
		case 'ed25519':
			der.writeOID('1.3.101.112');
			if (privateKey.isPrivateKey(key))
				throw (new Error('Ed25519 private keys in pkcs8 ' +
				    'format are not supported'));
			writePkcs8EdDSAPublic(key, der);
			break;
		default:
			throw (new Error('Unsupported key type: ' + key.type));
		}

		der.endSequence();
	}

	function writePkcs8RSAPrivate(key, der) {
		der.writeNull();
		der.endSequence();

		der.startSequence(lib$6.Ber.OctetString);
		der.startSequence();

		var version = Buffer$s.from([0]);
		der.writeBuffer(version, lib$6.Ber.Integer);

		der.writeBuffer(key.part.n.data, lib$6.Ber.Integer);
		der.writeBuffer(key.part.e.data, lib$6.Ber.Integer);
		der.writeBuffer(key.part.d.data, lib$6.Ber.Integer);
		der.writeBuffer(key.part.p.data, lib$6.Ber.Integer);
		der.writeBuffer(key.part.q.data, lib$6.Ber.Integer);
		if (!key.part.dmodp || !key.part.dmodq)
			utils$3.addRSAMissing(key);
		der.writeBuffer(key.part.dmodp.data, lib$6.Ber.Integer);
		der.writeBuffer(key.part.dmodq.data, lib$6.Ber.Integer);
		der.writeBuffer(key.part.iqmp.data, lib$6.Ber.Integer);

		der.endSequence();
		der.endSequence();
	}

	function writePkcs8RSAPublic(key, der) {
		der.writeNull();
		der.endSequence();

		der.startSequence(lib$6.Ber.BitString);
		der.writeByte(0x00);

		der.startSequence();
		der.writeBuffer(key.part.n.data, lib$6.Ber.Integer);
		der.writeBuffer(key.part.e.data, lib$6.Ber.Integer);
		der.endSequence();

		der.endSequence();
	}

	function writePkcs8DSAPrivate(key, der) {
		der.startSequence();
		der.writeBuffer(key.part.p.data, lib$6.Ber.Integer);
		der.writeBuffer(key.part.q.data, lib$6.Ber.Integer);
		der.writeBuffer(key.part.g.data, lib$6.Ber.Integer);
		der.endSequence();

		der.endSequence();

		der.startSequence(lib$6.Ber.OctetString);
		der.writeBuffer(key.part.x.data, lib$6.Ber.Integer);
		der.endSequence();
	}

	function writePkcs8DSAPublic(key, der) {
		der.startSequence();
		der.writeBuffer(key.part.p.data, lib$6.Ber.Integer);
		der.writeBuffer(key.part.q.data, lib$6.Ber.Integer);
		der.writeBuffer(key.part.g.data, lib$6.Ber.Integer);
		der.endSequence();
		der.endSequence();

		der.startSequence(lib$6.Ber.BitString);
		der.writeByte(0x00);
		der.writeBuffer(key.part.y.data, lib$6.Ber.Integer);
		der.endSequence();
	}

	function writeECDSACurve(key, der) {
		var curve = algs.curves[key.curve];
		if (curve.pkcs8oid) {
			/* This one has a name in pkcs#8, so just write the oid */
			der.writeOID(curve.pkcs8oid);

		} else {
			// ECParameters sequence
			der.startSequence();

			var version = Buffer$s.from([1]);
			der.writeBuffer(version, lib$6.Ber.Integer);

			// FieldID sequence
			der.startSequence();
			der.writeOID('1.2.840.10045.1.1'); // prime-field
			der.writeBuffer(curve.p, lib$6.Ber.Integer);
			der.endSequence();

			// Curve sequence
			der.startSequence();
			var a = curve.p;
			if (a[0] === 0x0)
				a = a.slice(1);
			der.writeBuffer(a, lib$6.Ber.OctetString);
			der.writeBuffer(curve.b, lib$6.Ber.OctetString);
			der.writeBuffer(curve.s, lib$6.Ber.BitString);
			der.endSequence();

			der.writeBuffer(curve.G, lib$6.Ber.OctetString);
			der.writeBuffer(curve.n, lib$6.Ber.Integer);
			var h = curve.h;
			if (!h) {
				h = Buffer$s.from([1]);
			}
			der.writeBuffer(h, lib$6.Ber.Integer);

			// ECParameters
			der.endSequence();
		}
	}

	function writePkcs8ECDSAPublic(key, der) {
		writeECDSACurve(key, der);
		der.endSequence();

		var Q = utils$3.ecNormalize(key.part.Q.data, true);
		der.writeBuffer(Q, lib$6.Ber.BitString);
	}

	function writePkcs8ECDSAPrivate(key, der) {
		writeECDSACurve(key, der);
		der.endSequence();

		der.startSequence(lib$6.Ber.OctetString);
		der.startSequence();

		var version = Buffer$s.from([1]);
		der.writeBuffer(version, lib$6.Ber.Integer);

		der.writeBuffer(key.part.d.data, lib$6.Ber.OctetString);

		der.startSequence(0xa1);
		var Q = utils$3.ecNormalize(key.part.Q.data, true);
		der.writeBuffer(Q, lib$6.Ber.BitString);
		der.endSequence();

		der.endSequence();
		der.endSequence();
	}

	function writePkcs8EdDSAPublic(key, der) {
		der.endSequence();

		utils$3.writeBitString(der, key.part.A.data);
	}

	// Copyright 2015 Joyent, Inc.

	var pkcs1 = {
		read: read$d,
		readPkcs1: readPkcs1,
		write: write$e,
		writePkcs1: writePkcs1
	};



	var Buffer$r = safer_1.Buffer;








	var readECDSACurve = pkcs8.readECDSACurve;

	function read$d(buf, options) {
		return (pem.read(buf, options, 'pkcs1'));
	}

	function write$e(key, options) {
		return (pem.write(key, options, 'pkcs1'));
	}

	/* Helper to read in a single mpint */
	function readMPInt$1(der, nm) {
		assert_1.strictEqual(der.peek(), lib$6.Ber.Integer,
		    nm + ' is not an Integer');
		return (utils$3.mpNormalize(der.readString(lib$6.Ber.Integer, true)));
	}

	function readPkcs1(alg, type, der) {
		switch (alg) {
		case 'RSA':
			if (type === 'public')
				return (readPkcs1RSAPublic(der));
			else if (type === 'private')
				return (readPkcs1RSAPrivate(der));
			throw (new Error('Unknown key type: ' + type));
		case 'DSA':
			if (type === 'public')
				return (readPkcs1DSAPublic(der));
			else if (type === 'private')
				return (readPkcs1DSAPrivate(der));
			throw (new Error('Unknown key type: ' + type));
		case 'EC':
		case 'ECDSA':
			if (type === 'private')
				return (readPkcs1ECDSAPrivate(der));
			else if (type === 'public')
				return (readPkcs1ECDSAPublic(der));
			throw (new Error('Unknown key type: ' + type));
		case 'EDDSA':
		case 'EdDSA':
			if (type === 'private')
				return (readPkcs1EdDSAPrivate(der));
			throw (new Error(type + ' keys not supported with EdDSA'));
		default:
			throw (new Error('Unknown key algo: ' + alg));
		}
	}

	function readPkcs1RSAPublic(der) {
		// modulus and exponent
		var n = readMPInt$1(der, 'modulus');
		var e = readMPInt$1(der, 'exponent');

		// now, make the key
		var key$1 = {
			type: 'rsa',
			parts: [
				{ name: 'e', data: e },
				{ name: 'n', data: n }
			]
		};

		return (new key(key$1));
	}

	function readPkcs1RSAPrivate(der) {
		var version = readMPInt$1(der, 'version');
		assert_1.strictEqual(version[0], 0);

		// modulus then public exponent
		var n = readMPInt$1(der, 'modulus');
		var e = readMPInt$1(der, 'public exponent');
		var d = readMPInt$1(der, 'private exponent');
		var p = readMPInt$1(der, 'prime1');
		var q = readMPInt$1(der, 'prime2');
		var dmodp = readMPInt$1(der, 'exponent1');
		var dmodq = readMPInt$1(der, 'exponent2');
		var iqmp = readMPInt$1(der, 'iqmp');

		// now, make the key
		var key = {
			type: 'rsa',
			parts: [
				{ name: 'n', data: n },
				{ name: 'e', data: e },
				{ name: 'd', data: d },
				{ name: 'iqmp', data: iqmp },
				{ name: 'p', data: p },
				{ name: 'q', data: q },
				{ name: 'dmodp', data: dmodp },
				{ name: 'dmodq', data: dmodq }
			]
		};

		return (new privateKey(key));
	}

	function readPkcs1DSAPrivate(der) {
		var version = readMPInt$1(der, 'version');
		assert_1.strictEqual(version.readUInt8(0), 0);

		var p = readMPInt$1(der, 'p');
		var q = readMPInt$1(der, 'q');
		var g = readMPInt$1(der, 'g');
		var y = readMPInt$1(der, 'y');
		var x = readMPInt$1(der, 'x');

		// now, make the key
		var key = {
			type: 'dsa',
			parts: [
				{ name: 'p', data: p },
				{ name: 'q', data: q },
				{ name: 'g', data: g },
				{ name: 'y', data: y },
				{ name: 'x', data: x }
			]
		};

		return (new privateKey(key));
	}

	function readPkcs1EdDSAPrivate(der) {
		var version = readMPInt$1(der, 'version');
		assert_1.strictEqual(version.readUInt8(0), 1);

		// private key
		var k = der.readString(lib$6.Ber.OctetString, true);

		der.readSequence(0xa0);
		var oid = der.readOID();
		assert_1.strictEqual(oid, '1.3.101.112', 'the ed25519 curve identifier');

		der.readSequence(0xa1);
		var A = utils$3.readBitString(der);

		var key = {
			type: 'ed25519',
			parts: [
				{ name: 'A', data: utils$3.zeroPadToLength(A, 32) },
				{ name: 'k', data: k }
			]
		};

		return (new privateKey(key));
	}

	function readPkcs1DSAPublic(der) {
		var y = readMPInt$1(der, 'y');
		var p = readMPInt$1(der, 'p');
		var q = readMPInt$1(der, 'q');
		var g = readMPInt$1(der, 'g');

		var key$1 = {
			type: 'dsa',
			parts: [
				{ name: 'y', data: y },
				{ name: 'p', data: p },
				{ name: 'q', data: q },
				{ name: 'g', data: g }
			]
		};

		return (new key(key$1));
	}

	function readPkcs1ECDSAPublic(der) {
		der.readSequence();

		var oid = der.readOID();
		assert_1.strictEqual(oid, '1.2.840.10045.2.1', 'must be ecPublicKey');

		var curveOid = der.readOID();

		var curve;
		var curves = Object.keys(algs.curves);
		for (var j = 0; j < curves.length; ++j) {
			var c = curves[j];
			var cd = algs.curves[c];
			if (cd.pkcs8oid === curveOid) {
				curve = c;
				break;
			}
		}
		assert_1.string(curve, 'a known ECDSA named curve');

		var Q = der.readString(lib$6.Ber.BitString, true);
		Q = utils$3.ecNormalize(Q);

		var key$1 = {
			type: 'ecdsa',
			parts: [
				{ name: 'curve', data: Buffer$r.from(curve) },
				{ name: 'Q', data: Q }
			]
		};

		return (new key(key$1));
	}

	function readPkcs1ECDSAPrivate(der) {
		var version = readMPInt$1(der, 'version');
		assert_1.strictEqual(version.readUInt8(0), 1);

		// private key
		var d = der.readString(lib$6.Ber.OctetString, true);

		der.readSequence(0xa0);
		var curve = readECDSACurve(der);
		assert_1.string(curve, 'a known elliptic curve');

		der.readSequence(0xa1);
		var Q = der.readString(lib$6.Ber.BitString, true);
		Q = utils$3.ecNormalize(Q);

		var key = {
			type: 'ecdsa',
			parts: [
				{ name: 'curve', data: Buffer$r.from(curve) },
				{ name: 'Q', data: Q },
				{ name: 'd', data: d }
			]
		};

		return (new privateKey(key));
	}

	function writePkcs1(der, key) {
		der.startSequence();

		switch (key.type) {
		case 'rsa':
			if (privateKey.isPrivateKey(key))
				writePkcs1RSAPrivate(der, key);
			else
				writePkcs1RSAPublic(der, key);
			break;
		case 'dsa':
			if (privateKey.isPrivateKey(key))
				writePkcs1DSAPrivate(der, key);
			else
				writePkcs1DSAPublic(der, key);
			break;
		case 'ecdsa':
			if (privateKey.isPrivateKey(key))
				writePkcs1ECDSAPrivate(der, key);
			else
				writePkcs1ECDSAPublic(der, key);
			break;
		case 'ed25519':
			if (privateKey.isPrivateKey(key))
				writePkcs1EdDSAPrivate(der, key);
			else
				writePkcs1EdDSAPublic();
			break;
		default:
			throw (new Error('Unknown key algo: ' + key.type));
		}

		der.endSequence();
	}

	function writePkcs1RSAPublic(der, key) {
		der.writeBuffer(key.part.n.data, lib$6.Ber.Integer);
		der.writeBuffer(key.part.e.data, lib$6.Ber.Integer);
	}

	function writePkcs1RSAPrivate(der, key) {
		var ver = Buffer$r.from([0]);
		der.writeBuffer(ver, lib$6.Ber.Integer);

		der.writeBuffer(key.part.n.data, lib$6.Ber.Integer);
		der.writeBuffer(key.part.e.data, lib$6.Ber.Integer);
		der.writeBuffer(key.part.d.data, lib$6.Ber.Integer);
		der.writeBuffer(key.part.p.data, lib$6.Ber.Integer);
		der.writeBuffer(key.part.q.data, lib$6.Ber.Integer);
		if (!key.part.dmodp || !key.part.dmodq)
			utils$3.addRSAMissing(key);
		der.writeBuffer(key.part.dmodp.data, lib$6.Ber.Integer);
		der.writeBuffer(key.part.dmodq.data, lib$6.Ber.Integer);
		der.writeBuffer(key.part.iqmp.data, lib$6.Ber.Integer);
	}

	function writePkcs1DSAPrivate(der, key) {
		var ver = Buffer$r.from([0]);
		der.writeBuffer(ver, lib$6.Ber.Integer);

		der.writeBuffer(key.part.p.data, lib$6.Ber.Integer);
		der.writeBuffer(key.part.q.data, lib$6.Ber.Integer);
		der.writeBuffer(key.part.g.data, lib$6.Ber.Integer);
		der.writeBuffer(key.part.y.data, lib$6.Ber.Integer);
		der.writeBuffer(key.part.x.data, lib$6.Ber.Integer);
	}

	function writePkcs1DSAPublic(der, key) {
		der.writeBuffer(key.part.y.data, lib$6.Ber.Integer);
		der.writeBuffer(key.part.p.data, lib$6.Ber.Integer);
		der.writeBuffer(key.part.q.data, lib$6.Ber.Integer);
		der.writeBuffer(key.part.g.data, lib$6.Ber.Integer);
	}

	function writePkcs1ECDSAPublic(der, key) {
		der.startSequence();

		der.writeOID('1.2.840.10045.2.1'); /* ecPublicKey */
		var curve = key.part.curve.data.toString();
		var curveOid = algs.curves[curve].pkcs8oid;
		assert_1.string(curveOid, 'a known ECDSA named curve');
		der.writeOID(curveOid);

		der.endSequence();

		var Q = utils$3.ecNormalize(key.part.Q.data, true);
		der.writeBuffer(Q, lib$6.Ber.BitString);
	}

	function writePkcs1ECDSAPrivate(der, key) {
		var ver = Buffer$r.from([1]);
		der.writeBuffer(ver, lib$6.Ber.Integer);

		der.writeBuffer(key.part.d.data, lib$6.Ber.OctetString);

		der.startSequence(0xa0);
		var curve = key.part.curve.data.toString();
		var curveOid = algs.curves[curve].pkcs8oid;
		assert_1.string(curveOid, 'a known ECDSA named curve');
		der.writeOID(curveOid);
		der.endSequence();

		der.startSequence(0xa1);
		var Q = utils$3.ecNormalize(key.part.Q.data, true);
		der.writeBuffer(Q, lib$6.Ber.BitString);
		der.endSequence();
	}

	function writePkcs1EdDSAPrivate(der, key) {
		var ver = Buffer$r.from([1]);
		der.writeBuffer(ver, lib$6.Ber.Integer);

		der.writeBuffer(key.part.k.data, lib$6.Ber.OctetString);

		der.startSequence(0xa0);
		der.writeOID('1.3.101.112');
		der.endSequence();

		der.startSequence(0xa1);
		utils$3.writeBitString(der, key.part.A.data);
		der.endSequence();
	}

	function writePkcs1EdDSAPublic(der, key) {
		throw (new Error('Public keys are not supported for EdDSA PKCS#1'));
	}

	// Copyright 2015 Joyent, Inc.

	var rfc4253 = {
		read: read$c.bind(undefined, false, undefined),
		readType: read$c.bind(undefined, false),
		write: write$d,
		/* semi-private api, used by sshpk-agent */
		readPartial: read$c.bind(undefined, true),

		/* shared with ssh format */
		readInternal: read$c,
		keyTypeToAlg: keyTypeToAlg,
		algToKeyType: algToKeyType
	};


	var Buffer$q = safer_1.Buffer;






	function algToKeyType(alg) {
		assert_1.string(alg);
		if (alg === 'ssh-dss')
			return ('dsa');
		else if (alg === 'ssh-rsa')
			return ('rsa');
		else if (alg === 'ssh-ed25519')
			return ('ed25519');
		else if (alg === 'ssh-curve25519')
			return ('curve25519');
		else if (alg.match(/^ecdsa-sha2-/))
			return ('ecdsa');
		else
			throw (new Error('Unknown algorithm ' + alg));
	}

	function keyTypeToAlg(key) {
		assert_1.object(key);
		if (key.type === 'dsa')
			return ('ssh-dss');
		else if (key.type === 'rsa')
			return ('ssh-rsa');
		else if (key.type === 'ed25519')
			return ('ssh-ed25519');
		else if (key.type === 'curve25519')
			return ('ssh-curve25519');
		else if (key.type === 'ecdsa')
			return ('ecdsa-sha2-' + key.part.curve.data.toString());
		else
			throw (new Error('Unknown key type ' + key.type));
	}

	function read$c(partial, type, buf, options) {
		if (typeof (buf) === 'string')
			buf = Buffer$q.from(buf);
		assert_1.buffer(buf, 'buf');

		var key$1 = {};

		var parts = key$1.parts = [];
		var sshbuf = new sshBuffer({buffer: buf});

		var alg = sshbuf.readString();
		assert_1.ok(!sshbuf.atEnd(), 'key must have at least one part');

		key$1.type = algToKeyType(alg);

		var partCount = algs.info[key$1.type].parts.length;
		if (type && type === 'private')
			partCount = algs.privInfo[key$1.type].parts.length;

		while (!sshbuf.atEnd() && parts.length < partCount)
			parts.push(sshbuf.readPart());
		while (!partial && !sshbuf.atEnd())
			parts.push(sshbuf.readPart());

		assert_1.ok(parts.length >= 1,
		    'key must have at least one part');
		assert_1.ok(partial || sshbuf.atEnd(),
		    'leftover bytes at end of key');

		var Constructor = key;
		var algInfo = algs.info[key$1.type];
		if (type === 'private' || algInfo.parts.length !== parts.length) {
			algInfo = algs.privInfo[key$1.type];
			Constructor = privateKey;
		}
		assert_1.strictEqual(algInfo.parts.length, parts.length);

		if (key$1.type === 'ecdsa') {
			var res = /^ecdsa-sha2-(.+)$/.exec(alg);
			assert_1.ok(res !== null);
			assert_1.strictEqual(res[1], parts[0].data.toString());
		}

		var normalized = true;
		for (var i = 0; i < algInfo.parts.length; ++i) {
			var p = parts[i];
			p.name = algInfo.parts[i];
			/*
			 * OpenSSH stores ed25519 "private" keys as seed + public key
			 * concat'd together (k followed by A). We want to keep them
			 * separate for other formats that don't do this.
			 */
			if (key$1.type === 'ed25519' && p.name === 'k')
				p.data = p.data.slice(0, 32);

			if (p.name !== 'curve' && algInfo.normalize !== false) {
				var nd;
				if (key$1.type === 'ed25519') {
					nd = utils$3.zeroPadToLength(p.data, 32);
				} else {
					nd = utils$3.mpNormalize(p.data);
				}
				if (nd.toString('binary') !==
				    p.data.toString('binary')) {
					p.data = nd;
					normalized = false;
				}
			}
		}

		if (normalized)
			key$1._rfc4253Cache = sshbuf.toBuffer();

		if (partial && typeof (partial) === 'object') {
			partial.remainder = sshbuf.remainder();
			partial.consumed = sshbuf._offset;
		}

		return (new Constructor(key$1));
	}

	function write$d(key, options) {
		assert_1.object(key);

		var alg = keyTypeToAlg(key);
		var i;

		var algInfo = algs.info[key.type];
		if (privateKey.isPrivateKey(key))
			algInfo = algs.privInfo[key.type];
		var parts = algInfo.parts;

		var buf = new sshBuffer({});

		buf.writeString(alg);

		for (i = 0; i < parts.length; ++i) {
			var data = key.part[parts[i]].data;
			if (algInfo.normalize !== false) {
				if (key.type === 'ed25519')
					data = utils$3.zeroPadToLength(data, 32);
				else
					data = utils$3.mpNormalize(data);
			}
			if (key.type === 'ed25519' && parts[i] === 'k')
				data = Buffer$q.concat([data, key.part.A.data]);
			buf.writeBuffer(data);
		}

		return (buf.toBuffer());
	}

	var crypto_hash_sha512 = naclFast.lowlevel.crypto_hash;

	/*
	 * This file is a 1:1 port from the OpenBSD blowfish.c and bcrypt_pbkdf.c. As a
	 * result, it retains the original copyright and license. The two files are
	 * under slightly different (but compatible) licenses, and are here combined in
	 * one file.
	 *
	 * Credit for the actual porting work goes to:
	 *  Devi Mandiri <me@devi.web.id>
	 */

	/*
	 * The Blowfish portions are under the following license:
	 *
	 * Blowfish block cipher for OpenBSD
	 * Copyright 1997 Niels Provos <provos@physnet.uni-hamburg.de>
	 * All rights reserved.
	 *
	 * Implementation advice by David Mazieres <dm@lcs.mit.edu>.
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions
	 * are met:
	 * 1. Redistributions of source code must retain the above copyright
	 *    notice, this list of conditions and the following disclaimer.
	 * 2. Redistributions in binary form must reproduce the above copyright
	 *    notice, this list of conditions and the following disclaimer in the
	 *    documentation and/or other materials provided with the distribution.
	 * 3. The name of the author may not be used to endorse or promote products
	 *    derived from this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
	 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
	 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
	 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
	 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
	 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */

	/*
	 * The bcrypt_pbkdf portions are under the following license:
	 *
	 * Copyright (c) 2013 Ted Unangst <tedu@openbsd.org>
	 *
	 * Permission to use, copy, modify, and distribute this software for any
	 * purpose with or without fee is hereby granted, provided that the above
	 * copyright notice and this permission notice appear in all copies.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
	 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
	 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
	 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
	 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
	 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
	 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
	 */

	/*
	 * Performance improvements (Javascript-specific):
	 *
	 * Copyright 2016, Joyent Inc
	 * Author: Alex Wilson <alex.wilson@joyent.com>
	 *
	 * Permission to use, copy, modify, and distribute this software for any
	 * purpose with or without fee is hereby granted, provided that the above
	 * copyright notice and this permission notice appear in all copies.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
	 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
	 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
	 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
	 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
	 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
	 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
	 */

	// Ported from OpenBSD bcrypt_pbkdf.c v1.9

	var BLF_J = 0;

	var Blowfish = function() {
	  this.S = [
	    new Uint32Array([
	      0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7,
	      0xb8e1afed, 0x6a267e96, 0xba7c9045, 0xf12c7f99,
	      0x24a19947, 0xb3916cf7, 0x0801f2e2, 0x858efc16,
	      0x636920d8, 0x71574e69, 0xa458fea3, 0xf4933d7e,
	      0x0d95748f, 0x728eb658, 0x718bcd58, 0x82154aee,
	      0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af26013,
	      0xc5d1b023, 0x286085f0, 0xca417918, 0xb8db38ef,
	      0x8e79dcb0, 0x603a180e, 0x6c9e0e8b, 0xb01e8a3e,
	      0xd71577c1, 0xbd314b27, 0x78af2fda, 0x55605c60,
	      0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440,
	      0x55ca396a, 0x2aab10b6, 0xb4cc5c34, 0x1141e8ce,
	      0xa15486af, 0x7c72e993, 0xb3ee1411, 0x636fbc2a,
	      0x2ba9c55d, 0x741831f6, 0xce5c3e16, 0x9b87931e,
	      0xafd6ba33, 0x6c24cf5c, 0x7a325381, 0x28958677,
	      0x3b8f4898, 0x6b4bb9af, 0xc4bfe81b, 0x66282193,
	      0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032,
	      0xef845d5d, 0xe98575b1, 0xdc262302, 0xeb651b88,
	      0x23893e81, 0xd396acc5, 0x0f6d6ff3, 0x83f44239,
	      0x2e0b4482, 0xa4842004, 0x69c8f04a, 0x9e1f9b5e,
	      0x21c66842, 0xf6e96c9a, 0x670c9c61, 0xabd388f0,
	      0x6a51a0d2, 0xd8542f68, 0x960fa728, 0xab5133a3,
	      0x6eef0b6c, 0x137a3be4, 0xba3bf050, 0x7efb2a98,
	      0xa1f1651d, 0x39af0176, 0x66ca593e, 0x82430e88,
	      0x8cee8619, 0x456f9fb4, 0x7d84a5c3, 0x3b8b5ebe,
	      0xe06f75d8, 0x85c12073, 0x401a449f, 0x56c16aa6,
	      0x4ed3aa62, 0x363f7706, 0x1bfedf72, 0x429b023d,
	      0x37d0d724, 0xd00a1248, 0xdb0fead3, 0x49f1c09b,
	      0x075372c9, 0x80991b7b, 0x25d479d8, 0xf6e8def7,
	      0xe3fe501a, 0xb6794c3b, 0x976ce0bd, 0x04c006ba,
	      0xc1a94fb6, 0x409f60c4, 0x5e5c9ec2, 0x196a2463,
	      0x68fb6faf, 0x3e6c53b5, 0x1339b2eb, 0x3b52ec6f,
	      0x6dfc511f, 0x9b30952c, 0xcc814544, 0xaf5ebd09,
	      0xbee3d004, 0xde334afd, 0x660f2807, 0x192e4bb3,
	      0xc0cba857, 0x45c8740f, 0xd20b5f39, 0xb9d3fbdb,
	      0x5579c0bd, 0x1a60320a, 0xd6a100c6, 0x402c7279,
	      0x679f25fe, 0xfb1fa3cc, 0x8ea5e9f8, 0xdb3222f8,
	      0x3c7516df, 0xfd616b15, 0x2f501ec8, 0xad0552ab,
	      0x323db5fa, 0xfd238760, 0x53317b48, 0x3e00df82,
	      0x9e5c57bb, 0xca6f8ca0, 0x1a87562e, 0xdf1769db,
	      0xd542a8f6, 0x287effc3, 0xac6732c6, 0x8c4f5573,
	      0x695b27b0, 0xbbca58c8, 0xe1ffa35d, 0xb8f011a0,
	      0x10fa3d98, 0xfd2183b8, 0x4afcb56c, 0x2dd1d35b,
	      0x9a53e479, 0xb6f84565, 0xd28e49bc, 0x4bfb9790,
	      0xe1ddf2da, 0xa4cb7e33, 0x62fb1341, 0xcee4c6e8,
	      0xef20cada, 0x36774c01, 0xd07e9efe, 0x2bf11fb4,
	      0x95dbda4d, 0xae909198, 0xeaad8e71, 0x6b93d5a0,
	      0xd08ed1d0, 0xafc725e0, 0x8e3c5b2f, 0x8e7594b7,
	      0x8ff6e2fb, 0xf2122b64, 0x8888b812, 0x900df01c,
	      0x4fad5ea0, 0x688fc31c, 0xd1cff191, 0xb3a8c1ad,
	      0x2f2f2218, 0xbe0e1777, 0xea752dfe, 0x8b021fa1,
	      0xe5a0cc0f, 0xb56f74e8, 0x18acf3d6, 0xce89e299,
	      0xb4a84fe0, 0xfd13e0b7, 0x7cc43b81, 0xd2ada8d9,
	      0x165fa266, 0x80957705, 0x93cc7314, 0x211a1477,
	      0xe6ad2065, 0x77b5fa86, 0xc75442f5, 0xfb9d35cf,
	      0xebcdaf0c, 0x7b3e89a0, 0xd6411bd3, 0xae1e7e49,
	      0x00250e2d, 0x2071b35e, 0x226800bb, 0x57b8e0af,
	      0x2464369b, 0xf009b91e, 0x5563911d, 0x59dfa6aa,
	      0x78c14389, 0xd95a537f, 0x207d5ba2, 0x02e5b9c5,
	      0x83260376, 0x6295cfa9, 0x11c81968, 0x4e734a41,
	      0xb3472dca, 0x7b14a94a, 0x1b510052, 0x9a532915,
	      0xd60f573f, 0xbc9bc6e4, 0x2b60a476, 0x81e67400,
	      0x08ba6fb5, 0x571be91f, 0xf296ec6b, 0x2a0dd915,
	      0xb6636521, 0xe7b9f9b6, 0xff34052e, 0xc5855664,
	      0x53b02d5d, 0xa99f8fa1, 0x08ba4799, 0x6e85076a]),
	    new Uint32Array([
	      0x4b7a70e9, 0xb5b32944, 0xdb75092e, 0xc4192623,
	      0xad6ea6b0, 0x49a7df7d, 0x9cee60b8, 0x8fedb266,
	      0xecaa8c71, 0x699a17ff, 0x5664526c, 0xc2b19ee1,
	      0x193602a5, 0x75094c29, 0xa0591340, 0xe4183a3e,
	      0x3f54989a, 0x5b429d65, 0x6b8fe4d6, 0x99f73fd6,
	      0xa1d29c07, 0xefe830f5, 0x4d2d38e6, 0xf0255dc1,
	      0x4cdd2086, 0x8470eb26, 0x6382e9c6, 0x021ecc5e,
	      0x09686b3f, 0x3ebaefc9, 0x3c971814, 0x6b6a70a1,
	      0x687f3584, 0x52a0e286, 0xb79c5305, 0xaa500737,
	      0x3e07841c, 0x7fdeae5c, 0x8e7d44ec, 0x5716f2b8,
	      0xb03ada37, 0xf0500c0d, 0xf01c1f04, 0x0200b3ff,
	      0xae0cf51a, 0x3cb574b2, 0x25837a58, 0xdc0921bd,
	      0xd19113f9, 0x7ca92ff6, 0x94324773, 0x22f54701,
	      0x3ae5e581, 0x37c2dadc, 0xc8b57634, 0x9af3dda7,
	      0xa9446146, 0x0fd0030e, 0xecc8c73e, 0xa4751e41,
	      0xe238cd99, 0x3bea0e2f, 0x3280bba1, 0x183eb331,
	      0x4e548b38, 0x4f6db908, 0x6f420d03, 0xf60a04bf,
	      0x2cb81290, 0x24977c79, 0x5679b072, 0xbcaf89af,
	      0xde9a771f, 0xd9930810, 0xb38bae12, 0xdccf3f2e,
	      0x5512721f, 0x2e6b7124, 0x501adde6, 0x9f84cd87,
	      0x7a584718, 0x7408da17, 0xbc9f9abc, 0xe94b7d8c,
	      0xec7aec3a, 0xdb851dfa, 0x63094366, 0xc464c3d2,
	      0xef1c1847, 0x3215d908, 0xdd433b37, 0x24c2ba16,
	      0x12a14d43, 0x2a65c451, 0x50940002, 0x133ae4dd,
	      0x71dff89e, 0x10314e55, 0x81ac77d6, 0x5f11199b,
	      0x043556f1, 0xd7a3c76b, 0x3c11183b, 0x5924a509,
	      0xf28fe6ed, 0x97f1fbfa, 0x9ebabf2c, 0x1e153c6e,
	      0x86e34570, 0xeae96fb1, 0x860e5e0a, 0x5a3e2ab3,
	      0x771fe71c, 0x4e3d06fa, 0x2965dcb9, 0x99e71d0f,
	      0x803e89d6, 0x5266c825, 0x2e4cc978, 0x9c10b36a,
	      0xc6150eba, 0x94e2ea78, 0xa5fc3c53, 0x1e0a2df4,
	      0xf2f74ea7, 0x361d2b3d, 0x1939260f, 0x19c27960,
	      0x5223a708, 0xf71312b6, 0xebadfe6e, 0xeac31f66,
	      0xe3bc4595, 0xa67bc883, 0xb17f37d1, 0x018cff28,
	      0xc332ddef, 0xbe6c5aa5, 0x65582185, 0x68ab9802,
	      0xeecea50f, 0xdb2f953b, 0x2aef7dad, 0x5b6e2f84,
	      0x1521b628, 0x29076170, 0xecdd4775, 0x619f1510,
	      0x13cca830, 0xeb61bd96, 0x0334fe1e, 0xaa0363cf,
	      0xb5735c90, 0x4c70a239, 0xd59e9e0b, 0xcbaade14,
	      0xeecc86bc, 0x60622ca7, 0x9cab5cab, 0xb2f3846e,
	      0x648b1eaf, 0x19bdf0ca, 0xa02369b9, 0x655abb50,
	      0x40685a32, 0x3c2ab4b3, 0x319ee9d5, 0xc021b8f7,
	      0x9b540b19, 0x875fa099, 0x95f7997e, 0x623d7da8,
	      0xf837889a, 0x97e32d77, 0x11ed935f, 0x16681281,
	      0x0e358829, 0xc7e61fd6, 0x96dedfa1, 0x7858ba99,
	      0x57f584a5, 0x1b227263, 0x9b83c3ff, 0x1ac24696,
	      0xcdb30aeb, 0x532e3054, 0x8fd948e4, 0x6dbc3128,
	      0x58ebf2ef, 0x34c6ffea, 0xfe28ed61, 0xee7c3c73,
	      0x5d4a14d9, 0xe864b7e3, 0x42105d14, 0x203e13e0,
	      0x45eee2b6, 0xa3aaabea, 0xdb6c4f15, 0xfacb4fd0,
	      0xc742f442, 0xef6abbb5, 0x654f3b1d, 0x41cd2105,
	      0xd81e799e, 0x86854dc7, 0xe44b476a, 0x3d816250,
	      0xcf62a1f2, 0x5b8d2646, 0xfc8883a0, 0xc1c7b6a3,
	      0x7f1524c3, 0x69cb7492, 0x47848a0b, 0x5692b285,
	      0x095bbf00, 0xad19489d, 0x1462b174, 0x23820e00,
	      0x58428d2a, 0x0c55f5ea, 0x1dadf43e, 0x233f7061,
	      0x3372f092, 0x8d937e41, 0xd65fecf1, 0x6c223bdb,
	      0x7cde3759, 0xcbee7460, 0x4085f2a7, 0xce77326e,
	      0xa6078084, 0x19f8509e, 0xe8efd855, 0x61d99735,
	      0xa969a7aa, 0xc50c06c2, 0x5a04abfc, 0x800bcadc,
	      0x9e447a2e, 0xc3453484, 0xfdd56705, 0x0e1e9ec9,
	      0xdb73dbd3, 0x105588cd, 0x675fda79, 0xe3674340,
	      0xc5c43465, 0x713e38d8, 0x3d28f89e, 0xf16dff20,
	      0x153e21e7, 0x8fb03d4a, 0xe6e39f2b, 0xdb83adf7]),
	    new Uint32Array([
	      0xe93d5a68, 0x948140f7, 0xf64c261c, 0x94692934,
	      0x411520f7, 0x7602d4f7, 0xbcf46b2e, 0xd4a20068,
	      0xd4082471, 0x3320f46a, 0x43b7d4b7, 0x500061af,
	      0x1e39f62e, 0x97244546, 0x14214f74, 0xbf8b8840,
	      0x4d95fc1d, 0x96b591af, 0x70f4ddd3, 0x66a02f45,
	      0xbfbc09ec, 0x03bd9785, 0x7fac6dd0, 0x31cb8504,
	      0x96eb27b3, 0x55fd3941, 0xda2547e6, 0xabca0a9a,
	      0x28507825, 0x530429f4, 0x0a2c86da, 0xe9b66dfb,
	      0x68dc1462, 0xd7486900, 0x680ec0a4, 0x27a18dee,
	      0x4f3ffea2, 0xe887ad8c, 0xb58ce006, 0x7af4d6b6,
	      0xaace1e7c, 0xd3375fec, 0xce78a399, 0x406b2a42,
	      0x20fe9e35, 0xd9f385b9, 0xee39d7ab, 0x3b124e8b,
	      0x1dc9faf7, 0x4b6d1856, 0x26a36631, 0xeae397b2,
	      0x3a6efa74, 0xdd5b4332, 0x6841e7f7, 0xca7820fb,
	      0xfb0af54e, 0xd8feb397, 0x454056ac, 0xba489527,
	      0x55533a3a, 0x20838d87, 0xfe6ba9b7, 0xd096954b,
	      0x55a867bc, 0xa1159a58, 0xcca92963, 0x99e1db33,
	      0xa62a4a56, 0x3f3125f9, 0x5ef47e1c, 0x9029317c,
	      0xfdf8e802, 0x04272f70, 0x80bb155c, 0x05282ce3,
	      0x95c11548, 0xe4c66d22, 0x48c1133f, 0xc70f86dc,
	      0x07f9c9ee, 0x41041f0f, 0x404779a4, 0x5d886e17,
	      0x325f51eb, 0xd59bc0d1, 0xf2bcc18f, 0x41113564,
	      0x257b7834, 0x602a9c60, 0xdff8e8a3, 0x1f636c1b,
	      0x0e12b4c2, 0x02e1329e, 0xaf664fd1, 0xcad18115,
	      0x6b2395e0, 0x333e92e1, 0x3b240b62, 0xeebeb922,
	      0x85b2a20e, 0xe6ba0d99, 0xde720c8c, 0x2da2f728,
	      0xd0127845, 0x95b794fd, 0x647d0862, 0xe7ccf5f0,
	      0x5449a36f, 0x877d48fa, 0xc39dfd27, 0xf33e8d1e,
	      0x0a476341, 0x992eff74, 0x3a6f6eab, 0xf4f8fd37,
	      0xa812dc60, 0xa1ebddf8, 0x991be14c, 0xdb6e6b0d,
	      0xc67b5510, 0x6d672c37, 0x2765d43b, 0xdcd0e804,
	      0xf1290dc7, 0xcc00ffa3, 0xb5390f92, 0x690fed0b,
	      0x667b9ffb, 0xcedb7d9c, 0xa091cf0b, 0xd9155ea3,
	      0xbb132f88, 0x515bad24, 0x7b9479bf, 0x763bd6eb,
	      0x37392eb3, 0xcc115979, 0x8026e297, 0xf42e312d,
	      0x6842ada7, 0xc66a2b3b, 0x12754ccc, 0x782ef11c,
	      0x6a124237, 0xb79251e7, 0x06a1bbe6, 0x4bfb6350,
	      0x1a6b1018, 0x11caedfa, 0x3d25bdd8, 0xe2e1c3c9,
	      0x44421659, 0x0a121386, 0xd90cec6e, 0xd5abea2a,
	      0x64af674e, 0xda86a85f, 0xbebfe988, 0x64e4c3fe,
	      0x9dbc8057, 0xf0f7c086, 0x60787bf8, 0x6003604d,
	      0xd1fd8346, 0xf6381fb0, 0x7745ae04, 0xd736fccc,
	      0x83426b33, 0xf01eab71, 0xb0804187, 0x3c005e5f,
	      0x77a057be, 0xbde8ae24, 0x55464299, 0xbf582e61,
	      0x4e58f48f, 0xf2ddfda2, 0xf474ef38, 0x8789bdc2,
	      0x5366f9c3, 0xc8b38e74, 0xb475f255, 0x46fcd9b9,
	      0x7aeb2661, 0x8b1ddf84, 0x846a0e79, 0x915f95e2,
	      0x466e598e, 0x20b45770, 0x8cd55591, 0xc902de4c,
	      0xb90bace1, 0xbb8205d0, 0x11a86248, 0x7574a99e,
	      0xb77f19b6, 0xe0a9dc09, 0x662d09a1, 0xc4324633,
	      0xe85a1f02, 0x09f0be8c, 0x4a99a025, 0x1d6efe10,
	      0x1ab93d1d, 0x0ba5a4df, 0xa186f20f, 0x2868f169,
	      0xdcb7da83, 0x573906fe, 0xa1e2ce9b, 0x4fcd7f52,
	      0x50115e01, 0xa70683fa, 0xa002b5c4, 0x0de6d027,
	      0x9af88c27, 0x773f8641, 0xc3604c06, 0x61a806b5,
	      0xf0177a28, 0xc0f586e0, 0x006058aa, 0x30dc7d62,
	      0x11e69ed7, 0x2338ea63, 0x53c2dd94, 0xc2c21634,
	      0xbbcbee56, 0x90bcb6de, 0xebfc7da1, 0xce591d76,
	      0x6f05e409, 0x4b7c0188, 0x39720a3d, 0x7c927c24,
	      0x86e3725f, 0x724d9db9, 0x1ac15bb4, 0xd39eb8fc,
	      0xed545578, 0x08fca5b5, 0xd83d7cd3, 0x4dad0fc4,
	      0x1e50ef5e, 0xb161e6f8, 0xa28514d9, 0x6c51133c,
	      0x6fd5c7e7, 0x56e14ec4, 0x362abfce, 0xddc6c837,
	      0xd79a3234, 0x92638212, 0x670efa8e, 0x406000e0]),
	    new Uint32Array([
	      0x3a39ce37, 0xd3faf5cf, 0xabc27737, 0x5ac52d1b,
	      0x5cb0679e, 0x4fa33742, 0xd3822740, 0x99bc9bbe,
	      0xd5118e9d, 0xbf0f7315, 0xd62d1c7e, 0xc700c47b,
	      0xb78c1b6b, 0x21a19045, 0xb26eb1be, 0x6a366eb4,
	      0x5748ab2f, 0xbc946e79, 0xc6a376d2, 0x6549c2c8,
	      0x530ff8ee, 0x468dde7d, 0xd5730a1d, 0x4cd04dc6,
	      0x2939bbdb, 0xa9ba4650, 0xac9526e8, 0xbe5ee304,
	      0xa1fad5f0, 0x6a2d519a, 0x63ef8ce2, 0x9a86ee22,
	      0xc089c2b8, 0x43242ef6, 0xa51e03aa, 0x9cf2d0a4,
	      0x83c061ba, 0x9be96a4d, 0x8fe51550, 0xba645bd6,
	      0x2826a2f9, 0xa73a3ae1, 0x4ba99586, 0xef5562e9,
	      0xc72fefd3, 0xf752f7da, 0x3f046f69, 0x77fa0a59,
	      0x80e4a915, 0x87b08601, 0x9b09e6ad, 0x3b3ee593,
	      0xe990fd5a, 0x9e34d797, 0x2cf0b7d9, 0x022b8b51,
	      0x96d5ac3a, 0x017da67d, 0xd1cf3ed6, 0x7c7d2d28,
	      0x1f9f25cf, 0xadf2b89b, 0x5ad6b472, 0x5a88f54c,
	      0xe029ac71, 0xe019a5e6, 0x47b0acfd, 0xed93fa9b,
	      0xe8d3c48d, 0x283b57cc, 0xf8d56629, 0x79132e28,
	      0x785f0191, 0xed756055, 0xf7960e44, 0xe3d35e8c,
	      0x15056dd4, 0x88f46dba, 0x03a16125, 0x0564f0bd,
	      0xc3eb9e15, 0x3c9057a2, 0x97271aec, 0xa93a072a,
	      0x1b3f6d9b, 0x1e6321f5, 0xf59c66fb, 0x26dcf319,
	      0x7533d928, 0xb155fdf5, 0x03563482, 0x8aba3cbb,
	      0x28517711, 0xc20ad9f8, 0xabcc5167, 0xccad925f,
	      0x4de81751, 0x3830dc8e, 0x379d5862, 0x9320f991,
	      0xea7a90c2, 0xfb3e7bce, 0x5121ce64, 0x774fbe32,
	      0xa8b6e37e, 0xc3293d46, 0x48de5369, 0x6413e680,
	      0xa2ae0810, 0xdd6db224, 0x69852dfd, 0x09072166,
	      0xb39a460a, 0x6445c0dd, 0x586cdecf, 0x1c20c8ae,
	      0x5bbef7dd, 0x1b588d40, 0xccd2017f, 0x6bb4e3bb,
	      0xdda26a7e, 0x3a59ff45, 0x3e350a44, 0xbcb4cdd5,
	      0x72eacea8, 0xfa6484bb, 0x8d6612ae, 0xbf3c6f47,
	      0xd29be463, 0x542f5d9e, 0xaec2771b, 0xf64e6370,
	      0x740e0d8d, 0xe75b1357, 0xf8721671, 0xaf537d5d,
	      0x4040cb08, 0x4eb4e2cc, 0x34d2466a, 0x0115af84,
	      0xe1b00428, 0x95983a1d, 0x06b89fb4, 0xce6ea048,
	      0x6f3f3b82, 0x3520ab82, 0x011a1d4b, 0x277227f8,
	      0x611560b1, 0xe7933fdc, 0xbb3a792b, 0x344525bd,
	      0xa08839e1, 0x51ce794b, 0x2f32c9b7, 0xa01fbac9,
	      0xe01cc87e, 0xbcc7d1f6, 0xcf0111c3, 0xa1e8aac7,
	      0x1a908749, 0xd44fbd9a, 0xd0dadecb, 0xd50ada38,
	      0x0339c32a, 0xc6913667, 0x8df9317c, 0xe0b12b4f,
	      0xf79e59b7, 0x43f5bb3a, 0xf2d519ff, 0x27d9459c,
	      0xbf97222c, 0x15e6fc2a, 0x0f91fc71, 0x9b941525,
	      0xfae59361, 0xceb69ceb, 0xc2a86459, 0x12baa8d1,
	      0xb6c1075e, 0xe3056a0c, 0x10d25065, 0xcb03a442,
	      0xe0ec6e0e, 0x1698db3b, 0x4c98a0be, 0x3278e964,
	      0x9f1f9532, 0xe0d392df, 0xd3a0342b, 0x8971f21e,
	      0x1b0a7441, 0x4ba3348c, 0xc5be7120, 0xc37632d8,
	      0xdf359f8d, 0x9b992f2e, 0xe60b6f47, 0x0fe3f11d,
	      0xe54cda54, 0x1edad891, 0xce6279cf, 0xcd3e7e6f,
	      0x1618b166, 0xfd2c1d05, 0x848fd2c5, 0xf6fb2299,
	      0xf523f357, 0xa6327623, 0x93a83531, 0x56cccd02,
	      0xacf08162, 0x5a75ebb5, 0x6e163697, 0x88d273cc,
	      0xde966292, 0x81b949d0, 0x4c50901b, 0x71c65614,
	      0xe6c6c7bd, 0x327a140a, 0x45e1d006, 0xc3f27b9a,
	      0xc9aa53fd, 0x62a80f00, 0xbb25bfe2, 0x35bdd2f6,
	      0x71126905, 0xb2040222, 0xb6cbcf7c, 0xcd769c2b,
	      0x53113ec0, 0x1640e3d3, 0x38abbd60, 0x2547adf0,
	      0xba38209c, 0xf746ce76, 0x77afa1c5, 0x20756060,
	      0x85cbfe4e, 0x8ae88dd8, 0x7aaaf9b0, 0x4cf9aa7e,
	      0x1948c25c, 0x02fb8a8c, 0x01c36ae4, 0xd6ebe1f9,
	      0x90d4f869, 0xa65cdea0, 0x3f09252d, 0xc208e69f,
	      0xb74e6132, 0xce77e25b, 0x578fdfe3, 0x3ac372e6])
	    ];
	  this.P = new Uint32Array([
	    0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344,
	    0xa4093822, 0x299f31d0, 0x082efa98, 0xec4e6c89,
	    0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c,
	    0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470917,
	    0x9216d5d9, 0x8979fb1b]);
	};

	function F(S, x8, i) {
	  return (((S[0][x8[i+3]] +
	            S[1][x8[i+2]]) ^
	            S[2][x8[i+1]]) +
	            S[3][x8[i]]);
	}
	Blowfish.prototype.encipher = function(x, x8) {
	  if (x8 === undefined) {
	    x8 = new Uint8Array(x.buffer);
	    if (x.byteOffset !== 0)
	      x8 = x8.subarray(x.byteOffset);
	  }
	  x[0] ^= this.P[0];
	  for (var i = 1; i < 16; i += 2) {
	    x[1] ^= F(this.S, x8, 0) ^ this.P[i];
	    x[0] ^= F(this.S, x8, 4) ^ this.P[i+1];
	  }
	  var t = x[0];
	  x[0] = x[1] ^ this.P[17];
	  x[1] = t;
	};

	Blowfish.prototype.decipher = function(x) {
	  var x8 = new Uint8Array(x.buffer);
	  if (x.byteOffset !== 0)
	    x8 = x8.subarray(x.byteOffset);
	  x[0] ^= this.P[17];
	  for (var i = 16; i > 0; i -= 2) {
	    x[1] ^= F(this.S, x8, 0) ^ this.P[i];
	    x[0] ^= F(this.S, x8, 4) ^ this.P[i-1];
	  }
	  var t = x[0];
	  x[0] = x[1] ^ this.P[0];
	  x[1] = t;
	};

	function stream2word(data, databytes){
	  var i, temp = 0;
	  for (i = 0; i < 4; i++, BLF_J++) {
	    if (BLF_J >= databytes) BLF_J = 0;
	    temp = (temp << 8) | data[BLF_J];
	  }
	  return temp;
	}
	Blowfish.prototype.expand0state = function(key, keybytes) {
	  var d = new Uint32Array(2), i, k;
	  var d8 = new Uint8Array(d.buffer);

	  for (i = 0, BLF_J = 0; i < 18; i++) {
	    this.P[i] ^= stream2word(key, keybytes);
	  }
	  BLF_J = 0;

	  for (i = 0; i < 18; i += 2) {
	    this.encipher(d, d8);
	    this.P[i]   = d[0];
	    this.P[i+1] = d[1];
	  }

	  for (i = 0; i < 4; i++) {
	    for (k = 0; k < 256; k += 2) {
	      this.encipher(d, d8);
	      this.S[i][k]   = d[0];
	      this.S[i][k+1] = d[1];
	    }
	  }
	};

	Blowfish.prototype.expandstate = function(data, databytes, key, keybytes) {
	  var d = new Uint32Array(2), i, k;

	  for (i = 0, BLF_J = 0; i < 18; i++) {
	    this.P[i] ^= stream2word(key, keybytes);
	  }

	  for (i = 0, BLF_J = 0; i < 18; i += 2) {
	    d[0] ^= stream2word(data, databytes);
	    d[1] ^= stream2word(data, databytes);
	    this.encipher(d);
	    this.P[i]   = d[0];
	    this.P[i+1] = d[1];
	  }

	  for (i = 0; i < 4; i++) {
	    for (k = 0; k < 256; k += 2) {
	      d[0] ^= stream2word(data, databytes);
	      d[1] ^= stream2word(data, databytes);
	      this.encipher(d);
	      this.S[i][k]   = d[0];
	      this.S[i][k+1] = d[1];
	    }
	  }
	  BLF_J = 0;
	};

	Blowfish.prototype.enc = function(data, blocks) {
	  for (var i = 0; i < blocks; i++) {
	    this.encipher(data.subarray(i*2));
	  }
	};

	Blowfish.prototype.dec = function(data, blocks) {
	  for (var i = 0; i < blocks; i++) {
	    this.decipher(data.subarray(i*2));
	  }
	};

	var BCRYPT_BLOCKS = 8,
	    BCRYPT_HASHSIZE = 32;

	function bcrypt_hash(sha2pass, sha2salt, out) {
	  var state = new Blowfish(),
	      cdata = new Uint32Array(BCRYPT_BLOCKS), i,
	      ciphertext = new Uint8Array([79,120,121,99,104,114,111,109,97,116,105,
	            99,66,108,111,119,102,105,115,104,83,119,97,116,68,121,110,97,109,
	            105,116,101]); //"OxychromaticBlowfishSwatDynamite"

	  state.expandstate(sha2salt, 64, sha2pass, 64);
	  for (i = 0; i < 64; i++) {
	    state.expand0state(sha2salt, 64);
	    state.expand0state(sha2pass, 64);
	  }

	  for (i = 0; i < BCRYPT_BLOCKS; i++)
	    cdata[i] = stream2word(ciphertext, ciphertext.byteLength);
	  for (i = 0; i < 64; i++)
	    state.enc(cdata, cdata.byteLength / 8);

	  for (i = 0; i < BCRYPT_BLOCKS; i++) {
	    out[4*i+3] = cdata[i] >>> 24;
	    out[4*i+2] = cdata[i] >>> 16;
	    out[4*i+1] = cdata[i] >>> 8;
	    out[4*i+0] = cdata[i];
	  }
	}
	function bcrypt_pbkdf(pass, passlen, salt, saltlen, key, keylen, rounds) {
	  var sha2pass = new Uint8Array(64),
	      sha2salt = new Uint8Array(64),
	      out = new Uint8Array(BCRYPT_HASHSIZE),
	      tmpout = new Uint8Array(BCRYPT_HASHSIZE),
	      countsalt = new Uint8Array(saltlen+4),
	      i, j, amt, stride, dest, count,
	      origkeylen = keylen;

	  if (rounds < 1)
	    return -1;
	  if (passlen === 0 || saltlen === 0 || keylen === 0 ||
	      keylen > (out.byteLength * out.byteLength) || saltlen > (1<<20))
	    return -1;

	  stride = Math.floor((keylen + out.byteLength - 1) / out.byteLength);
	  amt = Math.floor((keylen + stride - 1) / stride);

	  for (i = 0; i < saltlen; i++)
	    countsalt[i] = salt[i];

	  crypto_hash_sha512(sha2pass, pass, passlen);

	  for (count = 1; keylen > 0; count++) {
	    countsalt[saltlen+0] = count >>> 24;
	    countsalt[saltlen+1] = count >>> 16;
	    countsalt[saltlen+2] = count >>>  8;
	    countsalt[saltlen+3] = count;

	    crypto_hash_sha512(sha2salt, countsalt, saltlen + 4);
	    bcrypt_hash(sha2pass, sha2salt, tmpout);
	    for (i = out.byteLength; i--;)
	      out[i] = tmpout[i];

	    for (i = 1; i < rounds; i++) {
	      crypto_hash_sha512(sha2salt, tmpout, tmpout.byteLength);
	      bcrypt_hash(sha2pass, sha2salt, tmpout);
	      for (j = 0; j < out.byteLength; j++)
	        out[j] ^= tmpout[j];
	    }

	    amt = Math.min(amt, keylen);
	    for (i = 0; i < amt; i++) {
	      dest = i * stride + (count - 1);
	      if (dest >= origkeylen)
	        break;
	      key[dest] = out[i];
	    }
	    keylen -= i;
	  }

	  return 0;
	}
	var bcryptPbkdf = {
	      BLOCKS: BCRYPT_BLOCKS,
	      HASHSIZE: BCRYPT_HASHSIZE,
	      hash: bcrypt_hash,
	      pbkdf: bcrypt_pbkdf
	};

	// Copyright 2015 Joyent, Inc.

	var sshPrivate = {
		read: read$b,
		readSSHPrivate: readSSHPrivate,
		write: write$c
	};



	var Buffer$p = safer_1.Buffer;











	var bcrypt;

	function read$b(buf, options) {
		return (pem.read(buf, options));
	}

	var MAGIC = 'openssh-key-v1';

	function readSSHPrivate(type, buf, options) {
		buf = new sshBuffer({buffer: buf});

		var magic = buf.readCString();
		assert_1.strictEqual(magic, MAGIC, 'bad magic string');

		var cipher = buf.readString();
		var kdf = buf.readString();
		var kdfOpts = buf.readBuffer();

		var nkeys = buf.readInt();
		if (nkeys !== 1) {
			throw (new Error('OpenSSH-format key file contains ' +
			    'multiple keys: this is unsupported.'));
		}

		var pubKey = buf.readBuffer();

		if (type === 'public') {
			assert_1.ok(buf.atEnd(), 'excess bytes left after key');
			return (rfc4253.read(pubKey));
		}

		var privKeyBlob = buf.readBuffer();
		assert_1.ok(buf.atEnd(), 'excess bytes left after key');

		var kdfOptsBuf = new sshBuffer({ buffer: kdfOpts });
		switch (kdf) {
		case 'none':
			if (cipher !== 'none') {
				throw (new Error('OpenSSH-format key uses KDF "none" ' +
				     'but specifies a cipher other than "none"'));
			}
			break;
		case 'bcrypt':
			var salt = kdfOptsBuf.readBuffer();
			var rounds = kdfOptsBuf.readInt();
			var cinf = utils$3.opensshCipherInfo(cipher);
			if (bcrypt === undefined) {
				bcrypt = bcryptPbkdf;
			}

			if (typeof (options.passphrase) === 'string') {
				options.passphrase = Buffer$p.from(options.passphrase,
				    'utf-8');
			}
			if (!Buffer$p.isBuffer(options.passphrase)) {
				throw (new errors$1.KeyEncryptedError(
				    options.filename, 'OpenSSH'));
			}

			var pass = new Uint8Array(options.passphrase);
			var salti = new Uint8Array(salt);
			/* Use the pbkdf to derive both the key and the IV. */
			var out = new Uint8Array(cinf.keySize + cinf.blockSize);
			var res = bcrypt.pbkdf(pass, pass.length, salti, salti.length,
			    out, out.length, rounds);
			if (res !== 0) {
				throw (new Error('bcrypt_pbkdf function returned ' +
				    'failure, parameters invalid'));
			}
			out = Buffer$p.from(out);
			var ckey = out.slice(0, cinf.keySize);
			var iv = out.slice(cinf.keySize, cinf.keySize + cinf.blockSize);
			var cipherStream = crypto__default['default'].createDecipheriv(cinf.opensslName,
			    ckey, iv);
			cipherStream.setAutoPadding(false);
			var chunk, chunks = [];
			cipherStream.once('error', function (e) {
				if (e.toString().indexOf('bad decrypt') !== -1) {
					throw (new Error('Incorrect passphrase ' +
					    'supplied, could not decrypt key'));
				}
				throw (e);
			});
			cipherStream.write(privKeyBlob);
			cipherStream.end();
			while ((chunk = cipherStream.read()) !== null)
				chunks.push(chunk);
			privKeyBlob = Buffer$p.concat(chunks);
			break;
		default:
			throw (new Error(
			    'OpenSSH-format key uses unknown KDF "' + kdf + '"'));
		}

		buf = new sshBuffer({buffer: privKeyBlob});

		var checkInt1 = buf.readInt();
		var checkInt2 = buf.readInt();
		if (checkInt1 !== checkInt2) {
			throw (new Error('Incorrect passphrase supplied, could not ' +
			    'decrypt key'));
		}

		var ret = {};
		var key = rfc4253.readInternal(ret, 'private', buf.remainder());

		buf.skip(ret.consumed);

		var comment = buf.readString();
		key.comment = comment;

		return (key);
	}

	function write$c(key, options) {
		var pubKey;
		if (privateKey.isPrivateKey(key))
			pubKey = key.toPublic();
		else
			pubKey = key;

		var cipher = 'none';
		var kdf = 'none';
		var kdfopts = Buffer$p.alloc(0);
		var cinf = { blockSize: 8 };
		var passphrase;
		if (options !== undefined) {
			passphrase = options.passphrase;
			if (typeof (passphrase) === 'string')
				passphrase = Buffer$p.from(passphrase, 'utf-8');
			if (passphrase !== undefined) {
				assert_1.buffer(passphrase, 'options.passphrase');
				assert_1.optionalString(options.cipher, 'options.cipher');
				cipher = options.cipher;
				if (cipher === undefined)
					cipher = 'aes128-ctr';
				cinf = utils$3.opensshCipherInfo(cipher);
				kdf = 'bcrypt';
			}
		}

		var privBuf;
		if (privateKey.isPrivateKey(key)) {
			privBuf = new sshBuffer({});
			var checkInt = crypto__default['default'].randomBytes(4).readUInt32BE(0);
			privBuf.writeInt(checkInt);
			privBuf.writeInt(checkInt);
			privBuf.write(key.toBuffer('rfc4253'));
			privBuf.writeString(key.comment || '');

			var n = 1;
			while (privBuf._offset % cinf.blockSize !== 0)
				privBuf.writeChar(n++);
			privBuf = privBuf.toBuffer();
		}

		switch (kdf) {
		case 'none':
			break;
		case 'bcrypt':
			var salt = crypto__default['default'].randomBytes(16);
			var rounds = 16;
			var kdfssh = new sshBuffer({});
			kdfssh.writeBuffer(salt);
			kdfssh.writeInt(rounds);
			kdfopts = kdfssh.toBuffer();

			if (bcrypt === undefined) {
				bcrypt = bcryptPbkdf;
			}
			var pass = new Uint8Array(passphrase);
			var salti = new Uint8Array(salt);
			/* Use the pbkdf to derive both the key and the IV. */
			var out = new Uint8Array(cinf.keySize + cinf.blockSize);
			var res = bcrypt.pbkdf(pass, pass.length, salti, salti.length,
			    out, out.length, rounds);
			if (res !== 0) {
				throw (new Error('bcrypt_pbkdf function returned ' +
				    'failure, parameters invalid'));
			}
			out = Buffer$p.from(out);
			var ckey = out.slice(0, cinf.keySize);
			var iv = out.slice(cinf.keySize, cinf.keySize + cinf.blockSize);

			var cipherStream = crypto__default['default'].createCipheriv(cinf.opensslName,
			    ckey, iv);
			cipherStream.setAutoPadding(false);
			var chunk, chunks = [];
			cipherStream.once('error', function (e) {
				throw (e);
			});
			cipherStream.write(privBuf);
			cipherStream.end();
			while ((chunk = cipherStream.read()) !== null)
				chunks.push(chunk);
			privBuf = Buffer$p.concat(chunks);
			break;
		default:
			throw (new Error('Unsupported kdf ' + kdf));
		}

		var buf = new sshBuffer({});

		buf.writeCString(MAGIC);
		buf.writeString(cipher);	/* cipher */
		buf.writeString(kdf);		/* kdf */
		buf.writeBuffer(kdfopts);	/* kdfoptions */

		buf.writeInt(1);		/* nkeys */
		buf.writeBuffer(pubKey.toBuffer('rfc4253'));

		if (privBuf)
			buf.writeBuffer(privBuf);

		buf = buf.toBuffer();

		var header;
		if (privateKey.isPrivateKey(key))
			header = 'OPENSSH PRIVATE KEY';
		else
			header = 'OPENSSH PUBLIC KEY';

		var tmp = buf.toString('base64');
		var len = tmp.length + (tmp.length / 70) +
		    18 + 16 + header.length*2 + 10;
		buf = Buffer$p.alloc(len);
		var o = 0;
		o += buf.write('-----BEGIN ' + header + '-----\n', o);
		for (var i = 0; i < tmp.length; ) {
			var limit = i + 70;
			if (limit > tmp.length)
				limit = tmp.length;
			o += buf.write(tmp.slice(i, limit), o);
			buf[o++] = 10;
			i = limit;
		}
		o += buf.write('-----END ' + header + '-----\n', o);

		return (buf.slice(0, o));
	}

	// Copyright 2018 Joyent, Inc.

	var pem = {
		read: read$a,
		write: write$b
	};




	var Buffer$o = safer_1.Buffer;












	var OID_PBES2 = '1.2.840.113549.1.5.13';
	var OID_PBKDF2 = '1.2.840.113549.1.5.12';

	var OID_TO_CIPHER = {
		'1.2.840.113549.3.7': '3des-cbc',
		'2.16.840.1.101.3.4.1.2': 'aes128-cbc',
		'2.16.840.1.101.3.4.1.42': 'aes256-cbc'
	};
	Object.keys(OID_TO_CIPHER).forEach(function (k) {
	});

	var OID_TO_HASH = {
		'1.2.840.113549.2.7': 'sha1',
		'1.2.840.113549.2.9': 'sha256',
		'1.2.840.113549.2.11': 'sha512'
	};
	Object.keys(OID_TO_HASH).forEach(function (k) {
	});

	/*
	 * For reading we support both PKCS#1 and PKCS#8. If we find a private key,
	 * we just take the public component of it and use that.
	 */
	function read$a(buf, options, forceType) {
		var input = buf;
		if (typeof (buf) !== 'string') {
			assert_1.buffer(buf, 'buf');
			buf = buf.toString('ascii');
		}

		var lines = buf.trim().split(/[\r\n]+/g);

		var m;
		var si = -1;
		while (!m && si < lines.length) {
			m = lines[++si].match(/*JSSTYLED*/
			    /[-]+[ ]*BEGIN ([A-Z0-9][A-Za-z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);
		}
		assert_1.ok(m, 'invalid PEM header');

		var m2;
		var ei = lines.length;
		while (!m2 && ei > 0) {
			m2 = lines[--ei].match(/*JSSTYLED*/
			    /[-]+[ ]*END ([A-Z0-9][A-Za-z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);
		}
		assert_1.ok(m2, 'invalid PEM footer');

		/* Begin and end banners must match key type */
		assert_1.equal(m[2], m2[2]);
		var type = m[2].toLowerCase();

		var alg;
		if (m[1]) {
			/* They also must match algorithms, if given */
			assert_1.equal(m[1], m2[1], 'PEM header and footer mismatch');
			alg = m[1].trim();
		}

		lines = lines.slice(si, ei + 1);

		var headers = {};
		while (true) {
			lines = lines.slice(1);
			m = lines[0].match(/*JSSTYLED*/
			    /^([A-Za-z0-9-]+): (.+)$/);
			if (!m)
				break;
			headers[m[1].toLowerCase()] = m[2];
		}

		/* Chop off the first and last lines */
		lines = lines.slice(0, -1).join('');
		buf = Buffer$o.from(lines, 'base64');

		var cipher, key, iv;
		if (headers['proc-type']) {
			var parts = headers['proc-type'].split(',');
			if (parts[0] === '4' && parts[1] === 'ENCRYPTED') {
				if (typeof (options.passphrase) === 'string') {
					options.passphrase = Buffer$o.from(
					    options.passphrase, 'utf-8');
				}
				if (!Buffer$o.isBuffer(options.passphrase)) {
					throw (new errors$1.KeyEncryptedError(
					    options.filename, 'PEM'));
				} else {
					parts = headers['dek-info'].split(',');
					assert_1.ok(parts.length === 2);
					cipher = parts[0].toLowerCase();
					iv = Buffer$o.from(parts[1], 'hex');
					key = utils$3.opensslKeyDeriv(cipher, iv,
					    options.passphrase, 1).key;
				}
			}
		}

		if (alg && alg.toLowerCase() === 'encrypted') {
			var eder = new lib$6.BerReader(buf);
			var pbesEnd;
			eder.readSequence();

			eder.readSequence();
			pbesEnd = eder.offset + eder.length;

			var method = eder.readOID();
			if (method !== OID_PBES2) {
				throw (new Error('Unsupported PEM/PKCS8 encryption ' +
				    'scheme: ' + method));
			}

			eder.readSequence();	/* PBES2-params */

			eder.readSequence();	/* keyDerivationFunc */
			var kdfEnd = eder.offset + eder.length;
			var kdfOid = eder.readOID();
			if (kdfOid !== OID_PBKDF2)
				throw (new Error('Unsupported PBES2 KDF: ' + kdfOid));
			eder.readSequence();
			var salt = eder.readString(lib$6.Ber.OctetString, true);
			var iterations = eder.readInt();
			var hashAlg = 'sha1';
			if (eder.offset < kdfEnd) {
				eder.readSequence();
				var hashAlgOid = eder.readOID();
				hashAlg = OID_TO_HASH[hashAlgOid];
				if (hashAlg === undefined) {
					throw (new Error('Unsupported PBKDF2 hash: ' +
					    hashAlgOid));
				}
			}
			eder._offset = kdfEnd;

			eder.readSequence();	/* encryptionScheme */
			var cipherOid = eder.readOID();
			cipher = OID_TO_CIPHER[cipherOid];
			if (cipher === undefined) {
				throw (new Error('Unsupported PBES2 cipher: ' +
				    cipherOid));
			}
			iv = eder.readString(lib$6.Ber.OctetString, true);

			eder._offset = pbesEnd;
			buf = eder.readString(lib$6.Ber.OctetString, true);

			if (typeof (options.passphrase) === 'string') {
				options.passphrase = Buffer$o.from(
				    options.passphrase, 'utf-8');
			}
			if (!Buffer$o.isBuffer(options.passphrase)) {
				throw (new errors$1.KeyEncryptedError(
				    options.filename, 'PEM'));
			}

			var cinfo = utils$3.opensshCipherInfo(cipher);

			cipher = cinfo.opensslName;
			key = utils$3.pbkdf2(hashAlg, salt, iterations, cinfo.keySize,
			    options.passphrase);
			alg = undefined;
		}

		if (cipher && key && iv) {
			var cipherStream = crypto__default['default'].createDecipheriv(cipher, key, iv);
			var chunk, chunks = [];
			cipherStream.once('error', function (e) {
				if (e.toString().indexOf('bad decrypt') !== -1) {
					throw (new Error('Incorrect passphrase ' +
					    'supplied, could not decrypt key'));
				}
				throw (e);
			});
			cipherStream.write(buf);
			cipherStream.end();
			while ((chunk = cipherStream.read()) !== null)
				chunks.push(chunk);
			buf = Buffer$o.concat(chunks);
		}

		/* The new OpenSSH internal format abuses PEM headers */
		if (alg && alg.toLowerCase() === 'openssh')
			return (sshPrivate.readSSHPrivate(type, buf, options));
		if (alg && alg.toLowerCase() === 'ssh2')
			return (rfc4253.readType(type, buf, options));

		var der = new lib$6.BerReader(buf);
		der.originalInput = input;

		/*
		 * All of the PEM file types start with a sequence tag, so chop it
		 * off here
		 */
		der.readSequence();

		/* PKCS#1 type keys name an algorithm in the banner explicitly */
		if (alg) {
			if (forceType)
				assert_1.strictEqual(forceType, 'pkcs1');
			return (pkcs1.readPkcs1(alg, type, der));
		} else {
			if (forceType)
				assert_1.strictEqual(forceType, 'pkcs8');
			return (pkcs8.readPkcs8(alg, type, der));
		}
	}

	function write$b(key$1, options, type) {
		assert_1.object(key$1);

		var alg = {
		    'ecdsa': 'EC',
		    'rsa': 'RSA',
		    'dsa': 'DSA',
		    'ed25519': 'EdDSA'
		}[key$1.type];
		var header;

		var der = new lib$6.BerWriter();

		if (privateKey.isPrivateKey(key$1)) {
			if (type && type === 'pkcs8') {
				header = 'PRIVATE KEY';
				pkcs8.writePkcs8(der, key$1);
			} else {
				if (type)
					assert_1.strictEqual(type, 'pkcs1');
				header = alg + ' PRIVATE KEY';
				pkcs1.writePkcs1(der, key$1);
			}

		} else if (key.isKey(key$1)) {
			if (type && type === 'pkcs1') {
				header = alg + ' PUBLIC KEY';
				pkcs1.writePkcs1(der, key$1);
			} else {
				if (type)
					assert_1.strictEqual(type, 'pkcs8');
				header = 'PUBLIC KEY';
				pkcs8.writePkcs8(der, key$1);
			}

		} else {
			throw (new Error('key is not a Key or PrivateKey'));
		}

		var tmp = der.buffer.toString('base64');
		var len = tmp.length + (tmp.length / 64) +
		    18 + 16 + header.length*2 + 10;
		var buf = Buffer$o.alloc(len);
		var o = 0;
		o += buf.write('-----BEGIN ' + header + '-----\n', o);
		for (var i = 0; i < tmp.length; ) {
			var limit = i + 64;
			if (limit > tmp.length)
				limit = tmp.length;
			o += buf.write(tmp.slice(i, limit), o);
			buf[o++] = 10;
			i = limit;
		}
		o += buf.write('-----END ' + header + '-----\n', o);

		return (buf.slice(0, o));
	}

	// Copyright 2015 Joyent, Inc.

	var ssh = {
		read: read$9,
		write: write$a
	};


	var Buffer$n = safer_1.Buffer;







	/*JSSTYLED*/
	var SSHKEY_RE = /^([a-z0-9-]+)[ \t]+([a-zA-Z0-9+\/]+[=]*)([ \t]+([^ \t][^\n]*[\n]*)?)?$/;
	/*JSSTYLED*/
	var SSHKEY_RE2 = /^([a-z0-9-]+)[ \t\n]+([a-zA-Z0-9+\/][a-zA-Z0-9+\/ \t\n=]*)([^a-zA-Z0-9+\/ \t\n=].*)?$/;

	function read$9(buf, options) {
		if (typeof (buf) !== 'string') {
			assert_1.buffer(buf, 'buf');
			buf = buf.toString('ascii');
		}

		var trimmed = buf.trim().replace(/[\\\r]/g, '');
		var m = trimmed.match(SSHKEY_RE);
		if (!m)
			m = trimmed.match(SSHKEY_RE2);
		assert_1.ok(m, 'key must match regex');

		var type = rfc4253.algToKeyType(m[1]);
		var kbuf = Buffer$n.from(m[2], 'base64');

		/*
		 * This is a bit tricky. If we managed to parse the key and locate the
		 * key comment with the regex, then do a non-partial read and assert
		 * that we have consumed all bytes. If we couldn't locate the key
		 * comment, though, there may be whitespace shenanigans going on that
		 * have conjoined the comment to the rest of the key. We do a partial
		 * read in this case to try to make the best out of a sorry situation.
		 */
		var key;
		var ret = {};
		if (m[4]) {
			try {
				key = rfc4253.read(kbuf);

			} catch (e) {
				m = trimmed.match(SSHKEY_RE2);
				assert_1.ok(m, 'key must match regex');
				kbuf = Buffer$n.from(m[2], 'base64');
				key = rfc4253.readInternal(ret, 'public', kbuf);
			}
		} else {
			key = rfc4253.readInternal(ret, 'public', kbuf);
		}

		assert_1.strictEqual(type, key.type);

		if (m[4] && m[4].length > 0) {
			key.comment = m[4];

		} else if (ret.consumed) {
			/*
			 * Now the magic: trying to recover the key comment when it's
			 * gotten conjoined to the key or otherwise shenanigan'd.
			 *
			 * Work out how much base64 we used, then drop all non-base64
			 * chars from the beginning up to this point in the the string.
			 * Then offset in this and try to make up for missing = chars.
			 */
			var data = m[2] + (m[3] ? m[3] : '');
			var realOffset = Math.ceil(ret.consumed / 3) * 4;
			data = data.slice(0, realOffset - 2). /*JSSTYLED*/
			    replace(/[^a-zA-Z0-9+\/=]/g, '') +
			    data.slice(realOffset - 2);

			var padding = ret.consumed % 3;
			if (padding > 0 &&
			    data.slice(realOffset - 1, realOffset) !== '=')
				realOffset--;
			while (data.slice(realOffset, realOffset + 1) === '=')
				realOffset++;

			/* Finally, grab what we think is the comment & clean it up. */
			var trailer = data.slice(realOffset);
			trailer = trailer.replace(/[\r\n]/g, ' ').
			    replace(/^\s+/, '');
			if (trailer.match(/^[a-zA-Z0-9]/))
				key.comment = trailer;
		}

		return (key);
	}

	function write$a(key$1, options) {
		assert_1.object(key$1);
		if (!key.isKey(key$1))
			throw (new Error('Must be a public key'));

		var parts = [];
		var alg = rfc4253.keyTypeToAlg(key$1);
		parts.push(alg);

		var buf = rfc4253.write(key$1);
		parts.push(buf.toString('base64'));

		if (key$1.comment)
			parts.push(key$1.comment);

		return (Buffer$n.from(parts.join(' ')));
	}

	// Copyright 2017 Joyent, Inc.

	var dnssec = {
		read: read$8,
		write: write$9
	};


	var Buffer$m = safer_1.Buffer;






	var supportedAlgos = {
		'rsa-sha1' : 5,
		'rsa-sha256' : 8,
		'rsa-sha512' : 10,
		'ecdsa-p256-sha256' : 13,
		'ecdsa-p384-sha384' : 14
		/*
		 * ed25519 is hypothetically supported with id 15
		 * but the common tools available don't appear to be
		 * capable of generating/using ed25519 keys
		 */
	};

	var supportedAlgosById = {};
	Object.keys(supportedAlgos).forEach(function (k) {
		supportedAlgosById[supportedAlgos[k]] = k.toUpperCase();
	});

	function read$8(buf, options) {
		if (typeof (buf) !== 'string') {
			assert_1.buffer(buf, 'buf');
			buf = buf.toString('ascii');
		}
		var lines = buf.split('\n');
		if (lines[0].match(/^Private-key-format\: v1/)) {
			var algElems = lines[1].split(' ');
			var algoNum = parseInt(algElems[1], 10);
			var algoName = algElems[2];
			if (!supportedAlgosById[algoNum])
				throw (new Error('Unsupported algorithm: ' + algoName));
			return (readDNSSECPrivateKey(algoNum, lines.slice(2)));
		}

		// skip any comment-lines
		var line = 0;
		/* JSSTYLED */
		while (lines[line].match(/^\;/))
			line++;
		// we should now have *one single* line left with our KEY on it.
		if ((lines[line].match(/\. IN KEY /) ||
		    lines[line].match(/\. IN DNSKEY /)) && lines[line+1].length === 0) {
			return (readRFC3110(lines[line]));
		}
		throw (new Error('Cannot parse dnssec key'));
	}

	function readRFC3110(keyString) {
		var elems = keyString.split(' ');
		//unused var flags = parseInt(elems[3], 10);
		//unused var protocol = parseInt(elems[4], 10);
		var algorithm = parseInt(elems[5], 10);
		if (!supportedAlgosById[algorithm])
			throw (new Error('Unsupported algorithm: ' + algorithm));
		var base64key = elems.slice(6, elems.length).join();
		var keyBuffer = Buffer$m.from(base64key, 'base64');
		if (supportedAlgosById[algorithm].match(/^RSA-/)) {
			// join the rest of the body into a single base64-blob
			var publicExponentLen = keyBuffer.readUInt8(0);
			if (publicExponentLen != 3 && publicExponentLen != 1)
				throw (new Error('Cannot parse dnssec key: ' +
				    'unsupported exponent length'));

			var publicExponent = keyBuffer.slice(1, publicExponentLen+1);
			publicExponent = utils$3.mpNormalize(publicExponent);
			var modulus = keyBuffer.slice(1+publicExponentLen);
			modulus = utils$3.mpNormalize(modulus);
			// now, make the key
			var rsaKey = {
				type: 'rsa',
				parts: []
			};
			rsaKey.parts.push({ name: 'e', data: publicExponent});
			rsaKey.parts.push({ name: 'n', data: modulus});
			return (new key(rsaKey));
		}
		if (supportedAlgosById[algorithm] === 'ECDSA-P384-SHA384' ||
		    supportedAlgosById[algorithm] === 'ECDSA-P256-SHA256') {
			var curve = 'nistp384';
			var size = 384;
			if (supportedAlgosById[algorithm].match(/^ECDSA-P256-SHA256/)) {
				curve = 'nistp256';
				size = 256;
			}

			var ecdsaKey = {
				type: 'ecdsa',
				curve: curve,
				size: size,
				parts: [
					{name: 'curve', data: Buffer$m.from(curve) },
					{name: 'Q', data: utils$3.ecNormalize(keyBuffer) }
				]
			};
			return (new key(ecdsaKey));
		}
		throw (new Error('Unsupported algorithm: ' +
		    supportedAlgosById[algorithm]));
	}

	function elementToBuf(e) {
		return (Buffer$m.from(e.split(' ')[1], 'base64'));
	}

	function readDNSSECRSAPrivateKey(elements) {
		var rsaParams = {};
		elements.forEach(function (element) {
			if (element.split(' ')[0] === 'Modulus:')
				rsaParams['n'] = elementToBuf(element);
			else if (element.split(' ')[0] === 'PublicExponent:')
				rsaParams['e'] = elementToBuf(element);
			else if (element.split(' ')[0] === 'PrivateExponent:')
				rsaParams['d'] = elementToBuf(element);
			else if (element.split(' ')[0] === 'Prime1:')
				rsaParams['p'] = elementToBuf(element);
			else if (element.split(' ')[0] === 'Prime2:')
				rsaParams['q'] = elementToBuf(element);
			else if (element.split(' ')[0] === 'Exponent1:')
				rsaParams['dmodp'] = elementToBuf(element);
			else if (element.split(' ')[0] === 'Exponent2:')
				rsaParams['dmodq'] = elementToBuf(element);
			else if (element.split(' ')[0] === 'Coefficient:')
				rsaParams['iqmp'] = elementToBuf(element);
		});
		// now, make the key
		var key = {
			type: 'rsa',
			parts: [
				{ name: 'e', data: utils$3.mpNormalize(rsaParams['e'])},
				{ name: 'n', data: utils$3.mpNormalize(rsaParams['n'])},
				{ name: 'd', data: utils$3.mpNormalize(rsaParams['d'])},
				{ name: 'p', data: utils$3.mpNormalize(rsaParams['p'])},
				{ name: 'q', data: utils$3.mpNormalize(rsaParams['q'])},
				{ name: 'dmodp',
				    data: utils$3.mpNormalize(rsaParams['dmodp'])},
				{ name: 'dmodq',
				    data: utils$3.mpNormalize(rsaParams['dmodq'])},
				{ name: 'iqmp',
				    data: utils$3.mpNormalize(rsaParams['iqmp'])}
			]
		};
		return (new privateKey(key));
	}

	function readDNSSECPrivateKey(alg, elements) {
		if (supportedAlgosById[alg].match(/^RSA-/)) {
			return (readDNSSECRSAPrivateKey(elements));
		}
		if (supportedAlgosById[alg] === 'ECDSA-P384-SHA384' ||
		    supportedAlgosById[alg] === 'ECDSA-P256-SHA256') {
			var d = Buffer$m.from(elements[0].split(' ')[1], 'base64');
			var curve = 'nistp384';
			var size = 384;
			if (supportedAlgosById[alg] === 'ECDSA-P256-SHA256') {
				curve = 'nistp256';
				size = 256;
			}
			// DNSSEC generates the public-key on the fly (go calculate it)
			var publicKey = utils$3.publicFromPrivateECDSA(curve, d);
			var Q = publicKey.part['Q'].data;
			var ecdsaKey = {
				type: 'ecdsa',
				curve: curve,
				size: size,
				parts: [
					{name: 'curve', data: Buffer$m.from(curve) },
					{name: 'd', data: d },
					{name: 'Q', data: Q }
				]
			};
			return (new privateKey(ecdsaKey));
		}
		throw (new Error('Unsupported algorithm: ' + supportedAlgosById[alg]));
	}

	function dnssecTimestamp(date) {
		var year = date.getFullYear() + ''; //stringify
		var month = (date.getMonth() + 1);
		var timestampStr = year + month + date.getUTCDate();
		timestampStr += '' + date.getUTCHours() + date.getUTCMinutes();
		timestampStr += date.getUTCSeconds();
		return (timestampStr);
	}

	function rsaAlgFromOptions(opts) {
		if (!opts || !opts.hashAlgo || opts.hashAlgo === 'sha1')
			return ('5 (RSASHA1)');
		else if (opts.hashAlgo === 'sha256')
			return ('8 (RSASHA256)');
		else if (opts.hashAlgo === 'sha512')
			return ('10 (RSASHA512)');
		else
			throw (new Error('Unknown or unsupported hash: ' +
			    opts.hashAlgo));
	}

	function writeRSA(key, options) {
		// if we're missing parts, add them.
		if (!key.part.dmodp || !key.part.dmodq) {
			utils$3.addRSAMissing(key);
		}

		var out = '';
		out += 'Private-key-format: v1.3\n';
		out += 'Algorithm: ' + rsaAlgFromOptions(options) + '\n';
		var n = utils$3.mpDenormalize(key.part['n'].data);
		out += 'Modulus: ' + n.toString('base64') + '\n';
		var e = utils$3.mpDenormalize(key.part['e'].data);
		out += 'PublicExponent: ' + e.toString('base64') + '\n';
		var d = utils$3.mpDenormalize(key.part['d'].data);
		out += 'PrivateExponent: ' + d.toString('base64') + '\n';
		var p = utils$3.mpDenormalize(key.part['p'].data);
		out += 'Prime1: ' + p.toString('base64') + '\n';
		var q = utils$3.mpDenormalize(key.part['q'].data);
		out += 'Prime2: ' + q.toString('base64') + '\n';
		var dmodp = utils$3.mpDenormalize(key.part['dmodp'].data);
		out += 'Exponent1: ' + dmodp.toString('base64') + '\n';
		var dmodq = utils$3.mpDenormalize(key.part['dmodq'].data);
		out += 'Exponent2: ' + dmodq.toString('base64') + '\n';
		var iqmp = utils$3.mpDenormalize(key.part['iqmp'].data);
		out += 'Coefficient: ' + iqmp.toString('base64') + '\n';
		// Assume that we're valid as-of now
		var timestamp = new Date();
		out += 'Created: ' + dnssecTimestamp(timestamp) + '\n';
		out += 'Publish: ' + dnssecTimestamp(timestamp) + '\n';
		out += 'Activate: ' + dnssecTimestamp(timestamp) + '\n';
		return (Buffer$m.from(out, 'ascii'));
	}

	function writeECDSA(key, options) {
		var out = '';
		out += 'Private-key-format: v1.3\n';

		if (key.curve === 'nistp256') {
			out += 'Algorithm: 13 (ECDSAP256SHA256)\n';
		} else if (key.curve === 'nistp384') {
			out += 'Algorithm: 14 (ECDSAP384SHA384)\n';
		} else {
			throw (new Error('Unsupported curve'));
		}
		var base64Key = key.part['d'].data.toString('base64');
		out += 'PrivateKey: ' + base64Key + '\n';

		// Assume that we're valid as-of now
		var timestamp = new Date();
		out += 'Created: ' + dnssecTimestamp(timestamp) + '\n';
		out += 'Publish: ' + dnssecTimestamp(timestamp) + '\n';
		out += 'Activate: ' + dnssecTimestamp(timestamp) + '\n';

		return (Buffer$m.from(out, 'ascii'));
	}

	function write$9(key$1, options) {
		if (privateKey.isPrivateKey(key$1)) {
			if (key$1.type === 'rsa') {
				return (writeRSA(key$1, options));
			} else if (key$1.type === 'ecdsa') {
				return (writeECDSA(key$1));
			} else {
				throw (new Error('Unsupported algorithm: ' + key$1.type));
			}
		} else if (key.isKey(key$1)) {
			/*
			 * RFC3110 requires a keyname, and a keytype, which we
			 * don't really have a mechanism for specifying such
			 * additional metadata.
			 */
			throw (new Error('Format "dnssec" only supports ' +
			    'writing private keys'));
		} else {
			throw (new Error('key is not a Key or PrivateKey'));
		}
	}

	// Copyright 2018 Joyent, Inc.

	var putty = {
		read: read$7,
		write: write$8
	};


	var Buffer$l = safer_1.Buffer;





	function read$7(buf, options) {
		var lines = buf.toString('ascii').split(/[\r\n]+/);
		var found = false;
		var parts;
		var si = 0;
		while (si < lines.length) {
			parts = splitHeader(lines[si++]);
			if (parts &&
			    parts[0].toLowerCase() === 'putty-user-key-file-2') {
				found = true;
				break;
			}
		}
		if (!found) {
			throw (new Error('No PuTTY format first line found'));
		}
		var alg = parts[1];

		parts = splitHeader(lines[si++]);
		assert_1.equal(parts[0].toLowerCase(), 'encryption');

		parts = splitHeader(lines[si++]);
		assert_1.equal(parts[0].toLowerCase(), 'comment');
		var comment = parts[1];

		parts = splitHeader(lines[si++]);
		assert_1.equal(parts[0].toLowerCase(), 'public-lines');
		var publicLines = parseInt(parts[1], 10);
		if (!isFinite(publicLines) || publicLines < 0 ||
		    publicLines > lines.length) {
			throw (new Error('Invalid public-lines count'));
		}

		var publicBuf = Buffer$l.from(
		    lines.slice(si, si + publicLines).join(''), 'base64');
		var keyType = rfc4253.algToKeyType(alg);
		var key = rfc4253.read(publicBuf);
		if (key.type !== keyType) {
			throw (new Error('Outer key algorithm mismatch'));
		}
		key.comment = comment;
		return (key);
	}

	function splitHeader(line) {
		var idx = line.indexOf(':');
		if (idx === -1)
			return (null);
		var header = line.slice(0, idx);
		++idx;
		while (line[idx] === ' ')
			++idx;
		var rest = line.slice(idx);
		return ([header, rest]);
	}

	function write$8(key$1, options) {
		assert_1.object(key$1);
		if (!key.isKey(key$1))
			throw (new Error('Must be a public key'));

		var alg = rfc4253.keyTypeToAlg(key$1);
		var buf = rfc4253.write(key$1);
		var comment = key$1.comment || '';

		var b64 = buf.toString('base64');
		var lines = wrap$1(b64);

		lines.unshift('Public-Lines: ' + lines.length);
		lines.unshift('Comment: ' + comment);
		lines.unshift('Encryption: none');
		lines.unshift('PuTTY-User-Key-File-2: ' + alg);

		return (Buffer$l.from(lines.join('\n') + '\n'));
	}

	function wrap$1(txt, len) {
		var lines = [];
		var pos = 0;
		while (pos < txt.length) {
			lines.push(txt.slice(pos, pos + 64));
			pos += 64;
		}
		return (lines);
	}

	// Copyright 2018 Joyent, Inc.

	var auto = {
		read: read$6,
		write: write$7
	};


	var Buffer$k = safer_1.Buffer;










	var DNSSEC_PRIVKEY_HEADER_PREFIX = 'Private-key-format: v1';

	function read$6(buf, options) {
		if (typeof (buf) === 'string') {
			if (buf.trim().match(/^[-]+[ ]*BEGIN/))
				return (pem.read(buf, options));
			if (buf.match(/^\s*ssh-[a-z]/))
				return (ssh.read(buf, options));
			if (buf.match(/^\s*ecdsa-/))
				return (ssh.read(buf, options));
			if (buf.match(/^putty-user-key-file-2:/i))
				return (putty.read(buf, options));
			if (findDNSSECHeader(buf))
				return (dnssec.read(buf, options));
			buf = Buffer$k.from(buf, 'binary');
		} else {
			assert_1.buffer(buf);
			if (findPEMHeader(buf))
				return (pem.read(buf, options));
			if (findSSHHeader(buf))
				return (ssh.read(buf, options));
			if (findPuTTYHeader(buf))
				return (putty.read(buf, options));
			if (findDNSSECHeader(buf))
				return (dnssec.read(buf, options));
		}
		if (buf.readUInt32BE(0) < buf.length)
			return (rfc4253.read(buf, options));
		throw (new Error('Failed to auto-detect format of key'));
	}

	function findPuTTYHeader(buf) {
		var offset = 0;
		while (offset < buf.length &&
		    (buf[offset] === 32 || buf[offset] === 10 || buf[offset] === 9))
			++offset;
		if (offset + 22 <= buf.length &&
		    buf.slice(offset, offset + 22).toString('ascii').toLowerCase() ===
		    'putty-user-key-file-2:')
			return (true);
		return (false);
	}

	function findSSHHeader(buf) {
		var offset = 0;
		while (offset < buf.length &&
		    (buf[offset] === 32 || buf[offset] === 10 || buf[offset] === 9))
			++offset;
		if (offset + 4 <= buf.length &&
		    buf.slice(offset, offset + 4).toString('ascii') === 'ssh-')
			return (true);
		if (offset + 6 <= buf.length &&
		    buf.slice(offset, offset + 6).toString('ascii') === 'ecdsa-')
			return (true);
		return (false);
	}

	function findPEMHeader(buf) {
		var offset = 0;
		while (offset < buf.length &&
		    (buf[offset] === 32 || buf[offset] === 10))
			++offset;
		if (buf[offset] !== 45)
			return (false);
		while (offset < buf.length &&
		    (buf[offset] === 45))
			++offset;
		while (offset < buf.length &&
		    (buf[offset] === 32))
			++offset;
		if (offset + 5 > buf.length ||
		    buf.slice(offset, offset + 5).toString('ascii') !== 'BEGIN')
			return (false);
		return (true);
	}

	function findDNSSECHeader(buf) {
		// private case first
		if (buf.length <= DNSSEC_PRIVKEY_HEADER_PREFIX.length)
			return (false);
		var headerCheck = buf.slice(0, DNSSEC_PRIVKEY_HEADER_PREFIX.length);
		if (headerCheck.toString('ascii') === DNSSEC_PRIVKEY_HEADER_PREFIX)
			return (true);

		// public-key RFC3110 ?
		// 'domain.com. IN KEY ...' or 'domain.com. IN DNSKEY ...'
		// skip any comment-lines
		if (typeof (buf) !== 'string') {
			buf = buf.toString('ascii');
		}
		var lines = buf.split('\n');
		var line = 0;
		/* JSSTYLED */
		while (lines[line].match(/^\;/))
			line++;
		if (lines[line].toString('ascii').match(/\. IN KEY /))
			return (true);
		if (lines[line].toString('ascii').match(/\. IN DNSKEY /))
			return (true);
		return (false);
	}

	function write$7(key, options) {
		throw (new Error('"auto" format cannot be used for writing'));
	}

	// Copyright 2017 Joyent, Inc.

	var privateKey = PrivateKey;


	var Buffer$j = safer_1.Buffer;








	var generateECDSA = dhe.generateECDSA;
	var generateED25519 = dhe.generateED25519;
	var KeyParseError$1 = errors$1.KeyParseError;

	var formats$5 = {};
	formats$5['auto'] = auto;
	formats$5['pem'] = pem;
	formats$5['pkcs1'] = pkcs1;
	formats$5['pkcs8'] = pkcs8;
	formats$5['rfc4253'] = rfc4253;
	formats$5['ssh-private'] = sshPrivate;
	formats$5['openssh'] = formats$5['ssh-private'];
	formats$5['ssh'] = formats$5['ssh-private'];
	formats$5['dnssec'] = dnssec;

	function PrivateKey(opts) {
		assert_1.object(opts, 'options');
		key.call(this, opts);

		this._pubCache = undefined;
	}
	util__default['default'].inherits(PrivateKey, key);

	PrivateKey.formats = formats$5;

	PrivateKey.prototype.toBuffer = function (format, options) {
		if (format === undefined)
			format = 'pkcs1';
		assert_1.string(format, 'format');
		assert_1.object(formats$5[format], 'formats[format]');
		assert_1.optionalObject(options, 'options');

		return (formats$5[format].write(this, options));
	};

	PrivateKey.prototype.hash = function (algo, type) {
		return (this.toPublic().hash(algo, type));
	};

	PrivateKey.prototype.fingerprint = function (algo, type) {
		return (this.toPublic().fingerprint(algo, type));
	};

	PrivateKey.prototype.toPublic = function () {
		if (this._pubCache)
			return (this._pubCache);

		var algInfo = algs.info[this.type];
		var pubParts = [];
		for (var i = 0; i < algInfo.parts.length; ++i) {
			var p = algInfo.parts[i];
			pubParts.push(this.part[p]);
		}

		this._pubCache = new key({
			type: this.type,
			source: this,
			parts: pubParts
		});
		if (this.comment)
			this._pubCache.comment = this.comment;
		return (this._pubCache);
	};

	PrivateKey.prototype.derive = function (newType) {
		assert_1.string(newType, 'type');
		var priv, pub, pair;

		if (this.type === 'ed25519' && newType === 'curve25519') {
			priv = this.part.k.data;
			if (priv[0] === 0x00)
				priv = priv.slice(1);

			pair = naclFast.box.keyPair.fromSecretKey(new Uint8Array(priv));
			pub = Buffer$j.from(pair.publicKey);

			return (new PrivateKey({
				type: 'curve25519',
				parts: [
					{ name: 'A', data: utils$3.mpNormalize(pub) },
					{ name: 'k', data: utils$3.mpNormalize(priv) }
				]
			}));
		} else if (this.type === 'curve25519' && newType === 'ed25519') {
			priv = this.part.k.data;
			if (priv[0] === 0x00)
				priv = priv.slice(1);

			pair = naclFast.sign.keyPair.fromSeed(new Uint8Array(priv));
			pub = Buffer$j.from(pair.publicKey);

			return (new PrivateKey({
				type: 'ed25519',
				parts: [
					{ name: 'A', data: utils$3.mpNormalize(pub) },
					{ name: 'k', data: utils$3.mpNormalize(priv) }
				]
			}));
		}
		throw (new Error('Key derivation not supported from ' + this.type +
		    ' to ' + newType));
	};

	PrivateKey.prototype.createVerify = function (hashAlgo) {
		return (this.toPublic().createVerify(hashAlgo));
	};

	PrivateKey.prototype.createSign = function (hashAlgo) {
		if (hashAlgo === undefined)
			hashAlgo = this.defaultHashAlgorithm();
		assert_1.string(hashAlgo, 'hash algorithm');

		/* ED25519 is not supported by OpenSSL, use a javascript impl. */
		if (this.type === 'ed25519' && edCompat$1 !== undefined)
			return (new edCompat$1.Signer(this, hashAlgo));
		if (this.type === 'curve25519')
			throw (new Error('Curve25519 keys are not suitable for ' +
			    'signing or verification'));

		var v, nm, err;
		try {
			nm = hashAlgo.toUpperCase();
			v = crypto__default['default'].createSign(nm);
		} catch (e) {
			err = e;
		}
		if (v === undefined || (err instanceof Error &&
		    err.message.match(/Unknown message digest/))) {
			nm = 'RSA-';
			nm += hashAlgo.toUpperCase();
			v = crypto__default['default'].createSign(nm);
		}
		assert_1.ok(v, 'failed to create verifier');
		var oldSign = v.sign.bind(v);
		var key = this.toBuffer('pkcs1');
		var type = this.type;
		var curve = this.curve;
		v.sign = function () {
			var sig = oldSign(key);
			if (typeof (sig) === 'string')
				sig = Buffer$j.from(sig, 'binary');
			sig = signature$1.parse(sig, type, 'asn1');
			sig.hashAlgorithm = hashAlgo;
			sig.curve = curve;
			return (sig);
		};
		return (v);
	};

	PrivateKey.parse = function (data, format, options) {
		if (typeof (data) !== 'string')
			assert_1.buffer(data, 'data');
		if (format === undefined)
			format = 'auto';
		assert_1.string(format, 'format');
		if (typeof (options) === 'string')
			options = { filename: options };
		assert_1.optionalObject(options, 'options');
		if (options === undefined)
			options = {};
		assert_1.optionalString(options.filename, 'options.filename');
		if (options.filename === undefined)
			options.filename = '(unnamed)';

		assert_1.object(formats$5[format], 'formats[format]');

		try {
			var k = formats$5[format].read(data, options);
			assert_1.ok(k instanceof PrivateKey, 'key is not a private key');
			if (!k.comment)
				k.comment = options.filename;
			return (k);
		} catch (e) {
			if (e.name === 'KeyEncryptedError')
				throw (e);
			throw (new KeyParseError$1(options.filename, format, e));
		}
	};

	PrivateKey.isPrivateKey = function (obj, ver) {
		return (utils$3.isCompatible(obj, PrivateKey, ver));
	};

	PrivateKey.generate = function (type, options) {
		if (options === undefined)
			options = {};
		assert_1.object(options, 'options');

		switch (type) {
		case 'ecdsa':
			if (options.curve === undefined)
				options.curve = 'nistp256';
			assert_1.string(options.curve, 'options.curve');
			return (generateECDSA(options.curve));
		case 'ed25519':
			return (generateED25519());
		default:
			throw (new Error('Key generation not supported with key ' +
			    'type "' + type + '"'));
		}
	};

	/*
	 * API versions for PrivateKey:
	 * [1,0] -- initial ver
	 * [1,1] -- added auto, pkcs[18], openssh/ssh-private formats
	 * [1,2] -- added defaultHashAlgorithm
	 * [1,3] -- added derive, ed, createDH
	 * [1,4] -- first tagged version
	 * [1,5] -- changed ed25519 part names and format
	 * [1,6] -- type arguments for hash() and fingerprint()
	 */
	PrivateKey.prototype._sshpkApiVersion = [1, 6];

	PrivateKey._oldVersionDetect = function (obj) {
		assert_1.func(obj.toPublic);
		assert_1.func(obj.createSign);
		if (obj.derive)
			return ([1, 3]);
		if (obj.defaultHashAlgorithm)
			return ([1, 2]);
		if (obj.formats['auto'])
			return ([1, 1]);
		return ([1, 0]);
	};

	// Copyright 2017 Joyent, Inc.

	var identity = Identity;










	var Buffer$i = safer_1.Buffer;

	/*JSSTYLED*/
	var DNS_NAME_RE = /^([*]|[a-z0-9][a-z0-9\-]{0,62})(?:\.([*]|[a-z0-9][a-z0-9\-]{0,62}))*$/i;

	var oids = {};
	oids.cn = '2.5.4.3';
	oids.o = '2.5.4.10';
	oids.ou = '2.5.4.11';
	oids.l = '2.5.4.7';
	oids.s = '2.5.4.8';
	oids.c = '2.5.4.6';
	oids.sn = '2.5.4.4';
	oids.postalCode = '2.5.4.17';
	oids.serialNumber = '2.5.4.5';
	oids.street = '2.5.4.9';
	oids.x500UniqueIdentifier = '2.5.4.45';
	oids.role = '2.5.4.72';
	oids.telephoneNumber = '2.5.4.20';
	oids.description = '2.5.4.13';
	oids.dc = '0.9.2342.19200300.100.1.25';
	oids.uid = '0.9.2342.19200300.100.1.1';
	oids.mail = '0.9.2342.19200300.100.1.3';
	oids.title = '2.5.4.12';
	oids.gn = '2.5.4.42';
	oids.initials = '2.5.4.43';
	oids.pseudonym = '2.5.4.65';
	oids.emailAddress = '1.2.840.113549.1.9.1';

	var unoids = {};
	Object.keys(oids).forEach(function (k) {
		unoids[oids[k]] = k;
	});

	function Identity(opts) {
		var self = this;
		assert_1.object(opts, 'options');
		assert_1.arrayOfObject(opts.components, 'options.components');
		this.components = opts.components;
		this.componentLookup = {};
		this.components.forEach(function (c) {
			if (c.name && !c.oid)
				c.oid = oids[c.name];
			if (c.oid && !c.name)
				c.name = unoids[c.oid];
			if (self.componentLookup[c.name] === undefined)
				self.componentLookup[c.name] = [];
			self.componentLookup[c.name].push(c);
		});
		if (this.componentLookup.cn && this.componentLookup.cn.length > 0) {
			this.cn = this.componentLookup.cn[0].value;
		}
		assert_1.optionalString(opts.type, 'options.type');
		if (opts.type === undefined) {
			if (this.components.length === 1 &&
			    this.componentLookup.cn &&
			    this.componentLookup.cn.length === 1 &&
			    this.componentLookup.cn[0].value.match(DNS_NAME_RE)) {
				this.type = 'host';
				this.hostname = this.componentLookup.cn[0].value;

			} else if (this.componentLookup.dc &&
			    this.components.length === this.componentLookup.dc.length) {
				this.type = 'host';
				this.hostname = this.componentLookup.dc.map(
				    function (c) {
					return (c.value);
				}).join('.');

			} else if (this.componentLookup.uid &&
			    this.components.length ===
			    this.componentLookup.uid.length) {
				this.type = 'user';
				this.uid = this.componentLookup.uid[0].value;

			} else if (this.componentLookup.cn &&
			    this.componentLookup.cn.length === 1 &&
			    this.componentLookup.cn[0].value.match(DNS_NAME_RE)) {
				this.type = 'host';
				this.hostname = this.componentLookup.cn[0].value;

			} else if (this.componentLookup.uid &&
			    this.componentLookup.uid.length === 1) {
				this.type = 'user';
				this.uid = this.componentLookup.uid[0].value;

			} else if (this.componentLookup.mail &&
			    this.componentLookup.mail.length === 1) {
				this.type = 'email';
				this.email = this.componentLookup.mail[0].value;

			} else if (this.componentLookup.cn &&
			    this.componentLookup.cn.length === 1) {
				this.type = 'user';
				this.uid = this.componentLookup.cn[0].value;

			} else {
				this.type = 'unknown';
			}
		} else {
			this.type = opts.type;
			if (this.type === 'host')
				this.hostname = opts.hostname;
			else if (this.type === 'user')
				this.uid = opts.uid;
			else if (this.type === 'email')
				this.email = opts.email;
			else
				throw (new Error('Unknown type ' + this.type));
		}
	}

	Identity.prototype.toString = function () {
		return (this.components.map(function (c) {
			var n = c.name.toUpperCase();
			/*JSSTYLED*/
			n = n.replace(/=/g, '\\=');
			var v = c.value;
			/*JSSTYLED*/
			v = v.replace(/,/g, '\\,');
			return (n + '=' + v);
		}).join(', '));
	};

	Identity.prototype.get = function (name, asArray) {
		assert_1.string(name, 'name');
		var arr = this.componentLookup[name];
		if (arr === undefined || arr.length === 0)
			return (undefined);
		if (!asArray && arr.length > 1)
			throw (new Error('Multiple values for attribute ' + name));
		if (!asArray)
			return (arr[0].value);
		return (arr.map(function (c) {
			return (c.value);
		}));
	};

	Identity.prototype.toArray = function (idx) {
		return (this.components.map(function (c) {
			return ({
				name: c.name,
				value: c.value
			});
		}));
	};

	/*
	 * These are from X.680 -- PrintableString allowed chars are in section 37.4
	 * table 8. Spec for IA5Strings is "1,6 + SPACE + DEL" where 1 refers to
	 * ISO IR #001 (standard ASCII control characters) and 6 refers to ISO IR #006
	 * (the basic ASCII character set).
	 */
	/* JSSTYLED */
	var NOT_PRINTABLE = /[^a-zA-Z0-9 '(),+.\/:=?-]/;
	/* JSSTYLED */
	var NOT_IA5 = /[^\x00-\x7f]/;

	Identity.prototype.toAsn1 = function (der, tag) {
		der.startSequence(tag);
		this.components.forEach(function (c) {
			der.startSequence(lib$6.Ber.Constructor | lib$6.Ber.Set);
			der.startSequence();
			der.writeOID(c.oid);
			/*
			 * If we fit in a PrintableString, use that. Otherwise use an
			 * IA5String or UTF8String.
			 *
			 * If this identity was parsed from a DN, use the ASN.1 types
			 * from the original representation (otherwise this might not
			 * be a full match for the original in some validators).
			 */
			if (c.asn1type === lib$6.Ber.Utf8String ||
			    c.value.match(NOT_IA5)) {
				var v = Buffer$i.from(c.value, 'utf8');
				der.writeBuffer(v, lib$6.Ber.Utf8String);

			} else if (c.asn1type === lib$6.Ber.IA5String ||
			    c.value.match(NOT_PRINTABLE)) {
				der.writeString(c.value, lib$6.Ber.IA5String);

			} else {
				var type = lib$6.Ber.PrintableString;
				if (c.asn1type !== undefined)
					type = c.asn1type;
				der.writeString(c.value, type);
			}
			der.endSequence();
			der.endSequence();
		});
		der.endSequence();
	};

	function globMatch(a, b) {
		if (a === '**' || b === '**')
			return (true);
		var aParts = a.split('.');
		var bParts = b.split('.');
		if (aParts.length !== bParts.length)
			return (false);
		for (var i = 0; i < aParts.length; ++i) {
			if (aParts[i] === '*' || bParts[i] === '*')
				continue;
			if (aParts[i] !== bParts[i])
				return (false);
		}
		return (true);
	}

	Identity.prototype.equals = function (other) {
		if (!Identity.isIdentity(other, [1, 0]))
			return (false);
		if (other.components.length !== this.components.length)
			return (false);
		for (var i = 0; i < this.components.length; ++i) {
			if (this.components[i].oid !== other.components[i].oid)
				return (false);
			if (!globMatch(this.components[i].value,
			    other.components[i].value)) {
				return (false);
			}
		}
		return (true);
	};

	Identity.forHost = function (hostname) {
		assert_1.string(hostname, 'hostname');
		return (new Identity({
			type: 'host',
			hostname: hostname,
			components: [ { name: 'cn', value: hostname } ]
		}));
	};

	Identity.forUser = function (uid) {
		assert_1.string(uid, 'uid');
		return (new Identity({
			type: 'user',
			uid: uid,
			components: [ { name: 'uid', value: uid } ]
		}));
	};

	Identity.forEmail = function (email) {
		assert_1.string(email, 'email');
		return (new Identity({
			type: 'email',
			email: email,
			components: [ { name: 'mail', value: email } ]
		}));
	};

	Identity.parseDN = function (dn) {
		assert_1.string(dn, 'dn');
		var parts = [''];
		var idx = 0;
		var rem = dn;
		while (rem.length > 0) {
			var m;
			/*JSSTYLED*/
			if ((m = /^,/.exec(rem)) !== null) {
				parts[++idx] = '';
				rem = rem.slice(m[0].length);
			/*JSSTYLED*/
			} else if ((m = /^\\,/.exec(rem)) !== null) {
				parts[idx] += ',';
				rem = rem.slice(m[0].length);
			/*JSSTYLED*/
			} else if ((m = /^\\./.exec(rem)) !== null) {
				parts[idx] += m[0];
				rem = rem.slice(m[0].length);
			/*JSSTYLED*/
			} else if ((m = /^[^\\,]+/.exec(rem)) !== null) {
				parts[idx] += m[0];
				rem = rem.slice(m[0].length);
			} else {
				throw (new Error('Failed to parse DN'));
			}
		}
		var cmps = parts.map(function (c) {
			c = c.trim();
			var eqPos = c.indexOf('=');
			while (eqPos > 0 && c.charAt(eqPos - 1) === '\\')
				eqPos = c.indexOf('=', eqPos + 1);
			if (eqPos === -1) {
				throw (new Error('Failed to parse DN'));
			}
			/*JSSTYLED*/
			var name = c.slice(0, eqPos).toLowerCase().replace(/\\=/g, '=');
			var value = c.slice(eqPos + 1);
			return ({ name: name, value: value });
		});
		return (new Identity({ components: cmps }));
	};

	Identity.fromArray = function (components) {
		assert_1.arrayOfObject(components, 'components');
		components.forEach(function (cmp) {
			assert_1.object(cmp, 'component');
			assert_1.string(cmp.name, 'component.name');
			if (!Buffer$i.isBuffer(cmp.value) &&
			    !(typeof (cmp.value) === 'string')) {
				throw (new Error('Invalid component value'));
			}
		});
		return (new Identity({ components: components }));
	};

	Identity.parseAsn1 = function (der, top) {
		var components = [];
		der.readSequence(top);
		var end = der.offset + der.length;
		while (der.offset < end) {
			der.readSequence(lib$6.Ber.Constructor | lib$6.Ber.Set);
			var after = der.offset + der.length;
			der.readSequence();
			var oid = der.readOID();
			var type = der.peek();
			var value;
			switch (type) {
			case lib$6.Ber.PrintableString:
			case lib$6.Ber.IA5String:
			case lib$6.Ber.OctetString:
			case lib$6.Ber.T61String:
				value = der.readString(type);
				break;
			case lib$6.Ber.Utf8String:
				value = der.readString(type, true);
				value = value.toString('utf8');
				break;
			case lib$6.Ber.CharacterString:
			case lib$6.Ber.BMPString:
				value = der.readString(type, true);
				value = value.toString('utf16le');
				break;
			default:
				throw (new Error('Unknown asn1 type ' + type));
			}
			components.push({ oid: oid, asn1type: type, value: value });
			der._offset = after;
		}
		der._offset = end;
		return (new Identity({
			components: components
		}));
	};

	Identity.isIdentity = function (obj, ver) {
		return (utils$3.isCompatible(obj, Identity, ver));
	};

	/*
	 * API versions for Identity:
	 * [1,0] -- initial ver
	 */
	Identity.prototype._sshpkApiVersion = [1, 0];

	Identity._oldVersionDetect = function (obj) {
		return ([1, 0]);
	};

	// Copyright 2017 Joyent, Inc.

	var opensshCert = {
		read: read$5,
		verify: verify$2,
		sign: sign$2,
		signAsync: signAsync$1,
		write: write$6,

		/* Internal private API */
		fromBuffer: fromBuffer,
		toBuffer: toBuffer$2
	};




	var Buffer$h = safer_1.Buffer;









	function verify$2(cert, key) {
		/*
		 * We always give an issuerKey, so if our verify() is being called then
		 * there was no signature. Return false.
		 */
		return (false);
	}

	var TYPES = {
		'user': 1,
		'host': 2
	};
	Object.keys(TYPES).forEach(function (k) { TYPES[TYPES[k]] = k; });

	var ECDSA_ALGO = /^ecdsa-sha2-([^@-]+)-cert-v01@openssh.com$/;

	function read$5(buf, options) {
		if (Buffer$h.isBuffer(buf))
			buf = buf.toString('ascii');
		var parts = buf.trim().split(/[ \t\n]+/g);
		if (parts.length < 2 || parts.length > 3)
			throw (new Error('Not a valid SSH certificate line'));

		var algo = parts[0];
		var data = parts[1];

		data = Buffer$h.from(data, 'base64');
		return (fromBuffer(data, algo));
	}

	function fromBuffer(data, algo, partial) {
		var sshbuf = new sshBuffer({ buffer: data });
		var innerAlgo = sshbuf.readString();
		if (algo !== undefined && innerAlgo !== algo)
			throw (new Error('SSH certificate algorithm mismatch'));
		if (algo === undefined)
			algo = innerAlgo;

		var cert = {};
		cert.signatures = {};
		cert.signatures.openssh = {};

		cert.signatures.openssh.nonce = sshbuf.readBuffer();

		var key$1 = {};
		var parts = (key$1.parts = []);
		key$1.type = getAlg(algo);

		var partCount = algs.info[key$1.type].parts.length;
		while (parts.length < partCount)
			parts.push(sshbuf.readPart());
		assert_1.ok(parts.length >= 1, 'key must have at least one part');

		var algInfo = algs.info[key$1.type];
		if (key$1.type === 'ecdsa') {
			var res = ECDSA_ALGO.exec(algo);
			assert_1.ok(res !== null);
			assert_1.strictEqual(res[1], parts[0].data.toString());
		}

		for (var i = 0; i < algInfo.parts.length; ++i) {
			parts[i].name = algInfo.parts[i];
			if (parts[i].name !== 'curve' &&
			    algInfo.normalize !== false) {
				var p = parts[i];
				p.data = utils$3.mpNormalize(p.data);
			}
		}

		cert.subjectKey = new key(key$1);

		cert.serial = sshbuf.readInt64();

		var type = TYPES[sshbuf.readInt()];
		assert_1.string(type, 'valid cert type');

		cert.signatures.openssh.keyId = sshbuf.readString();

		var principals = [];
		var pbuf = sshbuf.readBuffer();
		var psshbuf = new sshBuffer({ buffer: pbuf });
		while (!psshbuf.atEnd())
			principals.push(psshbuf.readString());
		if (principals.length === 0)
			principals = ['*'];

		cert.subjects = principals.map(function (pr) {
			if (type === 'user')
				return (identity.forUser(pr));
			else if (type === 'host')
				return (identity.forHost(pr));
			throw (new Error('Unknown identity type ' + type));
		});

		cert.validFrom = int64ToDate(sshbuf.readInt64());
		cert.validUntil = int64ToDate(sshbuf.readInt64());

		var exts = [];
		var extbuf = new sshBuffer({ buffer: sshbuf.readBuffer() });
		var ext;
		while (!extbuf.atEnd()) {
			ext = { critical: true };
			ext.name = extbuf.readString();
			ext.data = extbuf.readBuffer();
			exts.push(ext);
		}
		extbuf = new sshBuffer({ buffer: sshbuf.readBuffer() });
		while (!extbuf.atEnd()) {
			ext = { critical: false };
			ext.name = extbuf.readString();
			ext.data = extbuf.readBuffer();
			exts.push(ext);
		}
		cert.signatures.openssh.exts = exts;

		/* reserved */
		sshbuf.readBuffer();

		var signingKeyBuf = sshbuf.readBuffer();
		cert.issuerKey = rfc4253.read(signingKeyBuf);

		/*
		 * OpenSSH certs don't give the identity of the issuer, just their
		 * public key. So, we use an Identity that matches anything. The
		 * isSignedBy() function will later tell you if the key matches.
		 */
		cert.issuer = identity.forHost('**');

		var sigBuf = sshbuf.readBuffer();
		cert.signatures.openssh.signature =
		    signature$1.parse(sigBuf, cert.issuerKey.type, 'ssh');

		if (partial !== undefined) {
			partial.remainder = sshbuf.remainder();
			partial.consumed = sshbuf._offset;
		}

		return (new certificate(cert));
	}

	function int64ToDate(buf) {
		var i = buf.readUInt32BE(0) * 4294967296;
		i += buf.readUInt32BE(4);
		var d = new Date();
		d.setTime(i * 1000);
		d.sourceInt64 = buf;
		return (d);
	}

	function dateToInt64(date) {
		if (date.sourceInt64 !== undefined)
			return (date.sourceInt64);
		var i = Math.round(date.getTime() / 1000);
		var upper = Math.floor(i / 4294967296);
		var lower = Math.floor(i % 4294967296);
		var buf = Buffer$h.alloc(8);
		buf.writeUInt32BE(upper, 0);
		buf.writeUInt32BE(lower, 4);
		return (buf);
	}

	function sign$2(cert, key) {
		if (cert.signatures.openssh === undefined)
			cert.signatures.openssh = {};
		try {
			var blob = toBuffer$2(cert, true);
		} catch (e) {
			delete (cert.signatures.openssh);
			return (false);
		}
		var sig = cert.signatures.openssh;
		var hashAlgo = undefined;
		if (key.type === 'rsa' || key.type === 'dsa')
			hashAlgo = 'sha1';
		var signer = key.createSign(hashAlgo);
		signer.write(blob);
		sig.signature = signer.sign();
		return (true);
	}

	function signAsync$1(cert, signer, done) {
		if (cert.signatures.openssh === undefined)
			cert.signatures.openssh = {};
		try {
			var blob = toBuffer$2(cert, true);
		} catch (e) {
			delete (cert.signatures.openssh);
			done(e);
			return;
		}
		var sig = cert.signatures.openssh;

		signer(blob, function (err, signature) {
			if (err) {
				done(err);
				return;
			}
			try {
				/*
				 * This will throw if the signature isn't of a
				 * type/algo that can be used for SSH.
				 */
				signature.toBuffer('ssh');
			} catch (e) {
				done(e);
				return;
			}
			sig.signature = signature;
			done();
		});
	}

	function write$6(cert, options) {
		if (options === undefined)
			options = {};

		var blob = toBuffer$2(cert);
		var out = getCertType(cert.subjectKey) + ' ' + blob.toString('base64');
		if (options.comment)
			out = out + ' ' + options.comment;
		return (out);
	}


	function toBuffer$2(cert, noSig) {
		assert_1.object(cert.signatures.openssh, 'signature for openssh format');
		var sig = cert.signatures.openssh;

		if (sig.nonce === undefined)
			sig.nonce = crypto__default['default'].randomBytes(16);
		var buf = new sshBuffer({});
		buf.writeString(getCertType(cert.subjectKey));
		buf.writeBuffer(sig.nonce);

		var key = cert.subjectKey;
		var algInfo = algs.info[key.type];
		algInfo.parts.forEach(function (part) {
			buf.writePart(key.part[part]);
		});

		buf.writeInt64(cert.serial);

		var type = cert.subjects[0].type;
		assert_1.notStrictEqual(type, 'unknown');
		cert.subjects.forEach(function (id) {
			assert_1.strictEqual(id.type, type);
		});
		type = TYPES[type];
		buf.writeInt(type);

		if (sig.keyId === undefined) {
			sig.keyId = cert.subjects[0].type + '_' +
			    (cert.subjects[0].uid || cert.subjects[0].hostname);
		}
		buf.writeString(sig.keyId);

		var sub = new sshBuffer({});
		cert.subjects.forEach(function (id) {
			if (type === TYPES.host)
				sub.writeString(id.hostname);
			else if (type === TYPES.user)
				sub.writeString(id.uid);
		});
		buf.writeBuffer(sub.toBuffer());

		buf.writeInt64(dateToInt64(cert.validFrom));
		buf.writeInt64(dateToInt64(cert.validUntil));

		var exts = sig.exts;
		if (exts === undefined)
			exts = [];

		var extbuf = new sshBuffer({});
		exts.forEach(function (ext) {
			if (ext.critical !== true)
				return;
			extbuf.writeString(ext.name);
			extbuf.writeBuffer(ext.data);
		});
		buf.writeBuffer(extbuf.toBuffer());

		extbuf = new sshBuffer({});
		exts.forEach(function (ext) {
			if (ext.critical === true)
				return;
			extbuf.writeString(ext.name);
			extbuf.writeBuffer(ext.data);
		});
		buf.writeBuffer(extbuf.toBuffer());

		/* reserved */
		buf.writeBuffer(Buffer$h.alloc(0));

		sub = rfc4253.write(cert.issuerKey);
		buf.writeBuffer(sub);

		if (!noSig)
			buf.writeBuffer(sig.signature.toBuffer('ssh'));

		return (buf.toBuffer());
	}

	function getAlg(certType) {
		if (certType === 'ssh-rsa-cert-v01@openssh.com')
			return ('rsa');
		if (certType === 'ssh-dss-cert-v01@openssh.com')
			return ('dsa');
		if (certType.match(ECDSA_ALGO))
			return ('ecdsa');
		if (certType === 'ssh-ed25519-cert-v01@openssh.com')
			return ('ed25519');
		throw (new Error('Unsupported cert type ' + certType));
	}

	function getCertType(key) {
		if (key.type === 'rsa')
			return ('ssh-rsa-cert-v01@openssh.com');
		if (key.type === 'dsa')
			return ('ssh-dss-cert-v01@openssh.com');
		if (key.type === 'ecdsa')
			return ('ecdsa-sha2-' + key.curve + '-cert-v01@openssh.com');
		if (key.type === 'ed25519')
			return ('ssh-ed25519-cert-v01@openssh.com');
		throw (new Error('Unsupported key type ' + key.type));
	}

	// Copyright 2017 Joyent, Inc.

	var x509 = {
		read: read$4,
		verify: verify$1,
		sign: sign$1,
		signAsync: signAsync,
		write: write$5
	};



	var Buffer$g = safer_1.Buffer;










	/*
	 * This file is based on RFC5280 (X.509).
	 */

	/* Helper to read in a single mpint */
	function readMPInt(der, nm) {
		assert_1.strictEqual(der.peek(), lib$6.Ber.Integer,
		    nm + ' is not an Integer');
		return (utils$3.mpNormalize(der.readString(lib$6.Ber.Integer, true)));
	}

	function verify$1(cert, key) {
		var sig = cert.signatures.x509;
		assert_1.object(sig, 'x509 signature');

		var algParts = sig.algo.split('-');
		if (algParts[0] !== key.type)
			return (false);

		var blob = sig.cache;
		if (blob === undefined) {
			var der = new lib$6.BerWriter();
			writeTBSCert(cert, der);
			blob = der.buffer;
		}

		var verifier = key.createVerify(algParts[1]);
		verifier.write(blob);
		return (verifier.verify(sig.signature));
	}

	function Local(i) {
		return (lib$6.Ber.Context | lib$6.Ber.Constructor | i);
	}

	function Context(i) {
		return (lib$6.Ber.Context | i);
	}

	var SIGN_ALGS = {
		'rsa-md5': '1.2.840.113549.1.1.4',
		'rsa-sha1': '1.2.840.113549.1.1.5',
		'rsa-sha256': '1.2.840.113549.1.1.11',
		'rsa-sha384': '1.2.840.113549.1.1.12',
		'rsa-sha512': '1.2.840.113549.1.1.13',
		'dsa-sha1': '1.2.840.10040.4.3',
		'dsa-sha256': '2.16.840.1.101.3.4.3.2',
		'ecdsa-sha1': '1.2.840.10045.4.1',
		'ecdsa-sha256': '1.2.840.10045.4.3.2',
		'ecdsa-sha384': '1.2.840.10045.4.3.3',
		'ecdsa-sha512': '1.2.840.10045.4.3.4',
		'ed25519-sha512': '1.3.101.112'
	};
	Object.keys(SIGN_ALGS).forEach(function (k) {
		SIGN_ALGS[SIGN_ALGS[k]] = k;
	});
	SIGN_ALGS['1.3.14.3.2.3'] = 'rsa-md5';
	SIGN_ALGS['1.3.14.3.2.29'] = 'rsa-sha1';

	var EXTS = {
		'issuerKeyId': '2.5.29.35',
		'altName': '2.5.29.17',
		'basicConstraints': '2.5.29.19',
		'keyUsage': '2.5.29.15',
		'extKeyUsage': '2.5.29.37'
	};

	function read$4(buf, options) {
		if (typeof (buf) === 'string') {
			buf = Buffer$g.from(buf, 'binary');
		}
		assert_1.buffer(buf, 'buf');

		var der = new lib$6.BerReader(buf);

		der.readSequence();
		if (Math.abs(der.length - der.remain) > 1) {
			throw (new Error('DER sequence does not contain whole byte ' +
			    'stream'));
		}

		var tbsStart = der.offset;
		der.readSequence();
		var sigOffset = der.offset + der.length;
		var tbsEnd = sigOffset;

		if (der.peek() === Local(0)) {
			der.readSequence(Local(0));
			var version = der.readInt();
			assert_1.ok(version <= 3,
			    'only x.509 versions up to v3 supported');
		}

		var cert = {};
		cert.signatures = {};
		var sig = (cert.signatures.x509 = {});
		sig.extras = {};

		cert.serial = readMPInt(der, 'serial');

		der.readSequence();
		var after = der.offset + der.length;
		var certAlgOid = der.readOID();
		var certAlg = SIGN_ALGS[certAlgOid];
		if (certAlg === undefined)
			throw (new Error('unknown signature algorithm ' + certAlgOid));

		der._offset = after;
		cert.issuer = identity.parseAsn1(der);

		der.readSequence();
		cert.validFrom = readDate(der);
		cert.validUntil = readDate(der);

		cert.subjects = [identity.parseAsn1(der)];

		der.readSequence();
		after = der.offset + der.length;
		cert.subjectKey = pkcs8.readPkcs8(undefined, 'public', der);
		der._offset = after;

		/* issuerUniqueID */
		if (der.peek() === Local(1)) {
			der.readSequence(Local(1));
			sig.extras.issuerUniqueID =
			    buf.slice(der.offset, der.offset + der.length);
			der._offset += der.length;
		}

		/* subjectUniqueID */
		if (der.peek() === Local(2)) {
			der.readSequence(Local(2));
			sig.extras.subjectUniqueID =
			    buf.slice(der.offset, der.offset + der.length);
			der._offset += der.length;
		}

		/* extensions */
		if (der.peek() === Local(3)) {
			der.readSequence(Local(3));
			var extEnd = der.offset + der.length;
			der.readSequence();

			while (der.offset < extEnd)
				readExtension(cert, buf, der);

			assert_1.strictEqual(der.offset, extEnd);
		}

		assert_1.strictEqual(der.offset, sigOffset);

		der.readSequence();
		after = der.offset + der.length;
		var sigAlgOid = der.readOID();
		var sigAlg = SIGN_ALGS[sigAlgOid];
		if (sigAlg === undefined)
			throw (new Error('unknown signature algorithm ' + sigAlgOid));
		der._offset = after;

		var sigData = der.readString(lib$6.Ber.BitString, true);
		if (sigData[0] === 0)
			sigData = sigData.slice(1);
		var algParts = sigAlg.split('-');

		sig.signature = signature$1.parse(sigData, algParts[0], 'asn1');
		sig.signature.hashAlgorithm = algParts[1];
		sig.algo = sigAlg;
		sig.cache = buf.slice(tbsStart, tbsEnd);

		return (new certificate(cert));
	}

	function readDate(der) {
		if (der.peek() === lib$6.Ber.UTCTime) {
			return (utcTimeToDate(der.readString(lib$6.Ber.UTCTime)));
		} else if (der.peek() === lib$6.Ber.GeneralizedTime) {
			return (gTimeToDate(der.readString(lib$6.Ber.GeneralizedTime)));
		} else {
			throw (new Error('Unsupported date format'));
		}
	}

	function writeDate(der, date) {
		if (date.getUTCFullYear() >= 2050 || date.getUTCFullYear() < 1950) {
			der.writeString(dateToGTime(date), lib$6.Ber.GeneralizedTime);
		} else {
			der.writeString(dateToUTCTime(date), lib$6.Ber.UTCTime);
		}
	}

	/* RFC5280, section 4.2.1.6 (GeneralName type) */
	var ALTNAME = {
		OtherName: Local(0),
		RFC822Name: Context(1),
		DNSName: Context(2),
		X400Address: Local(3),
		DirectoryName: Local(4),
		EDIPartyName: Local(5),
		URI: Context(6),
		IPAddress: Context(7),
		OID: Context(8)
	};

	/* RFC5280, section 4.2.1.12 (KeyPurposeId) */
	var EXTPURPOSE = {
		'serverAuth': '1.3.6.1.5.5.7.3.1',
		'clientAuth': '1.3.6.1.5.5.7.3.2',
		'codeSigning': '1.3.6.1.5.5.7.3.3',

		/* See https://github.com/joyent/oid-docs/blob/master/root.md */
		'joyentDocker': '1.3.6.1.4.1.38678.1.4.1',
		'joyentCmon': '1.3.6.1.4.1.38678.1.4.2'
	};
	var EXTPURPOSE_REV = {};
	Object.keys(EXTPURPOSE).forEach(function (k) {
		EXTPURPOSE_REV[EXTPURPOSE[k]] = k;
	});

	var KEYUSEBITS = [
		'signature', 'identity', 'keyEncryption',
		'encryption', 'keyAgreement', 'ca', 'crl'
	];

	function readExtension(cert, buf, der) {
		der.readSequence();
		var after = der.offset + der.length;
		var extId = der.readOID();
		var id;
		var sig = cert.signatures.x509;
		if (!sig.extras.exts)
			sig.extras.exts = [];

		var critical;
		if (der.peek() === lib$6.Ber.Boolean)
			critical = der.readBoolean();

		switch (extId) {
		case (EXTS.basicConstraints):
			der.readSequence(lib$6.Ber.OctetString);
			der.readSequence();
			var bcEnd = der.offset + der.length;
			var ca = false;
			if (der.peek() === lib$6.Ber.Boolean)
				ca = der.readBoolean();
			if (cert.purposes === undefined)
				cert.purposes = [];
			if (ca === true)
				cert.purposes.push('ca');
			var bc = { oid: extId, critical: critical };
			if (der.offset < bcEnd && der.peek() === lib$6.Ber.Integer)
				bc.pathLen = der.readInt();
			sig.extras.exts.push(bc);
			break;
		case (EXTS.extKeyUsage):
			der.readSequence(lib$6.Ber.OctetString);
			der.readSequence();
			if (cert.purposes === undefined)
				cert.purposes = [];
			var ekEnd = der.offset + der.length;
			while (der.offset < ekEnd) {
				var oid = der.readOID();
				cert.purposes.push(EXTPURPOSE_REV[oid] || oid);
			}
			/*
			 * This is a bit of a hack: in the case where we have a cert
			 * that's only allowed to do serverAuth or clientAuth (and not
			 * the other), we want to make sure all our Subjects are of
			 * the right type. But we already parsed our Subjects and
			 * decided if they were hosts or users earlier (since it appears
			 * first in the cert).
			 *
			 * So we go through and mutate them into the right kind here if
			 * it doesn't match. This might not be hugely beneficial, as it
			 * seems that single-purpose certs are not often seen in the
			 * wild.
			 */
			if (cert.purposes.indexOf('serverAuth') !== -1 &&
			    cert.purposes.indexOf('clientAuth') === -1) {
				cert.subjects.forEach(function (ide) {
					if (ide.type !== 'host') {
						ide.type = 'host';
						ide.hostname = ide.uid ||
						    ide.email ||
						    ide.components[0].value;
					}
				});
			} else if (cert.purposes.indexOf('clientAuth') !== -1 &&
			    cert.purposes.indexOf('serverAuth') === -1) {
				cert.subjects.forEach(function (ide) {
					if (ide.type !== 'user') {
						ide.type = 'user';
						ide.uid = ide.hostname ||
						    ide.email ||
						    ide.components[0].value;
					}
				});
			}
			sig.extras.exts.push({ oid: extId, critical: critical });
			break;
		case (EXTS.keyUsage):
			der.readSequence(lib$6.Ber.OctetString);
			var bits = der.readString(lib$6.Ber.BitString, true);
			var setBits = readBitField(bits, KEYUSEBITS);
			setBits.forEach(function (bit) {
				if (cert.purposes === undefined)
					cert.purposes = [];
				if (cert.purposes.indexOf(bit) === -1)
					cert.purposes.push(bit);
			});
			sig.extras.exts.push({ oid: extId, critical: critical,
			    bits: bits });
			break;
		case (EXTS.altName):
			der.readSequence(lib$6.Ber.OctetString);
			der.readSequence();
			var aeEnd = der.offset + der.length;
			while (der.offset < aeEnd) {
				switch (der.peek()) {
				case ALTNAME.OtherName:
				case ALTNAME.EDIPartyName:
					der.readSequence();
					der._offset += der.length;
					break;
				case ALTNAME.OID:
					der.readOID(ALTNAME.OID);
					break;
				case ALTNAME.RFC822Name:
					/* RFC822 specifies email addresses */
					var email = der.readString(ALTNAME.RFC822Name);
					id = identity.forEmail(email);
					if (!cert.subjects[0].equals(id))
						cert.subjects.push(id);
					break;
				case ALTNAME.DirectoryName:
					der.readSequence(ALTNAME.DirectoryName);
					id = identity.parseAsn1(der);
					if (!cert.subjects[0].equals(id))
						cert.subjects.push(id);
					break;
				case ALTNAME.DNSName:
					var host = der.readString(
					    ALTNAME.DNSName);
					id = identity.forHost(host);
					if (!cert.subjects[0].equals(id))
						cert.subjects.push(id);
					break;
				default:
					der.readString(der.peek());
					break;
				}
			}
			sig.extras.exts.push({ oid: extId, critical: critical });
			break;
		default:
			sig.extras.exts.push({
				oid: extId,
				critical: critical,
				data: der.readString(lib$6.Ber.OctetString, true)
			});
			break;
		}

		der._offset = after;
	}

	var UTCTIME_RE =
	    /^([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})?Z$/;
	function utcTimeToDate(t) {
		var m = t.match(UTCTIME_RE);
		assert_1.ok(m, 'timestamps must be in UTC');
		var d = new Date();

		var thisYear = d.getUTCFullYear();
		var century = Math.floor(thisYear / 100) * 100;

		var year = parseInt(m[1], 10);
		if (thisYear % 100 < 50 && year >= 60)
			year += (century - 1);
		else
			year += century;
		d.setUTCFullYear(year, parseInt(m[2], 10) - 1, parseInt(m[3], 10));
		d.setUTCHours(parseInt(m[4], 10), parseInt(m[5], 10));
		if (m[6] && m[6].length > 0)
			d.setUTCSeconds(parseInt(m[6], 10));
		return (d);
	}

	var GTIME_RE =
	    /^([0-9]{4})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})?Z$/;
	function gTimeToDate(t) {
		var m = t.match(GTIME_RE);
		assert_1.ok(m);
		var d = new Date();

		d.setUTCFullYear(parseInt(m[1], 10), parseInt(m[2], 10) - 1,
		    parseInt(m[3], 10));
		d.setUTCHours(parseInt(m[4], 10), parseInt(m[5], 10));
		if (m[6] && m[6].length > 0)
			d.setUTCSeconds(parseInt(m[6], 10));
		return (d);
	}

	function zeroPad(n, m) {
		if (m === undefined)
			m = 2;
		var s = '' + n;
		while (s.length < m)
			s = '0' + s;
		return (s);
	}

	function dateToUTCTime(d) {
		var s = '';
		s += zeroPad(d.getUTCFullYear() % 100);
		s += zeroPad(d.getUTCMonth() + 1);
		s += zeroPad(d.getUTCDate());
		s += zeroPad(d.getUTCHours());
		s += zeroPad(d.getUTCMinutes());
		s += zeroPad(d.getUTCSeconds());
		s += 'Z';
		return (s);
	}

	function dateToGTime(d) {
		var s = '';
		s += zeroPad(d.getUTCFullYear(), 4);
		s += zeroPad(d.getUTCMonth() + 1);
		s += zeroPad(d.getUTCDate());
		s += zeroPad(d.getUTCHours());
		s += zeroPad(d.getUTCMinutes());
		s += zeroPad(d.getUTCSeconds());
		s += 'Z';
		return (s);
	}

	function sign$1(cert, key) {
		if (cert.signatures.x509 === undefined)
			cert.signatures.x509 = {};
		var sig = cert.signatures.x509;

		sig.algo = key.type + '-' + key.defaultHashAlgorithm();
		if (SIGN_ALGS[sig.algo] === undefined)
			return (false);

		var der = new lib$6.BerWriter();
		writeTBSCert(cert, der);
		var blob = der.buffer;
		sig.cache = blob;

		var signer = key.createSign();
		signer.write(blob);
		cert.signatures.x509.signature = signer.sign();

		return (true);
	}

	function signAsync(cert, signer, done) {
		if (cert.signatures.x509 === undefined)
			cert.signatures.x509 = {};
		var sig = cert.signatures.x509;

		var der = new lib$6.BerWriter();
		writeTBSCert(cert, der);
		var blob = der.buffer;
		sig.cache = blob;

		signer(blob, function (err, signature) {
			if (err) {
				done(err);
				return;
			}
			sig.algo = signature.type + '-' + signature.hashAlgorithm;
			if (SIGN_ALGS[sig.algo] === undefined) {
				done(new Error('Invalid signing algorithm "' +
				    sig.algo + '"'));
				return;
			}
			sig.signature = signature;
			done();
		});
	}

	function write$5(cert, options) {
		var sig = cert.signatures.x509;
		assert_1.object(sig, 'x509 signature');

		var der = new lib$6.BerWriter();
		der.startSequence();
		if (sig.cache) {
			der._ensure(sig.cache.length);
			sig.cache.copy(der._buf, der._offset);
			der._offset += sig.cache.length;
		} else {
			writeTBSCert(cert, der);
		}

		der.startSequence();
		der.writeOID(SIGN_ALGS[sig.algo]);
		if (sig.algo.match(/^rsa-/))
			der.writeNull();
		der.endSequence();

		var sigData = sig.signature.toBuffer('asn1');
		var data = Buffer$g.alloc(sigData.length + 1);
		data[0] = 0;
		sigData.copy(data, 1);
		der.writeBuffer(data, lib$6.Ber.BitString);
		der.endSequence();

		return (der.buffer);
	}

	function writeTBSCert(cert, der) {
		var sig = cert.signatures.x509;
		assert_1.object(sig, 'x509 signature');

		der.startSequence();

		der.startSequence(Local(0));
		der.writeInt(2);
		der.endSequence();

		der.writeBuffer(utils$3.mpNormalize(cert.serial), lib$6.Ber.Integer);

		der.startSequence();
		der.writeOID(SIGN_ALGS[sig.algo]);
		if (sig.algo.match(/^rsa-/))
			der.writeNull();
		der.endSequence();

		cert.issuer.toAsn1(der);

		der.startSequence();
		writeDate(der, cert.validFrom);
		writeDate(der, cert.validUntil);
		der.endSequence();

		var subject = cert.subjects[0];
		var altNames = cert.subjects.slice(1);
		subject.toAsn1(der);

		pkcs8.writePkcs8(der, cert.subjectKey);

		if (sig.extras && sig.extras.issuerUniqueID) {
			der.writeBuffer(sig.extras.issuerUniqueID, Local(1));
		}

		if (sig.extras && sig.extras.subjectUniqueID) {
			der.writeBuffer(sig.extras.subjectUniqueID, Local(2));
		}

		if (altNames.length > 0 || subject.type === 'host' ||
		    (cert.purposes !== undefined && cert.purposes.length > 0) ||
		    (sig.extras && sig.extras.exts)) {
			der.startSequence(Local(3));
			der.startSequence();

			var exts = [];
			if (cert.purposes !== undefined && cert.purposes.length > 0) {
				exts.push({
					oid: EXTS.basicConstraints,
					critical: true
				});
				exts.push({
					oid: EXTS.keyUsage,
					critical: true
				});
				exts.push({
					oid: EXTS.extKeyUsage,
					critical: true
				});
			}
			exts.push({ oid: EXTS.altName });
			if (sig.extras && sig.extras.exts)
				exts = sig.extras.exts;

			for (var i = 0; i < exts.length; ++i) {
				der.startSequence();
				der.writeOID(exts[i].oid);

				if (exts[i].critical !== undefined)
					der.writeBoolean(exts[i].critical);

				if (exts[i].oid === EXTS.altName) {
					der.startSequence(lib$6.Ber.OctetString);
					der.startSequence();
					if (subject.type === 'host') {
						der.writeString(subject.hostname,
						    Context(2));
					}
					for (var j = 0; j < altNames.length; ++j) {
						if (altNames[j].type === 'host') {
							der.writeString(
							    altNames[j].hostname,
							    ALTNAME.DNSName);
						} else if (altNames[j].type ===
						    'email') {
							der.writeString(
							    altNames[j].email,
							    ALTNAME.RFC822Name);
						} else {
							/*
							 * Encode anything else as a
							 * DN style name for now.
							 */
							der.startSequence(
							    ALTNAME.DirectoryName);
							altNames[j].toAsn1(der);
							der.endSequence();
						}
					}
					der.endSequence();
					der.endSequence();
				} else if (exts[i].oid === EXTS.basicConstraints) {
					der.startSequence(lib$6.Ber.OctetString);
					der.startSequence();
					var ca = (cert.purposes.indexOf('ca') !== -1);
					var pathLen = exts[i].pathLen;
					der.writeBoolean(ca);
					if (pathLen !== undefined)
						der.writeInt(pathLen);
					der.endSequence();
					der.endSequence();
				} else if (exts[i].oid === EXTS.extKeyUsage) {
					der.startSequence(lib$6.Ber.OctetString);
					der.startSequence();
					cert.purposes.forEach(function (purpose) {
						if (purpose === 'ca')
							return;
						if (KEYUSEBITS.indexOf(purpose) !== -1)
							return;
						var oid = purpose;
						if (EXTPURPOSE[purpose] !== undefined)
							oid = EXTPURPOSE[purpose];
						der.writeOID(oid);
					});
					der.endSequence();
					der.endSequence();
				} else if (exts[i].oid === EXTS.keyUsage) {
					der.startSequence(lib$6.Ber.OctetString);
					/*
					 * If we parsed this certificate from a byte
					 * stream (i.e. we didn't generate it in sshpk)
					 * then we'll have a ".bits" property on the
					 * ext with the original raw byte contents.
					 *
					 * If we have this, use it here instead of
					 * regenerating it. This guarantees we output
					 * the same data we parsed, so signatures still
					 * validate.
					 */
					if (exts[i].bits !== undefined) {
						der.writeBuffer(exts[i].bits,
						    lib$6.Ber.BitString);
					} else {
						var bits = writeBitField(cert.purposes,
						    KEYUSEBITS);
						der.writeBuffer(bits,
						    lib$6.Ber.BitString);
					}
					der.endSequence();
				} else {
					der.writeBuffer(exts[i].data,
					    lib$6.Ber.OctetString);
				}

				der.endSequence();
			}

			der.endSequence();
			der.endSequence();
		}

		der.endSequence();
	}

	/*
	 * Reads an ASN.1 BER bitfield out of the Buffer produced by doing
	 * `BerReader#readString(asn1.Ber.BitString)`. That function gives us the raw
	 * contents of the BitString tag, which is a count of unused bits followed by
	 * the bits as a right-padded byte string.
	 *
	 * `bits` is the Buffer, `bitIndex` should contain an array of string names
	 * for the bits in the string, ordered starting with bit #0 in the ASN.1 spec.
	 *
	 * Returns an array of Strings, the names of the bits that were set to 1.
	 */
	function readBitField(bits, bitIndex) {
		var bitLen = 8 * (bits.length - 1) - bits[0];
		var setBits = {};
		for (var i = 0; i < bitLen; ++i) {
			var byteN = 1 + Math.floor(i / 8);
			var bit = 7 - (i % 8);
			var mask = 1 << bit;
			var bitVal = ((bits[byteN] & mask) !== 0);
			var name = bitIndex[i];
			if (bitVal && typeof (name) === 'string') {
				setBits[name] = true;
			}
		}
		return (Object.keys(setBits));
	}

	/*
	 * `setBits` is an array of strings, containing the names for each bit that
	 * sould be set to 1. `bitIndex` is same as in `readBitField()`.
	 *
	 * Returns a Buffer, ready to be written out with `BerWriter#writeString()`.
	 */
	function writeBitField(setBits, bitIndex) {
		var bitLen = bitIndex.length;
		var blen = Math.ceil(bitLen / 8);
		var unused = blen * 8 - bitLen;
		var bits = Buffer$g.alloc(1 + blen); // zero-filled
		bits[0] = unused;
		for (var i = 0; i < bitLen; ++i) {
			var byteN = 1 + Math.floor(i / 8);
			var bit = 7 - (i % 8);
			var mask = 1 << bit;
			var name = bitIndex[i];
			if (name === undefined)
				continue;
			var bitVal = (setBits.indexOf(name) !== -1);
			if (bitVal) {
				bits[byteN] |= mask;
			}
		}
		return (bits);
	}

	// Copyright 2016 Joyent, Inc.



	var x509Pem = {
		read: read$3,
		verify: x509.verify,
		sign: x509.sign,
		write: write$4
	};



	var Buffer$f = safer_1.Buffer;









	function read$3(buf, options) {
		if (typeof (buf) !== 'string') {
			assert_1.buffer(buf, 'buf');
			buf = buf.toString('ascii');
		}

		var lines = buf.trim().split(/[\r\n]+/g);

		var m;
		var si = -1;
		while (!m && si < lines.length) {
			m = lines[++si].match(/*JSSTYLED*/
			    /[-]+[ ]*BEGIN CERTIFICATE[ ]*[-]+/);
		}
		assert_1.ok(m, 'invalid PEM header');

		var m2;
		var ei = lines.length;
		while (!m2 && ei > 0) {
			m2 = lines[--ei].match(/*JSSTYLED*/
			    /[-]+[ ]*END CERTIFICATE[ ]*[-]+/);
		}
		assert_1.ok(m2, 'invalid PEM footer');

		lines = lines.slice(si, ei + 1);

		var headers = {};
		while (true) {
			lines = lines.slice(1);
			m = lines[0].match(/*JSSTYLED*/
			    /^([A-Za-z0-9-]+): (.+)$/);
			if (!m)
				break;
			headers[m[1].toLowerCase()] = m[2];
		}

		/* Chop off the first and last lines */
		lines = lines.slice(0, -1).join('');
		buf = Buffer$f.from(lines, 'base64');

		return (x509.read(buf, options));
	}

	function write$4(cert, options) {
		var dbuf = x509.write(cert, options);

		var header = 'CERTIFICATE';
		var tmp = dbuf.toString('base64');
		var len = tmp.length + (tmp.length / 64) +
		    18 + 16 + header.length*2 + 10;
		var buf = Buffer$f.alloc(len);
		var o = 0;
		o += buf.write('-----BEGIN ' + header + '-----\n', o);
		for (var i = 0; i < tmp.length; ) {
			var limit = i + 64;
			if (limit > tmp.length)
				limit = tmp.length;
			o += buf.write(tmp.slice(i, limit), o);
			buf[o++] = 10;
			i = limit;
		}
		o += buf.write('-----END ' + header + '-----\n', o);

		return (buf.slice(0, o));
	}

	// Copyright 2016 Joyent, Inc.

	var certificate = Certificate;


	var Buffer$e = safer_1.Buffer;











	var formats$4 = {};
	formats$4['openssh'] = opensshCert;
	formats$4['x509'] = x509;
	formats$4['pem'] = x509Pem;

	var CertificateParseError = errors$1.CertificateParseError;
	var InvalidAlgorithmError$5 = errors$1.InvalidAlgorithmError;

	function Certificate(opts) {
		assert_1.object(opts, 'options');
		assert_1.arrayOfObject(opts.subjects, 'options.subjects');
		utils$3.assertCompatible(opts.subjects[0], identity, [1, 0],
		    'options.subjects');
		utils$3.assertCompatible(opts.subjectKey, key, [1, 0],
		    'options.subjectKey');
		utils$3.assertCompatible(opts.issuer, identity, [1, 0], 'options.issuer');
		if (opts.issuerKey !== undefined) {
			utils$3.assertCompatible(opts.issuerKey, key, [1, 0],
			    'options.issuerKey');
		}
		assert_1.object(opts.signatures, 'options.signatures');
		assert_1.buffer(opts.serial, 'options.serial');
		assert_1.date(opts.validFrom, 'options.validFrom');
		assert_1.date(opts.validUntil, 'optons.validUntil');

		assert_1.optionalArrayOfString(opts.purposes, 'options.purposes');

		this._hashCache = {};

		this.subjects = opts.subjects;
		this.issuer = opts.issuer;
		this.subjectKey = opts.subjectKey;
		this.issuerKey = opts.issuerKey;
		this.signatures = opts.signatures;
		this.serial = opts.serial;
		this.validFrom = opts.validFrom;
		this.validUntil = opts.validUntil;
		this.purposes = opts.purposes;
	}

	Certificate.formats = formats$4;

	Certificate.prototype.toBuffer = function (format, options) {
		if (format === undefined)
			format = 'x509';
		assert_1.string(format, 'format');
		assert_1.object(formats$4[format], 'formats[format]');
		assert_1.optionalObject(options, 'options');

		return (formats$4[format].write(this, options));
	};

	Certificate.prototype.toString = function (format, options) {
		if (format === undefined)
			format = 'pem';
		return (this.toBuffer(format, options).toString());
	};

	Certificate.prototype.fingerprint = function (algo) {
		if (algo === undefined)
			algo = 'sha256';
		assert_1.string(algo, 'algorithm');
		var opts = {
			type: 'certificate',
			hash: this.hash(algo),
			algorithm: algo
		};
		return (new fingerprint(opts));
	};

	Certificate.prototype.hash = function (algo) {
		assert_1.string(algo, 'algorithm');
		algo = algo.toLowerCase();
		if (algs.hashAlgs[algo] === undefined)
			throw (new InvalidAlgorithmError$5(algo));

		if (this._hashCache[algo])
			return (this._hashCache[algo]);

		var hash = crypto__default['default'].createHash(algo).
		    update(this.toBuffer('x509')).digest();
		this._hashCache[algo] = hash;
		return (hash);
	};

	Certificate.prototype.isExpired = function (when) {
		if (when === undefined)
			when = new Date();
		return (!((when.getTime() >= this.validFrom.getTime()) &&
			(when.getTime() < this.validUntil.getTime())));
	};

	Certificate.prototype.isSignedBy = function (issuerCert) {
		utils$3.assertCompatible(issuerCert, Certificate, [1, 0], 'issuer');

		if (!this.issuer.equals(issuerCert.subjects[0]))
			return (false);
		if (this.issuer.purposes && this.issuer.purposes.length > 0 &&
		    this.issuer.purposes.indexOf('ca') === -1) {
			return (false);
		}

		return (this.isSignedByKey(issuerCert.subjectKey));
	};

	Certificate.prototype.getExtension = function (keyOrOid) {
		assert_1.string(keyOrOid, 'keyOrOid');
		var ext = this.getExtensions().filter(function (maybeExt) {
			if (maybeExt.format === 'x509')
				return (maybeExt.oid === keyOrOid);
			if (maybeExt.format === 'openssh')
				return (maybeExt.name === keyOrOid);
			return (false);
		})[0];
		return (ext);
	};

	Certificate.prototype.getExtensions = function () {
		var exts = [];
		var x509 = this.signatures.x509;
		if (x509 && x509.extras && x509.extras.exts) {
			x509.extras.exts.forEach(function (ext) {
				ext.format = 'x509';
				exts.push(ext);
			});
		}
		var openssh = this.signatures.openssh;
		if (openssh && openssh.exts) {
			openssh.exts.forEach(function (ext) {
				ext.format = 'openssh';
				exts.push(ext);
			});
		}
		return (exts);
	};

	Certificate.prototype.isSignedByKey = function (issuerKey) {
		utils$3.assertCompatible(issuerKey, key, [1, 2], 'issuerKey');

		if (this.issuerKey !== undefined) {
			return (this.issuerKey.
			    fingerprint('sha512').matches(issuerKey));
		}

		var fmt = Object.keys(this.signatures)[0];
		var valid = formats$4[fmt].verify(this, issuerKey);
		if (valid)
			this.issuerKey = issuerKey;
		return (valid);
	};

	Certificate.prototype.signWith = function (key) {
		utils$3.assertCompatible(key, privateKey, [1, 2], 'key');
		var fmts = Object.keys(formats$4);
		var didOne = false;
		for (var i = 0; i < fmts.length; ++i) {
			if (fmts[i] !== 'pem') {
				var ret = formats$4[fmts[i]].sign(this, key);
				if (ret === true)
					didOne = true;
			}
		}
		if (!didOne) {
			throw (new Error('Failed to sign the certificate for any ' +
			    'available certificate formats'));
		}
	};

	Certificate.createSelfSigned = function (subjectOrSubjects, key, options) {
		var subjects;
		if (Array.isArray(subjectOrSubjects))
			subjects = subjectOrSubjects;
		else
			subjects = [subjectOrSubjects];

		assert_1.arrayOfObject(subjects);
		subjects.forEach(function (subject) {
			utils$3.assertCompatible(subject, identity, [1, 0], 'subject');
		});

		utils$3.assertCompatible(key, privateKey, [1, 2], 'private key');

		assert_1.optionalObject(options, 'options');
		if (options === undefined)
			options = {};
		assert_1.optionalObject(options.validFrom, 'options.validFrom');
		assert_1.optionalObject(options.validUntil, 'options.validUntil');
		var validFrom = options.validFrom;
		var validUntil = options.validUntil;
		if (validFrom === undefined)
			validFrom = new Date();
		if (validUntil === undefined) {
			assert_1.optionalNumber(options.lifetime, 'options.lifetime');
			var lifetime = options.lifetime;
			if (lifetime === undefined)
				lifetime = 10*365*24*3600;
			validUntil = new Date();
			validUntil.setTime(validUntil.getTime() + lifetime*1000);
		}
		assert_1.optionalBuffer(options.serial, 'options.serial');
		var serial = options.serial;
		if (serial === undefined)
			serial = Buffer$e.from('0000000000000001', 'hex');

		var purposes = options.purposes;
		if (purposes === undefined)
			purposes = [];

		if (purposes.indexOf('signature') === -1)
			purposes.push('signature');

		/* Self-signed certs are always CAs. */
		if (purposes.indexOf('ca') === -1)
			purposes.push('ca');
		if (purposes.indexOf('crl') === -1)
			purposes.push('crl');

		/*
		 * If we weren't explicitly given any other purposes, do the sensible
		 * thing and add some basic ones depending on the subject type.
		 */
		if (purposes.length <= 3) {
			var hostSubjects = subjects.filter(function (subject) {
				return (subject.type === 'host');
			});
			var userSubjects = subjects.filter(function (subject) {
				return (subject.type === 'user');
			});
			if (hostSubjects.length > 0) {
				if (purposes.indexOf('serverAuth') === -1)
					purposes.push('serverAuth');
			}
			if (userSubjects.length > 0) {
				if (purposes.indexOf('clientAuth') === -1)
					purposes.push('clientAuth');
			}
			if (userSubjects.length > 0 || hostSubjects.length > 0) {
				if (purposes.indexOf('keyAgreement') === -1)
					purposes.push('keyAgreement');
				if (key.type === 'rsa' &&
				    purposes.indexOf('encryption') === -1)
					purposes.push('encryption');
			}
		}

		var cert = new Certificate({
			subjects: subjects,
			issuer: subjects[0],
			subjectKey: key.toPublic(),
			issuerKey: key.toPublic(),
			signatures: {},
			serial: serial,
			validFrom: validFrom,
			validUntil: validUntil,
			purposes: purposes
		});
		cert.signWith(key);

		return (cert);
	};

	Certificate.create =
	    function (subjectOrSubjects, key$1, issuer, issuerKey, options) {
		var subjects;
		if (Array.isArray(subjectOrSubjects))
			subjects = subjectOrSubjects;
		else
			subjects = [subjectOrSubjects];

		assert_1.arrayOfObject(subjects);
		subjects.forEach(function (subject) {
			utils$3.assertCompatible(subject, identity, [1, 0], 'subject');
		});

		utils$3.assertCompatible(key$1, key, [1, 0], 'key');
		if (privateKey.isPrivateKey(key$1))
			key$1 = key$1.toPublic();
		utils$3.assertCompatible(issuer, identity, [1, 0], 'issuer');
		utils$3.assertCompatible(issuerKey, privateKey, [1, 2], 'issuer key');

		assert_1.optionalObject(options, 'options');
		if (options === undefined)
			options = {};
		assert_1.optionalObject(options.validFrom, 'options.validFrom');
		assert_1.optionalObject(options.validUntil, 'options.validUntil');
		var validFrom = options.validFrom;
		var validUntil = options.validUntil;
		if (validFrom === undefined)
			validFrom = new Date();
		if (validUntil === undefined) {
			assert_1.optionalNumber(options.lifetime, 'options.lifetime');
			var lifetime = options.lifetime;
			if (lifetime === undefined)
				lifetime = 10*365*24*3600;
			validUntil = new Date();
			validUntil.setTime(validUntil.getTime() + lifetime*1000);
		}
		assert_1.optionalBuffer(options.serial, 'options.serial');
		var serial = options.serial;
		if (serial === undefined)
			serial = Buffer$e.from('0000000000000001', 'hex');

		var purposes = options.purposes;
		if (purposes === undefined)
			purposes = [];

		if (purposes.indexOf('signature') === -1)
			purposes.push('signature');

		if (options.ca === true) {
			if (purposes.indexOf('ca') === -1)
				purposes.push('ca');
			if (purposes.indexOf('crl') === -1)
				purposes.push('crl');
		}

		var hostSubjects = subjects.filter(function (subject) {
			return (subject.type === 'host');
		});
		var userSubjects = subjects.filter(function (subject) {
			return (subject.type === 'user');
		});
		if (hostSubjects.length > 0) {
			if (purposes.indexOf('serverAuth') === -1)
				purposes.push('serverAuth');
		}
		if (userSubjects.length > 0) {
			if (purposes.indexOf('clientAuth') === -1)
				purposes.push('clientAuth');
		}
		if (userSubjects.length > 0 || hostSubjects.length > 0) {
			if (purposes.indexOf('keyAgreement') === -1)
				purposes.push('keyAgreement');
			if (key$1.type === 'rsa' &&
			    purposes.indexOf('encryption') === -1)
				purposes.push('encryption');
		}

		var cert = new Certificate({
			subjects: subjects,
			issuer: issuer,
			subjectKey: key$1,
			issuerKey: issuerKey.toPublic(),
			signatures: {},
			serial: serial,
			validFrom: validFrom,
			validUntil: validUntil,
			purposes: purposes
		});
		cert.signWith(issuerKey);

		return (cert);
	};

	Certificate.parse = function (data, format, options) {
		if (typeof (data) !== 'string')
			assert_1.buffer(data, 'data');
		if (format === undefined)
			format = 'auto';
		assert_1.string(format, 'format');
		if (typeof (options) === 'string')
			options = { filename: options };
		assert_1.optionalObject(options, 'options');
		if (options === undefined)
			options = {};
		assert_1.optionalString(options.filename, 'options.filename');
		if (options.filename === undefined)
			options.filename = '(unnamed)';

		assert_1.object(formats$4[format], 'formats[format]');

		try {
			var k = formats$4[format].read(data, options);
			return (k);
		} catch (e) {
			throw (new CertificateParseError(options.filename, format, e));
		}
	};

	Certificate.isCertificate = function (obj, ver) {
		return (utils$3.isCompatible(obj, Certificate, ver));
	};

	/*
	 * API versions for Certificate:
	 * [1,0] -- initial ver
	 * [1,1] -- openssh format now unpacks extensions
	 */
	Certificate.prototype._sshpkApiVersion = [1, 1];

	Certificate._oldVersionDetect = function (obj) {
		return ([1, 0]);
	};

	// Copyright 2018 Joyent, Inc.

	var fingerprint = Fingerprint;


	var Buffer$d = safer_1.Buffer;








	var FingerprintFormatError = errors$1.FingerprintFormatError;
	var InvalidAlgorithmError$4 = errors$1.InvalidAlgorithmError;

	function Fingerprint(opts) {
		assert_1.object(opts, 'options');
		assert_1.string(opts.type, 'options.type');
		assert_1.buffer(opts.hash, 'options.hash');
		assert_1.string(opts.algorithm, 'options.algorithm');

		this.algorithm = opts.algorithm.toLowerCase();
		if (algs.hashAlgs[this.algorithm] !== true)
			throw (new InvalidAlgorithmError$4(this.algorithm));

		this.hash = opts.hash;
		this.type = opts.type;
		this.hashType = opts.hashType;
	}

	Fingerprint.prototype.toString = function (format) {
		if (format === undefined) {
			if (this.algorithm === 'md5' || this.hashType === 'spki')
				format = 'hex';
			else
				format = 'base64';
		}
		assert_1.string(format);

		switch (format) {
		case 'hex':
			if (this.hashType === 'spki')
				return (this.hash.toString('hex'));
			return (addColons(this.hash.toString('hex')));
		case 'base64':
			if (this.hashType === 'spki')
				return (this.hash.toString('base64'));
			return (sshBase64Format(this.algorithm,
			    this.hash.toString('base64')));
		default:
			throw (new FingerprintFormatError(undefined, format));
		}
	};

	Fingerprint.prototype.matches = function (other) {
		assert_1.object(other, 'key or certificate');
		if (this.type === 'key' && this.hashType !== 'ssh') {
			utils$3.assertCompatible(other, key, [1, 7], 'key with spki');
			if (privateKey.isPrivateKey(other)) {
				utils$3.assertCompatible(other, privateKey, [1, 6],
				    'privatekey with spki support');
			}
		} else if (this.type === 'key') {
			utils$3.assertCompatible(other, key, [1, 0], 'key');
		} else {
			utils$3.assertCompatible(other, certificate, [1, 0],
			    'certificate');
		}

		var theirHash = other.hash(this.algorithm, this.hashType);
		var theirHash2 = crypto__default['default'].createHash(this.algorithm).
		    update(theirHash).digest('base64');

		if (this.hash2 === undefined)
			this.hash2 = crypto__default['default'].createHash(this.algorithm).
			    update(this.hash).digest('base64');

		return (this.hash2 === theirHash2);
	};

	/*JSSTYLED*/
	var base64RE = /^[A-Za-z0-9+\/=]+$/;
	/*JSSTYLED*/
	var hexRE = /^[a-fA-F0-9]+$/;

	Fingerprint.parse = function (fp, options) {
		assert_1.string(fp, 'fingerprint');

		var alg, hash, enAlgs;
		if (Array.isArray(options)) {
			enAlgs = options;
			options = {};
		}
		assert_1.optionalObject(options, 'options');
		if (options === undefined)
			options = {};
		if (options.enAlgs !== undefined)
			enAlgs = options.enAlgs;
		if (options.algorithms !== undefined)
			enAlgs = options.algorithms;
		assert_1.optionalArrayOfString(enAlgs, 'algorithms');

		var hashType = 'ssh';
		if (options.hashType !== undefined)
			hashType = options.hashType;
		assert_1.string(hashType, 'options.hashType');

		var parts = fp.split(':');
		if (parts.length == 2) {
			alg = parts[0].toLowerCase();
			if (!base64RE.test(parts[1]))
				throw (new FingerprintFormatError(fp));
			try {
				hash = Buffer$d.from(parts[1], 'base64');
			} catch (e) {
				throw (new FingerprintFormatError(fp));
			}
		} else if (parts.length > 2) {
			alg = 'md5';
			if (parts[0].toLowerCase() === 'md5')
				parts = parts.slice(1);
			parts = parts.map(function (p) {
				while (p.length < 2)
					p = '0' + p;
				if (p.length > 2)
					throw (new FingerprintFormatError(fp));
				return (p);
			});
			parts = parts.join('');
			if (!hexRE.test(parts) || parts.length % 2 !== 0)
				throw (new FingerprintFormatError(fp));
			try {
				hash = Buffer$d.from(parts, 'hex');
			} catch (e) {
				throw (new FingerprintFormatError(fp));
			}
		} else {
			if (hexRE.test(fp)) {
				hash = Buffer$d.from(fp, 'hex');
			} else if (base64RE.test(fp)) {
				hash = Buffer$d.from(fp, 'base64');
			} else {
				throw (new FingerprintFormatError(fp));
			}

			switch (hash.length) {
			case 32:
				alg = 'sha256';
				break;
			case 16:
				alg = 'md5';
				break;
			case 20:
				alg = 'sha1';
				break;
			case 64:
				alg = 'sha512';
				break;
			default:
				throw (new FingerprintFormatError(fp));
			}

			/* Plain hex/base64: guess it's probably SPKI unless told. */
			if (options.hashType === undefined)
				hashType = 'spki';
		}

		if (alg === undefined)
			throw (new FingerprintFormatError(fp));

		if (algs.hashAlgs[alg] === undefined)
			throw (new InvalidAlgorithmError$4(alg));

		if (enAlgs !== undefined) {
			enAlgs = enAlgs.map(function (a) { return a.toLowerCase(); });
			if (enAlgs.indexOf(alg) === -1)
				throw (new InvalidAlgorithmError$4(alg));
		}

		return (new Fingerprint({
			algorithm: alg,
			hash: hash,
			type: options.type || 'key',
			hashType: hashType
		}));
	};

	function addColons(s) {
		/*JSSTYLED*/
		return (s.replace(/(.{2})(?=.)/g, '$1:'));
	}

	function base64Strip(s) {
		/*JSSTYLED*/
		return (s.replace(/=*$/, ''));
	}

	function sshBase64Format(alg, h) {
		return (alg.toUpperCase() + ':' + base64Strip(h));
	}

	Fingerprint.isFingerprint = function (obj, ver) {
		return (utils$3.isCompatible(obj, Fingerprint, ver));
	};

	/*
	 * API versions for Fingerprint:
	 * [1,0] -- initial ver
	 * [1,1] -- first tagged ver
	 * [1,2] -- hashType and spki support
	 */
	Fingerprint.prototype._sshpkApiVersion = [1, 2];

	Fingerprint._oldVersionDetect = function (obj) {
		assert_1.func(obj.toString);
		assert_1.func(obj.matches);
		return ([1, 0]);
	};

	// Copyright 2018 Joyent, Inc.

	var key = Key;






	var DiffieHellman = dhe.DiffieHellman;



	var edCompat;

	try {
		edCompat = edCompat$1;
	} catch (e) {
		/* Just continue through, and bail out if we try to use it. */
	}

	var InvalidAlgorithmError$3 = errors$1.InvalidAlgorithmError;
	var KeyParseError = errors$1.KeyParseError;

	var formats$3 = {};
	formats$3['auto'] = auto;
	formats$3['pem'] = pem;
	formats$3['pkcs1'] = pkcs1;
	formats$3['pkcs8'] = pkcs8;
	formats$3['rfc4253'] = rfc4253;
	formats$3['ssh'] = ssh;
	formats$3['ssh-private'] = sshPrivate;
	formats$3['openssh'] = formats$3['ssh-private'];
	formats$3['dnssec'] = dnssec;
	formats$3['putty'] = putty;
	formats$3['ppk'] = formats$3['putty'];

	function Key(opts) {
		assert_1.object(opts, 'options');
		assert_1.arrayOfObject(opts.parts, 'options.parts');
		assert_1.string(opts.type, 'options.type');
		assert_1.optionalString(opts.comment, 'options.comment');

		var algInfo = algs.info[opts.type];
		if (typeof (algInfo) !== 'object')
			throw (new InvalidAlgorithmError$3(opts.type));

		var partLookup = {};
		for (var i = 0; i < opts.parts.length; ++i) {
			var part = opts.parts[i];
			partLookup[part.name] = part;
		}

		this.type = opts.type;
		this.parts = opts.parts;
		this.part = partLookup;
		this.comment = undefined;
		this.source = opts.source;

		/* for speeding up hashing/fingerprint operations */
		this._rfc4253Cache = opts._rfc4253Cache;
		this._hashCache = {};

		var sz;
		this.curve = undefined;
		if (this.type === 'ecdsa') {
			var curve = this.part.curve.data.toString();
			this.curve = curve;
			sz = algs.curves[curve].size;
		} else if (this.type === 'ed25519' || this.type === 'curve25519') {
			sz = 256;
			this.curve = 'curve25519';
		} else {
			var szPart = this.part[algInfo.sizePart];
			sz = szPart.data.length;
			sz = sz * 8 - utils$3.countZeros(szPart.data);
		}
		this.size = sz;
	}

	Key.formats = formats$3;

	Key.prototype.toBuffer = function (format, options) {
		if (format === undefined)
			format = 'ssh';
		assert_1.string(format, 'format');
		assert_1.object(formats$3[format], 'formats[format]');
		assert_1.optionalObject(options, 'options');

		if (format === 'rfc4253') {
			if (this._rfc4253Cache === undefined)
				this._rfc4253Cache = formats$3['rfc4253'].write(this);
			return (this._rfc4253Cache);
		}

		return (formats$3[format].write(this, options));
	};

	Key.prototype.toString = function (format, options) {
		return (this.toBuffer(format, options).toString());
	};

	Key.prototype.hash = function (algo, type) {
		assert_1.string(algo, 'algorithm');
		assert_1.optionalString(type, 'type');
		if (type === undefined)
			type = 'ssh';
		algo = algo.toLowerCase();
		if (algs.hashAlgs[algo] === undefined)
			throw (new InvalidAlgorithmError$3(algo));

		var cacheKey = algo + '||' + type;
		if (this._hashCache[cacheKey])
			return (this._hashCache[cacheKey]);

		var buf;
		if (type === 'ssh') {
			buf = this.toBuffer('rfc4253');
		} else if (type === 'spki') {
			buf = formats$3.pkcs8.pkcs8ToBuffer(this);
		} else {
			throw (new Error('Hash type ' + type + ' not supported'));
		}
		var hash = crypto__default['default'].createHash(algo).update(buf).digest();
		this._hashCache[cacheKey] = hash;
		return (hash);
	};

	Key.prototype.fingerprint = function (algo, type) {
		if (algo === undefined)
			algo = 'sha256';
		if (type === undefined)
			type = 'ssh';
		assert_1.string(algo, 'algorithm');
		assert_1.string(type, 'type');
		var opts = {
			type: 'key',
			hash: this.hash(algo, type),
			algorithm: algo,
			hashType: type
		};
		return (new fingerprint(opts));
	};

	Key.prototype.defaultHashAlgorithm = function () {
		var hashAlgo = 'sha1';
		if (this.type === 'rsa')
			hashAlgo = 'sha256';
		if (this.type === 'dsa' && this.size > 1024)
			hashAlgo = 'sha256';
		if (this.type === 'ed25519')
			hashAlgo = 'sha512';
		if (this.type === 'ecdsa') {
			if (this.size <= 256)
				hashAlgo = 'sha256';
			else if (this.size <= 384)
				hashAlgo = 'sha384';
			else
				hashAlgo = 'sha512';
		}
		return (hashAlgo);
	};

	Key.prototype.createVerify = function (hashAlgo) {
		if (hashAlgo === undefined)
			hashAlgo = this.defaultHashAlgorithm();
		assert_1.string(hashAlgo, 'hash algorithm');

		/* ED25519 is not supported by OpenSSL, use a javascript impl. */
		if (this.type === 'ed25519' && edCompat !== undefined)
			return (new edCompat.Verifier(this, hashAlgo));
		if (this.type === 'curve25519')
			throw (new Error('Curve25519 keys are not suitable for ' +
			    'signing or verification'));

		var v, nm, err;
		try {
			nm = hashAlgo.toUpperCase();
			v = crypto__default['default'].createVerify(nm);
		} catch (e) {
			err = e;
		}
		if (v === undefined || (err instanceof Error &&
		    err.message.match(/Unknown message digest/))) {
			nm = 'RSA-';
			nm += hashAlgo.toUpperCase();
			v = crypto__default['default'].createVerify(nm);
		}
		assert_1.ok(v, 'failed to create verifier');
		var oldVerify = v.verify.bind(v);
		var key = this.toBuffer('pkcs8');
		var curve = this.curve;
		var self = this;
		v.verify = function (signature, fmt) {
			if (signature$1.isSignature(signature, [2, 0])) {
				if (signature.type !== self.type)
					return (false);
				if (signature.hashAlgorithm &&
				    signature.hashAlgorithm !== hashAlgo)
					return (false);
				if (signature.curve && self.type === 'ecdsa' &&
				    signature.curve !== curve)
					return (false);
				return (oldVerify(key, signature.toBuffer('asn1')));

			} else if (typeof (signature) === 'string' ||
			    Buffer.isBuffer(signature)) {
				return (oldVerify(key, signature, fmt));

			/*
			 * Avoid doing this on valid arguments, walking the prototype
			 * chain can be quite slow.
			 */
			} else if (signature$1.isSignature(signature, [1, 0])) {
				throw (new Error('signature was created by too old ' +
				    'a version of sshpk and cannot be verified'));

			} else {
				throw (new TypeError('signature must be a string, ' +
				    'Buffer, or Signature object'));
			}
		};
		return (v);
	};

	Key.prototype.createDiffieHellman = function () {
		if (this.type === 'rsa')
			throw (new Error('RSA keys do not support Diffie-Hellman'));

		return (new DiffieHellman(this));
	};
	Key.prototype.createDH = Key.prototype.createDiffieHellman;

	Key.parse = function (data, format, options) {
		if (typeof (data) !== 'string')
			assert_1.buffer(data, 'data');
		if (format === undefined)
			format = 'auto';
		assert_1.string(format, 'format');
		if (typeof (options) === 'string')
			options = { filename: options };
		assert_1.optionalObject(options, 'options');
		if (options === undefined)
			options = {};
		assert_1.optionalString(options.filename, 'options.filename');
		if (options.filename === undefined)
			options.filename = '(unnamed)';

		assert_1.object(formats$3[format], 'formats[format]');

		try {
			var k = formats$3[format].read(data, options);
			if (k instanceof privateKey)
				k = k.toPublic();
			if (!k.comment)
				k.comment = options.filename;
			return (k);
		} catch (e) {
			if (e.name === 'KeyEncryptedError')
				throw (e);
			throw (new KeyParseError(options.filename, format, e));
		}
	};

	Key.isKey = function (obj, ver) {
		return (utils$3.isCompatible(obj, Key, ver));
	};

	/*
	 * API versions for Key:
	 * [1,0] -- initial ver, may take Signature for createVerify or may not
	 * [1,1] -- added pkcs1, pkcs8 formats
	 * [1,2] -- added auto, ssh-private, openssh formats
	 * [1,3] -- added defaultHashAlgorithm
	 * [1,4] -- added ed support, createDH
	 * [1,5] -- first explicitly tagged version
	 * [1,6] -- changed ed25519 part names
	 * [1,7] -- spki hash types
	 */
	Key.prototype._sshpkApiVersion = [1, 7];

	Key._oldVersionDetect = function (obj) {
		assert_1.func(obj.toBuffer);
		assert_1.func(obj.fingerprint);
		if (obj.createDH)
			return ([1, 4]);
		if (obj.defaultHashAlgorithm)
			return ([1, 3]);
		if (obj.formats['auto'])
			return ([1, 2]);
		if (obj.formats['pkcs1'])
			return ([1, 1]);
		return ([1, 0]);
	};

	// Copyright 2015 Joyent, Inc.









	var lib$5 = {
		/* top-level classes */
		Key: key,
		parseKey: key.parse,
		Fingerprint: fingerprint,
		parseFingerprint: fingerprint.parse,
		Signature: signature$1,
		parseSignature: signature$1.parse,
		PrivateKey: privateKey,
		parsePrivateKey: privateKey.parse,
		generatePrivateKey: privateKey.generate,
		Certificate: certificate,
		parseCertificate: certificate.parse,
		createSelfSignedCertificate: certificate.createSelfSigned,
		createCertificate: certificate.create,
		Identity: identity,
		identityFromDN: identity.parseDN,
		identityForHost: identity.forHost,
		identityForUser: identity.forUser,
		identityForEmail: identity.forEmail,
		identityFromArray: identity.fromArray,

		/* errors */
		FingerprintFormatError: errors$1.FingerprintFormatError,
		InvalidAlgorithmError: errors$1.InvalidAlgorithmError,
		KeyParseError: errors$1.KeyParseError,
		SignatureParseError: errors$1.SignatureParseError,
		KeyEncryptedError: errors$1.KeyEncryptedError,
		CertificateParseError: errors$1.CertificateParseError
	};

	// Copyright 2012 Joyent, Inc.  All rights reserved.





	var HASH_ALGOS$1 = {
	  'sha1': true,
	  'sha256': true,
	  'sha512': true
	};

	var PK_ALGOS$1 = {
	  'rsa': true,
	  'dsa': true,
	  'ecdsa': true
	};

	function HttpSignatureError$2(message, caller) {
	  if (Error.captureStackTrace)
	    Error.captureStackTrace(this, caller || HttpSignatureError$2);

	  this.message = message;
	  this.name = caller.name;
	}
	util__default['default'].inherits(HttpSignatureError$2, Error);

	function InvalidAlgorithmError$2(message) {
	  HttpSignatureError$2.call(this, message, InvalidAlgorithmError$2);
	}
	util__default['default'].inherits(InvalidAlgorithmError$2, HttpSignatureError$2);

	function validateAlgorithm$3(algorithm) {
	  var alg = algorithm.toLowerCase().split('-');

	  if (alg.length !== 2) {
	    throw (new InvalidAlgorithmError$2(alg[0].toUpperCase() + ' is not a ' +
	      'valid algorithm'));
	  }

	  if (alg[0] !== 'hmac' && !PK_ALGOS$1[alg[0]]) {
	    throw (new InvalidAlgorithmError$2(alg[0].toUpperCase() + ' type keys ' +
	      'are not supported'));
	  }

	  if (!HASH_ALGOS$1[alg[1]]) {
	    throw (new InvalidAlgorithmError$2(alg[1].toUpperCase() + ' is not a ' +
	      'supported hash algorithm'));
	  }

	  return (alg);
	}

	///--- API

	var utils$2 = {

	  HASH_ALGOS: HASH_ALGOS$1,
	  PK_ALGOS: PK_ALGOS$1,

	  HttpSignatureError: HttpSignatureError$2,
	  InvalidAlgorithmError: InvalidAlgorithmError$2,

	  validateAlgorithm: validateAlgorithm$3,

	  /**
	   * Converts an OpenSSH public key (rsa only) to a PKCS#8 PEM file.
	   *
	   * The intent of this module is to interoperate with OpenSSL only,
	   * specifically the node crypto module's `verify` method.
	   *
	   * @param {String} key an OpenSSH public key.
	   * @return {String} PEM encoded form of the RSA public key.
	   * @throws {TypeError} on bad input.
	   * @throws {Error} on invalid ssh key formatted data.
	   */
	  sshKeyToPEM: function sshKeyToPEM(key) {
	    assert_1.string(key, 'ssh_key');

	    var k = lib$5.parseKey(key, 'ssh');
	    return (k.toString('pem'));
	  },


	  /**
	   * Generates an OpenSSH fingerprint from an ssh public key.
	   *
	   * @param {String} key an OpenSSH public key.
	   * @return {String} key fingerprint.
	   * @throws {TypeError} on bad input.
	   * @throws {Error} if what you passed doesn't look like an ssh public key.
	   */
	  fingerprint: function fingerprint(key) {
	    assert_1.string(key, 'ssh_key');

	    var k = lib$5.parseKey(key, 'ssh');
	    return (k.fingerprint('md5').toString('hex'));
	  },

	  /**
	   * Converts a PKGCS#8 PEM file to an OpenSSH public key (rsa)
	   *
	   * The reverse of the above function.
	   */
	  pemToRsaSSHKey: function pemToRsaSSHKey(pem, comment) {
	    assert_1.equal('string', typeof (pem), 'typeof pem');

	    var k = lib$5.parseKey(pem, 'pem');
	    k.comment = comment;
	    return (k.toString('ssh'));
	  }
	};

	var HttpSignatureError$1 = utils$2.HttpSignatureError;
	var InvalidAlgorithmError$1 = utils$2.InvalidAlgorithmError;
	var validateAlgorithm$2 = utils$2.validateAlgorithm;

	var State$2 = {
	  New: 0,
	  Params: 1
	};

	var ParamsState = {
	  Name: 0,
	  Quote: 1,
	  Value: 2,
	  Comma: 3
	};


	///--- Specific Errors


	function ExpiredRequestError(message) {
	  HttpSignatureError$1.call(this, message, ExpiredRequestError);
	}
	util__default['default'].inherits(ExpiredRequestError, HttpSignatureError$1);


	function InvalidHeaderError(message) {
	  HttpSignatureError$1.call(this, message, InvalidHeaderError);
	}
	util__default['default'].inherits(InvalidHeaderError, HttpSignatureError$1);


	function InvalidParamsError(message) {
	  HttpSignatureError$1.call(this, message, InvalidParamsError);
	}
	util__default['default'].inherits(InvalidParamsError, HttpSignatureError$1);


	function MissingHeaderError$1(message) {
	  HttpSignatureError$1.call(this, message, MissingHeaderError$1);
	}
	util__default['default'].inherits(MissingHeaderError$1, HttpSignatureError$1);

	function StrictParsingError$1(message) {
	  HttpSignatureError$1.call(this, message, StrictParsingError$1);
	}
	util__default['default'].inherits(StrictParsingError$1, HttpSignatureError$1);

	///--- Exported API

	var parser = {

	  /**
	   * Parses the 'Authorization' header out of an http.ServerRequest object.
	   *
	   * Note that this API will fully validate the Authorization header, and throw
	   * on any error.  It will not however check the signature, or the keyId format
	   * as those are specific to your environment.  You can use the options object
	   * to pass in extra constraints.
	   *
	   * As a response object you can expect this:
	   *
	   *     {
	   *       "scheme": "Signature",
	   *       "params": {
	   *         "keyId": "foo",
	   *         "algorithm": "rsa-sha256",
	   *         "headers": [
	   *           "date" or "x-date",
	   *           "digest"
	   *         ],
	   *         "signature": "base64"
	   *       },
	   *       "signingString": "ready to be passed to crypto.verify()"
	   *     }
	   *
	   * @param {Object} request an http.ServerRequest.
	   * @param {Object} options an optional options object with:
	   *                   - clockSkew: allowed clock skew in seconds (default 300).
	   *                   - headers: required header names (def: date or x-date)
	   *                   - algorithms: algorithms to support (default: all).
	   *                   - strict: should enforce latest spec parsing
	   *                             (default: false).
	   * @return {Object} parsed out object (see above).
	   * @throws {TypeError} on invalid input.
	   * @throws {InvalidHeaderError} on an invalid Authorization header error.
	   * @throws {InvalidParamsError} if the params in the scheme are invalid.
	   * @throws {MissingHeaderError} if the params indicate a header not present,
	   *                              either in the request headers from the params,
	   *                              or not in the params from a required header
	   *                              in options.
	   * @throws {StrictParsingError} if old attributes are used in strict parsing
	   *                              mode.
	   * @throws {ExpiredRequestError} if the value of date or x-date exceeds skew.
	   */
	  parseRequest: function parseRequest(request, options) {
	    assert_1.object(request, 'request');
	    assert_1.object(request.headers, 'request.headers');
	    if (options === undefined) {
	      options = {};
	    }
	    if (options.headers === undefined) {
	      options.headers = [request.headers['x-date'] ? 'x-date' : 'date'];
	    }
	    assert_1.object(options, 'options');
	    assert_1.arrayOfString(options.headers, 'options.headers');
	    assert_1.optionalFinite(options.clockSkew, 'options.clockSkew');

	    var authzHeaderName = options.authorizationHeaderName || 'authorization';

	    if (!request.headers[authzHeaderName]) {
	      throw new MissingHeaderError$1('no ' + authzHeaderName + ' header ' +
	                                   'present in the request');
	    }

	    options.clockSkew = options.clockSkew || 300;


	    var i = 0;
	    var state = State$2.New;
	    var substate = ParamsState.Name;
	    var tmpName = '';
	    var tmpValue = '';

	    var parsed = {
	      scheme: '',
	      params: {},
	      signingString: ''
	    };

	    var authz = request.headers[authzHeaderName];
	    for (i = 0; i < authz.length; i++) {
	      var c = authz.charAt(i);

	      switch (Number(state)) {

	      case State$2.New:
	        if (c !== ' ') parsed.scheme += c;
	        else state = State$2.Params;
	        break;

	      case State$2.Params:
	        switch (Number(substate)) {

	        case ParamsState.Name:
	          var code = c.charCodeAt(0);
	          // restricted name of A-Z / a-z
	          if ((code >= 0x41 && code <= 0x5a) || // A-Z
	              (code >= 0x61 && code <= 0x7a)) { // a-z
	            tmpName += c;
	          } else if (c === '=') {
	            if (tmpName.length === 0)
	              throw new InvalidHeaderError('bad param format');
	            substate = ParamsState.Quote;
	          } else {
	            throw new InvalidHeaderError('bad param format');
	          }
	          break;

	        case ParamsState.Quote:
	          if (c === '"') {
	            tmpValue = '';
	            substate = ParamsState.Value;
	          } else {
	            throw new InvalidHeaderError('bad param format');
	          }
	          break;

	        case ParamsState.Value:
	          if (c === '"') {
	            parsed.params[tmpName] = tmpValue;
	            substate = ParamsState.Comma;
	          } else {
	            tmpValue += c;
	          }
	          break;

	        case ParamsState.Comma:
	          if (c === ',') {
	            tmpName = '';
	            substate = ParamsState.Name;
	          } else {
	            throw new InvalidHeaderError('bad param format');
	          }
	          break;

	        default:
	          throw new Error('Invalid substate');
	        }
	        break;

	      default:
	        throw new Error('Invalid substate');
	      }

	    }

	    if (!parsed.params.headers || parsed.params.headers === '') {
	      if (request.headers['x-date']) {
	        parsed.params.headers = ['x-date'];
	      } else {
	        parsed.params.headers = ['date'];
	      }
	    } else {
	      parsed.params.headers = parsed.params.headers.split(' ');
	    }

	    // Minimally validate the parsed object
	    if (!parsed.scheme || parsed.scheme !== 'Signature')
	      throw new InvalidHeaderError('scheme was not "Signature"');

	    if (!parsed.params.keyId)
	      throw new InvalidHeaderError('keyId was not specified');

	    if (!parsed.params.algorithm)
	      throw new InvalidHeaderError('algorithm was not specified');

	    if (!parsed.params.signature)
	      throw new InvalidHeaderError('signature was not specified');

	    // Check the algorithm against the official list
	    parsed.params.algorithm = parsed.params.algorithm.toLowerCase();
	    try {
	      validateAlgorithm$2(parsed.params.algorithm);
	    } catch (e) {
	      if (e instanceof InvalidAlgorithmError$1)
	        throw (new InvalidParamsError(parsed.params.algorithm + ' is not ' +
	          'supported'));
	      else
	        throw (e);
	    }

	    // Build the signingString
	    for (i = 0; i < parsed.params.headers.length; i++) {
	      var h = parsed.params.headers[i].toLowerCase();
	      parsed.params.headers[i] = h;

	      if (h === 'request-line') {
	        if (!options.strict) {
	          /*
	           * We allow headers from the older spec drafts if strict parsing isn't
	           * specified in options.
	           */
	          parsed.signingString +=
	            request.method + ' ' + request.url + ' HTTP/' + request.httpVersion;
	        } else {
	          /* Strict parsing doesn't allow older draft headers. */
	          throw (new StrictParsingError$1('request-line is not a valid header ' +
	            'with strict parsing enabled.'));
	        }
	      } else if (h === '(request-target)') {
	        parsed.signingString +=
	          '(request-target): ' + request.method.toLowerCase() + ' ' +
	          request.url;
	      } else {
	        var value = request.headers[h];
	        if (value === undefined)
	          throw new MissingHeaderError$1(h + ' was not in the request');
	        parsed.signingString += h + ': ' + value;
	      }

	      if ((i + 1) < parsed.params.headers.length)
	        parsed.signingString += '\n';
	    }

	    // Check against the constraints
	    var date;
	    if (request.headers.date || request.headers['x-date']) {
	        if (request.headers['x-date']) {
	          date = new Date(request.headers['x-date']);
	        } else {
	          date = new Date(request.headers.date);
	        }
	      var now = new Date();
	      var skew = Math.abs(now.getTime() - date.getTime());

	      if (skew > options.clockSkew * 1000) {
	        throw new ExpiredRequestError('clock skew of ' +
	                                      (skew / 1000) +
	                                      's was greater than ' +
	                                      options.clockSkew + 's');
	      }
	    }

	    options.headers.forEach(function (hdr) {
	      // Remember that we already checked any headers in the params
	      // were in the request, so if this passes we're good.
	      if (parsed.params.headers.indexOf(hdr.toLowerCase()) < 0)
	        throw new MissingHeaderError$1(hdr + ' was not a signed header');
	    });

	    if (options.algorithms) {
	      if (options.algorithms.indexOf(parsed.params.algorithm) === -1)
	        throw new InvalidParamsError(parsed.params.algorithm +
	                                     ' is not a supported algorithm');
	    }

	    parsed.algorithm = parsed.params.algorithm.toUpperCase();
	    parsed.keyId = parsed.params.keyId;
	    return parsed;
	  }

	};

	/*
	 * extsprintf.js: extended POSIX-style sprintf
	 */

	/*
	 * Public interface
	 */
	var sprintf$2 = jsSprintf;
	var printf = jsPrintf;
	var fprintf = jsFprintf;

	/*
	 * Stripped down version of s[n]printf(3c).  We make a best effort to throw an
	 * exception when given a format string we don't understand, rather than
	 * ignoring it, so that we won't break existing programs if/when we go implement
	 * the rest of this.
	 *
	 * This implementation currently supports specifying
	 *	- field alignment ('-' flag),
	 * 	- zero-pad ('0' flag)
	 *	- always show numeric sign ('+' flag),
	 *	- field width
	 *	- conversions for strings, decimal integers, and floats (numbers).
	 *	- argument size specifiers.  These are all accepted but ignored, since
	 *	  Javascript has no notion of the physical size of an argument.
	 *
	 * Everything else is currently unsupported, most notably precision, unsigned
	 * numbers, non-decimal numbers, and characters.
	 */
	function jsSprintf(fmt)
	{
		var regex = [
		    '([^%]*)',				/* normal text */
		    '%',				/* start of format */
		    '([\'\\-+ #0]*?)',			/* flags (optional) */
		    '([1-9]\\d*)?',			/* width (optional) */
		    '(\\.([1-9]\\d*))?',		/* precision (optional) */
		    '[lhjztL]*?',			/* length mods (ignored) */
		    '([diouxXfFeEgGaAcCsSp%jr])'	/* conversion */
		].join('');

		var re = new RegExp(regex);
		var args = Array.prototype.slice.call(arguments, 1);
		var flags, width, precision, conversion;
		var left, pad, sign, arg, match;
		var ret = '';
		var argn = 1;

		assert__default['default'].equal('string', typeof (fmt));

		while ((match = re.exec(fmt)) !== null) {
			ret += match[1];
			fmt = fmt.substring(match[0].length);

			flags = match[2] || '';
			width = match[3] || 0;
			precision = match[4] || '';
			conversion = match[6];
			left = false;
			sign = false;
			pad = ' ';

			if (conversion == '%') {
				ret += '%';
				continue;
			}

			if (args.length === 0)
				throw (new Error('too few args to sprintf'));

			arg = args.shift();
			argn++;

			if (flags.match(/[\' #]/))
				throw (new Error(
				    'unsupported flags: ' + flags));

			if (precision.length > 0)
				throw (new Error(
				    'non-zero precision not supported'));

			if (flags.match(/-/))
				left = true;

			if (flags.match(/0/))
				pad = '0';

			if (flags.match(/\+/))
				sign = true;

			switch (conversion) {
			case 's':
				if (arg === undefined || arg === null)
					throw (new Error('argument ' + argn +
					    ': attempted to print undefined or null ' +
					    'as a string'));
				ret += doPad(pad, width, left, arg.toString());
				break;

			case 'd':
				arg = Math.floor(arg);
				/*jsl:fallthru*/
			case 'f':
				sign = sign && arg > 0 ? '+' : '';
				ret += sign + doPad(pad, width, left,
				    arg.toString());
				break;

			case 'x':
				ret += doPad(pad, width, left, arg.toString(16));
				break;

			case 'j': /* non-standard */
				if (width === 0)
					width = 10;
				ret += util__default['default'].inspect(arg, false, width);
				break;

			case 'r': /* non-standard */
				ret += dumpException(arg);
				break;

			default:
				throw (new Error('unsupported conversion: ' +
				    conversion));
			}
		}

		ret += fmt;
		return (ret);
	}

	function jsPrintf() {
		var args = Array.prototype.slice.call(arguments);
		args.unshift(process.stdout);
		jsFprintf.apply(null, args);
	}

	function jsFprintf(stream) {
		var args = Array.prototype.slice.call(arguments, 1);
		return (stream.write(jsSprintf.apply(this, args)));
	}

	function doPad(chr, width, left, str)
	{
		var ret = str;

		while (ret.length < width) {
			if (left)
				ret += chr;
			else
				ret = chr + ret;
		}

		return (ret);
	}

	/*
	 * This function dumps long stack traces for exceptions having a cause() method.
	 * See node-verror for an example.
	 */
	function dumpException(ex)
	{
		var ret;

		if (!(ex instanceof Error))
			throw (new Error(jsSprintf('invalid type for %%r: %j', ex)));

		/* Note that V8 prepends "ex.stack" with ex.toString(). */
		ret = 'EXCEPTION: ' + ex.constructor.name + ': ' + ex.stack;

		if (ex.cause && typeof (ex.cause) === 'function') {
			var cex = ex.cause();
			if (cex) {
				ret += '\nCaused by: ' + dumpException(cex);
			}
		}

		return (ret);
	}

	var extsprintf = {
		sprintf: sprintf$2,
		printf: printf,
		fprintf: fprintf
	};

	/*
	 * verror.js: richer JavaScript errors
	 */

	var mod_isError = util$6.isError;
	var sprintf$1 = extsprintf.sprintf;

	/*
	 * Public interface
	 */

	/* So you can 'var VError = require('verror')' */
	var verror = VError;
	/* For compatibility */
	VError.VError = VError;
	/* Other exported classes */
	VError.SError = SError;
	VError.WError = WError;
	VError.MultiError = MultiError;

	/*
	 * Common function used to parse constructor arguments for VError, WError, and
	 * SError.  Named arguments to this function:
	 *
	 *     strict		force strict interpretation of sprintf arguments, even
	 *     			if the options in "argv" don't say so
	 *
	 *     argv		error's constructor arguments, which are to be
	 *     			interpreted as described in README.md.  For quick
	 *     			reference, "argv" has one of the following forms:
	 *
	 *          [ sprintf_args... ]           (argv[0] is a string)
	 *          [ cause, sprintf_args... ]    (argv[0] is an Error)
	 *          [ options, sprintf_args... ]  (argv[0] is an object)
	 *
	 * This function normalizes these forms, producing an object with the following
	 * properties:
	 *
	 *    options           equivalent to "options" in third form.  This will never
	 *    			be a direct reference to what the caller passed in
	 *    			(i.e., it may be a shallow copy), so it can be freely
	 *    			modified.
	 *
	 *    shortmessage      result of sprintf(sprintf_args), taking options.strict
	 *    			into account as described in README.md.
	 */
	function parseConstructorArguments(args)
	{
		var argv, options, sprintf_args, shortmessage, k;

		assert_1.object(args, 'args');
		assert_1.bool(args.strict, 'args.strict');
		assert_1.array(args.argv, 'args.argv');
		argv = args.argv;

		/*
		 * First, figure out which form of invocation we've been given.
		 */
		if (argv.length === 0) {
			options = {};
			sprintf_args = [];
		} else if (mod_isError(argv[0])) {
			options = { 'cause': argv[0] };
			sprintf_args = argv.slice(1);
		} else if (typeof (argv[0]) === 'object') {
			options = {};
			for (k in argv[0]) {
				options[k] = argv[0][k];
			}
			sprintf_args = argv.slice(1);
		} else {
			assert_1.string(argv[0],
			    'first argument to VError, SError, or WError ' +
			    'constructor must be a string, object, or Error');
			options = {};
			sprintf_args = argv;
		}

		/*
		 * Now construct the error's message.
		 *
		 * extsprintf (which we invoke here with our caller's arguments in order
		 * to construct this Error's message) is strict in its interpretation of
		 * values to be processed by the "%s" specifier.  The value passed to
		 * extsprintf must actually be a string or something convertible to a
		 * String using .toString().  Passing other values (notably "null" and
		 * "undefined") is considered a programmer error.  The assumption is
		 * that if you actually want to print the string "null" or "undefined",
		 * then that's easy to do that when you're calling extsprintf; on the
		 * other hand, if you did NOT want that (i.e., there's actually a bug
		 * where the program assumes some variable is non-null and tries to
		 * print it, which might happen when constructing a packet or file in
		 * some specific format), then it's better to stop immediately than
		 * produce bogus output.
		 *
		 * However, sometimes the bug is only in the code calling VError, and a
		 * programmer might prefer to have the error message contain "null" or
		 * "undefined" rather than have the bug in the error path crash the
		 * program (making the first bug harder to identify).  For that reason,
		 * by default VError converts "null" or "undefined" arguments to their
		 * string representations and passes those to extsprintf.  Programmers
		 * desiring the strict behavior can use the SError class or pass the
		 * "strict" option to the VError constructor.
		 */
		assert_1.object(options);
		if (!options.strict && !args.strict) {
			sprintf_args = sprintf_args.map(function (a) {
				return (a === null ? 'null' :
				    a === undefined ? 'undefined' : a);
			});
		}

		if (sprintf_args.length === 0) {
			shortmessage = '';
		} else {
			shortmessage = sprintf$1.apply(null, sprintf_args);
		}

		return ({
		    'options': options,
		    'shortmessage': shortmessage
		});
	}

	/*
	 * See README.md for reference documentation.
	 */
	function VError()
	{
		var args, obj, parsed, cause, ctor, message, k;

		args = Array.prototype.slice.call(arguments, 0);

		/*
		 * This is a regrettable pattern, but JavaScript's built-in Error class
		 * is defined to work this way, so we allow the constructor to be called
		 * without "new".
		 */
		if (!(this instanceof VError)) {
			obj = Object.create(VError.prototype);
			VError.apply(obj, arguments);
			return (obj);
		}

		/*
		 * For convenience and backwards compatibility, we support several
		 * different calling forms.  Normalize them here.
		 */
		parsed = parseConstructorArguments({
		    'argv': args,
		    'strict': false
		});

		/*
		 * If we've been given a name, apply it now.
		 */
		if (parsed.options.name) {
			assert_1.string(parsed.options.name,
			    'error\'s "name" must be a string');
			this.name = parsed.options.name;
		}

		/*
		 * For debugging, we keep track of the original short message (attached
		 * this Error particularly) separately from the complete message (which
		 * includes the messages of our cause chain).
		 */
		this.jse_shortmsg = parsed.shortmessage;
		message = parsed.shortmessage;

		/*
		 * If we've been given a cause, record a reference to it and update our
		 * message appropriately.
		 */
		cause = parsed.options.cause;
		if (cause) {
			assert_1.ok(mod_isError(cause), 'cause is not an Error');
			this.jse_cause = cause;

			if (!parsed.options.skipCauseMessage) {
				message += ': ' + cause.message;
			}
		}

		/*
		 * If we've been given an object with properties, shallow-copy that
		 * here.  We don't want to use a deep copy in case there are non-plain
		 * objects here, but we don't want to use the original object in case
		 * the caller modifies it later.
		 */
		this.jse_info = {};
		if (parsed.options.info) {
			for (k in parsed.options.info) {
				this.jse_info[k] = parsed.options.info[k];
			}
		}

		this.message = message;
		Error.call(this, message);

		if (Error.captureStackTrace) {
			ctor = parsed.options.constructorOpt || this.constructor;
			Error.captureStackTrace(this, ctor);
		}

		return (this);
	}

	util__default['default'].inherits(VError, Error);
	VError.prototype.name = 'VError';

	VError.prototype.toString = function ve_toString()
	{
		var str = (this.hasOwnProperty('name') && this.name ||
			this.constructor.name || this.constructor.prototype.name);
		if (this.message)
			str += ': ' + this.message;

		return (str);
	};

	/*
	 * This method is provided for compatibility.  New callers should use
	 * VError.cause() instead.  That method also uses the saner `null` return value
	 * when there is no cause.
	 */
	VError.prototype.cause = function ve_cause()
	{
		var cause = VError.cause(this);
		return (cause === null ? undefined : cause);
	};

	/*
	 * Static methods
	 *
	 * These class-level methods are provided so that callers can use them on
	 * instances of Errors that are not VErrors.  New interfaces should be provided
	 * only using static methods to eliminate the class of programming mistake where
	 * people fail to check whether the Error object has the corresponding methods.
	 */

	VError.cause = function (err)
	{
		assert_1.ok(mod_isError(err), 'err must be an Error');
		return (mod_isError(err.jse_cause) ? err.jse_cause : null);
	};

	VError.info = function (err)
	{
		var rv, cause, k;

		assert_1.ok(mod_isError(err), 'err must be an Error');
		cause = VError.cause(err);
		if (cause !== null) {
			rv = VError.info(cause);
		} else {
			rv = {};
		}

		if (typeof (err.jse_info) == 'object' && err.jse_info !== null) {
			for (k in err.jse_info) {
				rv[k] = err.jse_info[k];
			}
		}

		return (rv);
	};

	VError.findCauseByName = function (err, name)
	{
		var cause;

		assert_1.ok(mod_isError(err), 'err must be an Error');
		assert_1.string(name, 'name');
		assert_1.ok(name.length > 0, 'name cannot be empty');

		for (cause = err; cause !== null; cause = VError.cause(cause)) {
			assert_1.ok(mod_isError(cause));
			if (cause.name == name) {
				return (cause);
			}
		}

		return (null);
	};

	VError.hasCauseWithName = function (err, name)
	{
		return (VError.findCauseByName(err, name) !== null);
	};

	VError.fullStack = function (err)
	{
		assert_1.ok(mod_isError(err), 'err must be an Error');

		var cause = VError.cause(err);

		if (cause) {
			return (err.stack + '\ncaused by: ' + VError.fullStack(cause));
		}

		return (err.stack);
	};

	VError.errorFromList = function (errors)
	{
		assert_1.arrayOfObject(errors, 'errors');

		if (errors.length === 0) {
			return (null);
		}

		errors.forEach(function (e) {
			assert_1.ok(mod_isError(e));
		});

		if (errors.length == 1) {
			return (errors[0]);
		}

		return (new MultiError(errors));
	};

	VError.errorForEach = function (err, func)
	{
		assert_1.ok(mod_isError(err), 'err must be an Error');
		assert_1.func(func, 'func');

		if (err instanceof MultiError) {
			err.errors().forEach(function iterError(e) { func(e); });
		} else {
			func(err);
		}
	};


	/*
	 * SError is like VError, but stricter about types.  You cannot pass "null" or
	 * "undefined" as string arguments to the formatter.
	 */
	function SError()
	{
		var args, obj, parsed, options;

		args = Array.prototype.slice.call(arguments, 0);
		if (!(this instanceof SError)) {
			obj = Object.create(SError.prototype);
			SError.apply(obj, arguments);
			return (obj);
		}

		parsed = parseConstructorArguments({
		    'argv': args,
		    'strict': true
		});

		options = parsed.options;
		VError.call(this, options, '%s', parsed.shortmessage);

		return (this);
	}

	/*
	 * We don't bother setting SError.prototype.name because once constructed,
	 * SErrors are just like VErrors.
	 */
	util__default['default'].inherits(SError, VError);


	/*
	 * Represents a collection of errors for the purpose of consumers that generally
	 * only deal with one error.  Callers can extract the individual errors
	 * contained in this object, but may also just treat it as a normal single
	 * error, in which case a summary message will be printed.
	 */
	function MultiError(errors)
	{
		assert_1.array(errors, 'list of errors');
		assert_1.ok(errors.length > 0, 'must be at least one error');
		this.ase_errors = errors;

		VError.call(this, {
		    'cause': errors[0]
		}, 'first of %d error%s', errors.length, errors.length == 1 ? '' : 's');
	}

	util__default['default'].inherits(MultiError, VError);
	MultiError.prototype.name = 'MultiError';

	MultiError.prototype.errors = function me_errors()
	{
		return (this.ase_errors.slice(0));
	};


	/*
	 * See README.md for reference details.
	 */
	function WError()
	{
		var args, obj, parsed, options;

		args = Array.prototype.slice.call(arguments, 0);
		if (!(this instanceof WError)) {
			obj = Object.create(WError.prototype);
			WError.apply(obj, args);
			return (obj);
		}

		parsed = parseConstructorArguments({
		    'argv': args,
		    'strict': false
		});

		options = parsed.options;
		options['skipCauseMessage'] = true;
		VError.call(this, options, '%s', parsed.shortmessage);

		return (this);
	}

	util__default['default'].inherits(WError, VError);
	WError.prototype.name = 'WError';

	WError.prototype.toString = function we_toString()
	{
		var str = (this.hasOwnProperty('name') && this.name ||
			this.constructor.name || this.constructor.prototype.name);
		if (this.message)
			str += ': ' + this.message;
		if (this.jse_cause && this.jse_cause.message)
			str += '; caused by ' + this.jse_cause.toString();

		return (str);
	};

	/*
	 * For purely historical reasons, WError's cause() function allows you to set
	 * the cause.
	 */
	WError.prototype.cause = function we_cause(c)
	{
		if (mod_isError(c))
			this.jse_cause = c;

		return (this.jse_cause);
	};

	/**
	 * JSONSchema Validator - Validates JavaScript objects using JSON Schemas
	 *	(http://www.json.com/json-schema-proposal/)
	 *
	 * Copyright (c) 2007 Kris Zyp SitePen (www.sitepen.com)
	 * Licensed under the MIT (MIT-LICENSE.txt) license.
	To use the validator call the validate function with an instance object and an optional schema object.
	If a schema is provided, it will be used to validate. If the instance object refers to a schema (self-validating),
	that schema will be used to validate and the schema parameter is not necessary (if both exist,
	both validations will occur).
	The validate method will return an array of validation errors. If there are no errors, then an
	empty list will be returned. A validation error will have two properties:
	"property" which indicates which property had the error
	"message" which indicates what the error was
	 */

	var validate$4 = createCommonjsModule(function (module) {
	(function (root, factory) {
	    if (module.exports) {
	        // Node. Does not work with strict CommonJS, but
	        // only CommonJS-like environments that support module.exports,
	        // like Node.
	        module.exports = factory();
	    } else {
	        // Browser globals
	        root.jsonSchema = factory();
	    }
	}(commonjsGlobal, function () {// setup primitive classes to be JSON Schema types
	var exports = validate;
	exports.Integer = {type:"integer"};
	var primitiveConstructors = {
		String: String,
		Boolean: Boolean,
		Number: Number,
		Object: Object,
		Array: Array,
		Date: Date
	};
	exports.validate = validate;
	function validate(/*Any*/instance,/*Object*/schema) {
			// Summary:
			//  	To use the validator call JSONSchema.validate with an instance object and an optional schema object.
			// 		If a schema is provided, it will be used to validate. If the instance object refers to a schema (self-validating),
			// 		that schema will be used to validate and the schema parameter is not necessary (if both exist,
			// 		both validations will occur).
			// 		The validate method will return an object with two properties:
			// 			valid: A boolean indicating if the instance is valid by the schema
			// 			errors: An array of validation errors. If there are no errors, then an
			// 					empty list will be returned. A validation error will have two properties:
			// 						property: which indicates which property had the error
			// 						message: which indicates what the error was
			//
			return validate(instance, schema, {changing: false});//, coerce: false, existingOnly: false});
		}exports.checkPropertyChange = function(/*Any*/value,/*Object*/schema, /*String*/property) {
			// Summary:
			// 		The checkPropertyChange method will check to see if an value can legally be in property with the given schema
			// 		This is slightly different than the validate method in that it will fail if the schema is readonly and it will
			// 		not check for self-validation, it is assumed that the passed in value is already internally valid.
			// 		The checkPropertyChange method will return the same object type as validate, see JSONSchema.validate for
			// 		information.
			//
			return validate(value, schema, {changing: property || "property"});
		};
	var validate = exports._validate = function(/*Any*/instance,/*Object*/schema,/*Object*/options) {

		if (!options) options = {};
		var _changing = options.changing;

		function getType(schema){
			return schema.type || (primitiveConstructors[schema.name] == schema && schema.name.toLowerCase());
		}
		var errors = [];
		// validate a value against a property definition
		function checkProp(value, schema, path,i){

			var l;
			path += path ? typeof i == 'number' ? '[' + i + ']' : typeof i == 'undefined' ? '' : '.' + i : i;
			function addError(message){
				errors.push({property:path,message:message});
			}

			if((typeof schema != 'object' || schema instanceof Array) && (path || typeof schema != 'function') && !(schema && getType(schema))){
				if(typeof schema == 'function'){
					if(!(value instanceof schema)){
						addError("is not an instance of the class/constructor " + schema.name);
					}
				}else if(schema){
					addError("Invalid schema/property definition " + schema);
				}
				return null;
			}
			if(_changing && schema.readonly){
				addError("is a readonly field, it can not be changed");
			}
			if(schema['extends']){ // if it extends another schema, it must pass that schema as well
				checkProp(value,schema['extends'],path,i);
			}
			// validate a value against a type definition
			function checkType(type,value){
				if(type){
					if(typeof type == 'string' && type != 'any' &&
							(type == 'null' ? value !== null : typeof value != type) &&
							!(value instanceof Array && type == 'array') &&
							!(value instanceof Date && type == 'date') &&
							!(type == 'integer' && value%1===0)){
						return [{property:path,message:(typeof value) + " value found, but a " + type + " is required"}];
					}
					if(type instanceof Array){
						var unionErrors=[];
						for(var j = 0; j < type.length; j++){ // a union type
							if(!(unionErrors=checkType(type[j],value)).length){
								break;
							}
						}
						if(unionErrors.length){
							return unionErrors;
						}
					}else if(typeof type == 'object'){
						var priorErrors = errors;
						errors = [];
						checkProp(value,type,path);
						var theseErrors = errors;
						errors = priorErrors;
						return theseErrors;
					}
				}
				return [];
			}
			if(value === undefined){
				if(schema.required){
					addError("is missing and it is required");
				}
			}else {
				errors = errors.concat(checkType(getType(schema),value));
				if(schema.disallow && !checkType(schema.disallow,value).length){
					addError(" disallowed value was matched");
				}
				if(value !== null){
					if(value instanceof Array){
						if(schema.items){
							var itemsIsArray = schema.items instanceof Array;
							var propDef = schema.items;
							for (i = 0, l = value.length; i < l; i += 1) {
								if (itemsIsArray)
									propDef = schema.items[i];
								if (options.coerce)
									value[i] = options.coerce(value[i], propDef);
								errors.concat(checkProp(value[i],propDef,path,i));
							}
						}
						if(schema.minItems && value.length < schema.minItems){
							addError("There must be a minimum of " + schema.minItems + " in the array");
						}
						if(schema.maxItems && value.length > schema.maxItems){
							addError("There must be a maximum of " + schema.maxItems + " in the array");
						}
					}else if(schema.properties || schema.additionalProperties){
						errors.concat(checkObj(value, schema.properties, path, schema.additionalProperties));
					}
					if(schema.pattern && typeof value == 'string' && !value.match(schema.pattern)){
						addError("does not match the regex pattern " + schema.pattern);
					}
					if(schema.maxLength && typeof value == 'string' && value.length > schema.maxLength){
						addError("may only be " + schema.maxLength + " characters long");
					}
					if(schema.minLength && typeof value == 'string' && value.length < schema.minLength){
						addError("must be at least " + schema.minLength + " characters long");
					}
					if(typeof schema.minimum !== undefined && typeof value == typeof schema.minimum &&
							schema.minimum > value){
						addError("must have a minimum value of " + schema.minimum);
					}
					if(typeof schema.maximum !== undefined && typeof value == typeof schema.maximum &&
							schema.maximum < value){
						addError("must have a maximum value of " + schema.maximum);
					}
					if(schema['enum']){
						var enumer = schema['enum'];
						l = enumer.length;
						var found;
						for(var j = 0; j < l; j++){
							if(enumer[j]===value){
								found=1;
								break;
							}
						}
						if(!found){
							addError("does not have a value in the enumeration " + enumer.join(", "));
						}
					}
					if(typeof schema.maxDecimal == 'number' &&
						(value.toString().match(new RegExp("\\.[0-9]{" + (schema.maxDecimal + 1) + ",}")))){
						addError("may only have " + schema.maxDecimal + " digits of decimal places");
					}
				}
			}
			return null;
		}
		// validate an object against a schema
		function checkObj(instance,objTypeDef,path,additionalProp){

			if(typeof objTypeDef =='object'){
				if(typeof instance != 'object' || instance instanceof Array){
					errors.push({property:path,message:"an object is required"});
				}
				
				for(var i in objTypeDef){ 
					if(objTypeDef.hasOwnProperty(i)){
						var value = instance[i];
						// skip _not_ specified properties
						if (value === undefined && options.existingOnly) continue;
						var propDef = objTypeDef[i];
						// set default
						if(value === undefined && propDef["default"]){
							value = instance[i] = propDef["default"];
						}
						if(options.coerce && i in instance){
							value = instance[i] = options.coerce(value, propDef);
						}
						checkProp(value,propDef,path,i);
					}
				}
			}
			for(i in instance){
				if(instance.hasOwnProperty(i) && !(i.charAt(0) == '_' && i.charAt(1) == '_') && objTypeDef && !objTypeDef[i] && additionalProp===false){
					if (options.filter) {
						delete instance[i];
						continue;
					} else {
						errors.push({property:path,message:(typeof value) + "The property " + i +
							" is not defined in the schema and the schema does not allow additional properties"});
					}
				}
				var requires = objTypeDef && objTypeDef[i] && objTypeDef[i].requires;
				if(requires && !(requires in instance)){
					errors.push({property:path,message:"the presence of the property " + i + " requires that " + requires + " also be present"});
				}
				value = instance[i];
				if(additionalProp && (!(objTypeDef && typeof objTypeDef == 'object') || !(i in objTypeDef))){
					if(options.coerce){
						value = instance[i] = options.coerce(value, additionalProp);
					}
					checkProp(value,additionalProp,path,i);
				}
				if(!_changing && value && value.$schema){
					errors = errors.concat(checkProp(value,value.$schema,path,i));
				}
			}
			return errors;
		}
		if(schema){
			checkProp(instance,schema,'',_changing || '');
		}
		if(!_changing && instance && instance.$schema){
			checkProp(instance,instance.$schema,'','');
		}
		return {valid:!errors.length,errors:errors};
	};
	exports.mustBeValid = function(result){
		//	summary:
		//		This checks to ensure that the result is valid and will throw an appropriate error message if it is not
		// result: the result returned from checkPropertyChange or validate
		if(!result.valid){
			throw new TypeError(result.errors.map(function(error){return "for property " + error.property + ': ' + error.message;}).join(", \n"));
		}
	};

	return exports;
	}));
	});

	/*
	 * lib/jsprim.js: utilities for primitive JavaScript types
	 */

	/*
	 * Public interface
	 */
	var deepCopy_1 = deepCopy;
	var deepEqual_1 = deepEqual;
	var isEmpty_1 = isEmpty;
	var hasKey_1 = hasKey;
	var forEachKey_1 = forEachKey;
	var pluck_1 = pluck;
	var flattenObject_1 = flattenObject;
	var flattenIter_1 = flattenIter;
	var validateJsonObject = validateJsonObjectJS;
	var validateJsonObjectJS_1 = validateJsonObjectJS;
	var randElt_1 = randElt;
	var extraProperties_1 = extraProperties;
	var mergeObjects_1 = mergeObjects;

	var startsWith_1 = startsWith$2;
	var endsWith_1 = endsWith;

	var parseInteger_1 = parseInteger;

	var iso8601_1 = iso8601;
	var rfc1123_1 = rfc1123;
	var parseDateTime_1 = parseDateTime;

	var hrtimediff = hrtimeDiff;
	var hrtimeDiff_1 = hrtimeDiff;
	var hrtimeAccum_1 = hrtimeAccum;
	var hrtimeAdd_1 = hrtimeAdd;
	var hrtimeNanosec_1 = hrtimeNanosec;
	var hrtimeMicrosec_1 = hrtimeMicrosec;
	var hrtimeMillisec_1 = hrtimeMillisec;


	/*
	 * Deep copy an acyclic *basic* Javascript object.  This only handles basic
	 * scalars (strings, numbers, booleans) and arbitrarily deep arrays and objects
	 * containing these.  This does *not* handle instances of other classes.
	 */
	function deepCopy(obj)
	{
		var ret, key;
		var marker = '__deepCopy';

		if (obj && obj[marker])
			throw (new Error('attempted deep copy of cyclic object'));

		if (obj && obj.constructor == Object) {
			ret = {};
			obj[marker] = true;

			for (key in obj) {
				if (key == marker)
					continue;

				ret[key] = deepCopy(obj[key]);
			}

			delete (obj[marker]);
			return (ret);
		}

		if (obj && obj.constructor == Array) {
			ret = [];
			obj[marker] = true;

			for (key = 0; key < obj.length; key++)
				ret.push(deepCopy(obj[key]));

			delete (obj[marker]);
			return (ret);
		}

		/*
		 * It must be a primitive type -- just return it.
		 */
		return (obj);
	}

	function deepEqual(obj1, obj2)
	{
		if (typeof (obj1) != typeof (obj2))
			return (false);

		if (obj1 === null || obj2 === null || typeof (obj1) != 'object')
			return (obj1 === obj2);

		if (obj1.constructor != obj2.constructor)
			return (false);

		var k;
		for (k in obj1) {
			if (!obj2.hasOwnProperty(k))
				return (false);

			if (!deepEqual(obj1[k], obj2[k]))
				return (false);
		}

		for (k in obj2) {
			if (!obj1.hasOwnProperty(k))
				return (false);
		}

		return (true);
	}

	function isEmpty(obj)
	{
		var key;
		for (key in obj)
			return (false);
		return (true);
	}

	function hasKey(obj, key)
	{
		assert_1.equal(typeof (key), 'string');
		return (Object.prototype.hasOwnProperty.call(obj, key));
	}

	function forEachKey(obj, callback)
	{
		for (var key in obj) {
			if (hasKey(obj, key)) {
				callback(key, obj[key]);
			}
		}
	}

	function pluck(obj, key)
	{
		assert_1.equal(typeof (key), 'string');
		return (pluckv(obj, key));
	}

	function pluckv(obj, key)
	{
		if (obj === null || typeof (obj) !== 'object')
			return (undefined);

		if (obj.hasOwnProperty(key))
			return (obj[key]);

		var i = key.indexOf('.');
		if (i == -1)
			return (undefined);

		var key1 = key.substr(0, i);
		if (!obj.hasOwnProperty(key1))
			return (undefined);

		return (pluckv(obj[key1], key.substr(i + 1)));
	}

	/*
	 * Invoke callback(row) for each entry in the array that would be returned by
	 * flattenObject(data, depth).  This is just like flattenObject(data,
	 * depth).forEach(callback), except that the intermediate array is never
	 * created.
	 */
	function flattenIter(data, depth, callback)
	{
		doFlattenIter(data, depth, [], callback);
	}

	function doFlattenIter(data, depth, accum, callback)
	{
		var each;
		var key;

		if (depth === 0) {
			each = accum.slice(0);
			each.push(data);
			callback(each);
			return;
		}

		assert_1.ok(data !== null);
		assert_1.equal(typeof (data), 'object');
		assert_1.equal(typeof (depth), 'number');
		assert_1.ok(depth >= 0);

		for (key in data) {
			each = accum.slice(0);
			each.push(key);
			doFlattenIter(data[key], depth - 1, each, callback);
		}
	}

	function flattenObject(data, depth)
	{
		if (depth === 0)
			return ([ data ]);

		assert_1.ok(data !== null);
		assert_1.equal(typeof (data), 'object');
		assert_1.equal(typeof (depth), 'number');
		assert_1.ok(depth >= 0);

		var rv = [];
		var key;

		for (key in data) {
			flattenObject(data[key], depth - 1).forEach(function (p) {
				rv.push([ key ].concat(p));
			});
		}

		return (rv);
	}

	function startsWith$2(str, prefix)
	{
		return (str.substr(0, prefix.length) == prefix);
	}

	function endsWith(str, suffix)
	{
		return (str.substr(
		    str.length - suffix.length, suffix.length) == suffix);
	}

	function iso8601(d)
	{
		if (typeof (d) == 'number')
			d = new Date(d);
		assert_1.ok(d.constructor === Date);
		return (extsprintf.sprintf('%4d-%02d-%02dT%02d:%02d:%02d.%03dZ',
		    d.getUTCFullYear(), d.getUTCMonth() + 1, d.getUTCDate(),
		    d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(),
		    d.getUTCMilliseconds()));
	}

	var RFC1123_MONTHS = [
	    'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
	    'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
	var RFC1123_DAYS = [
	    'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

	function rfc1123(date) {
		return (extsprintf.sprintf('%s, %02d %s %04d %02d:%02d:%02d GMT',
		    RFC1123_DAYS[date.getUTCDay()], date.getUTCDate(),
		    RFC1123_MONTHS[date.getUTCMonth()], date.getUTCFullYear(),
		    date.getUTCHours(), date.getUTCMinutes(),
		    date.getUTCSeconds()));
	}

	/*
	 * Parses a date expressed as a string, as either a number of milliseconds since
	 * the epoch or any string format that Date accepts, giving preference to the
	 * former where these two sets overlap (e.g., small numbers).
	 */
	function parseDateTime(str)
	{
		/*
		 * This is irritatingly implicit, but significantly more concise than
		 * alternatives.  The "+str" will convert a string containing only a
		 * number directly to a Number, or NaN for other strings.  Thus, if the
		 * conversion succeeds, we use it (this is the milliseconds-since-epoch
		 * case).  Otherwise, we pass the string directly to the Date
		 * constructor to parse.
		 */
		var numeric = +str;
		if (!isNaN(numeric)) {
			return (new Date(numeric));
		} else {
			return (new Date(str));
		}
	}


	/*
	 * Number.*_SAFE_INTEGER isn't present before node v0.12, so we hardcode
	 * the ES6 definitions here, while allowing for them to someday be higher.
	 */
	var MAX_SAFE_INTEGER$1 = Number.MAX_SAFE_INTEGER || 9007199254740991;
	var MIN_SAFE_INTEGER = Number.MIN_SAFE_INTEGER || -9007199254740991;


	/*
	 * Default options for parseInteger().
	 */
	var PI_DEFAULTS = {
		base: 10,
		allowSign: true,
		allowPrefix: false,
		allowTrailing: false,
		allowImprecise: false,
		trimWhitespace: false,
		leadingZeroIsOctal: false
	};

	var CP_0 = 0x30;
	var CP_9 = 0x39;

	var CP_A = 0x41;
	var CP_B = 0x42;
	var CP_O = 0x4f;
	var CP_T = 0x54;
	var CP_X = 0x58;
	var CP_Z = 0x5a;

	var CP_a = 0x61;
	var CP_b = 0x62;
	var CP_o = 0x6f;
	var CP_t = 0x74;
	var CP_x = 0x78;
	var CP_z = 0x7a;

	var PI_CONV_DEC = 0x30;
	var PI_CONV_UC = 0x37;
	var PI_CONV_LC = 0x57;


	/*
	 * A stricter version of parseInt() that provides options for changing what
	 * is an acceptable string (for example, disallowing trailing characters).
	 */
	function parseInteger(str, uopts)
	{
		assert_1.string(str, 'str');
		assert_1.optionalObject(uopts, 'options');

		var baseOverride = false;
		var options = PI_DEFAULTS;

		if (uopts) {
			baseOverride = hasKey(uopts, 'base');
			options = mergeObjects(options, uopts);
			assert_1.number(options.base, 'options.base');
			assert_1.ok(options.base >= 2, 'options.base >= 2');
			assert_1.ok(options.base <= 36, 'options.base <= 36');
			assert_1.bool(options.allowSign, 'options.allowSign');
			assert_1.bool(options.allowPrefix, 'options.allowPrefix');
			assert_1.bool(options.allowTrailing,
			    'options.allowTrailing');
			assert_1.bool(options.allowImprecise,
			    'options.allowImprecise');
			assert_1.bool(options.trimWhitespace,
			    'options.trimWhitespace');
			assert_1.bool(options.leadingZeroIsOctal,
			    'options.leadingZeroIsOctal');

			if (options.leadingZeroIsOctal) {
				assert_1.ok(!baseOverride,
				    '"base" and "leadingZeroIsOctal" are ' +
				    'mutually exclusive');
			}
		}

		var c;
		var pbase = -1;
		var base = options.base;
		var start;
		var mult = 1;
		var value = 0;
		var idx = 0;
		var len = str.length;

		/* Trim any whitespace on the left side. */
		if (options.trimWhitespace) {
			while (idx < len && isSpace(str.charCodeAt(idx))) {
				++idx;
			}
		}

		/* Check the number for a leading sign. */
		if (options.allowSign) {
			if (str[idx] === '-') {
				idx += 1;
				mult = -1;
			} else if (str[idx] === '+') {
				idx += 1;
			}
		}

		/* Parse the base-indicating prefix if there is one. */
		if (str[idx] === '0') {
			if (options.allowPrefix) {
				pbase = prefixToBase(str.charCodeAt(idx + 1));
				if (pbase !== -1 && (!baseOverride || pbase === base)) {
					base = pbase;
					idx += 2;
				}
			}

			if (pbase === -1 && options.leadingZeroIsOctal) {
				base = 8;
			}
		}

		/* Parse the actual digits. */
		for (start = idx; idx < len; ++idx) {
			c = translateDigit(str.charCodeAt(idx));
			if (c !== -1 && c < base) {
				value *= base;
				value += c;
			} else {
				break;
			}
		}

		/* If we didn't parse any digits, we have an invalid number. */
		if (start === idx) {
			return (new Error('invalid number: ' + JSON.stringify(str)));
		}

		/* Trim any whitespace on the right side. */
		if (options.trimWhitespace) {
			while (idx < len && isSpace(str.charCodeAt(idx))) {
				++idx;
			}
		}

		/* Check for trailing characters. */
		if (idx < len && !options.allowTrailing) {
			return (new Error('trailing characters after number: ' +
			    JSON.stringify(str.slice(idx))));
		}

		/* If our value is 0, we return now, to avoid returning -0. */
		if (value === 0) {
			return (0);
		}

		/* Calculate our final value. */
		var result = value * mult;

		/*
		 * If the string represents a value that cannot be precisely represented
		 * by JavaScript, then we want to check that:
		 *
		 * - We never increased the value past MAX_SAFE_INTEGER
		 * - We don't make the result negative and below MIN_SAFE_INTEGER
		 *
		 * Because we only ever increment the value during parsing, there's no
		 * chance of moving past MAX_SAFE_INTEGER and then dropping below it
		 * again, losing precision in the process. This means that we only need
		 * to do our checks here, at the end.
		 */
		if (!options.allowImprecise &&
		    (value > MAX_SAFE_INTEGER$1 || result < MIN_SAFE_INTEGER)) {
			return (new Error('number is outside of the supported range: ' +
			    JSON.stringify(str.slice(start, idx))));
		}

		return (result);
	}


	/*
	 * Interpret a character code as a base-36 digit.
	 */
	function translateDigit(d)
	{
		if (d >= CP_0 && d <= CP_9) {
			/* '0' to '9' -> 0 to 9 */
			return (d - PI_CONV_DEC);
		} else if (d >= CP_A && d <= CP_Z) {
			/* 'A' - 'Z' -> 10 to 35 */
			return (d - PI_CONV_UC);
		} else if (d >= CP_a && d <= CP_z) {
			/* 'a' - 'z' -> 10 to 35 */
			return (d - PI_CONV_LC);
		} else {
			/* Invalid character code */
			return (-1);
		}
	}


	/*
	 * Test if a value matches the ECMAScript definition of trimmable whitespace.
	 */
	function isSpace(c)
	{
		return (c === 0x20) ||
		    (c >= 0x0009 && c <= 0x000d) ||
		    (c === 0x00a0) ||
		    (c === 0x1680) ||
		    (c === 0x180e) ||
		    (c >= 0x2000 && c <= 0x200a) ||
		    (c === 0x2028) ||
		    (c === 0x2029) ||
		    (c === 0x202f) ||
		    (c === 0x205f) ||
		    (c === 0x3000) ||
		    (c === 0xfeff);
	}


	/*
	 * Determine which base a character indicates (e.g., 'x' indicates hex).
	 */
	function prefixToBase(c)
	{
		if (c === CP_b || c === CP_B) {
			/* 0b/0B (binary) */
			return (2);
		} else if (c === CP_o || c === CP_O) {
			/* 0o/0O (octal) */
			return (8);
		} else if (c === CP_t || c === CP_T) {
			/* 0t/0T (decimal) */
			return (10);
		} else if (c === CP_x || c === CP_X) {
			/* 0x/0X (hexadecimal) */
			return (16);
		} else {
			/* Not a meaningful character */
			return (-1);
		}
	}


	function validateJsonObjectJS(schema, input)
	{
		var report = validate$4.validate(input, schema);

		if (report.errors.length === 0)
			return (null);

		/* Currently, we only do anything useful with the first error. */
		var error = report.errors[0];

		/* The failed property is given by a URI with an irrelevant prefix. */
		var propname = error['property'];
		var reason = error['message'].toLowerCase();
		var i, j;

		/*
		 * There's at least one case where the property error message is
		 * confusing at best.  We work around this here.
		 */
		if ((i = reason.indexOf('the property ')) != -1 &&
		    (j = reason.indexOf(' is not defined in the schema and the ' +
		    'schema does not allow additional properties')) != -1) {
			i += 'the property '.length;
			if (propname === '')
				propname = reason.substr(i, j - i);
			else
				propname = propname + '.' + reason.substr(i, j - i);

			reason = 'unsupported property';
		}

		var rv = new verror.VError('property "%s": %s', propname, reason);
		rv.jsv_details = error;
		return (rv);
	}

	function randElt(arr)
	{
		assert_1.ok(Array.isArray(arr) && arr.length > 0,
		    'randElt argument must be a non-empty array');

		return (arr[Math.floor(Math.random() * arr.length)]);
	}

	function assertHrtime(a)
	{
		assert_1.ok(a[0] >= 0 && a[1] >= 0,
		    'negative numbers not allowed in hrtimes');
		assert_1.ok(a[1] < 1e9, 'nanoseconds column overflow');
	}

	/*
	 * Compute the time elapsed between hrtime readings A and B, where A is later
	 * than B.  hrtime readings come from Node's process.hrtime().  There is no
	 * defined way to represent negative deltas, so it's illegal to diff B from A
	 * where the time denoted by B is later than the time denoted by A.  If this
	 * becomes valuable, we can define a representation and extend the
	 * implementation to support it.
	 */
	function hrtimeDiff(a, b)
	{
		assertHrtime(a);
		assertHrtime(b);
		assert_1.ok(a[0] > b[0] || (a[0] == b[0] && a[1] >= b[1]),
		    'negative differences not allowed');

		var rv = [ a[0] - b[0], 0 ];

		if (a[1] >= b[1]) {
			rv[1] = a[1] - b[1];
		} else {
			rv[0]--;
			rv[1] = 1e9 - (b[1] - a[1]);
		}

		return (rv);
	}

	/*
	 * Convert a hrtime reading from the array format returned by Node's
	 * process.hrtime() into a scalar number of nanoseconds.
	 */
	function hrtimeNanosec(a)
	{
		assertHrtime(a);

		return (Math.floor(a[0] * 1e9 + a[1]));
	}

	/*
	 * Convert a hrtime reading from the array format returned by Node's
	 * process.hrtime() into a scalar number of microseconds.
	 */
	function hrtimeMicrosec(a)
	{
		assertHrtime(a);

		return (Math.floor(a[0] * 1e6 + a[1] / 1e3));
	}

	/*
	 * Convert a hrtime reading from the array format returned by Node's
	 * process.hrtime() into a scalar number of milliseconds.
	 */
	function hrtimeMillisec(a)
	{
		assertHrtime(a);

		return (Math.floor(a[0] * 1e3 + a[1] / 1e6));
	}

	/*
	 * Add two hrtime readings A and B, overwriting A with the result of the
	 * addition.  This function is useful for accumulating several hrtime intervals
	 * into a counter.  Returns A.
	 */
	function hrtimeAccum(a, b)
	{
		assertHrtime(a);
		assertHrtime(b);

		/*
		 * Accumulate the nanosecond component.
		 */
		a[1] += b[1];
		if (a[1] >= 1e9) {
			/*
			 * The nanosecond component overflowed, so carry to the seconds
			 * field.
			 */
			a[0]++;
			a[1] -= 1e9;
		}

		/*
		 * Accumulate the seconds component.
		 */
		a[0] += b[0];

		return (a);
	}

	/*
	 * Add two hrtime readings A and B, returning the result as a new hrtime array.
	 * Does not modify either input argument.
	 */
	function hrtimeAdd(a, b)
	{
		assertHrtime(a);

		var rv = [ a[0], a[1] ];

		return (hrtimeAccum(rv, b));
	}


	/*
	 * Check an object for unexpected properties.  Accepts the object to check, and
	 * an array of allowed property names (strings).  Returns an array of key names
	 * that were found on the object, but did not appear in the list of allowed
	 * properties.  If no properties were found, the returned array will be of
	 * zero length.
	 */
	function extraProperties(obj, allowed)
	{
		assert_1.ok(typeof (obj) === 'object' && obj !== null,
		    'obj argument must be a non-null object');
		assert_1.ok(Array.isArray(allowed),
		    'allowed argument must be an array of strings');
		for (var i = 0; i < allowed.length; i++) {
			assert_1.ok(typeof (allowed[i]) === 'string',
			    'allowed argument must be an array of strings');
		}

		return (Object.keys(obj).filter(function (key) {
			return (allowed.indexOf(key) === -1);
		}));
	}

	/*
	 * Given three sets of properties "provided" (may be undefined), "overrides"
	 * (required), and "defaults" (may be undefined), construct an object containing
	 * the union of these sets with "overrides" overriding "provided", and
	 * "provided" overriding "defaults".  None of the input objects are modified.
	 */
	function mergeObjects(provided, overrides, defaults)
	{
		var rv, k;

		rv = {};
		if (defaults) {
			for (k in defaults)
				rv[k] = defaults[k];
		}

		if (provided) {
			for (k in provided)
				rv[k] = provided[k];
		}

		if (overrides) {
			for (k in overrides)
				rv[k] = overrides[k];
		}

		return (rv);
	}

	var jsprim = {
		deepCopy: deepCopy_1,
		deepEqual: deepEqual_1,
		isEmpty: isEmpty_1,
		hasKey: hasKey_1,
		forEachKey: forEachKey_1,
		pluck: pluck_1,
		flattenObject: flattenObject_1,
		flattenIter: flattenIter_1,
		validateJsonObject: validateJsonObject,
		validateJsonObjectJS: validateJsonObjectJS_1,
		randElt: randElt_1,
		extraProperties: extraProperties_1,
		mergeObjects: mergeObjects_1,
		startsWith: startsWith_1,
		endsWith: endsWith_1,
		parseInteger: parseInteger_1,
		iso8601: iso8601_1,
		rfc1123: rfc1123_1,
		parseDateTime: parseDateTime_1,
		hrtimediff: hrtimediff,
		hrtimeDiff: hrtimeDiff_1,
		hrtimeAccum: hrtimeAccum_1,
		hrtimeAdd: hrtimeAdd_1,
		hrtimeNanosec: hrtimeNanosec_1,
		hrtimeMicrosec: hrtimeMicrosec_1,
		hrtimeMillisec: hrtimeMillisec_1
	};

	// Copyright 2012 Joyent, Inc.  All rights reserved.









	var sprintf = util__default['default'].format;

	var HASH_ALGOS = utils$2.HASH_ALGOS;
	var PK_ALGOS = utils$2.PK_ALGOS;
	var InvalidAlgorithmError = utils$2.InvalidAlgorithmError;
	var HttpSignatureError = utils$2.HttpSignatureError;
	var validateAlgorithm$1 = utils$2.validateAlgorithm;

	///--- Globals

	var AUTHZ_FMT =
	  'Signature keyId="%s",algorithm="%s",headers="%s",signature="%s"';

	///--- Specific Errors

	function MissingHeaderError(message) {
	  HttpSignatureError.call(this, message, MissingHeaderError);
	}
	util__default['default'].inherits(MissingHeaderError, HttpSignatureError);

	function StrictParsingError(message) {
	  HttpSignatureError.call(this, message, StrictParsingError);
	}
	util__default['default'].inherits(StrictParsingError, HttpSignatureError);

	/* See createSigner() */
	function RequestSigner(options) {
	  assert_1.object(options, 'options');

	  var alg = [];
	  if (options.algorithm !== undefined) {
	    assert_1.string(options.algorithm, 'options.algorithm');
	    alg = validateAlgorithm$1(options.algorithm);
	  }
	  this.rs_alg = alg;

	  /*
	   * RequestSigners come in two varieties: ones with an rs_signFunc, and ones
	   * with an rs_signer.
	   *
	   * rs_signFunc-based RequestSigners have to build up their entire signing
	   * string within the rs_lines array and give it to rs_signFunc as a single
	   * concat'd blob. rs_signer-based RequestSigners can add a line at a time to
	   * their signing state by using rs_signer.update(), thus only needing to
	   * buffer the hash function state and one line at a time.
	   */
	  if (options.sign !== undefined) {
	    assert_1.func(options.sign, 'options.sign');
	    this.rs_signFunc = options.sign;

	  } else if (alg[0] === 'hmac' && options.key !== undefined) {
	    assert_1.string(options.keyId, 'options.keyId');
	    this.rs_keyId = options.keyId;

	    if (typeof (options.key) !== 'string' && !Buffer.isBuffer(options.key))
	      throw (new TypeError('options.key for HMAC must be a string or Buffer'));

	    /*
	     * Make an rs_signer for HMACs, not a rs_signFunc -- HMACs digest their
	     * data in chunks rather than requiring it all to be given in one go
	     * at the end, so they are more similar to signers than signFuncs.
	     */
	    this.rs_signer = crypto__default['default'].createHmac(alg[1].toUpperCase(), options.key);
	    this.rs_signer.sign = function () {
	      var digest = this.digest('base64');
	      return ({
	        hashAlgorithm: alg[1],
	        toString: function () { return (digest); }
	      });
	    };

	  } else if (options.key !== undefined) {
	    var key = options.key;
	    if (typeof (key) === 'string' || Buffer.isBuffer(key))
	      key = lib$5.parsePrivateKey(key);

	    assert_1.ok(lib$5.PrivateKey.isPrivateKey(key, [1, 2]),
	      'options.key must be a sshpk.PrivateKey');
	    this.rs_key = key;

	    assert_1.string(options.keyId, 'options.keyId');
	    this.rs_keyId = options.keyId;

	    if (!PK_ALGOS[key.type]) {
	      throw (new InvalidAlgorithmError(key.type.toUpperCase() + ' type ' +
	        'keys are not supported'));
	    }

	    if (alg[0] !== undefined && key.type !== alg[0]) {
	      throw (new InvalidAlgorithmError('options.key must be a ' +
	        alg[0].toUpperCase() + ' key, was given a ' +
	        key.type.toUpperCase() + ' key instead'));
	    }

	    this.rs_signer = key.createSign(alg[1]);

	  } else {
	    throw (new TypeError('options.sign (func) or options.key is required'));
	  }

	  this.rs_headers = [];
	  this.rs_lines = [];
	}

	/**
	 * Adds a header to be signed, with its value, into this signer.
	 *
	 * @param {String} header
	 * @param {String} value
	 * @return {String} value written
	 */
	RequestSigner.prototype.writeHeader = function (header, value) {
	  assert_1.string(header, 'header');
	  header = header.toLowerCase();
	  assert_1.string(value, 'value');

	  this.rs_headers.push(header);

	  if (this.rs_signFunc) {
	    this.rs_lines.push(header + ': ' + value);

	  } else {
	    var line = header + ': ' + value;
	    if (this.rs_headers.length > 0)
	      line = '\n' + line;
	    this.rs_signer.update(line);
	  }

	  return (value);
	};

	/**
	 * Adds a default Date header, returning its value.
	 *
	 * @return {String}
	 */
	RequestSigner.prototype.writeDateHeader = function () {
	  return (this.writeHeader('date', jsprim.rfc1123(new Date())));
	};

	/**
	 * Adds the request target line to be signed.
	 *
	 * @param {String} method, HTTP method (e.g. 'get', 'post', 'put')
	 * @param {String} path
	 */
	RequestSigner.prototype.writeTarget = function (method, path) {
	  assert_1.string(method, 'method');
	  assert_1.string(path, 'path');
	  method = method.toLowerCase();
	  this.writeHeader('(request-target)', method + ' ' + path);
	};

	/**
	 * Calculate the value for the Authorization header on this request
	 * asynchronously.
	 *
	 * @param {Func} callback (err, authz)
	 */
	RequestSigner.prototype.sign = function (cb) {
	  assert_1.func(cb, 'callback');

	  if (this.rs_headers.length < 1)
	    throw (new Error('At least one header must be signed'));

	  var alg, authz;
	  if (this.rs_signFunc) {
	    var data = this.rs_lines.join('\n');
	    var self = this;
	    this.rs_signFunc(data, function (err, sig) {
	      if (err) {
	        cb(err);
	        return;
	      }
	      try {
	        assert_1.object(sig, 'signature');
	        assert_1.string(sig.keyId, 'signature.keyId');
	        assert_1.string(sig.algorithm, 'signature.algorithm');
	        assert_1.string(sig.signature, 'signature.signature');
	        alg = validateAlgorithm$1(sig.algorithm);

	        authz = sprintf(AUTHZ_FMT,
	          sig.keyId,
	          sig.algorithm,
	          self.rs_headers.join(' '),
	          sig.signature);
	      } catch (e) {
	        cb(e);
	        return;
	      }
	      cb(null, authz);
	    });

	  } else {
	    try {
	      var sigObj = this.rs_signer.sign();
	    } catch (e) {
	      cb(e);
	      return;
	    }
	    alg = (this.rs_alg[0] || this.rs_key.type) + '-' + sigObj.hashAlgorithm;
	    var signature = sigObj.toString();
	    authz = sprintf(AUTHZ_FMT,
	      this.rs_keyId,
	      alg,
	      this.rs_headers.join(' '),
	      signature);
	    cb(null, authz);
	  }
	};

	///--- Exported API

	var signer = {
	  /**
	   * Identifies whether a given object is a request signer or not.
	   *
	   * @param {Object} object, the object to identify
	   * @returns {Boolean}
	   */
	  isSigner: function (obj) {
	    if (typeof (obj) === 'object' && obj instanceof RequestSigner)
	      return (true);
	    return (false);
	  },

	  /**
	   * Creates a request signer, used to asynchronously build a signature
	   * for a request (does not have to be an http.ClientRequest).
	   *
	   * @param {Object} options, either:
	   *                   - {String} keyId
	   *                   - {String|Buffer} key
	   *                   - {String} algorithm (optional, required for HMAC)
	   *                 or:
	   *                   - {Func} sign (data, cb)
	   * @return {RequestSigner}
	   */
	  createSigner: function createSigner(options) {
	    return (new RequestSigner(options));
	  },

	  /**
	   * Adds an 'Authorization' header to an http.ClientRequest object.
	   *
	   * Note that this API will add a Date header if it's not already set. Any
	   * other headers in the options.headers array MUST be present, or this
	   * will throw.
	   *
	   * You shouldn't need to check the return type; it's just there if you want
	   * to be pedantic.
	   *
	   * The optional flag indicates whether parsing should use strict enforcement
	   * of the version draft-cavage-http-signatures-04 of the spec or beyond.
	   * The default is to be loose and support
	   * older versions for compatibility.
	   *
	   * @param {Object} request an instance of http.ClientRequest.
	   * @param {Object} options signing parameters object:
	   *                   - {String} keyId required.
	   *                   - {String} key required (either a PEM or HMAC key).
	   *                   - {Array} headers optional; defaults to ['date'].
	   *                   - {String} algorithm optional (unless key is HMAC);
	   *                              default is the same as the sshpk default
	   *                              signing algorithm for the type of key given
	   *                   - {String} httpVersion optional; defaults to '1.1'.
	   *                   - {Boolean} strict optional; defaults to 'false'.
	   * @return {Boolean} true if Authorization (and optionally Date) were added.
	   * @throws {TypeError} on bad parameter types (input).
	   * @throws {InvalidAlgorithmError} if algorithm was bad or incompatible with
	   *                                 the given key.
	   * @throws {sshpk.KeyParseError} if key was bad.
	   * @throws {MissingHeaderError} if a header to be signed was specified but
	   *                              was not present.
	   */
	  signRequest: function signRequest(request, options) {
	    assert_1.object(request, 'request');
	    assert_1.object(options, 'options');
	    assert_1.optionalString(options.algorithm, 'options.algorithm');
	    assert_1.string(options.keyId, 'options.keyId');
	    assert_1.optionalArrayOfString(options.headers, 'options.headers');
	    assert_1.optionalString(options.httpVersion, 'options.httpVersion');

	    if (!request.getHeader('Date'))
	      request.setHeader('Date', jsprim.rfc1123(new Date()));
	    if (!options.headers)
	      options.headers = ['date'];
	    if (!options.httpVersion)
	      options.httpVersion = '1.1';

	    var alg = [];
	    if (options.algorithm) {
	      options.algorithm = options.algorithm.toLowerCase();
	      alg = validateAlgorithm$1(options.algorithm);
	    }

	    var i;
	    var stringToSign = '';
	    for (i = 0; i < options.headers.length; i++) {
	      if (typeof (options.headers[i]) !== 'string')
	        throw new TypeError('options.headers must be an array of Strings');

	      var h = options.headers[i].toLowerCase();

	      if (h === 'request-line') {
	        if (!options.strict) {
	          /**
	           * We allow headers from the older spec drafts if strict parsing isn't
	           * specified in options.
	           */
	          stringToSign +=
	            request.method + ' ' + request.path + ' HTTP/' +
	            options.httpVersion;
	        } else {
	          /* Strict parsing doesn't allow older draft headers. */
	          throw (new StrictParsingError('request-line is not a valid header ' +
	            'with strict parsing enabled.'));
	        }
	      } else if (h === '(request-target)') {
	        stringToSign +=
	          '(request-target): ' + request.method.toLowerCase() + ' ' +
	          request.path;
	      } else {
	        var value = request.getHeader(h);
	        if (value === undefined || value === '') {
	          throw new MissingHeaderError(h + ' was not in the request');
	        }
	        stringToSign += h + ': ' + value;
	      }

	      if ((i + 1) < options.headers.length)
	        stringToSign += '\n';
	    }

	    /* This is just for unit tests. */
	    if (request.hasOwnProperty('_stringToSign')) {
	      request._stringToSign = stringToSign;
	    }

	    var signature;
	    if (alg[0] === 'hmac') {
	      if (typeof (options.key) !== 'string' && !Buffer.isBuffer(options.key))
	        throw (new TypeError('options.key must be a string or Buffer'));

	      var hmac = crypto__default['default'].createHmac(alg[1].toUpperCase(), options.key);
	      hmac.update(stringToSign);
	      signature = hmac.digest('base64');

	    } else {
	      var key = options.key;
	      if (typeof (key) === 'string' || Buffer.isBuffer(key))
	        key = lib$5.parsePrivateKey(options.key);

	      assert_1.ok(lib$5.PrivateKey.isPrivateKey(key, [1, 2]),
	        'options.key must be a sshpk.PrivateKey');

	      if (!PK_ALGOS[key.type]) {
	        throw (new InvalidAlgorithmError(key.type.toUpperCase() + ' type ' +
	          'keys are not supported'));
	      }

	      if (alg[0] !== undefined && key.type !== alg[0]) {
	        throw (new InvalidAlgorithmError('options.key must be a ' +
	          alg[0].toUpperCase() + ' key, was given a ' +
	          key.type.toUpperCase() + ' key instead'));
	      }

	      var signer = key.createSign(alg[1]);
	      signer.update(stringToSign);
	      var sigObj = signer.sign();
	      if (!HASH_ALGOS[sigObj.hashAlgorithm]) {
	        throw (new InvalidAlgorithmError(sigObj.hashAlgorithm.toUpperCase() +
	          ' is not a supported hash algorithm'));
	      }
	      options.algorithm = key.type + '-' + sigObj.hashAlgorithm;
	      signature = sigObj.toString();
	      assert_1.notStrictEqual(signature, '', 'empty signature produced');
	    }

	    var authzHeaderName = options.authorizationHeaderName || 'Authorization';

	    request.setHeader(authzHeaderName, sprintf(AUTHZ_FMT,
	                                               options.keyId,
	                                               options.algorithm,
	                                               options.headers.join(' '),
	                                               signature));

	    return true;
	  }

	};

	var validateAlgorithm = utils$2.validateAlgorithm;

	///--- Exported API

	var verify = {
	  /**
	   * Verify RSA/DSA signature against public key.  You are expected to pass in
	   * an object that was returned from `parse()`.
	   *
	   * @param {Object} parsedSignature the object you got from `parse`.
	   * @param {String} pubkey RSA/DSA private key PEM.
	   * @return {Boolean} true if valid, false otherwise.
	   * @throws {TypeError} if you pass in bad arguments.
	   * @throws {InvalidAlgorithmError}
	   */
	  verifySignature: function verifySignature(parsedSignature, pubkey) {
	    assert_1.object(parsedSignature, 'parsedSignature');
	    if (typeof (pubkey) === 'string' || Buffer.isBuffer(pubkey))
	      pubkey = lib$5.parseKey(pubkey);
	    assert_1.ok(lib$5.Key.isKey(pubkey, [1, 1]), 'pubkey must be a sshpk.Key');

	    var alg = validateAlgorithm(parsedSignature.algorithm);
	    if (alg[0] === 'hmac' || alg[0] !== pubkey.type)
	      return (false);

	    var v = pubkey.createVerify(alg[1]);
	    v.update(parsedSignature.signingString);
	    return (v.verify(parsedSignature.params.signature, 'base64'));
	  },

	  /**
	   * Verify HMAC against shared secret.  You are expected to pass in an object
	   * that was returned from `parse()`.
	   *
	   * @param {Object} parsedSignature the object you got from `parse`.
	   * @param {String} secret HMAC shared secret.
	   * @return {Boolean} true if valid, false otherwise.
	   * @throws {TypeError} if you pass in bad arguments.
	   * @throws {InvalidAlgorithmError}
	   */
	  verifyHMAC: function verifyHMAC(parsedSignature, secret) {
	    assert_1.object(parsedSignature, 'parsedHMAC');
	    assert_1.string(secret, 'secret');

	    var alg = validateAlgorithm(parsedSignature.algorithm);
	    if (alg[0] !== 'hmac')
	      return (false);

	    var hashAlg = alg[1].toUpperCase();

	    var hmac = crypto__default['default'].createHmac(hashAlg, secret);
	    hmac.update(parsedSignature.signingString);

	    /*
	     * Now double-hash to avoid leaking timing information - there's
	     * no easy constant-time compare in JS, so we use this approach
	     * instead. See for more info:
	     * https://www.isecpartners.com/blog/2011/february/double-hmac-
	     * verification.aspx
	     */
	    var h1 = crypto__default['default'].createHmac(hashAlg, secret);
	    h1.update(hmac.digest());
	    h1 = h1.digest();
	    var h2 = crypto__default['default'].createHmac(hashAlg, secret);
	    h2.update(new Buffer(parsedSignature.params.signature, 'base64'));
	    h2 = h2.digest();

	    /* Node 0.8 returns strings from .digest(). */
	    if (typeof (h1) === 'string')
	      return (h1 === h2);
	    /* And node 0.10 lacks the .equals() method on Buffers. */
	    if (Buffer.isBuffer(h1) && !h1.equals)
	      return (h1.toString('binary') === h2.toString('binary'));

	    return (h1.equals(h2));
	  }
	};

	// Copyright 2015 Joyent, Inc.








	///--- API

	var lib$4 = {

	  parse: parser.parseRequest,
	  parseRequest: parser.parseRequest,

	  sign: signer.signRequest,
	  signRequest: signer.signRequest,
	  createSigner: signer.createSigner,
	  isSigner: signer.isSigner,

	  sshKeyToPEM: utils$2.sshKeyToPEM,
	  sshKeyFingerprint: utils$2.fingerprint,
	  pemToRsaSSHKey: utils$2.pemToRsaSSHKey,

	  verify: verify.verifySignature,
	  verifySignature: verify.verifySignature,
	  verifyHMAC: verify.verifyHMAC
	};

	var require$$0$6 = {
		"application/1d-interleaved-parityfec": {
		source: "iana"
	},
		"application/3gpdash-qoe-report+xml": {
		source: "iana",
		charset: "UTF-8",
		compressible: true
	},
		"application/3gpp-ims+xml": {
		source: "iana",
		compressible: true
	},
		"application/a2l": {
		source: "iana"
	},
		"application/activemessage": {
		source: "iana"
	},
		"application/activity+json": {
		source: "iana",
		compressible: true
	},
		"application/alto-costmap+json": {
		source: "iana",
		compressible: true
	},
		"application/alto-costmapfilter+json": {
		source: "iana",
		compressible: true
	},
		"application/alto-directory+json": {
		source: "iana",
		compressible: true
	},
		"application/alto-endpointcost+json": {
		source: "iana",
		compressible: true
	},
		"application/alto-endpointcostparams+json": {
		source: "iana",
		compressible: true
	},
		"application/alto-endpointprop+json": {
		source: "iana",
		compressible: true
	},
		"application/alto-endpointpropparams+json": {
		source: "iana",
		compressible: true
	},
		"application/alto-error+json": {
		source: "iana",
		compressible: true
	},
		"application/alto-networkmap+json": {
		source: "iana",
		compressible: true
	},
		"application/alto-networkmapfilter+json": {
		source: "iana",
		compressible: true
	},
		"application/alto-updatestreamcontrol+json": {
		source: "iana",
		compressible: true
	},
		"application/alto-updatestreamparams+json": {
		source: "iana",
		compressible: true
	},
		"application/aml": {
		source: "iana"
	},
		"application/andrew-inset": {
		source: "iana",
		extensions: [
			"ez"
		]
	},
		"application/applefile": {
		source: "iana"
	},
		"application/applixware": {
		source: "apache",
		extensions: [
			"aw"
		]
	},
		"application/atf": {
		source: "iana"
	},
		"application/atfx": {
		source: "iana"
	},
		"application/atom+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"atom"
		]
	},
		"application/atomcat+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"atomcat"
		]
	},
		"application/atomdeleted+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"atomdeleted"
		]
	},
		"application/atomicmail": {
		source: "iana"
	},
		"application/atomsvc+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"atomsvc"
		]
	},
		"application/atsc-dwd+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"dwd"
		]
	},
		"application/atsc-dynamic-event-message": {
		source: "iana"
	},
		"application/atsc-held+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"held"
		]
	},
		"application/atsc-rdt+json": {
		source: "iana",
		compressible: true
	},
		"application/atsc-rsat+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"rsat"
		]
	},
		"application/atxml": {
		source: "iana"
	},
		"application/auth-policy+xml": {
		source: "iana",
		compressible: true
	},
		"application/bacnet-xdd+zip": {
		source: "iana",
		compressible: false
	},
		"application/batch-smtp": {
		source: "iana"
	},
		"application/bdoc": {
		compressible: false,
		extensions: [
			"bdoc"
		]
	},
		"application/beep+xml": {
		source: "iana",
		charset: "UTF-8",
		compressible: true
	},
		"application/calendar+json": {
		source: "iana",
		compressible: true
	},
		"application/calendar+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"xcs"
		]
	},
		"application/call-completion": {
		source: "iana"
	},
		"application/cals-1840": {
		source: "iana"
	},
		"application/captive+json": {
		source: "iana",
		compressible: true
	},
		"application/cbor": {
		source: "iana"
	},
		"application/cbor-seq": {
		source: "iana"
	},
		"application/cccex": {
		source: "iana"
	},
		"application/ccmp+xml": {
		source: "iana",
		compressible: true
	},
		"application/ccxml+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"ccxml"
		]
	},
		"application/cdfx+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"cdfx"
		]
	},
		"application/cdmi-capability": {
		source: "iana",
		extensions: [
			"cdmia"
		]
	},
		"application/cdmi-container": {
		source: "iana",
		extensions: [
			"cdmic"
		]
	},
		"application/cdmi-domain": {
		source: "iana",
		extensions: [
			"cdmid"
		]
	},
		"application/cdmi-object": {
		source: "iana",
		extensions: [
			"cdmio"
		]
	},
		"application/cdmi-queue": {
		source: "iana",
		extensions: [
			"cdmiq"
		]
	},
		"application/cdni": {
		source: "iana"
	},
		"application/cea": {
		source: "iana"
	},
		"application/cea-2018+xml": {
		source: "iana",
		compressible: true
	},
		"application/cellml+xml": {
		source: "iana",
		compressible: true
	},
		"application/cfw": {
		source: "iana"
	},
		"application/clr": {
		source: "iana"
	},
		"application/clue+xml": {
		source: "iana",
		compressible: true
	},
		"application/clue_info+xml": {
		source: "iana",
		compressible: true
	},
		"application/cms": {
		source: "iana"
	},
		"application/cnrp+xml": {
		source: "iana",
		compressible: true
	},
		"application/coap-group+json": {
		source: "iana",
		compressible: true
	},
		"application/coap-payload": {
		source: "iana"
	},
		"application/commonground": {
		source: "iana"
	},
		"application/conference-info+xml": {
		source: "iana",
		compressible: true
	},
		"application/cose": {
		source: "iana"
	},
		"application/cose-key": {
		source: "iana"
	},
		"application/cose-key-set": {
		source: "iana"
	},
		"application/cpl+xml": {
		source: "iana",
		compressible: true
	},
		"application/csrattrs": {
		source: "iana"
	},
		"application/csta+xml": {
		source: "iana",
		compressible: true
	},
		"application/cstadata+xml": {
		source: "iana",
		compressible: true
	},
		"application/csvm+json": {
		source: "iana",
		compressible: true
	},
		"application/cu-seeme": {
		source: "apache",
		extensions: [
			"cu"
		]
	},
		"application/cwt": {
		source: "iana"
	},
		"application/cybercash": {
		source: "iana"
	},
		"application/dart": {
		compressible: true
	},
		"application/dash+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"mpd"
		]
	},
		"application/dashdelta": {
		source: "iana"
	},
		"application/davmount+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"davmount"
		]
	},
		"application/dca-rft": {
		source: "iana"
	},
		"application/dcd": {
		source: "iana"
	},
		"application/dec-dx": {
		source: "iana"
	},
		"application/dialog-info+xml": {
		source: "iana",
		compressible: true
	},
		"application/dicom": {
		source: "iana"
	},
		"application/dicom+json": {
		source: "iana",
		compressible: true
	},
		"application/dicom+xml": {
		source: "iana",
		compressible: true
	},
		"application/dii": {
		source: "iana"
	},
		"application/dit": {
		source: "iana"
	},
		"application/dns": {
		source: "iana"
	},
		"application/dns+json": {
		source: "iana",
		compressible: true
	},
		"application/dns-message": {
		source: "iana"
	},
		"application/docbook+xml": {
		source: "apache",
		compressible: true,
		extensions: [
			"dbk"
		]
	},
		"application/dots+cbor": {
		source: "iana"
	},
		"application/dskpp+xml": {
		source: "iana",
		compressible: true
	},
		"application/dssc+der": {
		source: "iana",
		extensions: [
			"dssc"
		]
	},
		"application/dssc+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"xdssc"
		]
	},
		"application/dvcs": {
		source: "iana"
	},
		"application/ecmascript": {
		source: "iana",
		compressible: true,
		extensions: [
			"ecma",
			"es"
		]
	},
		"application/edi-consent": {
		source: "iana"
	},
		"application/edi-x12": {
		source: "iana",
		compressible: false
	},
		"application/edifact": {
		source: "iana",
		compressible: false
	},
		"application/efi": {
		source: "iana"
	},
		"application/elm+json": {
		source: "iana",
		charset: "UTF-8",
		compressible: true
	},
		"application/elm+xml": {
		source: "iana",
		compressible: true
	},
		"application/emergencycalldata.cap+xml": {
		source: "iana",
		charset: "UTF-8",
		compressible: true
	},
		"application/emergencycalldata.comment+xml": {
		source: "iana",
		compressible: true
	},
		"application/emergencycalldata.control+xml": {
		source: "iana",
		compressible: true
	},
		"application/emergencycalldata.deviceinfo+xml": {
		source: "iana",
		compressible: true
	},
		"application/emergencycalldata.ecall.msd": {
		source: "iana"
	},
		"application/emergencycalldata.providerinfo+xml": {
		source: "iana",
		compressible: true
	},
		"application/emergencycalldata.serviceinfo+xml": {
		source: "iana",
		compressible: true
	},
		"application/emergencycalldata.subscriberinfo+xml": {
		source: "iana",
		compressible: true
	},
		"application/emergencycalldata.veds+xml": {
		source: "iana",
		compressible: true
	},
		"application/emma+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"emma"
		]
	},
		"application/emotionml+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"emotionml"
		]
	},
		"application/encaprtp": {
		source: "iana"
	},
		"application/epp+xml": {
		source: "iana",
		compressible: true
	},
		"application/epub+zip": {
		source: "iana",
		compressible: false,
		extensions: [
			"epub"
		]
	},
		"application/eshop": {
		source: "iana"
	},
		"application/exi": {
		source: "iana",
		extensions: [
			"exi"
		]
	},
		"application/expect-ct-report+json": {
		source: "iana",
		compressible: true
	},
		"application/fastinfoset": {
		source: "iana"
	},
		"application/fastsoap": {
		source: "iana"
	},
		"application/fdt+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"fdt"
		]
	},
		"application/fhir+json": {
		source: "iana",
		charset: "UTF-8",
		compressible: true
	},
		"application/fhir+xml": {
		source: "iana",
		charset: "UTF-8",
		compressible: true
	},
		"application/fido.trusted-apps+json": {
		compressible: true
	},
		"application/fits": {
		source: "iana"
	},
		"application/flexfec": {
		source: "iana"
	},
		"application/font-sfnt": {
		source: "iana"
	},
		"application/font-tdpfr": {
		source: "iana",
		extensions: [
			"pfr"
		]
	},
		"application/font-woff": {
		source: "iana",
		compressible: false
	},
		"application/framework-attributes+xml": {
		source: "iana",
		compressible: true
	},
		"application/geo+json": {
		source: "iana",
		compressible: true,
		extensions: [
			"geojson"
		]
	},
		"application/geo+json-seq": {
		source: "iana"
	},
		"application/geopackage+sqlite3": {
		source: "iana"
	},
		"application/geoxacml+xml": {
		source: "iana",
		compressible: true
	},
		"application/gltf-buffer": {
		source: "iana"
	},
		"application/gml+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"gml"
		]
	},
		"application/gpx+xml": {
		source: "apache",
		compressible: true,
		extensions: [
			"gpx"
		]
	},
		"application/gxf": {
		source: "apache",
		extensions: [
			"gxf"
		]
	},
		"application/gzip": {
		source: "iana",
		compressible: false,
		extensions: [
			"gz"
		]
	},
		"application/h224": {
		source: "iana"
	},
		"application/held+xml": {
		source: "iana",
		compressible: true
	},
		"application/hjson": {
		extensions: [
			"hjson"
		]
	},
		"application/http": {
		source: "iana"
	},
		"application/hyperstudio": {
		source: "iana",
		extensions: [
			"stk"
		]
	},
		"application/ibe-key-request+xml": {
		source: "iana",
		compressible: true
	},
		"application/ibe-pkg-reply+xml": {
		source: "iana",
		compressible: true
	},
		"application/ibe-pp-data": {
		source: "iana"
	},
		"application/iges": {
		source: "iana"
	},
		"application/im-iscomposing+xml": {
		source: "iana",
		charset: "UTF-8",
		compressible: true
	},
		"application/index": {
		source: "iana"
	},
		"application/index.cmd": {
		source: "iana"
	},
		"application/index.obj": {
		source: "iana"
	},
		"application/index.response": {
		source: "iana"
	},
		"application/index.vnd": {
		source: "iana"
	},
		"application/inkml+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"ink",
			"inkml"
		]
	},
		"application/iotp": {
		source: "iana"
	},
		"application/ipfix": {
		source: "iana",
		extensions: [
			"ipfix"
		]
	},
		"application/ipp": {
		source: "iana"
	},
		"application/isup": {
		source: "iana"
	},
		"application/its+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"its"
		]
	},
		"application/java-archive": {
		source: "apache",
		compressible: false,
		extensions: [
			"jar",
			"war",
			"ear"
		]
	},
		"application/java-serialized-object": {
		source: "apache",
		compressible: false,
		extensions: [
			"ser"
		]
	},
		"application/java-vm": {
		source: "apache",
		compressible: false,
		extensions: [
			"class"
		]
	},
		"application/javascript": {
		source: "iana",
		charset: "UTF-8",
		compressible: true,
		extensions: [
			"js",
			"mjs"
		]
	},
		"application/jf2feed+json": {
		source: "iana",
		compressible: true
	},
		"application/jose": {
		source: "iana"
	},
		"application/jose+json": {
		source: "iana",
		compressible: true
	},
		"application/jrd+json": {
		source: "iana",
		compressible: true
	},
		"application/jscalendar+json": {
		source: "iana",
		compressible: true
	},
		"application/json": {
		source: "iana",
		charset: "UTF-8",
		compressible: true,
		extensions: [
			"json",
			"map"
		]
	},
		"application/json-patch+json": {
		source: "iana",
		compressible: true
	},
		"application/json-seq": {
		source: "iana"
	},
		"application/json5": {
		extensions: [
			"json5"
		]
	},
		"application/jsonml+json": {
		source: "apache",
		compressible: true,
		extensions: [
			"jsonml"
		]
	},
		"application/jwk+json": {
		source: "iana",
		compressible: true
	},
		"application/jwk-set+json": {
		source: "iana",
		compressible: true
	},
		"application/jwt": {
		source: "iana"
	},
		"application/kpml-request+xml": {
		source: "iana",
		compressible: true
	},
		"application/kpml-response+xml": {
		source: "iana",
		compressible: true
	},
		"application/ld+json": {
		source: "iana",
		compressible: true,
		extensions: [
			"jsonld"
		]
	},
		"application/lgr+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"lgr"
		]
	},
		"application/link-format": {
		source: "iana"
	},
		"application/load-control+xml": {
		source: "iana",
		compressible: true
	},
		"application/lost+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"lostxml"
		]
	},
		"application/lostsync+xml": {
		source: "iana",
		compressible: true
	},
		"application/lpf+zip": {
		source: "iana",
		compressible: false
	},
		"application/lxf": {
		source: "iana"
	},
		"application/mac-binhex40": {
		source: "iana",
		extensions: [
			"hqx"
		]
	},
		"application/mac-compactpro": {
		source: "apache",
		extensions: [
			"cpt"
		]
	},
		"application/macwriteii": {
		source: "iana"
	},
		"application/mads+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"mads"
		]
	},
		"application/manifest+json": {
		charset: "UTF-8",
		compressible: true,
		extensions: [
			"webmanifest"
		]
	},
		"application/marc": {
		source: "iana",
		extensions: [
			"mrc"
		]
	},
		"application/marcxml+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"mrcx"
		]
	},
		"application/mathematica": {
		source: "iana",
		extensions: [
			"ma",
			"nb",
			"mb"
		]
	},
		"application/mathml+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"mathml"
		]
	},
		"application/mathml-content+xml": {
		source: "iana",
		compressible: true
	},
		"application/mathml-presentation+xml": {
		source: "iana",
		compressible: true
	},
		"application/mbms-associated-procedure-description+xml": {
		source: "iana",
		compressible: true
	},
		"application/mbms-deregister+xml": {
		source: "iana",
		compressible: true
	},
		"application/mbms-envelope+xml": {
		source: "iana",
		compressible: true
	},
		"application/mbms-msk+xml": {
		source: "iana",
		compressible: true
	},
		"application/mbms-msk-response+xml": {
		source: "iana",
		compressible: true
	},
		"application/mbms-protection-description+xml": {
		source: "iana",
		compressible: true
	},
		"application/mbms-reception-report+xml": {
		source: "iana",
		compressible: true
	},
		"application/mbms-register+xml": {
		source: "iana",
		compressible: true
	},
		"application/mbms-register-response+xml": {
		source: "iana",
		compressible: true
	},
		"application/mbms-schedule+xml": {
		source: "iana",
		compressible: true
	},
		"application/mbms-user-service-description+xml": {
		source: "iana",
		compressible: true
	},
		"application/mbox": {
		source: "iana",
		extensions: [
			"mbox"
		]
	},
		"application/media-policy-dataset+xml": {
		source: "iana",
		compressible: true
	},
		"application/media_control+xml": {
		source: "iana",
		compressible: true
	},
		"application/mediaservercontrol+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"mscml"
		]
	},
		"application/merge-patch+json": {
		source: "iana",
		compressible: true
	},
		"application/metalink+xml": {
		source: "apache",
		compressible: true,
		extensions: [
			"metalink"
		]
	},
		"application/metalink4+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"meta4"
		]
	},
		"application/mets+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"mets"
		]
	},
		"application/mf4": {
		source: "iana"
	},
		"application/mikey": {
		source: "iana"
	},
		"application/mipc": {
		source: "iana"
	},
		"application/mmt-aei+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"maei"
		]
	},
		"application/mmt-usd+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"musd"
		]
	},
		"application/mods+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"mods"
		]
	},
		"application/moss-keys": {
		source: "iana"
	},
		"application/moss-signature": {
		source: "iana"
	},
		"application/mosskey-data": {
		source: "iana"
	},
		"application/mosskey-request": {
		source: "iana"
	},
		"application/mp21": {
		source: "iana",
		extensions: [
			"m21",
			"mp21"
		]
	},
		"application/mp4": {
		source: "iana",
		extensions: [
			"mp4s",
			"m4p"
		]
	},
		"application/mpeg4-generic": {
		source: "iana"
	},
		"application/mpeg4-iod": {
		source: "iana"
	},
		"application/mpeg4-iod-xmt": {
		source: "iana"
	},
		"application/mrb-consumer+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"xdf"
		]
	},
		"application/mrb-publish+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"xdf"
		]
	},
		"application/msc-ivr+xml": {
		source: "iana",
		charset: "UTF-8",
		compressible: true
	},
		"application/msc-mixer+xml": {
		source: "iana",
		charset: "UTF-8",
		compressible: true
	},
		"application/msword": {
		source: "iana",
		compressible: false,
		extensions: [
			"doc",
			"dot"
		]
	},
		"application/mud+json": {
		source: "iana",
		compressible: true
	},
		"application/multipart-core": {
		source: "iana"
	},
		"application/mxf": {
		source: "iana",
		extensions: [
			"mxf"
		]
	},
		"application/n-quads": {
		source: "iana",
		extensions: [
			"nq"
		]
	},
		"application/n-triples": {
		source: "iana",
		extensions: [
			"nt"
		]
	},
		"application/nasdata": {
		source: "iana"
	},
		"application/news-checkgroups": {
		source: "iana",
		charset: "US-ASCII"
	},
		"application/news-groupinfo": {
		source: "iana",
		charset: "US-ASCII"
	},
		"application/news-transmission": {
		source: "iana"
	},
		"application/nlsml+xml": {
		source: "iana",
		compressible: true
	},
		"application/node": {
		source: "iana",
		extensions: [
			"cjs"
		]
	},
		"application/nss": {
		source: "iana"
	},
		"application/ocsp-request": {
		source: "iana"
	},
		"application/ocsp-response": {
		source: "iana"
	},
		"application/octet-stream": {
		source: "iana",
		compressible: false,
		extensions: [
			"bin",
			"dms",
			"lrf",
			"mar",
			"so",
			"dist",
			"distz",
			"pkg",
			"bpk",
			"dump",
			"elc",
			"deploy",
			"exe",
			"dll",
			"deb",
			"dmg",
			"iso",
			"img",
			"msi",
			"msp",
			"msm",
			"buffer"
		]
	},
		"application/oda": {
		source: "iana",
		extensions: [
			"oda"
		]
	},
		"application/odm+xml": {
		source: "iana",
		compressible: true
	},
		"application/odx": {
		source: "iana"
	},
		"application/oebps-package+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"opf"
		]
	},
		"application/ogg": {
		source: "iana",
		compressible: false,
		extensions: [
			"ogx"
		]
	},
		"application/omdoc+xml": {
		source: "apache",
		compressible: true,
		extensions: [
			"omdoc"
		]
	},
		"application/onenote": {
		source: "apache",
		extensions: [
			"onetoc",
			"onetoc2",
			"onetmp",
			"onepkg"
		]
	},
		"application/opc-nodeset+xml": {
		source: "iana",
		compressible: true
	},
		"application/oscore": {
		source: "iana"
	},
		"application/oxps": {
		source: "iana",
		extensions: [
			"oxps"
		]
	},
		"application/p2p-overlay+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"relo"
		]
	},
		"application/parityfec": {
		source: "iana"
	},
		"application/passport": {
		source: "iana"
	},
		"application/patch-ops-error+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"xer"
		]
	},
		"application/pdf": {
		source: "iana",
		compressible: false,
		extensions: [
			"pdf"
		]
	},
		"application/pdx": {
		source: "iana"
	},
		"application/pem-certificate-chain": {
		source: "iana"
	},
		"application/pgp-encrypted": {
		source: "iana",
		compressible: false,
		extensions: [
			"pgp"
		]
	},
		"application/pgp-keys": {
		source: "iana"
	},
		"application/pgp-signature": {
		source: "iana",
		extensions: [
			"asc",
			"sig"
		]
	},
		"application/pics-rules": {
		source: "apache",
		extensions: [
			"prf"
		]
	},
		"application/pidf+xml": {
		source: "iana",
		charset: "UTF-8",
		compressible: true
	},
		"application/pidf-diff+xml": {
		source: "iana",
		charset: "UTF-8",
		compressible: true
	},
		"application/pkcs10": {
		source: "iana",
		extensions: [
			"p10"
		]
	},
		"application/pkcs12": {
		source: "iana"
	},
		"application/pkcs7-mime": {
		source: "iana",
		extensions: [
			"p7m",
			"p7c"
		]
	},
		"application/pkcs7-signature": {
		source: "iana",
		extensions: [
			"p7s"
		]
	},
		"application/pkcs8": {
		source: "iana",
		extensions: [
			"p8"
		]
	},
		"application/pkcs8-encrypted": {
		source: "iana"
	},
		"application/pkix-attr-cert": {
		source: "iana",
		extensions: [
			"ac"
		]
	},
		"application/pkix-cert": {
		source: "iana",
		extensions: [
			"cer"
		]
	},
		"application/pkix-crl": {
		source: "iana",
		extensions: [
			"crl"
		]
	},
		"application/pkix-pkipath": {
		source: "iana",
		extensions: [
			"pkipath"
		]
	},
		"application/pkixcmp": {
		source: "iana",
		extensions: [
			"pki"
		]
	},
		"application/pls+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"pls"
		]
	},
		"application/poc-settings+xml": {
		source: "iana",
		charset: "UTF-8",
		compressible: true
	},
		"application/postscript": {
		source: "iana",
		compressible: true,
		extensions: [
			"ai",
			"eps",
			"ps"
		]
	},
		"application/ppsp-tracker+json": {
		source: "iana",
		compressible: true
	},
		"application/problem+json": {
		source: "iana",
		compressible: true
	},
		"application/problem+xml": {
		source: "iana",
		compressible: true
	},
		"application/provenance+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"provx"
		]
	},
		"application/prs.alvestrand.titrax-sheet": {
		source: "iana"
	},
		"application/prs.cww": {
		source: "iana",
		extensions: [
			"cww"
		]
	},
		"application/prs.cyn": {
		source: "iana",
		charset: "7-BIT"
	},
		"application/prs.hpub+zip": {
		source: "iana",
		compressible: false
	},
		"application/prs.nprend": {
		source: "iana"
	},
		"application/prs.plucker": {
		source: "iana"
	},
		"application/prs.rdf-xml-crypt": {
		source: "iana"
	},
		"application/prs.xsf+xml": {
		source: "iana",
		compressible: true
	},
		"application/pskc+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"pskcxml"
		]
	},
		"application/pvd+json": {
		source: "iana",
		compressible: true
	},
		"application/qsig": {
		source: "iana"
	},
		"application/raml+yaml": {
		compressible: true,
		extensions: [
			"raml"
		]
	},
		"application/raptorfec": {
		source: "iana"
	},
		"application/rdap+json": {
		source: "iana",
		compressible: true
	},
		"application/rdf+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"rdf",
			"owl"
		]
	},
		"application/reginfo+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"rif"
		]
	},
		"application/relax-ng-compact-syntax": {
		source: "iana",
		extensions: [
			"rnc"
		]
	},
		"application/remote-printing": {
		source: "iana"
	},
		"application/reputon+json": {
		source: "iana",
		compressible: true
	},
		"application/resource-lists+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"rl"
		]
	},
		"application/resource-lists-diff+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"rld"
		]
	},
		"application/rfc+xml": {
		source: "iana",
		compressible: true
	},
		"application/riscos": {
		source: "iana"
	},
		"application/rlmi+xml": {
		source: "iana",
		compressible: true
	},
		"application/rls-services+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"rs"
		]
	},
		"application/route-apd+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"rapd"
		]
	},
		"application/route-s-tsid+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"sls"
		]
	},
		"application/route-usd+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"rusd"
		]
	},
		"application/rpki-ghostbusters": {
		source: "iana",
		extensions: [
			"gbr"
		]
	},
		"application/rpki-manifest": {
		source: "iana",
		extensions: [
			"mft"
		]
	},
		"application/rpki-publication": {
		source: "iana"
	},
		"application/rpki-roa": {
		source: "iana",
		extensions: [
			"roa"
		]
	},
		"application/rpki-updown": {
		source: "iana"
	},
		"application/rsd+xml": {
		source: "apache",
		compressible: true,
		extensions: [
			"rsd"
		]
	},
		"application/rss+xml": {
		source: "apache",
		compressible: true,
		extensions: [
			"rss"
		]
	},
		"application/rtf": {
		source: "iana",
		compressible: true,
		extensions: [
			"rtf"
		]
	},
		"application/rtploopback": {
		source: "iana"
	},
		"application/rtx": {
		source: "iana"
	},
		"application/samlassertion+xml": {
		source: "iana",
		compressible: true
	},
		"application/samlmetadata+xml": {
		source: "iana",
		compressible: true
	},
		"application/sarif+json": {
		source: "iana",
		compressible: true
	},
		"application/sbe": {
		source: "iana"
	},
		"application/sbml+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"sbml"
		]
	},
		"application/scaip+xml": {
		source: "iana",
		compressible: true
	},
		"application/scim+json": {
		source: "iana",
		compressible: true
	},
		"application/scvp-cv-request": {
		source: "iana",
		extensions: [
			"scq"
		]
	},
		"application/scvp-cv-response": {
		source: "iana",
		extensions: [
			"scs"
		]
	},
		"application/scvp-vp-request": {
		source: "iana",
		extensions: [
			"spq"
		]
	},
		"application/scvp-vp-response": {
		source: "iana",
		extensions: [
			"spp"
		]
	},
		"application/sdp": {
		source: "iana",
		extensions: [
			"sdp"
		]
	},
		"application/secevent+jwt": {
		source: "iana"
	},
		"application/senml+cbor": {
		source: "iana"
	},
		"application/senml+json": {
		source: "iana",
		compressible: true
	},
		"application/senml+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"senmlx"
		]
	},
		"application/senml-etch+cbor": {
		source: "iana"
	},
		"application/senml-etch+json": {
		source: "iana",
		compressible: true
	},
		"application/senml-exi": {
		source: "iana"
	},
		"application/sensml+cbor": {
		source: "iana"
	},
		"application/sensml+json": {
		source: "iana",
		compressible: true
	},
		"application/sensml+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"sensmlx"
		]
	},
		"application/sensml-exi": {
		source: "iana"
	},
		"application/sep+xml": {
		source: "iana",
		compressible: true
	},
		"application/sep-exi": {
		source: "iana"
	},
		"application/session-info": {
		source: "iana"
	},
		"application/set-payment": {
		source: "iana"
	},
		"application/set-payment-initiation": {
		source: "iana",
		extensions: [
			"setpay"
		]
	},
		"application/set-registration": {
		source: "iana"
	},
		"application/set-registration-initiation": {
		source: "iana",
		extensions: [
			"setreg"
		]
	},
		"application/sgml": {
		source: "iana"
	},
		"application/sgml-open-catalog": {
		source: "iana"
	},
		"application/shf+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"shf"
		]
	},
		"application/sieve": {
		source: "iana",
		extensions: [
			"siv",
			"sieve"
		]
	},
		"application/simple-filter+xml": {
		source: "iana",
		compressible: true
	},
		"application/simple-message-summary": {
		source: "iana"
	},
		"application/simplesymbolcontainer": {
		source: "iana"
	},
		"application/sipc": {
		source: "iana"
	},
		"application/slate": {
		source: "iana"
	},
		"application/smil": {
		source: "iana"
	},
		"application/smil+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"smi",
			"smil"
		]
	},
		"application/smpte336m": {
		source: "iana"
	},
		"application/soap+fastinfoset": {
		source: "iana"
	},
		"application/soap+xml": {
		source: "iana",
		compressible: true
	},
		"application/sparql-query": {
		source: "iana",
		extensions: [
			"rq"
		]
	},
		"application/sparql-results+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"srx"
		]
	},
		"application/spirits-event+xml": {
		source: "iana",
		compressible: true
	},
		"application/sql": {
		source: "iana"
	},
		"application/srgs": {
		source: "iana",
		extensions: [
			"gram"
		]
	},
		"application/srgs+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"grxml"
		]
	},
		"application/sru+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"sru"
		]
	},
		"application/ssdl+xml": {
		source: "apache",
		compressible: true,
		extensions: [
			"ssdl"
		]
	},
		"application/ssml+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"ssml"
		]
	},
		"application/stix+json": {
		source: "iana",
		compressible: true
	},
		"application/swid+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"swidtag"
		]
	},
		"application/tamp-apex-update": {
		source: "iana"
	},
		"application/tamp-apex-update-confirm": {
		source: "iana"
	},
		"application/tamp-community-update": {
		source: "iana"
	},
		"application/tamp-community-update-confirm": {
		source: "iana"
	},
		"application/tamp-error": {
		source: "iana"
	},
		"application/tamp-sequence-adjust": {
		source: "iana"
	},
		"application/tamp-sequence-adjust-confirm": {
		source: "iana"
	},
		"application/tamp-status-query": {
		source: "iana"
	},
		"application/tamp-status-response": {
		source: "iana"
	},
		"application/tamp-update": {
		source: "iana"
	},
		"application/tamp-update-confirm": {
		source: "iana"
	},
		"application/tar": {
		compressible: true
	},
		"application/taxii+json": {
		source: "iana",
		compressible: true
	},
		"application/td+json": {
		source: "iana",
		compressible: true
	},
		"application/tei+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"tei",
			"teicorpus"
		]
	},
		"application/tetra_isi": {
		source: "iana"
	},
		"application/thraud+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"tfi"
		]
	},
		"application/timestamp-query": {
		source: "iana"
	},
		"application/timestamp-reply": {
		source: "iana"
	},
		"application/timestamped-data": {
		source: "iana",
		extensions: [
			"tsd"
		]
	},
		"application/tlsrpt+gzip": {
		source: "iana"
	},
		"application/tlsrpt+json": {
		source: "iana",
		compressible: true
	},
		"application/tnauthlist": {
		source: "iana"
	},
		"application/toml": {
		compressible: true,
		extensions: [
			"toml"
		]
	},
		"application/trickle-ice-sdpfrag": {
		source: "iana"
	},
		"application/trig": {
		source: "iana"
	},
		"application/ttml+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"ttml"
		]
	},
		"application/tve-trigger": {
		source: "iana"
	},
		"application/tzif": {
		source: "iana"
	},
		"application/tzif-leap": {
		source: "iana"
	},
		"application/ubjson": {
		compressible: false,
		extensions: [
			"ubj"
		]
	},
		"application/ulpfec": {
		source: "iana"
	},
		"application/urc-grpsheet+xml": {
		source: "iana",
		compressible: true
	},
		"application/urc-ressheet+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"rsheet"
		]
	},
		"application/urc-targetdesc+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"td"
		]
	},
		"application/urc-uisocketdesc+xml": {
		source: "iana",
		compressible: true
	},
		"application/vcard+json": {
		source: "iana",
		compressible: true
	},
		"application/vcard+xml": {
		source: "iana",
		compressible: true
	},
		"application/vemmi": {
		source: "iana"
	},
		"application/vividence.scriptfile": {
		source: "apache"
	},
		"application/vnd.1000minds.decision-model+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"1km"
		]
	},
		"application/vnd.3gpp-prose+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp-prose-pc3ch+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp-v2x-local-service-information": {
		source: "iana"
	},
		"application/vnd.3gpp.access-transfer-events+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.bsf+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.gmop+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.interworking-data": {
		source: "iana"
	},
		"application/vnd.3gpp.mc-signalling-ear": {
		source: "iana"
	},
		"application/vnd.3gpp.mcdata-affiliation-command+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.mcdata-info+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.mcdata-payload": {
		source: "iana"
	},
		"application/vnd.3gpp.mcdata-service-config+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.mcdata-signalling": {
		source: "iana"
	},
		"application/vnd.3gpp.mcdata-ue-config+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.mcdata-user-profile+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.mcptt-affiliation-command+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.mcptt-floor-request+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.mcptt-info+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.mcptt-location-info+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.mcptt-mbms-usage-info+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.mcptt-service-config+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.mcptt-signed+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.mcptt-ue-config+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.mcptt-ue-init-config+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.mcptt-user-profile+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.mcvideo-affiliation-command+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.mcvideo-affiliation-info+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.mcvideo-info+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.mcvideo-location-info+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.mcvideo-mbms-usage-info+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.mcvideo-service-config+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.mcvideo-transmission-request+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.mcvideo-ue-config+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.mcvideo-user-profile+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.mid-call+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.pic-bw-large": {
		source: "iana",
		extensions: [
			"plb"
		]
	},
		"application/vnd.3gpp.pic-bw-small": {
		source: "iana",
		extensions: [
			"psb"
		]
	},
		"application/vnd.3gpp.pic-bw-var": {
		source: "iana",
		extensions: [
			"pvb"
		]
	},
		"application/vnd.3gpp.sms": {
		source: "iana"
	},
		"application/vnd.3gpp.sms+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.srvcc-ext+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.srvcc-info+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.state-and-event-info+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.ussd+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp2.bcmcsinfo+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp2.sms": {
		source: "iana"
	},
		"application/vnd.3gpp2.tcap": {
		source: "iana",
		extensions: [
			"tcap"
		]
	},
		"application/vnd.3lightssoftware.imagescal": {
		source: "iana"
	},
		"application/vnd.3m.post-it-notes": {
		source: "iana",
		extensions: [
			"pwn"
		]
	},
		"application/vnd.accpac.simply.aso": {
		source: "iana",
		extensions: [
			"aso"
		]
	},
		"application/vnd.accpac.simply.imp": {
		source: "iana",
		extensions: [
			"imp"
		]
	},
		"application/vnd.acucobol": {
		source: "iana",
		extensions: [
			"acu"
		]
	},
		"application/vnd.acucorp": {
		source: "iana",
		extensions: [
			"atc",
			"acutc"
		]
	},
		"application/vnd.adobe.air-application-installer-package+zip": {
		source: "apache",
		compressible: false,
		extensions: [
			"air"
		]
	},
		"application/vnd.adobe.flash.movie": {
		source: "iana"
	},
		"application/vnd.adobe.formscentral.fcdt": {
		source: "iana",
		extensions: [
			"fcdt"
		]
	},
		"application/vnd.adobe.fxp": {
		source: "iana",
		extensions: [
			"fxp",
			"fxpl"
		]
	},
		"application/vnd.adobe.partial-upload": {
		source: "iana"
	},
		"application/vnd.adobe.xdp+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"xdp"
		]
	},
		"application/vnd.adobe.xfdf": {
		source: "iana",
		extensions: [
			"xfdf"
		]
	},
		"application/vnd.aether.imp": {
		source: "iana"
	},
		"application/vnd.afpc.afplinedata": {
		source: "iana"
	},
		"application/vnd.afpc.afplinedata-pagedef": {
		source: "iana"
	},
		"application/vnd.afpc.cmoca-cmresource": {
		source: "iana"
	},
		"application/vnd.afpc.foca-charset": {
		source: "iana"
	},
		"application/vnd.afpc.foca-codedfont": {
		source: "iana"
	},
		"application/vnd.afpc.foca-codepage": {
		source: "iana"
	},
		"application/vnd.afpc.modca": {
		source: "iana"
	},
		"application/vnd.afpc.modca-cmtable": {
		source: "iana"
	},
		"application/vnd.afpc.modca-formdef": {
		source: "iana"
	},
		"application/vnd.afpc.modca-mediummap": {
		source: "iana"
	},
		"application/vnd.afpc.modca-objectcontainer": {
		source: "iana"
	},
		"application/vnd.afpc.modca-overlay": {
		source: "iana"
	},
		"application/vnd.afpc.modca-pagesegment": {
		source: "iana"
	},
		"application/vnd.ah-barcode": {
		source: "iana"
	},
		"application/vnd.ahead.space": {
		source: "iana",
		extensions: [
			"ahead"
		]
	},
		"application/vnd.airzip.filesecure.azf": {
		source: "iana",
		extensions: [
			"azf"
		]
	},
		"application/vnd.airzip.filesecure.azs": {
		source: "iana",
		extensions: [
			"azs"
		]
	},
		"application/vnd.amadeus+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.amazon.ebook": {
		source: "apache",
		extensions: [
			"azw"
		]
	},
		"application/vnd.amazon.mobi8-ebook": {
		source: "iana"
	},
		"application/vnd.americandynamics.acc": {
		source: "iana",
		extensions: [
			"acc"
		]
	},
		"application/vnd.amiga.ami": {
		source: "iana",
		extensions: [
			"ami"
		]
	},
		"application/vnd.amundsen.maze+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.android.ota": {
		source: "iana"
	},
		"application/vnd.android.package-archive": {
		source: "apache",
		compressible: false,
		extensions: [
			"apk"
		]
	},
		"application/vnd.anki": {
		source: "iana"
	},
		"application/vnd.anser-web-certificate-issue-initiation": {
		source: "iana",
		extensions: [
			"cii"
		]
	},
		"application/vnd.anser-web-funds-transfer-initiation": {
		source: "apache",
		extensions: [
			"fti"
		]
	},
		"application/vnd.antix.game-component": {
		source: "iana",
		extensions: [
			"atx"
		]
	},
		"application/vnd.apache.thrift.binary": {
		source: "iana"
	},
		"application/vnd.apache.thrift.compact": {
		source: "iana"
	},
		"application/vnd.apache.thrift.json": {
		source: "iana"
	},
		"application/vnd.api+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.aplextor.warrp+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.apothekende.reservation+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.apple.installer+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"mpkg"
		]
	},
		"application/vnd.apple.keynote": {
		source: "iana",
		extensions: [
			"key"
		]
	},
		"application/vnd.apple.mpegurl": {
		source: "iana",
		extensions: [
			"m3u8"
		]
	},
		"application/vnd.apple.numbers": {
		source: "iana",
		extensions: [
			"numbers"
		]
	},
		"application/vnd.apple.pages": {
		source: "iana",
		extensions: [
			"pages"
		]
	},
		"application/vnd.apple.pkpass": {
		compressible: false,
		extensions: [
			"pkpass"
		]
	},
		"application/vnd.arastra.swi": {
		source: "iana"
	},
		"application/vnd.aristanetworks.swi": {
		source: "iana",
		extensions: [
			"swi"
		]
	},
		"application/vnd.artisan+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.artsquare": {
		source: "iana"
	},
		"application/vnd.astraea-software.iota": {
		source: "iana",
		extensions: [
			"iota"
		]
	},
		"application/vnd.audiograph": {
		source: "iana",
		extensions: [
			"aep"
		]
	},
		"application/vnd.autopackage": {
		source: "iana"
	},
		"application/vnd.avalon+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.avistar+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.balsamiq.bmml+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"bmml"
		]
	},
		"application/vnd.balsamiq.bmpr": {
		source: "iana"
	},
		"application/vnd.banana-accounting": {
		source: "iana"
	},
		"application/vnd.bbf.usp.error": {
		source: "iana"
	},
		"application/vnd.bbf.usp.msg": {
		source: "iana"
	},
		"application/vnd.bbf.usp.msg+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.bekitzur-stech+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.bint.med-content": {
		source: "iana"
	},
		"application/vnd.biopax.rdf+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.blink-idb-value-wrapper": {
		source: "iana"
	},
		"application/vnd.blueice.multipass": {
		source: "iana",
		extensions: [
			"mpm"
		]
	},
		"application/vnd.bluetooth.ep.oob": {
		source: "iana"
	},
		"application/vnd.bluetooth.le.oob": {
		source: "iana"
	},
		"application/vnd.bmi": {
		source: "iana",
		extensions: [
			"bmi"
		]
	},
		"application/vnd.bpf": {
		source: "iana"
	},
		"application/vnd.bpf3": {
		source: "iana"
	},
		"application/vnd.businessobjects": {
		source: "iana",
		extensions: [
			"rep"
		]
	},
		"application/vnd.byu.uapi+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.cab-jscript": {
		source: "iana"
	},
		"application/vnd.canon-cpdl": {
		source: "iana"
	},
		"application/vnd.canon-lips": {
		source: "iana"
	},
		"application/vnd.capasystems-pg+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.cendio.thinlinc.clientconf": {
		source: "iana"
	},
		"application/vnd.century-systems.tcp_stream": {
		source: "iana"
	},
		"application/vnd.chemdraw+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"cdxml"
		]
	},
		"application/vnd.chess-pgn": {
		source: "iana"
	},
		"application/vnd.chipnuts.karaoke-mmd": {
		source: "iana",
		extensions: [
			"mmd"
		]
	},
		"application/vnd.ciedi": {
		source: "iana"
	},
		"application/vnd.cinderella": {
		source: "iana",
		extensions: [
			"cdy"
		]
	},
		"application/vnd.cirpack.isdn-ext": {
		source: "iana"
	},
		"application/vnd.citationstyles.style+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"csl"
		]
	},
		"application/vnd.claymore": {
		source: "iana",
		extensions: [
			"cla"
		]
	},
		"application/vnd.cloanto.rp9": {
		source: "iana",
		extensions: [
			"rp9"
		]
	},
		"application/vnd.clonk.c4group": {
		source: "iana",
		extensions: [
			"c4g",
			"c4d",
			"c4f",
			"c4p",
			"c4u"
		]
	},
		"application/vnd.cluetrust.cartomobile-config": {
		source: "iana",
		extensions: [
			"c11amc"
		]
	},
		"application/vnd.cluetrust.cartomobile-config-pkg": {
		source: "iana",
		extensions: [
			"c11amz"
		]
	},
		"application/vnd.coffeescript": {
		source: "iana"
	},
		"application/vnd.collabio.xodocuments.document": {
		source: "iana"
	},
		"application/vnd.collabio.xodocuments.document-template": {
		source: "iana"
	},
		"application/vnd.collabio.xodocuments.presentation": {
		source: "iana"
	},
		"application/vnd.collabio.xodocuments.presentation-template": {
		source: "iana"
	},
		"application/vnd.collabio.xodocuments.spreadsheet": {
		source: "iana"
	},
		"application/vnd.collabio.xodocuments.spreadsheet-template": {
		source: "iana"
	},
		"application/vnd.collection+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.collection.doc+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.collection.next+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.comicbook+zip": {
		source: "iana",
		compressible: false
	},
		"application/vnd.comicbook-rar": {
		source: "iana"
	},
		"application/vnd.commerce-battelle": {
		source: "iana"
	},
		"application/vnd.commonspace": {
		source: "iana",
		extensions: [
			"csp"
		]
	},
		"application/vnd.contact.cmsg": {
		source: "iana",
		extensions: [
			"cdbcmsg"
		]
	},
		"application/vnd.coreos.ignition+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.cosmocaller": {
		source: "iana",
		extensions: [
			"cmc"
		]
	},
		"application/vnd.crick.clicker": {
		source: "iana",
		extensions: [
			"clkx"
		]
	},
		"application/vnd.crick.clicker.keyboard": {
		source: "iana",
		extensions: [
			"clkk"
		]
	},
		"application/vnd.crick.clicker.palette": {
		source: "iana",
		extensions: [
			"clkp"
		]
	},
		"application/vnd.crick.clicker.template": {
		source: "iana",
		extensions: [
			"clkt"
		]
	},
		"application/vnd.crick.clicker.wordbank": {
		source: "iana",
		extensions: [
			"clkw"
		]
	},
		"application/vnd.criticaltools.wbs+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"wbs"
		]
	},
		"application/vnd.cryptii.pipe+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.crypto-shade-file": {
		source: "iana"
	},
		"application/vnd.ctc-posml": {
		source: "iana",
		extensions: [
			"pml"
		]
	},
		"application/vnd.ctct.ws+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.cups-pdf": {
		source: "iana"
	},
		"application/vnd.cups-postscript": {
		source: "iana"
	},
		"application/vnd.cups-ppd": {
		source: "iana",
		extensions: [
			"ppd"
		]
	},
		"application/vnd.cups-raster": {
		source: "iana"
	},
		"application/vnd.cups-raw": {
		source: "iana"
	},
		"application/vnd.curl": {
		source: "iana"
	},
		"application/vnd.curl.car": {
		source: "apache",
		extensions: [
			"car"
		]
	},
		"application/vnd.curl.pcurl": {
		source: "apache",
		extensions: [
			"pcurl"
		]
	},
		"application/vnd.cyan.dean.root+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.cybank": {
		source: "iana"
	},
		"application/vnd.cyclonedx+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.cyclonedx+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.d2l.coursepackage1p0+zip": {
		source: "iana",
		compressible: false
	},
		"application/vnd.d3m-dataset": {
		source: "iana"
	},
		"application/vnd.d3m-problem": {
		source: "iana"
	},
		"application/vnd.dart": {
		source: "iana",
		compressible: true,
		extensions: [
			"dart"
		]
	},
		"application/vnd.data-vision.rdz": {
		source: "iana",
		extensions: [
			"rdz"
		]
	},
		"application/vnd.datapackage+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.dataresource+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.dbf": {
		source: "iana",
		extensions: [
			"dbf"
		]
	},
		"application/vnd.debian.binary-package": {
		source: "iana"
	},
		"application/vnd.dece.data": {
		source: "iana",
		extensions: [
			"uvf",
			"uvvf",
			"uvd",
			"uvvd"
		]
	},
		"application/vnd.dece.ttml+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"uvt",
			"uvvt"
		]
	},
		"application/vnd.dece.unspecified": {
		source: "iana",
		extensions: [
			"uvx",
			"uvvx"
		]
	},
		"application/vnd.dece.zip": {
		source: "iana",
		extensions: [
			"uvz",
			"uvvz"
		]
	},
		"application/vnd.denovo.fcselayout-link": {
		source: "iana",
		extensions: [
			"fe_launch"
		]
	},
		"application/vnd.desmume.movie": {
		source: "iana"
	},
		"application/vnd.dir-bi.plate-dl-nosuffix": {
		source: "iana"
	},
		"application/vnd.dm.delegation+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.dna": {
		source: "iana",
		extensions: [
			"dna"
		]
	},
		"application/vnd.document+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.dolby.mlp": {
		source: "apache",
		extensions: [
			"mlp"
		]
	},
		"application/vnd.dolby.mobile.1": {
		source: "iana"
	},
		"application/vnd.dolby.mobile.2": {
		source: "iana"
	},
		"application/vnd.doremir.scorecloud-binary-document": {
		source: "iana"
	},
		"application/vnd.dpgraph": {
		source: "iana",
		extensions: [
			"dpg"
		]
	},
		"application/vnd.dreamfactory": {
		source: "iana",
		extensions: [
			"dfac"
		]
	},
		"application/vnd.drive+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.ds-keypoint": {
		source: "apache",
		extensions: [
			"kpxx"
		]
	},
		"application/vnd.dtg.local": {
		source: "iana"
	},
		"application/vnd.dtg.local.flash": {
		source: "iana"
	},
		"application/vnd.dtg.local.html": {
		source: "iana"
	},
		"application/vnd.dvb.ait": {
		source: "iana",
		extensions: [
			"ait"
		]
	},
		"application/vnd.dvb.dvbisl+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.dvb.dvbj": {
		source: "iana"
	},
		"application/vnd.dvb.esgcontainer": {
		source: "iana"
	},
		"application/vnd.dvb.ipdcdftnotifaccess": {
		source: "iana"
	},
		"application/vnd.dvb.ipdcesgaccess": {
		source: "iana"
	},
		"application/vnd.dvb.ipdcesgaccess2": {
		source: "iana"
	},
		"application/vnd.dvb.ipdcesgpdd": {
		source: "iana"
	},
		"application/vnd.dvb.ipdcroaming": {
		source: "iana"
	},
		"application/vnd.dvb.iptv.alfec-base": {
		source: "iana"
	},
		"application/vnd.dvb.iptv.alfec-enhancement": {
		source: "iana"
	},
		"application/vnd.dvb.notif-aggregate-root+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.dvb.notif-container+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.dvb.notif-generic+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.dvb.notif-ia-msglist+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.dvb.notif-ia-registration-request+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.dvb.notif-ia-registration-response+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.dvb.notif-init+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.dvb.pfr": {
		source: "iana"
	},
		"application/vnd.dvb.service": {
		source: "iana",
		extensions: [
			"svc"
		]
	},
		"application/vnd.dxr": {
		source: "iana"
	},
		"application/vnd.dynageo": {
		source: "iana",
		extensions: [
			"geo"
		]
	},
		"application/vnd.dzr": {
		source: "iana"
	},
		"application/vnd.easykaraoke.cdgdownload": {
		source: "iana"
	},
		"application/vnd.ecdis-update": {
		source: "iana"
	},
		"application/vnd.ecip.rlp": {
		source: "iana"
	},
		"application/vnd.ecowin.chart": {
		source: "iana",
		extensions: [
			"mag"
		]
	},
		"application/vnd.ecowin.filerequest": {
		source: "iana"
	},
		"application/vnd.ecowin.fileupdate": {
		source: "iana"
	},
		"application/vnd.ecowin.series": {
		source: "iana"
	},
		"application/vnd.ecowin.seriesrequest": {
		source: "iana"
	},
		"application/vnd.ecowin.seriesupdate": {
		source: "iana"
	},
		"application/vnd.efi.img": {
		source: "iana"
	},
		"application/vnd.efi.iso": {
		source: "iana"
	},
		"application/vnd.emclient.accessrequest+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.enliven": {
		source: "iana",
		extensions: [
			"nml"
		]
	},
		"application/vnd.enphase.envoy": {
		source: "iana"
	},
		"application/vnd.eprints.data+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.epson.esf": {
		source: "iana",
		extensions: [
			"esf"
		]
	},
		"application/vnd.epson.msf": {
		source: "iana",
		extensions: [
			"msf"
		]
	},
		"application/vnd.epson.quickanime": {
		source: "iana",
		extensions: [
			"qam"
		]
	},
		"application/vnd.epson.salt": {
		source: "iana",
		extensions: [
			"slt"
		]
	},
		"application/vnd.epson.ssf": {
		source: "iana",
		extensions: [
			"ssf"
		]
	},
		"application/vnd.ericsson.quickcall": {
		source: "iana"
	},
		"application/vnd.espass-espass+zip": {
		source: "iana",
		compressible: false
	},
		"application/vnd.eszigno3+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"es3",
			"et3"
		]
	},
		"application/vnd.etsi.aoc+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.etsi.asic-e+zip": {
		source: "iana",
		compressible: false
	},
		"application/vnd.etsi.asic-s+zip": {
		source: "iana",
		compressible: false
	},
		"application/vnd.etsi.cug+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.etsi.iptvcommand+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.etsi.iptvdiscovery+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.etsi.iptvprofile+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.etsi.iptvsad-bc+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.etsi.iptvsad-cod+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.etsi.iptvsad-npvr+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.etsi.iptvservice+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.etsi.iptvsync+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.etsi.iptvueprofile+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.etsi.mcid+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.etsi.mheg5": {
		source: "iana"
	},
		"application/vnd.etsi.overload-control-policy-dataset+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.etsi.pstn+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.etsi.sci+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.etsi.simservs+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.etsi.timestamp-token": {
		source: "iana"
	},
		"application/vnd.etsi.tsl+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.etsi.tsl.der": {
		source: "iana"
	},
		"application/vnd.eudora.data": {
		source: "iana"
	},
		"application/vnd.evolv.ecig.profile": {
		source: "iana"
	},
		"application/vnd.evolv.ecig.settings": {
		source: "iana"
	},
		"application/vnd.evolv.ecig.theme": {
		source: "iana"
	},
		"application/vnd.exstream-empower+zip": {
		source: "iana",
		compressible: false
	},
		"application/vnd.exstream-package": {
		source: "iana"
	},
		"application/vnd.ezpix-album": {
		source: "iana",
		extensions: [
			"ez2"
		]
	},
		"application/vnd.ezpix-package": {
		source: "iana",
		extensions: [
			"ez3"
		]
	},
		"application/vnd.f-secure.mobile": {
		source: "iana"
	},
		"application/vnd.fastcopy-disk-image": {
		source: "iana"
	},
		"application/vnd.fdf": {
		source: "iana",
		extensions: [
			"fdf"
		]
	},
		"application/vnd.fdsn.mseed": {
		source: "iana",
		extensions: [
			"mseed"
		]
	},
		"application/vnd.fdsn.seed": {
		source: "iana",
		extensions: [
			"seed",
			"dataless"
		]
	},
		"application/vnd.ffsns": {
		source: "iana"
	},
		"application/vnd.ficlab.flb+zip": {
		source: "iana",
		compressible: false
	},
		"application/vnd.filmit.zfc": {
		source: "iana"
	},
		"application/vnd.fints": {
		source: "iana"
	},
		"application/vnd.firemonkeys.cloudcell": {
		source: "iana"
	},
		"application/vnd.flographit": {
		source: "iana",
		extensions: [
			"gph"
		]
	},
		"application/vnd.fluxtime.clip": {
		source: "iana",
		extensions: [
			"ftc"
		]
	},
		"application/vnd.font-fontforge-sfd": {
		source: "iana"
	},
		"application/vnd.framemaker": {
		source: "iana",
		extensions: [
			"fm",
			"frame",
			"maker",
			"book"
		]
	},
		"application/vnd.frogans.fnc": {
		source: "iana",
		extensions: [
			"fnc"
		]
	},
		"application/vnd.frogans.ltf": {
		source: "iana",
		extensions: [
			"ltf"
		]
	},
		"application/vnd.fsc.weblaunch": {
		source: "iana",
		extensions: [
			"fsc"
		]
	},
		"application/vnd.fujitsu.oasys": {
		source: "iana",
		extensions: [
			"oas"
		]
	},
		"application/vnd.fujitsu.oasys2": {
		source: "iana",
		extensions: [
			"oa2"
		]
	},
		"application/vnd.fujitsu.oasys3": {
		source: "iana",
		extensions: [
			"oa3"
		]
	},
		"application/vnd.fujitsu.oasysgp": {
		source: "iana",
		extensions: [
			"fg5"
		]
	},
		"application/vnd.fujitsu.oasysprs": {
		source: "iana",
		extensions: [
			"bh2"
		]
	},
		"application/vnd.fujixerox.art-ex": {
		source: "iana"
	},
		"application/vnd.fujixerox.art4": {
		source: "iana"
	},
		"application/vnd.fujixerox.ddd": {
		source: "iana",
		extensions: [
			"ddd"
		]
	},
		"application/vnd.fujixerox.docuworks": {
		source: "iana",
		extensions: [
			"xdw"
		]
	},
		"application/vnd.fujixerox.docuworks.binder": {
		source: "iana",
		extensions: [
			"xbd"
		]
	},
		"application/vnd.fujixerox.docuworks.container": {
		source: "iana"
	},
		"application/vnd.fujixerox.hbpl": {
		source: "iana"
	},
		"application/vnd.fut-misnet": {
		source: "iana"
	},
		"application/vnd.futoin+cbor": {
		source: "iana"
	},
		"application/vnd.futoin+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.fuzzysheet": {
		source: "iana",
		extensions: [
			"fzs"
		]
	},
		"application/vnd.genomatix.tuxedo": {
		source: "iana",
		extensions: [
			"txd"
		]
	},
		"application/vnd.gentics.grd+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.geo+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.geocube+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.geogebra.file": {
		source: "iana",
		extensions: [
			"ggb"
		]
	},
		"application/vnd.geogebra.slides": {
		source: "iana"
	},
		"application/vnd.geogebra.tool": {
		source: "iana",
		extensions: [
			"ggt"
		]
	},
		"application/vnd.geometry-explorer": {
		source: "iana",
		extensions: [
			"gex",
			"gre"
		]
	},
		"application/vnd.geonext": {
		source: "iana",
		extensions: [
			"gxt"
		]
	},
		"application/vnd.geoplan": {
		source: "iana",
		extensions: [
			"g2w"
		]
	},
		"application/vnd.geospace": {
		source: "iana",
		extensions: [
			"g3w"
		]
	},
		"application/vnd.gerber": {
		source: "iana"
	},
		"application/vnd.globalplatform.card-content-mgt": {
		source: "iana"
	},
		"application/vnd.globalplatform.card-content-mgt-response": {
		source: "iana"
	},
		"application/vnd.gmx": {
		source: "iana",
		extensions: [
			"gmx"
		]
	},
		"application/vnd.google-apps.document": {
		compressible: false,
		extensions: [
			"gdoc"
		]
	},
		"application/vnd.google-apps.presentation": {
		compressible: false,
		extensions: [
			"gslides"
		]
	},
		"application/vnd.google-apps.spreadsheet": {
		compressible: false,
		extensions: [
			"gsheet"
		]
	},
		"application/vnd.google-earth.kml+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"kml"
		]
	},
		"application/vnd.google-earth.kmz": {
		source: "iana",
		compressible: false,
		extensions: [
			"kmz"
		]
	},
		"application/vnd.gov.sk.e-form+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.gov.sk.e-form+zip": {
		source: "iana",
		compressible: false
	},
		"application/vnd.gov.sk.xmldatacontainer+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.grafeq": {
		source: "iana",
		extensions: [
			"gqf",
			"gqs"
		]
	},
		"application/vnd.gridmp": {
		source: "iana"
	},
		"application/vnd.groove-account": {
		source: "iana",
		extensions: [
			"gac"
		]
	},
		"application/vnd.groove-help": {
		source: "iana",
		extensions: [
			"ghf"
		]
	},
		"application/vnd.groove-identity-message": {
		source: "iana",
		extensions: [
			"gim"
		]
	},
		"application/vnd.groove-injector": {
		source: "iana",
		extensions: [
			"grv"
		]
	},
		"application/vnd.groove-tool-message": {
		source: "iana",
		extensions: [
			"gtm"
		]
	},
		"application/vnd.groove-tool-template": {
		source: "iana",
		extensions: [
			"tpl"
		]
	},
		"application/vnd.groove-vcard": {
		source: "iana",
		extensions: [
			"vcg"
		]
	},
		"application/vnd.hal+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.hal+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"hal"
		]
	},
		"application/vnd.handheld-entertainment+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"zmm"
		]
	},
		"application/vnd.hbci": {
		source: "iana",
		extensions: [
			"hbci"
		]
	},
		"application/vnd.hc+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.hcl-bireports": {
		source: "iana"
	},
		"application/vnd.hdt": {
		source: "iana"
	},
		"application/vnd.heroku+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.hhe.lesson-player": {
		source: "iana",
		extensions: [
			"les"
		]
	},
		"application/vnd.hp-hpgl": {
		source: "iana",
		extensions: [
			"hpgl"
		]
	},
		"application/vnd.hp-hpid": {
		source: "iana",
		extensions: [
			"hpid"
		]
	},
		"application/vnd.hp-hps": {
		source: "iana",
		extensions: [
			"hps"
		]
	},
		"application/vnd.hp-jlyt": {
		source: "iana",
		extensions: [
			"jlt"
		]
	},
		"application/vnd.hp-pcl": {
		source: "iana",
		extensions: [
			"pcl"
		]
	},
		"application/vnd.hp-pclxl": {
		source: "iana",
		extensions: [
			"pclxl"
		]
	},
		"application/vnd.httphone": {
		source: "iana"
	},
		"application/vnd.hydrostatix.sof-data": {
		source: "iana",
		extensions: [
			"sfd-hdstx"
		]
	},
		"application/vnd.hyper+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.hyper-item+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.hyperdrive+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.hzn-3d-crossword": {
		source: "iana"
	},
		"application/vnd.ibm.afplinedata": {
		source: "iana"
	},
		"application/vnd.ibm.electronic-media": {
		source: "iana"
	},
		"application/vnd.ibm.minipay": {
		source: "iana",
		extensions: [
			"mpy"
		]
	},
		"application/vnd.ibm.modcap": {
		source: "iana",
		extensions: [
			"afp",
			"listafp",
			"list3820"
		]
	},
		"application/vnd.ibm.rights-management": {
		source: "iana",
		extensions: [
			"irm"
		]
	},
		"application/vnd.ibm.secure-container": {
		source: "iana",
		extensions: [
			"sc"
		]
	},
		"application/vnd.iccprofile": {
		source: "iana",
		extensions: [
			"icc",
			"icm"
		]
	},
		"application/vnd.ieee.1905": {
		source: "iana"
	},
		"application/vnd.igloader": {
		source: "iana",
		extensions: [
			"igl"
		]
	},
		"application/vnd.imagemeter.folder+zip": {
		source: "iana",
		compressible: false
	},
		"application/vnd.imagemeter.image+zip": {
		source: "iana",
		compressible: false
	},
		"application/vnd.immervision-ivp": {
		source: "iana",
		extensions: [
			"ivp"
		]
	},
		"application/vnd.immervision-ivu": {
		source: "iana",
		extensions: [
			"ivu"
		]
	},
		"application/vnd.ims.imsccv1p1": {
		source: "iana"
	},
		"application/vnd.ims.imsccv1p2": {
		source: "iana"
	},
		"application/vnd.ims.imsccv1p3": {
		source: "iana"
	},
		"application/vnd.ims.lis.v2.result+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.ims.lti.v2.toolconsumerprofile+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.ims.lti.v2.toolproxy+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.ims.lti.v2.toolproxy.id+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.ims.lti.v2.toolsettings+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.ims.lti.v2.toolsettings.simple+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.informedcontrol.rms+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.informix-visionary": {
		source: "iana"
	},
		"application/vnd.infotech.project": {
		source: "iana"
	},
		"application/vnd.infotech.project+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.innopath.wamp.notification": {
		source: "iana"
	},
		"application/vnd.insors.igm": {
		source: "iana",
		extensions: [
			"igm"
		]
	},
		"application/vnd.intercon.formnet": {
		source: "iana",
		extensions: [
			"xpw",
			"xpx"
		]
	},
		"application/vnd.intergeo": {
		source: "iana",
		extensions: [
			"i2g"
		]
	},
		"application/vnd.intertrust.digibox": {
		source: "iana"
	},
		"application/vnd.intertrust.nncp": {
		source: "iana"
	},
		"application/vnd.intu.qbo": {
		source: "iana",
		extensions: [
			"qbo"
		]
	},
		"application/vnd.intu.qfx": {
		source: "iana",
		extensions: [
			"qfx"
		]
	},
		"application/vnd.iptc.g2.catalogitem+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.iptc.g2.conceptitem+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.iptc.g2.knowledgeitem+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.iptc.g2.newsitem+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.iptc.g2.newsmessage+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.iptc.g2.packageitem+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.iptc.g2.planningitem+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.ipunplugged.rcprofile": {
		source: "iana",
		extensions: [
			"rcprofile"
		]
	},
		"application/vnd.irepository.package+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"irp"
		]
	},
		"application/vnd.is-xpr": {
		source: "iana",
		extensions: [
			"xpr"
		]
	},
		"application/vnd.isac.fcs": {
		source: "iana",
		extensions: [
			"fcs"
		]
	},
		"application/vnd.iso11783-10+zip": {
		source: "iana",
		compressible: false
	},
		"application/vnd.jam": {
		source: "iana",
		extensions: [
			"jam"
		]
	},
		"application/vnd.japannet-directory-service": {
		source: "iana"
	},
		"application/vnd.japannet-jpnstore-wakeup": {
		source: "iana"
	},
		"application/vnd.japannet-payment-wakeup": {
		source: "iana"
	},
		"application/vnd.japannet-registration": {
		source: "iana"
	},
		"application/vnd.japannet-registration-wakeup": {
		source: "iana"
	},
		"application/vnd.japannet-setstore-wakeup": {
		source: "iana"
	},
		"application/vnd.japannet-verification": {
		source: "iana"
	},
		"application/vnd.japannet-verification-wakeup": {
		source: "iana"
	},
		"application/vnd.jcp.javame.midlet-rms": {
		source: "iana",
		extensions: [
			"rms"
		]
	},
		"application/vnd.jisp": {
		source: "iana",
		extensions: [
			"jisp"
		]
	},
		"application/vnd.joost.joda-archive": {
		source: "iana",
		extensions: [
			"joda"
		]
	},
		"application/vnd.jsk.isdn-ngn": {
		source: "iana"
	},
		"application/vnd.kahootz": {
		source: "iana",
		extensions: [
			"ktz",
			"ktr"
		]
	},
		"application/vnd.kde.karbon": {
		source: "iana",
		extensions: [
			"karbon"
		]
	},
		"application/vnd.kde.kchart": {
		source: "iana",
		extensions: [
			"chrt"
		]
	},
		"application/vnd.kde.kformula": {
		source: "iana",
		extensions: [
			"kfo"
		]
	},
		"application/vnd.kde.kivio": {
		source: "iana",
		extensions: [
			"flw"
		]
	},
		"application/vnd.kde.kontour": {
		source: "iana",
		extensions: [
			"kon"
		]
	},
		"application/vnd.kde.kpresenter": {
		source: "iana",
		extensions: [
			"kpr",
			"kpt"
		]
	},
		"application/vnd.kde.kspread": {
		source: "iana",
		extensions: [
			"ksp"
		]
	},
		"application/vnd.kde.kword": {
		source: "iana",
		extensions: [
			"kwd",
			"kwt"
		]
	},
		"application/vnd.kenameaapp": {
		source: "iana",
		extensions: [
			"htke"
		]
	},
		"application/vnd.kidspiration": {
		source: "iana",
		extensions: [
			"kia"
		]
	},
		"application/vnd.kinar": {
		source: "iana",
		extensions: [
			"kne",
			"knp"
		]
	},
		"application/vnd.koan": {
		source: "iana",
		extensions: [
			"skp",
			"skd",
			"skt",
			"skm"
		]
	},
		"application/vnd.kodak-descriptor": {
		source: "iana",
		extensions: [
			"sse"
		]
	},
		"application/vnd.las": {
		source: "iana"
	},
		"application/vnd.las.las+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.las.las+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"lasxml"
		]
	},
		"application/vnd.laszip": {
		source: "iana"
	},
		"application/vnd.leap+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.liberty-request+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.llamagraphics.life-balance.desktop": {
		source: "iana",
		extensions: [
			"lbd"
		]
	},
		"application/vnd.llamagraphics.life-balance.exchange+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"lbe"
		]
	},
		"application/vnd.logipipe.circuit+zip": {
		source: "iana",
		compressible: false
	},
		"application/vnd.loom": {
		source: "iana"
	},
		"application/vnd.lotus-1-2-3": {
		source: "iana",
		extensions: [
			"123"
		]
	},
		"application/vnd.lotus-approach": {
		source: "iana",
		extensions: [
			"apr"
		]
	},
		"application/vnd.lotus-freelance": {
		source: "iana",
		extensions: [
			"pre"
		]
	},
		"application/vnd.lotus-notes": {
		source: "iana",
		extensions: [
			"nsf"
		]
	},
		"application/vnd.lotus-organizer": {
		source: "iana",
		extensions: [
			"org"
		]
	},
		"application/vnd.lotus-screencam": {
		source: "iana",
		extensions: [
			"scm"
		]
	},
		"application/vnd.lotus-wordpro": {
		source: "iana",
		extensions: [
			"lwp"
		]
	},
		"application/vnd.macports.portpkg": {
		source: "iana",
		extensions: [
			"portpkg"
		]
	},
		"application/vnd.mapbox-vector-tile": {
		source: "iana"
	},
		"application/vnd.marlin.drm.actiontoken+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.marlin.drm.conftoken+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.marlin.drm.license+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.marlin.drm.mdcf": {
		source: "iana"
	},
		"application/vnd.mason+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.maxmind.maxmind-db": {
		source: "iana"
	},
		"application/vnd.mcd": {
		source: "iana",
		extensions: [
			"mcd"
		]
	},
		"application/vnd.medcalcdata": {
		source: "iana",
		extensions: [
			"mc1"
		]
	},
		"application/vnd.mediastation.cdkey": {
		source: "iana",
		extensions: [
			"cdkey"
		]
	},
		"application/vnd.meridian-slingshot": {
		source: "iana"
	},
		"application/vnd.mfer": {
		source: "iana",
		extensions: [
			"mwf"
		]
	},
		"application/vnd.mfmp": {
		source: "iana",
		extensions: [
			"mfm"
		]
	},
		"application/vnd.micro+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.micrografx.flo": {
		source: "iana",
		extensions: [
			"flo"
		]
	},
		"application/vnd.micrografx.igx": {
		source: "iana",
		extensions: [
			"igx"
		]
	},
		"application/vnd.microsoft.portable-executable": {
		source: "iana"
	},
		"application/vnd.microsoft.windows.thumbnail-cache": {
		source: "iana"
	},
		"application/vnd.miele+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.mif": {
		source: "iana",
		extensions: [
			"mif"
		]
	},
		"application/vnd.minisoft-hp3000-save": {
		source: "iana"
	},
		"application/vnd.mitsubishi.misty-guard.trustweb": {
		source: "iana"
	},
		"application/vnd.mobius.daf": {
		source: "iana",
		extensions: [
			"daf"
		]
	},
		"application/vnd.mobius.dis": {
		source: "iana",
		extensions: [
			"dis"
		]
	},
		"application/vnd.mobius.mbk": {
		source: "iana",
		extensions: [
			"mbk"
		]
	},
		"application/vnd.mobius.mqy": {
		source: "iana",
		extensions: [
			"mqy"
		]
	},
		"application/vnd.mobius.msl": {
		source: "iana",
		extensions: [
			"msl"
		]
	},
		"application/vnd.mobius.plc": {
		source: "iana",
		extensions: [
			"plc"
		]
	},
		"application/vnd.mobius.txf": {
		source: "iana",
		extensions: [
			"txf"
		]
	},
		"application/vnd.mophun.application": {
		source: "iana",
		extensions: [
			"mpn"
		]
	},
		"application/vnd.mophun.certificate": {
		source: "iana",
		extensions: [
			"mpc"
		]
	},
		"application/vnd.motorola.flexsuite": {
		source: "iana"
	},
		"application/vnd.motorola.flexsuite.adsi": {
		source: "iana"
	},
		"application/vnd.motorola.flexsuite.fis": {
		source: "iana"
	},
		"application/vnd.motorola.flexsuite.gotap": {
		source: "iana"
	},
		"application/vnd.motorola.flexsuite.kmr": {
		source: "iana"
	},
		"application/vnd.motorola.flexsuite.ttc": {
		source: "iana"
	},
		"application/vnd.motorola.flexsuite.wem": {
		source: "iana"
	},
		"application/vnd.motorola.iprm": {
		source: "iana"
	},
		"application/vnd.mozilla.xul+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"xul"
		]
	},
		"application/vnd.ms-3mfdocument": {
		source: "iana"
	},
		"application/vnd.ms-artgalry": {
		source: "iana",
		extensions: [
			"cil"
		]
	},
		"application/vnd.ms-asf": {
		source: "iana"
	},
		"application/vnd.ms-cab-compressed": {
		source: "iana",
		extensions: [
			"cab"
		]
	},
		"application/vnd.ms-color.iccprofile": {
		source: "apache"
	},
		"application/vnd.ms-excel": {
		source: "iana",
		compressible: false,
		extensions: [
			"xls",
			"xlm",
			"xla",
			"xlc",
			"xlt",
			"xlw"
		]
	},
		"application/vnd.ms-excel.addin.macroenabled.12": {
		source: "iana",
		extensions: [
			"xlam"
		]
	},
		"application/vnd.ms-excel.sheet.binary.macroenabled.12": {
		source: "iana",
		extensions: [
			"xlsb"
		]
	},
		"application/vnd.ms-excel.sheet.macroenabled.12": {
		source: "iana",
		extensions: [
			"xlsm"
		]
	},
		"application/vnd.ms-excel.template.macroenabled.12": {
		source: "iana",
		extensions: [
			"xltm"
		]
	},
		"application/vnd.ms-fontobject": {
		source: "iana",
		compressible: true,
		extensions: [
			"eot"
		]
	},
		"application/vnd.ms-htmlhelp": {
		source: "iana",
		extensions: [
			"chm"
		]
	},
		"application/vnd.ms-ims": {
		source: "iana",
		extensions: [
			"ims"
		]
	},
		"application/vnd.ms-lrm": {
		source: "iana",
		extensions: [
			"lrm"
		]
	},
		"application/vnd.ms-office.activex+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.ms-officetheme": {
		source: "iana",
		extensions: [
			"thmx"
		]
	},
		"application/vnd.ms-opentype": {
		source: "apache",
		compressible: true
	},
		"application/vnd.ms-outlook": {
		compressible: false,
		extensions: [
			"msg"
		]
	},
		"application/vnd.ms-package.obfuscated-opentype": {
		source: "apache"
	},
		"application/vnd.ms-pki.seccat": {
		source: "apache",
		extensions: [
			"cat"
		]
	},
		"application/vnd.ms-pki.stl": {
		source: "apache",
		extensions: [
			"stl"
		]
	},
		"application/vnd.ms-playready.initiator+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.ms-powerpoint": {
		source: "iana",
		compressible: false,
		extensions: [
			"ppt",
			"pps",
			"pot"
		]
	},
		"application/vnd.ms-powerpoint.addin.macroenabled.12": {
		source: "iana",
		extensions: [
			"ppam"
		]
	},
		"application/vnd.ms-powerpoint.presentation.macroenabled.12": {
		source: "iana",
		extensions: [
			"pptm"
		]
	},
		"application/vnd.ms-powerpoint.slide.macroenabled.12": {
		source: "iana",
		extensions: [
			"sldm"
		]
	},
		"application/vnd.ms-powerpoint.slideshow.macroenabled.12": {
		source: "iana",
		extensions: [
			"ppsm"
		]
	},
		"application/vnd.ms-powerpoint.template.macroenabled.12": {
		source: "iana",
		extensions: [
			"potm"
		]
	},
		"application/vnd.ms-printdevicecapabilities+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.ms-printing.printticket+xml": {
		source: "apache",
		compressible: true
	},
		"application/vnd.ms-printschematicket+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.ms-project": {
		source: "iana",
		extensions: [
			"mpp",
			"mpt"
		]
	},
		"application/vnd.ms-tnef": {
		source: "iana"
	},
		"application/vnd.ms-windows.devicepairing": {
		source: "iana"
	},
		"application/vnd.ms-windows.nwprinting.oob": {
		source: "iana"
	},
		"application/vnd.ms-windows.printerpairing": {
		source: "iana"
	},
		"application/vnd.ms-windows.wsd.oob": {
		source: "iana"
	},
		"application/vnd.ms-wmdrm.lic-chlg-req": {
		source: "iana"
	},
		"application/vnd.ms-wmdrm.lic-resp": {
		source: "iana"
	},
		"application/vnd.ms-wmdrm.meter-chlg-req": {
		source: "iana"
	},
		"application/vnd.ms-wmdrm.meter-resp": {
		source: "iana"
	},
		"application/vnd.ms-word.document.macroenabled.12": {
		source: "iana",
		extensions: [
			"docm"
		]
	},
		"application/vnd.ms-word.template.macroenabled.12": {
		source: "iana",
		extensions: [
			"dotm"
		]
	},
		"application/vnd.ms-works": {
		source: "iana",
		extensions: [
			"wps",
			"wks",
			"wcm",
			"wdb"
		]
	},
		"application/vnd.ms-wpl": {
		source: "iana",
		extensions: [
			"wpl"
		]
	},
		"application/vnd.ms-xpsdocument": {
		source: "iana",
		compressible: false,
		extensions: [
			"xps"
		]
	},
		"application/vnd.msa-disk-image": {
		source: "iana"
	},
		"application/vnd.mseq": {
		source: "iana",
		extensions: [
			"mseq"
		]
	},
		"application/vnd.msign": {
		source: "iana"
	},
		"application/vnd.multiad.creator": {
		source: "iana"
	},
		"application/vnd.multiad.creator.cif": {
		source: "iana"
	},
		"application/vnd.music-niff": {
		source: "iana"
	},
		"application/vnd.musician": {
		source: "iana",
		extensions: [
			"mus"
		]
	},
		"application/vnd.muvee.style": {
		source: "iana",
		extensions: [
			"msty"
		]
	},
		"application/vnd.mynfc": {
		source: "iana",
		extensions: [
			"taglet"
		]
	},
		"application/vnd.ncd.control": {
		source: "iana"
	},
		"application/vnd.ncd.reference": {
		source: "iana"
	},
		"application/vnd.nearst.inv+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.nervana": {
		source: "iana"
	},
		"application/vnd.netfpx": {
		source: "iana"
	},
		"application/vnd.neurolanguage.nlu": {
		source: "iana",
		extensions: [
			"nlu"
		]
	},
		"application/vnd.nimn": {
		source: "iana"
	},
		"application/vnd.nintendo.nitro.rom": {
		source: "iana"
	},
		"application/vnd.nintendo.snes.rom": {
		source: "iana"
	},
		"application/vnd.nitf": {
		source: "iana",
		extensions: [
			"ntf",
			"nitf"
		]
	},
		"application/vnd.noblenet-directory": {
		source: "iana",
		extensions: [
			"nnd"
		]
	},
		"application/vnd.noblenet-sealer": {
		source: "iana",
		extensions: [
			"nns"
		]
	},
		"application/vnd.noblenet-web": {
		source: "iana",
		extensions: [
			"nnw"
		]
	},
		"application/vnd.nokia.catalogs": {
		source: "iana"
	},
		"application/vnd.nokia.conml+wbxml": {
		source: "iana"
	},
		"application/vnd.nokia.conml+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.nokia.iptv.config+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.nokia.isds-radio-presets": {
		source: "iana"
	},
		"application/vnd.nokia.landmark+wbxml": {
		source: "iana"
	},
		"application/vnd.nokia.landmark+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.nokia.landmarkcollection+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.nokia.n-gage.ac+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"ac"
		]
	},
		"application/vnd.nokia.n-gage.data": {
		source: "iana",
		extensions: [
			"ngdat"
		]
	},
		"application/vnd.nokia.n-gage.symbian.install": {
		source: "iana",
		extensions: [
			"n-gage"
		]
	},
		"application/vnd.nokia.ncd": {
		source: "iana"
	},
		"application/vnd.nokia.pcd+wbxml": {
		source: "iana"
	},
		"application/vnd.nokia.pcd+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.nokia.radio-preset": {
		source: "iana",
		extensions: [
			"rpst"
		]
	},
		"application/vnd.nokia.radio-presets": {
		source: "iana",
		extensions: [
			"rpss"
		]
	},
		"application/vnd.novadigm.edm": {
		source: "iana",
		extensions: [
			"edm"
		]
	},
		"application/vnd.novadigm.edx": {
		source: "iana",
		extensions: [
			"edx"
		]
	},
		"application/vnd.novadigm.ext": {
		source: "iana",
		extensions: [
			"ext"
		]
	},
		"application/vnd.ntt-local.content-share": {
		source: "iana"
	},
		"application/vnd.ntt-local.file-transfer": {
		source: "iana"
	},
		"application/vnd.ntt-local.ogw_remote-access": {
		source: "iana"
	},
		"application/vnd.ntt-local.sip-ta_remote": {
		source: "iana"
	},
		"application/vnd.ntt-local.sip-ta_tcp_stream": {
		source: "iana"
	},
		"application/vnd.oasis.opendocument.chart": {
		source: "iana",
		extensions: [
			"odc"
		]
	},
		"application/vnd.oasis.opendocument.chart-template": {
		source: "iana",
		extensions: [
			"otc"
		]
	},
		"application/vnd.oasis.opendocument.database": {
		source: "iana",
		extensions: [
			"odb"
		]
	},
		"application/vnd.oasis.opendocument.formula": {
		source: "iana",
		extensions: [
			"odf"
		]
	},
		"application/vnd.oasis.opendocument.formula-template": {
		source: "iana",
		extensions: [
			"odft"
		]
	},
		"application/vnd.oasis.opendocument.graphics": {
		source: "iana",
		compressible: false,
		extensions: [
			"odg"
		]
	},
		"application/vnd.oasis.opendocument.graphics-template": {
		source: "iana",
		extensions: [
			"otg"
		]
	},
		"application/vnd.oasis.opendocument.image": {
		source: "iana",
		extensions: [
			"odi"
		]
	},
		"application/vnd.oasis.opendocument.image-template": {
		source: "iana",
		extensions: [
			"oti"
		]
	},
		"application/vnd.oasis.opendocument.presentation": {
		source: "iana",
		compressible: false,
		extensions: [
			"odp"
		]
	},
		"application/vnd.oasis.opendocument.presentation-template": {
		source: "iana",
		extensions: [
			"otp"
		]
	},
		"application/vnd.oasis.opendocument.spreadsheet": {
		source: "iana",
		compressible: false,
		extensions: [
			"ods"
		]
	},
		"application/vnd.oasis.opendocument.spreadsheet-template": {
		source: "iana",
		extensions: [
			"ots"
		]
	},
		"application/vnd.oasis.opendocument.text": {
		source: "iana",
		compressible: false,
		extensions: [
			"odt"
		]
	},
		"application/vnd.oasis.opendocument.text-master": {
		source: "iana",
		extensions: [
			"odm"
		]
	},
		"application/vnd.oasis.opendocument.text-template": {
		source: "iana",
		extensions: [
			"ott"
		]
	},
		"application/vnd.oasis.opendocument.text-web": {
		source: "iana",
		extensions: [
			"oth"
		]
	},
		"application/vnd.obn": {
		source: "iana"
	},
		"application/vnd.ocf+cbor": {
		source: "iana"
	},
		"application/vnd.oci.image.manifest.v1+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oftn.l10n+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oipf.contentaccessdownload+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oipf.contentaccessstreaming+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oipf.cspg-hexbinary": {
		source: "iana"
	},
		"application/vnd.oipf.dae.svg+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oipf.dae.xhtml+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oipf.mippvcontrolmessage+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oipf.pae.gem": {
		source: "iana"
	},
		"application/vnd.oipf.spdiscovery+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oipf.spdlist+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oipf.ueprofile+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oipf.userprofile+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.olpc-sugar": {
		source: "iana",
		extensions: [
			"xo"
		]
	},
		"application/vnd.oma-scws-config": {
		source: "iana"
	},
		"application/vnd.oma-scws-http-request": {
		source: "iana"
	},
		"application/vnd.oma-scws-http-response": {
		source: "iana"
	},
		"application/vnd.oma.bcast.associated-procedure-parameter+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oma.bcast.drm-trigger+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oma.bcast.imd+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oma.bcast.ltkm": {
		source: "iana"
	},
		"application/vnd.oma.bcast.notification+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oma.bcast.provisioningtrigger": {
		source: "iana"
	},
		"application/vnd.oma.bcast.sgboot": {
		source: "iana"
	},
		"application/vnd.oma.bcast.sgdd+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oma.bcast.sgdu": {
		source: "iana"
	},
		"application/vnd.oma.bcast.simple-symbol-container": {
		source: "iana"
	},
		"application/vnd.oma.bcast.smartcard-trigger+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oma.bcast.sprov+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oma.bcast.stkm": {
		source: "iana"
	},
		"application/vnd.oma.cab-address-book+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oma.cab-feature-handler+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oma.cab-pcc+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oma.cab-subs-invite+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oma.cab-user-prefs+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oma.dcd": {
		source: "iana"
	},
		"application/vnd.oma.dcdc": {
		source: "iana"
	},
		"application/vnd.oma.dd2+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"dd2"
		]
	},
		"application/vnd.oma.drm.risd+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oma.group-usage-list+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oma.lwm2m+cbor": {
		source: "iana"
	},
		"application/vnd.oma.lwm2m+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oma.lwm2m+tlv": {
		source: "iana"
	},
		"application/vnd.oma.pal+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oma.poc.detailed-progress-report+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oma.poc.final-report+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oma.poc.groups+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oma.poc.invocation-descriptor+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oma.poc.optimized-progress-report+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oma.push": {
		source: "iana"
	},
		"application/vnd.oma.scidm.messages+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oma.xcap-directory+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.omads-email+xml": {
		source: "iana",
		charset: "UTF-8",
		compressible: true
	},
		"application/vnd.omads-file+xml": {
		source: "iana",
		charset: "UTF-8",
		compressible: true
	},
		"application/vnd.omads-folder+xml": {
		source: "iana",
		charset: "UTF-8",
		compressible: true
	},
		"application/vnd.omaloc-supl-init": {
		source: "iana"
	},
		"application/vnd.onepager": {
		source: "iana"
	},
		"application/vnd.onepagertamp": {
		source: "iana"
	},
		"application/vnd.onepagertamx": {
		source: "iana"
	},
		"application/vnd.onepagertat": {
		source: "iana"
	},
		"application/vnd.onepagertatp": {
		source: "iana"
	},
		"application/vnd.onepagertatx": {
		source: "iana"
	},
		"application/vnd.openblox.game+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"obgx"
		]
	},
		"application/vnd.openblox.game-binary": {
		source: "iana"
	},
		"application/vnd.openeye.oeb": {
		source: "iana"
	},
		"application/vnd.openofficeorg.extension": {
		source: "apache",
		extensions: [
			"oxt"
		]
	},
		"application/vnd.openstreetmap.data+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"osm"
		]
	},
		"application/vnd.openxmlformats-officedocument.custom-properties+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.customxmlproperties+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.drawing+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.drawingml.chart+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.extended-properties+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.presentationml.comments+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.presentationml.presentation": {
		source: "iana",
		compressible: false,
		extensions: [
			"pptx"
		]
	},
		"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.presentationml.slide": {
		source: "iana",
		extensions: [
			"sldx"
		]
	},
		"application/vnd.openxmlformats-officedocument.presentationml.slide+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.presentationml.slideshow": {
		source: "iana",
		extensions: [
			"ppsx"
		]
	},
		"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.presentationml.tags+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.presentationml.template": {
		source: "iana",
		extensions: [
			"potx"
		]
	},
		"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
		source: "iana",
		compressible: false,
		extensions: [
			"xlsx"
		]
	},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.template": {
		source: "iana",
		extensions: [
			"xltx"
		]
	},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.theme+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.themeoverride+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.vmldrawing": {
		source: "iana"
	},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
		source: "iana",
		compressible: false,
		extensions: [
			"docx"
		]
	},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.template": {
		source: "iana",
		extensions: [
			"dotx"
		]
	},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-package.core-properties+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-package.relationships+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oracle.resource+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.orange.indata": {
		source: "iana"
	},
		"application/vnd.osa.netdeploy": {
		source: "iana"
	},
		"application/vnd.osgeo.mapguide.package": {
		source: "iana",
		extensions: [
			"mgp"
		]
	},
		"application/vnd.osgi.bundle": {
		source: "iana"
	},
		"application/vnd.osgi.dp": {
		source: "iana",
		extensions: [
			"dp"
		]
	},
		"application/vnd.osgi.subsystem": {
		source: "iana",
		extensions: [
			"esa"
		]
	},
		"application/vnd.otps.ct-kip+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oxli.countgraph": {
		source: "iana"
	},
		"application/vnd.pagerduty+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.palm": {
		source: "iana",
		extensions: [
			"pdb",
			"pqa",
			"oprc"
		]
	},
		"application/vnd.panoply": {
		source: "iana"
	},
		"application/vnd.paos.xml": {
		source: "iana"
	},
		"application/vnd.patentdive": {
		source: "iana"
	},
		"application/vnd.patientecommsdoc": {
		source: "iana"
	},
		"application/vnd.pawaafile": {
		source: "iana",
		extensions: [
			"paw"
		]
	},
		"application/vnd.pcos": {
		source: "iana"
	},
		"application/vnd.pg.format": {
		source: "iana",
		extensions: [
			"str"
		]
	},
		"application/vnd.pg.osasli": {
		source: "iana",
		extensions: [
			"ei6"
		]
	},
		"application/vnd.piaccess.application-licence": {
		source: "iana"
	},
		"application/vnd.picsel": {
		source: "iana",
		extensions: [
			"efif"
		]
	},
		"application/vnd.pmi.widget": {
		source: "iana",
		extensions: [
			"wg"
		]
	},
		"application/vnd.poc.group-advertisement+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.pocketlearn": {
		source: "iana",
		extensions: [
			"plf"
		]
	},
		"application/vnd.powerbuilder6": {
		source: "iana",
		extensions: [
			"pbd"
		]
	},
		"application/vnd.powerbuilder6-s": {
		source: "iana"
	},
		"application/vnd.powerbuilder7": {
		source: "iana"
	},
		"application/vnd.powerbuilder7-s": {
		source: "iana"
	},
		"application/vnd.powerbuilder75": {
		source: "iana"
	},
		"application/vnd.powerbuilder75-s": {
		source: "iana"
	},
		"application/vnd.preminet": {
		source: "iana"
	},
		"application/vnd.previewsystems.box": {
		source: "iana",
		extensions: [
			"box"
		]
	},
		"application/vnd.proteus.magazine": {
		source: "iana",
		extensions: [
			"mgz"
		]
	},
		"application/vnd.psfs": {
		source: "iana"
	},
		"application/vnd.publishare-delta-tree": {
		source: "iana",
		extensions: [
			"qps"
		]
	},
		"application/vnd.pvi.ptid1": {
		source: "iana",
		extensions: [
			"ptid"
		]
	},
		"application/vnd.pwg-multiplexed": {
		source: "iana"
	},
		"application/vnd.pwg-xhtml-print+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.qualcomm.brew-app-res": {
		source: "iana"
	},
		"application/vnd.quarantainenet": {
		source: "iana"
	},
		"application/vnd.quark.quarkxpress": {
		source: "iana",
		extensions: [
			"qxd",
			"qxt",
			"qwd",
			"qwt",
			"qxl",
			"qxb"
		]
	},
		"application/vnd.quobject-quoxdocument": {
		source: "iana"
	},
		"application/vnd.radisys.moml+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.radisys.msml+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.radisys.msml-audit+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.radisys.msml-audit-conf+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.radisys.msml-audit-conn+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.radisys.msml-audit-dialog+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.radisys.msml-audit-stream+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.radisys.msml-conf+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.radisys.msml-dialog+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.radisys.msml-dialog-base+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.radisys.msml-dialog-fax-detect+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.radisys.msml-dialog-group+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.radisys.msml-dialog-speech+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.radisys.msml-dialog-transform+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.rainstor.data": {
		source: "iana"
	},
		"application/vnd.rapid": {
		source: "iana"
	},
		"application/vnd.rar": {
		source: "iana",
		extensions: [
			"rar"
		]
	},
		"application/vnd.realvnc.bed": {
		source: "iana",
		extensions: [
			"bed"
		]
	},
		"application/vnd.recordare.musicxml": {
		source: "iana",
		extensions: [
			"mxl"
		]
	},
		"application/vnd.recordare.musicxml+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"musicxml"
		]
	},
		"application/vnd.renlearn.rlprint": {
		source: "iana"
	},
		"application/vnd.restful+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.rig.cryptonote": {
		source: "iana",
		extensions: [
			"cryptonote"
		]
	},
		"application/vnd.rim.cod": {
		source: "apache",
		extensions: [
			"cod"
		]
	},
		"application/vnd.rn-realmedia": {
		source: "apache",
		extensions: [
			"rm"
		]
	},
		"application/vnd.rn-realmedia-vbr": {
		source: "apache",
		extensions: [
			"rmvb"
		]
	},
		"application/vnd.route66.link66+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"link66"
		]
	},
		"application/vnd.rs-274x": {
		source: "iana"
	},
		"application/vnd.ruckus.download": {
		source: "iana"
	},
		"application/vnd.s3sms": {
		source: "iana"
	},
		"application/vnd.sailingtracker.track": {
		source: "iana",
		extensions: [
			"st"
		]
	},
		"application/vnd.sar": {
		source: "iana"
	},
		"application/vnd.sbm.cid": {
		source: "iana"
	},
		"application/vnd.sbm.mid2": {
		source: "iana"
	},
		"application/vnd.scribus": {
		source: "iana"
	},
		"application/vnd.sealed.3df": {
		source: "iana"
	},
		"application/vnd.sealed.csf": {
		source: "iana"
	},
		"application/vnd.sealed.doc": {
		source: "iana"
	},
		"application/vnd.sealed.eml": {
		source: "iana"
	},
		"application/vnd.sealed.mht": {
		source: "iana"
	},
		"application/vnd.sealed.net": {
		source: "iana"
	},
		"application/vnd.sealed.ppt": {
		source: "iana"
	},
		"application/vnd.sealed.tiff": {
		source: "iana"
	},
		"application/vnd.sealed.xls": {
		source: "iana"
	},
		"application/vnd.sealedmedia.softseal.html": {
		source: "iana"
	},
		"application/vnd.sealedmedia.softseal.pdf": {
		source: "iana"
	},
		"application/vnd.seemail": {
		source: "iana",
		extensions: [
			"see"
		]
	},
		"application/vnd.seis+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.sema": {
		source: "iana",
		extensions: [
			"sema"
		]
	},
		"application/vnd.semd": {
		source: "iana",
		extensions: [
			"semd"
		]
	},
		"application/vnd.semf": {
		source: "iana",
		extensions: [
			"semf"
		]
	},
		"application/vnd.shade-save-file": {
		source: "iana"
	},
		"application/vnd.shana.informed.formdata": {
		source: "iana",
		extensions: [
			"ifm"
		]
	},
		"application/vnd.shana.informed.formtemplate": {
		source: "iana",
		extensions: [
			"itp"
		]
	},
		"application/vnd.shana.informed.interchange": {
		source: "iana",
		extensions: [
			"iif"
		]
	},
		"application/vnd.shana.informed.package": {
		source: "iana",
		extensions: [
			"ipk"
		]
	},
		"application/vnd.shootproof+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.shopkick+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.shp": {
		source: "iana"
	},
		"application/vnd.shx": {
		source: "iana"
	},
		"application/vnd.sigrok.session": {
		source: "iana"
	},
		"application/vnd.simtech-mindmapper": {
		source: "iana",
		extensions: [
			"twd",
			"twds"
		]
	},
		"application/vnd.siren+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.smaf": {
		source: "iana",
		extensions: [
			"mmf"
		]
	},
		"application/vnd.smart.notebook": {
		source: "iana"
	},
		"application/vnd.smart.teacher": {
		source: "iana",
		extensions: [
			"teacher"
		]
	},
		"application/vnd.snesdev-page-table": {
		source: "iana"
	},
		"application/vnd.software602.filler.form+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"fo"
		]
	},
		"application/vnd.software602.filler.form-xml-zip": {
		source: "iana"
	},
		"application/vnd.solent.sdkm+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"sdkm",
			"sdkd"
		]
	},
		"application/vnd.spotfire.dxp": {
		source: "iana",
		extensions: [
			"dxp"
		]
	},
		"application/vnd.spotfire.sfs": {
		source: "iana",
		extensions: [
			"sfs"
		]
	},
		"application/vnd.sqlite3": {
		source: "iana"
	},
		"application/vnd.sss-cod": {
		source: "iana"
	},
		"application/vnd.sss-dtf": {
		source: "iana"
	},
		"application/vnd.sss-ntf": {
		source: "iana"
	},
		"application/vnd.stardivision.calc": {
		source: "apache",
		extensions: [
			"sdc"
		]
	},
		"application/vnd.stardivision.draw": {
		source: "apache",
		extensions: [
			"sda"
		]
	},
		"application/vnd.stardivision.impress": {
		source: "apache",
		extensions: [
			"sdd"
		]
	},
		"application/vnd.stardivision.math": {
		source: "apache",
		extensions: [
			"smf"
		]
	},
		"application/vnd.stardivision.writer": {
		source: "apache",
		extensions: [
			"sdw",
			"vor"
		]
	},
		"application/vnd.stardivision.writer-global": {
		source: "apache",
		extensions: [
			"sgl"
		]
	},
		"application/vnd.stepmania.package": {
		source: "iana",
		extensions: [
			"smzip"
		]
	},
		"application/vnd.stepmania.stepchart": {
		source: "iana",
		extensions: [
			"sm"
		]
	},
		"application/vnd.street-stream": {
		source: "iana"
	},
		"application/vnd.sun.wadl+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"wadl"
		]
	},
		"application/vnd.sun.xml.calc": {
		source: "apache",
		extensions: [
			"sxc"
		]
	},
		"application/vnd.sun.xml.calc.template": {
		source: "apache",
		extensions: [
			"stc"
		]
	},
		"application/vnd.sun.xml.draw": {
		source: "apache",
		extensions: [
			"sxd"
		]
	},
		"application/vnd.sun.xml.draw.template": {
		source: "apache",
		extensions: [
			"std"
		]
	},
		"application/vnd.sun.xml.impress": {
		source: "apache",
		extensions: [
			"sxi"
		]
	},
		"application/vnd.sun.xml.impress.template": {
		source: "apache",
		extensions: [
			"sti"
		]
	},
		"application/vnd.sun.xml.math": {
		source: "apache",
		extensions: [
			"sxm"
		]
	},
		"application/vnd.sun.xml.writer": {
		source: "apache",
		extensions: [
			"sxw"
		]
	},
		"application/vnd.sun.xml.writer.global": {
		source: "apache",
		extensions: [
			"sxg"
		]
	},
		"application/vnd.sun.xml.writer.template": {
		source: "apache",
		extensions: [
			"stw"
		]
	},
		"application/vnd.sus-calendar": {
		source: "iana",
		extensions: [
			"sus",
			"susp"
		]
	},
		"application/vnd.svd": {
		source: "iana",
		extensions: [
			"svd"
		]
	},
		"application/vnd.swiftview-ics": {
		source: "iana"
	},
		"application/vnd.sycle+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.symbian.install": {
		source: "apache",
		extensions: [
			"sis",
			"sisx"
		]
	},
		"application/vnd.syncml+xml": {
		source: "iana",
		charset: "UTF-8",
		compressible: true,
		extensions: [
			"xsm"
		]
	},
		"application/vnd.syncml.dm+wbxml": {
		source: "iana",
		charset: "UTF-8",
		extensions: [
			"bdm"
		]
	},
		"application/vnd.syncml.dm+xml": {
		source: "iana",
		charset: "UTF-8",
		compressible: true,
		extensions: [
			"xdm"
		]
	},
		"application/vnd.syncml.dm.notification": {
		source: "iana"
	},
		"application/vnd.syncml.dmddf+wbxml": {
		source: "iana"
	},
		"application/vnd.syncml.dmddf+xml": {
		source: "iana",
		charset: "UTF-8",
		compressible: true,
		extensions: [
			"ddf"
		]
	},
		"application/vnd.syncml.dmtnds+wbxml": {
		source: "iana"
	},
		"application/vnd.syncml.dmtnds+xml": {
		source: "iana",
		charset: "UTF-8",
		compressible: true
	},
		"application/vnd.syncml.ds.notification": {
		source: "iana"
	},
		"application/vnd.tableschema+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.tao.intent-module-archive": {
		source: "iana",
		extensions: [
			"tao"
		]
	},
		"application/vnd.tcpdump.pcap": {
		source: "iana",
		extensions: [
			"pcap",
			"cap",
			"dmp"
		]
	},
		"application/vnd.think-cell.ppttc+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.tmd.mediaflex.api+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.tml": {
		source: "iana"
	},
		"application/vnd.tmobile-livetv": {
		source: "iana",
		extensions: [
			"tmo"
		]
	},
		"application/vnd.tri.onesource": {
		source: "iana"
	},
		"application/vnd.trid.tpt": {
		source: "iana",
		extensions: [
			"tpt"
		]
	},
		"application/vnd.triscape.mxs": {
		source: "iana",
		extensions: [
			"mxs"
		]
	},
		"application/vnd.trueapp": {
		source: "iana",
		extensions: [
			"tra"
		]
	},
		"application/vnd.truedoc": {
		source: "iana"
	},
		"application/vnd.ubisoft.webplayer": {
		source: "iana"
	},
		"application/vnd.ufdl": {
		source: "iana",
		extensions: [
			"ufd",
			"ufdl"
		]
	},
		"application/vnd.uiq.theme": {
		source: "iana",
		extensions: [
			"utz"
		]
	},
		"application/vnd.umajin": {
		source: "iana",
		extensions: [
			"umj"
		]
	},
		"application/vnd.unity": {
		source: "iana",
		extensions: [
			"unityweb"
		]
	},
		"application/vnd.uoml+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"uoml"
		]
	},
		"application/vnd.uplanet.alert": {
		source: "iana"
	},
		"application/vnd.uplanet.alert-wbxml": {
		source: "iana"
	},
		"application/vnd.uplanet.bearer-choice": {
		source: "iana"
	},
		"application/vnd.uplanet.bearer-choice-wbxml": {
		source: "iana"
	},
		"application/vnd.uplanet.cacheop": {
		source: "iana"
	},
		"application/vnd.uplanet.cacheop-wbxml": {
		source: "iana"
	},
		"application/vnd.uplanet.channel": {
		source: "iana"
	},
		"application/vnd.uplanet.channel-wbxml": {
		source: "iana"
	},
		"application/vnd.uplanet.list": {
		source: "iana"
	},
		"application/vnd.uplanet.list-wbxml": {
		source: "iana"
	},
		"application/vnd.uplanet.listcmd": {
		source: "iana"
	},
		"application/vnd.uplanet.listcmd-wbxml": {
		source: "iana"
	},
		"application/vnd.uplanet.signal": {
		source: "iana"
	},
		"application/vnd.uri-map": {
		source: "iana"
	},
		"application/vnd.valve.source.material": {
		source: "iana"
	},
		"application/vnd.vcx": {
		source: "iana",
		extensions: [
			"vcx"
		]
	},
		"application/vnd.vd-study": {
		source: "iana"
	},
		"application/vnd.vectorworks": {
		source: "iana"
	},
		"application/vnd.vel+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.verimatrix.vcas": {
		source: "iana"
	},
		"application/vnd.veryant.thin": {
		source: "iana"
	},
		"application/vnd.ves.encrypted": {
		source: "iana"
	},
		"application/vnd.vidsoft.vidconference": {
		source: "iana"
	},
		"application/vnd.visio": {
		source: "iana",
		extensions: [
			"vsd",
			"vst",
			"vss",
			"vsw"
		]
	},
		"application/vnd.visionary": {
		source: "iana",
		extensions: [
			"vis"
		]
	},
		"application/vnd.vividence.scriptfile": {
		source: "iana"
	},
		"application/vnd.vsf": {
		source: "iana",
		extensions: [
			"vsf"
		]
	},
		"application/vnd.wap.sic": {
		source: "iana"
	},
		"application/vnd.wap.slc": {
		source: "iana"
	},
		"application/vnd.wap.wbxml": {
		source: "iana",
		charset: "UTF-8",
		extensions: [
			"wbxml"
		]
	},
		"application/vnd.wap.wmlc": {
		source: "iana",
		extensions: [
			"wmlc"
		]
	},
		"application/vnd.wap.wmlscriptc": {
		source: "iana",
		extensions: [
			"wmlsc"
		]
	},
		"application/vnd.webturbo": {
		source: "iana",
		extensions: [
			"wtb"
		]
	},
		"application/vnd.wfa.dpp": {
		source: "iana"
	},
		"application/vnd.wfa.p2p": {
		source: "iana"
	},
		"application/vnd.wfa.wsc": {
		source: "iana"
	},
		"application/vnd.windows.devicepairing": {
		source: "iana"
	},
		"application/vnd.wmc": {
		source: "iana"
	},
		"application/vnd.wmf.bootstrap": {
		source: "iana"
	},
		"application/vnd.wolfram.mathematica": {
		source: "iana"
	},
		"application/vnd.wolfram.mathematica.package": {
		source: "iana"
	},
		"application/vnd.wolfram.player": {
		source: "iana",
		extensions: [
			"nbp"
		]
	},
		"application/vnd.wordperfect": {
		source: "iana",
		extensions: [
			"wpd"
		]
	},
		"application/vnd.wqd": {
		source: "iana",
		extensions: [
			"wqd"
		]
	},
		"application/vnd.wrq-hp3000-labelled": {
		source: "iana"
	},
		"application/vnd.wt.stf": {
		source: "iana",
		extensions: [
			"stf"
		]
	},
		"application/vnd.wv.csp+wbxml": {
		source: "iana"
	},
		"application/vnd.wv.csp+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.wv.ssp+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.xacml+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.xara": {
		source: "iana",
		extensions: [
			"xar"
		]
	},
		"application/vnd.xfdl": {
		source: "iana",
		extensions: [
			"xfdl"
		]
	},
		"application/vnd.xfdl.webform": {
		source: "iana"
	},
		"application/vnd.xmi+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.xmpie.cpkg": {
		source: "iana"
	},
		"application/vnd.xmpie.dpkg": {
		source: "iana"
	},
		"application/vnd.xmpie.plan": {
		source: "iana"
	},
		"application/vnd.xmpie.ppkg": {
		source: "iana"
	},
		"application/vnd.xmpie.xlim": {
		source: "iana"
	},
		"application/vnd.yamaha.hv-dic": {
		source: "iana",
		extensions: [
			"hvd"
		]
	},
		"application/vnd.yamaha.hv-script": {
		source: "iana",
		extensions: [
			"hvs"
		]
	},
		"application/vnd.yamaha.hv-voice": {
		source: "iana",
		extensions: [
			"hvp"
		]
	},
		"application/vnd.yamaha.openscoreformat": {
		source: "iana",
		extensions: [
			"osf"
		]
	},
		"application/vnd.yamaha.openscoreformat.osfpvg+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"osfpvg"
		]
	},
		"application/vnd.yamaha.remote-setup": {
		source: "iana"
	},
		"application/vnd.yamaha.smaf-audio": {
		source: "iana",
		extensions: [
			"saf"
		]
	},
		"application/vnd.yamaha.smaf-phrase": {
		source: "iana",
		extensions: [
			"spf"
		]
	},
		"application/vnd.yamaha.through-ngn": {
		source: "iana"
	},
		"application/vnd.yamaha.tunnel-udpencap": {
		source: "iana"
	},
		"application/vnd.yaoweme": {
		source: "iana"
	},
		"application/vnd.yellowriver-custom-menu": {
		source: "iana",
		extensions: [
			"cmp"
		]
	},
		"application/vnd.youtube.yt": {
		source: "iana"
	},
		"application/vnd.zul": {
		source: "iana",
		extensions: [
			"zir",
			"zirz"
		]
	},
		"application/vnd.zzazz.deck+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"zaz"
		]
	},
		"application/voicexml+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"vxml"
		]
	},
		"application/voucher-cms+json": {
		source: "iana",
		compressible: true
	},
		"application/vq-rtcpxr": {
		source: "iana"
	},
		"application/wasm": {
		compressible: true,
		extensions: [
			"wasm"
		]
	},
		"application/watcherinfo+xml": {
		source: "iana",
		compressible: true
	},
		"application/webpush-options+json": {
		source: "iana",
		compressible: true
	},
		"application/whoispp-query": {
		source: "iana"
	},
		"application/whoispp-response": {
		source: "iana"
	},
		"application/widget": {
		source: "iana",
		extensions: [
			"wgt"
		]
	},
		"application/winhlp": {
		source: "apache",
		extensions: [
			"hlp"
		]
	},
		"application/wita": {
		source: "iana"
	},
		"application/wordperfect5.1": {
		source: "iana"
	},
		"application/wsdl+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"wsdl"
		]
	},
		"application/wspolicy+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"wspolicy"
		]
	},
		"application/x-7z-compressed": {
		source: "apache",
		compressible: false,
		extensions: [
			"7z"
		]
	},
		"application/x-abiword": {
		source: "apache",
		extensions: [
			"abw"
		]
	},
		"application/x-ace-compressed": {
		source: "apache",
		extensions: [
			"ace"
		]
	},
		"application/x-amf": {
		source: "apache"
	},
		"application/x-apple-diskimage": {
		source: "apache",
		extensions: [
			"dmg"
		]
	},
		"application/x-arj": {
		compressible: false,
		extensions: [
			"arj"
		]
	},
		"application/x-authorware-bin": {
		source: "apache",
		extensions: [
			"aab",
			"x32",
			"u32",
			"vox"
		]
	},
		"application/x-authorware-map": {
		source: "apache",
		extensions: [
			"aam"
		]
	},
		"application/x-authorware-seg": {
		source: "apache",
		extensions: [
			"aas"
		]
	},
		"application/x-bcpio": {
		source: "apache",
		extensions: [
			"bcpio"
		]
	},
		"application/x-bdoc": {
		compressible: false,
		extensions: [
			"bdoc"
		]
	},
		"application/x-bittorrent": {
		source: "apache",
		extensions: [
			"torrent"
		]
	},
		"application/x-blorb": {
		source: "apache",
		extensions: [
			"blb",
			"blorb"
		]
	},
		"application/x-bzip": {
		source: "apache",
		compressible: false,
		extensions: [
			"bz"
		]
	},
		"application/x-bzip2": {
		source: "apache",
		compressible: false,
		extensions: [
			"bz2",
			"boz"
		]
	},
		"application/x-cbr": {
		source: "apache",
		extensions: [
			"cbr",
			"cba",
			"cbt",
			"cbz",
			"cb7"
		]
	},
		"application/x-cdlink": {
		source: "apache",
		extensions: [
			"vcd"
		]
	},
		"application/x-cfs-compressed": {
		source: "apache",
		extensions: [
			"cfs"
		]
	},
		"application/x-chat": {
		source: "apache",
		extensions: [
			"chat"
		]
	},
		"application/x-chess-pgn": {
		source: "apache",
		extensions: [
			"pgn"
		]
	},
		"application/x-chrome-extension": {
		extensions: [
			"crx"
		]
	},
		"application/x-cocoa": {
		source: "nginx",
		extensions: [
			"cco"
		]
	},
		"application/x-compress": {
		source: "apache"
	},
		"application/x-conference": {
		source: "apache",
		extensions: [
			"nsc"
		]
	},
		"application/x-cpio": {
		source: "apache",
		extensions: [
			"cpio"
		]
	},
		"application/x-csh": {
		source: "apache",
		extensions: [
			"csh"
		]
	},
		"application/x-deb": {
		compressible: false
	},
		"application/x-debian-package": {
		source: "apache",
		extensions: [
			"deb",
			"udeb"
		]
	},
		"application/x-dgc-compressed": {
		source: "apache",
		extensions: [
			"dgc"
		]
	},
		"application/x-director": {
		source: "apache",
		extensions: [
			"dir",
			"dcr",
			"dxr",
			"cst",
			"cct",
			"cxt",
			"w3d",
			"fgd",
			"swa"
		]
	},
		"application/x-doom": {
		source: "apache",
		extensions: [
			"wad"
		]
	},
		"application/x-dtbncx+xml": {
		source: "apache",
		compressible: true,
		extensions: [
			"ncx"
		]
	},
		"application/x-dtbook+xml": {
		source: "apache",
		compressible: true,
		extensions: [
			"dtb"
		]
	},
		"application/x-dtbresource+xml": {
		source: "apache",
		compressible: true,
		extensions: [
			"res"
		]
	},
		"application/x-dvi": {
		source: "apache",
		compressible: false,
		extensions: [
			"dvi"
		]
	},
		"application/x-envoy": {
		source: "apache",
		extensions: [
			"evy"
		]
	},
		"application/x-eva": {
		source: "apache",
		extensions: [
			"eva"
		]
	},
		"application/x-font-bdf": {
		source: "apache",
		extensions: [
			"bdf"
		]
	},
		"application/x-font-dos": {
		source: "apache"
	},
		"application/x-font-framemaker": {
		source: "apache"
	},
		"application/x-font-ghostscript": {
		source: "apache",
		extensions: [
			"gsf"
		]
	},
		"application/x-font-libgrx": {
		source: "apache"
	},
		"application/x-font-linux-psf": {
		source: "apache",
		extensions: [
			"psf"
		]
	},
		"application/x-font-pcf": {
		source: "apache",
		extensions: [
			"pcf"
		]
	},
		"application/x-font-snf": {
		source: "apache",
		extensions: [
			"snf"
		]
	},
		"application/x-font-speedo": {
		source: "apache"
	},
		"application/x-font-sunos-news": {
		source: "apache"
	},
		"application/x-font-type1": {
		source: "apache",
		extensions: [
			"pfa",
			"pfb",
			"pfm",
			"afm"
		]
	},
		"application/x-font-vfont": {
		source: "apache"
	},
		"application/x-freearc": {
		source: "apache",
		extensions: [
			"arc"
		]
	},
		"application/x-futuresplash": {
		source: "apache",
		extensions: [
			"spl"
		]
	},
		"application/x-gca-compressed": {
		source: "apache",
		extensions: [
			"gca"
		]
	},
		"application/x-glulx": {
		source: "apache",
		extensions: [
			"ulx"
		]
	},
		"application/x-gnumeric": {
		source: "apache",
		extensions: [
			"gnumeric"
		]
	},
		"application/x-gramps-xml": {
		source: "apache",
		extensions: [
			"gramps"
		]
	},
		"application/x-gtar": {
		source: "apache",
		extensions: [
			"gtar"
		]
	},
		"application/x-gzip": {
		source: "apache"
	},
		"application/x-hdf": {
		source: "apache",
		extensions: [
			"hdf"
		]
	},
		"application/x-httpd-php": {
		compressible: true,
		extensions: [
			"php"
		]
	},
		"application/x-install-instructions": {
		source: "apache",
		extensions: [
			"install"
		]
	},
		"application/x-iso9660-image": {
		source: "apache",
		extensions: [
			"iso"
		]
	},
		"application/x-java-archive-diff": {
		source: "nginx",
		extensions: [
			"jardiff"
		]
	},
		"application/x-java-jnlp-file": {
		source: "apache",
		compressible: false,
		extensions: [
			"jnlp"
		]
	},
		"application/x-javascript": {
		compressible: true
	},
		"application/x-keepass2": {
		extensions: [
			"kdbx"
		]
	},
		"application/x-latex": {
		source: "apache",
		compressible: false,
		extensions: [
			"latex"
		]
	},
		"application/x-lua-bytecode": {
		extensions: [
			"luac"
		]
	},
		"application/x-lzh-compressed": {
		source: "apache",
		extensions: [
			"lzh",
			"lha"
		]
	},
		"application/x-makeself": {
		source: "nginx",
		extensions: [
			"run"
		]
	},
		"application/x-mie": {
		source: "apache",
		extensions: [
			"mie"
		]
	},
		"application/x-mobipocket-ebook": {
		source: "apache",
		extensions: [
			"prc",
			"mobi"
		]
	},
		"application/x-mpegurl": {
		compressible: false
	},
		"application/x-ms-application": {
		source: "apache",
		extensions: [
			"application"
		]
	},
		"application/x-ms-shortcut": {
		source: "apache",
		extensions: [
			"lnk"
		]
	},
		"application/x-ms-wmd": {
		source: "apache",
		extensions: [
			"wmd"
		]
	},
		"application/x-ms-wmz": {
		source: "apache",
		extensions: [
			"wmz"
		]
	},
		"application/x-ms-xbap": {
		source: "apache",
		extensions: [
			"xbap"
		]
	},
		"application/x-msaccess": {
		source: "apache",
		extensions: [
			"mdb"
		]
	},
		"application/x-msbinder": {
		source: "apache",
		extensions: [
			"obd"
		]
	},
		"application/x-mscardfile": {
		source: "apache",
		extensions: [
			"crd"
		]
	},
		"application/x-msclip": {
		source: "apache",
		extensions: [
			"clp"
		]
	},
		"application/x-msdos-program": {
		extensions: [
			"exe"
		]
	},
		"application/x-msdownload": {
		source: "apache",
		extensions: [
			"exe",
			"dll",
			"com",
			"bat",
			"msi"
		]
	},
		"application/x-msmediaview": {
		source: "apache",
		extensions: [
			"mvb",
			"m13",
			"m14"
		]
	},
		"application/x-msmetafile": {
		source: "apache",
		extensions: [
			"wmf",
			"wmz",
			"emf",
			"emz"
		]
	},
		"application/x-msmoney": {
		source: "apache",
		extensions: [
			"mny"
		]
	},
		"application/x-mspublisher": {
		source: "apache",
		extensions: [
			"pub"
		]
	},
		"application/x-msschedule": {
		source: "apache",
		extensions: [
			"scd"
		]
	},
		"application/x-msterminal": {
		source: "apache",
		extensions: [
			"trm"
		]
	},
		"application/x-mswrite": {
		source: "apache",
		extensions: [
			"wri"
		]
	},
		"application/x-netcdf": {
		source: "apache",
		extensions: [
			"nc",
			"cdf"
		]
	},
		"application/x-ns-proxy-autoconfig": {
		compressible: true,
		extensions: [
			"pac"
		]
	},
		"application/x-nzb": {
		source: "apache",
		extensions: [
			"nzb"
		]
	},
		"application/x-perl": {
		source: "nginx",
		extensions: [
			"pl",
			"pm"
		]
	},
		"application/x-pilot": {
		source: "nginx",
		extensions: [
			"prc",
			"pdb"
		]
	},
		"application/x-pkcs12": {
		source: "apache",
		compressible: false,
		extensions: [
			"p12",
			"pfx"
		]
	},
		"application/x-pkcs7-certificates": {
		source: "apache",
		extensions: [
			"p7b",
			"spc"
		]
	},
		"application/x-pkcs7-certreqresp": {
		source: "apache",
		extensions: [
			"p7r"
		]
	},
		"application/x-pki-message": {
		source: "iana"
	},
		"application/x-rar-compressed": {
		source: "apache",
		compressible: false,
		extensions: [
			"rar"
		]
	},
		"application/x-redhat-package-manager": {
		source: "nginx",
		extensions: [
			"rpm"
		]
	},
		"application/x-research-info-systems": {
		source: "apache",
		extensions: [
			"ris"
		]
	},
		"application/x-sea": {
		source: "nginx",
		extensions: [
			"sea"
		]
	},
		"application/x-sh": {
		source: "apache",
		compressible: true,
		extensions: [
			"sh"
		]
	},
		"application/x-shar": {
		source: "apache",
		extensions: [
			"shar"
		]
	},
		"application/x-shockwave-flash": {
		source: "apache",
		compressible: false,
		extensions: [
			"swf"
		]
	},
		"application/x-silverlight-app": {
		source: "apache",
		extensions: [
			"xap"
		]
	},
		"application/x-sql": {
		source: "apache",
		extensions: [
			"sql"
		]
	},
		"application/x-stuffit": {
		source: "apache",
		compressible: false,
		extensions: [
			"sit"
		]
	},
		"application/x-stuffitx": {
		source: "apache",
		extensions: [
			"sitx"
		]
	},
		"application/x-subrip": {
		source: "apache",
		extensions: [
			"srt"
		]
	},
		"application/x-sv4cpio": {
		source: "apache",
		extensions: [
			"sv4cpio"
		]
	},
		"application/x-sv4crc": {
		source: "apache",
		extensions: [
			"sv4crc"
		]
	},
		"application/x-t3vm-image": {
		source: "apache",
		extensions: [
			"t3"
		]
	},
		"application/x-tads": {
		source: "apache",
		extensions: [
			"gam"
		]
	},
		"application/x-tar": {
		source: "apache",
		compressible: true,
		extensions: [
			"tar"
		]
	},
		"application/x-tcl": {
		source: "apache",
		extensions: [
			"tcl",
			"tk"
		]
	},
		"application/x-tex": {
		source: "apache",
		extensions: [
			"tex"
		]
	},
		"application/x-tex-tfm": {
		source: "apache",
		extensions: [
			"tfm"
		]
	},
		"application/x-texinfo": {
		source: "apache",
		extensions: [
			"texinfo",
			"texi"
		]
	},
		"application/x-tgif": {
		source: "apache",
		extensions: [
			"obj"
		]
	},
		"application/x-ustar": {
		source: "apache",
		extensions: [
			"ustar"
		]
	},
		"application/x-virtualbox-hdd": {
		compressible: true,
		extensions: [
			"hdd"
		]
	},
		"application/x-virtualbox-ova": {
		compressible: true,
		extensions: [
			"ova"
		]
	},
		"application/x-virtualbox-ovf": {
		compressible: true,
		extensions: [
			"ovf"
		]
	},
		"application/x-virtualbox-vbox": {
		compressible: true,
		extensions: [
			"vbox"
		]
	},
		"application/x-virtualbox-vbox-extpack": {
		compressible: false,
		extensions: [
			"vbox-extpack"
		]
	},
		"application/x-virtualbox-vdi": {
		compressible: true,
		extensions: [
			"vdi"
		]
	},
		"application/x-virtualbox-vhd": {
		compressible: true,
		extensions: [
			"vhd"
		]
	},
		"application/x-virtualbox-vmdk": {
		compressible: true,
		extensions: [
			"vmdk"
		]
	},
		"application/x-wais-source": {
		source: "apache",
		extensions: [
			"src"
		]
	},
		"application/x-web-app-manifest+json": {
		compressible: true,
		extensions: [
			"webapp"
		]
	},
		"application/x-www-form-urlencoded": {
		source: "iana",
		compressible: true
	},
		"application/x-x509-ca-cert": {
		source: "iana",
		extensions: [
			"der",
			"crt",
			"pem"
		]
	},
		"application/x-x509-ca-ra-cert": {
		source: "iana"
	},
		"application/x-x509-next-ca-cert": {
		source: "iana"
	},
		"application/x-xfig": {
		source: "apache",
		extensions: [
			"fig"
		]
	},
		"application/x-xliff+xml": {
		source: "apache",
		compressible: true,
		extensions: [
			"xlf"
		]
	},
		"application/x-xpinstall": {
		source: "apache",
		compressible: false,
		extensions: [
			"xpi"
		]
	},
		"application/x-xz": {
		source: "apache",
		extensions: [
			"xz"
		]
	},
		"application/x-zmachine": {
		source: "apache",
		extensions: [
			"z1",
			"z2",
			"z3",
			"z4",
			"z5",
			"z6",
			"z7",
			"z8"
		]
	},
		"application/x400-bp": {
		source: "iana"
	},
		"application/xacml+xml": {
		source: "iana",
		compressible: true
	},
		"application/xaml+xml": {
		source: "apache",
		compressible: true,
		extensions: [
			"xaml"
		]
	},
		"application/xcap-att+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"xav"
		]
	},
		"application/xcap-caps+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"xca"
		]
	},
		"application/xcap-diff+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"xdf"
		]
	},
		"application/xcap-el+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"xel"
		]
	},
		"application/xcap-error+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"xer"
		]
	},
		"application/xcap-ns+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"xns"
		]
	},
		"application/xcon-conference-info+xml": {
		source: "iana",
		compressible: true
	},
		"application/xcon-conference-info-diff+xml": {
		source: "iana",
		compressible: true
	},
		"application/xenc+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"xenc"
		]
	},
		"application/xhtml+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"xhtml",
			"xht"
		]
	},
		"application/xhtml-voice+xml": {
		source: "apache",
		compressible: true
	},
		"application/xliff+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"xlf"
		]
	},
		"application/xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"xml",
			"xsl",
			"xsd",
			"rng"
		]
	},
		"application/xml-dtd": {
		source: "iana",
		compressible: true,
		extensions: [
			"dtd"
		]
	},
		"application/xml-external-parsed-entity": {
		source: "iana"
	},
		"application/xml-patch+xml": {
		source: "iana",
		compressible: true
	},
		"application/xmpp+xml": {
		source: "iana",
		compressible: true
	},
		"application/xop+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"xop"
		]
	},
		"application/xproc+xml": {
		source: "apache",
		compressible: true,
		extensions: [
			"xpl"
		]
	},
		"application/xslt+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"xsl",
			"xslt"
		]
	},
		"application/xspf+xml": {
		source: "apache",
		compressible: true,
		extensions: [
			"xspf"
		]
	},
		"application/xv+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"mxml",
			"xhvml",
			"xvml",
			"xvm"
		]
	},
		"application/yang": {
		source: "iana",
		extensions: [
			"yang"
		]
	},
		"application/yang-data+json": {
		source: "iana",
		compressible: true
	},
		"application/yang-data+xml": {
		source: "iana",
		compressible: true
	},
		"application/yang-patch+json": {
		source: "iana",
		compressible: true
	},
		"application/yang-patch+xml": {
		source: "iana",
		compressible: true
	},
		"application/yin+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"yin"
		]
	},
		"application/zip": {
		source: "iana",
		compressible: false,
		extensions: [
			"zip"
		]
	},
		"application/zlib": {
		source: "iana"
	},
		"application/zstd": {
		source: "iana"
	},
		"audio/1d-interleaved-parityfec": {
		source: "iana"
	},
		"audio/32kadpcm": {
		source: "iana"
	},
		"audio/3gpp": {
		source: "iana",
		compressible: false,
		extensions: [
			"3gpp"
		]
	},
		"audio/3gpp2": {
		source: "iana"
	},
		"audio/aac": {
		source: "iana"
	},
		"audio/ac3": {
		source: "iana"
	},
		"audio/adpcm": {
		source: "apache",
		extensions: [
			"adp"
		]
	},
		"audio/amr": {
		source: "iana",
		extensions: [
			"amr"
		]
	},
		"audio/amr-wb": {
		source: "iana"
	},
		"audio/amr-wb+": {
		source: "iana"
	},
		"audio/aptx": {
		source: "iana"
	},
		"audio/asc": {
		source: "iana"
	},
		"audio/atrac-advanced-lossless": {
		source: "iana"
	},
		"audio/atrac-x": {
		source: "iana"
	},
		"audio/atrac3": {
		source: "iana"
	},
		"audio/basic": {
		source: "iana",
		compressible: false,
		extensions: [
			"au",
			"snd"
		]
	},
		"audio/bv16": {
		source: "iana"
	},
		"audio/bv32": {
		source: "iana"
	},
		"audio/clearmode": {
		source: "iana"
	},
		"audio/cn": {
		source: "iana"
	},
		"audio/dat12": {
		source: "iana"
	},
		"audio/dls": {
		source: "iana"
	},
		"audio/dsr-es201108": {
		source: "iana"
	},
		"audio/dsr-es202050": {
		source: "iana"
	},
		"audio/dsr-es202211": {
		source: "iana"
	},
		"audio/dsr-es202212": {
		source: "iana"
	},
		"audio/dv": {
		source: "iana"
	},
		"audio/dvi4": {
		source: "iana"
	},
		"audio/eac3": {
		source: "iana"
	},
		"audio/encaprtp": {
		source: "iana"
	},
		"audio/evrc": {
		source: "iana"
	},
		"audio/evrc-qcp": {
		source: "iana"
	},
		"audio/evrc0": {
		source: "iana"
	},
		"audio/evrc1": {
		source: "iana"
	},
		"audio/evrcb": {
		source: "iana"
	},
		"audio/evrcb0": {
		source: "iana"
	},
		"audio/evrcb1": {
		source: "iana"
	},
		"audio/evrcnw": {
		source: "iana"
	},
		"audio/evrcnw0": {
		source: "iana"
	},
		"audio/evrcnw1": {
		source: "iana"
	},
		"audio/evrcwb": {
		source: "iana"
	},
		"audio/evrcwb0": {
		source: "iana"
	},
		"audio/evrcwb1": {
		source: "iana"
	},
		"audio/evs": {
		source: "iana"
	},
		"audio/flexfec": {
		source: "iana"
	},
		"audio/fwdred": {
		source: "iana"
	},
		"audio/g711-0": {
		source: "iana"
	},
		"audio/g719": {
		source: "iana"
	},
		"audio/g722": {
		source: "iana"
	},
		"audio/g7221": {
		source: "iana"
	},
		"audio/g723": {
		source: "iana"
	},
		"audio/g726-16": {
		source: "iana"
	},
		"audio/g726-24": {
		source: "iana"
	},
		"audio/g726-32": {
		source: "iana"
	},
		"audio/g726-40": {
		source: "iana"
	},
		"audio/g728": {
		source: "iana"
	},
		"audio/g729": {
		source: "iana"
	},
		"audio/g7291": {
		source: "iana"
	},
		"audio/g729d": {
		source: "iana"
	},
		"audio/g729e": {
		source: "iana"
	},
		"audio/gsm": {
		source: "iana"
	},
		"audio/gsm-efr": {
		source: "iana"
	},
		"audio/gsm-hr-08": {
		source: "iana"
	},
		"audio/ilbc": {
		source: "iana"
	},
		"audio/ip-mr_v2.5": {
		source: "iana"
	},
		"audio/isac": {
		source: "apache"
	},
		"audio/l16": {
		source: "iana"
	},
		"audio/l20": {
		source: "iana"
	},
		"audio/l24": {
		source: "iana",
		compressible: false
	},
		"audio/l8": {
		source: "iana"
	},
		"audio/lpc": {
		source: "iana"
	},
		"audio/melp": {
		source: "iana"
	},
		"audio/melp1200": {
		source: "iana"
	},
		"audio/melp2400": {
		source: "iana"
	},
		"audio/melp600": {
		source: "iana"
	},
		"audio/mhas": {
		source: "iana"
	},
		"audio/midi": {
		source: "apache",
		extensions: [
			"mid",
			"midi",
			"kar",
			"rmi"
		]
	},
		"audio/mobile-xmf": {
		source: "iana",
		extensions: [
			"mxmf"
		]
	},
		"audio/mp3": {
		compressible: false,
		extensions: [
			"mp3"
		]
	},
		"audio/mp4": {
		source: "iana",
		compressible: false,
		extensions: [
			"m4a",
			"mp4a"
		]
	},
		"audio/mp4a-latm": {
		source: "iana"
	},
		"audio/mpa": {
		source: "iana"
	},
		"audio/mpa-robust": {
		source: "iana"
	},
		"audio/mpeg": {
		source: "iana",
		compressible: false,
		extensions: [
			"mpga",
			"mp2",
			"mp2a",
			"mp3",
			"m2a",
			"m3a"
		]
	},
		"audio/mpeg4-generic": {
		source: "iana"
	},
		"audio/musepack": {
		source: "apache"
	},
		"audio/ogg": {
		source: "iana",
		compressible: false,
		extensions: [
			"oga",
			"ogg",
			"spx",
			"opus"
		]
	},
		"audio/opus": {
		source: "iana"
	},
		"audio/parityfec": {
		source: "iana"
	},
		"audio/pcma": {
		source: "iana"
	},
		"audio/pcma-wb": {
		source: "iana"
	},
		"audio/pcmu": {
		source: "iana"
	},
		"audio/pcmu-wb": {
		source: "iana"
	},
		"audio/prs.sid": {
		source: "iana"
	},
		"audio/qcelp": {
		source: "iana"
	},
		"audio/raptorfec": {
		source: "iana"
	},
		"audio/red": {
		source: "iana"
	},
		"audio/rtp-enc-aescm128": {
		source: "iana"
	},
		"audio/rtp-midi": {
		source: "iana"
	},
		"audio/rtploopback": {
		source: "iana"
	},
		"audio/rtx": {
		source: "iana"
	},
		"audio/s3m": {
		source: "apache",
		extensions: [
			"s3m"
		]
	},
		"audio/scip": {
		source: "iana"
	},
		"audio/silk": {
		source: "apache",
		extensions: [
			"sil"
		]
	},
		"audio/smv": {
		source: "iana"
	},
		"audio/smv-qcp": {
		source: "iana"
	},
		"audio/smv0": {
		source: "iana"
	},
		"audio/sofa": {
		source: "iana"
	},
		"audio/sp-midi": {
		source: "iana"
	},
		"audio/speex": {
		source: "iana"
	},
		"audio/t140c": {
		source: "iana"
	},
		"audio/t38": {
		source: "iana"
	},
		"audio/telephone-event": {
		source: "iana"
	},
		"audio/tetra_acelp": {
		source: "iana"
	},
		"audio/tetra_acelp_bb": {
		source: "iana"
	},
		"audio/tone": {
		source: "iana"
	},
		"audio/tsvcis": {
		source: "iana"
	},
		"audio/uemclip": {
		source: "iana"
	},
		"audio/ulpfec": {
		source: "iana"
	},
		"audio/usac": {
		source: "iana"
	},
		"audio/vdvi": {
		source: "iana"
	},
		"audio/vmr-wb": {
		source: "iana"
	},
		"audio/vnd.3gpp.iufp": {
		source: "iana"
	},
		"audio/vnd.4sb": {
		source: "iana"
	},
		"audio/vnd.audiokoz": {
		source: "iana"
	},
		"audio/vnd.celp": {
		source: "iana"
	},
		"audio/vnd.cisco.nse": {
		source: "iana"
	},
		"audio/vnd.cmles.radio-events": {
		source: "iana"
	},
		"audio/vnd.cns.anp1": {
		source: "iana"
	},
		"audio/vnd.cns.inf1": {
		source: "iana"
	},
		"audio/vnd.dece.audio": {
		source: "iana",
		extensions: [
			"uva",
			"uvva"
		]
	},
		"audio/vnd.digital-winds": {
		source: "iana",
		extensions: [
			"eol"
		]
	},
		"audio/vnd.dlna.adts": {
		source: "iana"
	},
		"audio/vnd.dolby.heaac.1": {
		source: "iana"
	},
		"audio/vnd.dolby.heaac.2": {
		source: "iana"
	},
		"audio/vnd.dolby.mlp": {
		source: "iana"
	},
		"audio/vnd.dolby.mps": {
		source: "iana"
	},
		"audio/vnd.dolby.pl2": {
		source: "iana"
	},
		"audio/vnd.dolby.pl2x": {
		source: "iana"
	},
		"audio/vnd.dolby.pl2z": {
		source: "iana"
	},
		"audio/vnd.dolby.pulse.1": {
		source: "iana"
	},
		"audio/vnd.dra": {
		source: "iana",
		extensions: [
			"dra"
		]
	},
		"audio/vnd.dts": {
		source: "iana",
		extensions: [
			"dts"
		]
	},
		"audio/vnd.dts.hd": {
		source: "iana",
		extensions: [
			"dtshd"
		]
	},
		"audio/vnd.dts.uhd": {
		source: "iana"
	},
		"audio/vnd.dvb.file": {
		source: "iana"
	},
		"audio/vnd.everad.plj": {
		source: "iana"
	},
		"audio/vnd.hns.audio": {
		source: "iana"
	},
		"audio/vnd.lucent.voice": {
		source: "iana",
		extensions: [
			"lvp"
		]
	},
		"audio/vnd.ms-playready.media.pya": {
		source: "iana",
		extensions: [
			"pya"
		]
	},
		"audio/vnd.nokia.mobile-xmf": {
		source: "iana"
	},
		"audio/vnd.nortel.vbk": {
		source: "iana"
	},
		"audio/vnd.nuera.ecelp4800": {
		source: "iana",
		extensions: [
			"ecelp4800"
		]
	},
		"audio/vnd.nuera.ecelp7470": {
		source: "iana",
		extensions: [
			"ecelp7470"
		]
	},
		"audio/vnd.nuera.ecelp9600": {
		source: "iana",
		extensions: [
			"ecelp9600"
		]
	},
		"audio/vnd.octel.sbc": {
		source: "iana"
	},
		"audio/vnd.presonus.multitrack": {
		source: "iana"
	},
		"audio/vnd.qcelp": {
		source: "iana"
	},
		"audio/vnd.rhetorex.32kadpcm": {
		source: "iana"
	},
		"audio/vnd.rip": {
		source: "iana",
		extensions: [
			"rip"
		]
	},
		"audio/vnd.rn-realaudio": {
		compressible: false
	},
		"audio/vnd.sealedmedia.softseal.mpeg": {
		source: "iana"
	},
		"audio/vnd.vmx.cvsd": {
		source: "iana"
	},
		"audio/vnd.wave": {
		compressible: false
	},
		"audio/vorbis": {
		source: "iana",
		compressible: false
	},
		"audio/vorbis-config": {
		source: "iana"
	},
		"audio/wav": {
		compressible: false,
		extensions: [
			"wav"
		]
	},
		"audio/wave": {
		compressible: false,
		extensions: [
			"wav"
		]
	},
		"audio/webm": {
		source: "apache",
		compressible: false,
		extensions: [
			"weba"
		]
	},
		"audio/x-aac": {
		source: "apache",
		compressible: false,
		extensions: [
			"aac"
		]
	},
		"audio/x-aiff": {
		source: "apache",
		extensions: [
			"aif",
			"aiff",
			"aifc"
		]
	},
		"audio/x-caf": {
		source: "apache",
		compressible: false,
		extensions: [
			"caf"
		]
	},
		"audio/x-flac": {
		source: "apache",
		extensions: [
			"flac"
		]
	},
		"audio/x-m4a": {
		source: "nginx",
		extensions: [
			"m4a"
		]
	},
		"audio/x-matroska": {
		source: "apache",
		extensions: [
			"mka"
		]
	},
		"audio/x-mpegurl": {
		source: "apache",
		extensions: [
			"m3u"
		]
	},
		"audio/x-ms-wax": {
		source: "apache",
		extensions: [
			"wax"
		]
	},
		"audio/x-ms-wma": {
		source: "apache",
		extensions: [
			"wma"
		]
	},
		"audio/x-pn-realaudio": {
		source: "apache",
		extensions: [
			"ram",
			"ra"
		]
	},
		"audio/x-pn-realaudio-plugin": {
		source: "apache",
		extensions: [
			"rmp"
		]
	},
		"audio/x-realaudio": {
		source: "nginx",
		extensions: [
			"ra"
		]
	},
		"audio/x-tta": {
		source: "apache"
	},
		"audio/x-wav": {
		source: "apache",
		extensions: [
			"wav"
		]
	},
		"audio/xm": {
		source: "apache",
		extensions: [
			"xm"
		]
	},
		"chemical/x-cdx": {
		source: "apache",
		extensions: [
			"cdx"
		]
	},
		"chemical/x-cif": {
		source: "apache",
		extensions: [
			"cif"
		]
	},
		"chemical/x-cmdf": {
		source: "apache",
		extensions: [
			"cmdf"
		]
	},
		"chemical/x-cml": {
		source: "apache",
		extensions: [
			"cml"
		]
	},
		"chemical/x-csml": {
		source: "apache",
		extensions: [
			"csml"
		]
	},
		"chemical/x-pdb": {
		source: "apache"
	},
		"chemical/x-xyz": {
		source: "apache",
		extensions: [
			"xyz"
		]
	},
		"font/collection": {
		source: "iana",
		extensions: [
			"ttc"
		]
	},
		"font/otf": {
		source: "iana",
		compressible: true,
		extensions: [
			"otf"
		]
	},
		"font/sfnt": {
		source: "iana"
	},
		"font/ttf": {
		source: "iana",
		compressible: true,
		extensions: [
			"ttf"
		]
	},
		"font/woff": {
		source: "iana",
		extensions: [
			"woff"
		]
	},
		"font/woff2": {
		source: "iana",
		extensions: [
			"woff2"
		]
	},
		"image/aces": {
		source: "iana",
		extensions: [
			"exr"
		]
	},
		"image/apng": {
		compressible: false,
		extensions: [
			"apng"
		]
	},
		"image/avci": {
		source: "iana"
	},
		"image/avcs": {
		source: "iana"
	},
		"image/avif": {
		source: "iana",
		compressible: false,
		extensions: [
			"avif"
		]
	},
		"image/bmp": {
		source: "iana",
		compressible: true,
		extensions: [
			"bmp"
		]
	},
		"image/cgm": {
		source: "iana",
		extensions: [
			"cgm"
		]
	},
		"image/dicom-rle": {
		source: "iana",
		extensions: [
			"drle"
		]
	},
		"image/emf": {
		source: "iana",
		extensions: [
			"emf"
		]
	},
		"image/fits": {
		source: "iana",
		extensions: [
			"fits"
		]
	},
		"image/g3fax": {
		source: "iana",
		extensions: [
			"g3"
		]
	},
		"image/gif": {
		source: "iana",
		compressible: false,
		extensions: [
			"gif"
		]
	},
		"image/heic": {
		source: "iana",
		extensions: [
			"heic"
		]
	},
		"image/heic-sequence": {
		source: "iana",
		extensions: [
			"heics"
		]
	},
		"image/heif": {
		source: "iana",
		extensions: [
			"heif"
		]
	},
		"image/heif-sequence": {
		source: "iana",
		extensions: [
			"heifs"
		]
	},
		"image/hej2k": {
		source: "iana",
		extensions: [
			"hej2"
		]
	},
		"image/hsj2": {
		source: "iana",
		extensions: [
			"hsj2"
		]
	},
		"image/ief": {
		source: "iana",
		extensions: [
			"ief"
		]
	},
		"image/jls": {
		source: "iana",
		extensions: [
			"jls"
		]
	},
		"image/jp2": {
		source: "iana",
		compressible: false,
		extensions: [
			"jp2",
			"jpg2"
		]
	},
		"image/jpeg": {
		source: "iana",
		compressible: false,
		extensions: [
			"jpeg",
			"jpg",
			"jpe"
		]
	},
		"image/jph": {
		source: "iana",
		extensions: [
			"jph"
		]
	},
		"image/jphc": {
		source: "iana",
		extensions: [
			"jhc"
		]
	},
		"image/jpm": {
		source: "iana",
		compressible: false,
		extensions: [
			"jpm"
		]
	},
		"image/jpx": {
		source: "iana",
		compressible: false,
		extensions: [
			"jpx",
			"jpf"
		]
	},
		"image/jxr": {
		source: "iana",
		extensions: [
			"jxr"
		]
	},
		"image/jxra": {
		source: "iana",
		extensions: [
			"jxra"
		]
	},
		"image/jxrs": {
		source: "iana",
		extensions: [
			"jxrs"
		]
	},
		"image/jxs": {
		source: "iana",
		extensions: [
			"jxs"
		]
	},
		"image/jxsc": {
		source: "iana",
		extensions: [
			"jxsc"
		]
	},
		"image/jxsi": {
		source: "iana",
		extensions: [
			"jxsi"
		]
	},
		"image/jxss": {
		source: "iana",
		extensions: [
			"jxss"
		]
	},
		"image/ktx": {
		source: "iana",
		extensions: [
			"ktx"
		]
	},
		"image/ktx2": {
		source: "iana",
		extensions: [
			"ktx2"
		]
	},
		"image/naplps": {
		source: "iana"
	},
		"image/pjpeg": {
		compressible: false
	},
		"image/png": {
		source: "iana",
		compressible: false,
		extensions: [
			"png"
		]
	},
		"image/prs.btif": {
		source: "iana",
		extensions: [
			"btif"
		]
	},
		"image/prs.pti": {
		source: "iana",
		extensions: [
			"pti"
		]
	},
		"image/pwg-raster": {
		source: "iana"
	},
		"image/sgi": {
		source: "apache",
		extensions: [
			"sgi"
		]
	},
		"image/svg+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"svg",
			"svgz"
		]
	},
		"image/t38": {
		source: "iana",
		extensions: [
			"t38"
		]
	},
		"image/tiff": {
		source: "iana",
		compressible: false,
		extensions: [
			"tif",
			"tiff"
		]
	},
		"image/tiff-fx": {
		source: "iana",
		extensions: [
			"tfx"
		]
	},
		"image/vnd.adobe.photoshop": {
		source: "iana",
		compressible: true,
		extensions: [
			"psd"
		]
	},
		"image/vnd.airzip.accelerator.azv": {
		source: "iana",
		extensions: [
			"azv"
		]
	},
		"image/vnd.cns.inf2": {
		source: "iana"
	},
		"image/vnd.dece.graphic": {
		source: "iana",
		extensions: [
			"uvi",
			"uvvi",
			"uvg",
			"uvvg"
		]
	},
		"image/vnd.djvu": {
		source: "iana",
		extensions: [
			"djvu",
			"djv"
		]
	},
		"image/vnd.dvb.subtitle": {
		source: "iana",
		extensions: [
			"sub"
		]
	},
		"image/vnd.dwg": {
		source: "iana",
		extensions: [
			"dwg"
		]
	},
		"image/vnd.dxf": {
		source: "iana",
		extensions: [
			"dxf"
		]
	},
		"image/vnd.fastbidsheet": {
		source: "iana",
		extensions: [
			"fbs"
		]
	},
		"image/vnd.fpx": {
		source: "iana",
		extensions: [
			"fpx"
		]
	},
		"image/vnd.fst": {
		source: "iana",
		extensions: [
			"fst"
		]
	},
		"image/vnd.fujixerox.edmics-mmr": {
		source: "iana",
		extensions: [
			"mmr"
		]
	},
		"image/vnd.fujixerox.edmics-rlc": {
		source: "iana",
		extensions: [
			"rlc"
		]
	},
		"image/vnd.globalgraphics.pgb": {
		source: "iana"
	},
		"image/vnd.microsoft.icon": {
		source: "iana",
		extensions: [
			"ico"
		]
	},
		"image/vnd.mix": {
		source: "iana"
	},
		"image/vnd.mozilla.apng": {
		source: "iana"
	},
		"image/vnd.ms-dds": {
		extensions: [
			"dds"
		]
	},
		"image/vnd.ms-modi": {
		source: "iana",
		extensions: [
			"mdi"
		]
	},
		"image/vnd.ms-photo": {
		source: "apache",
		extensions: [
			"wdp"
		]
	},
		"image/vnd.net-fpx": {
		source: "iana",
		extensions: [
			"npx"
		]
	},
		"image/vnd.pco.b16": {
		source: "iana",
		extensions: [
			"b16"
		]
	},
		"image/vnd.radiance": {
		source: "iana"
	},
		"image/vnd.sealed.png": {
		source: "iana"
	},
		"image/vnd.sealedmedia.softseal.gif": {
		source: "iana"
	},
		"image/vnd.sealedmedia.softseal.jpg": {
		source: "iana"
	},
		"image/vnd.svf": {
		source: "iana"
	},
		"image/vnd.tencent.tap": {
		source: "iana",
		extensions: [
			"tap"
		]
	},
		"image/vnd.valve.source.texture": {
		source: "iana",
		extensions: [
			"vtf"
		]
	},
		"image/vnd.wap.wbmp": {
		source: "iana",
		extensions: [
			"wbmp"
		]
	},
		"image/vnd.xiff": {
		source: "iana",
		extensions: [
			"xif"
		]
	},
		"image/vnd.zbrush.pcx": {
		source: "iana",
		extensions: [
			"pcx"
		]
	},
		"image/webp": {
		source: "apache",
		extensions: [
			"webp"
		]
	},
		"image/wmf": {
		source: "iana",
		extensions: [
			"wmf"
		]
	},
		"image/x-3ds": {
		source: "apache",
		extensions: [
			"3ds"
		]
	},
		"image/x-cmu-raster": {
		source: "apache",
		extensions: [
			"ras"
		]
	},
		"image/x-cmx": {
		source: "apache",
		extensions: [
			"cmx"
		]
	},
		"image/x-freehand": {
		source: "apache",
		extensions: [
			"fh",
			"fhc",
			"fh4",
			"fh5",
			"fh7"
		]
	},
		"image/x-icon": {
		source: "apache",
		compressible: true,
		extensions: [
			"ico"
		]
	},
		"image/x-jng": {
		source: "nginx",
		extensions: [
			"jng"
		]
	},
		"image/x-mrsid-image": {
		source: "apache",
		extensions: [
			"sid"
		]
	},
		"image/x-ms-bmp": {
		source: "nginx",
		compressible: true,
		extensions: [
			"bmp"
		]
	},
		"image/x-pcx": {
		source: "apache",
		extensions: [
			"pcx"
		]
	},
		"image/x-pict": {
		source: "apache",
		extensions: [
			"pic",
			"pct"
		]
	},
		"image/x-portable-anymap": {
		source: "apache",
		extensions: [
			"pnm"
		]
	},
		"image/x-portable-bitmap": {
		source: "apache",
		extensions: [
			"pbm"
		]
	},
		"image/x-portable-graymap": {
		source: "apache",
		extensions: [
			"pgm"
		]
	},
		"image/x-portable-pixmap": {
		source: "apache",
		extensions: [
			"ppm"
		]
	},
		"image/x-rgb": {
		source: "apache",
		extensions: [
			"rgb"
		]
	},
		"image/x-tga": {
		source: "apache",
		extensions: [
			"tga"
		]
	},
		"image/x-xbitmap": {
		source: "apache",
		extensions: [
			"xbm"
		]
	},
		"image/x-xcf": {
		compressible: false
	},
		"image/x-xpixmap": {
		source: "apache",
		extensions: [
			"xpm"
		]
	},
		"image/x-xwindowdump": {
		source: "apache",
		extensions: [
			"xwd"
		]
	},
		"message/cpim": {
		source: "iana"
	},
		"message/delivery-status": {
		source: "iana"
	},
		"message/disposition-notification": {
		source: "iana",
		extensions: [
			"disposition-notification"
		]
	},
		"message/external-body": {
		source: "iana"
	},
		"message/feedback-report": {
		source: "iana"
	},
		"message/global": {
		source: "iana",
		extensions: [
			"u8msg"
		]
	},
		"message/global-delivery-status": {
		source: "iana",
		extensions: [
			"u8dsn"
		]
	},
		"message/global-disposition-notification": {
		source: "iana",
		extensions: [
			"u8mdn"
		]
	},
		"message/global-headers": {
		source: "iana",
		extensions: [
			"u8hdr"
		]
	},
		"message/http": {
		source: "iana",
		compressible: false
	},
		"message/imdn+xml": {
		source: "iana",
		compressible: true
	},
		"message/news": {
		source: "iana"
	},
		"message/partial": {
		source: "iana",
		compressible: false
	},
		"message/rfc822": {
		source: "iana",
		compressible: true,
		extensions: [
			"eml",
			"mime"
		]
	},
		"message/s-http": {
		source: "iana"
	},
		"message/sip": {
		source: "iana"
	},
		"message/sipfrag": {
		source: "iana"
	},
		"message/tracking-status": {
		source: "iana"
	},
		"message/vnd.si.simp": {
		source: "iana"
	},
		"message/vnd.wfa.wsc": {
		source: "iana",
		extensions: [
			"wsc"
		]
	},
		"model/3mf": {
		source: "iana",
		extensions: [
			"3mf"
		]
	},
		"model/e57": {
		source: "iana"
	},
		"model/gltf+json": {
		source: "iana",
		compressible: true,
		extensions: [
			"gltf"
		]
	},
		"model/gltf-binary": {
		source: "iana",
		compressible: true,
		extensions: [
			"glb"
		]
	},
		"model/iges": {
		source: "iana",
		compressible: false,
		extensions: [
			"igs",
			"iges"
		]
	},
		"model/mesh": {
		source: "iana",
		compressible: false,
		extensions: [
			"msh",
			"mesh",
			"silo"
		]
	},
		"model/mtl": {
		source: "iana",
		extensions: [
			"mtl"
		]
	},
		"model/obj": {
		source: "iana",
		extensions: [
			"obj"
		]
	},
		"model/stl": {
		source: "iana",
		extensions: [
			"stl"
		]
	},
		"model/vnd.collada+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"dae"
		]
	},
		"model/vnd.dwf": {
		source: "iana",
		extensions: [
			"dwf"
		]
	},
		"model/vnd.flatland.3dml": {
		source: "iana"
	},
		"model/vnd.gdl": {
		source: "iana",
		extensions: [
			"gdl"
		]
	},
		"model/vnd.gs-gdl": {
		source: "apache"
	},
		"model/vnd.gs.gdl": {
		source: "iana"
	},
		"model/vnd.gtw": {
		source: "iana",
		extensions: [
			"gtw"
		]
	},
		"model/vnd.moml+xml": {
		source: "iana",
		compressible: true
	},
		"model/vnd.mts": {
		source: "iana",
		extensions: [
			"mts"
		]
	},
		"model/vnd.opengex": {
		source: "iana",
		extensions: [
			"ogex"
		]
	},
		"model/vnd.parasolid.transmit.binary": {
		source: "iana",
		extensions: [
			"x_b"
		]
	},
		"model/vnd.parasolid.transmit.text": {
		source: "iana",
		extensions: [
			"x_t"
		]
	},
		"model/vnd.rosette.annotated-data-model": {
		source: "iana"
	},
		"model/vnd.usdz+zip": {
		source: "iana",
		compressible: false,
		extensions: [
			"usdz"
		]
	},
		"model/vnd.valve.source.compiled-map": {
		source: "iana",
		extensions: [
			"bsp"
		]
	},
		"model/vnd.vtu": {
		source: "iana",
		extensions: [
			"vtu"
		]
	},
		"model/vrml": {
		source: "iana",
		compressible: false,
		extensions: [
			"wrl",
			"vrml"
		]
	},
		"model/x3d+binary": {
		source: "apache",
		compressible: false,
		extensions: [
			"x3db",
			"x3dbz"
		]
	},
		"model/x3d+fastinfoset": {
		source: "iana",
		extensions: [
			"x3db"
		]
	},
		"model/x3d+vrml": {
		source: "apache",
		compressible: false,
		extensions: [
			"x3dv",
			"x3dvz"
		]
	},
		"model/x3d+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"x3d",
			"x3dz"
		]
	},
		"model/x3d-vrml": {
		source: "iana",
		extensions: [
			"x3dv"
		]
	},
		"multipart/alternative": {
		source: "iana",
		compressible: false
	},
		"multipart/appledouble": {
		source: "iana"
	},
		"multipart/byteranges": {
		source: "iana"
	},
		"multipart/digest": {
		source: "iana"
	},
		"multipart/encrypted": {
		source: "iana",
		compressible: false
	},
		"multipart/form-data": {
		source: "iana",
		compressible: false
	},
		"multipart/header-set": {
		source: "iana"
	},
		"multipart/mixed": {
		source: "iana"
	},
		"multipart/multilingual": {
		source: "iana"
	},
		"multipart/parallel": {
		source: "iana"
	},
		"multipart/related": {
		source: "iana",
		compressible: false
	},
		"multipart/report": {
		source: "iana"
	},
		"multipart/signed": {
		source: "iana",
		compressible: false
	},
		"multipart/vnd.bint.med-plus": {
		source: "iana"
	},
		"multipart/voice-message": {
		source: "iana"
	},
		"multipart/x-mixed-replace": {
		source: "iana"
	},
		"text/1d-interleaved-parityfec": {
		source: "iana"
	},
		"text/cache-manifest": {
		source: "iana",
		compressible: true,
		extensions: [
			"appcache",
			"manifest"
		]
	},
		"text/calendar": {
		source: "iana",
		extensions: [
			"ics",
			"ifb"
		]
	},
		"text/calender": {
		compressible: true
	},
		"text/cmd": {
		compressible: true
	},
		"text/coffeescript": {
		extensions: [
			"coffee",
			"litcoffee"
		]
	},
		"text/cql": {
		source: "iana"
	},
		"text/cql-expression": {
		source: "iana"
	},
		"text/cql-identifier": {
		source: "iana"
	},
		"text/css": {
		source: "iana",
		charset: "UTF-8",
		compressible: true,
		extensions: [
			"css"
		]
	},
		"text/csv": {
		source: "iana",
		compressible: true,
		extensions: [
			"csv"
		]
	},
		"text/csv-schema": {
		source: "iana"
	},
		"text/directory": {
		source: "iana"
	},
		"text/dns": {
		source: "iana"
	},
		"text/ecmascript": {
		source: "iana"
	},
		"text/encaprtp": {
		source: "iana"
	},
		"text/enriched": {
		source: "iana"
	},
		"text/fhirpath": {
		source: "iana"
	},
		"text/flexfec": {
		source: "iana"
	},
		"text/fwdred": {
		source: "iana"
	},
		"text/gff3": {
		source: "iana"
	},
		"text/grammar-ref-list": {
		source: "iana"
	},
		"text/html": {
		source: "iana",
		compressible: true,
		extensions: [
			"html",
			"htm",
			"shtml"
		]
	},
		"text/jade": {
		extensions: [
			"jade"
		]
	},
		"text/javascript": {
		source: "iana",
		compressible: true
	},
		"text/jcr-cnd": {
		source: "iana"
	},
		"text/jsx": {
		compressible: true,
		extensions: [
			"jsx"
		]
	},
		"text/less": {
		compressible: true,
		extensions: [
			"less"
		]
	},
		"text/markdown": {
		source: "iana",
		compressible: true,
		extensions: [
			"markdown",
			"md"
		]
	},
		"text/mathml": {
		source: "nginx",
		extensions: [
			"mml"
		]
	},
		"text/mdx": {
		compressible: true,
		extensions: [
			"mdx"
		]
	},
		"text/mizar": {
		source: "iana"
	},
		"text/n3": {
		source: "iana",
		charset: "UTF-8",
		compressible: true,
		extensions: [
			"n3"
		]
	},
		"text/parameters": {
		source: "iana",
		charset: "UTF-8"
	},
		"text/parityfec": {
		source: "iana"
	},
		"text/plain": {
		source: "iana",
		compressible: true,
		extensions: [
			"txt",
			"text",
			"conf",
			"def",
			"list",
			"log",
			"in",
			"ini"
		]
	},
		"text/provenance-notation": {
		source: "iana",
		charset: "UTF-8"
	},
		"text/prs.fallenstein.rst": {
		source: "iana"
	},
		"text/prs.lines.tag": {
		source: "iana",
		extensions: [
			"dsc"
		]
	},
		"text/prs.prop.logic": {
		source: "iana"
	},
		"text/raptorfec": {
		source: "iana"
	},
		"text/red": {
		source: "iana"
	},
		"text/rfc822-headers": {
		source: "iana"
	},
		"text/richtext": {
		source: "iana",
		compressible: true,
		extensions: [
			"rtx"
		]
	},
		"text/rtf": {
		source: "iana",
		compressible: true,
		extensions: [
			"rtf"
		]
	},
		"text/rtp-enc-aescm128": {
		source: "iana"
	},
		"text/rtploopback": {
		source: "iana"
	},
		"text/rtx": {
		source: "iana"
	},
		"text/sgml": {
		source: "iana",
		extensions: [
			"sgml",
			"sgm"
		]
	},
		"text/shaclc": {
		source: "iana"
	},
		"text/shex": {
		extensions: [
			"shex"
		]
	},
		"text/slim": {
		extensions: [
			"slim",
			"slm"
		]
	},
		"text/spdx": {
		source: "iana",
		extensions: [
			"spdx"
		]
	},
		"text/strings": {
		source: "iana"
	},
		"text/stylus": {
		extensions: [
			"stylus",
			"styl"
		]
	},
		"text/t140": {
		source: "iana"
	},
		"text/tab-separated-values": {
		source: "iana",
		compressible: true,
		extensions: [
			"tsv"
		]
	},
		"text/troff": {
		source: "iana",
		extensions: [
			"t",
			"tr",
			"roff",
			"man",
			"me",
			"ms"
		]
	},
		"text/turtle": {
		source: "iana",
		charset: "UTF-8",
		extensions: [
			"ttl"
		]
	},
		"text/ulpfec": {
		source: "iana"
	},
		"text/uri-list": {
		source: "iana",
		compressible: true,
		extensions: [
			"uri",
			"uris",
			"urls"
		]
	},
		"text/vcard": {
		source: "iana",
		compressible: true,
		extensions: [
			"vcard"
		]
	},
		"text/vnd.a": {
		source: "iana"
	},
		"text/vnd.abc": {
		source: "iana"
	},
		"text/vnd.ascii-art": {
		source: "iana"
	},
		"text/vnd.curl": {
		source: "iana",
		extensions: [
			"curl"
		]
	},
		"text/vnd.curl.dcurl": {
		source: "apache",
		extensions: [
			"dcurl"
		]
	},
		"text/vnd.curl.mcurl": {
		source: "apache",
		extensions: [
			"mcurl"
		]
	},
		"text/vnd.curl.scurl": {
		source: "apache",
		extensions: [
			"scurl"
		]
	},
		"text/vnd.debian.copyright": {
		source: "iana",
		charset: "UTF-8"
	},
		"text/vnd.dmclientscript": {
		source: "iana"
	},
		"text/vnd.dvb.subtitle": {
		source: "iana",
		extensions: [
			"sub"
		]
	},
		"text/vnd.esmertec.theme-descriptor": {
		source: "iana",
		charset: "UTF-8"
	},
		"text/vnd.ficlab.flt": {
		source: "iana"
	},
		"text/vnd.fly": {
		source: "iana",
		extensions: [
			"fly"
		]
	},
		"text/vnd.fmi.flexstor": {
		source: "iana",
		extensions: [
			"flx"
		]
	},
		"text/vnd.gml": {
		source: "iana"
	},
		"text/vnd.graphviz": {
		source: "iana",
		extensions: [
			"gv"
		]
	},
		"text/vnd.hans": {
		source: "iana"
	},
		"text/vnd.hgl": {
		source: "iana"
	},
		"text/vnd.in3d.3dml": {
		source: "iana",
		extensions: [
			"3dml"
		]
	},
		"text/vnd.in3d.spot": {
		source: "iana",
		extensions: [
			"spot"
		]
	},
		"text/vnd.iptc.newsml": {
		source: "iana"
	},
		"text/vnd.iptc.nitf": {
		source: "iana"
	},
		"text/vnd.latex-z": {
		source: "iana"
	},
		"text/vnd.motorola.reflex": {
		source: "iana"
	},
		"text/vnd.ms-mediapackage": {
		source: "iana"
	},
		"text/vnd.net2phone.commcenter.command": {
		source: "iana"
	},
		"text/vnd.radisys.msml-basic-layout": {
		source: "iana"
	},
		"text/vnd.senx.warpscript": {
		source: "iana"
	},
		"text/vnd.si.uricatalogue": {
		source: "iana"
	},
		"text/vnd.sosi": {
		source: "iana"
	},
		"text/vnd.sun.j2me.app-descriptor": {
		source: "iana",
		charset: "UTF-8",
		extensions: [
			"jad"
		]
	},
		"text/vnd.trolltech.linguist": {
		source: "iana",
		charset: "UTF-8"
	},
		"text/vnd.wap.si": {
		source: "iana"
	},
		"text/vnd.wap.sl": {
		source: "iana"
	},
		"text/vnd.wap.wml": {
		source: "iana",
		extensions: [
			"wml"
		]
	},
		"text/vnd.wap.wmlscript": {
		source: "iana",
		extensions: [
			"wmls"
		]
	},
		"text/vtt": {
		source: "iana",
		charset: "UTF-8",
		compressible: true,
		extensions: [
			"vtt"
		]
	},
		"text/x-asm": {
		source: "apache",
		extensions: [
			"s",
			"asm"
		]
	},
		"text/x-c": {
		source: "apache",
		extensions: [
			"c",
			"cc",
			"cxx",
			"cpp",
			"h",
			"hh",
			"dic"
		]
	},
		"text/x-component": {
		source: "nginx",
		extensions: [
			"htc"
		]
	},
		"text/x-fortran": {
		source: "apache",
		extensions: [
			"f",
			"for",
			"f77",
			"f90"
		]
	},
		"text/x-gwt-rpc": {
		compressible: true
	},
		"text/x-handlebars-template": {
		extensions: [
			"hbs"
		]
	},
		"text/x-java-source": {
		source: "apache",
		extensions: [
			"java"
		]
	},
		"text/x-jquery-tmpl": {
		compressible: true
	},
		"text/x-lua": {
		extensions: [
			"lua"
		]
	},
		"text/x-markdown": {
		compressible: true,
		extensions: [
			"mkd"
		]
	},
		"text/x-nfo": {
		source: "apache",
		extensions: [
			"nfo"
		]
	},
		"text/x-opml": {
		source: "apache",
		extensions: [
			"opml"
		]
	},
		"text/x-org": {
		compressible: true,
		extensions: [
			"org"
		]
	},
		"text/x-pascal": {
		source: "apache",
		extensions: [
			"p",
			"pas"
		]
	},
		"text/x-processing": {
		compressible: true,
		extensions: [
			"pde"
		]
	},
		"text/x-sass": {
		extensions: [
			"sass"
		]
	},
		"text/x-scss": {
		extensions: [
			"scss"
		]
	},
		"text/x-setext": {
		source: "apache",
		extensions: [
			"etx"
		]
	},
		"text/x-sfv": {
		source: "apache",
		extensions: [
			"sfv"
		]
	},
		"text/x-suse-ymp": {
		compressible: true,
		extensions: [
			"ymp"
		]
	},
		"text/x-uuencode": {
		source: "apache",
		extensions: [
			"uu"
		]
	},
		"text/x-vcalendar": {
		source: "apache",
		extensions: [
			"vcs"
		]
	},
		"text/x-vcard": {
		source: "apache",
		extensions: [
			"vcf"
		]
	},
		"text/xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"xml"
		]
	},
		"text/xml-external-parsed-entity": {
		source: "iana"
	},
		"text/yaml": {
		extensions: [
			"yaml",
			"yml"
		]
	},
		"video/1d-interleaved-parityfec": {
		source: "iana"
	},
		"video/3gpp": {
		source: "iana",
		extensions: [
			"3gp",
			"3gpp"
		]
	},
		"video/3gpp-tt": {
		source: "iana"
	},
		"video/3gpp2": {
		source: "iana",
		extensions: [
			"3g2"
		]
	},
		"video/av1": {
		source: "iana"
	},
		"video/bmpeg": {
		source: "iana"
	},
		"video/bt656": {
		source: "iana"
	},
		"video/celb": {
		source: "iana"
	},
		"video/dv": {
		source: "iana"
	},
		"video/encaprtp": {
		source: "iana"
	},
		"video/flexfec": {
		source: "iana"
	},
		"video/h261": {
		source: "iana",
		extensions: [
			"h261"
		]
	},
		"video/h263": {
		source: "iana",
		extensions: [
			"h263"
		]
	},
		"video/h263-1998": {
		source: "iana"
	},
		"video/h263-2000": {
		source: "iana"
	},
		"video/h264": {
		source: "iana",
		extensions: [
			"h264"
		]
	},
		"video/h264-rcdo": {
		source: "iana"
	},
		"video/h264-svc": {
		source: "iana"
	},
		"video/h265": {
		source: "iana"
	},
		"video/iso.segment": {
		source: "iana",
		extensions: [
			"m4s"
		]
	},
		"video/jpeg": {
		source: "iana",
		extensions: [
			"jpgv"
		]
	},
		"video/jpeg2000": {
		source: "iana"
	},
		"video/jpm": {
		source: "apache",
		extensions: [
			"jpm",
			"jpgm"
		]
	},
		"video/mj2": {
		source: "iana",
		extensions: [
			"mj2",
			"mjp2"
		]
	},
		"video/mp1s": {
		source: "iana"
	},
		"video/mp2p": {
		source: "iana"
	},
		"video/mp2t": {
		source: "iana",
		extensions: [
			"ts"
		]
	},
		"video/mp4": {
		source: "iana",
		compressible: false,
		extensions: [
			"mp4",
			"mp4v",
			"mpg4"
		]
	},
		"video/mp4v-es": {
		source: "iana"
	},
		"video/mpeg": {
		source: "iana",
		compressible: false,
		extensions: [
			"mpeg",
			"mpg",
			"mpe",
			"m1v",
			"m2v"
		]
	},
		"video/mpeg4-generic": {
		source: "iana"
	},
		"video/mpv": {
		source: "iana"
	},
		"video/nv": {
		source: "iana"
	},
		"video/ogg": {
		source: "iana",
		compressible: false,
		extensions: [
			"ogv"
		]
	},
		"video/parityfec": {
		source: "iana"
	},
		"video/pointer": {
		source: "iana"
	},
		"video/quicktime": {
		source: "iana",
		compressible: false,
		extensions: [
			"qt",
			"mov"
		]
	},
		"video/raptorfec": {
		source: "iana"
	},
		"video/raw": {
		source: "iana"
	},
		"video/rtp-enc-aescm128": {
		source: "iana"
	},
		"video/rtploopback": {
		source: "iana"
	},
		"video/rtx": {
		source: "iana"
	},
		"video/scip": {
		source: "iana"
	},
		"video/smpte291": {
		source: "iana"
	},
		"video/smpte292m": {
		source: "iana"
	},
		"video/ulpfec": {
		source: "iana"
	},
		"video/vc1": {
		source: "iana"
	},
		"video/vc2": {
		source: "iana"
	},
		"video/vnd.cctv": {
		source: "iana"
	},
		"video/vnd.dece.hd": {
		source: "iana",
		extensions: [
			"uvh",
			"uvvh"
		]
	},
		"video/vnd.dece.mobile": {
		source: "iana",
		extensions: [
			"uvm",
			"uvvm"
		]
	},
		"video/vnd.dece.mp4": {
		source: "iana"
	},
		"video/vnd.dece.pd": {
		source: "iana",
		extensions: [
			"uvp",
			"uvvp"
		]
	},
		"video/vnd.dece.sd": {
		source: "iana",
		extensions: [
			"uvs",
			"uvvs"
		]
	},
		"video/vnd.dece.video": {
		source: "iana",
		extensions: [
			"uvv",
			"uvvv"
		]
	},
		"video/vnd.directv.mpeg": {
		source: "iana"
	},
		"video/vnd.directv.mpeg-tts": {
		source: "iana"
	},
		"video/vnd.dlna.mpeg-tts": {
		source: "iana"
	},
		"video/vnd.dvb.file": {
		source: "iana",
		extensions: [
			"dvb"
		]
	},
		"video/vnd.fvt": {
		source: "iana",
		extensions: [
			"fvt"
		]
	},
		"video/vnd.hns.video": {
		source: "iana"
	},
		"video/vnd.iptvforum.1dparityfec-1010": {
		source: "iana"
	},
		"video/vnd.iptvforum.1dparityfec-2005": {
		source: "iana"
	},
		"video/vnd.iptvforum.2dparityfec-1010": {
		source: "iana"
	},
		"video/vnd.iptvforum.2dparityfec-2005": {
		source: "iana"
	},
		"video/vnd.iptvforum.ttsavc": {
		source: "iana"
	},
		"video/vnd.iptvforum.ttsmpeg2": {
		source: "iana"
	},
		"video/vnd.motorola.video": {
		source: "iana"
	},
		"video/vnd.motorola.videop": {
		source: "iana"
	},
		"video/vnd.mpegurl": {
		source: "iana",
		extensions: [
			"mxu",
			"m4u"
		]
	},
		"video/vnd.ms-playready.media.pyv": {
		source: "iana",
		extensions: [
			"pyv"
		]
	},
		"video/vnd.nokia.interleaved-multimedia": {
		source: "iana"
	},
		"video/vnd.nokia.mp4vr": {
		source: "iana"
	},
		"video/vnd.nokia.videovoip": {
		source: "iana"
	},
		"video/vnd.objectvideo": {
		source: "iana"
	},
		"video/vnd.radgamettools.bink": {
		source: "iana"
	},
		"video/vnd.radgamettools.smacker": {
		source: "iana"
	},
		"video/vnd.sealed.mpeg1": {
		source: "iana"
	},
		"video/vnd.sealed.mpeg4": {
		source: "iana"
	},
		"video/vnd.sealed.swf": {
		source: "iana"
	},
		"video/vnd.sealedmedia.softseal.mov": {
		source: "iana"
	},
		"video/vnd.uvvu.mp4": {
		source: "iana",
		extensions: [
			"uvu",
			"uvvu"
		]
	},
		"video/vnd.vivo": {
		source: "iana",
		extensions: [
			"viv"
		]
	},
		"video/vnd.youtube.yt": {
		source: "iana"
	},
		"video/vp8": {
		source: "iana"
	},
		"video/webm": {
		source: "apache",
		compressible: false,
		extensions: [
			"webm"
		]
	},
		"video/x-f4v": {
		source: "apache",
		extensions: [
			"f4v"
		]
	},
		"video/x-fli": {
		source: "apache",
		extensions: [
			"fli"
		]
	},
		"video/x-flv": {
		source: "apache",
		compressible: false,
		extensions: [
			"flv"
		]
	},
		"video/x-m4v": {
		source: "apache",
		extensions: [
			"m4v"
		]
	},
		"video/x-matroska": {
		source: "apache",
		compressible: false,
		extensions: [
			"mkv",
			"mk3d",
			"mks"
		]
	},
		"video/x-mng": {
		source: "apache",
		extensions: [
			"mng"
		]
	},
		"video/x-ms-asf": {
		source: "apache",
		extensions: [
			"asf",
			"asx"
		]
	},
		"video/x-ms-vob": {
		source: "apache",
		extensions: [
			"vob"
		]
	},
		"video/x-ms-wm": {
		source: "apache",
		extensions: [
			"wm"
		]
	},
		"video/x-ms-wmv": {
		source: "apache",
		compressible: false,
		extensions: [
			"wmv"
		]
	},
		"video/x-ms-wmx": {
		source: "apache",
		extensions: [
			"wmx"
		]
	},
		"video/x-ms-wvx": {
		source: "apache",
		extensions: [
			"wvx"
		]
	},
		"video/x-msvideo": {
		source: "apache",
		extensions: [
			"avi"
		]
	},
		"video/x-sgi-movie": {
		source: "apache",
		extensions: [
			"movie"
		]
	},
		"video/x-smv": {
		source: "apache",
		extensions: [
			"smv"
		]
	},
		"x-conference/x-cooltalk": {
		source: "apache",
		extensions: [
			"ice"
		]
	},
		"x-shader/x-fragment": {
		compressible: true
	},
		"x-shader/x-vertex": {
		compressible: true
	}
	};

	/*!
	 * mime-db
	 * Copyright(c) 2014 Jonathan Ong
	 * MIT Licensed
	 */

	/**
	 * Module exports.
	 */

	var mimeDb = require$$0$6;

	/*!
	 * mime-types
	 * Copyright(c) 2014 Jonathan Ong
	 * Copyright(c) 2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	var mimeTypes = createCommonjsModule(function (module, exports) {

	/**
	 * Module dependencies.
	 * @private
	 */


	var extname = path__default['default'].extname;

	/**
	 * Module variables.
	 * @private
	 */

	var EXTRACT_TYPE_REGEXP = /^\s*([^;\s]*)(?:;|\s|$)/;
	var TEXT_TYPE_REGEXP = /^text\//i;

	/**
	 * Module exports.
	 * @public
	 */

	exports.charset = charset;
	exports.charsets = { lookup: charset };
	exports.contentType = contentType;
	exports.extension = extension;
	exports.extensions = Object.create(null);
	exports.lookup = lookup;
	exports.types = Object.create(null);

	// Populate the extensions/types maps
	populateMaps(exports.extensions, exports.types);

	/**
	 * Get the default charset for a MIME type.
	 *
	 * @param {string} type
	 * @return {boolean|string}
	 */

	function charset (type) {
	  if (!type || typeof type !== 'string') {
	    return false
	  }

	  // TODO: use media-typer
	  var match = EXTRACT_TYPE_REGEXP.exec(type);
	  var mime = match && mimeDb[match[1].toLowerCase()];

	  if (mime && mime.charset) {
	    return mime.charset
	  }

	  // default text/* to utf-8
	  if (match && TEXT_TYPE_REGEXP.test(match[1])) {
	    return 'UTF-8'
	  }

	  return false
	}

	/**
	 * Create a full Content-Type header given a MIME type or extension.
	 *
	 * @param {string} str
	 * @return {boolean|string}
	 */

	function contentType (str) {
	  // TODO: should this even be in this module?
	  if (!str || typeof str !== 'string') {
	    return false
	  }

	  var mime = str.indexOf('/') === -1
	    ? exports.lookup(str)
	    : str;

	  if (!mime) {
	    return false
	  }

	  // TODO: use content-type or other module
	  if (mime.indexOf('charset') === -1) {
	    var charset = exports.charset(mime);
	    if (charset) mime += '; charset=' + charset.toLowerCase();
	  }

	  return mime
	}

	/**
	 * Get the default extension for a MIME type.
	 *
	 * @param {string} type
	 * @return {boolean|string}
	 */

	function extension (type) {
	  if (!type || typeof type !== 'string') {
	    return false
	  }

	  // TODO: use media-typer
	  var match = EXTRACT_TYPE_REGEXP.exec(type);

	  // get extensions
	  var exts = match && exports.extensions[match[1].toLowerCase()];

	  if (!exts || !exts.length) {
	    return false
	  }

	  return exts[0]
	}

	/**
	 * Lookup the MIME type for a file path/extension.
	 *
	 * @param {string} path
	 * @return {boolean|string}
	 */

	function lookup (path) {
	  if (!path || typeof path !== 'string') {
	    return false
	  }

	  // get the extension ("ext" or ".ext" or full path)
	  var extension = extname('x.' + path)
	    .toLowerCase()
	    .substr(1);

	  if (!extension) {
	    return false
	  }

	  return exports.types[extension] || false
	}

	/**
	 * Populate the extensions and types maps.
	 * @private
	 */

	function populateMaps (extensions, types) {
	  // source preference (least -> most)
	  var preference = ['nginx', 'apache', undefined, 'iana'];

	  Object.keys(mimeDb).forEach(function forEachMimeType (type) {
	    var mime = mimeDb[type];
	    var exts = mime.extensions;

	    if (!exts || !exts.length) {
	      return
	    }

	    // mime -> extensions
	    extensions[type] = exts;

	    // extension -> mime
	    for (var i = 0; i < exts.length; i++) {
	      var extension = exts[i];

	      if (types[extension]) {
	        var from = preference.indexOf(mimeDb[types[extension]].source);
	        var to = preference.indexOf(mime.source);

	        if (types[extension] !== 'application/octet-stream' &&
	          (from > to || (from === to && types[extension].substr(0, 12) === 'application/'))) {
	          // skip the remapping
	          continue
	        }
	      }

	      // set the extension -> mime
	      types[extension] = type;
	    }
	  });
	}
	});

	function Caseless (dict) {
	  this.dict = dict || {};
	}
	Caseless.prototype.set = function (name, value, clobber) {
	  if (typeof name === 'object') {
	    for (var i in name) {
	      this.set(i, name[i], value);
	    }
	  } else {
	    if (typeof clobber === 'undefined') clobber = true;
	    var has = this.has(name);

	    if (!clobber && has) this.dict[has] = this.dict[has] + ',' + value;
	    else this.dict[has || name] = value;
	    return has
	  }
	};
	Caseless.prototype.has = function (name) {
	  var keys = Object.keys(this.dict)
	    , name = name.toLowerCase()
	    ;
	  for (var i=0;i<keys.length;i++) {
	    if (keys[i].toLowerCase() === name) return keys[i]
	  }
	  return false
	};
	Caseless.prototype.get = function (name) {
	  name = name.toLowerCase();
	  var result, _key;
	  var headers = this.dict;
	  Object.keys(headers).forEach(function (key) {
	    _key = key.toLowerCase();
	    if (name === _key) result = headers[key];
	  });
	  return result
	};
	Caseless.prototype.swap = function (name) {
	  var has = this.has(name);
	  if (has === name) return
	  if (!has) throw new Error('There is no header than matches "'+name+'"')
	  this.dict[name] = this.dict[has];
	  delete this.dict[has];
	};
	Caseless.prototype.del = function (name) {
	  var has = this.has(name);
	  return delete this.dict[has || name]
	};

	var caseless = function (dict) {return new Caseless(dict)};
	var httpify = function (resp, headers) {
	  var c = new Caseless(headers);
	  resp.setHeader = function (key, value, clobber) {
	    if (typeof value === 'undefined') return
	    return c.set(key, value, clobber)
	  };
	  resp.hasHeader = function (key) {
	    return c.has(key)
	  };
	  resp.getHeader = function (key) {
	    return c.get(key)
	  };
	  resp.removeHeader = function (key) {
	    return c.del(key)
	  };
	  resp.headers = c.dict;
	  return c
	};
	caseless.httpify = httpify;

	var foreverAgent = ForeverAgent;
	ForeverAgent.SSL = ForeverAgentSSL;

	var Agent = http__default['default'].Agent
	  , AgentSSL = https__default['default'].Agent;
	  
	function getConnectionName(host, port) {  
	  var name = '';
	  if (typeof host === 'string') {
	    name = host + ':' + port;
	  } else {
	    // For node.js v012.0 and iojs-v1.5.1, host is an object. And any existing localAddress is part of the connection name.
	    name = host.host + ':' + host.port + ':' + (host.localAddress ? (host.localAddress + ':') : ':');
	  }
	  return name
	}    

	function ForeverAgent(options) {
	  var self = this;
	  self.options = options || {};
	  self.requests = {};
	  self.sockets = {};
	  self.freeSockets = {};
	  self.maxSockets = self.options.maxSockets || Agent.defaultMaxSockets;
	  self.minSockets = self.options.minSockets || ForeverAgent.defaultMinSockets;
	  self.on('free', function(socket, host, port) {
	    var name = getConnectionName(host, port);

	    if (self.requests[name] && self.requests[name].length) {
	      self.requests[name].shift().onSocket(socket);
	    } else if (self.sockets[name].length < self.minSockets) {
	      if (!self.freeSockets[name]) self.freeSockets[name] = [];
	      self.freeSockets[name].push(socket);
	      
	      // if an error happens while we don't use the socket anyway, meh, throw the socket away
	      var onIdleError = function() {
	        socket.destroy();
	      };
	      socket._onIdleError = onIdleError;
	      socket.on('error', onIdleError);
	    } else {
	      // If there are no pending requests just destroy the
	      // socket and it will get removed from the pool. This
	      // gets us out of timeout issues and allows us to
	      // default to Connection:keep-alive.
	      socket.destroy();
	    }
	  });

	}
	util__default['default'].inherits(ForeverAgent, Agent);

	ForeverAgent.defaultMinSockets = 5;


	ForeverAgent.prototype.createConnection = net__default['default'].createConnection;
	ForeverAgent.prototype.addRequestNoreuse = Agent.prototype.addRequest;
	ForeverAgent.prototype.addRequest = function(req, host, port) {
	  var name = getConnectionName(host, port);
	  
	  if (typeof host !== 'string') {
	    var options = host;
	    port = options.port;
	    host = options.host;
	  }

	  if (this.freeSockets[name] && this.freeSockets[name].length > 0 && !req.useChunkedEncodingByDefault) {
	    var idleSocket = this.freeSockets[name].pop();
	    idleSocket.removeListener('error', idleSocket._onIdleError);
	    delete idleSocket._onIdleError;
	    req._reusedSocket = true;
	    req.onSocket(idleSocket);
	  } else {
	    this.addRequestNoreuse(req, host, port);
	  }
	};

	ForeverAgent.prototype.removeSocket = function(s, name, host, port) {
	  if (this.sockets[name]) {
	    var index = this.sockets[name].indexOf(s);
	    if (index !== -1) {
	      this.sockets[name].splice(index, 1);
	    }
	  } else if (this.sockets[name] && this.sockets[name].length === 0) {
	    // don't leak
	    delete this.sockets[name];
	    delete this.requests[name];
	  }
	  
	  if (this.freeSockets[name]) {
	    var index = this.freeSockets[name].indexOf(s);
	    if (index !== -1) {
	      this.freeSockets[name].splice(index, 1);
	      if (this.freeSockets[name].length === 0) {
	        delete this.freeSockets[name];
	      }
	    }
	  }

	  if (this.requests[name] && this.requests[name].length) {
	    // If we have pending requests and a socket gets closed a new one
	    // needs to be created to take over in the pool for the one that closed.
	    this.createSocket(name, host, port).emit('free');
	  }
	};

	function ForeverAgentSSL (options) {
	  ForeverAgent.call(this, options);
	}
	util__default['default'].inherits(ForeverAgentSSL, ForeverAgent);

	ForeverAgentSSL.prototype.createConnection = createConnectionSSL;
	ForeverAgentSSL.prototype.addRequestNoreuse = AgentSSL.prototype.addRequest;

	function createConnectionSSL (port, host, options) {
	  if (typeof port === 'object') {
	    options = port;
	  } else if (typeof host === 'object') {
	    options = host;
	  } else if (typeof options === 'object') {
	    options = options;
	  } else {
	    options = {};
	  }

	  if (typeof port === 'number') {
	    options.port = port;
	  }

	  if (typeof host === 'string') {
	    options.host = host;
	  }

	  return tls__default['default'].connect(options);
	}

	var Stream$2 = require$$0__default['default'].Stream;


	var delayed_stream = DelayedStream;
	function DelayedStream() {
	  this.source = null;
	  this.dataSize = 0;
	  this.maxDataSize = 1024 * 1024;
	  this.pauseStream = true;

	  this._maxDataSizeExceeded = false;
	  this._released = false;
	  this._bufferedEvents = [];
	}
	util__default['default'].inherits(DelayedStream, Stream$2);

	DelayedStream.create = function(source, options) {
	  var delayedStream = new this();

	  options = options || {};
	  for (var option in options) {
	    delayedStream[option] = options[option];
	  }

	  delayedStream.source = source;

	  var realEmit = source.emit;
	  source.emit = function() {
	    delayedStream._handleEmit(arguments);
	    return realEmit.apply(source, arguments);
	  };

	  source.on('error', function() {});
	  if (delayedStream.pauseStream) {
	    source.pause();
	  }

	  return delayedStream;
	};

	Object.defineProperty(DelayedStream.prototype, 'readable', {
	  configurable: true,
	  enumerable: true,
	  get: function() {
	    return this.source.readable;
	  }
	});

	DelayedStream.prototype.setEncoding = function() {
	  return this.source.setEncoding.apply(this.source, arguments);
	};

	DelayedStream.prototype.resume = function() {
	  if (!this._released) {
	    this.release();
	  }

	  this.source.resume();
	};

	DelayedStream.prototype.pause = function() {
	  this.source.pause();
	};

	DelayedStream.prototype.release = function() {
	  this._released = true;

	  this._bufferedEvents.forEach(function(args) {
	    this.emit.apply(this, args);
	  }.bind(this));
	  this._bufferedEvents = [];
	};

	DelayedStream.prototype.pipe = function() {
	  var r = Stream$2.prototype.pipe.apply(this, arguments);
	  this.resume();
	  return r;
	};

	DelayedStream.prototype._handleEmit = function(args) {
	  if (this._released) {
	    this.emit.apply(this, args);
	    return;
	  }

	  if (args[0] === 'data') {
	    this.dataSize += args[1].length;
	    this._checkIfMaxDataSizeExceeded();
	  }

	  this._bufferedEvents.push(args);
	};

	DelayedStream.prototype._checkIfMaxDataSizeExceeded = function() {
	  if (this._maxDataSizeExceeded) {
	    return;
	  }

	  if (this.dataSize <= this.maxDataSize) {
	    return;
	  }

	  this._maxDataSizeExceeded = true;
	  var message =
	    'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.';
	  this.emit('error', new Error(message));
	};

	var Stream$1 = require$$0__default['default'].Stream;


	var combined_stream = CombinedStream;
	function CombinedStream() {
	  this.writable = false;
	  this.readable = true;
	  this.dataSize = 0;
	  this.maxDataSize = 2 * 1024 * 1024;
	  this.pauseStreams = true;

	  this._released = false;
	  this._streams = [];
	  this._currentStream = null;
	  this._insideLoop = false;
	  this._pendingNext = false;
	}
	util__default['default'].inherits(CombinedStream, Stream$1);

	CombinedStream.create = function(options) {
	  var combinedStream = new this();

	  options = options || {};
	  for (var option in options) {
	    combinedStream[option] = options[option];
	  }

	  return combinedStream;
	};

	CombinedStream.isStreamLike = function(stream) {
	  return (typeof stream !== 'function')
	    && (typeof stream !== 'string')
	    && (typeof stream !== 'boolean')
	    && (typeof stream !== 'number')
	    && (!Buffer.isBuffer(stream));
	};

	CombinedStream.prototype.append = function(stream) {
	  var isStreamLike = CombinedStream.isStreamLike(stream);

	  if (isStreamLike) {
	    if (!(stream instanceof delayed_stream)) {
	      var newStream = delayed_stream.create(stream, {
	        maxDataSize: Infinity,
	        pauseStream: this.pauseStreams,
	      });
	      stream.on('data', this._checkDataSize.bind(this));
	      stream = newStream;
	    }

	    this._handleErrors(stream);

	    if (this.pauseStreams) {
	      stream.pause();
	    }
	  }

	  this._streams.push(stream);
	  return this;
	};

	CombinedStream.prototype.pipe = function(dest, options) {
	  Stream$1.prototype.pipe.call(this, dest, options);
	  this.resume();
	  return dest;
	};

	CombinedStream.prototype._getNext = function() {
	  this._currentStream = null;

	  if (this._insideLoop) {
	    this._pendingNext = true;
	    return; // defer call
	  }

	  this._insideLoop = true;
	  try {
	    do {
	      this._pendingNext = false;
	      this._realGetNext();
	    } while (this._pendingNext);
	  } finally {
	    this._insideLoop = false;
	  }
	};

	CombinedStream.prototype._realGetNext = function() {
	  var stream = this._streams.shift();


	  if (typeof stream == 'undefined') {
	    this.end();
	    return;
	  }

	  if (typeof stream !== 'function') {
	    this._pipeNext(stream);
	    return;
	  }

	  var getStream = stream;
	  getStream(function(stream) {
	    var isStreamLike = CombinedStream.isStreamLike(stream);
	    if (isStreamLike) {
	      stream.on('data', this._checkDataSize.bind(this));
	      this._handleErrors(stream);
	    }

	    this._pipeNext(stream);
	  }.bind(this));
	};

	CombinedStream.prototype._pipeNext = function(stream) {
	  this._currentStream = stream;

	  var isStreamLike = CombinedStream.isStreamLike(stream);
	  if (isStreamLike) {
	    stream.on('end', this._getNext.bind(this));
	    stream.pipe(this, {end: false});
	    return;
	  }

	  var value = stream;
	  this.write(value);
	  this._getNext();
	};

	CombinedStream.prototype._handleErrors = function(stream) {
	  var self = this;
	  stream.on('error', function(err) {
	    self._emitError(err);
	  });
	};

	CombinedStream.prototype.write = function(data) {
	  this.emit('data', data);
	};

	CombinedStream.prototype.pause = function() {
	  if (!this.pauseStreams) {
	    return;
	  }

	  if(this.pauseStreams && this._currentStream && typeof(this._currentStream.pause) == 'function') this._currentStream.pause();
	  this.emit('pause');
	};

	CombinedStream.prototype.resume = function() {
	  if (!this._released) {
	    this._released = true;
	    this.writable = true;
	    this._getNext();
	  }

	  if(this.pauseStreams && this._currentStream && typeof(this._currentStream.resume) == 'function') this._currentStream.resume();
	  this.emit('resume');
	};

	CombinedStream.prototype.end = function() {
	  this._reset();
	  this.emit('end');
	};

	CombinedStream.prototype.destroy = function() {
	  this._reset();
	  this.emit('close');
	};

	CombinedStream.prototype._reset = function() {
	  this.writable = false;
	  this._streams = [];
	  this._currentStream = null;
	};

	CombinedStream.prototype._checkDataSize = function() {
	  this._updateDataSize();
	  if (this.dataSize <= this.maxDataSize) {
	    return;
	  }

	  var message =
	    'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.';
	  this._emitError(new Error(message));
	};

	CombinedStream.prototype._updateDataSize = function() {
	  this.dataSize = 0;

	  var self = this;
	  this._streams.forEach(function(stream) {
	    if (!stream.dataSize) {
	      return;
	    }

	    self.dataSize += stream.dataSize;
	  });

	  if (this._currentStream && this._currentStream.dataSize) {
	    this.dataSize += this._currentStream.dataSize;
	  }
	};

	CombinedStream.prototype._emitError = function(err) {
	  this._reset();
	  this.emit('error', err);
	};

	var defer_1 = defer$1;

	/**
	 * Runs provided function on next iteration of the event loop
	 *
	 * @param {function} fn - function to run
	 */
	function defer$1(fn)
	{
	  var nextTick = typeof setImmediate == 'function'
	    ? setImmediate
	    : (
	      typeof process == 'object' && typeof process.nextTick == 'function'
	      ? process.nextTick
	      : null
	    );

	  if (nextTick)
	  {
	    nextTick(fn);
	  }
	  else
	  {
	    setTimeout(fn, 0);
	  }
	}

	// API
	var async_1 = async$2;

	/**
	 * Runs provided callback asynchronously
	 * even if callback itself is not
	 *
	 * @param   {function} callback - callback to invoke
	 * @returns {function} - augmented callback
	 */
	function async$2(callback)
	{
	  var isAsync = false;

	  // check if async happened
	  defer_1(function() { isAsync = true; });

	  return function async_callback(err, result)
	  {
	    if (isAsync)
	    {
	      callback(err, result);
	    }
	    else
	    {
	      defer_1(function nextTick_callback()
	      {
	        callback(err, result);
	      });
	    }
	  };
	}

	// API
	var abort_1 = abort;

	/**
	 * Aborts leftover active jobs
	 *
	 * @param {object} state - current state object
	 */
	function abort(state)
	{
	  Object.keys(state.jobs).forEach(clean.bind(state));

	  // reset leftover jobs
	  state.jobs = {};
	}

	/**
	 * Cleans up leftover job by invoking abort function for the provided job id
	 *
	 * @this  state
	 * @param {string|number} key - job id to abort
	 */
	function clean(key)
	{
	  if (typeof this.jobs[key] == 'function')
	  {
	    this.jobs[key]();
	  }
	}

	// API
	var iterate_1 = iterate;

	/**
	 * Iterates over each job object
	 *
	 * @param {array|object} list - array or object (named list) to iterate over
	 * @param {function} iterator - iterator to run
	 * @param {object} state - current job status
	 * @param {function} callback - invoked when all elements processed
	 */
	function iterate(list, iterator, state, callback)
	{
	  // store current index
	  var key = state['keyedList'] ? state['keyedList'][state.index] : state.index;

	  state.jobs[key] = runJob(iterator, key, list[key], function(error, output)
	  {
	    // don't repeat yourself
	    // skip secondary callbacks
	    if (!(key in state.jobs))
	    {
	      return;
	    }

	    // clean up jobs
	    delete state.jobs[key];

	    if (error)
	    {
	      // don't process rest of the results
	      // stop still active jobs
	      // and reset the list
	      abort_1(state);
	    }
	    else
	    {
	      state.results[key] = output;
	    }

	    // return salvaged results
	    callback(error, state.results);
	  });
	}

	/**
	 * Runs iterator over provided job element
	 *
	 * @param   {function} iterator - iterator to invoke
	 * @param   {string|number} key - key/index of the element in the list of jobs
	 * @param   {mixed} item - job description
	 * @param   {function} callback - invoked after iterator is done with the job
	 * @returns {function|mixed} - job abort function or something else
	 */
	function runJob(iterator, key, item, callback)
	{
	  var aborter;

	  // allow shortcut if iterator expects only two arguments
	  if (iterator.length == 2)
	  {
	    aborter = iterator(item, async_1(callback));
	  }
	  // otherwise go with full three arguments
	  else
	  {
	    aborter = iterator(item, key, async_1(callback));
	  }

	  return aborter;
	}

	// API
	var state_1 = state;

	/**
	 * Creates initial state object
	 * for iteration over list
	 *
	 * @param   {array|object} list - list to iterate over
	 * @param   {function|null} sortMethod - function to use for keys sort,
	 *                                     or `null` to keep them as is
	 * @returns {object} - initial state object
	 */
	function state(list, sortMethod)
	{
	  var isNamedList = !Array.isArray(list)
	    , initState =
	    {
	      index    : 0,
	      keyedList: isNamedList || sortMethod ? Object.keys(list) : null,
	      jobs     : {},
	      results  : isNamedList ? {} : [],
	      size     : isNamedList ? Object.keys(list).length : list.length
	    }
	    ;

	  if (sortMethod)
	  {
	    // sort array keys based on it's values
	    // sort object's keys just on own merit
	    initState.keyedList.sort(isNamedList ? sortMethod : function(a, b)
	    {
	      return sortMethod(list[a], list[b]);
	    });
	  }

	  return initState;
	}

	// API
	var terminator_1 = terminator;

	/**
	 * Terminates jobs in the attached state context
	 *
	 * @this  AsyncKitState#
	 * @param {function} callback - final callback to invoke after termination
	 */
	function terminator(callback)
	{
	  if (!Object.keys(this.jobs).length)
	  {
	    return;
	  }

	  // fast forward iteration index
	  this.index = this.size;

	  // abort jobs
	  abort_1(this);

	  // send back results we have so far
	  async_1(callback)(null, this.results);
	}

	// Public API
	var parallel_1 = parallel;

	/**
	 * Runs iterator over provided array elements in parallel
	 *
	 * @param   {array|object} list - array or object (named list) to iterate over
	 * @param   {function} iterator - iterator to run
	 * @param   {function} callback - invoked when all elements processed
	 * @returns {function} - jobs terminator
	 */
	function parallel(list, iterator, callback)
	{
	  var state = state_1(list);

	  while (state.index < (state['keyedList'] || list).length)
	  {
	    iterate_1(list, iterator, state, function(error, result)
	    {
	      if (error)
	      {
	        callback(error, result);
	        return;
	      }

	      // looks like it's the last one
	      if (Object.keys(state.jobs).length === 0)
	      {
	        callback(null, state.results);
	        return;
	      }
	    });

	    state.index++;
	  }

	  return terminator_1.bind(state, callback);
	}

	// Public API
	var serialOrdered_1 = serialOrdered;
	// sorting helpers
	var ascending_1  = ascending;
	var descending_1 = descending;

	/**
	 * Runs iterator over provided sorted array elements in series
	 *
	 * @param   {array|object} list - array or object (named list) to iterate over
	 * @param   {function} iterator - iterator to run
	 * @param   {function} sortMethod - custom sort function
	 * @param   {function} callback - invoked when all elements processed
	 * @returns {function} - jobs terminator
	 */
	function serialOrdered(list, iterator, sortMethod, callback)
	{
	  var state = state_1(list, sortMethod);

	  iterate_1(list, iterator, state, function iteratorHandler(error, result)
	  {
	    if (error)
	    {
	      callback(error, result);
	      return;
	    }

	    state.index++;

	    // are we there yet?
	    if (state.index < (state['keyedList'] || list).length)
	    {
	      iterate_1(list, iterator, state, iteratorHandler);
	      return;
	    }

	    // done here
	    callback(null, state.results);
	  });

	  return terminator_1.bind(state, callback);
	}

	/*
	 * -- Sort methods
	 */

	/**
	 * sort helper to sort array elements in ascending order
	 *
	 * @param   {mixed} a - an item to compare
	 * @param   {mixed} b - an item to compare
	 * @returns {number} - comparison result
	 */
	function ascending(a, b)
	{
	  return a < b ? -1 : a > b ? 1 : 0;
	}

	/**
	 * sort helper to sort array elements in descending order
	 *
	 * @param   {mixed} a - an item to compare
	 * @param   {mixed} b - an item to compare
	 * @returns {number} - comparison result
	 */
	function descending(a, b)
	{
	  return -1 * ascending(a, b);
	}
	serialOrdered_1.ascending = ascending_1;
	serialOrdered_1.descending = descending_1;

	// Public API
	var serial_1 = serial;

	/**
	 * Runs iterator over provided array elements in series
	 *
	 * @param   {array|object} list - array or object (named list) to iterate over
	 * @param   {function} iterator - iterator to run
	 * @param   {function} callback - invoked when all elements processed
	 * @returns {function} - jobs terminator
	 */
	function serial(list, iterator, callback)
	{
	  return serialOrdered_1(list, iterator, null, callback);
	}

	var asynckit =
	{
	  parallel      : parallel_1,
	  serial        : serial_1,
	  serialOrdered : serialOrdered_1
	};

	// populates missing values
	var populate = function(dst, src) {

	  Object.keys(src).forEach(function(prop)
	  {
	    dst[prop] = dst[prop] || src[prop];
	  });

	  return dst;
	};

	var parseUrl = url__default['default'].parse;





	// Public API
	var form_data = FormData;

	// make it a Stream
	util__default['default'].inherits(FormData, combined_stream);

	/**
	 * Create readable "multipart/form-data" streams.
	 * Can be used to submit forms
	 * and file uploads to other web applications.
	 *
	 * @constructor
	 * @param {Object} options - Properties to be added/overriden for FormData and CombinedStream
	 */
	function FormData(options) {
	  if (!(this instanceof FormData)) {
	    return new FormData();
	  }

	  this._overheadLength = 0;
	  this._valueLength = 0;
	  this._valuesToMeasure = [];

	  combined_stream.call(this);

	  options = options || {};
	  for (var option in options) {
	    this[option] = options[option];
	  }
	}

	FormData.LINE_BREAK = '\r\n';
	FormData.DEFAULT_CONTENT_TYPE = 'application/octet-stream';

	FormData.prototype.append = function(field, value, options) {

	  options = options || {};

	  // allow filename as single option
	  if (typeof options == 'string') {
	    options = {filename: options};
	  }

	  var append = combined_stream.prototype.append.bind(this);

	  // all that streamy business can't handle numbers
	  if (typeof value == 'number') {
	    value = '' + value;
	  }

	  // https://github.com/felixge/node-form-data/issues/38
	  if (util__default['default'].isArray(value)) {
	    // Please convert your array into string
	    // the way web server expects it
	    this._error(new Error('Arrays are not supported.'));
	    return;
	  }

	  var header = this._multiPartHeader(field, value, options);
	  var footer = this._multiPartFooter();

	  append(header);
	  append(value);
	  append(footer);

	  // pass along options.knownLength
	  this._trackLength(header, value, options);
	};

	FormData.prototype._trackLength = function(header, value, options) {
	  var valueLength = 0;

	  // used w/ getLengthSync(), when length is known.
	  // e.g. for streaming directly from a remote server,
	  // w/ a known file a size, and not wanting to wait for
	  // incoming file to finish to get its size.
	  if (options.knownLength != null) {
	    valueLength += +options.knownLength;
	  } else if (Buffer.isBuffer(value)) {
	    valueLength = value.length;
	  } else if (typeof value === 'string') {
	    valueLength = Buffer.byteLength(value);
	  }

	  this._valueLength += valueLength;

	  // @check why add CRLF? does this account for custom/multiple CRLFs?
	  this._overheadLength +=
	    Buffer.byteLength(header) +
	    FormData.LINE_BREAK.length;

	  // empty or either doesn't have path or not an http response
	  if (!value || ( !value.path && !(value.readable && value.hasOwnProperty('httpVersion')) )) {
	    return;
	  }

	  // no need to bother with the length
	  if (!options.knownLength) {
	    this._valuesToMeasure.push(value);
	  }
	};

	FormData.prototype._lengthRetriever = function(value, callback) {

	  if (value.hasOwnProperty('fd')) {

	    // take read range into a account
	    // `end` = Infinity –> read file till the end
	    //
	    // TODO: Looks like there is bug in Node fs.createReadStream
	    // it doesn't respect `end` options without `start` options
	    // Fix it when node fixes it.
	    // https://github.com/joyent/node/issues/7819
	    if (value.end != undefined && value.end != Infinity && value.start != undefined) {

	      // when end specified
	      // no need to calculate range
	      // inclusive, starts with 0
	      callback(null, value.end + 1 - (value.start ? value.start : 0));

	    // not that fast snoopy
	    } else {
	      // still need to fetch file size from fs
	      fs__default['default'].stat(value.path, function(err, stat) {

	        var fileSize;

	        if (err) {
	          callback(err);
	          return;
	        }

	        // update final size based on the range options
	        fileSize = stat.size - (value.start ? value.start : 0);
	        callback(null, fileSize);
	      });
	    }

	  // or http response
	  } else if (value.hasOwnProperty('httpVersion')) {
	    callback(null, +value.headers['content-length']);

	  // or request stream http://github.com/mikeal/request
	  } else if (value.hasOwnProperty('httpModule')) {
	    // wait till response come back
	    value.on('response', function(response) {
	      value.pause();
	      callback(null, +response.headers['content-length']);
	    });
	    value.resume();

	  // something else
	  } else {
	    callback('Unknown stream');
	  }
	};

	FormData.prototype._multiPartHeader = function(field, value, options) {
	  // custom header specified (as string)?
	  // it becomes responsible for boundary
	  // (e.g. to handle extra CRLFs on .NET servers)
	  if (typeof options.header == 'string') {
	    return options.header;
	  }

	  var contentDisposition = this._getContentDisposition(value, options);
	  var contentType = this._getContentType(value, options);

	  var contents = '';
	  var headers  = {
	    // add custom disposition as third element or keep it two elements if not
	    'Content-Disposition': ['form-data', 'name="' + field + '"'].concat(contentDisposition || []),
	    // if no content type. allow it to be empty array
	    'Content-Type': [].concat(contentType || [])
	  };

	  // allow custom headers.
	  if (typeof options.header == 'object') {
	    populate(headers, options.header);
	  }

	  var header;
	  for (var prop in headers) {
	    if (!headers.hasOwnProperty(prop)) continue;
	    header = headers[prop];

	    // skip nullish headers.
	    if (header == null) {
	      continue;
	    }

	    // convert all headers to arrays.
	    if (!Array.isArray(header)) {
	      header = [header];
	    }

	    // add non-empty headers.
	    if (header.length) {
	      contents += prop + ': ' + header.join('; ') + FormData.LINE_BREAK;
	    }
	  }

	  return '--' + this.getBoundary() + FormData.LINE_BREAK + contents + FormData.LINE_BREAK;
	};

	FormData.prototype._getContentDisposition = function(value, options) {

	  var filename
	    , contentDisposition
	    ;

	  if (typeof options.filepath === 'string') {
	    // custom filepath for relative paths
	    filename = path__default['default'].normalize(options.filepath).replace(/\\/g, '/');
	  } else if (options.filename || value.name || value.path) {
	    // custom filename take precedence
	    // formidable and the browser add a name property
	    // fs- and request- streams have path property
	    filename = path__default['default'].basename(options.filename || value.name || value.path);
	  } else if (value.readable && value.hasOwnProperty('httpVersion')) {
	    // or try http response
	    filename = path__default['default'].basename(value.client._httpMessage.path);
	  }

	  if (filename) {
	    contentDisposition = 'filename="' + filename + '"';
	  }

	  return contentDisposition;
	};

	FormData.prototype._getContentType = function(value, options) {

	  // use custom content-type above all
	  var contentType = options.contentType;

	  // or try `name` from formidable, browser
	  if (!contentType && value.name) {
	    contentType = mimeTypes.lookup(value.name);
	  }

	  // or try `path` from fs-, request- streams
	  if (!contentType && value.path) {
	    contentType = mimeTypes.lookup(value.path);
	  }

	  // or if it's http-reponse
	  if (!contentType && value.readable && value.hasOwnProperty('httpVersion')) {
	    contentType = value.headers['content-type'];
	  }

	  // or guess it from the filepath or filename
	  if (!contentType && (options.filepath || options.filename)) {
	    contentType = mimeTypes.lookup(options.filepath || options.filename);
	  }

	  // fallback to the default content type if `value` is not simple value
	  if (!contentType && typeof value == 'object') {
	    contentType = FormData.DEFAULT_CONTENT_TYPE;
	  }

	  return contentType;
	};

	FormData.prototype._multiPartFooter = function() {
	  return function(next) {
	    var footer = FormData.LINE_BREAK;

	    var lastPart = (this._streams.length === 0);
	    if (lastPart) {
	      footer += this._lastBoundary();
	    }

	    next(footer);
	  }.bind(this);
	};

	FormData.prototype._lastBoundary = function() {
	  return '--' + this.getBoundary() + '--' + FormData.LINE_BREAK;
	};

	FormData.prototype.getHeaders = function(userHeaders) {
	  var header;
	  var formHeaders = {
	    'content-type': 'multipart/form-data; boundary=' + this.getBoundary()
	  };

	  for (header in userHeaders) {
	    if (userHeaders.hasOwnProperty(header)) {
	      formHeaders[header.toLowerCase()] = userHeaders[header];
	    }
	  }

	  return formHeaders;
	};

	FormData.prototype.getBoundary = function() {
	  if (!this._boundary) {
	    this._generateBoundary();
	  }

	  return this._boundary;
	};

	FormData.prototype._generateBoundary = function() {
	  // This generates a 50 character boundary similar to those used by Firefox.
	  // They are optimized for boyer-moore parsing.
	  var boundary = '--------------------------';
	  for (var i = 0; i < 24; i++) {
	    boundary += Math.floor(Math.random() * 10).toString(16);
	  }

	  this._boundary = boundary;
	};

	// Note: getLengthSync DOESN'T calculate streams length
	// As workaround one can calculate file size manually
	// and add it as knownLength option
	FormData.prototype.getLengthSync = function() {
	  var knownLength = this._overheadLength + this._valueLength;

	  // Don't get confused, there are 3 "internal" streams for each keyval pair
	  // so it basically checks if there is any value added to the form
	  if (this._streams.length) {
	    knownLength += this._lastBoundary().length;
	  }

	  // https://github.com/form-data/form-data/issues/40
	  if (!this.hasKnownLength()) {
	    // Some async length retrievers are present
	    // therefore synchronous length calculation is false.
	    // Please use getLength(callback) to get proper length
	    this._error(new Error('Cannot calculate proper length in synchronous way.'));
	  }

	  return knownLength;
	};

	// Public API to check if length of added values is known
	// https://github.com/form-data/form-data/issues/196
	// https://github.com/form-data/form-data/issues/262
	FormData.prototype.hasKnownLength = function() {
	  var hasKnownLength = true;

	  if (this._valuesToMeasure.length) {
	    hasKnownLength = false;
	  }

	  return hasKnownLength;
	};

	FormData.prototype.getLength = function(cb) {
	  var knownLength = this._overheadLength + this._valueLength;

	  if (this._streams.length) {
	    knownLength += this._lastBoundary().length;
	  }

	  if (!this._valuesToMeasure.length) {
	    process.nextTick(cb.bind(this, null, knownLength));
	    return;
	  }

	  asynckit.parallel(this._valuesToMeasure, this._lengthRetriever, function(err, values) {
	    if (err) {
	      cb(err);
	      return;
	    }

	    values.forEach(function(length) {
	      knownLength += length;
	    });

	    cb(null, knownLength);
	  });
	};

	FormData.prototype.submit = function(params, cb) {
	  var request
	    , options
	    , defaults = {method: 'post'}
	    ;

	  // parse provided url if it's string
	  // or treat it as options object
	  if (typeof params == 'string') {

	    params = parseUrl(params);
	    options = populate({
	      port: params.port,
	      path: params.pathname,
	      host: params.hostname,
	      protocol: params.protocol
	    }, defaults);

	  // use custom params
	  } else {

	    options = populate(params, defaults);
	    // if no port provided use default one
	    if (!options.port) {
	      options.port = options.protocol == 'https:' ? 443 : 80;
	    }
	  }

	  // put that good code in getHeaders to some use
	  options.headers = this.getHeaders(params.headers);

	  // https if specified, fallback to http in any other case
	  if (options.protocol == 'https:') {
	    request = https__default['default'].request(options);
	  } else {
	    request = http__default['default'].request(options);
	  }

	  // get content length and fire away
	  this.getLength(function(err, length) {
	    if (err) {
	      this._error(err);
	      return;
	    }

	    // add content length
	    request.setHeader('Content-Length', length);

	    this.pipe(request);
	    if (cb) {
	      request.on('error', cb);
	      request.on('response', cb.bind(this, null));
	    }
	  }.bind(this));

	  return request;
	};

	FormData.prototype._error = function(err) {
	  if (!this.error) {
	    this.error = err;
	    this.pause();
	    this.emit('error', err);
	  }
	};

	FormData.prototype.toString = function () {
	  return '[object FormData]';
	};

	function isStream (obj) {
	  return obj instanceof require$$0__default['default'].Stream
	}


	function isReadable (obj) {
	  return isStream(obj) && typeof obj._read == 'function' && typeof obj._readableState == 'object'
	}


	function isWritable (obj) {
	  return isStream(obj) && typeof obj._write == 'function' && typeof obj._writableState == 'object'
	}


	function isDuplex (obj) {
	  return isReadable(obj) && isWritable(obj)
	}


	var isstream            = isStream;
	var isReadable_1 = isReadable;
	var isWritable_1 = isWritable;
	var isDuplex_1   = isDuplex;
	isstream.isReadable = isReadable_1;
	isstream.isWritable = isWritable_1;
	isstream.isDuplex = isDuplex_1;

	var isTypedarray      = isTypedArray$1;
	isTypedArray$1.strict = isStrictTypedArray;
	isTypedArray$1.loose  = isLooseTypedArray;

	var toString$7 = Object.prototype.toString;
	var names = {
	    '[object Int8Array]': true
	  , '[object Int16Array]': true
	  , '[object Int32Array]': true
	  , '[object Uint8Array]': true
	  , '[object Uint8ClampedArray]': true
	  , '[object Uint16Array]': true
	  , '[object Uint32Array]': true
	  , '[object Float32Array]': true
	  , '[object Float64Array]': true
	};

	function isTypedArray$1(arr) {
	  return (
	       isStrictTypedArray(arr)
	    || isLooseTypedArray(arr)
	  )
	}

	function isStrictTypedArray(arr) {
	  return (
	       arr instanceof Int8Array
	    || arr instanceof Int16Array
	    || arr instanceof Int32Array
	    || arr instanceof Uint8Array
	    || arr instanceof Uint8ClampedArray
	    || arr instanceof Uint16Array
	    || arr instanceof Uint32Array
	    || arr instanceof Float32Array
	    || arr instanceof Float64Array
	  )
	}

	function isLooseTypedArray(arr) {
	  return names[toString$7.call(arr)]
	}

	function formatHostname (hostname) {
	  // canonicalize the hostname, so that 'oogle.com' won't match 'google.com'
	  return hostname.replace(/^\.*/, '.').toLowerCase()
	}

	function parseNoProxyZone (zone) {
	  zone = zone.trim().toLowerCase();

	  var zoneParts = zone.split(':', 2);
	  var zoneHost = formatHostname(zoneParts[0]);
	  var zonePort = zoneParts[1];
	  var hasPort = zone.indexOf(':') > -1;

	  return {hostname: zoneHost, port: zonePort, hasPort: hasPort}
	}

	function uriInNoProxy (uri, noProxy) {
	  var port = uri.port || (uri.protocol === 'https:' ? '443' : '80');
	  var hostname = formatHostname(uri.hostname);
	  var noProxyList = noProxy.split(',');

	  // iterate through the noProxyList until it finds a match.
	  return noProxyList.map(parseNoProxyZone).some(function (noProxyZone) {
	    var isMatchedAt = hostname.indexOf(noProxyZone.hostname);
	    var hostnameMatched = (
	      isMatchedAt > -1 &&
	        (isMatchedAt === hostname.length - noProxyZone.hostname.length)
	    );

	    if (noProxyZone.hasPort) {
	      return (port === noProxyZone.port) && hostnameMatched
	    }

	    return hostnameMatched
	  })
	}

	function getProxyFromURI (uri) {
	  // Decide the proper request proxy to use based on the request URI object and the
	  // environmental variables (NO_PROXY, HTTP_PROXY, etc.)
	  // respect NO_PROXY environment variables (see: https://lynx.invisible-island.net/lynx2.8.7/breakout/lynx_help/keystrokes/environments.html)

	  var noProxy = process.env.NO_PROXY || process.env.no_proxy || '';

	  // if the noProxy is a wildcard then return null

	  if (noProxy === '*') {
	    return null
	  }

	  // if the noProxy is not empty and the uri is found return null

	  if (noProxy !== '' && uriInNoProxy(uri, noProxy)) {
	    return null
	  }

	  // Check for HTTP or HTTPS Proxy in environment Else default to null

	  if (uri.protocol === 'http:') {
	    return process.env.HTTP_PROXY ||
	      process.env.http_proxy || null
	  }

	  if (uri.protocol === 'https:') {
	    return process.env.HTTPS_PROXY ||
	      process.env.https_proxy ||
	      process.env.HTTP_PROXY ||
	      process.env.http_proxy || null
	  }

	  // if none of that works, return null
	  // (What uri protocol are you using then?)

	  return null
	}

	var getProxyFromURI_1 = getProxyFromURI;

	var has$2 = Object.prototype.hasOwnProperty;

	var hexTable = (function () {
	    var array = [];
	    for (var i = 0; i < 256; ++i) {
	        array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());
	    }

	    return array;
	}());

	var compactQueue = function compactQueue(queue) {
	    var obj;

	    while (queue.length) {
	        var item = queue.pop();
	        obj = item.obj[item.prop];

	        if (Array.isArray(obj)) {
	            var compacted = [];

	            for (var j = 0; j < obj.length; ++j) {
	                if (typeof obj[j] !== 'undefined') {
	                    compacted.push(obj[j]);
	                }
	            }

	            item.obj[item.prop] = compacted;
	        }
	    }

	    return obj;
	};

	var arrayToObject = function arrayToObject(source, options) {
	    var obj = options && options.plainObjects ? Object.create(null) : {};
	    for (var i = 0; i < source.length; ++i) {
	        if (typeof source[i] !== 'undefined') {
	            obj[i] = source[i];
	        }
	    }

	    return obj;
	};

	var merge = function merge(target, source, options) {
	    if (!source) {
	        return target;
	    }

	    if (typeof source !== 'object') {
	        if (Array.isArray(target)) {
	            target.push(source);
	        } else if (typeof target === 'object') {
	            if (options.plainObjects || options.allowPrototypes || !has$2.call(Object.prototype, source)) {
	                target[source] = true;
	            }
	        } else {
	            return [target, source];
	        }

	        return target;
	    }

	    if (typeof target !== 'object') {
	        return [target].concat(source);
	    }

	    var mergeTarget = target;
	    if (Array.isArray(target) && !Array.isArray(source)) {
	        mergeTarget = arrayToObject(target, options);
	    }

	    if (Array.isArray(target) && Array.isArray(source)) {
	        source.forEach(function (item, i) {
	            if (has$2.call(target, i)) {
	                if (target[i] && typeof target[i] === 'object') {
	                    target[i] = merge(target[i], item, options);
	                } else {
	                    target.push(item);
	                }
	            } else {
	                target[i] = item;
	            }
	        });
	        return target;
	    }

	    return Object.keys(source).reduce(function (acc, key) {
	        var value = source[key];

	        if (has$2.call(acc, key)) {
	            acc[key] = merge(acc[key], value, options);
	        } else {
	            acc[key] = value;
	        }
	        return acc;
	    }, mergeTarget);
	};

	var assign$1 = function assignSingleSource(target, source) {
	    return Object.keys(source).reduce(function (acc, key) {
	        acc[key] = source[key];
	        return acc;
	    }, target);
	};

	var decode$4 = function (str) {
	    try {
	        return decodeURIComponent(str.replace(/\+/g, ' '));
	    } catch (e) {
	        return str;
	    }
	};

	var encode$5 = function encode(str) {
	    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.
	    // It has been adapted here for stricter adherence to RFC 3986
	    if (str.length === 0) {
	        return str;
	    }

	    var string = typeof str === 'string' ? str : String(str);

	    var out = '';
	    for (var i = 0; i < string.length; ++i) {
	        var c = string.charCodeAt(i);

	        if (
	            c === 0x2D // -
	            || c === 0x2E // .
	            || c === 0x5F // _
	            || c === 0x7E // ~
	            || (c >= 0x30 && c <= 0x39) // 0-9
	            || (c >= 0x41 && c <= 0x5A) // a-z
	            || (c >= 0x61 && c <= 0x7A) // A-Z
	        ) {
	            out += string.charAt(i);
	            continue;
	        }

	        if (c < 0x80) {
	            out = out + hexTable[c];
	            continue;
	        }

	        if (c < 0x800) {
	            out = out + (hexTable[0xC0 | (c >> 6)] + hexTable[0x80 | (c & 0x3F)]);
	            continue;
	        }

	        if (c < 0xD800 || c >= 0xE000) {
	            out = out + (hexTable[0xE0 | (c >> 12)] + hexTable[0x80 | ((c >> 6) & 0x3F)] + hexTable[0x80 | (c & 0x3F)]);
	            continue;
	        }

	        i += 1;
	        c = 0x10000 + (((c & 0x3FF) << 10) | (string.charCodeAt(i) & 0x3FF));
	        out += hexTable[0xF0 | (c >> 18)]
	            + hexTable[0x80 | ((c >> 12) & 0x3F)]
	            + hexTable[0x80 | ((c >> 6) & 0x3F)]
	            + hexTable[0x80 | (c & 0x3F)];
	    }

	    return out;
	};

	var compact = function compact(value) {
	    var queue = [{ obj: { o: value }, prop: 'o' }];
	    var refs = [];

	    for (var i = 0; i < queue.length; ++i) {
	        var item = queue[i];
	        var obj = item.obj[item.prop];

	        var keys = Object.keys(obj);
	        for (var j = 0; j < keys.length; ++j) {
	            var key = keys[j];
	            var val = obj[key];
	            if (typeof val === 'object' && val !== null && refs.indexOf(val) === -1) {
	                queue.push({ obj: obj, prop: key });
	                refs.push(val);
	            }
	        }
	    }

	    return compactQueue(queue);
	};

	var isRegExp = function isRegExp(obj) {
	    return Object.prototype.toString.call(obj) === '[object RegExp]';
	};

	var isBuffer = function isBuffer(obj) {
	    if (obj === null || typeof obj === 'undefined') {
	        return false;
	    }

	    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
	};

	var utils$1 = {
	    arrayToObject: arrayToObject,
	    assign: assign$1,
	    compact: compact,
	    decode: decode$4,
	    encode: encode$5,
	    isBuffer: isBuffer,
	    isRegExp: isRegExp,
	    merge: merge
	};

	var replace = String.prototype.replace;
	var percentTwenties = /%20/g;

	var formats$2 = {
	    'default': 'RFC3986',
	    formatters: {
	        RFC1738: function (value) {
	            return replace.call(value, percentTwenties, '+');
	        },
	        RFC3986: function (value) {
	            return value;
	        }
	    },
	    RFC1738: 'RFC1738',
	    RFC3986: 'RFC3986'
	};

	var arrayPrefixGenerators = {
	    brackets: function brackets(prefix) { // eslint-disable-line func-name-matching
	        return prefix + '[]';
	    },
	    indices: function indices(prefix, key) { // eslint-disable-line func-name-matching
	        return prefix + '[' + key + ']';
	    },
	    repeat: function repeat(prefix) { // eslint-disable-line func-name-matching
	        return prefix;
	    }
	};

	var toISO = Date.prototype.toISOString;

	var defaults$1 = {
	    delimiter: '&',
	    encode: true,
	    encoder: utils$1.encode,
	    encodeValuesOnly: false,
	    serializeDate: function serializeDate(date) { // eslint-disable-line func-name-matching
	        return toISO.call(date);
	    },
	    skipNulls: false,
	    strictNullHandling: false
	};

	var stringify$1 = function stringify( // eslint-disable-line func-name-matching
	    object,
	    prefix,
	    generateArrayPrefix,
	    strictNullHandling,
	    skipNulls,
	    encoder,
	    filter,
	    sort,
	    allowDots,
	    serializeDate,
	    formatter,
	    encodeValuesOnly
	) {
	    var obj = object;
	    if (typeof filter === 'function') {
	        obj = filter(prefix, obj);
	    } else if (obj instanceof Date) {
	        obj = serializeDate(obj);
	    } else if (obj === null) {
	        if (strictNullHandling) {
	            return encoder && !encodeValuesOnly ? encoder(prefix, defaults$1.encoder) : prefix;
	        }

	        obj = '';
	    }

	    if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean' || utils$1.isBuffer(obj)) {
	        if (encoder) {
	            var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults$1.encoder);
	            return [formatter(keyValue) + '=' + formatter(encoder(obj, defaults$1.encoder))];
	        }
	        return [formatter(prefix) + '=' + formatter(String(obj))];
	    }

	    var values = [];

	    if (typeof obj === 'undefined') {
	        return values;
	    }

	    var objKeys;
	    if (Array.isArray(filter)) {
	        objKeys = filter;
	    } else {
	        var keys = Object.keys(obj);
	        objKeys = sort ? keys.sort(sort) : keys;
	    }

	    for (var i = 0; i < objKeys.length; ++i) {
	        var key = objKeys[i];

	        if (skipNulls && obj[key] === null) {
	            continue;
	        }

	        if (Array.isArray(obj)) {
	            values = values.concat(stringify(
	                obj[key],
	                generateArrayPrefix(prefix, key),
	                generateArrayPrefix,
	                strictNullHandling,
	                skipNulls,
	                encoder,
	                filter,
	                sort,
	                allowDots,
	                serializeDate,
	                formatter,
	                encodeValuesOnly
	            ));
	        } else {
	            values = values.concat(stringify(
	                obj[key],
	                prefix + (allowDots ? '.' + key : '[' + key + ']'),
	                generateArrayPrefix,
	                strictNullHandling,
	                skipNulls,
	                encoder,
	                filter,
	                sort,
	                allowDots,
	                serializeDate,
	                formatter,
	                encodeValuesOnly
	            ));
	        }
	    }

	    return values;
	};

	var stringify_1 = function (object, opts) {
	    var obj = object;
	    var options = opts ? utils$1.assign({}, opts) : {};

	    if (options.encoder !== null && options.encoder !== undefined && typeof options.encoder !== 'function') {
	        throw new TypeError('Encoder has to be a function.');
	    }

	    var delimiter = typeof options.delimiter === 'undefined' ? defaults$1.delimiter : options.delimiter;
	    var strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : defaults$1.strictNullHandling;
	    var skipNulls = typeof options.skipNulls === 'boolean' ? options.skipNulls : defaults$1.skipNulls;
	    var encode = typeof options.encode === 'boolean' ? options.encode : defaults$1.encode;
	    var encoder = typeof options.encoder === 'function' ? options.encoder : defaults$1.encoder;
	    var sort = typeof options.sort === 'function' ? options.sort : null;
	    var allowDots = typeof options.allowDots === 'undefined' ? false : options.allowDots;
	    var serializeDate = typeof options.serializeDate === 'function' ? options.serializeDate : defaults$1.serializeDate;
	    var encodeValuesOnly = typeof options.encodeValuesOnly === 'boolean' ? options.encodeValuesOnly : defaults$1.encodeValuesOnly;
	    if (typeof options.format === 'undefined') {
	        options.format = formats$2['default'];
	    } else if (!Object.prototype.hasOwnProperty.call(formats$2.formatters, options.format)) {
	        throw new TypeError('Unknown format option provided.');
	    }
	    var formatter = formats$2.formatters[options.format];
	    var objKeys;
	    var filter;

	    if (typeof options.filter === 'function') {
	        filter = options.filter;
	        obj = filter('', obj);
	    } else if (Array.isArray(options.filter)) {
	        filter = options.filter;
	        objKeys = filter;
	    }

	    var keys = [];

	    if (typeof obj !== 'object' || obj === null) {
	        return '';
	    }

	    var arrayFormat;
	    if (options.arrayFormat in arrayPrefixGenerators) {
	        arrayFormat = options.arrayFormat;
	    } else if ('indices' in options) {
	        arrayFormat = options.indices ? 'indices' : 'repeat';
	    } else {
	        arrayFormat = 'indices';
	    }

	    var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];

	    if (!objKeys) {
	        objKeys = Object.keys(obj);
	    }

	    if (sort) {
	        objKeys.sort(sort);
	    }

	    for (var i = 0; i < objKeys.length; ++i) {
	        var key = objKeys[i];

	        if (skipNulls && obj[key] === null) {
	            continue;
	        }

	        keys = keys.concat(stringify$1(
	            obj[key],
	            key,
	            generateArrayPrefix,
	            strictNullHandling,
	            skipNulls,
	            encode ? encoder : null,
	            filter,
	            sort,
	            allowDots,
	            serializeDate,
	            formatter,
	            encodeValuesOnly
	        ));
	    }

	    var joined = keys.join(delimiter);
	    var prefix = options.addQueryPrefix === true ? '?' : '';

	    return joined.length > 0 ? prefix + joined : '';
	};

	var has$1 = Object.prototype.hasOwnProperty;

	var defaults = {
	    allowDots: false,
	    allowPrototypes: false,
	    arrayLimit: 20,
	    decoder: utils$1.decode,
	    delimiter: '&',
	    depth: 5,
	    parameterLimit: 1000,
	    plainObjects: false,
	    strictNullHandling: false
	};

	var parseValues = function parseQueryStringValues(str, options) {
	    var obj = {};
	    var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, '') : str;
	    var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;
	    var parts = cleanStr.split(options.delimiter, limit);

	    for (var i = 0; i < parts.length; ++i) {
	        var part = parts[i];

	        var bracketEqualsPos = part.indexOf(']=');
	        var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;

	        var key, val;
	        if (pos === -1) {
	            key = options.decoder(part, defaults.decoder);
	            val = options.strictNullHandling ? null : '';
	        } else {
	            key = options.decoder(part.slice(0, pos), defaults.decoder);
	            val = options.decoder(part.slice(pos + 1), defaults.decoder);
	        }
	        if (has$1.call(obj, key)) {
	            obj[key] = [].concat(obj[key]).concat(val);
	        } else {
	            obj[key] = val;
	        }
	    }

	    return obj;
	};

	var parseObject = function (chain, val, options) {
	    var leaf = val;

	    for (var i = chain.length - 1; i >= 0; --i) {
	        var obj;
	        var root = chain[i];

	        if (root === '[]') {
	            obj = [];
	            obj = obj.concat(leaf);
	        } else {
	            obj = options.plainObjects ? Object.create(null) : {};
	            var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;
	            var index = parseInt(cleanRoot, 10);
	            if (
	                !isNaN(index)
	                && root !== cleanRoot
	                && String(index) === cleanRoot
	                && index >= 0
	                && (options.parseArrays && index <= options.arrayLimit)
	            ) {
	                obj = [];
	                obj[index] = leaf;
	            } else {
	                obj[cleanRoot] = leaf;
	            }
	        }

	        leaf = obj;
	    }

	    return leaf;
	};

	var parseKeys = function parseQueryStringKeys(givenKey, val, options) {
	    if (!givenKey) {
	        return;
	    }

	    // Transform dot notation to bracket notation
	    var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, '[$1]') : givenKey;

	    // The regex chunks

	    var brackets = /(\[[^[\]]*])/;
	    var child = /(\[[^[\]]*])/g;

	    // Get the parent

	    var segment = brackets.exec(key);
	    var parent = segment ? key.slice(0, segment.index) : key;

	    // Stash the parent if it exists

	    var keys = [];
	    if (parent) {
	        // If we aren't using plain objects, optionally prefix keys
	        // that would overwrite object prototype properties
	        if (!options.plainObjects && has$1.call(Object.prototype, parent)) {
	            if (!options.allowPrototypes) {
	                return;
	            }
	        }

	        keys.push(parent);
	    }

	    // Loop through children appending to the array until we hit depth

	    var i = 0;
	    while ((segment = child.exec(key)) !== null && i < options.depth) {
	        i += 1;
	        if (!options.plainObjects && has$1.call(Object.prototype, segment[1].slice(1, -1))) {
	            if (!options.allowPrototypes) {
	                return;
	            }
	        }
	        keys.push(segment[1]);
	    }

	    // If there's a remainder, just add whatever is left

	    if (segment) {
	        keys.push('[' + key.slice(segment.index) + ']');
	    }

	    return parseObject(keys, val, options);
	};

	var parse$7 = function (str, opts) {
	    var options = opts ? utils$1.assign({}, opts) : {};

	    if (options.decoder !== null && options.decoder !== undefined && typeof options.decoder !== 'function') {
	        throw new TypeError('Decoder has to be a function.');
	    }

	    options.ignoreQueryPrefix = options.ignoreQueryPrefix === true;
	    options.delimiter = typeof options.delimiter === 'string' || utils$1.isRegExp(options.delimiter) ? options.delimiter : defaults.delimiter;
	    options.depth = typeof options.depth === 'number' ? options.depth : defaults.depth;
	    options.arrayLimit = typeof options.arrayLimit === 'number' ? options.arrayLimit : defaults.arrayLimit;
	    options.parseArrays = options.parseArrays !== false;
	    options.decoder = typeof options.decoder === 'function' ? options.decoder : defaults.decoder;
	    options.allowDots = typeof options.allowDots === 'boolean' ? options.allowDots : defaults.allowDots;
	    options.plainObjects = typeof options.plainObjects === 'boolean' ? options.plainObjects : defaults.plainObjects;
	    options.allowPrototypes = typeof options.allowPrototypes === 'boolean' ? options.allowPrototypes : defaults.allowPrototypes;
	    options.parameterLimit = typeof options.parameterLimit === 'number' ? options.parameterLimit : defaults.parameterLimit;
	    options.strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : defaults.strictNullHandling;

	    if (str === '' || str === null || typeof str === 'undefined') {
	        return options.plainObjects ? Object.create(null) : {};
	    }

	    var tempObj = typeof str === 'string' ? parseValues(str, options) : str;
	    var obj = options.plainObjects ? Object.create(null) : {};

	    // Iterate over the keys and setup the new object

	    var keys = Object.keys(tempObj);
	    for (var i = 0; i < keys.length; ++i) {
	        var key = keys[i];
	        var newObj = parseKeys(key, tempObj[key], options);
	        obj = utils$1.merge(obj, newObj, options);
	    }

	    return utils$1.compact(obj);
	};

	var lib$3 = {
	    formats: formats$2,
	    parse: parse$7,
	    stringify: stringify_1
	};

	function Querystring$1 (request) {
	  this.request = request;
	  this.lib = null;
	  this.useQuerystring = null;
	  this.parseOptions = null;
	  this.stringifyOptions = null;
	}

	Querystring$1.prototype.init = function (options) {
	  if (this.lib) { return }

	  this.useQuerystring = options.useQuerystring;
	  this.lib = (this.useQuerystring ? querystring__default['default'] : lib$3);

	  this.parseOptions = options.qsParseOptions || {};
	  this.stringifyOptions = options.qsStringifyOptions || {};
	};

	Querystring$1.prototype.stringify = function (obj) {
	  return (this.useQuerystring)
	    ? this.rfc3986(this.lib.stringify(obj,
	      this.stringifyOptions.sep || null,
	      this.stringifyOptions.eq || null,
	      this.stringifyOptions))
	    : this.lib.stringify(obj, this.stringifyOptions)
	};

	Querystring$1.prototype.parse = function (str) {
	  return (this.useQuerystring)
	    ? this.lib.parse(str,
	      this.parseOptions.sep || null,
	      this.parseOptions.eq || null,
	      this.parseOptions)
	    : this.lib.parse(str, this.parseOptions)
	};

	Querystring$1.prototype.rfc3986 = function (str) {
	  return str.replace(/[!'()*]/g, function (c) {
	    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
	  })
	};

	Querystring$1.prototype.unescape = querystring__default['default'].unescape;

	var Querystring_1 = Querystring$1;

	var querystring_1 = {
		Querystring: Querystring_1
	};

	/** @license URI.js v4.4.1 (c) 2011 Gary Court. License: http://github.com/garycourt/uri-js */

	var uri_all = createCommonjsModule(function (module, exports) {
	(function (global, factory) {
		factory(exports) ;
	}(commonjsGlobal, (function (exports) {
	function merge() {
	    for (var _len = arguments.length, sets = Array(_len), _key = 0; _key < _len; _key++) {
	        sets[_key] = arguments[_key];
	    }

	    if (sets.length > 1) {
	        sets[0] = sets[0].slice(0, -1);
	        var xl = sets.length - 1;
	        for (var x = 1; x < xl; ++x) {
	            sets[x] = sets[x].slice(1, -1);
	        }
	        sets[xl] = sets[xl].slice(1);
	        return sets.join('');
	    } else {
	        return sets[0];
	    }
	}
	function subexp(str) {
	    return "(?:" + str + ")";
	}
	function typeOf(o) {
	    return o === undefined ? "undefined" : o === null ? "null" : Object.prototype.toString.call(o).split(" ").pop().split("]").shift().toLowerCase();
	}
	function toUpperCase(str) {
	    return str.toUpperCase();
	}
	function toArray(obj) {
	    return obj !== undefined && obj !== null ? obj instanceof Array ? obj : typeof obj.length !== "number" || obj.split || obj.setInterval || obj.call ? [obj] : Array.prototype.slice.call(obj) : [];
	}
	function assign(target, source) {
	    var obj = target;
	    if (source) {
	        for (var key in source) {
	            obj[key] = source[key];
	        }
	    }
	    return obj;
	}

	function buildExps(isIRI) {
	    var ALPHA$$ = "[A-Za-z]",
	        DIGIT$$ = "[0-9]",
	        HEXDIG$$ = merge(DIGIT$$, "[A-Fa-f]"),
	        PCT_ENCODED$ = subexp(subexp("%[EFef]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%[89A-Fa-f]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%" + HEXDIG$$ + HEXDIG$$)),
	        //expanded
	    GEN_DELIMS$$ = "[\\:\\/\\?\\#\\[\\]\\@]",
	        SUB_DELIMS$$ = "[\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=]",
	        RESERVED$$ = merge(GEN_DELIMS$$, SUB_DELIMS$$),
	        UCSCHAR$$ = isIRI ? "[\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]" : "[]",
	        //subset, excludes bidi control characters
	    IPRIVATE$$ = isIRI ? "[\\uE000-\\uF8FF]" : "[]",
	        //subset
	    UNRESERVED$$ = merge(ALPHA$$, DIGIT$$, "[\\-\\.\\_\\~]", UCSCHAR$$);
	        subexp(ALPHA$$ + merge(ALPHA$$, DIGIT$$, "[\\+\\-\\.]") + "*");
	        subexp(subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:]")) + "*");
	        var DEC_OCTET_RELAXED$ = subexp(subexp("25[0-5]") + "|" + subexp("2[0-4]" + DIGIT$$) + "|" + subexp("1" + DIGIT$$ + DIGIT$$) + "|" + subexp("0?[1-9]" + DIGIT$$) + "|0?0?" + DIGIT$$),
	        //relaxed parsing rules
	    IPV4ADDRESS$ = subexp(DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$),
	        H16$ = subexp(HEXDIG$$ + "{1,4}"),
	        LS32$ = subexp(subexp(H16$ + "\\:" + H16$) + "|" + IPV4ADDRESS$),
	        IPV6ADDRESS1$ = subexp(subexp(H16$ + "\\:") + "{6}" + LS32$),
	        //                           6( h16 ":" ) ls32
	    IPV6ADDRESS2$ = subexp("\\:\\:" + subexp(H16$ + "\\:") + "{5}" + LS32$),
	        //                      "::" 5( h16 ":" ) ls32
	    IPV6ADDRESS3$ = subexp(subexp(H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{4}" + LS32$),
	        //[               h16 ] "::" 4( h16 ":" ) ls32
	    IPV6ADDRESS4$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,1}" + H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{3}" + LS32$),
	        //[ *1( h16 ":" ) h16 ] "::" 3( h16 ":" ) ls32
	    IPV6ADDRESS5$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,2}" + H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{2}" + LS32$),
	        //[ *2( h16 ":" ) h16 ] "::" 2( h16 ":" ) ls32
	    IPV6ADDRESS6$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,3}" + H16$) + "?\\:\\:" + H16$ + "\\:" + LS32$),
	        //[ *3( h16 ":" ) h16 ] "::"    h16 ":"   ls32
	    IPV6ADDRESS7$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,4}" + H16$) + "?\\:\\:" + LS32$),
	        //[ *4( h16 ":" ) h16 ] "::"              ls32
	    IPV6ADDRESS8$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,5}" + H16$) + "?\\:\\:" + H16$),
	        //[ *5( h16 ":" ) h16 ] "::"              h16
	    IPV6ADDRESS9$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,6}" + H16$) + "?\\:\\:"),
	        //[ *6( h16 ":" ) h16 ] "::"
	    IPV6ADDRESS$ = subexp([IPV6ADDRESS1$, IPV6ADDRESS2$, IPV6ADDRESS3$, IPV6ADDRESS4$, IPV6ADDRESS5$, IPV6ADDRESS6$, IPV6ADDRESS7$, IPV6ADDRESS8$, IPV6ADDRESS9$].join("|")),
	        ZONEID$ = subexp(subexp(UNRESERVED$$ + "|" + PCT_ENCODED$) + "+");
	        //RFC 6874, with relaxed parsing rules
	    subexp("[vV]" + HEXDIG$$ + "+\\." + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:]") + "+");
	        //RFC 6874
	    subexp(subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$)) + "*");
	        var PCHAR$ = subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@]"));
	        subexp(subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\@]")) + "+");
	        subexp(subexp(PCHAR$ + "|" + merge("[\\/\\?]", IPRIVATE$$)) + "*");
	    return {
	        NOT_SCHEME: new RegExp(merge("[^]", ALPHA$$, DIGIT$$, "[\\+\\-\\.]"), "g"),
	        NOT_USERINFO: new RegExp(merge("[^\\%\\:]", UNRESERVED$$, SUB_DELIMS$$), "g"),
	        NOT_HOST: new RegExp(merge("[^\\%\\[\\]\\:]", UNRESERVED$$, SUB_DELIMS$$), "g"),
	        NOT_PATH: new RegExp(merge("[^\\%\\/\\:\\@]", UNRESERVED$$, SUB_DELIMS$$), "g"),
	        NOT_PATH_NOSCHEME: new RegExp(merge("[^\\%\\/\\@]", UNRESERVED$$, SUB_DELIMS$$), "g"),
	        NOT_QUERY: new RegExp(merge("[^\\%]", UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@\\/\\?]", IPRIVATE$$), "g"),
	        NOT_FRAGMENT: new RegExp(merge("[^\\%]", UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@\\/\\?]"), "g"),
	        ESCAPE: new RegExp(merge("[^]", UNRESERVED$$, SUB_DELIMS$$), "g"),
	        UNRESERVED: new RegExp(UNRESERVED$$, "g"),
	        OTHER_CHARS: new RegExp(merge("[^\\%]", UNRESERVED$$, RESERVED$$), "g"),
	        PCT_ENCODED: new RegExp(PCT_ENCODED$, "g"),
	        IPV4ADDRESS: new RegExp("^(" + IPV4ADDRESS$ + ")$"),
	        IPV6ADDRESS: new RegExp("^\\[?(" + IPV6ADDRESS$ + ")" + subexp(subexp("\\%25|\\%(?!" + HEXDIG$$ + "{2})") + "(" + ZONEID$ + ")") + "?\\]?$") //RFC 6874, with relaxed parsing rules
	    };
	}
	var URI_PROTOCOL = buildExps(false);

	var IRI_PROTOCOL = buildExps(true);

	var slicedToArray = function () {
	  function sliceIterator(arr, i) {
	    var _arr = [];
	    var _n = true;
	    var _d = false;
	    var _e = undefined;

	    try {
	      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
	        _arr.push(_s.value);

	        if (i && _arr.length === i) break;
	      }
	    } catch (err) {
	      _d = true;
	      _e = err;
	    } finally {
	      try {
	        if (!_n && _i["return"]) _i["return"]();
	      } finally {
	        if (_d) throw _e;
	      }
	    }

	    return _arr;
	  }

	  return function (arr, i) {
	    if (Array.isArray(arr)) {
	      return arr;
	    } else if (Symbol.iterator in Object(arr)) {
	      return sliceIterator(arr, i);
	    } else {
	      throw new TypeError("Invalid attempt to destructure non-iterable instance");
	    }
	  };
	}();













	var toConsumableArray = function (arr) {
	  if (Array.isArray(arr)) {
	    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

	    return arr2;
	  } else {
	    return Array.from(arr);
	  }
	};

	/** Highest positive signed 32-bit float value */

	var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	var base = 36;
	var tMin = 1;
	var tMax = 26;
	var skew = 38;
	var damp = 700;
	var initialBias = 72;
	var initialN = 128; // 0x80
	var delimiter = '-'; // '\x2D'

	/** Regular expressions */
	var regexPunycode = /^xn--/;
	var regexNonASCII = /[^\0-\x7E]/; // non-ASCII chars
	var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g; // RFC 3490 separators

	/** Error messages */
	var errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	};

	/** Convenience shortcuts */
	var baseMinusTMin = base - tMin;
	var floor = Math.floor;
	var stringFromCharCode = String.fromCharCode;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error$1(type) {
		throw new RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var result = [];
		var length = array.length;
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [];
		var counter = 0;
		var length = string.length;
		while (counter < length) {
			var value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// It's a high surrogate, and there is a next character.
				var extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) {
					// Low surrogate.
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// It's an unmatched surrogate; only append this code unit, in case the
					// next code unit is the high surrogate of a surrogate pair.
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	var ucs2encode = function ucs2encode(array) {
		return String.fromCodePoint.apply(String, toConsumableArray(array));
	};

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	var basicToDigit = function basicToDigit(codePoint) {
		if (codePoint - 0x30 < 0x0A) {
			return codePoint - 0x16;
		}
		if (codePoint - 0x41 < 0x1A) {
			return codePoint - 0x41;
		}
		if (codePoint - 0x61 < 0x1A) {
			return codePoint - 0x61;
		}
		return base;
	};

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	var digitToBasic = function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	};

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	var adapt = function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (; /* no initialization */delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	};

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	var decode = function decode(input) {
		// Don't use UCS-2.
		var output = [];
		var inputLength = input.length;
		var i = 0;
		var n = initialN;
		var bias = initialBias;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		var basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (var j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error$1('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (var index = basic > 0 ? basic + 1 : 0; index < inputLength;) /* no final expression */{

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			var oldi = i;
			for (var w = 1, k = base;; /* no condition */k += base) {

				if (index >= inputLength) {
					error$1('invalid-input');
				}

				var digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error$1('overflow');
				}

				i += digit * w;
				var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

				if (digit < t) {
					break;
				}

				var baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error$1('overflow');
				}

				w *= baseMinusT;
			}

			var out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error$1('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output.
			output.splice(i++, 0, n);
		}

		return String.fromCodePoint.apply(String, output);
	};

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	var encode = function encode(input) {
		var output = [];

		// Convert the input in UCS-2 to an array of Unicode code points.
		input = ucs2decode(input);

		// Cache the length.
		var inputLength = input.length;

		// Initialize the state.
		var n = initialN;
		var delta = 0;
		var bias = initialBias;

		// Handle the basic code points.
		var _iteratorNormalCompletion = true;
		var _didIteratorError = false;
		var _iteratorError = undefined;

		try {
			for (var _iterator = input[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
				var _currentValue2 = _step.value;

				if (_currentValue2 < 0x80) {
					output.push(stringFromCharCode(_currentValue2));
				}
			}
		} catch (err) {
			_didIteratorError = true;
			_iteratorError = err;
		} finally {
			try {
				if (!_iteratorNormalCompletion && _iterator.return) {
					_iterator.return();
				}
			} finally {
				if (_didIteratorError) {
					throw _iteratorError;
				}
			}
		}

		var basicLength = output.length;
		var handledCPCount = basicLength;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string with a delimiter unless it's empty.
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			var m = maxInt;
			var _iteratorNormalCompletion2 = true;
			var _didIteratorError2 = false;
			var _iteratorError2 = undefined;

			try {
				for (var _iterator2 = input[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
					var currentValue = _step2.value;

					if (currentValue >= n && currentValue < m) {
						m = currentValue;
					}
				}

				// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
				// but guard against overflow.
			} catch (err) {
				_didIteratorError2 = true;
				_iteratorError2 = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion2 && _iterator2.return) {
						_iterator2.return();
					}
				} finally {
					if (_didIteratorError2) {
						throw _iteratorError2;
					}
				}
			}

			var handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error$1('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			var _iteratorNormalCompletion3 = true;
			var _didIteratorError3 = false;
			var _iteratorError3 = undefined;

			try {
				for (var _iterator3 = input[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
					var _currentValue = _step3.value;

					if (_currentValue < n && ++delta > maxInt) {
						error$1('overflow');
					}
					if (_currentValue == n) {
						// Represent delta as a generalized variable-length integer.
						var q = delta;
						for (var k = base;; /* no condition */k += base) {
							var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
							if (q < t) {
								break;
							}
							var qMinusT = q - t;
							var baseMinusT = base - t;
							output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
							q = floor(qMinusT / baseMinusT);
						}

						output.push(stringFromCharCode(digitToBasic(q, 0)));
						bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
						delta = 0;
						++handledCPCount;
					}
				}
			} catch (err) {
				_didIteratorError3 = true;
				_iteratorError3 = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion3 && _iterator3.return) {
						_iterator3.return();
					}
				} finally {
					if (_didIteratorError3) {
						throw _iteratorError3;
					}
				}
			}

			++delta;
			++n;
		}
		return output.join('');
	};

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	var toUnicode = function toUnicode(input) {
		return mapDomain(input, function (string) {
			return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
		});
	};

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	var toASCII = function toASCII(input) {
		return mapDomain(input, function (string) {
			return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;
		});
	};

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	var punycode = {
		/**
	  * A string representing the current Punycode.js version number.
	  * @memberOf punycode
	  * @type String
	  */
		'version': '2.1.0',
		/**
	  * An object of methods to convert from JavaScript's internal character
	  * representation (UCS-2) to Unicode code points, and back.
	  * @see <https://mathiasbynens.be/notes/javascript-encoding>
	  * @memberOf punycode
	  * @type Object
	  */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/**
	 * URI.js
	 *
	 * @fileoverview An RFC 3986 compliant, scheme extendable URI parsing/validating/resolving library for JavaScript.
	 * @author <a href="mailto:gary.court@gmail.com">Gary Court</a>
	 * @see http://github.com/garycourt/uri-js
	 */
	/**
	 * Copyright 2011 Gary Court. All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification, are
	 * permitted provided that the following conditions are met:
	 *
	 *    1. Redistributions of source code must retain the above copyright notice, this list of
	 *       conditions and the following disclaimer.
	 *
	 *    2. Redistributions in binary form must reproduce the above copyright notice, this list
	 *       of conditions and the following disclaimer in the documentation and/or other materials
	 *       provided with the distribution.
	 *
	 * THIS SOFTWARE IS PROVIDED BY GARY COURT ``AS IS'' AND ANY EXPRESS OR IMPLIED
	 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
	 * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GARY COURT OR
	 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
	 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
	 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
	 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
	 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 *
	 * The views and conclusions contained in the software and documentation are those of the
	 * authors and should not be interpreted as representing official policies, either expressed
	 * or implied, of Gary Court.
	 */
	var SCHEMES = {};
	function pctEncChar(chr) {
	    var c = chr.charCodeAt(0);
	    var e = void 0;
	    if (c < 16) e = "%0" + c.toString(16).toUpperCase();else if (c < 128) e = "%" + c.toString(16).toUpperCase();else if (c < 2048) e = "%" + (c >> 6 | 192).toString(16).toUpperCase() + "%" + (c & 63 | 128).toString(16).toUpperCase();else e = "%" + (c >> 12 | 224).toString(16).toUpperCase() + "%" + (c >> 6 & 63 | 128).toString(16).toUpperCase() + "%" + (c & 63 | 128).toString(16).toUpperCase();
	    return e;
	}
	function pctDecChars(str) {
	    var newStr = "";
	    var i = 0;
	    var il = str.length;
	    while (i < il) {
	        var c = parseInt(str.substr(i + 1, 2), 16);
	        if (c < 128) {
	            newStr += String.fromCharCode(c);
	            i += 3;
	        } else if (c >= 194 && c < 224) {
	            if (il - i >= 6) {
	                var c2 = parseInt(str.substr(i + 4, 2), 16);
	                newStr += String.fromCharCode((c & 31) << 6 | c2 & 63);
	            } else {
	                newStr += str.substr(i, 6);
	            }
	            i += 6;
	        } else if (c >= 224) {
	            if (il - i >= 9) {
	                var _c = parseInt(str.substr(i + 4, 2), 16);
	                var c3 = parseInt(str.substr(i + 7, 2), 16);
	                newStr += String.fromCharCode((c & 15) << 12 | (_c & 63) << 6 | c3 & 63);
	            } else {
	                newStr += str.substr(i, 9);
	            }
	            i += 9;
	        } else {
	            newStr += str.substr(i, 3);
	            i += 3;
	        }
	    }
	    return newStr;
	}
	function _normalizeComponentEncoding(components, protocol) {
	    function decodeUnreserved(str) {
	        var decStr = pctDecChars(str);
	        return !decStr.match(protocol.UNRESERVED) ? str : decStr;
	    }
	    if (components.scheme) components.scheme = String(components.scheme).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_SCHEME, "");
	    if (components.userinfo !== undefined) components.userinfo = String(components.userinfo).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_USERINFO, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
	    if (components.host !== undefined) components.host = String(components.host).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_HOST, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
	    if (components.path !== undefined) components.path = String(components.path).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(components.scheme ? protocol.NOT_PATH : protocol.NOT_PATH_NOSCHEME, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
	    if (components.query !== undefined) components.query = String(components.query).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_QUERY, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
	    if (components.fragment !== undefined) components.fragment = String(components.fragment).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_FRAGMENT, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
	    return components;
	}

	function _stripLeadingZeros(str) {
	    return str.replace(/^0*(.*)/, "$1") || "0";
	}
	function _normalizeIPv4(host, protocol) {
	    var matches = host.match(protocol.IPV4ADDRESS) || [];

	    var _matches = slicedToArray(matches, 2),
	        address = _matches[1];

	    if (address) {
	        return address.split(".").map(_stripLeadingZeros).join(".");
	    } else {
	        return host;
	    }
	}
	function _normalizeIPv6(host, protocol) {
	    var matches = host.match(protocol.IPV6ADDRESS) || [];

	    var _matches2 = slicedToArray(matches, 3),
	        address = _matches2[1],
	        zone = _matches2[2];

	    if (address) {
	        var _address$toLowerCase$ = address.toLowerCase().split('::').reverse(),
	            _address$toLowerCase$2 = slicedToArray(_address$toLowerCase$, 2),
	            last = _address$toLowerCase$2[0],
	            first = _address$toLowerCase$2[1];

	        var firstFields = first ? first.split(":").map(_stripLeadingZeros) : [];
	        var lastFields = last.split(":").map(_stripLeadingZeros);
	        var isLastFieldIPv4Address = protocol.IPV4ADDRESS.test(lastFields[lastFields.length - 1]);
	        var fieldCount = isLastFieldIPv4Address ? 7 : 8;
	        var lastFieldsStart = lastFields.length - fieldCount;
	        var fields = Array(fieldCount);
	        for (var x = 0; x < fieldCount; ++x) {
	            fields[x] = firstFields[x] || lastFields[lastFieldsStart + x] || '';
	        }
	        if (isLastFieldIPv4Address) {
	            fields[fieldCount - 1] = _normalizeIPv4(fields[fieldCount - 1], protocol);
	        }
	        var allZeroFields = fields.reduce(function (acc, field, index) {
	            if (!field || field === "0") {
	                var lastLongest = acc[acc.length - 1];
	                if (lastLongest && lastLongest.index + lastLongest.length === index) {
	                    lastLongest.length++;
	                } else {
	                    acc.push({ index: index, length: 1 });
	                }
	            }
	            return acc;
	        }, []);
	        var longestZeroFields = allZeroFields.sort(function (a, b) {
	            return b.length - a.length;
	        })[0];
	        var newHost = void 0;
	        if (longestZeroFields && longestZeroFields.length > 1) {
	            var newFirst = fields.slice(0, longestZeroFields.index);
	            var newLast = fields.slice(longestZeroFields.index + longestZeroFields.length);
	            newHost = newFirst.join(":") + "::" + newLast.join(":");
	        } else {
	            newHost = fields.join(":");
	        }
	        if (zone) {
	            newHost += "%" + zone;
	        }
	        return newHost;
	    } else {
	        return host;
	    }
	}
	var URI_PARSE = /^(?:([^:\/?#]+):)?(?:\/\/((?:([^\/?#@]*)@)?(\[[^\/?#\]]+\]|[^\/?#:]*)(?:\:(\d*))?))?([^?#]*)(?:\?([^#]*))?(?:#((?:.|\n|\r)*))?/i;
	var NO_MATCH_IS_UNDEFINED = "".match(/(){0}/)[1] === undefined;
	function parse(uriString) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	    var components = {};
	    var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;
	    if (options.reference === "suffix") uriString = (options.scheme ? options.scheme + ":" : "") + "//" + uriString;
	    var matches = uriString.match(URI_PARSE);
	    if (matches) {
	        if (NO_MATCH_IS_UNDEFINED) {
	            //store each component
	            components.scheme = matches[1];
	            components.userinfo = matches[3];
	            components.host = matches[4];
	            components.port = parseInt(matches[5], 10);
	            components.path = matches[6] || "";
	            components.query = matches[7];
	            components.fragment = matches[8];
	            //fix port number
	            if (isNaN(components.port)) {
	                components.port = matches[5];
	            }
	        } else {
	            //IE FIX for improper RegExp matching
	            //store each component
	            components.scheme = matches[1] || undefined;
	            components.userinfo = uriString.indexOf("@") !== -1 ? matches[3] : undefined;
	            components.host = uriString.indexOf("//") !== -1 ? matches[4] : undefined;
	            components.port = parseInt(matches[5], 10);
	            components.path = matches[6] || "";
	            components.query = uriString.indexOf("?") !== -1 ? matches[7] : undefined;
	            components.fragment = uriString.indexOf("#") !== -1 ? matches[8] : undefined;
	            //fix port number
	            if (isNaN(components.port)) {
	                components.port = uriString.match(/\/\/(?:.|\n)*\:(?:\/|\?|\#|$)/) ? matches[4] : undefined;
	            }
	        }
	        if (components.host) {
	            //normalize IP hosts
	            components.host = _normalizeIPv6(_normalizeIPv4(components.host, protocol), protocol);
	        }
	        //determine reference type
	        if (components.scheme === undefined && components.userinfo === undefined && components.host === undefined && components.port === undefined && !components.path && components.query === undefined) {
	            components.reference = "same-document";
	        } else if (components.scheme === undefined) {
	            components.reference = "relative";
	        } else if (components.fragment === undefined) {
	            components.reference = "absolute";
	        } else {
	            components.reference = "uri";
	        }
	        //check for reference errors
	        if (options.reference && options.reference !== "suffix" && options.reference !== components.reference) {
	            components.error = components.error || "URI is not a " + options.reference + " reference.";
	        }
	        //find scheme handler
	        var schemeHandler = SCHEMES[(options.scheme || components.scheme || "").toLowerCase()];
	        //check if scheme can't handle IRIs
	        if (!options.unicodeSupport && (!schemeHandler || !schemeHandler.unicodeSupport)) {
	            //if host component is a domain name
	            if (components.host && (options.domainHost || schemeHandler && schemeHandler.domainHost)) {
	                //convert Unicode IDN -> ASCII IDN
	                try {
	                    components.host = punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase());
	                } catch (e) {
	                    components.error = components.error || "Host's domain name can not be converted to ASCII via punycode: " + e;
	                }
	            }
	            //convert IRI -> URI
	            _normalizeComponentEncoding(components, URI_PROTOCOL);
	        } else {
	            //normalize encodings
	            _normalizeComponentEncoding(components, protocol);
	        }
	        //perform scheme specific parsing
	        if (schemeHandler && schemeHandler.parse) {
	            schemeHandler.parse(components, options);
	        }
	    } else {
	        components.error = components.error || "URI can not be parsed.";
	    }
	    return components;
	}

	function _recomposeAuthority(components, options) {
	    var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;
	    var uriTokens = [];
	    if (components.userinfo !== undefined) {
	        uriTokens.push(components.userinfo);
	        uriTokens.push("@");
	    }
	    if (components.host !== undefined) {
	        //normalize IP hosts, add brackets and escape zone separator for IPv6
	        uriTokens.push(_normalizeIPv6(_normalizeIPv4(String(components.host), protocol), protocol).replace(protocol.IPV6ADDRESS, function (_, $1, $2) {
	            return "[" + $1 + ($2 ? "%25" + $2 : "") + "]";
	        }));
	    }
	    if (typeof components.port === "number" || typeof components.port === "string") {
	        uriTokens.push(":");
	        uriTokens.push(String(components.port));
	    }
	    return uriTokens.length ? uriTokens.join("") : undefined;
	}

	var RDS1 = /^\.\.?\//;
	var RDS2 = /^\/\.(\/|$)/;
	var RDS3 = /^\/\.\.(\/|$)/;
	var RDS5 = /^\/?(?:.|\n)*?(?=\/|$)/;
	function removeDotSegments(input) {
	    var output = [];
	    while (input.length) {
	        if (input.match(RDS1)) {
	            input = input.replace(RDS1, "");
	        } else if (input.match(RDS2)) {
	            input = input.replace(RDS2, "/");
	        } else if (input.match(RDS3)) {
	            input = input.replace(RDS3, "/");
	            output.pop();
	        } else if (input === "." || input === "..") {
	            input = "";
	        } else {
	            var im = input.match(RDS5);
	            if (im) {
	                var s = im[0];
	                input = input.slice(s.length);
	                output.push(s);
	            } else {
	                throw new Error("Unexpected dot segment condition");
	            }
	        }
	    }
	    return output.join("");
	}

	function serialize(components) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	    var protocol = options.iri ? IRI_PROTOCOL : URI_PROTOCOL;
	    var uriTokens = [];
	    //find scheme handler
	    var schemeHandler = SCHEMES[(options.scheme || components.scheme || "").toLowerCase()];
	    //perform scheme specific serialization
	    if (schemeHandler && schemeHandler.serialize) schemeHandler.serialize(components, options);
	    if (components.host) {
	        //if host component is an IPv6 address
	        if (protocol.IPV6ADDRESS.test(components.host)) ;
	        //TODO: normalize IPv6 address as per RFC 5952

	        //if host component is a domain name
	        else if (options.domainHost || schemeHandler && schemeHandler.domainHost) {
	                //convert IDN via punycode
	                try {
	                    components.host = !options.iri ? punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase()) : punycode.toUnicode(components.host);
	                } catch (e) {
	                    components.error = components.error || "Host's domain name can not be converted to " + (!options.iri ? "ASCII" : "Unicode") + " via punycode: " + e;
	                }
	            }
	    }
	    //normalize encoding
	    _normalizeComponentEncoding(components, protocol);
	    if (options.reference !== "suffix" && components.scheme) {
	        uriTokens.push(components.scheme);
	        uriTokens.push(":");
	    }
	    var authority = _recomposeAuthority(components, options);
	    if (authority !== undefined) {
	        if (options.reference !== "suffix") {
	            uriTokens.push("//");
	        }
	        uriTokens.push(authority);
	        if (components.path && components.path.charAt(0) !== "/") {
	            uriTokens.push("/");
	        }
	    }
	    if (components.path !== undefined) {
	        var s = components.path;
	        if (!options.absolutePath && (!schemeHandler || !schemeHandler.absolutePath)) {
	            s = removeDotSegments(s);
	        }
	        if (authority === undefined) {
	            s = s.replace(/^\/\//, "/%2F"); //don't allow the path to start with "//"
	        }
	        uriTokens.push(s);
	    }
	    if (components.query !== undefined) {
	        uriTokens.push("?");
	        uriTokens.push(components.query);
	    }
	    if (components.fragment !== undefined) {
	        uriTokens.push("#");
	        uriTokens.push(components.fragment);
	    }
	    return uriTokens.join(""); //merge tokens into a string
	}

	function resolveComponents(base, relative) {
	    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	    var skipNormalization = arguments[3];

	    var target = {};
	    if (!skipNormalization) {
	        base = parse(serialize(base, options), options); //normalize base components
	        relative = parse(serialize(relative, options), options); //normalize relative components
	    }
	    options = options || {};
	    if (!options.tolerant && relative.scheme) {
	        target.scheme = relative.scheme;
	        //target.authority = relative.authority;
	        target.userinfo = relative.userinfo;
	        target.host = relative.host;
	        target.port = relative.port;
	        target.path = removeDotSegments(relative.path || "");
	        target.query = relative.query;
	    } else {
	        if (relative.userinfo !== undefined || relative.host !== undefined || relative.port !== undefined) {
	            //target.authority = relative.authority;
	            target.userinfo = relative.userinfo;
	            target.host = relative.host;
	            target.port = relative.port;
	            target.path = removeDotSegments(relative.path || "");
	            target.query = relative.query;
	        } else {
	            if (!relative.path) {
	                target.path = base.path;
	                if (relative.query !== undefined) {
	                    target.query = relative.query;
	                } else {
	                    target.query = base.query;
	                }
	            } else {
	                if (relative.path.charAt(0) === "/") {
	                    target.path = removeDotSegments(relative.path);
	                } else {
	                    if ((base.userinfo !== undefined || base.host !== undefined || base.port !== undefined) && !base.path) {
	                        target.path = "/" + relative.path;
	                    } else if (!base.path) {
	                        target.path = relative.path;
	                    } else {
	                        target.path = base.path.slice(0, base.path.lastIndexOf("/") + 1) + relative.path;
	                    }
	                    target.path = removeDotSegments(target.path);
	                }
	                target.query = relative.query;
	            }
	            //target.authority = base.authority;
	            target.userinfo = base.userinfo;
	            target.host = base.host;
	            target.port = base.port;
	        }
	        target.scheme = base.scheme;
	    }
	    target.fragment = relative.fragment;
	    return target;
	}

	function resolve(baseURI, relativeURI, options) {
	    var schemelessOptions = assign({ scheme: 'null' }, options);
	    return serialize(resolveComponents(parse(baseURI, schemelessOptions), parse(relativeURI, schemelessOptions), schemelessOptions, true), schemelessOptions);
	}

	function normalize(uri, options) {
	    if (typeof uri === "string") {
	        uri = serialize(parse(uri, options), options);
	    } else if (typeOf(uri) === "object") {
	        uri = parse(serialize(uri, options), options);
	    }
	    return uri;
	}

	function equal(uriA, uriB, options) {
	    if (typeof uriA === "string") {
	        uriA = serialize(parse(uriA, options), options);
	    } else if (typeOf(uriA) === "object") {
	        uriA = serialize(uriA, options);
	    }
	    if (typeof uriB === "string") {
	        uriB = serialize(parse(uriB, options), options);
	    } else if (typeOf(uriB) === "object") {
	        uriB = serialize(uriB, options);
	    }
	    return uriA === uriB;
	}

	function escapeComponent(str, options) {
	    return str && str.toString().replace(!options || !options.iri ? URI_PROTOCOL.ESCAPE : IRI_PROTOCOL.ESCAPE, pctEncChar);
	}

	function unescapeComponent(str, options) {
	    return str && str.toString().replace(!options || !options.iri ? URI_PROTOCOL.PCT_ENCODED : IRI_PROTOCOL.PCT_ENCODED, pctDecChars);
	}

	var handler = {
	    scheme: "http",
	    domainHost: true,
	    parse: function parse(components, options) {
	        //report missing host
	        if (!components.host) {
	            components.error = components.error || "HTTP URIs must have a host.";
	        }
	        return components;
	    },
	    serialize: function serialize(components, options) {
	        var secure = String(components.scheme).toLowerCase() === "https";
	        //normalize the default port
	        if (components.port === (secure ? 443 : 80) || components.port === "") {
	            components.port = undefined;
	        }
	        //normalize the empty path
	        if (!components.path) {
	            components.path = "/";
	        }
	        //NOTE: We do not parse query strings for HTTP URIs
	        //as WWW Form Url Encoded query strings are part of the HTML4+ spec,
	        //and not the HTTP spec.
	        return components;
	    }
	};

	var handler$1 = {
	    scheme: "https",
	    domainHost: handler.domainHost,
	    parse: handler.parse,
	    serialize: handler.serialize
	};

	function isSecure(wsComponents) {
	    return typeof wsComponents.secure === 'boolean' ? wsComponents.secure : String(wsComponents.scheme).toLowerCase() === "wss";
	}
	//RFC 6455
	var handler$2 = {
	    scheme: "ws",
	    domainHost: true,
	    parse: function parse(components, options) {
	        var wsComponents = components;
	        //indicate if the secure flag is set
	        wsComponents.secure = isSecure(wsComponents);
	        //construct resouce name
	        wsComponents.resourceName = (wsComponents.path || '/') + (wsComponents.query ? '?' + wsComponents.query : '');
	        wsComponents.path = undefined;
	        wsComponents.query = undefined;
	        return wsComponents;
	    },
	    serialize: function serialize(wsComponents, options) {
	        //normalize the default port
	        if (wsComponents.port === (isSecure(wsComponents) ? 443 : 80) || wsComponents.port === "") {
	            wsComponents.port = undefined;
	        }
	        //ensure scheme matches secure flag
	        if (typeof wsComponents.secure === 'boolean') {
	            wsComponents.scheme = wsComponents.secure ? 'wss' : 'ws';
	            wsComponents.secure = undefined;
	        }
	        //reconstruct path from resource name
	        if (wsComponents.resourceName) {
	            var _wsComponents$resourc = wsComponents.resourceName.split('?'),
	                _wsComponents$resourc2 = slicedToArray(_wsComponents$resourc, 2),
	                path = _wsComponents$resourc2[0],
	                query = _wsComponents$resourc2[1];

	            wsComponents.path = path && path !== '/' ? path : undefined;
	            wsComponents.query = query;
	            wsComponents.resourceName = undefined;
	        }
	        //forbid fragment component
	        wsComponents.fragment = undefined;
	        return wsComponents;
	    }
	};

	var handler$3 = {
	    scheme: "wss",
	    domainHost: handler$2.domainHost,
	    parse: handler$2.parse,
	    serialize: handler$2.serialize
	};

	var O = {};
	//RFC 3986
	var UNRESERVED$$ = "[A-Za-z0-9\\-\\.\\_\\~" + ("\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF" ) + "]";
	var HEXDIG$$ = "[0-9A-Fa-f]"; //case-insensitive
	var PCT_ENCODED$ = subexp(subexp("%[EFef]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%[89A-Fa-f]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%" + HEXDIG$$ + HEXDIG$$)); //expanded
	//RFC 5322, except these symbols as per RFC 6068: @ : / ? # [ ] & ; =
	//const ATEXT$$ = "[A-Za-z0-9\\!\\#\\$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\_\\`\\{\\|\\}\\~]";
	//const WSP$$ = "[\\x20\\x09]";
	//const OBS_QTEXT$$ = "[\\x01-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F]";  //(%d1-8 / %d11-12 / %d14-31 / %d127)
	//const QTEXT$$ = merge("[\\x21\\x23-\\x5B\\x5D-\\x7E]", OBS_QTEXT$$);  //%d33 / %d35-91 / %d93-126 / obs-qtext
	//const VCHAR$$ = "[\\x21-\\x7E]";
	//const WSP$$ = "[\\x20\\x09]";
	//const OBS_QP$ = subexp("\\\\" + merge("[\\x00\\x0D\\x0A]", OBS_QTEXT$$));  //%d0 / CR / LF / obs-qtext
	//const FWS$ = subexp(subexp(WSP$$ + "*" + "\\x0D\\x0A") + "?" + WSP$$ + "+");
	//const QUOTED_PAIR$ = subexp(subexp("\\\\" + subexp(VCHAR$$ + "|" + WSP$$)) + "|" + OBS_QP$);
	//const QUOTED_STRING$ = subexp('\\"' + subexp(FWS$ + "?" + QCONTENT$) + "*" + FWS$ + "?" + '\\"');
	var ATEXT$$ = "[A-Za-z0-9\\!\\$\\%\\'\\*\\+\\-\\^\\_\\`\\{\\|\\}\\~]";
	var QTEXT$$ = "[\\!\\$\\%\\'\\(\\)\\*\\+\\,\\-\\.0-9\\<\\>A-Z\\x5E-\\x7E]";
	var VCHAR$$ = merge(QTEXT$$, "[\\\"\\\\]");
	var SOME_DELIMS$$ = "[\\!\\$\\'\\(\\)\\*\\+\\,\\;\\:\\@]";
	var UNRESERVED = new RegExp(UNRESERVED$$, "g");
	var PCT_ENCODED = new RegExp(PCT_ENCODED$, "g");
	var NOT_LOCAL_PART = new RegExp(merge("[^]", ATEXT$$, "[\\.]", '[\\"]', VCHAR$$), "g");
	var NOT_HFNAME = new RegExp(merge("[^]", UNRESERVED$$, SOME_DELIMS$$), "g");
	var NOT_HFVALUE = NOT_HFNAME;
	function decodeUnreserved(str) {
	    var decStr = pctDecChars(str);
	    return !decStr.match(UNRESERVED) ? str : decStr;
	}
	var handler$4 = {
	    scheme: "mailto",
	    parse: function parse$$1(components, options) {
	        var mailtoComponents = components;
	        var to = mailtoComponents.to = mailtoComponents.path ? mailtoComponents.path.split(",") : [];
	        mailtoComponents.path = undefined;
	        if (mailtoComponents.query) {
	            var unknownHeaders = false;
	            var headers = {};
	            var hfields = mailtoComponents.query.split("&");
	            for (var x = 0, xl = hfields.length; x < xl; ++x) {
	                var hfield = hfields[x].split("=");
	                switch (hfield[0]) {
	                    case "to":
	                        var toAddrs = hfield[1].split(",");
	                        for (var _x = 0, _xl = toAddrs.length; _x < _xl; ++_x) {
	                            to.push(toAddrs[_x]);
	                        }
	                        break;
	                    case "subject":
	                        mailtoComponents.subject = unescapeComponent(hfield[1], options);
	                        break;
	                    case "body":
	                        mailtoComponents.body = unescapeComponent(hfield[1], options);
	                        break;
	                    default:
	                        unknownHeaders = true;
	                        headers[unescapeComponent(hfield[0], options)] = unescapeComponent(hfield[1], options);
	                        break;
	                }
	            }
	            if (unknownHeaders) mailtoComponents.headers = headers;
	        }
	        mailtoComponents.query = undefined;
	        for (var _x2 = 0, _xl2 = to.length; _x2 < _xl2; ++_x2) {
	            var addr = to[_x2].split("@");
	            addr[0] = unescapeComponent(addr[0]);
	            if (!options.unicodeSupport) {
	                //convert Unicode IDN -> ASCII IDN
	                try {
	                    addr[1] = punycode.toASCII(unescapeComponent(addr[1], options).toLowerCase());
	                } catch (e) {
	                    mailtoComponents.error = mailtoComponents.error || "Email address's domain name can not be converted to ASCII via punycode: " + e;
	                }
	            } else {
	                addr[1] = unescapeComponent(addr[1], options).toLowerCase();
	            }
	            to[_x2] = addr.join("@");
	        }
	        return mailtoComponents;
	    },
	    serialize: function serialize$$1(mailtoComponents, options) {
	        var components = mailtoComponents;
	        var to = toArray(mailtoComponents.to);
	        if (to) {
	            for (var x = 0, xl = to.length; x < xl; ++x) {
	                var toAddr = String(to[x]);
	                var atIdx = toAddr.lastIndexOf("@");
	                var localPart = toAddr.slice(0, atIdx).replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_LOCAL_PART, pctEncChar);
	                var domain = toAddr.slice(atIdx + 1);
	                //convert IDN via punycode
	                try {
	                    domain = !options.iri ? punycode.toASCII(unescapeComponent(domain, options).toLowerCase()) : punycode.toUnicode(domain);
	                } catch (e) {
	                    components.error = components.error || "Email address's domain name can not be converted to " + (!options.iri ? "ASCII" : "Unicode") + " via punycode: " + e;
	                }
	                to[x] = localPart + "@" + domain;
	            }
	            components.path = to.join(",");
	        }
	        var headers = mailtoComponents.headers = mailtoComponents.headers || {};
	        if (mailtoComponents.subject) headers["subject"] = mailtoComponents.subject;
	        if (mailtoComponents.body) headers["body"] = mailtoComponents.body;
	        var fields = [];
	        for (var name in headers) {
	            if (headers[name] !== O[name]) {
	                fields.push(name.replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFNAME, pctEncChar) + "=" + headers[name].replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFVALUE, pctEncChar));
	            }
	        }
	        if (fields.length) {
	            components.query = fields.join("&");
	        }
	        return components;
	    }
	};

	var URN_PARSE = /^([^\:]+)\:(.*)/;
	//RFC 2141
	var handler$5 = {
	    scheme: "urn",
	    parse: function parse$$1(components, options) {
	        var matches = components.path && components.path.match(URN_PARSE);
	        var urnComponents = components;
	        if (matches) {
	            var scheme = options.scheme || urnComponents.scheme || "urn";
	            var nid = matches[1].toLowerCase();
	            var nss = matches[2];
	            var urnScheme = scheme + ":" + (options.nid || nid);
	            var schemeHandler = SCHEMES[urnScheme];
	            urnComponents.nid = nid;
	            urnComponents.nss = nss;
	            urnComponents.path = undefined;
	            if (schemeHandler) {
	                urnComponents = schemeHandler.parse(urnComponents, options);
	            }
	        } else {
	            urnComponents.error = urnComponents.error || "URN can not be parsed.";
	        }
	        return urnComponents;
	    },
	    serialize: function serialize$$1(urnComponents, options) {
	        var scheme = options.scheme || urnComponents.scheme || "urn";
	        var nid = urnComponents.nid;
	        var urnScheme = scheme + ":" + (options.nid || nid);
	        var schemeHandler = SCHEMES[urnScheme];
	        if (schemeHandler) {
	            urnComponents = schemeHandler.serialize(urnComponents, options);
	        }
	        var uriComponents = urnComponents;
	        var nss = urnComponents.nss;
	        uriComponents.path = (nid || options.nid) + ":" + nss;
	        return uriComponents;
	    }
	};

	var UUID = /^[0-9A-Fa-f]{8}(?:\-[0-9A-Fa-f]{4}){3}\-[0-9A-Fa-f]{12}$/;
	//RFC 4122
	var handler$6 = {
	    scheme: "urn:uuid",
	    parse: function parse(urnComponents, options) {
	        var uuidComponents = urnComponents;
	        uuidComponents.uuid = uuidComponents.nss;
	        uuidComponents.nss = undefined;
	        if (!options.tolerant && (!uuidComponents.uuid || !uuidComponents.uuid.match(UUID))) {
	            uuidComponents.error = uuidComponents.error || "UUID is not valid.";
	        }
	        return uuidComponents;
	    },
	    serialize: function serialize(uuidComponents, options) {
	        var urnComponents = uuidComponents;
	        //normalize UUID
	        urnComponents.nss = (uuidComponents.uuid || "").toLowerCase();
	        return urnComponents;
	    }
	};

	SCHEMES[handler.scheme] = handler;
	SCHEMES[handler$1.scheme] = handler$1;
	SCHEMES[handler$2.scheme] = handler$2;
	SCHEMES[handler$3.scheme] = handler$3;
	SCHEMES[handler$4.scheme] = handler$4;
	SCHEMES[handler$5.scheme] = handler$5;
	SCHEMES[handler$6.scheme] = handler$6;

	exports.SCHEMES = SCHEMES;
	exports.pctEncChar = pctEncChar;
	exports.pctDecChars = pctDecChars;
	exports.parse = parse;
	exports.removeDotSegments = removeDotSegments;
	exports.serialize = serialize;
	exports.resolveComponents = resolveComponents;
	exports.resolve = resolve;
	exports.normalize = normalize;
	exports.equal = equal;
	exports.escapeComponent = escapeComponent;
	exports.unescapeComponent = unescapeComponent;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));

	});

	// do not edit .js files directly - edit src/index.jst



	var fastDeepEqual = function equal(a, b) {
	  if (a === b) return true;

	  if (a && b && typeof a == 'object' && typeof b == 'object') {
	    if (a.constructor !== b.constructor) return false;

	    var length, i, keys;
	    if (Array.isArray(a)) {
	      length = a.length;
	      if (length != b.length) return false;
	      for (i = length; i-- !== 0;)
	        if (!equal(a[i], b[i])) return false;
	      return true;
	    }



	    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
	    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
	    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();

	    keys = Object.keys(a);
	    length = keys.length;
	    if (length !== Object.keys(b).length) return false;

	    for (i = length; i-- !== 0;)
	      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;

	    for (i = length; i-- !== 0;) {
	      var key = keys[i];

	      if (!equal(a[key], b[key])) return false;
	    }

	    return true;
	  }

	  // true if both NaN, false otherwise
	  return a!==a && b!==b;
	};

	// https://mathiasbynens.be/notes/javascript-encoding
	// https://github.com/bestiejs/punycode.js - punycode.ucs2.decode
	var ucs2length$1 = function ucs2length(str) {
	  var length = 0
	    , len = str.length
	    , pos = 0
	    , value;
	  while (pos < len) {
	    length++;
	    value = str.charCodeAt(pos++);
	    if (value >= 0xD800 && value <= 0xDBFF && pos < len) {
	      // high surrogate, and there is a next character
	      value = str.charCodeAt(pos);
	      if ((value & 0xFC00) == 0xDC00) pos++; // low surrogate
	    }
	  }
	  return length;
	};

	var util$2 = {
	  copy: copy$3,
	  checkDataType: checkDataType,
	  checkDataTypes: checkDataTypes,
	  coerceToTypes: coerceToTypes,
	  toHash: toHash$1,
	  getProperty: getProperty,
	  escapeQuotes: escapeQuotes,
	  equal: fastDeepEqual,
	  ucs2length: ucs2length$1,
	  varOccurences: varOccurences,
	  varReplace: varReplace,
	  schemaHasRules: schemaHasRules,
	  schemaHasRulesExcept: schemaHasRulesExcept,
	  schemaUnknownRules: schemaUnknownRules,
	  toQuotedString: toQuotedString,
	  getPathExpr: getPathExpr,
	  getPath: getPath,
	  getData: getData,
	  unescapeFragment: unescapeFragment,
	  unescapeJsonPointer: unescapeJsonPointer,
	  escapeFragment: escapeFragment,
	  escapeJsonPointer: escapeJsonPointer
	};


	function copy$3(o, to) {
	  to = to || {};
	  for (var key in o) to[key] = o[key];
	  return to;
	}


	function checkDataType(dataType, data, strictNumbers, negate) {
	  var EQUAL = negate ? ' !== ' : ' === '
	    , AND = negate ? ' || ' : ' && '
	    , OK = negate ? '!' : ''
	    , NOT = negate ? '' : '!';
	  switch (dataType) {
	    case 'null': return data + EQUAL + 'null';
	    case 'array': return OK + 'Array.isArray(' + data + ')';
	    case 'object': return '(' + OK + data + AND +
	                          'typeof ' + data + EQUAL + '"object"' + AND +
	                          NOT + 'Array.isArray(' + data + '))';
	    case 'integer': return '(typeof ' + data + EQUAL + '"number"' + AND +
	                           NOT + '(' + data + ' % 1)' +
	                           AND + data + EQUAL + data +
	                           (strictNumbers ? (AND + OK + 'isFinite(' + data + ')') : '') + ')';
	    case 'number': return '(typeof ' + data + EQUAL + '"' + dataType + '"' +
	                          (strictNumbers ? (AND + OK + 'isFinite(' + data + ')') : '') + ')';
	    default: return 'typeof ' + data + EQUAL + '"' + dataType + '"';
	  }
	}


	function checkDataTypes(dataTypes, data, strictNumbers) {
	  switch (dataTypes.length) {
	    case 1: return checkDataType(dataTypes[0], data, strictNumbers, true);
	    default:
	      var code = '';
	      var types = toHash$1(dataTypes);
	      if (types.array && types.object) {
	        code = types.null ? '(': '(!' + data + ' || ';
	        code += 'typeof ' + data + ' !== "object")';
	        delete types.null;
	        delete types.array;
	        delete types.object;
	      }
	      if (types.number) delete types.integer;
	      for (var t in types)
	        code += (code ? ' && ' : '' ) + checkDataType(t, data, strictNumbers, true);

	      return code;
	  }
	}


	var COERCE_TO_TYPES = toHash$1([ 'string', 'number', 'integer', 'boolean', 'null' ]);
	function coerceToTypes(optionCoerceTypes, dataTypes) {
	  if (Array.isArray(dataTypes)) {
	    var types = [];
	    for (var i=0; i<dataTypes.length; i++) {
	      var t = dataTypes[i];
	      if (COERCE_TO_TYPES[t]) types[types.length] = t;
	      else if (optionCoerceTypes === 'array' && t === 'array') types[types.length] = t;
	    }
	    if (types.length) return types;
	  } else if (COERCE_TO_TYPES[dataTypes]) {
	    return [dataTypes];
	  } else if (optionCoerceTypes === 'array' && dataTypes === 'array') {
	    return ['array'];
	  }
	}


	function toHash$1(arr) {
	  var hash = {};
	  for (var i=0; i<arr.length; i++) hash[arr[i]] = true;
	  return hash;
	}


	var IDENTIFIER$2 = /^[a-z$_][a-z$_0-9]*$/i;
	var SINGLE_QUOTE = /'|\\/g;
	function getProperty(key) {
	  return typeof key == 'number'
	          ? '[' + key + ']'
	          : IDENTIFIER$2.test(key)
	            ? '.' + key
	            : "['" + escapeQuotes(key) + "']";
	}


	function escapeQuotes(str) {
	  return str.replace(SINGLE_QUOTE, '\\$&')
	            .replace(/\n/g, '\\n')
	            .replace(/\r/g, '\\r')
	            .replace(/\f/g, '\\f')
	            .replace(/\t/g, '\\t');
	}


	function varOccurences(str, dataVar) {
	  dataVar += '[^0-9]';
	  var matches = str.match(new RegExp(dataVar, 'g'));
	  return matches ? matches.length : 0;
	}


	function varReplace(str, dataVar, expr) {
	  dataVar += '([^0-9])';
	  expr = expr.replace(/\$/g, '$$$$');
	  return str.replace(new RegExp(dataVar, 'g'), expr + '$1');
	}


	function schemaHasRules(schema, rules) {
	  if (typeof schema == 'boolean') return !schema;
	  for (var key in schema) if (rules[key]) return true;
	}


	function schemaHasRulesExcept(schema, rules, exceptKeyword) {
	  if (typeof schema == 'boolean') return !schema && exceptKeyword != 'not';
	  for (var key in schema) if (key != exceptKeyword && rules[key]) return true;
	}


	function schemaUnknownRules(schema, rules) {
	  if (typeof schema == 'boolean') return;
	  for (var key in schema) if (!rules[key]) return key;
	}


	function toQuotedString(str) {
	  return '\'' + escapeQuotes(str) + '\'';
	}


	function getPathExpr(currentPath, expr, jsonPointers, isNumber) {
	  var path = jsonPointers // false by default
	              ? '\'/\' + ' + expr + (isNumber ? '' : '.replace(/~/g, \'~0\').replace(/\\//g, \'~1\')')
	              : (isNumber ? '\'[\' + ' + expr + ' + \']\'' : '\'[\\\'\' + ' + expr + ' + \'\\\']\'');
	  return joinPaths(currentPath, path);
	}


	function getPath(currentPath, prop, jsonPointers) {
	  var path = jsonPointers // false by default
	              ? toQuotedString('/' + escapeJsonPointer(prop))
	              : toQuotedString(getProperty(prop));
	  return joinPaths(currentPath, path);
	}


	var JSON_POINTER$1 = /^\/(?:[^~]|~0|~1)*$/;
	var RELATIVE_JSON_POINTER$1 = /^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;
	function getData($data, lvl, paths) {
	  var up, jsonPointer, data, matches;
	  if ($data === '') return 'rootData';
	  if ($data[0] == '/') {
	    if (!JSON_POINTER$1.test($data)) throw new Error('Invalid JSON-pointer: ' + $data);
	    jsonPointer = $data;
	    data = 'rootData';
	  } else {
	    matches = $data.match(RELATIVE_JSON_POINTER$1);
	    if (!matches) throw new Error('Invalid JSON-pointer: ' + $data);
	    up = +matches[1];
	    jsonPointer = matches[2];
	    if (jsonPointer == '#') {
	      if (up >= lvl) throw new Error('Cannot access property/index ' + up + ' levels up, current level is ' + lvl);
	      return paths[lvl - up];
	    }

	    if (up > lvl) throw new Error('Cannot access data ' + up + ' levels up, current level is ' + lvl);
	    data = 'data' + ((lvl - up) || '');
	    if (!jsonPointer) return data;
	  }

	  var expr = data;
	  var segments = jsonPointer.split('/');
	  for (var i=0; i<segments.length; i++) {
	    var segment = segments[i];
	    if (segment) {
	      data += getProperty(unescapeJsonPointer(segment));
	      expr += ' && ' + data;
	    }
	  }
	  return expr;
	}


	function joinPaths (a, b) {
	  if (a == '""') return b;
	  return (a + ' + ' + b).replace(/([^\\])' \+ '/g, '$1');
	}


	function unescapeFragment(str) {
	  return unescapeJsonPointer(decodeURIComponent(str));
	}


	function escapeFragment(str) {
	  return encodeURIComponent(escapeJsonPointer(str));
	}


	function escapeJsonPointer(str) {
	  return str.replace(/~/g, '~0').replace(/\//g, '~1');
	}


	function unescapeJsonPointer(str) {
	  return str.replace(/~1/g, '/').replace(/~0/g, '~');
	}

	var schema_obj = SchemaObject;

	function SchemaObject(obj) {
	  util$2.copy(obj, this);
	}

	var jsonSchemaTraverse = createCommonjsModule(function (module) {

	var traverse = module.exports = function (schema, opts, cb) {
	  // Legacy support for v0.3.1 and earlier.
	  if (typeof opts == 'function') {
	    cb = opts;
	    opts = {};
	  }

	  cb = opts.cb || cb;
	  var pre = (typeof cb == 'function') ? cb : cb.pre || function() {};
	  var post = cb.post || function() {};

	  _traverse(opts, pre, post, schema, '', schema);
	};


	traverse.keywords = {
	  additionalItems: true,
	  items: true,
	  contains: true,
	  additionalProperties: true,
	  propertyNames: true,
	  not: true
	};

	traverse.arrayKeywords = {
	  items: true,
	  allOf: true,
	  anyOf: true,
	  oneOf: true
	};

	traverse.propsKeywords = {
	  definitions: true,
	  properties: true,
	  patternProperties: true,
	  dependencies: true
	};

	traverse.skipKeywords = {
	  default: true,
	  enum: true,
	  const: true,
	  required: true,
	  maximum: true,
	  minimum: true,
	  exclusiveMaximum: true,
	  exclusiveMinimum: true,
	  multipleOf: true,
	  maxLength: true,
	  minLength: true,
	  pattern: true,
	  format: true,
	  maxItems: true,
	  minItems: true,
	  uniqueItems: true,
	  maxProperties: true,
	  minProperties: true
	};


	function _traverse(opts, pre, post, schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
	  if (schema && typeof schema == 'object' && !Array.isArray(schema)) {
	    pre(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
	    for (var key in schema) {
	      var sch = schema[key];
	      if (Array.isArray(sch)) {
	        if (key in traverse.arrayKeywords) {
	          for (var i=0; i<sch.length; i++)
	            _traverse(opts, pre, post, sch[i], jsonPtr + '/' + key + '/' + i, rootSchema, jsonPtr, key, schema, i);
	        }
	      } else if (key in traverse.propsKeywords) {
	        if (sch && typeof sch == 'object') {
	          for (var prop in sch)
	            _traverse(opts, pre, post, sch[prop], jsonPtr + '/' + key + '/' + escapeJsonPtr(prop), rootSchema, jsonPtr, key, schema, prop);
	        }
	      } else if (key in traverse.keywords || (opts.allKeys && !(key in traverse.skipKeywords))) {
	        _traverse(opts, pre, post, sch, jsonPtr + '/' + key, rootSchema, jsonPtr, key, schema);
	      }
	    }
	    post(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
	  }
	}


	function escapeJsonPtr(str) {
	  return str.replace(/~/g, '~0').replace(/\//g, '~1');
	}
	});

	var resolve_1 = resolve$3;

	resolve$3.normalizeId = normalizeId;
	resolve$3.fullPath = getFullPath;
	resolve$3.url = resolveUrl;
	resolve$3.ids = resolveIds;
	resolve$3.inlineRef = inlineRef;
	resolve$3.schema = resolveSchema;

	/**
	 * [resolve and compile the references ($ref)]
	 * @this   Ajv
	 * @param  {Function} compile reference to schema compilation funciton (localCompile)
	 * @param  {Object} root object with information about the root schema for the current schema
	 * @param  {String} ref reference to resolve
	 * @return {Object|Function} schema object (if the schema can be inlined) or validation function
	 */
	function resolve$3(compile, root, ref) {
	  /* jshint validthis: true */
	  var refVal = this._refs[ref];
	  if (typeof refVal == 'string') {
	    if (this._refs[refVal]) refVal = this._refs[refVal];
	    else return resolve$3.call(this, compile, root, refVal);
	  }

	  refVal = refVal || this._schemas[ref];
	  if (refVal instanceof schema_obj) {
	    return inlineRef(refVal.schema, this._opts.inlineRefs)
	            ? refVal.schema
	            : refVal.validate || this._compile(refVal);
	  }

	  var res = resolveSchema.call(this, root, ref);
	  var schema, v, baseId;
	  if (res) {
	    schema = res.schema;
	    root = res.root;
	    baseId = res.baseId;
	  }

	  if (schema instanceof schema_obj) {
	    v = schema.validate || compile.call(this, schema.schema, root, undefined, baseId);
	  } else if (schema !== undefined) {
	    v = inlineRef(schema, this._opts.inlineRefs)
	        ? schema
	        : compile.call(this, schema, root, undefined, baseId);
	  }

	  return v;
	}


	/**
	 * Resolve schema, its root and baseId
	 * @this Ajv
	 * @param  {Object} root root object with properties schema, refVal, refs
	 * @param  {String} ref  reference to resolve
	 * @return {Object} object with properties schema, root, baseId
	 */
	function resolveSchema(root, ref) {
	  /* jshint validthis: true */
	  var p = uri_all.parse(ref)
	    , refPath = _getFullPath(p)
	    , baseId = getFullPath(this._getId(root.schema));
	  if (Object.keys(root.schema).length === 0 || refPath !== baseId) {
	    var id = normalizeId(refPath);
	    var refVal = this._refs[id];
	    if (typeof refVal == 'string') {
	      return resolveRecursive.call(this, root, refVal, p);
	    } else if (refVal instanceof schema_obj) {
	      if (!refVal.validate) this._compile(refVal);
	      root = refVal;
	    } else {
	      refVal = this._schemas[id];
	      if (refVal instanceof schema_obj) {
	        if (!refVal.validate) this._compile(refVal);
	        if (id == normalizeId(ref))
	          return { schema: refVal, root: root, baseId: baseId };
	        root = refVal;
	      } else {
	        return;
	      }
	    }
	    if (!root.schema) return;
	    baseId = getFullPath(this._getId(root.schema));
	  }
	  return getJsonPointer.call(this, p, baseId, root.schema, root);
	}


	/* @this Ajv */
	function resolveRecursive(root, ref, parsedRef) {
	  /* jshint validthis: true */
	  var res = resolveSchema.call(this, root, ref);
	  if (res) {
	    var schema = res.schema;
	    var baseId = res.baseId;
	    root = res.root;
	    var id = this._getId(schema);
	    if (id) baseId = resolveUrl(baseId, id);
	    return getJsonPointer.call(this, parsedRef, baseId, schema, root);
	  }
	}


	var PREVENT_SCOPE_CHANGE = util$2.toHash(['properties', 'patternProperties', 'enum', 'dependencies', 'definitions']);
	/* @this Ajv */
	function getJsonPointer(parsedRef, baseId, schema, root) {
	  /* jshint validthis: true */
	  parsedRef.fragment = parsedRef.fragment || '';
	  if (parsedRef.fragment.slice(0,1) != '/') return;
	  var parts = parsedRef.fragment.split('/');

	  for (var i = 1; i < parts.length; i++) {
	    var part = parts[i];
	    if (part) {
	      part = util$2.unescapeFragment(part);
	      schema = schema[part];
	      if (schema === undefined) break;
	      var id;
	      if (!PREVENT_SCOPE_CHANGE[part]) {
	        id = this._getId(schema);
	        if (id) baseId = resolveUrl(baseId, id);
	        if (schema.$ref) {
	          var $ref = resolveUrl(baseId, schema.$ref);
	          var res = resolveSchema.call(this, root, $ref);
	          if (res) {
	            schema = res.schema;
	            root = res.root;
	            baseId = res.baseId;
	          }
	        }
	      }
	    }
	  }
	  if (schema !== undefined && schema !== root.schema)
	    return { schema: schema, root: root, baseId: baseId };
	}


	var SIMPLE_INLINED = util$2.toHash([
	  'type', 'format', 'pattern',
	  'maxLength', 'minLength',
	  'maxProperties', 'minProperties',
	  'maxItems', 'minItems',
	  'maximum', 'minimum',
	  'uniqueItems', 'multipleOf',
	  'required', 'enum'
	]);
	function inlineRef(schema, limit) {
	  if (limit === false) return false;
	  if (limit === undefined || limit === true) return checkNoRef(schema);
	  else if (limit) return countKeys(schema) <= limit;
	}


	function checkNoRef(schema) {
	  var item;
	  if (Array.isArray(schema)) {
	    for (var i=0; i<schema.length; i++) {
	      item = schema[i];
	      if (typeof item == 'object' && !checkNoRef(item)) return false;
	    }
	  } else {
	    for (var key in schema) {
	      if (key == '$ref') return false;
	      item = schema[key];
	      if (typeof item == 'object' && !checkNoRef(item)) return false;
	    }
	  }
	  return true;
	}


	function countKeys(schema) {
	  var count = 0, item;
	  if (Array.isArray(schema)) {
	    for (var i=0; i<schema.length; i++) {
	      item = schema[i];
	      if (typeof item == 'object') count += countKeys(item);
	      if (count == Infinity) return Infinity;
	    }
	  } else {
	    for (var key in schema) {
	      if (key == '$ref') return Infinity;
	      if (SIMPLE_INLINED[key]) {
	        count++;
	      } else {
	        item = schema[key];
	        if (typeof item == 'object') count += countKeys(item) + 1;
	        if (count == Infinity) return Infinity;
	      }
	    }
	  }
	  return count;
	}


	function getFullPath(id, normalize) {
	  if (normalize !== false) id = normalizeId(id);
	  var p = uri_all.parse(id);
	  return _getFullPath(p);
	}


	function _getFullPath(p) {
	  return uri_all.serialize(p).split('#')[0] + '#';
	}


	var TRAILING_SLASH_HASH = /#\/?$/;
	function normalizeId(id) {
	  return id ? id.replace(TRAILING_SLASH_HASH, '') : '';
	}


	function resolveUrl(baseId, id) {
	  id = normalizeId(id);
	  return uri_all.resolve(baseId, id);
	}


	/* @this Ajv */
	function resolveIds(schema) {
	  var schemaId = normalizeId(this._getId(schema));
	  var baseIds = {'': schemaId};
	  var fullPaths = {'': getFullPath(schemaId, false)};
	  var localRefs = {};
	  var self = this;

	  jsonSchemaTraverse(schema, {allKeys: true}, function(sch, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
	    if (jsonPtr === '') return;
	    var id = self._getId(sch);
	    var baseId = baseIds[parentJsonPtr];
	    var fullPath = fullPaths[parentJsonPtr] + '/' + parentKeyword;
	    if (keyIndex !== undefined)
	      fullPath += '/' + (typeof keyIndex == 'number' ? keyIndex : util$2.escapeFragment(keyIndex));

	    if (typeof id == 'string') {
	      id = baseId = normalizeId(baseId ? uri_all.resolve(baseId, id) : id);

	      var refVal = self._refs[id];
	      if (typeof refVal == 'string') refVal = self._refs[refVal];
	      if (refVal && refVal.schema) {
	        if (!fastDeepEqual(sch, refVal.schema))
	          throw new Error('id "' + id + '" resolves to more than one schema');
	      } else if (id != normalizeId(fullPath)) {
	        if (id[0] == '#') {
	          if (localRefs[id] && !fastDeepEqual(sch, localRefs[id]))
	            throw new Error('id "' + id + '" resolves to more than one schema');
	          localRefs[id] = sch;
	        } else {
	          self._refs[id] = fullPath;
	        }
	      }
	    }
	    baseIds[jsonPtr] = baseId;
	    fullPaths[jsonPtr] = fullPath;
	  });

	  return localRefs;
	}

	var error_classes = {
	  Validation: errorSubclass(ValidationError$1),
	  MissingRef: errorSubclass(MissingRefError$1)
	};


	function ValidationError$1(errors) {
	  this.message = 'validation failed';
	  this.errors = errors;
	  this.ajv = this.validation = true;
	}


	MissingRefError$1.message = function (baseId, ref) {
	  return 'can\'t resolve reference ' + ref + ' from id ' + baseId;
	};


	function MissingRefError$1(baseId, ref, message) {
	  this.message = message || MissingRefError$1.message(baseId, ref);
	  this.missingRef = resolve_1.url(baseId, ref);
	  this.missingSchema = resolve_1.normalizeId(resolve_1.fullPath(this.missingRef));
	}


	function errorSubclass(Subclass) {
	  Subclass.prototype = Object.create(Error.prototype);
	  Subclass.prototype.constructor = Subclass;
	  return Subclass;
	}

	var fastJsonStableStringify = function (data, opts) {
	    if (!opts) opts = {};
	    if (typeof opts === 'function') opts = { cmp: opts };
	    var cycles = (typeof opts.cycles === 'boolean') ? opts.cycles : false;

	    var cmp = opts.cmp && (function (f) {
	        return function (node) {
	            return function (a, b) {
	                var aobj = { key: a, value: node[a] };
	                var bobj = { key: b, value: node[b] };
	                return f(aobj, bobj);
	            };
	        };
	    })(opts.cmp);

	    var seen = [];
	    return (function stringify (node) {
	        if (node && node.toJSON && typeof node.toJSON === 'function') {
	            node = node.toJSON();
	        }

	        if (node === undefined) return;
	        if (typeof node == 'number') return isFinite(node) ? '' + node : 'null';
	        if (typeof node !== 'object') return JSON.stringify(node);

	        var i, out;
	        if (Array.isArray(node)) {
	            out = '[';
	            for (i = 0; i < node.length; i++) {
	                if (i) out += ',';
	                out += stringify(node[i]) || 'null';
	            }
	            return out + ']';
	        }

	        if (node === null) return 'null';

	        if (seen.indexOf(node) !== -1) {
	            if (cycles) return JSON.stringify('__cycle__');
	            throw new TypeError('Converting circular structure to JSON');
	        }

	        var seenIndex = seen.push(node) - 1;
	        var keys = Object.keys(node).sort(cmp && cmp(node));
	        out = '';
	        for (i = 0; i < keys.length; i++) {
	            var key = keys[i];
	            var value = stringify(node[key]);

	            if (!value) continue;
	            if (out) out += ',';
	            out += JSON.stringify(key) + ':' + value;
	        }
	        seen.splice(seenIndex, 1);
	        return '{' + out + '}';
	    })(data);
	};

	var validate$3 = function generate_validate(it, $keyword, $ruleType) {
	  var out = '';
	  var $async = it.schema.$async === true,
	    $refKeywords = it.util.schemaHasRulesExcept(it.schema, it.RULES.all, '$ref'),
	    $id = it.self._getId(it.schema);
	  if (it.opts.strictKeywords) {
	    var $unknownKwd = it.util.schemaUnknownRules(it.schema, it.RULES.keywords);
	    if ($unknownKwd) {
	      var $keywordsMsg = 'unknown keyword: ' + $unknownKwd;
	      if (it.opts.strictKeywords === 'log') it.logger.warn($keywordsMsg);
	      else throw new Error($keywordsMsg);
	    }
	  }
	  if (it.isTop) {
	    out += ' var validate = ';
	    if ($async) {
	      it.async = true;
	      out += 'async ';
	    }
	    out += 'function(data, dataPath, parentData, parentDataProperty, rootData) { \'use strict\'; ';
	    if ($id && (it.opts.sourceCode || it.opts.processCode)) {
	      out += ' ' + ('/\*# sourceURL=' + $id + ' */') + ' ';
	    }
	  }
	  if (typeof it.schema == 'boolean' || !($refKeywords || it.schema.$ref)) {
	    var $keyword = 'false schema';
	    var $lvl = it.level;
	    var $dataLvl = it.dataLevel;
	    var $schema = it.schema[$keyword];
	    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
	    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
	    var $breakOnError = !it.opts.allErrors;
	    var $errorKeyword;
	    var $data = 'data' + ($dataLvl || '');
	    var $valid = 'valid' + $lvl;
	    if (it.schema === false) {
	      if (it.isTop) {
	        $breakOnError = true;
	      } else {
	        out += ' var ' + ($valid) + ' = false; ';
	      }
	      var $$outStack = $$outStack || [];
	      $$outStack.push(out);
	      out = ''; /* istanbul ignore else */
	      if (it.createErrors !== false) {
	        out += ' { keyword: \'' + ($errorKeyword || 'false schema') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';
	        if (it.opts.messages !== false) {
	          out += ' , message: \'boolean schema is false\' ';
	        }
	        if (it.opts.verbose) {
	          out += ' , schema: false , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
	        }
	        out += ' } ';
	      } else {
	        out += ' {} ';
	      }
	      var __err = out;
	      out = $$outStack.pop();
	      if (!it.compositeRule && $breakOnError) {
	        /* istanbul ignore if */
	        if (it.async) {
	          out += ' throw new ValidationError([' + (__err) + ']); ';
	        } else {
	          out += ' validate.errors = [' + (__err) + ']; return false; ';
	        }
	      } else {
	        out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	      }
	    } else {
	      if (it.isTop) {
	        if ($async) {
	          out += ' return data; ';
	        } else {
	          out += ' validate.errors = null; return true; ';
	        }
	      } else {
	        out += ' var ' + ($valid) + ' = true; ';
	      }
	    }
	    if (it.isTop) {
	      out += ' }; return validate; ';
	    }
	    return out;
	  }
	  if (it.isTop) {
	    var $top = it.isTop,
	      $lvl = it.level = 0,
	      $dataLvl = it.dataLevel = 0,
	      $data = 'data';
	    it.rootId = it.resolve.fullPath(it.self._getId(it.root.schema));
	    it.baseId = it.baseId || it.rootId;
	    delete it.isTop;
	    it.dataPathArr = [""];
	    if (it.schema.default !== undefined && it.opts.useDefaults && it.opts.strictDefaults) {
	      var $defaultMsg = 'default is ignored in the schema root';
	      if (it.opts.strictDefaults === 'log') it.logger.warn($defaultMsg);
	      else throw new Error($defaultMsg);
	    }
	    out += ' var vErrors = null; ';
	    out += ' var errors = 0;     ';
	    out += ' if (rootData === undefined) rootData = data; ';
	  } else {
	    var $lvl = it.level,
	      $dataLvl = it.dataLevel,
	      $data = 'data' + ($dataLvl || '');
	    if ($id) it.baseId = it.resolve.url(it.baseId, $id);
	    if ($async && !it.async) throw new Error('async schema in sync schema');
	    out += ' var errs_' + ($lvl) + ' = errors;';
	  }
	  var $valid = 'valid' + $lvl,
	    $breakOnError = !it.opts.allErrors,
	    $closingBraces1 = '',
	    $closingBraces2 = '';
	  var $errorKeyword;
	  var $typeSchema = it.schema.type,
	    $typeIsArray = Array.isArray($typeSchema);
	  if ($typeSchema && it.opts.nullable && it.schema.nullable === true) {
	    if ($typeIsArray) {
	      if ($typeSchema.indexOf('null') == -1) $typeSchema = $typeSchema.concat('null');
	    } else if ($typeSchema != 'null') {
	      $typeSchema = [$typeSchema, 'null'];
	      $typeIsArray = true;
	    }
	  }
	  if ($typeIsArray && $typeSchema.length == 1) {
	    $typeSchema = $typeSchema[0];
	    $typeIsArray = false;
	  }
	  if (it.schema.$ref && $refKeywords) {
	    if (it.opts.extendRefs == 'fail') {
	      throw new Error('$ref: validation keywords used in schema at path "' + it.errSchemaPath + '" (see option extendRefs)');
	    } else if (it.opts.extendRefs !== true) {
	      $refKeywords = false;
	      it.logger.warn('$ref: keywords ignored in schema at path "' + it.errSchemaPath + '"');
	    }
	  }
	  if (it.schema.$comment && it.opts.$comment) {
	    out += ' ' + (it.RULES.all.$comment.code(it, '$comment'));
	  }
	  if ($typeSchema) {
	    if (it.opts.coerceTypes) {
	      var $coerceToTypes = it.util.coerceToTypes(it.opts.coerceTypes, $typeSchema);
	    }
	    var $rulesGroup = it.RULES.types[$typeSchema];
	    if ($coerceToTypes || $typeIsArray || $rulesGroup === true || ($rulesGroup && !$shouldUseGroup($rulesGroup))) {
	      var $schemaPath = it.schemaPath + '.type',
	        $errSchemaPath = it.errSchemaPath + '/type';
	      var $schemaPath = it.schemaPath + '.type',
	        $errSchemaPath = it.errSchemaPath + '/type',
	        $method = $typeIsArray ? 'checkDataTypes' : 'checkDataType';
	      out += ' if (' + (it.util[$method]($typeSchema, $data, it.opts.strictNumbers, true)) + ') { ';
	      if ($coerceToTypes) {
	        var $dataType = 'dataType' + $lvl,
	          $coerced = 'coerced' + $lvl;
	        out += ' var ' + ($dataType) + ' = typeof ' + ($data) + '; var ' + ($coerced) + ' = undefined; ';
	        if (it.opts.coerceTypes == 'array') {
	          out += ' if (' + ($dataType) + ' == \'object\' && Array.isArray(' + ($data) + ') && ' + ($data) + '.length == 1) { ' + ($data) + ' = ' + ($data) + '[0]; ' + ($dataType) + ' = typeof ' + ($data) + '; if (' + (it.util.checkDataType(it.schema.type, $data, it.opts.strictNumbers)) + ') ' + ($coerced) + ' = ' + ($data) + '; } ';
	        }
	        out += ' if (' + ($coerced) + ' !== undefined) ; ';
	        var arr1 = $coerceToTypes;
	        if (arr1) {
	          var $type, $i = -1,
	            l1 = arr1.length - 1;
	          while ($i < l1) {
	            $type = arr1[$i += 1];
	            if ($type == 'string') {
	              out += ' else if (' + ($dataType) + ' == \'number\' || ' + ($dataType) + ' == \'boolean\') ' + ($coerced) + ' = \'\' + ' + ($data) + '; else if (' + ($data) + ' === null) ' + ($coerced) + ' = \'\'; ';
	            } else if ($type == 'number' || $type == 'integer') {
	              out += ' else if (' + ($dataType) + ' == \'boolean\' || ' + ($data) + ' === null || (' + ($dataType) + ' == \'string\' && ' + ($data) + ' && ' + ($data) + ' == +' + ($data) + ' ';
	              if ($type == 'integer') {
	                out += ' && !(' + ($data) + ' % 1)';
	              }
	              out += ')) ' + ($coerced) + ' = +' + ($data) + '; ';
	            } else if ($type == 'boolean') {
	              out += ' else if (' + ($data) + ' === \'false\' || ' + ($data) + ' === 0 || ' + ($data) + ' === null) ' + ($coerced) + ' = false; else if (' + ($data) + ' === \'true\' || ' + ($data) + ' === 1) ' + ($coerced) + ' = true; ';
	            } else if ($type == 'null') {
	              out += ' else if (' + ($data) + ' === \'\' || ' + ($data) + ' === 0 || ' + ($data) + ' === false) ' + ($coerced) + ' = null; ';
	            } else if (it.opts.coerceTypes == 'array' && $type == 'array') {
	              out += ' else if (' + ($dataType) + ' == \'string\' || ' + ($dataType) + ' == \'number\' || ' + ($dataType) + ' == \'boolean\' || ' + ($data) + ' == null) ' + ($coerced) + ' = [' + ($data) + ']; ';
	            }
	          }
	        }
	        out += ' else {   ';
	        var $$outStack = $$outStack || [];
	        $$outStack.push(out);
	        out = ''; /* istanbul ignore else */
	        if (it.createErrors !== false) {
	          out += ' { keyword: \'' + ($errorKeyword || 'type') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { type: \'';
	          if ($typeIsArray) {
	            out += '' + ($typeSchema.join(","));
	          } else {
	            out += '' + ($typeSchema);
	          }
	          out += '\' } ';
	          if (it.opts.messages !== false) {
	            out += ' , message: \'should be ';
	            if ($typeIsArray) {
	              out += '' + ($typeSchema.join(","));
	            } else {
	              out += '' + ($typeSchema);
	            }
	            out += '\' ';
	          }
	          if (it.opts.verbose) {
	            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
	          }
	          out += ' } ';
	        } else {
	          out += ' {} ';
	        }
	        var __err = out;
	        out = $$outStack.pop();
	        if (!it.compositeRule && $breakOnError) {
	          /* istanbul ignore if */
	          if (it.async) {
	            out += ' throw new ValidationError([' + (__err) + ']); ';
	          } else {
	            out += ' validate.errors = [' + (__err) + ']; return false; ';
	          }
	        } else {
	          out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	        }
	        out += ' } if (' + ($coerced) + ' !== undefined) {  ';
	        var $parentData = $dataLvl ? 'data' + (($dataLvl - 1) || '') : 'parentData',
	          $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';
	        out += ' ' + ($data) + ' = ' + ($coerced) + '; ';
	        if (!$dataLvl) {
	          out += 'if (' + ($parentData) + ' !== undefined)';
	        }
	        out += ' ' + ($parentData) + '[' + ($parentDataProperty) + '] = ' + ($coerced) + '; } ';
	      } else {
	        var $$outStack = $$outStack || [];
	        $$outStack.push(out);
	        out = ''; /* istanbul ignore else */
	        if (it.createErrors !== false) {
	          out += ' { keyword: \'' + ($errorKeyword || 'type') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { type: \'';
	          if ($typeIsArray) {
	            out += '' + ($typeSchema.join(","));
	          } else {
	            out += '' + ($typeSchema);
	          }
	          out += '\' } ';
	          if (it.opts.messages !== false) {
	            out += ' , message: \'should be ';
	            if ($typeIsArray) {
	              out += '' + ($typeSchema.join(","));
	            } else {
	              out += '' + ($typeSchema);
	            }
	            out += '\' ';
	          }
	          if (it.opts.verbose) {
	            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
	          }
	          out += ' } ';
	        } else {
	          out += ' {} ';
	        }
	        var __err = out;
	        out = $$outStack.pop();
	        if (!it.compositeRule && $breakOnError) {
	          /* istanbul ignore if */
	          if (it.async) {
	            out += ' throw new ValidationError([' + (__err) + ']); ';
	          } else {
	            out += ' validate.errors = [' + (__err) + ']; return false; ';
	          }
	        } else {
	          out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	        }
	      }
	      out += ' } ';
	    }
	  }
	  if (it.schema.$ref && !$refKeywords) {
	    out += ' ' + (it.RULES.all.$ref.code(it, '$ref')) + ' ';
	    if ($breakOnError) {
	      out += ' } if (errors === ';
	      if ($top) {
	        out += '0';
	      } else {
	        out += 'errs_' + ($lvl);
	      }
	      out += ') { ';
	      $closingBraces2 += '}';
	    }
	  } else {
	    var arr2 = it.RULES;
	    if (arr2) {
	      var $rulesGroup, i2 = -1,
	        l2 = arr2.length - 1;
	      while (i2 < l2) {
	        $rulesGroup = arr2[i2 += 1];
	        if ($shouldUseGroup($rulesGroup)) {
	          if ($rulesGroup.type) {
	            out += ' if (' + (it.util.checkDataType($rulesGroup.type, $data, it.opts.strictNumbers)) + ') { ';
	          }
	          if (it.opts.useDefaults) {
	            if ($rulesGroup.type == 'object' && it.schema.properties) {
	              var $schema = it.schema.properties,
	                $schemaKeys = Object.keys($schema);
	              var arr3 = $schemaKeys;
	              if (arr3) {
	                var $propertyKey, i3 = -1,
	                  l3 = arr3.length - 1;
	                while (i3 < l3) {
	                  $propertyKey = arr3[i3 += 1];
	                  var $sch = $schema[$propertyKey];
	                  if ($sch.default !== undefined) {
	                    var $passData = $data + it.util.getProperty($propertyKey);
	                    if (it.compositeRule) {
	                      if (it.opts.strictDefaults) {
	                        var $defaultMsg = 'default is ignored for: ' + $passData;
	                        if (it.opts.strictDefaults === 'log') it.logger.warn($defaultMsg);
	                        else throw new Error($defaultMsg);
	                      }
	                    } else {
	                      out += ' if (' + ($passData) + ' === undefined ';
	                      if (it.opts.useDefaults == 'empty') {
	                        out += ' || ' + ($passData) + ' === null || ' + ($passData) + ' === \'\' ';
	                      }
	                      out += ' ) ' + ($passData) + ' = ';
	                      if (it.opts.useDefaults == 'shared') {
	                        out += ' ' + (it.useDefault($sch.default)) + ' ';
	                      } else {
	                        out += ' ' + (JSON.stringify($sch.default)) + ' ';
	                      }
	                      out += '; ';
	                    }
	                  }
	                }
	              }
	            } else if ($rulesGroup.type == 'array' && Array.isArray(it.schema.items)) {
	              var arr4 = it.schema.items;
	              if (arr4) {
	                var $sch, $i = -1,
	                  l4 = arr4.length - 1;
	                while ($i < l4) {
	                  $sch = arr4[$i += 1];
	                  if ($sch.default !== undefined) {
	                    var $passData = $data + '[' + $i + ']';
	                    if (it.compositeRule) {
	                      if (it.opts.strictDefaults) {
	                        var $defaultMsg = 'default is ignored for: ' + $passData;
	                        if (it.opts.strictDefaults === 'log') it.logger.warn($defaultMsg);
	                        else throw new Error($defaultMsg);
	                      }
	                    } else {
	                      out += ' if (' + ($passData) + ' === undefined ';
	                      if (it.opts.useDefaults == 'empty') {
	                        out += ' || ' + ($passData) + ' === null || ' + ($passData) + ' === \'\' ';
	                      }
	                      out += ' ) ' + ($passData) + ' = ';
	                      if (it.opts.useDefaults == 'shared') {
	                        out += ' ' + (it.useDefault($sch.default)) + ' ';
	                      } else {
	                        out += ' ' + (JSON.stringify($sch.default)) + ' ';
	                      }
	                      out += '; ';
	                    }
	                  }
	                }
	              }
	            }
	          }
	          var arr5 = $rulesGroup.rules;
	          if (arr5) {
	            var $rule, i5 = -1,
	              l5 = arr5.length - 1;
	            while (i5 < l5) {
	              $rule = arr5[i5 += 1];
	              if ($shouldUseRule($rule)) {
	                var $code = $rule.code(it, $rule.keyword, $rulesGroup.type);
	                if ($code) {
	                  out += ' ' + ($code) + ' ';
	                  if ($breakOnError) {
	                    $closingBraces1 += '}';
	                  }
	                }
	              }
	            }
	          }
	          if ($breakOnError) {
	            out += ' ' + ($closingBraces1) + ' ';
	            $closingBraces1 = '';
	          }
	          if ($rulesGroup.type) {
	            out += ' } ';
	            if ($typeSchema && $typeSchema === $rulesGroup.type && !$coerceToTypes) {
	              out += ' else { ';
	              var $schemaPath = it.schemaPath + '.type',
	                $errSchemaPath = it.errSchemaPath + '/type';
	              var $$outStack = $$outStack || [];
	              $$outStack.push(out);
	              out = ''; /* istanbul ignore else */
	              if (it.createErrors !== false) {
	                out += ' { keyword: \'' + ($errorKeyword || 'type') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { type: \'';
	                if ($typeIsArray) {
	                  out += '' + ($typeSchema.join(","));
	                } else {
	                  out += '' + ($typeSchema);
	                }
	                out += '\' } ';
	                if (it.opts.messages !== false) {
	                  out += ' , message: \'should be ';
	                  if ($typeIsArray) {
	                    out += '' + ($typeSchema.join(","));
	                  } else {
	                    out += '' + ($typeSchema);
	                  }
	                  out += '\' ';
	                }
	                if (it.opts.verbose) {
	                  out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
	                }
	                out += ' } ';
	              } else {
	                out += ' {} ';
	              }
	              var __err = out;
	              out = $$outStack.pop();
	              if (!it.compositeRule && $breakOnError) {
	                /* istanbul ignore if */
	                if (it.async) {
	                  out += ' throw new ValidationError([' + (__err) + ']); ';
	                } else {
	                  out += ' validate.errors = [' + (__err) + ']; return false; ';
	                }
	              } else {
	                out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	              }
	              out += ' } ';
	            }
	          }
	          if ($breakOnError) {
	            out += ' if (errors === ';
	            if ($top) {
	              out += '0';
	            } else {
	              out += 'errs_' + ($lvl);
	            }
	            out += ') { ';
	            $closingBraces2 += '}';
	          }
	        }
	      }
	    }
	  }
	  if ($breakOnError) {
	    out += ' ' + ($closingBraces2) + ' ';
	  }
	  if ($top) {
	    if ($async) {
	      out += ' if (errors === 0) return data;           ';
	      out += ' else throw new ValidationError(vErrors); ';
	    } else {
	      out += ' validate.errors = vErrors; ';
	      out += ' return errors === 0;       ';
	    }
	    out += ' }; return validate;';
	  } else {
	    out += ' var ' + ($valid) + ' = errors === errs_' + ($lvl) + ';';
	  }

	  function $shouldUseGroup($rulesGroup) {
	    var rules = $rulesGroup.rules;
	    for (var i = 0; i < rules.length; i++)
	      if ($shouldUseRule(rules[i])) return true;
	  }

	  function $shouldUseRule($rule) {
	    return it.schema[$rule.keyword] !== undefined || ($rule.implements && $ruleImplementsSomeKeyword($rule));
	  }

	  function $ruleImplementsSomeKeyword($rule) {
	    var impl = $rule.implements;
	    for (var i = 0; i < impl.length; i++)
	      if (it.schema[impl[i]] !== undefined) return true;
	  }
	  return out;
	};

	/**
	 * Functions below are used inside compiled validations function
	 */

	var ucs2length = util$2.ucs2length;


	// this error is thrown by async schemas to return validation errors via exception
	var ValidationError = error_classes.Validation;

	var compile_1 = compile$1;


	/**
	 * Compiles schema to validation function
	 * @this   Ajv
	 * @param  {Object} schema schema object
	 * @param  {Object} root object with information about the root schema for this schema
	 * @param  {Object} localRefs the hash of local references inside the schema (created by resolve.id), used for inline resolution
	 * @param  {String} baseId base ID for IDs in the schema
	 * @return {Function} validation function
	 */
	function compile$1(schema, root, localRefs, baseId) {
	  /* jshint validthis: true, evil: true */
	  /* eslint no-shadow: 0 */
	  var self = this
	    , opts = this._opts
	    , refVal = [ undefined ]
	    , refs = {}
	    , patterns = []
	    , patternsHash = {}
	    , defaults = []
	    , defaultsHash = {}
	    , customRules = [];

	  root = root || { schema: schema, refVal: refVal, refs: refs };

	  var c = checkCompiling.call(this, schema, root, baseId);
	  var compilation = this._compilations[c.index];
	  if (c.compiling) return (compilation.callValidate = callValidate);

	  var formats = this._formats;
	  var RULES = this.RULES;

	  try {
	    var v = localCompile(schema, root, localRefs, baseId);
	    compilation.validate = v;
	    var cv = compilation.callValidate;
	    if (cv) {
	      cv.schema = v.schema;
	      cv.errors = null;
	      cv.refs = v.refs;
	      cv.refVal = v.refVal;
	      cv.root = v.root;
	      cv.$async = v.$async;
	      if (opts.sourceCode) cv.source = v.source;
	    }
	    return v;
	  } finally {
	    endCompiling.call(this, schema, root, baseId);
	  }

	  /* @this   {*} - custom context, see passContext option */
	  function callValidate() {
	    /* jshint validthis: true */
	    var validate = compilation.validate;
	    var result = validate.apply(this, arguments);
	    callValidate.errors = validate.errors;
	    return result;
	  }

	  function localCompile(_schema, _root, localRefs, baseId) {
	    var isRoot = !_root || (_root && _root.schema == _schema);
	    if (_root.schema != root.schema)
	      return compile$1.call(self, _schema, _root, localRefs, baseId);

	    var $async = _schema.$async === true;

	    var sourceCode = validate$3({
	      isTop: true,
	      schema: _schema,
	      isRoot: isRoot,
	      baseId: baseId,
	      root: _root,
	      schemaPath: '',
	      errSchemaPath: '#',
	      errorPath: '""',
	      MissingRefError: error_classes.MissingRef,
	      RULES: RULES,
	      validate: validate$3,
	      util: util$2,
	      resolve: resolve_1,
	      resolveRef: resolveRef,
	      usePattern: usePattern,
	      useDefault: useDefault,
	      useCustomRule: useCustomRule,
	      opts: opts,
	      formats: formats,
	      logger: self.logger,
	      self: self
	    });

	    sourceCode = vars(refVal, refValCode) + vars(patterns, patternCode)
	                   + vars(defaults, defaultCode) + vars(customRules, customRuleCode)
	                   + sourceCode;

	    if (opts.processCode) sourceCode = opts.processCode(sourceCode, _schema);
	    // console.log('\n\n\n *** \n', JSON.stringify(sourceCode));
	    var validate;
	    try {
	      var makeValidate = new Function(
	        'self',
	        'RULES',
	        'formats',
	        'root',
	        'refVal',
	        'defaults',
	        'customRules',
	        'equal',
	        'ucs2length',
	        'ValidationError',
	        sourceCode
	      );

	      validate = makeValidate(
	        self,
	        RULES,
	        formats,
	        root,
	        refVal,
	        defaults,
	        customRules,
	        fastDeepEqual,
	        ucs2length,
	        ValidationError
	      );

	      refVal[0] = validate;
	    } catch(e) {
	      self.logger.error('Error compiling schema, function code:', sourceCode);
	      throw e;
	    }

	    validate.schema = _schema;
	    validate.errors = null;
	    validate.refs = refs;
	    validate.refVal = refVal;
	    validate.root = isRoot ? validate : _root;
	    if ($async) validate.$async = true;
	    if (opts.sourceCode === true) {
	      validate.source = {
	        code: sourceCode,
	        patterns: patterns,
	        defaults: defaults
	      };
	    }

	    return validate;
	  }

	  function resolveRef(baseId, ref, isRoot) {
	    ref = resolve_1.url(baseId, ref);
	    var refIndex = refs[ref];
	    var _refVal, refCode;
	    if (refIndex !== undefined) {
	      _refVal = refVal[refIndex];
	      refCode = 'refVal[' + refIndex + ']';
	      return resolvedRef(_refVal, refCode);
	    }
	    if (!isRoot && root.refs) {
	      var rootRefId = root.refs[ref];
	      if (rootRefId !== undefined) {
	        _refVal = root.refVal[rootRefId];
	        refCode = addLocalRef(ref, _refVal);
	        return resolvedRef(_refVal, refCode);
	      }
	    }

	    refCode = addLocalRef(ref);
	    var v = resolve_1.call(self, localCompile, root, ref);
	    if (v === undefined) {
	      var localSchema = localRefs && localRefs[ref];
	      if (localSchema) {
	        v = resolve_1.inlineRef(localSchema, opts.inlineRefs)
	            ? localSchema
	            : compile$1.call(self, localSchema, root, localRefs, baseId);
	      }
	    }

	    if (v === undefined) {
	      removeLocalRef(ref);
	    } else {
	      replaceLocalRef(ref, v);
	      return resolvedRef(v, refCode);
	    }
	  }

	  function addLocalRef(ref, v) {
	    var refId = refVal.length;
	    refVal[refId] = v;
	    refs[ref] = refId;
	    return 'refVal' + refId;
	  }

	  function removeLocalRef(ref) {
	    delete refs[ref];
	  }

	  function replaceLocalRef(ref, v) {
	    var refId = refs[ref];
	    refVal[refId] = v;
	  }

	  function resolvedRef(refVal, code) {
	    return typeof refVal == 'object' || typeof refVal == 'boolean'
	            ? { code: code, schema: refVal, inline: true }
	            : { code: code, $async: refVal && !!refVal.$async };
	  }

	  function usePattern(regexStr) {
	    var index = patternsHash[regexStr];
	    if (index === undefined) {
	      index = patternsHash[regexStr] = patterns.length;
	      patterns[index] = regexStr;
	    }
	    return 'pattern' + index;
	  }

	  function useDefault(value) {
	    switch (typeof value) {
	      case 'boolean':
	      case 'number':
	        return '' + value;
	      case 'string':
	        return util$2.toQuotedString(value);
	      case 'object':
	        if (value === null) return 'null';
	        var valueStr = fastJsonStableStringify(value);
	        var index = defaultsHash[valueStr];
	        if (index === undefined) {
	          index = defaultsHash[valueStr] = defaults.length;
	          defaults[index] = value;
	        }
	        return 'default' + index;
	    }
	  }

	  function useCustomRule(rule, schema, parentSchema, it) {
	    if (self._opts.validateSchema !== false) {
	      var deps = rule.definition.dependencies;
	      if (deps && !deps.every(function(keyword) {
	        return Object.prototype.hasOwnProperty.call(parentSchema, keyword);
	      }))
	        throw new Error('parent schema must have all required keywords: ' + deps.join(','));

	      var validateSchema = rule.definition.validateSchema;
	      if (validateSchema) {
	        var valid = validateSchema(schema);
	        if (!valid) {
	          var message = 'keyword schema is invalid: ' + self.errorsText(validateSchema.errors);
	          if (self._opts.validateSchema == 'log') self.logger.error(message);
	          else throw new Error(message);
	        }
	      }
	    }

	    var compile = rule.definition.compile
	      , inline = rule.definition.inline
	      , macro = rule.definition.macro;

	    var validate;
	    if (compile) {
	      validate = compile.call(self, schema, parentSchema, it);
	    } else if (macro) {
	      validate = macro.call(self, schema, parentSchema, it);
	      if (opts.validateSchema !== false) self.validateSchema(validate, true);
	    } else if (inline) {
	      validate = inline.call(self, it, rule.keyword, schema, parentSchema);
	    } else {
	      validate = rule.definition.validate;
	      if (!validate) return;
	    }

	    if (validate === undefined)
	      throw new Error('custom keyword "' + rule.keyword + '"failed to compile');

	    var index = customRules.length;
	    customRules[index] = validate;

	    return {
	      code: 'customRule' + index,
	      validate: validate
	    };
	  }
	}


	/**
	 * Checks if the schema is currently compiled
	 * @this   Ajv
	 * @param  {Object} schema schema to compile
	 * @param  {Object} root root object
	 * @param  {String} baseId base schema ID
	 * @return {Object} object with properties "index" (compilation index) and "compiling" (boolean)
	 */
	function checkCompiling(schema, root, baseId) {
	  /* jshint validthis: true */
	  var index = compIndex.call(this, schema, root, baseId);
	  if (index >= 0) return { index: index, compiling: true };
	  index = this._compilations.length;
	  this._compilations[index] = {
	    schema: schema,
	    root: root,
	    baseId: baseId
	  };
	  return { index: index, compiling: false };
	}


	/**
	 * Removes the schema from the currently compiled list
	 * @this   Ajv
	 * @param  {Object} schema schema to compile
	 * @param  {Object} root root object
	 * @param  {String} baseId base schema ID
	 */
	function endCompiling(schema, root, baseId) {
	  /* jshint validthis: true */
	  var i = compIndex.call(this, schema, root, baseId);
	  if (i >= 0) this._compilations.splice(i, 1);
	}


	/**
	 * Index of schema compilation in the currently compiled list
	 * @this   Ajv
	 * @param  {Object} schema schema to compile
	 * @param  {Object} root root object
	 * @param  {String} baseId base schema ID
	 * @return {Integer} compilation index
	 */
	function compIndex(schema, root, baseId) {
	  /* jshint validthis: true */
	  for (var i=0; i<this._compilations.length; i++) {
	    var c = this._compilations[i];
	    if (c.schema == schema && c.root == root && c.baseId == baseId) return i;
	  }
	  return -1;
	}


	function patternCode(i, patterns) {
	  return 'var pattern' + i + ' = new RegExp(' + util$2.toQuotedString(patterns[i]) + ');';
	}


	function defaultCode(i) {
	  return 'var default' + i + ' = defaults[' + i + '];';
	}


	function refValCode(i, refVal) {
	  return refVal[i] === undefined ? '' : 'var refVal' + i + ' = refVal[' + i + '];';
	}


	function customRuleCode(i) {
	  return 'var customRule' + i + ' = customRules[' + i + '];';
	}


	function vars(arr, statement) {
	  if (!arr.length) return '';
	  var code = '';
	  for (var i=0; i<arr.length; i++)
	    code += statement(i, arr);
	  return code;
	}

	var cache$1 = createCommonjsModule(function (module) {


	var Cache = module.exports = function Cache() {
	  this._cache = {};
	};


	Cache.prototype.put = function Cache_put(key, value) {
	  this._cache[key] = value;
	};


	Cache.prototype.get = function Cache_get(key) {
	  return this._cache[key];
	};


	Cache.prototype.del = function Cache_del(key) {
	  delete this._cache[key];
	};


	Cache.prototype.clear = function Cache_clear() {
	  this._cache = {};
	};
	});

	var DATE = /^(\d\d\d\d)-(\d\d)-(\d\d)$/;
	var DAYS = [0,31,28,31,30,31,30,31,31,30,31,30,31];
	var TIME$1 = /^(\d\d):(\d\d):(\d\d)(\.\d+)?(z|[+-]\d\d(?::?\d\d)?)?$/i;
	var HOSTNAME = /^(?=.{1,253}\.?$)[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*\.?$/i;
	var URI = /^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\?(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
	var URIREF = /^(?:[a-z][a-z0-9+\-.]*:)?(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'"()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\?(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
	// uri-template: https://tools.ietf.org/html/rfc6570
	var URITEMPLATE = /^(?:(?:[^\x00-\x20"'<>%\\^`{|}]|%[0-9a-f]{2})|\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?)*\})*$/i;
	// For the source: https://gist.github.com/dperini/729294
	// For test cases: https://mathiasbynens.be/demo/url-regex
	// @todo Delete current URL in favour of the commented out URL rule when this issue is fixed https://github.com/eslint/eslint/issues/7983.
	// var URL = /^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u{00a1}-\u{ffff}0-9]+-)*[a-z\u{00a1}-\u{ffff}0-9]+)(?:\.(?:[a-z\u{00a1}-\u{ffff}0-9]+-)*[a-z\u{00a1}-\u{ffff}0-9]+)*(?:\.(?:[a-z\u{00a1}-\u{ffff}]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/iu;
	var URL$1 = /^(?:(?:http[s\u017F]?|ftp):\/\/)(?:(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+(?::(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?@)?(?:(?!10(?:\.[0-9]{1,3}){3})(?!127(?:\.[0-9]{1,3}){3})(?!169\.254(?:\.[0-9]{1,3}){2})(?!192\.168(?:\.[0-9]{1,3}){2})(?!172\.(?:1[6-9]|2[0-9]|3[01])(?:\.[0-9]{1,3}){2})(?:[1-9][0-9]?|1[0-9][0-9]|2[01][0-9]|22[0-3])(?:\.(?:1?[0-9]{1,2}|2[0-4][0-9]|25[0-5])){2}(?:\.(?:[1-9][0-9]?|1[0-9][0-9]|2[0-4][0-9]|25[0-4]))|(?:(?:(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-)*(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)(?:\.(?:(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-)*(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)*(?:\.(?:(?:[a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]){2,})))(?::[0-9]{2,5})?(?:\/(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?$/i;
	var UUID = /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i;
	var JSON_POINTER = /^(?:\/(?:[^~/]|~0|~1)*)*$/;
	var JSON_POINTER_URI_FRAGMENT = /^#(?:\/(?:[a-z0-9_\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i;
	var RELATIVE_JSON_POINTER = /^(?:0|[1-9][0-9]*)(?:#|(?:\/(?:[^~/]|~0|~1)*)*)$/;


	var formats_1 = formats$1;

	function formats$1(mode) {
	  mode = mode == 'full' ? 'full' : 'fast';
	  return util$2.copy(formats$1[mode]);
	}


	formats$1.fast = {
	  // date: http://tools.ietf.org/html/rfc3339#section-5.6
	  date: /^\d\d\d\d-[0-1]\d-[0-3]\d$/,
	  // date-time: http://tools.ietf.org/html/rfc3339#section-5.6
	  time: /^(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)?$/i,
	  'date-time': /^\d\d\d\d-[0-1]\d-[0-3]\d[t\s](?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)$/i,
	  // uri: https://github.com/mafintosh/is-my-json-valid/blob/master/formats.js
	  uri: /^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/)?[^\s]*$/i,
	  'uri-reference': /^(?:(?:[a-z][a-z0-9+\-.]*:)?\/?\/)?(?:[^\\\s#][^\s#]*)?(?:#[^\\\s]*)?$/i,
	  'uri-template': URITEMPLATE,
	  url: URL$1,
	  // email (sources from jsen validator):
	  // http://stackoverflow.com/questions/201323/using-a-regular-expression-to-validate-an-email-address#answer-8829363
	  // http://www.w3.org/TR/html5/forms.html#valid-e-mail-address (search for 'willful violation')
	  email: /^[a-z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i,
	  hostname: HOSTNAME,
	  // optimized https://www.safaribooksonline.com/library/view/regular-expressions-cookbook/9780596802837/ch07s16.html
	  ipv4: /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
	  // optimized http://stackoverflow.com/questions/53497/regular-expression-that-matches-valid-ipv6-addresses
	  ipv6: /^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,
	  regex: regex,
	  // uuid: http://tools.ietf.org/html/rfc4122
	  uuid: UUID,
	  // JSON-pointer: https://tools.ietf.org/html/rfc6901
	  // uri fragment: https://tools.ietf.org/html/rfc3986#appendix-A
	  'json-pointer': JSON_POINTER,
	  'json-pointer-uri-fragment': JSON_POINTER_URI_FRAGMENT,
	  // relative JSON-pointer: http://tools.ietf.org/html/draft-luff-relative-json-pointer-00
	  'relative-json-pointer': RELATIVE_JSON_POINTER
	};


	formats$1.full = {
	  date: date,
	  time: time$1,
	  'date-time': date_time,
	  uri: uri,
	  'uri-reference': URIREF,
	  'uri-template': URITEMPLATE,
	  url: URL$1,
	  email: /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i,
	  hostname: HOSTNAME,
	  ipv4: /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
	  ipv6: /^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,
	  regex: regex,
	  uuid: UUID,
	  'json-pointer': JSON_POINTER,
	  'json-pointer-uri-fragment': JSON_POINTER_URI_FRAGMENT,
	  'relative-json-pointer': RELATIVE_JSON_POINTER
	};


	function isLeapYear(year) {
	  // https://tools.ietf.org/html/rfc3339#appendix-C
	  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
	}


	function date(str) {
	  // full-date from http://tools.ietf.org/html/rfc3339#section-5.6
	  var matches = str.match(DATE);
	  if (!matches) return false;

	  var year = +matches[1];
	  var month = +matches[2];
	  var day = +matches[3];

	  return month >= 1 && month <= 12 && day >= 1 &&
	          day <= (month == 2 && isLeapYear(year) ? 29 : DAYS[month]);
	}


	function time$1(str, full) {
	  var matches = str.match(TIME$1);
	  if (!matches) return false;

	  var hour = matches[1];
	  var minute = matches[2];
	  var second = matches[3];
	  var timeZone = matches[5];
	  return ((hour <= 23 && minute <= 59 && second <= 59) ||
	          (hour == 23 && minute == 59 && second == 60)) &&
	         (!full || timeZone);
	}


	var DATE_TIME_SEPARATOR = /t|\s/i;
	function date_time(str) {
	  // http://tools.ietf.org/html/rfc3339#section-5.6
	  var dateTime = str.split(DATE_TIME_SEPARATOR);
	  return dateTime.length == 2 && date(dateTime[0]) && time$1(dateTime[1], true);
	}


	var NOT_URI_FRAGMENT = /\/|:/;
	function uri(str) {
	  // http://jmrware.com/articles/2009/uri_regexp/URI_regex.html + optional protocol + required "."
	  return NOT_URI_FRAGMENT.test(str) && URI.test(str);
	}


	var Z_ANCHOR = /[^\\]\\Z/;
	function regex(str) {
	  if (Z_ANCHOR.test(str)) return false;
	  try {
	    new RegExp(str);
	    return true;
	  } catch(e) {
	    return false;
	  }
	}

	var ref = function generate_ref(it, $keyword, $ruleType) {
	  var out = ' ';
	  var $lvl = it.level;
	  var $dataLvl = it.dataLevel;
	  var $schema = it.schema[$keyword];
	  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
	  var $breakOnError = !it.opts.allErrors;
	  var $data = 'data' + ($dataLvl || '');
	  var $valid = 'valid' + $lvl;
	  var $async, $refCode;
	  if ($schema == '#' || $schema == '#/') {
	    if (it.isRoot) {
	      $async = it.async;
	      $refCode = 'validate';
	    } else {
	      $async = it.root.schema.$async === true;
	      $refCode = 'root.refVal[0]';
	    }
	  } else {
	    var $refVal = it.resolveRef(it.baseId, $schema, it.isRoot);
	    if ($refVal === undefined) {
	      var $message = it.MissingRefError.message(it.baseId, $schema);
	      if (it.opts.missingRefs == 'fail') {
	        it.logger.error($message);
	        var $$outStack = $$outStack || [];
	        $$outStack.push(out);
	        out = ''; /* istanbul ignore else */
	        if (it.createErrors !== false) {
	          out += ' { keyword: \'' + ('$ref') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { ref: \'' + (it.util.escapeQuotes($schema)) + '\' } ';
	          if (it.opts.messages !== false) {
	            out += ' , message: \'can\\\'t resolve reference ' + (it.util.escapeQuotes($schema)) + '\' ';
	          }
	          if (it.opts.verbose) {
	            out += ' , schema: ' + (it.util.toQuotedString($schema)) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
	          }
	          out += ' } ';
	        } else {
	          out += ' {} ';
	        }
	        var __err = out;
	        out = $$outStack.pop();
	        if (!it.compositeRule && $breakOnError) {
	          /* istanbul ignore if */
	          if (it.async) {
	            out += ' throw new ValidationError([' + (__err) + ']); ';
	          } else {
	            out += ' validate.errors = [' + (__err) + ']; return false; ';
	          }
	        } else {
	          out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	        }
	        if ($breakOnError) {
	          out += ' if (false) { ';
	        }
	      } else if (it.opts.missingRefs == 'ignore') {
	        it.logger.warn($message);
	        if ($breakOnError) {
	          out += ' if (true) { ';
	        }
	      } else {
	        throw new it.MissingRefError(it.baseId, $schema, $message);
	      }
	    } else if ($refVal.inline) {
	      var $it = it.util.copy(it);
	      $it.level++;
	      var $nextValid = 'valid' + $it.level;
	      $it.schema = $refVal.schema;
	      $it.schemaPath = '';
	      $it.errSchemaPath = $schema;
	      var $code = it.validate($it).replace(/validate\.schema/g, $refVal.code);
	      out += ' ' + ($code) + ' ';
	      if ($breakOnError) {
	        out += ' if (' + ($nextValid) + ') { ';
	      }
	    } else {
	      $async = $refVal.$async === true || (it.async && $refVal.$async !== false);
	      $refCode = $refVal.code;
	    }
	  }
	  if ($refCode) {
	    var $$outStack = $$outStack || [];
	    $$outStack.push(out);
	    out = '';
	    if (it.opts.passContext) {
	      out += ' ' + ($refCode) + '.call(this, ';
	    } else {
	      out += ' ' + ($refCode) + '( ';
	    }
	    out += ' ' + ($data) + ', (dataPath || \'\')';
	    if (it.errorPath != '""') {
	      out += ' + ' + (it.errorPath);
	    }
	    var $parentData = $dataLvl ? 'data' + (($dataLvl - 1) || '') : 'parentData',
	      $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';
	    out += ' , ' + ($parentData) + ' , ' + ($parentDataProperty) + ', rootData)  ';
	    var __callValidate = out;
	    out = $$outStack.pop();
	    if ($async) {
	      if (!it.async) throw new Error('async schema referenced by sync schema');
	      if ($breakOnError) {
	        out += ' var ' + ($valid) + '; ';
	      }
	      out += ' try { await ' + (__callValidate) + '; ';
	      if ($breakOnError) {
	        out += ' ' + ($valid) + ' = true; ';
	      }
	      out += ' } catch (e) { if (!(e instanceof ValidationError)) throw e; if (vErrors === null) vErrors = e.errors; else vErrors = vErrors.concat(e.errors); errors = vErrors.length; ';
	      if ($breakOnError) {
	        out += ' ' + ($valid) + ' = false; ';
	      }
	      out += ' } ';
	      if ($breakOnError) {
	        out += ' if (' + ($valid) + ') { ';
	      }
	    } else {
	      out += ' if (!' + (__callValidate) + ') { if (vErrors === null) vErrors = ' + ($refCode) + '.errors; else vErrors = vErrors.concat(' + ($refCode) + '.errors); errors = vErrors.length; } ';
	      if ($breakOnError) {
	        out += ' else { ';
	      }
	    }
	  }
	  return out;
	};

	var allOf = function generate_allOf(it, $keyword, $ruleType) {
	  var out = ' ';
	  var $schema = it.schema[$keyword];
	  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
	  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
	  var $breakOnError = !it.opts.allErrors;
	  var $it = it.util.copy(it);
	  var $closingBraces = '';
	  $it.level++;
	  var $nextValid = 'valid' + $it.level;
	  var $currentBaseId = $it.baseId,
	    $allSchemasEmpty = true;
	  var arr1 = $schema;
	  if (arr1) {
	    var $sch, $i = -1,
	      l1 = arr1.length - 1;
	    while ($i < l1) {
	      $sch = arr1[$i += 1];
	      if ((it.opts.strictKeywords ? (typeof $sch == 'object' && Object.keys($sch).length > 0) || $sch === false : it.util.schemaHasRules($sch, it.RULES.all))) {
	        $allSchemasEmpty = false;
	        $it.schema = $sch;
	        $it.schemaPath = $schemaPath + '[' + $i + ']';
	        $it.errSchemaPath = $errSchemaPath + '/' + $i;
	        out += '  ' + (it.validate($it)) + ' ';
	        $it.baseId = $currentBaseId;
	        if ($breakOnError) {
	          out += ' if (' + ($nextValid) + ') { ';
	          $closingBraces += '}';
	        }
	      }
	    }
	  }
	  if ($breakOnError) {
	    if ($allSchemasEmpty) {
	      out += ' if (true) { ';
	    } else {
	      out += ' ' + ($closingBraces.slice(0, -1)) + ' ';
	    }
	  }
	  return out;
	};

	var anyOf = function generate_anyOf(it, $keyword, $ruleType) {
	  var out = ' ';
	  var $lvl = it.level;
	  var $dataLvl = it.dataLevel;
	  var $schema = it.schema[$keyword];
	  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
	  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
	  var $breakOnError = !it.opts.allErrors;
	  var $data = 'data' + ($dataLvl || '');
	  var $valid = 'valid' + $lvl;
	  var $errs = 'errs__' + $lvl;
	  var $it = it.util.copy(it);
	  var $closingBraces = '';
	  $it.level++;
	  var $nextValid = 'valid' + $it.level;
	  var $noEmptySchema = $schema.every(function($sch) {
	    return (it.opts.strictKeywords ? (typeof $sch == 'object' && Object.keys($sch).length > 0) || $sch === false : it.util.schemaHasRules($sch, it.RULES.all));
	  });
	  if ($noEmptySchema) {
	    var $currentBaseId = $it.baseId;
	    out += ' var ' + ($errs) + ' = errors; var ' + ($valid) + ' = false;  ';
	    var $wasComposite = it.compositeRule;
	    it.compositeRule = $it.compositeRule = true;
	    var arr1 = $schema;
	    if (arr1) {
	      var $sch, $i = -1,
	        l1 = arr1.length - 1;
	      while ($i < l1) {
	        $sch = arr1[$i += 1];
	        $it.schema = $sch;
	        $it.schemaPath = $schemaPath + '[' + $i + ']';
	        $it.errSchemaPath = $errSchemaPath + '/' + $i;
	        out += '  ' + (it.validate($it)) + ' ';
	        $it.baseId = $currentBaseId;
	        out += ' ' + ($valid) + ' = ' + ($valid) + ' || ' + ($nextValid) + '; if (!' + ($valid) + ') { ';
	        $closingBraces += '}';
	      }
	    }
	    it.compositeRule = $it.compositeRule = $wasComposite;
	    out += ' ' + ($closingBraces) + ' if (!' + ($valid) + ') {   var err =   '; /* istanbul ignore else */
	    if (it.createErrors !== false) {
	      out += ' { keyword: \'' + ('anyOf') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';
	      if (it.opts.messages !== false) {
	        out += ' , message: \'should match some schema in anyOf\' ';
	      }
	      if (it.opts.verbose) {
	        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
	      }
	      out += ' } ';
	    } else {
	      out += ' {} ';
	    }
	    out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	    if (!it.compositeRule && $breakOnError) {
	      /* istanbul ignore if */
	      if (it.async) {
	        out += ' throw new ValidationError(vErrors); ';
	      } else {
	        out += ' validate.errors = vErrors; return false; ';
	      }
	    }
	    out += ' } else {  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; } ';
	    if (it.opts.allErrors) {
	      out += ' } ';
	    }
	  } else {
	    if ($breakOnError) {
	      out += ' if (true) { ';
	    }
	  }
	  return out;
	};

	var comment = function generate_comment(it, $keyword, $ruleType) {
	  var out = ' ';
	  var $schema = it.schema[$keyword];
	  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
	  !it.opts.allErrors;
	  var $comment = it.util.toQuotedString($schema);
	  if (it.opts.$comment === true) {
	    out += ' console.log(' + ($comment) + ');';
	  } else if (typeof it.opts.$comment == 'function') {
	    out += ' self._opts.$comment(' + ($comment) + ', ' + (it.util.toQuotedString($errSchemaPath)) + ', validate.root.schema);';
	  }
	  return out;
	};

	var _const = function generate_const(it, $keyword, $ruleType) {
	  var out = ' ';
	  var $lvl = it.level;
	  var $dataLvl = it.dataLevel;
	  var $schema = it.schema[$keyword];
	  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
	  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
	  var $breakOnError = !it.opts.allErrors;
	  var $data = 'data' + ($dataLvl || '');
	  var $valid = 'valid' + $lvl;
	  var $isData = it.opts.$data && $schema && $schema.$data;
	  if ($isData) {
	    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
	  }
	  if (!$isData) {
	    out += ' var schema' + ($lvl) + ' = validate.schema' + ($schemaPath) + ';';
	  }
	  out += 'var ' + ($valid) + ' = equal(' + ($data) + ', schema' + ($lvl) + '); if (!' + ($valid) + ') {   ';
	  var $$outStack = $$outStack || [];
	  $$outStack.push(out);
	  out = ''; /* istanbul ignore else */
	  if (it.createErrors !== false) {
	    out += ' { keyword: \'' + ('const') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { allowedValue: schema' + ($lvl) + ' } ';
	    if (it.opts.messages !== false) {
	      out += ' , message: \'should be equal to constant\' ';
	    }
	    if (it.opts.verbose) {
	      out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
	    }
	    out += ' } ';
	  } else {
	    out += ' {} ';
	  }
	  var __err = out;
	  out = $$outStack.pop();
	  if (!it.compositeRule && $breakOnError) {
	    /* istanbul ignore if */
	    if (it.async) {
	      out += ' throw new ValidationError([' + (__err) + ']); ';
	    } else {
	      out += ' validate.errors = [' + (__err) + ']; return false; ';
	    }
	  } else {
	    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	  }
	  out += ' }';
	  if ($breakOnError) {
	    out += ' else { ';
	  }
	  return out;
	};

	var contains = function generate_contains(it, $keyword, $ruleType) {
	  var out = ' ';
	  var $lvl = it.level;
	  var $dataLvl = it.dataLevel;
	  var $schema = it.schema[$keyword];
	  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
	  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
	  var $breakOnError = !it.opts.allErrors;
	  var $data = 'data' + ($dataLvl || '');
	  var $valid = 'valid' + $lvl;
	  var $errs = 'errs__' + $lvl;
	  var $it = it.util.copy(it);
	  var $closingBraces = '';
	  $it.level++;
	  var $nextValid = 'valid' + $it.level;
	  var $idx = 'i' + $lvl,
	    $dataNxt = $it.dataLevel = it.dataLevel + 1,
	    $nextData = 'data' + $dataNxt,
	    $currentBaseId = it.baseId,
	    $nonEmptySchema = (it.opts.strictKeywords ? (typeof $schema == 'object' && Object.keys($schema).length > 0) || $schema === false : it.util.schemaHasRules($schema, it.RULES.all));
	  out += 'var ' + ($errs) + ' = errors;var ' + ($valid) + ';';
	  if ($nonEmptySchema) {
	    var $wasComposite = it.compositeRule;
	    it.compositeRule = $it.compositeRule = true;
	    $it.schema = $schema;
	    $it.schemaPath = $schemaPath;
	    $it.errSchemaPath = $errSchemaPath;
	    out += ' var ' + ($nextValid) + ' = false; for (var ' + ($idx) + ' = 0; ' + ($idx) + ' < ' + ($data) + '.length; ' + ($idx) + '++) { ';
	    $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
	    var $passData = $data + '[' + $idx + ']';
	    $it.dataPathArr[$dataNxt] = $idx;
	    var $code = it.validate($it);
	    $it.baseId = $currentBaseId;
	    if (it.util.varOccurences($code, $nextData) < 2) {
	      out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
	    } else {
	      out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
	    }
	    out += ' if (' + ($nextValid) + ') break; }  ';
	    it.compositeRule = $it.compositeRule = $wasComposite;
	    out += ' ' + ($closingBraces) + ' if (!' + ($nextValid) + ') {';
	  } else {
	    out += ' if (' + ($data) + '.length == 0) {';
	  }
	  var $$outStack = $$outStack || [];
	  $$outStack.push(out);
	  out = ''; /* istanbul ignore else */
	  if (it.createErrors !== false) {
	    out += ' { keyword: \'' + ('contains') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';
	    if (it.opts.messages !== false) {
	      out += ' , message: \'should contain a valid item\' ';
	    }
	    if (it.opts.verbose) {
	      out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
	    }
	    out += ' } ';
	  } else {
	    out += ' {} ';
	  }
	  var __err = out;
	  out = $$outStack.pop();
	  if (!it.compositeRule && $breakOnError) {
	    /* istanbul ignore if */
	    if (it.async) {
	      out += ' throw new ValidationError([' + (__err) + ']); ';
	    } else {
	      out += ' validate.errors = [' + (__err) + ']; return false; ';
	    }
	  } else {
	    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	  }
	  out += ' } else { ';
	  if ($nonEmptySchema) {
	    out += '  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; } ';
	  }
	  if (it.opts.allErrors) {
	    out += ' } ';
	  }
	  return out;
	};

	var dependencies$4 = function generate_dependencies(it, $keyword, $ruleType) {
	  var out = ' ';
	  var $lvl = it.level;
	  var $dataLvl = it.dataLevel;
	  var $schema = it.schema[$keyword];
	  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
	  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
	  var $breakOnError = !it.opts.allErrors;
	  var $data = 'data' + ($dataLvl || '');
	  var $errs = 'errs__' + $lvl;
	  var $it = it.util.copy(it);
	  var $closingBraces = '';
	  $it.level++;
	  var $nextValid = 'valid' + $it.level;
	  var $schemaDeps = {},
	    $propertyDeps = {},
	    $ownProperties = it.opts.ownProperties;
	  for ($property in $schema) {
	    if ($property == '__proto__') continue;
	    var $sch = $schema[$property];
	    var $deps = Array.isArray($sch) ? $propertyDeps : $schemaDeps;
	    $deps[$property] = $sch;
	  }
	  out += 'var ' + ($errs) + ' = errors;';
	  var $currentErrorPath = it.errorPath;
	  out += 'var missing' + ($lvl) + ';';
	  for (var $property in $propertyDeps) {
	    $deps = $propertyDeps[$property];
	    if ($deps.length) {
	      out += ' if ( ' + ($data) + (it.util.getProperty($property)) + ' !== undefined ';
	      if ($ownProperties) {
	        out += ' && Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($property)) + '\') ';
	      }
	      if ($breakOnError) {
	        out += ' && ( ';
	        var arr1 = $deps;
	        if (arr1) {
	          var $propertyKey, $i = -1,
	            l1 = arr1.length - 1;
	          while ($i < l1) {
	            $propertyKey = arr1[$i += 1];
	            if ($i) {
	              out += ' || ';
	            }
	            var $prop = it.util.getProperty($propertyKey),
	              $useData = $data + $prop;
	            out += ' ( ( ' + ($useData) + ' === undefined ';
	            if ($ownProperties) {
	              out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($propertyKey)) + '\') ';
	            }
	            out += ') && (missing' + ($lvl) + ' = ' + (it.util.toQuotedString(it.opts.jsonPointers ? $propertyKey : $prop)) + ') ) ';
	          }
	        }
	        out += ')) {  ';
	        var $propertyPath = 'missing' + $lvl,
	          $missingProperty = '\' + ' + $propertyPath + ' + \'';
	        if (it.opts._errorDataPathProperty) {
	          it.errorPath = it.opts.jsonPointers ? it.util.getPathExpr($currentErrorPath, $propertyPath, true) : $currentErrorPath + ' + ' + $propertyPath;
	        }
	        var $$outStack = $$outStack || [];
	        $$outStack.push(out);
	        out = ''; /* istanbul ignore else */
	        if (it.createErrors !== false) {
	          out += ' { keyword: \'' + ('dependencies') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { property: \'' + (it.util.escapeQuotes($property)) + '\', missingProperty: \'' + ($missingProperty) + '\', depsCount: ' + ($deps.length) + ', deps: \'' + (it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join(", "))) + '\' } ';
	          if (it.opts.messages !== false) {
	            out += ' , message: \'should have ';
	            if ($deps.length == 1) {
	              out += 'property ' + (it.util.escapeQuotes($deps[0]));
	            } else {
	              out += 'properties ' + (it.util.escapeQuotes($deps.join(", ")));
	            }
	            out += ' when property ' + (it.util.escapeQuotes($property)) + ' is present\' ';
	          }
	          if (it.opts.verbose) {
	            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
	          }
	          out += ' } ';
	        } else {
	          out += ' {} ';
	        }
	        var __err = out;
	        out = $$outStack.pop();
	        if (!it.compositeRule && $breakOnError) {
	          /* istanbul ignore if */
	          if (it.async) {
	            out += ' throw new ValidationError([' + (__err) + ']); ';
	          } else {
	            out += ' validate.errors = [' + (__err) + ']; return false; ';
	          }
	        } else {
	          out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	        }
	      } else {
	        out += ' ) { ';
	        var arr2 = $deps;
	        if (arr2) {
	          var $propertyKey, i2 = -1,
	            l2 = arr2.length - 1;
	          while (i2 < l2) {
	            $propertyKey = arr2[i2 += 1];
	            var $prop = it.util.getProperty($propertyKey),
	              $missingProperty = it.util.escapeQuotes($propertyKey),
	              $useData = $data + $prop;
	            if (it.opts._errorDataPathProperty) {
	              it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
	            }
	            out += ' if ( ' + ($useData) + ' === undefined ';
	            if ($ownProperties) {
	              out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($propertyKey)) + '\') ';
	            }
	            out += ') {  var err =   '; /* istanbul ignore else */
	            if (it.createErrors !== false) {
	              out += ' { keyword: \'' + ('dependencies') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { property: \'' + (it.util.escapeQuotes($property)) + '\', missingProperty: \'' + ($missingProperty) + '\', depsCount: ' + ($deps.length) + ', deps: \'' + (it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join(", "))) + '\' } ';
	              if (it.opts.messages !== false) {
	                out += ' , message: \'should have ';
	                if ($deps.length == 1) {
	                  out += 'property ' + (it.util.escapeQuotes($deps[0]));
	                } else {
	                  out += 'properties ' + (it.util.escapeQuotes($deps.join(", ")));
	                }
	                out += ' when property ' + (it.util.escapeQuotes($property)) + ' is present\' ';
	              }
	              if (it.opts.verbose) {
	                out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
	              }
	              out += ' } ';
	            } else {
	              out += ' {} ';
	            }
	            out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ';
	          }
	        }
	      }
	      out += ' }   ';
	      if ($breakOnError) {
	        $closingBraces += '}';
	        out += ' else { ';
	      }
	    }
	  }
	  it.errorPath = $currentErrorPath;
	  var $currentBaseId = $it.baseId;
	  for (var $property in $schemaDeps) {
	    var $sch = $schemaDeps[$property];
	    if ((it.opts.strictKeywords ? (typeof $sch == 'object' && Object.keys($sch).length > 0) || $sch === false : it.util.schemaHasRules($sch, it.RULES.all))) {
	      out += ' ' + ($nextValid) + ' = true; if ( ' + ($data) + (it.util.getProperty($property)) + ' !== undefined ';
	      if ($ownProperties) {
	        out += ' && Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($property)) + '\') ';
	      }
	      out += ') { ';
	      $it.schema = $sch;
	      $it.schemaPath = $schemaPath + it.util.getProperty($property);
	      $it.errSchemaPath = $errSchemaPath + '/' + it.util.escapeFragment($property);
	      out += '  ' + (it.validate($it)) + ' ';
	      $it.baseId = $currentBaseId;
	      out += ' }  ';
	      if ($breakOnError) {
	        out += ' if (' + ($nextValid) + ') { ';
	        $closingBraces += '}';
	      }
	    }
	  }
	  if ($breakOnError) {
	    out += '   ' + ($closingBraces) + ' if (' + ($errs) + ' == errors) {';
	  }
	  return out;
	};

	var _enum = function generate_enum(it, $keyword, $ruleType) {
	  var out = ' ';
	  var $lvl = it.level;
	  var $dataLvl = it.dataLevel;
	  var $schema = it.schema[$keyword];
	  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
	  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
	  var $breakOnError = !it.opts.allErrors;
	  var $data = 'data' + ($dataLvl || '');
	  var $valid = 'valid' + $lvl;
	  var $isData = it.opts.$data && $schema && $schema.$data;
	  if ($isData) {
	    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
	  }
	  var $i = 'i' + $lvl,
	    $vSchema = 'schema' + $lvl;
	  if (!$isData) {
	    out += ' var ' + ($vSchema) + ' = validate.schema' + ($schemaPath) + ';';
	  }
	  out += 'var ' + ($valid) + ';';
	  if ($isData) {
	    out += ' if (schema' + ($lvl) + ' === undefined) ' + ($valid) + ' = true; else if (!Array.isArray(schema' + ($lvl) + ')) ' + ($valid) + ' = false; else {';
	  }
	  out += '' + ($valid) + ' = false;for (var ' + ($i) + '=0; ' + ($i) + '<' + ($vSchema) + '.length; ' + ($i) + '++) if (equal(' + ($data) + ', ' + ($vSchema) + '[' + ($i) + '])) { ' + ($valid) + ' = true; break; }';
	  if ($isData) {
	    out += '  }  ';
	  }
	  out += ' if (!' + ($valid) + ') {   ';
	  var $$outStack = $$outStack || [];
	  $$outStack.push(out);
	  out = ''; /* istanbul ignore else */
	  if (it.createErrors !== false) {
	    out += ' { keyword: \'' + ('enum') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { allowedValues: schema' + ($lvl) + ' } ';
	    if (it.opts.messages !== false) {
	      out += ' , message: \'should be equal to one of the allowed values\' ';
	    }
	    if (it.opts.verbose) {
	      out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
	    }
	    out += ' } ';
	  } else {
	    out += ' {} ';
	  }
	  var __err = out;
	  out = $$outStack.pop();
	  if (!it.compositeRule && $breakOnError) {
	    /* istanbul ignore if */
	    if (it.async) {
	      out += ' throw new ValidationError([' + (__err) + ']); ';
	    } else {
	      out += ' validate.errors = [' + (__err) + ']; return false; ';
	    }
	  } else {
	    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	  }
	  out += ' }';
	  if ($breakOnError) {
	    out += ' else { ';
	  }
	  return out;
	};

	var format$6 = function generate_format(it, $keyword, $ruleType) {
	  var out = ' ';
	  var $lvl = it.level;
	  var $dataLvl = it.dataLevel;
	  var $schema = it.schema[$keyword];
	  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
	  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
	  var $breakOnError = !it.opts.allErrors;
	  var $data = 'data' + ($dataLvl || '');
	  if (it.opts.format === false) {
	    if ($breakOnError) {
	      out += ' if (true) { ';
	    }
	    return out;
	  }
	  var $isData = it.opts.$data && $schema && $schema.$data,
	    $schemaValue;
	  if ($isData) {
	    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
	    $schemaValue = 'schema' + $lvl;
	  } else {
	    $schemaValue = $schema;
	  }
	  var $unknownFormats = it.opts.unknownFormats,
	    $allowUnknown = Array.isArray($unknownFormats);
	  if ($isData) {
	    var $format = 'format' + $lvl,
	      $isObject = 'isObject' + $lvl,
	      $formatType = 'formatType' + $lvl;
	    out += ' var ' + ($format) + ' = formats[' + ($schemaValue) + ']; var ' + ($isObject) + ' = typeof ' + ($format) + ' == \'object\' && !(' + ($format) + ' instanceof RegExp) && ' + ($format) + '.validate; var ' + ($formatType) + ' = ' + ($isObject) + ' && ' + ($format) + '.type || \'string\'; if (' + ($isObject) + ') { ';
	    if (it.async) {
	      out += ' var async' + ($lvl) + ' = ' + ($format) + '.async; ';
	    }
	    out += ' ' + ($format) + ' = ' + ($format) + '.validate; } if (  ';
	    if ($isData) {
	      out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'string\') || ';
	    }
	    out += ' (';
	    if ($unknownFormats != 'ignore') {
	      out += ' (' + ($schemaValue) + ' && !' + ($format) + ' ';
	      if ($allowUnknown) {
	        out += ' && self._opts.unknownFormats.indexOf(' + ($schemaValue) + ') == -1 ';
	      }
	      out += ') || ';
	    }
	    out += ' (' + ($format) + ' && ' + ($formatType) + ' == \'' + ($ruleType) + '\' && !(typeof ' + ($format) + ' == \'function\' ? ';
	    if (it.async) {
	      out += ' (async' + ($lvl) + ' ? await ' + ($format) + '(' + ($data) + ') : ' + ($format) + '(' + ($data) + ')) ';
	    } else {
	      out += ' ' + ($format) + '(' + ($data) + ') ';
	    }
	    out += ' : ' + ($format) + '.test(' + ($data) + '))))) {';
	  } else {
	    var $format = it.formats[$schema];
	    if (!$format) {
	      if ($unknownFormats == 'ignore') {
	        it.logger.warn('unknown format "' + $schema + '" ignored in schema at path "' + it.errSchemaPath + '"');
	        if ($breakOnError) {
	          out += ' if (true) { ';
	        }
	        return out;
	      } else if ($allowUnknown && $unknownFormats.indexOf($schema) >= 0) {
	        if ($breakOnError) {
	          out += ' if (true) { ';
	        }
	        return out;
	      } else {
	        throw new Error('unknown format "' + $schema + '" is used in schema at path "' + it.errSchemaPath + '"');
	      }
	    }
	    var $isObject = typeof $format == 'object' && !($format instanceof RegExp) && $format.validate;
	    var $formatType = $isObject && $format.type || 'string';
	    if ($isObject) {
	      var $async = $format.async === true;
	      $format = $format.validate;
	    }
	    if ($formatType != $ruleType) {
	      if ($breakOnError) {
	        out += ' if (true) { ';
	      }
	      return out;
	    }
	    if ($async) {
	      if (!it.async) throw new Error('async format in sync schema');
	      var $formatRef = 'formats' + it.util.getProperty($schema) + '.validate';
	      out += ' if (!(await ' + ($formatRef) + '(' + ($data) + '))) { ';
	    } else {
	      out += ' if (! ';
	      var $formatRef = 'formats' + it.util.getProperty($schema);
	      if ($isObject) $formatRef += '.validate';
	      if (typeof $format == 'function') {
	        out += ' ' + ($formatRef) + '(' + ($data) + ') ';
	      } else {
	        out += ' ' + ($formatRef) + '.test(' + ($data) + ') ';
	      }
	      out += ') { ';
	    }
	  }
	  var $$outStack = $$outStack || [];
	  $$outStack.push(out);
	  out = ''; /* istanbul ignore else */
	  if (it.createErrors !== false) {
	    out += ' { keyword: \'' + ('format') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { format:  ';
	    if ($isData) {
	      out += '' + ($schemaValue);
	    } else {
	      out += '' + (it.util.toQuotedString($schema));
	    }
	    out += '  } ';
	    if (it.opts.messages !== false) {
	      out += ' , message: \'should match format "';
	      if ($isData) {
	        out += '\' + ' + ($schemaValue) + ' + \'';
	      } else {
	        out += '' + (it.util.escapeQuotes($schema));
	      }
	      out += '"\' ';
	    }
	    if (it.opts.verbose) {
	      out += ' , schema:  ';
	      if ($isData) {
	        out += 'validate.schema' + ($schemaPath);
	      } else {
	        out += '' + (it.util.toQuotedString($schema));
	      }
	      out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
	    }
	    out += ' } ';
	  } else {
	    out += ' {} ';
	  }
	  var __err = out;
	  out = $$outStack.pop();
	  if (!it.compositeRule && $breakOnError) {
	    /* istanbul ignore if */
	    if (it.async) {
	      out += ' throw new ValidationError([' + (__err) + ']); ';
	    } else {
	      out += ' validate.errors = [' + (__err) + ']; return false; ';
	    }
	  } else {
	    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	  }
	  out += ' } ';
	  if ($breakOnError) {
	    out += ' else { ';
	  }
	  return out;
	};

	var _if = function generate_if(it, $keyword, $ruleType) {
	  var out = ' ';
	  var $lvl = it.level;
	  var $dataLvl = it.dataLevel;
	  var $schema = it.schema[$keyword];
	  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
	  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
	  var $breakOnError = !it.opts.allErrors;
	  var $data = 'data' + ($dataLvl || '');
	  var $valid = 'valid' + $lvl;
	  var $errs = 'errs__' + $lvl;
	  var $it = it.util.copy(it);
	  $it.level++;
	  var $nextValid = 'valid' + $it.level;
	  var $thenSch = it.schema['then'],
	    $elseSch = it.schema['else'],
	    $thenPresent = $thenSch !== undefined && (it.opts.strictKeywords ? (typeof $thenSch == 'object' && Object.keys($thenSch).length > 0) || $thenSch === false : it.util.schemaHasRules($thenSch, it.RULES.all)),
	    $elsePresent = $elseSch !== undefined && (it.opts.strictKeywords ? (typeof $elseSch == 'object' && Object.keys($elseSch).length > 0) || $elseSch === false : it.util.schemaHasRules($elseSch, it.RULES.all)),
	    $currentBaseId = $it.baseId;
	  if ($thenPresent || $elsePresent) {
	    var $ifClause;
	    $it.createErrors = false;
	    $it.schema = $schema;
	    $it.schemaPath = $schemaPath;
	    $it.errSchemaPath = $errSchemaPath;
	    out += ' var ' + ($errs) + ' = errors; var ' + ($valid) + ' = true;  ';
	    var $wasComposite = it.compositeRule;
	    it.compositeRule = $it.compositeRule = true;
	    out += '  ' + (it.validate($it)) + ' ';
	    $it.baseId = $currentBaseId;
	    $it.createErrors = true;
	    out += '  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; }  ';
	    it.compositeRule = $it.compositeRule = $wasComposite;
	    if ($thenPresent) {
	      out += ' if (' + ($nextValid) + ') {  ';
	      $it.schema = it.schema['then'];
	      $it.schemaPath = it.schemaPath + '.then';
	      $it.errSchemaPath = it.errSchemaPath + '/then';
	      out += '  ' + (it.validate($it)) + ' ';
	      $it.baseId = $currentBaseId;
	      out += ' ' + ($valid) + ' = ' + ($nextValid) + '; ';
	      if ($thenPresent && $elsePresent) {
	        $ifClause = 'ifClause' + $lvl;
	        out += ' var ' + ($ifClause) + ' = \'then\'; ';
	      } else {
	        $ifClause = '\'then\'';
	      }
	      out += ' } ';
	      if ($elsePresent) {
	        out += ' else { ';
	      }
	    } else {
	      out += ' if (!' + ($nextValid) + ') { ';
	    }
	    if ($elsePresent) {
	      $it.schema = it.schema['else'];
	      $it.schemaPath = it.schemaPath + '.else';
	      $it.errSchemaPath = it.errSchemaPath + '/else';
	      out += '  ' + (it.validate($it)) + ' ';
	      $it.baseId = $currentBaseId;
	      out += ' ' + ($valid) + ' = ' + ($nextValid) + '; ';
	      if ($thenPresent && $elsePresent) {
	        $ifClause = 'ifClause' + $lvl;
	        out += ' var ' + ($ifClause) + ' = \'else\'; ';
	      } else {
	        $ifClause = '\'else\'';
	      }
	      out += ' } ';
	    }
	    out += ' if (!' + ($valid) + ') {   var err =   '; /* istanbul ignore else */
	    if (it.createErrors !== false) {
	      out += ' { keyword: \'' + ('if') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { failingKeyword: ' + ($ifClause) + ' } ';
	      if (it.opts.messages !== false) {
	        out += ' , message: \'should match "\' + ' + ($ifClause) + ' + \'" schema\' ';
	      }
	      if (it.opts.verbose) {
	        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
	      }
	      out += ' } ';
	    } else {
	      out += ' {} ';
	    }
	    out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	    if (!it.compositeRule && $breakOnError) {
	      /* istanbul ignore if */
	      if (it.async) {
	        out += ' throw new ValidationError(vErrors); ';
	      } else {
	        out += ' validate.errors = vErrors; return false; ';
	      }
	    }
	    out += ' }   ';
	    if ($breakOnError) {
	      out += ' else { ';
	    }
	  } else {
	    if ($breakOnError) {
	      out += ' if (true) { ';
	    }
	  }
	  return out;
	};

	var items = function generate_items(it, $keyword, $ruleType) {
	  var out = ' ';
	  var $lvl = it.level;
	  var $dataLvl = it.dataLevel;
	  var $schema = it.schema[$keyword];
	  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
	  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
	  var $breakOnError = !it.opts.allErrors;
	  var $data = 'data' + ($dataLvl || '');
	  var $valid = 'valid' + $lvl;
	  var $errs = 'errs__' + $lvl;
	  var $it = it.util.copy(it);
	  var $closingBraces = '';
	  $it.level++;
	  var $nextValid = 'valid' + $it.level;
	  var $idx = 'i' + $lvl,
	    $dataNxt = $it.dataLevel = it.dataLevel + 1,
	    $nextData = 'data' + $dataNxt,
	    $currentBaseId = it.baseId;
	  out += 'var ' + ($errs) + ' = errors;var ' + ($valid) + ';';
	  if (Array.isArray($schema)) {
	    var $additionalItems = it.schema.additionalItems;
	    if ($additionalItems === false) {
	      out += ' ' + ($valid) + ' = ' + ($data) + '.length <= ' + ($schema.length) + '; ';
	      var $currErrSchemaPath = $errSchemaPath;
	      $errSchemaPath = it.errSchemaPath + '/additionalItems';
	      out += '  if (!' + ($valid) + ') {   ';
	      var $$outStack = $$outStack || [];
	      $$outStack.push(out);
	      out = ''; /* istanbul ignore else */
	      if (it.createErrors !== false) {
	        out += ' { keyword: \'' + ('additionalItems') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { limit: ' + ($schema.length) + ' } ';
	        if (it.opts.messages !== false) {
	          out += ' , message: \'should NOT have more than ' + ($schema.length) + ' items\' ';
	        }
	        if (it.opts.verbose) {
	          out += ' , schema: false , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
	        }
	        out += ' } ';
	      } else {
	        out += ' {} ';
	      }
	      var __err = out;
	      out = $$outStack.pop();
	      if (!it.compositeRule && $breakOnError) {
	        /* istanbul ignore if */
	        if (it.async) {
	          out += ' throw new ValidationError([' + (__err) + ']); ';
	        } else {
	          out += ' validate.errors = [' + (__err) + ']; return false; ';
	        }
	      } else {
	        out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	      }
	      out += ' } ';
	      $errSchemaPath = $currErrSchemaPath;
	      if ($breakOnError) {
	        $closingBraces += '}';
	        out += ' else { ';
	      }
	    }
	    var arr1 = $schema;
	    if (arr1) {
	      var $sch, $i = -1,
	        l1 = arr1.length - 1;
	      while ($i < l1) {
	        $sch = arr1[$i += 1];
	        if ((it.opts.strictKeywords ? (typeof $sch == 'object' && Object.keys($sch).length > 0) || $sch === false : it.util.schemaHasRules($sch, it.RULES.all))) {
	          out += ' ' + ($nextValid) + ' = true; if (' + ($data) + '.length > ' + ($i) + ') { ';
	          var $passData = $data + '[' + $i + ']';
	          $it.schema = $sch;
	          $it.schemaPath = $schemaPath + '[' + $i + ']';
	          $it.errSchemaPath = $errSchemaPath + '/' + $i;
	          $it.errorPath = it.util.getPathExpr(it.errorPath, $i, it.opts.jsonPointers, true);
	          $it.dataPathArr[$dataNxt] = $i;
	          var $code = it.validate($it);
	          $it.baseId = $currentBaseId;
	          if (it.util.varOccurences($code, $nextData) < 2) {
	            out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
	          } else {
	            out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
	          }
	          out += ' }  ';
	          if ($breakOnError) {
	            out += ' if (' + ($nextValid) + ') { ';
	            $closingBraces += '}';
	          }
	        }
	      }
	    }
	    if (typeof $additionalItems == 'object' && (it.opts.strictKeywords ? (typeof $additionalItems == 'object' && Object.keys($additionalItems).length > 0) || $additionalItems === false : it.util.schemaHasRules($additionalItems, it.RULES.all))) {
	      $it.schema = $additionalItems;
	      $it.schemaPath = it.schemaPath + '.additionalItems';
	      $it.errSchemaPath = it.errSchemaPath + '/additionalItems';
	      out += ' ' + ($nextValid) + ' = true; if (' + ($data) + '.length > ' + ($schema.length) + ') {  for (var ' + ($idx) + ' = ' + ($schema.length) + '; ' + ($idx) + ' < ' + ($data) + '.length; ' + ($idx) + '++) { ';
	      $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
	      var $passData = $data + '[' + $idx + ']';
	      $it.dataPathArr[$dataNxt] = $idx;
	      var $code = it.validate($it);
	      $it.baseId = $currentBaseId;
	      if (it.util.varOccurences($code, $nextData) < 2) {
	        out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
	      } else {
	        out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
	      }
	      if ($breakOnError) {
	        out += ' if (!' + ($nextValid) + ') break; ';
	      }
	      out += ' } }  ';
	      if ($breakOnError) {
	        out += ' if (' + ($nextValid) + ') { ';
	        $closingBraces += '}';
	      }
	    }
	  } else if ((it.opts.strictKeywords ? (typeof $schema == 'object' && Object.keys($schema).length > 0) || $schema === false : it.util.schemaHasRules($schema, it.RULES.all))) {
	    $it.schema = $schema;
	    $it.schemaPath = $schemaPath;
	    $it.errSchemaPath = $errSchemaPath;
	    out += '  for (var ' + ($idx) + ' = ' + (0) + '; ' + ($idx) + ' < ' + ($data) + '.length; ' + ($idx) + '++) { ';
	    $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
	    var $passData = $data + '[' + $idx + ']';
	    $it.dataPathArr[$dataNxt] = $idx;
	    var $code = it.validate($it);
	    $it.baseId = $currentBaseId;
	    if (it.util.varOccurences($code, $nextData) < 2) {
	      out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
	    } else {
	      out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
	    }
	    if ($breakOnError) {
	      out += ' if (!' + ($nextValid) + ') break; ';
	    }
	    out += ' }';
	  }
	  if ($breakOnError) {
	    out += ' ' + ($closingBraces) + ' if (' + ($errs) + ' == errors) {';
	  }
	  return out;
	};

	var _limit = function generate__limit(it, $keyword, $ruleType) {
	  var out = ' ';
	  var $lvl = it.level;
	  var $dataLvl = it.dataLevel;
	  var $schema = it.schema[$keyword];
	  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
	  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
	  var $breakOnError = !it.opts.allErrors;
	  var $errorKeyword;
	  var $data = 'data' + ($dataLvl || '');
	  var $isData = it.opts.$data && $schema && $schema.$data,
	    $schemaValue;
	  if ($isData) {
	    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
	    $schemaValue = 'schema' + $lvl;
	  } else {
	    $schemaValue = $schema;
	  }
	  var $isMax = $keyword == 'maximum',
	    $exclusiveKeyword = $isMax ? 'exclusiveMaximum' : 'exclusiveMinimum',
	    $schemaExcl = it.schema[$exclusiveKeyword],
	    $isDataExcl = it.opts.$data && $schemaExcl && $schemaExcl.$data,
	    $op = $isMax ? '<' : '>',
	    $notOp = $isMax ? '>' : '<',
	    $errorKeyword = undefined;
	  if (!($isData || typeof $schema == 'number' || $schema === undefined)) {
	    throw new Error($keyword + ' must be number');
	  }
	  if (!($isDataExcl || $schemaExcl === undefined || typeof $schemaExcl == 'number' || typeof $schemaExcl == 'boolean')) {
	    throw new Error($exclusiveKeyword + ' must be number or boolean');
	  }
	  if ($isDataExcl) {
	    var $schemaValueExcl = it.util.getData($schemaExcl.$data, $dataLvl, it.dataPathArr),
	      $exclusive = 'exclusive' + $lvl,
	      $exclType = 'exclType' + $lvl,
	      $exclIsNumber = 'exclIsNumber' + $lvl,
	      $opExpr = 'op' + $lvl,
	      $opStr = '\' + ' + $opExpr + ' + \'';
	    out += ' var schemaExcl' + ($lvl) + ' = ' + ($schemaValueExcl) + '; ';
	    $schemaValueExcl = 'schemaExcl' + $lvl;
	    out += ' var ' + ($exclusive) + '; var ' + ($exclType) + ' = typeof ' + ($schemaValueExcl) + '; if (' + ($exclType) + ' != \'boolean\' && ' + ($exclType) + ' != \'undefined\' && ' + ($exclType) + ' != \'number\') { ';
	    var $errorKeyword = $exclusiveKeyword;
	    var $$outStack = $$outStack || [];
	    $$outStack.push(out);
	    out = ''; /* istanbul ignore else */
	    if (it.createErrors !== false) {
	      out += ' { keyword: \'' + ($errorKeyword || '_exclusiveLimit') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';
	      if (it.opts.messages !== false) {
	        out += ' , message: \'' + ($exclusiveKeyword) + ' should be boolean\' ';
	      }
	      if (it.opts.verbose) {
	        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
	      }
	      out += ' } ';
	    } else {
	      out += ' {} ';
	    }
	    var __err = out;
	    out = $$outStack.pop();
	    if (!it.compositeRule && $breakOnError) {
	      /* istanbul ignore if */
	      if (it.async) {
	        out += ' throw new ValidationError([' + (__err) + ']); ';
	      } else {
	        out += ' validate.errors = [' + (__err) + ']; return false; ';
	      }
	    } else {
	      out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	    }
	    out += ' } else if ( ';
	    if ($isData) {
	      out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'number\') || ';
	    }
	    out += ' ' + ($exclType) + ' == \'number\' ? ( (' + ($exclusive) + ' = ' + ($schemaValue) + ' === undefined || ' + ($schemaValueExcl) + ' ' + ($op) + '= ' + ($schemaValue) + ') ? ' + ($data) + ' ' + ($notOp) + '= ' + ($schemaValueExcl) + ' : ' + ($data) + ' ' + ($notOp) + ' ' + ($schemaValue) + ' ) : ( (' + ($exclusive) + ' = ' + ($schemaValueExcl) + ' === true) ? ' + ($data) + ' ' + ($notOp) + '= ' + ($schemaValue) + ' : ' + ($data) + ' ' + ($notOp) + ' ' + ($schemaValue) + ' ) || ' + ($data) + ' !== ' + ($data) + ') { var op' + ($lvl) + ' = ' + ($exclusive) + ' ? \'' + ($op) + '\' : \'' + ($op) + '=\'; ';
	    if ($schema === undefined) {
	      $errorKeyword = $exclusiveKeyword;
	      $errSchemaPath = it.errSchemaPath + '/' + $exclusiveKeyword;
	      $schemaValue = $schemaValueExcl;
	      $isData = $isDataExcl;
	    }
	  } else {
	    var $exclIsNumber = typeof $schemaExcl == 'number',
	      $opStr = $op;
	    if ($exclIsNumber && $isData) {
	      var $opExpr = '\'' + $opStr + '\'';
	      out += ' if ( ';
	      if ($isData) {
	        out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'number\') || ';
	      }
	      out += ' ( ' + ($schemaValue) + ' === undefined || ' + ($schemaExcl) + ' ' + ($op) + '= ' + ($schemaValue) + ' ? ' + ($data) + ' ' + ($notOp) + '= ' + ($schemaExcl) + ' : ' + ($data) + ' ' + ($notOp) + ' ' + ($schemaValue) + ' ) || ' + ($data) + ' !== ' + ($data) + ') { ';
	    } else {
	      if ($exclIsNumber && $schema === undefined) {
	        $exclusive = true;
	        $errorKeyword = $exclusiveKeyword;
	        $errSchemaPath = it.errSchemaPath + '/' + $exclusiveKeyword;
	        $schemaValue = $schemaExcl;
	        $notOp += '=';
	      } else {
	        if ($exclIsNumber) $schemaValue = Math[$isMax ? 'min' : 'max']($schemaExcl, $schema);
	        if ($schemaExcl === ($exclIsNumber ? $schemaValue : true)) {
	          $exclusive = true;
	          $errorKeyword = $exclusiveKeyword;
	          $errSchemaPath = it.errSchemaPath + '/' + $exclusiveKeyword;
	          $notOp += '=';
	        } else {
	          $exclusive = false;
	          $opStr += '=';
	        }
	      }
	      var $opExpr = '\'' + $opStr + '\'';
	      out += ' if ( ';
	      if ($isData) {
	        out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'number\') || ';
	      }
	      out += ' ' + ($data) + ' ' + ($notOp) + ' ' + ($schemaValue) + ' || ' + ($data) + ' !== ' + ($data) + ') { ';
	    }
	  }
	  $errorKeyword = $errorKeyword || $keyword;
	  var $$outStack = $$outStack || [];
	  $$outStack.push(out);
	  out = ''; /* istanbul ignore else */
	  if (it.createErrors !== false) {
	    out += ' { keyword: \'' + ($errorKeyword || '_limit') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { comparison: ' + ($opExpr) + ', limit: ' + ($schemaValue) + ', exclusive: ' + ($exclusive) + ' } ';
	    if (it.opts.messages !== false) {
	      out += ' , message: \'should be ' + ($opStr) + ' ';
	      if ($isData) {
	        out += '\' + ' + ($schemaValue);
	      } else {
	        out += '' + ($schemaValue) + '\'';
	      }
	    }
	    if (it.opts.verbose) {
	      out += ' , schema:  ';
	      if ($isData) {
	        out += 'validate.schema' + ($schemaPath);
	      } else {
	        out += '' + ($schema);
	      }
	      out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
	    }
	    out += ' } ';
	  } else {
	    out += ' {} ';
	  }
	  var __err = out;
	  out = $$outStack.pop();
	  if (!it.compositeRule && $breakOnError) {
	    /* istanbul ignore if */
	    if (it.async) {
	      out += ' throw new ValidationError([' + (__err) + ']); ';
	    } else {
	      out += ' validate.errors = [' + (__err) + ']; return false; ';
	    }
	  } else {
	    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	  }
	  out += ' } ';
	  if ($breakOnError) {
	    out += ' else { ';
	  }
	  return out;
	};

	var _limitItems = function generate__limitItems(it, $keyword, $ruleType) {
	  var out = ' ';
	  var $lvl = it.level;
	  var $dataLvl = it.dataLevel;
	  var $schema = it.schema[$keyword];
	  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
	  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
	  var $breakOnError = !it.opts.allErrors;
	  var $errorKeyword;
	  var $data = 'data' + ($dataLvl || '');
	  var $isData = it.opts.$data && $schema && $schema.$data,
	    $schemaValue;
	  if ($isData) {
	    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
	    $schemaValue = 'schema' + $lvl;
	  } else {
	    $schemaValue = $schema;
	  }
	  if (!($isData || typeof $schema == 'number')) {
	    throw new Error($keyword + ' must be number');
	  }
	  var $op = $keyword == 'maxItems' ? '>' : '<';
	  out += 'if ( ';
	  if ($isData) {
	    out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'number\') || ';
	  }
	  out += ' ' + ($data) + '.length ' + ($op) + ' ' + ($schemaValue) + ') { ';
	  var $errorKeyword = $keyword;
	  var $$outStack = $$outStack || [];
	  $$outStack.push(out);
	  out = ''; /* istanbul ignore else */
	  if (it.createErrors !== false) {
	    out += ' { keyword: \'' + ($errorKeyword || '_limitItems') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { limit: ' + ($schemaValue) + ' } ';
	    if (it.opts.messages !== false) {
	      out += ' , message: \'should NOT have ';
	      if ($keyword == 'maxItems') {
	        out += 'more';
	      } else {
	        out += 'fewer';
	      }
	      out += ' than ';
	      if ($isData) {
	        out += '\' + ' + ($schemaValue) + ' + \'';
	      } else {
	        out += '' + ($schema);
	      }
	      out += ' items\' ';
	    }
	    if (it.opts.verbose) {
	      out += ' , schema:  ';
	      if ($isData) {
	        out += 'validate.schema' + ($schemaPath);
	      } else {
	        out += '' + ($schema);
	      }
	      out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
	    }
	    out += ' } ';
	  } else {
	    out += ' {} ';
	  }
	  var __err = out;
	  out = $$outStack.pop();
	  if (!it.compositeRule && $breakOnError) {
	    /* istanbul ignore if */
	    if (it.async) {
	      out += ' throw new ValidationError([' + (__err) + ']); ';
	    } else {
	      out += ' validate.errors = [' + (__err) + ']; return false; ';
	    }
	  } else {
	    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	  }
	  out += '} ';
	  if ($breakOnError) {
	    out += ' else { ';
	  }
	  return out;
	};

	var _limitLength = function generate__limitLength(it, $keyword, $ruleType) {
	  var out = ' ';
	  var $lvl = it.level;
	  var $dataLvl = it.dataLevel;
	  var $schema = it.schema[$keyword];
	  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
	  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
	  var $breakOnError = !it.opts.allErrors;
	  var $errorKeyword;
	  var $data = 'data' + ($dataLvl || '');
	  var $isData = it.opts.$data && $schema && $schema.$data,
	    $schemaValue;
	  if ($isData) {
	    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
	    $schemaValue = 'schema' + $lvl;
	  } else {
	    $schemaValue = $schema;
	  }
	  if (!($isData || typeof $schema == 'number')) {
	    throw new Error($keyword + ' must be number');
	  }
	  var $op = $keyword == 'maxLength' ? '>' : '<';
	  out += 'if ( ';
	  if ($isData) {
	    out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'number\') || ';
	  }
	  if (it.opts.unicode === false) {
	    out += ' ' + ($data) + '.length ';
	  } else {
	    out += ' ucs2length(' + ($data) + ') ';
	  }
	  out += ' ' + ($op) + ' ' + ($schemaValue) + ') { ';
	  var $errorKeyword = $keyword;
	  var $$outStack = $$outStack || [];
	  $$outStack.push(out);
	  out = ''; /* istanbul ignore else */
	  if (it.createErrors !== false) {
	    out += ' { keyword: \'' + ($errorKeyword || '_limitLength') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { limit: ' + ($schemaValue) + ' } ';
	    if (it.opts.messages !== false) {
	      out += ' , message: \'should NOT be ';
	      if ($keyword == 'maxLength') {
	        out += 'longer';
	      } else {
	        out += 'shorter';
	      }
	      out += ' than ';
	      if ($isData) {
	        out += '\' + ' + ($schemaValue) + ' + \'';
	      } else {
	        out += '' + ($schema);
	      }
	      out += ' characters\' ';
	    }
	    if (it.opts.verbose) {
	      out += ' , schema:  ';
	      if ($isData) {
	        out += 'validate.schema' + ($schemaPath);
	      } else {
	        out += '' + ($schema);
	      }
	      out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
	    }
	    out += ' } ';
	  } else {
	    out += ' {} ';
	  }
	  var __err = out;
	  out = $$outStack.pop();
	  if (!it.compositeRule && $breakOnError) {
	    /* istanbul ignore if */
	    if (it.async) {
	      out += ' throw new ValidationError([' + (__err) + ']); ';
	    } else {
	      out += ' validate.errors = [' + (__err) + ']; return false; ';
	    }
	  } else {
	    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	  }
	  out += '} ';
	  if ($breakOnError) {
	    out += ' else { ';
	  }
	  return out;
	};

	var _limitProperties = function generate__limitProperties(it, $keyword, $ruleType) {
	  var out = ' ';
	  var $lvl = it.level;
	  var $dataLvl = it.dataLevel;
	  var $schema = it.schema[$keyword];
	  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
	  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
	  var $breakOnError = !it.opts.allErrors;
	  var $errorKeyword;
	  var $data = 'data' + ($dataLvl || '');
	  var $isData = it.opts.$data && $schema && $schema.$data,
	    $schemaValue;
	  if ($isData) {
	    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
	    $schemaValue = 'schema' + $lvl;
	  } else {
	    $schemaValue = $schema;
	  }
	  if (!($isData || typeof $schema == 'number')) {
	    throw new Error($keyword + ' must be number');
	  }
	  var $op = $keyword == 'maxProperties' ? '>' : '<';
	  out += 'if ( ';
	  if ($isData) {
	    out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'number\') || ';
	  }
	  out += ' Object.keys(' + ($data) + ').length ' + ($op) + ' ' + ($schemaValue) + ') { ';
	  var $errorKeyword = $keyword;
	  var $$outStack = $$outStack || [];
	  $$outStack.push(out);
	  out = ''; /* istanbul ignore else */
	  if (it.createErrors !== false) {
	    out += ' { keyword: \'' + ($errorKeyword || '_limitProperties') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { limit: ' + ($schemaValue) + ' } ';
	    if (it.opts.messages !== false) {
	      out += ' , message: \'should NOT have ';
	      if ($keyword == 'maxProperties') {
	        out += 'more';
	      } else {
	        out += 'fewer';
	      }
	      out += ' than ';
	      if ($isData) {
	        out += '\' + ' + ($schemaValue) + ' + \'';
	      } else {
	        out += '' + ($schema);
	      }
	      out += ' properties\' ';
	    }
	    if (it.opts.verbose) {
	      out += ' , schema:  ';
	      if ($isData) {
	        out += 'validate.schema' + ($schemaPath);
	      } else {
	        out += '' + ($schema);
	      }
	      out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
	    }
	    out += ' } ';
	  } else {
	    out += ' {} ';
	  }
	  var __err = out;
	  out = $$outStack.pop();
	  if (!it.compositeRule && $breakOnError) {
	    /* istanbul ignore if */
	    if (it.async) {
	      out += ' throw new ValidationError([' + (__err) + ']); ';
	    } else {
	      out += ' validate.errors = [' + (__err) + ']; return false; ';
	    }
	  } else {
	    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	  }
	  out += '} ';
	  if ($breakOnError) {
	    out += ' else { ';
	  }
	  return out;
	};

	var multipleOf = function generate_multipleOf(it, $keyword, $ruleType) {
	  var out = ' ';
	  var $lvl = it.level;
	  var $dataLvl = it.dataLevel;
	  var $schema = it.schema[$keyword];
	  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
	  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
	  var $breakOnError = !it.opts.allErrors;
	  var $data = 'data' + ($dataLvl || '');
	  var $isData = it.opts.$data && $schema && $schema.$data,
	    $schemaValue;
	  if ($isData) {
	    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
	    $schemaValue = 'schema' + $lvl;
	  } else {
	    $schemaValue = $schema;
	  }
	  if (!($isData || typeof $schema == 'number')) {
	    throw new Error($keyword + ' must be number');
	  }
	  out += 'var division' + ($lvl) + ';if (';
	  if ($isData) {
	    out += ' ' + ($schemaValue) + ' !== undefined && ( typeof ' + ($schemaValue) + ' != \'number\' || ';
	  }
	  out += ' (division' + ($lvl) + ' = ' + ($data) + ' / ' + ($schemaValue) + ', ';
	  if (it.opts.multipleOfPrecision) {
	    out += ' Math.abs(Math.round(division' + ($lvl) + ') - division' + ($lvl) + ') > 1e-' + (it.opts.multipleOfPrecision) + ' ';
	  } else {
	    out += ' division' + ($lvl) + ' !== parseInt(division' + ($lvl) + ') ';
	  }
	  out += ' ) ';
	  if ($isData) {
	    out += '  )  ';
	  }
	  out += ' ) {   ';
	  var $$outStack = $$outStack || [];
	  $$outStack.push(out);
	  out = ''; /* istanbul ignore else */
	  if (it.createErrors !== false) {
	    out += ' { keyword: \'' + ('multipleOf') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { multipleOf: ' + ($schemaValue) + ' } ';
	    if (it.opts.messages !== false) {
	      out += ' , message: \'should be multiple of ';
	      if ($isData) {
	        out += '\' + ' + ($schemaValue);
	      } else {
	        out += '' + ($schemaValue) + '\'';
	      }
	    }
	    if (it.opts.verbose) {
	      out += ' , schema:  ';
	      if ($isData) {
	        out += 'validate.schema' + ($schemaPath);
	      } else {
	        out += '' + ($schema);
	      }
	      out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
	    }
	    out += ' } ';
	  } else {
	    out += ' {} ';
	  }
	  var __err = out;
	  out = $$outStack.pop();
	  if (!it.compositeRule && $breakOnError) {
	    /* istanbul ignore if */
	    if (it.async) {
	      out += ' throw new ValidationError([' + (__err) + ']); ';
	    } else {
	      out += ' validate.errors = [' + (__err) + ']; return false; ';
	    }
	  } else {
	    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	  }
	  out += '} ';
	  if ($breakOnError) {
	    out += ' else { ';
	  }
	  return out;
	};

	var not = function generate_not(it, $keyword, $ruleType) {
	  var out = ' ';
	  var $lvl = it.level;
	  var $dataLvl = it.dataLevel;
	  var $schema = it.schema[$keyword];
	  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
	  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
	  var $breakOnError = !it.opts.allErrors;
	  var $data = 'data' + ($dataLvl || '');
	  var $errs = 'errs__' + $lvl;
	  var $it = it.util.copy(it);
	  $it.level++;
	  var $nextValid = 'valid' + $it.level;
	  if ((it.opts.strictKeywords ? (typeof $schema == 'object' && Object.keys($schema).length > 0) || $schema === false : it.util.schemaHasRules($schema, it.RULES.all))) {
	    $it.schema = $schema;
	    $it.schemaPath = $schemaPath;
	    $it.errSchemaPath = $errSchemaPath;
	    out += ' var ' + ($errs) + ' = errors;  ';
	    var $wasComposite = it.compositeRule;
	    it.compositeRule = $it.compositeRule = true;
	    $it.createErrors = false;
	    var $allErrorsOption;
	    if ($it.opts.allErrors) {
	      $allErrorsOption = $it.opts.allErrors;
	      $it.opts.allErrors = false;
	    }
	    out += ' ' + (it.validate($it)) + ' ';
	    $it.createErrors = true;
	    if ($allErrorsOption) $it.opts.allErrors = $allErrorsOption;
	    it.compositeRule = $it.compositeRule = $wasComposite;
	    out += ' if (' + ($nextValid) + ') {   ';
	    var $$outStack = $$outStack || [];
	    $$outStack.push(out);
	    out = ''; /* istanbul ignore else */
	    if (it.createErrors !== false) {
	      out += ' { keyword: \'' + ('not') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';
	      if (it.opts.messages !== false) {
	        out += ' , message: \'should NOT be valid\' ';
	      }
	      if (it.opts.verbose) {
	        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
	      }
	      out += ' } ';
	    } else {
	      out += ' {} ';
	    }
	    var __err = out;
	    out = $$outStack.pop();
	    if (!it.compositeRule && $breakOnError) {
	      /* istanbul ignore if */
	      if (it.async) {
	        out += ' throw new ValidationError([' + (__err) + ']); ';
	      } else {
	        out += ' validate.errors = [' + (__err) + ']; return false; ';
	      }
	    } else {
	      out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	    }
	    out += ' } else {  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; } ';
	    if (it.opts.allErrors) {
	      out += ' } ';
	    }
	  } else {
	    out += '  var err =   '; /* istanbul ignore else */
	    if (it.createErrors !== false) {
	      out += ' { keyword: \'' + ('not') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';
	      if (it.opts.messages !== false) {
	        out += ' , message: \'should NOT be valid\' ';
	      }
	      if (it.opts.verbose) {
	        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
	      }
	      out += ' } ';
	    } else {
	      out += ' {} ';
	    }
	    out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	    if ($breakOnError) {
	      out += ' if (false) { ';
	    }
	  }
	  return out;
	};

	var oneOf = function generate_oneOf(it, $keyword, $ruleType) {
	  var out = ' ';
	  var $lvl = it.level;
	  var $dataLvl = it.dataLevel;
	  var $schema = it.schema[$keyword];
	  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
	  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
	  var $breakOnError = !it.opts.allErrors;
	  var $data = 'data' + ($dataLvl || '');
	  var $valid = 'valid' + $lvl;
	  var $errs = 'errs__' + $lvl;
	  var $it = it.util.copy(it);
	  var $closingBraces = '';
	  $it.level++;
	  var $nextValid = 'valid' + $it.level;
	  var $currentBaseId = $it.baseId,
	    $prevValid = 'prevValid' + $lvl,
	    $passingSchemas = 'passingSchemas' + $lvl;
	  out += 'var ' + ($errs) + ' = errors , ' + ($prevValid) + ' = false , ' + ($valid) + ' = false , ' + ($passingSchemas) + ' = null; ';
	  var $wasComposite = it.compositeRule;
	  it.compositeRule = $it.compositeRule = true;
	  var arr1 = $schema;
	  if (arr1) {
	    var $sch, $i = -1,
	      l1 = arr1.length - 1;
	    while ($i < l1) {
	      $sch = arr1[$i += 1];
	      if ((it.opts.strictKeywords ? (typeof $sch == 'object' && Object.keys($sch).length > 0) || $sch === false : it.util.schemaHasRules($sch, it.RULES.all))) {
	        $it.schema = $sch;
	        $it.schemaPath = $schemaPath + '[' + $i + ']';
	        $it.errSchemaPath = $errSchemaPath + '/' + $i;
	        out += '  ' + (it.validate($it)) + ' ';
	        $it.baseId = $currentBaseId;
	      } else {
	        out += ' var ' + ($nextValid) + ' = true; ';
	      }
	      if ($i) {
	        out += ' if (' + ($nextValid) + ' && ' + ($prevValid) + ') { ' + ($valid) + ' = false; ' + ($passingSchemas) + ' = [' + ($passingSchemas) + ', ' + ($i) + ']; } else { ';
	        $closingBraces += '}';
	      }
	      out += ' if (' + ($nextValid) + ') { ' + ($valid) + ' = ' + ($prevValid) + ' = true; ' + ($passingSchemas) + ' = ' + ($i) + '; }';
	    }
	  }
	  it.compositeRule = $it.compositeRule = $wasComposite;
	  out += '' + ($closingBraces) + 'if (!' + ($valid) + ') {   var err =   '; /* istanbul ignore else */
	  if (it.createErrors !== false) {
	    out += ' { keyword: \'' + ('oneOf') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { passingSchemas: ' + ($passingSchemas) + ' } ';
	    if (it.opts.messages !== false) {
	      out += ' , message: \'should match exactly one schema in oneOf\' ';
	    }
	    if (it.opts.verbose) {
	      out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
	    }
	    out += ' } ';
	  } else {
	    out += ' {} ';
	  }
	  out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	  if (!it.compositeRule && $breakOnError) {
	    /* istanbul ignore if */
	    if (it.async) {
	      out += ' throw new ValidationError(vErrors); ';
	    } else {
	      out += ' validate.errors = vErrors; return false; ';
	    }
	  }
	  out += '} else {  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; }';
	  if (it.opts.allErrors) {
	    out += ' } ';
	  }
	  return out;
	};

	var pattern = function generate_pattern(it, $keyword, $ruleType) {
	  var out = ' ';
	  var $lvl = it.level;
	  var $dataLvl = it.dataLevel;
	  var $schema = it.schema[$keyword];
	  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
	  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
	  var $breakOnError = !it.opts.allErrors;
	  var $data = 'data' + ($dataLvl || '');
	  var $isData = it.opts.$data && $schema && $schema.$data,
	    $schemaValue;
	  if ($isData) {
	    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
	    $schemaValue = 'schema' + $lvl;
	  } else {
	    $schemaValue = $schema;
	  }
	  var $regexp = $isData ? '(new RegExp(' + $schemaValue + '))' : it.usePattern($schema);
	  out += 'if ( ';
	  if ($isData) {
	    out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'string\') || ';
	  }
	  out += ' !' + ($regexp) + '.test(' + ($data) + ') ) {   ';
	  var $$outStack = $$outStack || [];
	  $$outStack.push(out);
	  out = ''; /* istanbul ignore else */
	  if (it.createErrors !== false) {
	    out += ' { keyword: \'' + ('pattern') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { pattern:  ';
	    if ($isData) {
	      out += '' + ($schemaValue);
	    } else {
	      out += '' + (it.util.toQuotedString($schema));
	    }
	    out += '  } ';
	    if (it.opts.messages !== false) {
	      out += ' , message: \'should match pattern "';
	      if ($isData) {
	        out += '\' + ' + ($schemaValue) + ' + \'';
	      } else {
	        out += '' + (it.util.escapeQuotes($schema));
	      }
	      out += '"\' ';
	    }
	    if (it.opts.verbose) {
	      out += ' , schema:  ';
	      if ($isData) {
	        out += 'validate.schema' + ($schemaPath);
	      } else {
	        out += '' + (it.util.toQuotedString($schema));
	      }
	      out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
	    }
	    out += ' } ';
	  } else {
	    out += ' {} ';
	  }
	  var __err = out;
	  out = $$outStack.pop();
	  if (!it.compositeRule && $breakOnError) {
	    /* istanbul ignore if */
	    if (it.async) {
	      out += ' throw new ValidationError([' + (__err) + ']); ';
	    } else {
	      out += ' validate.errors = [' + (__err) + ']; return false; ';
	    }
	  } else {
	    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	  }
	  out += '} ';
	  if ($breakOnError) {
	    out += ' else { ';
	  }
	  return out;
	};

	var properties$m = function generate_properties(it, $keyword, $ruleType) {
	  var out = ' ';
	  var $lvl = it.level;
	  var $dataLvl = it.dataLevel;
	  var $schema = it.schema[$keyword];
	  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
	  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
	  var $breakOnError = !it.opts.allErrors;
	  var $data = 'data' + ($dataLvl || '');
	  var $errs = 'errs__' + $lvl;
	  var $it = it.util.copy(it);
	  var $closingBraces = '';
	  $it.level++;
	  var $nextValid = 'valid' + $it.level;
	  var $key = 'key' + $lvl,
	    $idx = 'idx' + $lvl,
	    $dataNxt = $it.dataLevel = it.dataLevel + 1,
	    $nextData = 'data' + $dataNxt,
	    $dataProperties = 'dataProperties' + $lvl;
	  var $schemaKeys = Object.keys($schema || {}).filter(notProto),
	    $pProperties = it.schema.patternProperties || {},
	    $pPropertyKeys = Object.keys($pProperties).filter(notProto),
	    $aProperties = it.schema.additionalProperties,
	    $someProperties = $schemaKeys.length || $pPropertyKeys.length,
	    $noAdditional = $aProperties === false,
	    $additionalIsSchema = typeof $aProperties == 'object' && Object.keys($aProperties).length,
	    $removeAdditional = it.opts.removeAdditional,
	    $checkAdditional = $noAdditional || $additionalIsSchema || $removeAdditional,
	    $ownProperties = it.opts.ownProperties,
	    $currentBaseId = it.baseId;
	  var $required = it.schema.required;
	  if ($required && !(it.opts.$data && $required.$data) && $required.length < it.opts.loopRequired) {
	    var $requiredHash = it.util.toHash($required);
	  }

	  function notProto(p) {
	    return p !== '__proto__';
	  }
	  out += 'var ' + ($errs) + ' = errors;var ' + ($nextValid) + ' = true;';
	  if ($ownProperties) {
	    out += ' var ' + ($dataProperties) + ' = undefined;';
	  }
	  if ($checkAdditional) {
	    if ($ownProperties) {
	      out += ' ' + ($dataProperties) + ' = ' + ($dataProperties) + ' || Object.keys(' + ($data) + '); for (var ' + ($idx) + '=0; ' + ($idx) + '<' + ($dataProperties) + '.length; ' + ($idx) + '++) { var ' + ($key) + ' = ' + ($dataProperties) + '[' + ($idx) + ']; ';
	    } else {
	      out += ' for (var ' + ($key) + ' in ' + ($data) + ') { ';
	    }
	    if ($someProperties) {
	      out += ' var isAdditional' + ($lvl) + ' = !(false ';
	      if ($schemaKeys.length) {
	        if ($schemaKeys.length > 8) {
	          out += ' || validate.schema' + ($schemaPath) + '.hasOwnProperty(' + ($key) + ') ';
	        } else {
	          var arr1 = $schemaKeys;
	          if (arr1) {
	            var $propertyKey, i1 = -1,
	              l1 = arr1.length - 1;
	            while (i1 < l1) {
	              $propertyKey = arr1[i1 += 1];
	              out += ' || ' + ($key) + ' == ' + (it.util.toQuotedString($propertyKey)) + ' ';
	            }
	          }
	        }
	      }
	      if ($pPropertyKeys.length) {
	        var arr2 = $pPropertyKeys;
	        if (arr2) {
	          var $pProperty, $i = -1,
	            l2 = arr2.length - 1;
	          while ($i < l2) {
	            $pProperty = arr2[$i += 1];
	            out += ' || ' + (it.usePattern($pProperty)) + '.test(' + ($key) + ') ';
	          }
	        }
	      }
	      out += ' ); if (isAdditional' + ($lvl) + ') { ';
	    }
	    if ($removeAdditional == 'all') {
	      out += ' delete ' + ($data) + '[' + ($key) + ']; ';
	    } else {
	      var $currentErrorPath = it.errorPath;
	      var $additionalProperty = '\' + ' + $key + ' + \'';
	      if (it.opts._errorDataPathProperty) {
	        it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
	      }
	      if ($noAdditional) {
	        if ($removeAdditional) {
	          out += ' delete ' + ($data) + '[' + ($key) + ']; ';
	        } else {
	          out += ' ' + ($nextValid) + ' = false; ';
	          var $currErrSchemaPath = $errSchemaPath;
	          $errSchemaPath = it.errSchemaPath + '/additionalProperties';
	          var $$outStack = $$outStack || [];
	          $$outStack.push(out);
	          out = ''; /* istanbul ignore else */
	          if (it.createErrors !== false) {
	            out += ' { keyword: \'' + ('additionalProperties') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { additionalProperty: \'' + ($additionalProperty) + '\' } ';
	            if (it.opts.messages !== false) {
	              out += ' , message: \'';
	              if (it.opts._errorDataPathProperty) {
	                out += 'is an invalid additional property';
	              } else {
	                out += 'should NOT have additional properties';
	              }
	              out += '\' ';
	            }
	            if (it.opts.verbose) {
	              out += ' , schema: false , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
	            }
	            out += ' } ';
	          } else {
	            out += ' {} ';
	          }
	          var __err = out;
	          out = $$outStack.pop();
	          if (!it.compositeRule && $breakOnError) {
	            /* istanbul ignore if */
	            if (it.async) {
	              out += ' throw new ValidationError([' + (__err) + ']); ';
	            } else {
	              out += ' validate.errors = [' + (__err) + ']; return false; ';
	            }
	          } else {
	            out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	          }
	          $errSchemaPath = $currErrSchemaPath;
	          if ($breakOnError) {
	            out += ' break; ';
	          }
	        }
	      } else if ($additionalIsSchema) {
	        if ($removeAdditional == 'failing') {
	          out += ' var ' + ($errs) + ' = errors;  ';
	          var $wasComposite = it.compositeRule;
	          it.compositeRule = $it.compositeRule = true;
	          $it.schema = $aProperties;
	          $it.schemaPath = it.schemaPath + '.additionalProperties';
	          $it.errSchemaPath = it.errSchemaPath + '/additionalProperties';
	          $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
	          var $passData = $data + '[' + $key + ']';
	          $it.dataPathArr[$dataNxt] = $key;
	          var $code = it.validate($it);
	          $it.baseId = $currentBaseId;
	          if (it.util.varOccurences($code, $nextData) < 2) {
	            out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
	          } else {
	            out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
	          }
	          out += ' if (!' + ($nextValid) + ') { errors = ' + ($errs) + '; if (validate.errors !== null) { if (errors) validate.errors.length = errors; else validate.errors = null; } delete ' + ($data) + '[' + ($key) + ']; }  ';
	          it.compositeRule = $it.compositeRule = $wasComposite;
	        } else {
	          $it.schema = $aProperties;
	          $it.schemaPath = it.schemaPath + '.additionalProperties';
	          $it.errSchemaPath = it.errSchemaPath + '/additionalProperties';
	          $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
	          var $passData = $data + '[' + $key + ']';
	          $it.dataPathArr[$dataNxt] = $key;
	          var $code = it.validate($it);
	          $it.baseId = $currentBaseId;
	          if (it.util.varOccurences($code, $nextData) < 2) {
	            out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
	          } else {
	            out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
	          }
	          if ($breakOnError) {
	            out += ' if (!' + ($nextValid) + ') break; ';
	          }
	        }
	      }
	      it.errorPath = $currentErrorPath;
	    }
	    if ($someProperties) {
	      out += ' } ';
	    }
	    out += ' }  ';
	    if ($breakOnError) {
	      out += ' if (' + ($nextValid) + ') { ';
	      $closingBraces += '}';
	    }
	  }
	  var $useDefaults = it.opts.useDefaults && !it.compositeRule;
	  if ($schemaKeys.length) {
	    var arr3 = $schemaKeys;
	    if (arr3) {
	      var $propertyKey, i3 = -1,
	        l3 = arr3.length - 1;
	      while (i3 < l3) {
	        $propertyKey = arr3[i3 += 1];
	        var $sch = $schema[$propertyKey];
	        if ((it.opts.strictKeywords ? (typeof $sch == 'object' && Object.keys($sch).length > 0) || $sch === false : it.util.schemaHasRules($sch, it.RULES.all))) {
	          var $prop = it.util.getProperty($propertyKey),
	            $passData = $data + $prop,
	            $hasDefault = $useDefaults && $sch.default !== undefined;
	          $it.schema = $sch;
	          $it.schemaPath = $schemaPath + $prop;
	          $it.errSchemaPath = $errSchemaPath + '/' + it.util.escapeFragment($propertyKey);
	          $it.errorPath = it.util.getPath(it.errorPath, $propertyKey, it.opts.jsonPointers);
	          $it.dataPathArr[$dataNxt] = it.util.toQuotedString($propertyKey);
	          var $code = it.validate($it);
	          $it.baseId = $currentBaseId;
	          if (it.util.varOccurences($code, $nextData) < 2) {
	            $code = it.util.varReplace($code, $nextData, $passData);
	            var $useData = $passData;
	          } else {
	            var $useData = $nextData;
	            out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ';
	          }
	          if ($hasDefault) {
	            out += ' ' + ($code) + ' ';
	          } else {
	            if ($requiredHash && $requiredHash[$propertyKey]) {
	              out += ' if ( ' + ($useData) + ' === undefined ';
	              if ($ownProperties) {
	                out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($propertyKey)) + '\') ';
	              }
	              out += ') { ' + ($nextValid) + ' = false; ';
	              var $currentErrorPath = it.errorPath,
	                $currErrSchemaPath = $errSchemaPath,
	                $missingProperty = it.util.escapeQuotes($propertyKey);
	              if (it.opts._errorDataPathProperty) {
	                it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
	              }
	              $errSchemaPath = it.errSchemaPath + '/required';
	              var $$outStack = $$outStack || [];
	              $$outStack.push(out);
	              out = ''; /* istanbul ignore else */
	              if (it.createErrors !== false) {
	                out += ' { keyword: \'' + ('required') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \'' + ($missingProperty) + '\' } ';
	                if (it.opts.messages !== false) {
	                  out += ' , message: \'';
	                  if (it.opts._errorDataPathProperty) {
	                    out += 'is a required property';
	                  } else {
	                    out += 'should have required property \\\'' + ($missingProperty) + '\\\'';
	                  }
	                  out += '\' ';
	                }
	                if (it.opts.verbose) {
	                  out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
	                }
	                out += ' } ';
	              } else {
	                out += ' {} ';
	              }
	              var __err = out;
	              out = $$outStack.pop();
	              if (!it.compositeRule && $breakOnError) {
	                /* istanbul ignore if */
	                if (it.async) {
	                  out += ' throw new ValidationError([' + (__err) + ']); ';
	                } else {
	                  out += ' validate.errors = [' + (__err) + ']; return false; ';
	                }
	              } else {
	                out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	              }
	              $errSchemaPath = $currErrSchemaPath;
	              it.errorPath = $currentErrorPath;
	              out += ' } else { ';
	            } else {
	              if ($breakOnError) {
	                out += ' if ( ' + ($useData) + ' === undefined ';
	                if ($ownProperties) {
	                  out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($propertyKey)) + '\') ';
	                }
	                out += ') { ' + ($nextValid) + ' = true; } else { ';
	              } else {
	                out += ' if (' + ($useData) + ' !== undefined ';
	                if ($ownProperties) {
	                  out += ' &&   Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($propertyKey)) + '\') ';
	                }
	                out += ' ) { ';
	              }
	            }
	            out += ' ' + ($code) + ' } ';
	          }
	        }
	        if ($breakOnError) {
	          out += ' if (' + ($nextValid) + ') { ';
	          $closingBraces += '}';
	        }
	      }
	    }
	  }
	  if ($pPropertyKeys.length) {
	    var arr4 = $pPropertyKeys;
	    if (arr4) {
	      var $pProperty, i4 = -1,
	        l4 = arr4.length - 1;
	      while (i4 < l4) {
	        $pProperty = arr4[i4 += 1];
	        var $sch = $pProperties[$pProperty];
	        if ((it.opts.strictKeywords ? (typeof $sch == 'object' && Object.keys($sch).length > 0) || $sch === false : it.util.schemaHasRules($sch, it.RULES.all))) {
	          $it.schema = $sch;
	          $it.schemaPath = it.schemaPath + '.patternProperties' + it.util.getProperty($pProperty);
	          $it.errSchemaPath = it.errSchemaPath + '/patternProperties/' + it.util.escapeFragment($pProperty);
	          if ($ownProperties) {
	            out += ' ' + ($dataProperties) + ' = ' + ($dataProperties) + ' || Object.keys(' + ($data) + '); for (var ' + ($idx) + '=0; ' + ($idx) + '<' + ($dataProperties) + '.length; ' + ($idx) + '++) { var ' + ($key) + ' = ' + ($dataProperties) + '[' + ($idx) + ']; ';
	          } else {
	            out += ' for (var ' + ($key) + ' in ' + ($data) + ') { ';
	          }
	          out += ' if (' + (it.usePattern($pProperty)) + '.test(' + ($key) + ')) { ';
	          $it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
	          var $passData = $data + '[' + $key + ']';
	          $it.dataPathArr[$dataNxt] = $key;
	          var $code = it.validate($it);
	          $it.baseId = $currentBaseId;
	          if (it.util.varOccurences($code, $nextData) < 2) {
	            out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
	          } else {
	            out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
	          }
	          if ($breakOnError) {
	            out += ' if (!' + ($nextValid) + ') break; ';
	          }
	          out += ' } ';
	          if ($breakOnError) {
	            out += ' else ' + ($nextValid) + ' = true; ';
	          }
	          out += ' }  ';
	          if ($breakOnError) {
	            out += ' if (' + ($nextValid) + ') { ';
	            $closingBraces += '}';
	          }
	        }
	      }
	    }
	  }
	  if ($breakOnError) {
	    out += ' ' + ($closingBraces) + ' if (' + ($errs) + ' == errors) {';
	  }
	  return out;
	};

	var propertyNames = function generate_propertyNames(it, $keyword, $ruleType) {
	  var out = ' ';
	  var $lvl = it.level;
	  var $dataLvl = it.dataLevel;
	  var $schema = it.schema[$keyword];
	  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
	  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
	  var $breakOnError = !it.opts.allErrors;
	  var $data = 'data' + ($dataLvl || '');
	  var $errs = 'errs__' + $lvl;
	  var $it = it.util.copy(it);
	  var $closingBraces = '';
	  $it.level++;
	  var $nextValid = 'valid' + $it.level;
	  out += 'var ' + ($errs) + ' = errors;';
	  if ((it.opts.strictKeywords ? (typeof $schema == 'object' && Object.keys($schema).length > 0) || $schema === false : it.util.schemaHasRules($schema, it.RULES.all))) {
	    $it.schema = $schema;
	    $it.schemaPath = $schemaPath;
	    $it.errSchemaPath = $errSchemaPath;
	    var $key = 'key' + $lvl,
	      $idx = 'idx' + $lvl,
	      $i = 'i' + $lvl,
	      $invalidName = '\' + ' + $key + ' + \'',
	      $dataNxt = $it.dataLevel = it.dataLevel + 1,
	      $nextData = 'data' + $dataNxt,
	      $dataProperties = 'dataProperties' + $lvl,
	      $ownProperties = it.opts.ownProperties,
	      $currentBaseId = it.baseId;
	    if ($ownProperties) {
	      out += ' var ' + ($dataProperties) + ' = undefined; ';
	    }
	    if ($ownProperties) {
	      out += ' ' + ($dataProperties) + ' = ' + ($dataProperties) + ' || Object.keys(' + ($data) + '); for (var ' + ($idx) + '=0; ' + ($idx) + '<' + ($dataProperties) + '.length; ' + ($idx) + '++) { var ' + ($key) + ' = ' + ($dataProperties) + '[' + ($idx) + ']; ';
	    } else {
	      out += ' for (var ' + ($key) + ' in ' + ($data) + ') { ';
	    }
	    out += ' var startErrs' + ($lvl) + ' = errors; ';
	    var $passData = $key;
	    var $wasComposite = it.compositeRule;
	    it.compositeRule = $it.compositeRule = true;
	    var $code = it.validate($it);
	    $it.baseId = $currentBaseId;
	    if (it.util.varOccurences($code, $nextData) < 2) {
	      out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
	    } else {
	      out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
	    }
	    it.compositeRule = $it.compositeRule = $wasComposite;
	    out += ' if (!' + ($nextValid) + ') { for (var ' + ($i) + '=startErrs' + ($lvl) + '; ' + ($i) + '<errors; ' + ($i) + '++) { vErrors[' + ($i) + '].propertyName = ' + ($key) + '; }   var err =   '; /* istanbul ignore else */
	    if (it.createErrors !== false) {
	      out += ' { keyword: \'' + ('propertyNames') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { propertyName: \'' + ($invalidName) + '\' } ';
	      if (it.opts.messages !== false) {
	        out += ' , message: \'property name \\\'' + ($invalidName) + '\\\' is invalid\' ';
	      }
	      if (it.opts.verbose) {
	        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
	      }
	      out += ' } ';
	    } else {
	      out += ' {} ';
	    }
	    out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	    if (!it.compositeRule && $breakOnError) {
	      /* istanbul ignore if */
	      if (it.async) {
	        out += ' throw new ValidationError(vErrors); ';
	      } else {
	        out += ' validate.errors = vErrors; return false; ';
	      }
	    }
	    if ($breakOnError) {
	      out += ' break; ';
	    }
	    out += ' } }';
	  }
	  if ($breakOnError) {
	    out += ' ' + ($closingBraces) + ' if (' + ($errs) + ' == errors) {';
	  }
	  return out;
	};

	var required$h = function generate_required(it, $keyword, $ruleType) {
	  var out = ' ';
	  var $lvl = it.level;
	  var $dataLvl = it.dataLevel;
	  var $schema = it.schema[$keyword];
	  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
	  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
	  var $breakOnError = !it.opts.allErrors;
	  var $data = 'data' + ($dataLvl || '');
	  var $valid = 'valid' + $lvl;
	  var $isData = it.opts.$data && $schema && $schema.$data;
	  if ($isData) {
	    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
	  }
	  var $vSchema = 'schema' + $lvl;
	  if (!$isData) {
	    if ($schema.length < it.opts.loopRequired && it.schema.properties && Object.keys(it.schema.properties).length) {
	      var $required = [];
	      var arr1 = $schema;
	      if (arr1) {
	        var $property, i1 = -1,
	          l1 = arr1.length - 1;
	        while (i1 < l1) {
	          $property = arr1[i1 += 1];
	          var $propertySch = it.schema.properties[$property];
	          if (!($propertySch && (it.opts.strictKeywords ? (typeof $propertySch == 'object' && Object.keys($propertySch).length > 0) || $propertySch === false : it.util.schemaHasRules($propertySch, it.RULES.all)))) {
	            $required[$required.length] = $property;
	          }
	        }
	      }
	    } else {
	      var $required = $schema;
	    }
	  }
	  if ($isData || $required.length) {
	    var $currentErrorPath = it.errorPath,
	      $loopRequired = $isData || $required.length >= it.opts.loopRequired,
	      $ownProperties = it.opts.ownProperties;
	    if ($breakOnError) {
	      out += ' var missing' + ($lvl) + '; ';
	      if ($loopRequired) {
	        if (!$isData) {
	          out += ' var ' + ($vSchema) + ' = validate.schema' + ($schemaPath) + '; ';
	        }
	        var $i = 'i' + $lvl,
	          $propertyPath = 'schema' + $lvl + '[' + $i + ']',
	          $missingProperty = '\' + ' + $propertyPath + ' + \'';
	        if (it.opts._errorDataPathProperty) {
	          it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);
	        }
	        out += ' var ' + ($valid) + ' = true; ';
	        if ($isData) {
	          out += ' if (schema' + ($lvl) + ' === undefined) ' + ($valid) + ' = true; else if (!Array.isArray(schema' + ($lvl) + ')) ' + ($valid) + ' = false; else {';
	        }
	        out += ' for (var ' + ($i) + ' = 0; ' + ($i) + ' < ' + ($vSchema) + '.length; ' + ($i) + '++) { ' + ($valid) + ' = ' + ($data) + '[' + ($vSchema) + '[' + ($i) + ']] !== undefined ';
	        if ($ownProperties) {
	          out += ' &&   Object.prototype.hasOwnProperty.call(' + ($data) + ', ' + ($vSchema) + '[' + ($i) + ']) ';
	        }
	        out += '; if (!' + ($valid) + ') break; } ';
	        if ($isData) {
	          out += '  }  ';
	        }
	        out += '  if (!' + ($valid) + ') {   ';
	        var $$outStack = $$outStack || [];
	        $$outStack.push(out);
	        out = ''; /* istanbul ignore else */
	        if (it.createErrors !== false) {
	          out += ' { keyword: \'' + ('required') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \'' + ($missingProperty) + '\' } ';
	          if (it.opts.messages !== false) {
	            out += ' , message: \'';
	            if (it.opts._errorDataPathProperty) {
	              out += 'is a required property';
	            } else {
	              out += 'should have required property \\\'' + ($missingProperty) + '\\\'';
	            }
	            out += '\' ';
	          }
	          if (it.opts.verbose) {
	            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
	          }
	          out += ' } ';
	        } else {
	          out += ' {} ';
	        }
	        var __err = out;
	        out = $$outStack.pop();
	        if (!it.compositeRule && $breakOnError) {
	          /* istanbul ignore if */
	          if (it.async) {
	            out += ' throw new ValidationError([' + (__err) + ']); ';
	          } else {
	            out += ' validate.errors = [' + (__err) + ']; return false; ';
	          }
	        } else {
	          out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	        }
	        out += ' } else { ';
	      } else {
	        out += ' if ( ';
	        var arr2 = $required;
	        if (arr2) {
	          var $propertyKey, $i = -1,
	            l2 = arr2.length - 1;
	          while ($i < l2) {
	            $propertyKey = arr2[$i += 1];
	            if ($i) {
	              out += ' || ';
	            }
	            var $prop = it.util.getProperty($propertyKey),
	              $useData = $data + $prop;
	            out += ' ( ( ' + ($useData) + ' === undefined ';
	            if ($ownProperties) {
	              out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($propertyKey)) + '\') ';
	            }
	            out += ') && (missing' + ($lvl) + ' = ' + (it.util.toQuotedString(it.opts.jsonPointers ? $propertyKey : $prop)) + ') ) ';
	          }
	        }
	        out += ') {  ';
	        var $propertyPath = 'missing' + $lvl,
	          $missingProperty = '\' + ' + $propertyPath + ' + \'';
	        if (it.opts._errorDataPathProperty) {
	          it.errorPath = it.opts.jsonPointers ? it.util.getPathExpr($currentErrorPath, $propertyPath, true) : $currentErrorPath + ' + ' + $propertyPath;
	        }
	        var $$outStack = $$outStack || [];
	        $$outStack.push(out);
	        out = ''; /* istanbul ignore else */
	        if (it.createErrors !== false) {
	          out += ' { keyword: \'' + ('required') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \'' + ($missingProperty) + '\' } ';
	          if (it.opts.messages !== false) {
	            out += ' , message: \'';
	            if (it.opts._errorDataPathProperty) {
	              out += 'is a required property';
	            } else {
	              out += 'should have required property \\\'' + ($missingProperty) + '\\\'';
	            }
	            out += '\' ';
	          }
	          if (it.opts.verbose) {
	            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
	          }
	          out += ' } ';
	        } else {
	          out += ' {} ';
	        }
	        var __err = out;
	        out = $$outStack.pop();
	        if (!it.compositeRule && $breakOnError) {
	          /* istanbul ignore if */
	          if (it.async) {
	            out += ' throw new ValidationError([' + (__err) + ']); ';
	          } else {
	            out += ' validate.errors = [' + (__err) + ']; return false; ';
	          }
	        } else {
	          out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	        }
	        out += ' } else { ';
	      }
	    } else {
	      if ($loopRequired) {
	        if (!$isData) {
	          out += ' var ' + ($vSchema) + ' = validate.schema' + ($schemaPath) + '; ';
	        }
	        var $i = 'i' + $lvl,
	          $propertyPath = 'schema' + $lvl + '[' + $i + ']',
	          $missingProperty = '\' + ' + $propertyPath + ' + \'';
	        if (it.opts._errorDataPathProperty) {
	          it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);
	        }
	        if ($isData) {
	          out += ' if (' + ($vSchema) + ' && !Array.isArray(' + ($vSchema) + ')) {  var err =   '; /* istanbul ignore else */
	          if (it.createErrors !== false) {
	            out += ' { keyword: \'' + ('required') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \'' + ($missingProperty) + '\' } ';
	            if (it.opts.messages !== false) {
	              out += ' , message: \'';
	              if (it.opts._errorDataPathProperty) {
	                out += 'is a required property';
	              } else {
	                out += 'should have required property \\\'' + ($missingProperty) + '\\\'';
	              }
	              out += '\' ';
	            }
	            if (it.opts.verbose) {
	              out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
	            }
	            out += ' } ';
	          } else {
	            out += ' {} ';
	          }
	          out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } else if (' + ($vSchema) + ' !== undefined) { ';
	        }
	        out += ' for (var ' + ($i) + ' = 0; ' + ($i) + ' < ' + ($vSchema) + '.length; ' + ($i) + '++) { if (' + ($data) + '[' + ($vSchema) + '[' + ($i) + ']] === undefined ';
	        if ($ownProperties) {
	          out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', ' + ($vSchema) + '[' + ($i) + ']) ';
	        }
	        out += ') {  var err =   '; /* istanbul ignore else */
	        if (it.createErrors !== false) {
	          out += ' { keyword: \'' + ('required') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \'' + ($missingProperty) + '\' } ';
	          if (it.opts.messages !== false) {
	            out += ' , message: \'';
	            if (it.opts._errorDataPathProperty) {
	              out += 'is a required property';
	            } else {
	              out += 'should have required property \\\'' + ($missingProperty) + '\\\'';
	            }
	            out += '\' ';
	          }
	          if (it.opts.verbose) {
	            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
	          }
	          out += ' } ';
	        } else {
	          out += ' {} ';
	        }
	        out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } } ';
	        if ($isData) {
	          out += '  }  ';
	        }
	      } else {
	        var arr3 = $required;
	        if (arr3) {
	          var $propertyKey, i3 = -1,
	            l3 = arr3.length - 1;
	          while (i3 < l3) {
	            $propertyKey = arr3[i3 += 1];
	            var $prop = it.util.getProperty($propertyKey),
	              $missingProperty = it.util.escapeQuotes($propertyKey),
	              $useData = $data + $prop;
	            if (it.opts._errorDataPathProperty) {
	              it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
	            }
	            out += ' if ( ' + ($useData) + ' === undefined ';
	            if ($ownProperties) {
	              out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($propertyKey)) + '\') ';
	            }
	            out += ') {  var err =   '; /* istanbul ignore else */
	            if (it.createErrors !== false) {
	              out += ' { keyword: \'' + ('required') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \'' + ($missingProperty) + '\' } ';
	              if (it.opts.messages !== false) {
	                out += ' , message: \'';
	                if (it.opts._errorDataPathProperty) {
	                  out += 'is a required property';
	                } else {
	                  out += 'should have required property \\\'' + ($missingProperty) + '\\\'';
	                }
	                out += '\' ';
	              }
	              if (it.opts.verbose) {
	                out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
	              }
	              out += ' } ';
	            } else {
	              out += ' {} ';
	            }
	            out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ';
	          }
	        }
	      }
	    }
	    it.errorPath = $currentErrorPath;
	  } else if ($breakOnError) {
	    out += ' if (true) {';
	  }
	  return out;
	};

	var uniqueItems = function generate_uniqueItems(it, $keyword, $ruleType) {
	  var out = ' ';
	  var $lvl = it.level;
	  var $dataLvl = it.dataLevel;
	  var $schema = it.schema[$keyword];
	  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
	  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
	  var $breakOnError = !it.opts.allErrors;
	  var $data = 'data' + ($dataLvl || '');
	  var $valid = 'valid' + $lvl;
	  var $isData = it.opts.$data && $schema && $schema.$data,
	    $schemaValue;
	  if ($isData) {
	    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
	    $schemaValue = 'schema' + $lvl;
	  } else {
	    $schemaValue = $schema;
	  }
	  if (($schema || $isData) && it.opts.uniqueItems !== false) {
	    if ($isData) {
	      out += ' var ' + ($valid) + '; if (' + ($schemaValue) + ' === false || ' + ($schemaValue) + ' === undefined) ' + ($valid) + ' = true; else if (typeof ' + ($schemaValue) + ' != \'boolean\') ' + ($valid) + ' = false; else { ';
	    }
	    out += ' var i = ' + ($data) + '.length , ' + ($valid) + ' = true , j; if (i > 1) { ';
	    var $itemType = it.schema.items && it.schema.items.type,
	      $typeIsArray = Array.isArray($itemType);
	    if (!$itemType || $itemType == 'object' || $itemType == 'array' || ($typeIsArray && ($itemType.indexOf('object') >= 0 || $itemType.indexOf('array') >= 0))) {
	      out += ' outer: for (;i--;) { for (j = i; j--;) { if (equal(' + ($data) + '[i], ' + ($data) + '[j])) { ' + ($valid) + ' = false; break outer; } } } ';
	    } else {
	      out += ' var itemIndices = {}, item; for (;i--;) { var item = ' + ($data) + '[i]; ';
	      var $method = 'checkDataType' + ($typeIsArray ? 's' : '');
	      out += ' if (' + (it.util[$method]($itemType, 'item', it.opts.strictNumbers, true)) + ') continue; ';
	      if ($typeIsArray) {
	        out += ' if (typeof item == \'string\') item = \'"\' + item; ';
	      }
	      out += ' if (typeof itemIndices[item] == \'number\') { ' + ($valid) + ' = false; j = itemIndices[item]; break; } itemIndices[item] = i; } ';
	    }
	    out += ' } ';
	    if ($isData) {
	      out += '  }  ';
	    }
	    out += ' if (!' + ($valid) + ') {   ';
	    var $$outStack = $$outStack || [];
	    $$outStack.push(out);
	    out = ''; /* istanbul ignore else */
	    if (it.createErrors !== false) {
	      out += ' { keyword: \'' + ('uniqueItems') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { i: i, j: j } ';
	      if (it.opts.messages !== false) {
	        out += ' , message: \'should NOT have duplicate items (items ## \' + j + \' and \' + i + \' are identical)\' ';
	      }
	      if (it.opts.verbose) {
	        out += ' , schema:  ';
	        if ($isData) {
	          out += 'validate.schema' + ($schemaPath);
	        } else {
	          out += '' + ($schema);
	        }
	        out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
	      }
	      out += ' } ';
	    } else {
	      out += ' {} ';
	    }
	    var __err = out;
	    out = $$outStack.pop();
	    if (!it.compositeRule && $breakOnError) {
	      /* istanbul ignore if */
	      if (it.async) {
	        out += ' throw new ValidationError([' + (__err) + ']); ';
	      } else {
	        out += ' validate.errors = [' + (__err) + ']; return false; ';
	      }
	    } else {
	      out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	    }
	    out += ' } ';
	    if ($breakOnError) {
	      out += ' else { ';
	    }
	  } else {
	    if ($breakOnError) {
	      out += ' if (true) { ';
	    }
	  }
	  return out;
	};

	//all requires must be explicit because browserify won't work with dynamic requires
	var dotjs = {
	  '$ref': ref,
	  allOf: allOf,
	  anyOf: anyOf,
	  '$comment': comment,
	  const: _const,
	  contains: contains,
	  dependencies: dependencies$4,
	  'enum': _enum,
	  format: format$6,
	  'if': _if,
	  items: items,
	  maximum: _limit,
	  minimum: _limit,
	  maxItems: _limitItems,
	  minItems: _limitItems,
	  maxLength: _limitLength,
	  minLength: _limitLength,
	  maxProperties: _limitProperties,
	  minProperties: _limitProperties,
	  multipleOf: multipleOf,
	  not: not,
	  oneOf: oneOf,
	  pattern: pattern,
	  properties: properties$m,
	  propertyNames: propertyNames,
	  required: required$h,
	  uniqueItems: uniqueItems,
	  validate: validate$3
	};

	var toHash = util$2.toHash;

	var rules$1 = function rules() {
	  var RULES = [
	    { type: 'number',
	      rules: [ { 'maximum': ['exclusiveMaximum'] },
	               { 'minimum': ['exclusiveMinimum'] }, 'multipleOf', 'format'] },
	    { type: 'string',
	      rules: [ 'maxLength', 'minLength', 'pattern', 'format' ] },
	    { type: 'array',
	      rules: [ 'maxItems', 'minItems', 'items', 'contains', 'uniqueItems' ] },
	    { type: 'object',
	      rules: [ 'maxProperties', 'minProperties', 'required', 'dependencies', 'propertyNames',
	               { 'properties': ['additionalProperties', 'patternProperties'] } ] },
	    { rules: [ '$ref', 'const', 'enum', 'not', 'anyOf', 'oneOf', 'allOf', 'if' ] }
	  ];

	  var ALL = [ 'type', '$comment' ];
	  var KEYWORDS = [
	    '$schema', '$id', 'id', '$data', '$async', 'title',
	    'description', 'default', 'definitions',
	    'examples', 'readOnly', 'writeOnly',
	    'contentMediaType', 'contentEncoding',
	    'additionalItems', 'then', 'else'
	  ];
	  var TYPES = [ 'number', 'integer', 'string', 'array', 'object', 'boolean', 'null' ];
	  RULES.all = toHash(ALL);
	  RULES.types = toHash(TYPES);

	  RULES.forEach(function (group) {
	    group.rules = group.rules.map(function (keyword) {
	      var implKeywords;
	      if (typeof keyword == 'object') {
	        var key = Object.keys(keyword)[0];
	        implKeywords = keyword[key];
	        keyword = key;
	        implKeywords.forEach(function (k) {
	          ALL.push(k);
	          RULES.all[k] = true;
	        });
	      }
	      ALL.push(keyword);
	      var rule = RULES.all[keyword] = {
	        keyword: keyword,
	        code: dotjs[keyword],
	        implements: implKeywords
	      };
	      return rule;
	    });

	    RULES.all.$comment = {
	      keyword: '$comment',
	      code: dotjs.$comment
	    };

	    if (group.type) RULES.types[group.type] = group;
	  });

	  RULES.keywords = toHash(ALL.concat(KEYWORDS));
	  RULES.custom = {};

	  return RULES;
	};

	var KEYWORDS = [
	  'multipleOf',
	  'maximum',
	  'exclusiveMaximum',
	  'minimum',
	  'exclusiveMinimum',
	  'maxLength',
	  'minLength',
	  'pattern',
	  'additionalItems',
	  'maxItems',
	  'minItems',
	  'uniqueItems',
	  'maxProperties',
	  'minProperties',
	  'required',
	  'additionalProperties',
	  'enum',
	  'format',
	  'const'
	];

	var data$2 = function (metaSchema, keywordsJsonPointers) {
	  for (var i=0; i<keywordsJsonPointers.length; i++) {
	    metaSchema = JSON.parse(JSON.stringify(metaSchema));
	    var segments = keywordsJsonPointers[i].split('/');
	    var keywords = metaSchema;
	    var j;
	    for (j=1; j<segments.length; j++)
	      keywords = keywords[segments[j]];

	    for (j=0; j<KEYWORDS.length; j++) {
	      var key = KEYWORDS[j];
	      var schema = keywords[key];
	      if (schema) {
	        keywords[key] = {
	          anyOf: [
	            schema,
	            { $ref: 'https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#' }
	          ]
	        };
	      }
	    }
	  }

	  return metaSchema;
	};

	var MissingRefError = error_classes.MissingRef;

	var async$1 = compileAsync;


	/**
	 * Creates validating function for passed schema with asynchronous loading of missing schemas.
	 * `loadSchema` option should be a function that accepts schema uri and returns promise that resolves with the schema.
	 * @this  Ajv
	 * @param {Object}   schema schema object
	 * @param {Boolean}  meta optional true to compile meta-schema; this parameter can be skipped
	 * @param {Function} callback an optional node-style callback, it is called with 2 parameters: error (or null) and validating function.
	 * @return {Promise} promise that resolves with a validating function.
	 */
	function compileAsync(schema, meta, callback) {
	  /* eslint no-shadow: 0 */
	  /* global Promise */
	  /* jshint validthis: true */
	  var self = this;
	  if (typeof this._opts.loadSchema != 'function')
	    throw new Error('options.loadSchema should be a function');

	  if (typeof meta == 'function') {
	    callback = meta;
	    meta = undefined;
	  }

	  var p = loadMetaSchemaOf(schema).then(function () {
	    var schemaObj = self._addSchema(schema, undefined, meta);
	    return schemaObj.validate || _compileAsync(schemaObj);
	  });

	  if (callback) {
	    p.then(
	      function(v) { callback(null, v); },
	      callback
	    );
	  }

	  return p;


	  function loadMetaSchemaOf(sch) {
	    var $schema = sch.$schema;
	    return $schema && !self.getSchema($schema)
	            ? compileAsync.call(self, { $ref: $schema }, true)
	            : Promise.resolve();
	  }


	  function _compileAsync(schemaObj) {
	    try { return self._compile(schemaObj); }
	    catch(e) {
	      if (e instanceof MissingRefError) return loadMissingSchema(e);
	      throw e;
	    }


	    function loadMissingSchema(e) {
	      var ref = e.missingSchema;
	      if (added(ref)) throw new Error('Schema ' + ref + ' is loaded but ' + e.missingRef + ' cannot be resolved');

	      var schemaPromise = self._loadingSchemas[ref];
	      if (!schemaPromise) {
	        schemaPromise = self._loadingSchemas[ref] = self._opts.loadSchema(ref);
	        schemaPromise.then(removePromise, removePromise);
	      }

	      return schemaPromise.then(function (sch) {
	        if (!added(ref)) {
	          return loadMetaSchemaOf(sch).then(function () {
	            if (!added(ref)) self.addSchema(sch, ref, undefined, meta);
	          });
	        }
	      }).then(function() {
	        return _compileAsync(schemaObj);
	      });

	      function removePromise() {
	        delete self._loadingSchemas[ref];
	      }

	      function added(ref) {
	        return self._refs[ref] || self._schemas[ref];
	      }
	    }
	  }
	}

	var custom = function generate_custom(it, $keyword, $ruleType) {
	  var out = ' ';
	  var $lvl = it.level;
	  var $dataLvl = it.dataLevel;
	  var $schema = it.schema[$keyword];
	  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
	  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
	  var $breakOnError = !it.opts.allErrors;
	  var $errorKeyword;
	  var $data = 'data' + ($dataLvl || '');
	  var $valid = 'valid' + $lvl;
	  var $errs = 'errs__' + $lvl;
	  var $isData = it.opts.$data && $schema && $schema.$data,
	    $schemaValue;
	  if ($isData) {
	    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
	    $schemaValue = 'schema' + $lvl;
	  } else {
	    $schemaValue = $schema;
	  }
	  var $rule = this,
	    $definition = 'definition' + $lvl,
	    $rDef = $rule.definition,
	    $closingBraces = '';
	  var $compile, $inline, $macro, $ruleValidate, $validateCode;
	  if ($isData && $rDef.$data) {
	    $validateCode = 'keywordValidate' + $lvl;
	    var $validateSchema = $rDef.validateSchema;
	    out += ' var ' + ($definition) + ' = RULES.custom[\'' + ($keyword) + '\'].definition; var ' + ($validateCode) + ' = ' + ($definition) + '.validate;';
	  } else {
	    $ruleValidate = it.useCustomRule($rule, $schema, it.schema, it);
	    if (!$ruleValidate) return;
	    $schemaValue = 'validate.schema' + $schemaPath;
	    $validateCode = $ruleValidate.code;
	    $compile = $rDef.compile;
	    $inline = $rDef.inline;
	    $macro = $rDef.macro;
	  }
	  var $ruleErrs = $validateCode + '.errors',
	    $i = 'i' + $lvl,
	    $ruleErr = 'ruleErr' + $lvl,
	    $asyncKeyword = $rDef.async;
	  if ($asyncKeyword && !it.async) throw new Error('async keyword in sync schema');
	  if (!($inline || $macro)) {
	    out += '' + ($ruleErrs) + ' = null;';
	  }
	  out += 'var ' + ($errs) + ' = errors;var ' + ($valid) + ';';
	  if ($isData && $rDef.$data) {
	    $closingBraces += '}';
	    out += ' if (' + ($schemaValue) + ' === undefined) { ' + ($valid) + ' = true; } else { ';
	    if ($validateSchema) {
	      $closingBraces += '}';
	      out += ' ' + ($valid) + ' = ' + ($definition) + '.validateSchema(' + ($schemaValue) + '); if (' + ($valid) + ') { ';
	    }
	  }
	  if ($inline) {
	    if ($rDef.statements) {
	      out += ' ' + ($ruleValidate.validate) + ' ';
	    } else {
	      out += ' ' + ($valid) + ' = ' + ($ruleValidate.validate) + '; ';
	    }
	  } else if ($macro) {
	    var $it = it.util.copy(it);
	    var $closingBraces = '';
	    $it.level++;
	    var $nextValid = 'valid' + $it.level;
	    $it.schema = $ruleValidate.validate;
	    $it.schemaPath = '';
	    var $wasComposite = it.compositeRule;
	    it.compositeRule = $it.compositeRule = true;
	    var $code = it.validate($it).replace(/validate\.schema/g, $validateCode);
	    it.compositeRule = $it.compositeRule = $wasComposite;
	    out += ' ' + ($code);
	  } else {
	    var $$outStack = $$outStack || [];
	    $$outStack.push(out);
	    out = '';
	    out += '  ' + ($validateCode) + '.call( ';
	    if (it.opts.passContext) {
	      out += 'this';
	    } else {
	      out += 'self';
	    }
	    if ($compile || $rDef.schema === false) {
	      out += ' , ' + ($data) + ' ';
	    } else {
	      out += ' , ' + ($schemaValue) + ' , ' + ($data) + ' , validate.schema' + (it.schemaPath) + ' ';
	    }
	    out += ' , (dataPath || \'\')';
	    if (it.errorPath != '""') {
	      out += ' + ' + (it.errorPath);
	    }
	    var $parentData = $dataLvl ? 'data' + (($dataLvl - 1) || '') : 'parentData',
	      $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';
	    out += ' , ' + ($parentData) + ' , ' + ($parentDataProperty) + ' , rootData )  ';
	    var def_callRuleValidate = out;
	    out = $$outStack.pop();
	    if ($rDef.errors === false) {
	      out += ' ' + ($valid) + ' = ';
	      if ($asyncKeyword) {
	        out += 'await ';
	      }
	      out += '' + (def_callRuleValidate) + '; ';
	    } else {
	      if ($asyncKeyword) {
	        $ruleErrs = 'customErrors' + $lvl;
	        out += ' var ' + ($ruleErrs) + ' = null; try { ' + ($valid) + ' = await ' + (def_callRuleValidate) + '; } catch (e) { ' + ($valid) + ' = false; if (e instanceof ValidationError) ' + ($ruleErrs) + ' = e.errors; else throw e; } ';
	      } else {
	        out += ' ' + ($ruleErrs) + ' = null; ' + ($valid) + ' = ' + (def_callRuleValidate) + '; ';
	      }
	    }
	  }
	  if ($rDef.modifying) {
	    out += ' if (' + ($parentData) + ') ' + ($data) + ' = ' + ($parentData) + '[' + ($parentDataProperty) + '];';
	  }
	  out += '' + ($closingBraces);
	  if ($rDef.valid) {
	    if ($breakOnError) {
	      out += ' if (true) { ';
	    }
	  } else {
	    out += ' if ( ';
	    if ($rDef.valid === undefined) {
	      out += ' !';
	      if ($macro) {
	        out += '' + ($nextValid);
	      } else {
	        out += '' + ($valid);
	      }
	    } else {
	      out += ' ' + (!$rDef.valid) + ' ';
	    }
	    out += ') { ';
	    $errorKeyword = $rule.keyword;
	    var $$outStack = $$outStack || [];
	    $$outStack.push(out);
	    out = '';
	    var $$outStack = $$outStack || [];
	    $$outStack.push(out);
	    out = ''; /* istanbul ignore else */
	    if (it.createErrors !== false) {
	      out += ' { keyword: \'' + ($errorKeyword || 'custom') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { keyword: \'' + ($rule.keyword) + '\' } ';
	      if (it.opts.messages !== false) {
	        out += ' , message: \'should pass "' + ($rule.keyword) + '" keyword validation\' ';
	      }
	      if (it.opts.verbose) {
	        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
	      }
	      out += ' } ';
	    } else {
	      out += ' {} ';
	    }
	    var __err = out;
	    out = $$outStack.pop();
	    if (!it.compositeRule && $breakOnError) {
	      /* istanbul ignore if */
	      if (it.async) {
	        out += ' throw new ValidationError([' + (__err) + ']); ';
	      } else {
	        out += ' validate.errors = [' + (__err) + ']; return false; ';
	      }
	    } else {
	      out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	    }
	    var def_customError = out;
	    out = $$outStack.pop();
	    if ($inline) {
	      if ($rDef.errors) {
	        if ($rDef.errors != 'full') {
	          out += '  for (var ' + ($i) + '=' + ($errs) + '; ' + ($i) + '<errors; ' + ($i) + '++) { var ' + ($ruleErr) + ' = vErrors[' + ($i) + ']; if (' + ($ruleErr) + '.dataPath === undefined) ' + ($ruleErr) + '.dataPath = (dataPath || \'\') + ' + (it.errorPath) + '; if (' + ($ruleErr) + '.schemaPath === undefined) { ' + ($ruleErr) + '.schemaPath = "' + ($errSchemaPath) + '"; } ';
	          if (it.opts.verbose) {
	            out += ' ' + ($ruleErr) + '.schema = ' + ($schemaValue) + '; ' + ($ruleErr) + '.data = ' + ($data) + '; ';
	          }
	          out += ' } ';
	        }
	      } else {
	        if ($rDef.errors === false) {
	          out += ' ' + (def_customError) + ' ';
	        } else {
	          out += ' if (' + ($errs) + ' == errors) { ' + (def_customError) + ' } else {  for (var ' + ($i) + '=' + ($errs) + '; ' + ($i) + '<errors; ' + ($i) + '++) { var ' + ($ruleErr) + ' = vErrors[' + ($i) + ']; if (' + ($ruleErr) + '.dataPath === undefined) ' + ($ruleErr) + '.dataPath = (dataPath || \'\') + ' + (it.errorPath) + '; if (' + ($ruleErr) + '.schemaPath === undefined) { ' + ($ruleErr) + '.schemaPath = "' + ($errSchemaPath) + '"; } ';
	          if (it.opts.verbose) {
	            out += ' ' + ($ruleErr) + '.schema = ' + ($schemaValue) + '; ' + ($ruleErr) + '.data = ' + ($data) + '; ';
	          }
	          out += ' } } ';
	        }
	      }
	    } else if ($macro) {
	      out += '   var err =   '; /* istanbul ignore else */
	      if (it.createErrors !== false) {
	        out += ' { keyword: \'' + ($errorKeyword || 'custom') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { keyword: \'' + ($rule.keyword) + '\' } ';
	        if (it.opts.messages !== false) {
	          out += ' , message: \'should pass "' + ($rule.keyword) + '" keyword validation\' ';
	        }
	        if (it.opts.verbose) {
	          out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
	        }
	        out += ' } ';
	      } else {
	        out += ' {} ';
	      }
	      out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	      if (!it.compositeRule && $breakOnError) {
	        /* istanbul ignore if */
	        if (it.async) {
	          out += ' throw new ValidationError(vErrors); ';
	        } else {
	          out += ' validate.errors = vErrors; return false; ';
	        }
	      }
	    } else {
	      if ($rDef.errors === false) {
	        out += ' ' + (def_customError) + ' ';
	      } else {
	        out += ' if (Array.isArray(' + ($ruleErrs) + ')) { if (vErrors === null) vErrors = ' + ($ruleErrs) + '; else vErrors = vErrors.concat(' + ($ruleErrs) + '); errors = vErrors.length;  for (var ' + ($i) + '=' + ($errs) + '; ' + ($i) + '<errors; ' + ($i) + '++) { var ' + ($ruleErr) + ' = vErrors[' + ($i) + ']; if (' + ($ruleErr) + '.dataPath === undefined) ' + ($ruleErr) + '.dataPath = (dataPath || \'\') + ' + (it.errorPath) + ';  ' + ($ruleErr) + '.schemaPath = "' + ($errSchemaPath) + '";  ';
	        if (it.opts.verbose) {
	          out += ' ' + ($ruleErr) + '.schema = ' + ($schemaValue) + '; ' + ($ruleErr) + '.data = ' + ($data) + '; ';
	        }
	        out += ' } } else { ' + (def_customError) + ' } ';
	      }
	    }
	    out += ' } ';
	    if ($breakOnError) {
	      out += ' else { ';
	    }
	  }
	  return out;
	};

	var $schema$k = "http://json-schema.org/draft-07/schema#";
	var $id$k = "http://json-schema.org/draft-07/schema#";
	var title$1 = "Core schema meta-schema";
	var definitions$1 = {
		schemaArray: {
			type: "array",
			minItems: 1,
			items: {
				$ref: "#"
			}
		},
		nonNegativeInteger: {
			type: "integer",
			minimum: 0
		},
		nonNegativeIntegerDefault0: {
			allOf: [
				{
					$ref: "#/definitions/nonNegativeInteger"
				},
				{
					"default": 0
				}
			]
		},
		simpleTypes: {
			"enum": [
				"array",
				"boolean",
				"integer",
				"null",
				"number",
				"object",
				"string"
			]
		},
		stringArray: {
			type: "array",
			items: {
				type: "string"
			},
			uniqueItems: true,
			"default": [
			]
		}
	};
	var type$j = [
		"object",
		"boolean"
	];
	var properties$l = {
		$id: {
			type: "string",
			format: "uri-reference"
		},
		$schema: {
			type: "string",
			format: "uri"
		},
		$ref: {
			type: "string",
			format: "uri-reference"
		},
		$comment: {
			type: "string"
		},
		title: {
			type: "string"
		},
		description: {
			type: "string"
		},
		"default": true,
		readOnly: {
			type: "boolean",
			"default": false
		},
		examples: {
			type: "array",
			items: true
		},
		multipleOf: {
			type: "number",
			exclusiveMinimum: 0
		},
		maximum: {
			type: "number"
		},
		exclusiveMaximum: {
			type: "number"
		},
		minimum: {
			type: "number"
		},
		exclusiveMinimum: {
			type: "number"
		},
		maxLength: {
			$ref: "#/definitions/nonNegativeInteger"
		},
		minLength: {
			$ref: "#/definitions/nonNegativeIntegerDefault0"
		},
		pattern: {
			type: "string",
			format: "regex"
		},
		additionalItems: {
			$ref: "#"
		},
		items: {
			anyOf: [
				{
					$ref: "#"
				},
				{
					$ref: "#/definitions/schemaArray"
				}
			],
			"default": true
		},
		maxItems: {
			$ref: "#/definitions/nonNegativeInteger"
		},
		minItems: {
			$ref: "#/definitions/nonNegativeIntegerDefault0"
		},
		uniqueItems: {
			type: "boolean",
			"default": false
		},
		contains: {
			$ref: "#"
		},
		maxProperties: {
			$ref: "#/definitions/nonNegativeInteger"
		},
		minProperties: {
			$ref: "#/definitions/nonNegativeIntegerDefault0"
		},
		required: {
			$ref: "#/definitions/stringArray"
		},
		additionalProperties: {
			$ref: "#"
		},
		definitions: {
			type: "object",
			additionalProperties: {
				$ref: "#"
			},
			"default": {
			}
		},
		properties: {
			type: "object",
			additionalProperties: {
				$ref: "#"
			},
			"default": {
			}
		},
		patternProperties: {
			type: "object",
			additionalProperties: {
				$ref: "#"
			},
			propertyNames: {
				format: "regex"
			},
			"default": {
			}
		},
		dependencies: {
			type: "object",
			additionalProperties: {
				anyOf: [
					{
						$ref: "#"
					},
					{
						$ref: "#/definitions/stringArray"
					}
				]
			}
		},
		propertyNames: {
			$ref: "#"
		},
		"const": true,
		"enum": {
			type: "array",
			items: true,
			minItems: 1,
			uniqueItems: true
		},
		type: {
			anyOf: [
				{
					$ref: "#/definitions/simpleTypes"
				},
				{
					type: "array",
					items: {
						$ref: "#/definitions/simpleTypes"
					},
					minItems: 1,
					uniqueItems: true
				}
			]
		},
		format: {
			type: "string"
		},
		contentMediaType: {
			type: "string"
		},
		contentEncoding: {
			type: "string"
		},
		"if": {
			$ref: "#"
		},
		then: {
			$ref: "#"
		},
		"else": {
			$ref: "#"
		},
		allOf: {
			$ref: "#/definitions/schemaArray"
		},
		anyOf: {
			$ref: "#/definitions/schemaArray"
		},
		oneOf: {
			$ref: "#/definitions/schemaArray"
		},
		not: {
			$ref: "#"
		}
	};
	var require$$2$1 = {
		$schema: $schema$k,
		$id: $id$k,
		title: title$1,
		definitions: definitions$1,
		type: type$j,
		properties: properties$l,
		"default": true
	};

	var definition_schema = {
	  $id: 'https://github.com/ajv-validator/ajv/blob/master/lib/definition_schema.js',
	  definitions: {
	    simpleTypes: require$$2$1.definitions.simpleTypes
	  },
	  type: 'object',
	  dependencies: {
	    schema: ['validate'],
	    $data: ['validate'],
	    statements: ['inline'],
	    valid: {not: {required: ['macro']}}
	  },
	  properties: {
	    type: require$$2$1.properties.type,
	    schema: {type: 'boolean'},
	    statements: {type: 'boolean'},
	    dependencies: {
	      type: 'array',
	      items: {type: 'string'}
	    },
	    metaSchema: {type: 'object'},
	    modifying: {type: 'boolean'},
	    valid: {type: 'boolean'},
	    $data: {type: 'boolean'},
	    async: {type: 'boolean'},
	    errors: {
	      anyOf: [
	        {type: 'boolean'},
	        {const: 'full'}
	      ]
	    }
	  }
	};

	var IDENTIFIER$1 = /^[a-z_$][a-z0-9_$-]*$/i;



	var keyword = {
	  add: addKeyword,
	  get: getKeyword,
	  remove: removeKeyword,
	  validate: validateKeyword
	};


	/**
	 * Define custom keyword
	 * @this  Ajv
	 * @param {String} keyword custom keyword, should be unique (including different from all standard, custom and macro keywords).
	 * @param {Object} definition keyword definition object with properties `type` (type(s) which the keyword applies to), `validate` or `compile`.
	 * @return {Ajv} this for method chaining
	 */
	function addKeyword(keyword, definition) {
	  /* jshint validthis: true */
	  /* eslint no-shadow: 0 */
	  var RULES = this.RULES;
	  if (RULES.keywords[keyword])
	    throw new Error('Keyword ' + keyword + ' is already defined');

	  if (!IDENTIFIER$1.test(keyword))
	    throw new Error('Keyword ' + keyword + ' is not a valid identifier');

	  if (definition) {
	    this.validateKeyword(definition, true);

	    var dataType = definition.type;
	    if (Array.isArray(dataType)) {
	      for (var i=0; i<dataType.length; i++)
	        _addRule(keyword, dataType[i], definition);
	    } else {
	      _addRule(keyword, dataType, definition);
	    }

	    var metaSchema = definition.metaSchema;
	    if (metaSchema) {
	      if (definition.$data && this._opts.$data) {
	        metaSchema = {
	          anyOf: [
	            metaSchema,
	            { '$ref': 'https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#' }
	          ]
	        };
	      }
	      definition.validateSchema = this.compile(metaSchema, true);
	    }
	  }

	  RULES.keywords[keyword] = RULES.all[keyword] = true;


	  function _addRule(keyword, dataType, definition) {
	    var ruleGroup;
	    for (var i=0; i<RULES.length; i++) {
	      var rg = RULES[i];
	      if (rg.type == dataType) {
	        ruleGroup = rg;
	        break;
	      }
	    }

	    if (!ruleGroup) {
	      ruleGroup = { type: dataType, rules: [] };
	      RULES.push(ruleGroup);
	    }

	    var rule = {
	      keyword: keyword,
	      definition: definition,
	      custom: true,
	      code: custom,
	      implements: definition.implements
	    };
	    ruleGroup.rules.push(rule);
	    RULES.custom[keyword] = rule;
	  }

	  return this;
	}


	/**
	 * Get keyword
	 * @this  Ajv
	 * @param {String} keyword pre-defined or custom keyword.
	 * @return {Object|Boolean} custom keyword definition, `true` if it is a predefined keyword, `false` otherwise.
	 */
	function getKeyword(keyword) {
	  /* jshint validthis: true */
	  var rule = this.RULES.custom[keyword];
	  return rule ? rule.definition : this.RULES.keywords[keyword] || false;
	}


	/**
	 * Remove keyword
	 * @this  Ajv
	 * @param {String} keyword pre-defined or custom keyword.
	 * @return {Ajv} this for method chaining
	 */
	function removeKeyword(keyword) {
	  /* jshint validthis: true */
	  var RULES = this.RULES;
	  delete RULES.keywords[keyword];
	  delete RULES.all[keyword];
	  delete RULES.custom[keyword];
	  for (var i=0; i<RULES.length; i++) {
	    var rules = RULES[i].rules;
	    for (var j=0; j<rules.length; j++) {
	      if (rules[j].keyword == keyword) {
	        rules.splice(j, 1);
	        break;
	      }
	    }
	  }
	  return this;
	}


	/**
	 * Validate keyword definition
	 * @this  Ajv
	 * @param {Object} definition keyword definition object.
	 * @param {Boolean} throwError true to throw exception if definition is invalid
	 * @return {boolean} validation result
	 */
	function validateKeyword(definition, throwError) {
	  validateKeyword.errors = null;
	  var v = this._validateKeyword = this._validateKeyword
	                                  || this.compile(definition_schema, true);

	  if (v(definition)) return true;
	  validateKeyword.errors = v.errors;
	  if (throwError)
	    throw new Error('custom keyword definition is invalid: '  + this.errorsText(v.errors));
	  else
	    return false;
	}

	var $schema$j = "http://json-schema.org/draft-07/schema#";
	var $id$j = "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#";
	var description$5 = "Meta-schema for $data reference (JSON Schema extension proposal)";
	var type$i = "object";
	var required$g = [
		"$data"
	];
	var properties$k = {
		$data: {
			type: "string",
			anyOf: [
				{
					format: "relative-json-pointer"
				},
				{
					format: "json-pointer"
				}
			]
		}
	};
	var additionalProperties = false;
	var require$$1$2 = {
		$schema: $schema$j,
		$id: $id$j,
		description: description$5,
		type: type$i,
		required: required$g,
		properties: properties$k,
		additionalProperties: additionalProperties
	};

	var ajv$1 = Ajv;

	Ajv.prototype.validate = validate$2;
	Ajv.prototype.compile = compile;
	Ajv.prototype.addSchema = addSchema;
	Ajv.prototype.addMetaSchema = addMetaSchema;
	Ajv.prototype.validateSchema = validateSchema;
	Ajv.prototype.getSchema = getSchema;
	Ajv.prototype.removeSchema = removeSchema;
	Ajv.prototype.addFormat = addFormat;
	Ajv.prototype.errorsText = errorsText;

	Ajv.prototype._addSchema = _addSchema;
	Ajv.prototype._compile = _compile;

	Ajv.prototype.compileAsync = async$1;

	Ajv.prototype.addKeyword = keyword.add;
	Ajv.prototype.getKeyword = keyword.get;
	Ajv.prototype.removeKeyword = keyword.remove;
	Ajv.prototype.validateKeyword = keyword.validate;


	Ajv.ValidationError = error_classes.Validation;
	Ajv.MissingRefError = error_classes.MissingRef;
	Ajv.$dataMetaSchema = data$2;

	var META_SCHEMA_ID = 'http://json-schema.org/draft-07/schema';

	var META_IGNORE_OPTIONS = [ 'removeAdditional', 'useDefaults', 'coerceTypes', 'strictDefaults' ];
	var META_SUPPORT_DATA = ['/properties'];

	/**
	 * Creates validator instance.
	 * Usage: `Ajv(opts)`
	 * @param {Object} opts optional options
	 * @return {Object} ajv instance
	 */
	function Ajv(opts) {
	  if (!(this instanceof Ajv)) return new Ajv(opts);
	  opts = this._opts = util$2.copy(opts) || {};
	  setLogger(this);
	  this._schemas = {};
	  this._refs = {};
	  this._fragments = {};
	  this._formats = formats_1(opts.format);

	  this._cache = opts.cache || new cache$1;
	  this._loadingSchemas = {};
	  this._compilations = [];
	  this.RULES = rules$1();
	  this._getId = chooseGetId(opts);

	  opts.loopRequired = opts.loopRequired || Infinity;
	  if (opts.errorDataPath == 'property') opts._errorDataPathProperty = true;
	  if (opts.serialize === undefined) opts.serialize = fastJsonStableStringify;
	  this._metaOpts = getMetaSchemaOptions(this);

	  if (opts.formats) addInitialFormats(this);
	  if (opts.keywords) addInitialKeywords(this);
	  addDefaultMetaSchema(this);
	  if (typeof opts.meta == 'object') this.addMetaSchema(opts.meta);
	  if (opts.nullable) this.addKeyword('nullable', {metaSchema: {type: 'boolean'}});
	  addInitialSchemas(this);
	}



	/**
	 * Validate data using schema
	 * Schema will be compiled and cached (using serialized JSON as key. [fast-json-stable-stringify](https://github.com/epoberezkin/fast-json-stable-stringify) is used to serialize.
	 * @this   Ajv
	 * @param  {String|Object} schemaKeyRef key, ref or schema object
	 * @param  {Any} data to be validated
	 * @return {Boolean} validation result. Errors from the last validation will be available in `ajv.errors` (and also in compiled schema: `schema.errors`).
	 */
	function validate$2(schemaKeyRef, data) {
	  var v;
	  if (typeof schemaKeyRef == 'string') {
	    v = this.getSchema(schemaKeyRef);
	    if (!v) throw new Error('no schema with key or ref "' + schemaKeyRef + '"');
	  } else {
	    var schemaObj = this._addSchema(schemaKeyRef);
	    v = schemaObj.validate || this._compile(schemaObj);
	  }

	  var valid = v(data);
	  if (v.$async !== true) this.errors = v.errors;
	  return valid;
	}


	/**
	 * Create validating function for passed schema.
	 * @this   Ajv
	 * @param  {Object} schema schema object
	 * @param  {Boolean} _meta true if schema is a meta-schema. Used internally to compile meta schemas of custom keywords.
	 * @return {Function} validating function
	 */
	function compile(schema, _meta) {
	  var schemaObj = this._addSchema(schema, undefined, _meta);
	  return schemaObj.validate || this._compile(schemaObj);
	}


	/**
	 * Adds schema to the instance.
	 * @this   Ajv
	 * @param {Object|Array} schema schema or array of schemas. If array is passed, `key` and other parameters will be ignored.
	 * @param {String} key Optional schema key. Can be passed to `validate` method instead of schema object or id/ref. One schema per instance can have empty `id` and `key`.
	 * @param {Boolean} _skipValidation true to skip schema validation. Used internally, option validateSchema should be used instead.
	 * @param {Boolean} _meta true if schema is a meta-schema. Used internally, addMetaSchema should be used instead.
	 * @return {Ajv} this for method chaining
	 */
	function addSchema(schema, key, _skipValidation, _meta) {
	  if (Array.isArray(schema)){
	    for (var i=0; i<schema.length; i++) this.addSchema(schema[i], undefined, _skipValidation, _meta);
	    return this;
	  }
	  var id = this._getId(schema);
	  if (id !== undefined && typeof id != 'string')
	    throw new Error('schema id must be string');
	  key = resolve_1.normalizeId(key || id);
	  checkUnique(this, key);
	  this._schemas[key] = this._addSchema(schema, _skipValidation, _meta, true);
	  return this;
	}


	/**
	 * Add schema that will be used to validate other schemas
	 * options in META_IGNORE_OPTIONS are alway set to false
	 * @this   Ajv
	 * @param {Object} schema schema object
	 * @param {String} key optional schema key
	 * @param {Boolean} skipValidation true to skip schema validation, can be used to override validateSchema option for meta-schema
	 * @return {Ajv} this for method chaining
	 */
	function addMetaSchema(schema, key, skipValidation) {
	  this.addSchema(schema, key, skipValidation, true);
	  return this;
	}


	/**
	 * Validate schema
	 * @this   Ajv
	 * @param {Object} schema schema to validate
	 * @param {Boolean} throwOrLogError pass true to throw (or log) an error if invalid
	 * @return {Boolean} true if schema is valid
	 */
	function validateSchema(schema, throwOrLogError) {
	  var $schema = schema.$schema;
	  if ($schema !== undefined && typeof $schema != 'string')
	    throw new Error('$schema must be a string');
	  $schema = $schema || this._opts.defaultMeta || defaultMeta(this);
	  if (!$schema) {
	    this.logger.warn('meta-schema not available');
	    this.errors = null;
	    return true;
	  }
	  var valid = this.validate($schema, schema);
	  if (!valid && throwOrLogError) {
	    var message = 'schema is invalid: ' + this.errorsText();
	    if (this._opts.validateSchema == 'log') this.logger.error(message);
	    else throw new Error(message);
	  }
	  return valid;
	}


	function defaultMeta(self) {
	  var meta = self._opts.meta;
	  self._opts.defaultMeta = typeof meta == 'object'
	                            ? self._getId(meta) || meta
	                            : self.getSchema(META_SCHEMA_ID)
	                              ? META_SCHEMA_ID
	                              : undefined;
	  return self._opts.defaultMeta;
	}


	/**
	 * Get compiled schema from the instance by `key` or `ref`.
	 * @this   Ajv
	 * @param  {String} keyRef `key` that was passed to `addSchema` or full schema reference (`schema.id` or resolved id).
	 * @return {Function} schema validating function (with property `schema`).
	 */
	function getSchema(keyRef) {
	  var schemaObj = _getSchemaObj(this, keyRef);
	  switch (typeof schemaObj) {
	    case 'object': return schemaObj.validate || this._compile(schemaObj);
	    case 'string': return this.getSchema(schemaObj);
	    case 'undefined': return _getSchemaFragment(this, keyRef);
	  }
	}


	function _getSchemaFragment(self, ref) {
	  var res = resolve_1.schema.call(self, { schema: {} }, ref);
	  if (res) {
	    var schema = res.schema
	      , root = res.root
	      , baseId = res.baseId;
	    var v = compile_1.call(self, schema, root, undefined, baseId);
	    self._fragments[ref] = new schema_obj({
	      ref: ref,
	      fragment: true,
	      schema: schema,
	      root: root,
	      baseId: baseId,
	      validate: v
	    });
	    return v;
	  }
	}


	function _getSchemaObj(self, keyRef) {
	  keyRef = resolve_1.normalizeId(keyRef);
	  return self._schemas[keyRef] || self._refs[keyRef] || self._fragments[keyRef];
	}


	/**
	 * Remove cached schema(s).
	 * If no parameter is passed all schemas but meta-schemas are removed.
	 * If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.
	 * Even if schema is referenced by other schemas it still can be removed as other schemas have local references.
	 * @this   Ajv
	 * @param  {String|Object|RegExp} schemaKeyRef key, ref, pattern to match key/ref or schema object
	 * @return {Ajv} this for method chaining
	 */
	function removeSchema(schemaKeyRef) {
	  if (schemaKeyRef instanceof RegExp) {
	    _removeAllSchemas(this, this._schemas, schemaKeyRef);
	    _removeAllSchemas(this, this._refs, schemaKeyRef);
	    return this;
	  }
	  switch (typeof schemaKeyRef) {
	    case 'undefined':
	      _removeAllSchemas(this, this._schemas);
	      _removeAllSchemas(this, this._refs);
	      this._cache.clear();
	      return this;
	    case 'string':
	      var schemaObj = _getSchemaObj(this, schemaKeyRef);
	      if (schemaObj) this._cache.del(schemaObj.cacheKey);
	      delete this._schemas[schemaKeyRef];
	      delete this._refs[schemaKeyRef];
	      return this;
	    case 'object':
	      var serialize = this._opts.serialize;
	      var cacheKey = serialize ? serialize(schemaKeyRef) : schemaKeyRef;
	      this._cache.del(cacheKey);
	      var id = this._getId(schemaKeyRef);
	      if (id) {
	        id = resolve_1.normalizeId(id);
	        delete this._schemas[id];
	        delete this._refs[id];
	      }
	  }
	  return this;
	}


	function _removeAllSchemas(self, schemas, regex) {
	  for (var keyRef in schemas) {
	    var schemaObj = schemas[keyRef];
	    if (!schemaObj.meta && (!regex || regex.test(keyRef))) {
	      self._cache.del(schemaObj.cacheKey);
	      delete schemas[keyRef];
	    }
	  }
	}


	/* @this   Ajv */
	function _addSchema(schema, skipValidation, meta, shouldAddSchema) {
	  if (typeof schema != 'object' && typeof schema != 'boolean')
	    throw new Error('schema should be object or boolean');
	  var serialize = this._opts.serialize;
	  var cacheKey = serialize ? serialize(schema) : schema;
	  var cached = this._cache.get(cacheKey);
	  if (cached) return cached;

	  shouldAddSchema = shouldAddSchema || this._opts.addUsedSchema !== false;

	  var id = resolve_1.normalizeId(this._getId(schema));
	  if (id && shouldAddSchema) checkUnique(this, id);

	  var willValidate = this._opts.validateSchema !== false && !skipValidation;
	  var recursiveMeta;
	  if (willValidate && !(recursiveMeta = id && id == resolve_1.normalizeId(schema.$schema)))
	    this.validateSchema(schema, true);

	  var localRefs = resolve_1.ids.call(this, schema);

	  var schemaObj = new schema_obj({
	    id: id,
	    schema: schema,
	    localRefs: localRefs,
	    cacheKey: cacheKey,
	    meta: meta
	  });

	  if (id[0] != '#' && shouldAddSchema) this._refs[id] = schemaObj;
	  this._cache.put(cacheKey, schemaObj);

	  if (willValidate && recursiveMeta) this.validateSchema(schema, true);

	  return schemaObj;
	}


	/* @this   Ajv */
	function _compile(schemaObj, root) {
	  if (schemaObj.compiling) {
	    schemaObj.validate = callValidate;
	    callValidate.schema = schemaObj.schema;
	    callValidate.errors = null;
	    callValidate.root = root ? root : callValidate;
	    if (schemaObj.schema.$async === true)
	      callValidate.$async = true;
	    return callValidate;
	  }
	  schemaObj.compiling = true;

	  var currentOpts;
	  if (schemaObj.meta) {
	    currentOpts = this._opts;
	    this._opts = this._metaOpts;
	  }

	  var v;
	  try { v = compile_1.call(this, schemaObj.schema, root, schemaObj.localRefs); }
	  catch(e) {
	    delete schemaObj.validate;
	    throw e;
	  }
	  finally {
	    schemaObj.compiling = false;
	    if (schemaObj.meta) this._opts = currentOpts;
	  }

	  schemaObj.validate = v;
	  schemaObj.refs = v.refs;
	  schemaObj.refVal = v.refVal;
	  schemaObj.root = v.root;
	  return v;


	  /* @this   {*} - custom context, see passContext option */
	  function callValidate() {
	    /* jshint validthis: true */
	    var _validate = schemaObj.validate;
	    var result = _validate.apply(this, arguments);
	    callValidate.errors = _validate.errors;
	    return result;
	  }
	}


	function chooseGetId(opts) {
	  switch (opts.schemaId) {
	    case 'auto': return _get$IdOrId;
	    case 'id': return _getId;
	    default: return _get$Id;
	  }
	}

	/* @this   Ajv */
	function _getId(schema) {
	  if (schema.$id) this.logger.warn('schema $id ignored', schema.$id);
	  return schema.id;
	}

	/* @this   Ajv */
	function _get$Id(schema) {
	  if (schema.id) this.logger.warn('schema id ignored', schema.id);
	  return schema.$id;
	}


	function _get$IdOrId(schema) {
	  if (schema.$id && schema.id && schema.$id != schema.id)
	    throw new Error('schema $id is different from id');
	  return schema.$id || schema.id;
	}


	/**
	 * Convert array of error message objects to string
	 * @this   Ajv
	 * @param  {Array<Object>} errors optional array of validation errors, if not passed errors from the instance are used.
	 * @param  {Object} options optional options with properties `separator` and `dataVar`.
	 * @return {String} human readable string with all errors descriptions
	 */
	function errorsText(errors, options) {
	  errors = errors || this.errors;
	  if (!errors) return 'No errors';
	  options = options || {};
	  var separator = options.separator === undefined ? ', ' : options.separator;
	  var dataVar = options.dataVar === undefined ? 'data' : options.dataVar;

	  var text = '';
	  for (var i=0; i<errors.length; i++) {
	    var e = errors[i];
	    if (e) text += dataVar + e.dataPath + ' ' + e.message + separator;
	  }
	  return text.slice(0, -separator.length);
	}


	/**
	 * Add custom format
	 * @this   Ajv
	 * @param {String} name format name
	 * @param {String|RegExp|Function} format string is converted to RegExp; function should return boolean (true when valid)
	 * @return {Ajv} this for method chaining
	 */
	function addFormat(name, format) {
	  if (typeof format == 'string') format = new RegExp(format);
	  this._formats[name] = format;
	  return this;
	}


	function addDefaultMetaSchema(self) {
	  var $dataSchema;
	  if (self._opts.$data) {
	    $dataSchema = require$$1$2;
	    self.addMetaSchema($dataSchema, $dataSchema.$id, true);
	  }
	  if (self._opts.meta === false) return;
	  var metaSchema = require$$2$1;
	  if (self._opts.$data) metaSchema = data$2(metaSchema, META_SUPPORT_DATA);
	  self.addMetaSchema(metaSchema, META_SCHEMA_ID, true);
	  self._refs['http://json-schema.org/schema'] = META_SCHEMA_ID;
	}


	function addInitialSchemas(self) {
	  var optsSchemas = self._opts.schemas;
	  if (!optsSchemas) return;
	  if (Array.isArray(optsSchemas)) self.addSchema(optsSchemas);
	  else for (var key in optsSchemas) self.addSchema(optsSchemas[key], key);
	}


	function addInitialFormats(self) {
	  for (var name in self._opts.formats) {
	    var format = self._opts.formats[name];
	    self.addFormat(name, format);
	  }
	}


	function addInitialKeywords(self) {
	  for (var name in self._opts.keywords) {
	    var keyword = self._opts.keywords[name];
	    self.addKeyword(name, keyword);
	  }
	}


	function checkUnique(self, id) {
	  if (self._schemas[id] || self._refs[id])
	    throw new Error('schema with key or id "' + id + '" already exists');
	}


	function getMetaSchemaOptions(self) {
	  var metaOpts = util$2.copy(self._opts);
	  for (var i=0; i<META_IGNORE_OPTIONS.length; i++)
	    delete metaOpts[META_IGNORE_OPTIONS[i]];
	  return metaOpts;
	}


	function setLogger(self) {
	  var logger = self._opts.logger;
	  if (logger === false) {
	    self.logger = {log: noop$5, warn: noop$5, error: noop$5};
	  } else {
	    if (logger === undefined) logger = console;
	    if (!(typeof logger == 'object' && logger.log && logger.warn && logger.error))
	      throw new Error('logger must implement log, warn and error methods');
	    self.logger = logger;
	  }
	}


	function noop$5() {}

	function HARError (errors) {
	  var message = 'validation failed';

	  this.name = 'HARError';
	  this.message = message;
	  this.errors = errors;

	  if (typeof Error.captureStackTrace === 'function') {
	    Error.captureStackTrace(this, this.constructor);
	  } else {
	    this.stack = (new Error(message)).stack;
	  }
	}

	HARError.prototype = Error.prototype;

	var error$1 = HARError;

	var $id$i = "afterRequest.json#";
	var $schema$i = "http://json-schema.org/draft-06/schema#";
	var type$h = "object";
	var optional$4 = true;
	var required$f = [
		"lastAccess",
		"eTag",
		"hitCount"
	];
	var properties$j = {
		expires: {
			type: "string",
			pattern: "^(\\d{4})(-)?(\\d\\d)(-)?(\\d\\d)(T)?(\\d\\d)(:)?(\\d\\d)(:)?(\\d\\d)(\\.\\d+)?(Z|([+-])(\\d\\d)(:)?(\\d\\d))?"
		},
		lastAccess: {
			type: "string",
			pattern: "^(\\d{4})(-)?(\\d\\d)(-)?(\\d\\d)(T)?(\\d\\d)(:)?(\\d\\d)(:)?(\\d\\d)(\\.\\d+)?(Z|([+-])(\\d\\d)(:)?(\\d\\d))?"
		},
		eTag: {
			type: "string"
		},
		hitCount: {
			type: "integer"
		},
		comment: {
			type: "string"
		}
	};
	var require$$0$5 = {
		$id: $id$i,
		$schema: $schema$i,
		type: type$h,
		optional: optional$4,
		required: required$f,
		properties: properties$j
	};

	var $id$h = "beforeRequest.json#";
	var $schema$h = "http://json-schema.org/draft-06/schema#";
	var type$g = "object";
	var optional$3 = true;
	var required$e = [
		"lastAccess",
		"eTag",
		"hitCount"
	];
	var properties$i = {
		expires: {
			type: "string",
			pattern: "^(\\d{4})(-)?(\\d\\d)(-)?(\\d\\d)(T)?(\\d\\d)(:)?(\\d\\d)(:)?(\\d\\d)(\\.\\d+)?(Z|([+-])(\\d\\d)(:)?(\\d\\d))?"
		},
		lastAccess: {
			type: "string",
			pattern: "^(\\d{4})(-)?(\\d\\d)(-)?(\\d\\d)(T)?(\\d\\d)(:)?(\\d\\d)(:)?(\\d\\d)(\\.\\d+)?(Z|([+-])(\\d\\d)(:)?(\\d\\d))?"
		},
		eTag: {
			type: "string"
		},
		hitCount: {
			type: "integer"
		},
		comment: {
			type: "string"
		}
	};
	var require$$1$1 = {
		$id: $id$h,
		$schema: $schema$h,
		type: type$g,
		optional: optional$3,
		required: required$e,
		properties: properties$i
	};

	var $id$g = "browser.json#";
	var $schema$g = "http://json-schema.org/draft-06/schema#";
	var type$f = "object";
	var required$d = [
		"name",
		"version"
	];
	var properties$h = {
		name: {
			type: "string"
		},
		version: {
			type: "string"
		},
		comment: {
			type: "string"
		}
	};
	var require$$2 = {
		$id: $id$g,
		$schema: $schema$g,
		type: type$f,
		required: required$d,
		properties: properties$h
	};

	var $id$f = "cache.json#";
	var $schema$f = "http://json-schema.org/draft-06/schema#";
	var properties$g = {
		beforeRequest: {
			oneOf: [
				{
					type: "null"
				},
				{
					$ref: "beforeRequest.json#"
				}
			]
		},
		afterRequest: {
			oneOf: [
				{
					type: "null"
				},
				{
					$ref: "afterRequest.json#"
				}
			]
		},
		comment: {
			type: "string"
		}
	};
	var require$$3 = {
		$id: $id$f,
		$schema: $schema$f,
		properties: properties$g
	};

	var $id$e = "content.json#";
	var $schema$e = "http://json-schema.org/draft-06/schema#";
	var type$e = "object";
	var required$c = [
		"size",
		"mimeType"
	];
	var properties$f = {
		size: {
			type: "integer"
		},
		compression: {
			type: "integer"
		},
		mimeType: {
			type: "string"
		},
		text: {
			type: "string"
		},
		encoding: {
			type: "string"
		},
		comment: {
			type: "string"
		}
	};
	var require$$4 = {
		$id: $id$e,
		$schema: $schema$e,
		type: type$e,
		required: required$c,
		properties: properties$f
	};

	var $id$d = "cookie.json#";
	var $schema$d = "http://json-schema.org/draft-06/schema#";
	var type$d = "object";
	var required$b = [
		"name",
		"value"
	];
	var properties$e = {
		name: {
			type: "string"
		},
		value: {
			type: "string"
		},
		path: {
			type: "string"
		},
		domain: {
			type: "string"
		},
		expires: {
			type: [
				"string",
				"null"
			],
			format: "date-time"
		},
		httpOnly: {
			type: "boolean"
		},
		secure: {
			type: "boolean"
		},
		comment: {
			type: "string"
		}
	};
	var require$$5 = {
		$id: $id$d,
		$schema: $schema$d,
		type: type$d,
		required: required$b,
		properties: properties$e
	};

	var $id$c = "creator.json#";
	var $schema$c = "http://json-schema.org/draft-06/schema#";
	var type$c = "object";
	var required$a = [
		"name",
		"version"
	];
	var properties$d = {
		name: {
			type: "string"
		},
		version: {
			type: "string"
		},
		comment: {
			type: "string"
		}
	};
	var require$$6 = {
		$id: $id$c,
		$schema: $schema$c,
		type: type$c,
		required: required$a,
		properties: properties$d
	};

	var $id$b = "entry.json#";
	var $schema$b = "http://json-schema.org/draft-06/schema#";
	var type$b = "object";
	var optional$2 = true;
	var required$9 = [
		"startedDateTime",
		"time",
		"request",
		"response",
		"cache",
		"timings"
	];
	var properties$c = {
		pageref: {
			type: "string"
		},
		startedDateTime: {
			type: "string",
			format: "date-time",
			pattern: "^(\\d{4})(-)?(\\d\\d)(-)?(\\d\\d)(T)?(\\d\\d)(:)?(\\d\\d)(:)?(\\d\\d)(\\.\\d+)?(Z|([+-])(\\d\\d)(:)?(\\d\\d))"
		},
		time: {
			type: "number",
			min: 0
		},
		request: {
			$ref: "request.json#"
		},
		response: {
			$ref: "response.json#"
		},
		cache: {
			$ref: "cache.json#"
		},
		timings: {
			$ref: "timings.json#"
		},
		serverIPAddress: {
			type: "string",
			oneOf: [
				{
					format: "ipv4"
				},
				{
					format: "ipv6"
				}
			]
		},
		connection: {
			type: "string"
		},
		comment: {
			type: "string"
		}
	};
	var require$$7 = {
		$id: $id$b,
		$schema: $schema$b,
		type: type$b,
		optional: optional$2,
		required: required$9,
		properties: properties$c
	};

	var $id$a = "har.json#";
	var $schema$a = "http://json-schema.org/draft-06/schema#";
	var type$a = "object";
	var required$8 = [
		"log"
	];
	var properties$b = {
		log: {
			$ref: "log.json#"
		}
	};
	var require$$8 = {
		$id: $id$a,
		$schema: $schema$a,
		type: type$a,
		required: required$8,
		properties: properties$b
	};

	var $id$9 = "header.json#";
	var $schema$9 = "http://json-schema.org/draft-06/schema#";
	var type$9 = "object";
	var required$7 = [
		"name",
		"value"
	];
	var properties$a = {
		name: {
			type: "string"
		},
		value: {
			type: "string"
		},
		comment: {
			type: "string"
		}
	};
	var require$$9 = {
		$id: $id$9,
		$schema: $schema$9,
		type: type$9,
		required: required$7,
		properties: properties$a
	};

	var $id$8 = "log.json#";
	var $schema$8 = "http://json-schema.org/draft-06/schema#";
	var type$8 = "object";
	var required$6 = [
		"version",
		"creator",
		"entries"
	];
	var properties$9 = {
		version: {
			type: "string"
		},
		creator: {
			$ref: "creator.json#"
		},
		browser: {
			$ref: "browser.json#"
		},
		pages: {
			type: "array",
			items: {
				$ref: "page.json#"
			}
		},
		entries: {
			type: "array",
			items: {
				$ref: "entry.json#"
			}
		},
		comment: {
			type: "string"
		}
	};
	var require$$10 = {
		$id: $id$8,
		$schema: $schema$8,
		type: type$8,
		required: required$6,
		properties: properties$9
	};

	var $id$7 = "page.json#";
	var $schema$7 = "http://json-schema.org/draft-06/schema#";
	var type$7 = "object";
	var optional$1 = true;
	var required$5 = [
		"startedDateTime",
		"id",
		"title",
		"pageTimings"
	];
	var properties$8 = {
		startedDateTime: {
			type: "string",
			format: "date-time",
			pattern: "^(\\d{4})(-)?(\\d\\d)(-)?(\\d\\d)(T)?(\\d\\d)(:)?(\\d\\d)(:)?(\\d\\d)(\\.\\d+)?(Z|([+-])(\\d\\d)(:)?(\\d\\d))"
		},
		id: {
			type: "string",
			unique: true
		},
		title: {
			type: "string"
		},
		pageTimings: {
			$ref: "pageTimings.json#"
		},
		comment: {
			type: "string"
		}
	};
	var require$$11 = {
		$id: $id$7,
		$schema: $schema$7,
		type: type$7,
		optional: optional$1,
		required: required$5,
		properties: properties$8
	};

	var $id$6 = "pageTimings.json#";
	var $schema$6 = "http://json-schema.org/draft-06/schema#";
	var type$6 = "object";
	var properties$7 = {
		onContentLoad: {
			type: "number",
			min: -1
		},
		onLoad: {
			type: "number",
			min: -1
		},
		comment: {
			type: "string"
		}
	};
	var require$$12 = {
		$id: $id$6,
		$schema: $schema$6,
		type: type$6,
		properties: properties$7
	};

	var $id$5 = "postData.json#";
	var $schema$5 = "http://json-schema.org/draft-06/schema#";
	var type$5 = "object";
	var optional = true;
	var required$4 = [
		"mimeType"
	];
	var properties$6 = {
		mimeType: {
			type: "string"
		},
		text: {
			type: "string"
		},
		params: {
			type: "array",
			required: [
				"name"
			],
			properties: {
				name: {
					type: "string"
				},
				value: {
					type: "string"
				},
				fileName: {
					type: "string"
				},
				contentType: {
					type: "string"
				},
				comment: {
					type: "string"
				}
			}
		},
		comment: {
			type: "string"
		}
	};
	var require$$13 = {
		$id: $id$5,
		$schema: $schema$5,
		type: type$5,
		optional: optional,
		required: required$4,
		properties: properties$6
	};

	var $id$4 = "query.json#";
	var $schema$4 = "http://json-schema.org/draft-06/schema#";
	var type$4 = "object";
	var required$3 = [
		"name",
		"value"
	];
	var properties$5 = {
		name: {
			type: "string"
		},
		value: {
			type: "string"
		},
		comment: {
			type: "string"
		}
	};
	var require$$14 = {
		$id: $id$4,
		$schema: $schema$4,
		type: type$4,
		required: required$3,
		properties: properties$5
	};

	var $id$3 = "request.json#";
	var $schema$3 = "http://json-schema.org/draft-06/schema#";
	var type$3 = "object";
	var required$2 = [
		"method",
		"url",
		"httpVersion",
		"cookies",
		"headers",
		"queryString",
		"headersSize",
		"bodySize"
	];
	var properties$4 = {
		method: {
			type: "string"
		},
		url: {
			type: "string",
			format: "uri"
		},
		httpVersion: {
			type: "string"
		},
		cookies: {
			type: "array",
			items: {
				$ref: "cookie.json#"
			}
		},
		headers: {
			type: "array",
			items: {
				$ref: "header.json#"
			}
		},
		queryString: {
			type: "array",
			items: {
				$ref: "query.json#"
			}
		},
		postData: {
			$ref: "postData.json#"
		},
		headersSize: {
			type: "integer"
		},
		bodySize: {
			type: "integer"
		},
		comment: {
			type: "string"
		}
	};
	var require$$15 = {
		$id: $id$3,
		$schema: $schema$3,
		type: type$3,
		required: required$2,
		properties: properties$4
	};

	var $id$2 = "response.json#";
	var $schema$2 = "http://json-schema.org/draft-06/schema#";
	var type$2 = "object";
	var required$1 = [
		"status",
		"statusText",
		"httpVersion",
		"cookies",
		"headers",
		"content",
		"redirectURL",
		"headersSize",
		"bodySize"
	];
	var properties$3 = {
		status: {
			type: "integer"
		},
		statusText: {
			type: "string"
		},
		httpVersion: {
			type: "string"
		},
		cookies: {
			type: "array",
			items: {
				$ref: "cookie.json#"
			}
		},
		headers: {
			type: "array",
			items: {
				$ref: "header.json#"
			}
		},
		content: {
			$ref: "content.json#"
		},
		redirectURL: {
			type: "string"
		},
		headersSize: {
			type: "integer"
		},
		bodySize: {
			type: "integer"
		},
		comment: {
			type: "string"
		}
	};
	var require$$16 = {
		$id: $id$2,
		$schema: $schema$2,
		type: type$2,
		required: required$1,
		properties: properties$3
	};

	var $id$1 = "timings.json#";
	var $schema$1 = "http://json-schema.org/draft-06/schema#";
	var required = [
		"send",
		"wait",
		"receive"
	];
	var properties$2 = {
		dns: {
			type: "number",
			min: -1
		},
		connect: {
			type: "number",
			min: -1
		},
		blocked: {
			type: "number",
			min: -1
		},
		send: {
			type: "number",
			min: -1
		},
		wait: {
			type: "number",
			min: -1
		},
		receive: {
			type: "number",
			min: -1
		},
		ssl: {
			type: "number",
			min: -1
		},
		comment: {
			type: "string"
		}
	};
	var require$$17 = {
		$id: $id$1,
		$schema: $schema$1,
		required: required,
		properties: properties$2
	};

	var lib$2 = {
	  afterRequest: require$$0$5,
	  beforeRequest: require$$1$1,
	  browser: require$$2,
	  cache: require$$3,
	  content: require$$4,
	  cookie: require$$5,
	  creator: require$$6,
	  entry: require$$7,
	  har: require$$8,
	  header: require$$9,
	  log: require$$10,
	  page: require$$11,
	  pageTimings: require$$12,
	  postData: require$$13,
	  query: require$$14,
	  request: require$$15,
	  response: require$$16,
	  timings: require$$17
	};

	var $schema = "http://json-schema.org/draft-06/schema#";
	var $id = "http://json-schema.org/draft-06/schema#";
	var title = "Core schema meta-schema";
	var definitions = {
		schemaArray: {
			type: "array",
			minItems: 1,
			items: {
				$ref: "#"
			}
		},
		nonNegativeInteger: {
			type: "integer",
			minimum: 0
		},
		nonNegativeIntegerDefault0: {
			allOf: [
				{
					$ref: "#/definitions/nonNegativeInteger"
				},
				{
					"default": 0
				}
			]
		},
		simpleTypes: {
			"enum": [
				"array",
				"boolean",
				"integer",
				"null",
				"number",
				"object",
				"string"
			]
		},
		stringArray: {
			type: "array",
			items: {
				type: "string"
			},
			uniqueItems: true,
			"default": [
			]
		}
	};
	var type$1 = [
		"object",
		"boolean"
	];
	var properties$1 = {
		$id: {
			type: "string",
			format: "uri-reference"
		},
		$schema: {
			type: "string",
			format: "uri"
		},
		$ref: {
			type: "string",
			format: "uri-reference"
		},
		title: {
			type: "string"
		},
		description: {
			type: "string"
		},
		"default": {
		},
		examples: {
			type: "array",
			items: {
			}
		},
		multipleOf: {
			type: "number",
			exclusiveMinimum: 0
		},
		maximum: {
			type: "number"
		},
		exclusiveMaximum: {
			type: "number"
		},
		minimum: {
			type: "number"
		},
		exclusiveMinimum: {
			type: "number"
		},
		maxLength: {
			$ref: "#/definitions/nonNegativeInteger"
		},
		minLength: {
			$ref: "#/definitions/nonNegativeIntegerDefault0"
		},
		pattern: {
			type: "string",
			format: "regex"
		},
		additionalItems: {
			$ref: "#"
		},
		items: {
			anyOf: [
				{
					$ref: "#"
				},
				{
					$ref: "#/definitions/schemaArray"
				}
			],
			"default": {
			}
		},
		maxItems: {
			$ref: "#/definitions/nonNegativeInteger"
		},
		minItems: {
			$ref: "#/definitions/nonNegativeIntegerDefault0"
		},
		uniqueItems: {
			type: "boolean",
			"default": false
		},
		contains: {
			$ref: "#"
		},
		maxProperties: {
			$ref: "#/definitions/nonNegativeInteger"
		},
		minProperties: {
			$ref: "#/definitions/nonNegativeIntegerDefault0"
		},
		required: {
			$ref: "#/definitions/stringArray"
		},
		additionalProperties: {
			$ref: "#"
		},
		definitions: {
			type: "object",
			additionalProperties: {
				$ref: "#"
			},
			"default": {
			}
		},
		properties: {
			type: "object",
			additionalProperties: {
				$ref: "#"
			},
			"default": {
			}
		},
		patternProperties: {
			type: "object",
			additionalProperties: {
				$ref: "#"
			},
			"default": {
			}
		},
		dependencies: {
			type: "object",
			additionalProperties: {
				anyOf: [
					{
						$ref: "#"
					},
					{
						$ref: "#/definitions/stringArray"
					}
				]
			}
		},
		propertyNames: {
			$ref: "#"
		},
		"const": {
		},
		"enum": {
			type: "array",
			minItems: 1,
			uniqueItems: true
		},
		type: {
			anyOf: [
				{
					$ref: "#/definitions/simpleTypes"
				},
				{
					type: "array",
					items: {
						$ref: "#/definitions/simpleTypes"
					},
					minItems: 1,
					uniqueItems: true
				}
			]
		},
		format: {
			type: "string"
		},
		allOf: {
			$ref: "#/definitions/schemaArray"
		},
		anyOf: {
			$ref: "#/definitions/schemaArray"
		},
		oneOf: {
			$ref: "#/definitions/schemaArray"
		},
		not: {
			$ref: "#"
		}
	};
	var require$$0$4 = {
		$schema: $schema,
		$id: $id,
		title: title,
		definitions: definitions,
		type: type$1,
		properties: properties$1,
		"default": {
	}
	};

	var ajv;

	function createAjvInstance () {
	  var ajv = new ajv$1({
	    allErrors: true
	  });
	  ajv.addMetaSchema(require$$0$4);
	  ajv.addSchema(lib$2);

	  return ajv
	}

	function validate$1 (name, data) {
	  data = data || {};

	  // validator config
	  ajv = ajv || createAjvInstance();

	  var validate = ajv.getSchema(name + '.json');

	  return new Promise(function (resolve, reject) {
	    var valid = validate(data);

	    !valid ? reject(new error$1(validate.errors)) : resolve(data);
	  })
	}

	var afterRequest = function (data) {
	  return validate$1('afterRequest', data)
	};

	var beforeRequest = function (data) {
	  return validate$1('beforeRequest', data)
	};

	var browser = function (data) {
	  return validate$1('browser', data)
	};

	var cache = function (data) {
	  return validate$1('cache', data)
	};

	var content = function (data) {
	  return validate$1('content', data)
	};

	var cookie = function (data) {
	  return validate$1('cookie', data)
	};

	var creator = function (data) {
	  return validate$1('creator', data)
	};

	var entry = function (data) {
	  return validate$1('entry', data)
	};

	var har$1 = function (data) {
	  return validate$1('har', data)
	};

	var header = function (data) {
	  return validate$1('header', data)
	};

	var log$3 = function (data) {
	  return validate$1('log', data)
	};

	var page = function (data) {
	  return validate$1('page', data)
	};

	var pageTimings = function (data) {
	  return validate$1('pageTimings', data)
	};

	var postData = function (data) {
	  return validate$1('postData', data)
	};

	var query = function (data) {
	  return validate$1('query', data)
	};

	var request$3 = function (data) {
	  return validate$1('request', data)
	};

	var response = function (data) {
	  return validate$1('response', data)
	};

	var timings = function (data) {
	  return validate$1('timings', data)
	};

	var promise$3 = {
		afterRequest: afterRequest,
		beforeRequest: beforeRequest,
		browser: browser,
		cache: cache,
		content: content,
		cookie: cookie,
		creator: creator,
		entry: entry,
		har: har$1,
		header: header,
		log: log$3,
		page: page,
		pageTimings: pageTimings,
		postData: postData,
		query: query,
		request: request$3,
		response: response,
		timings: timings
	};

	function Har$1 (request) {
	  this.request = request;
	}

	Har$1.prototype.reducer = function (obj, pair) {
	  // new property ?
	  if (obj[pair.name] === undefined) {
	    obj[pair.name] = pair.value;
	    return obj
	  }

	  // existing? convert to array
	  var arr = [
	    obj[pair.name],
	    pair.value
	  ];

	  obj[pair.name] = arr;

	  return obj
	};

	Har$1.prototype.prep = function (data) {
	  // construct utility properties
	  data.queryObj = {};
	  data.headersObj = {};
	  data.postData.jsonObj = false;
	  data.postData.paramsObj = false;

	  // construct query objects
	  if (data.queryString && data.queryString.length) {
	    data.queryObj = data.queryString.reduce(this.reducer, {});
	  }

	  // construct headers objects
	  if (data.headers && data.headers.length) {
	    // loweCase header keys
	    data.headersObj = data.headers.reduceRight(function (headers, header) {
	      headers[header.name] = header.value;
	      return headers
	    }, {});
	  }

	  // construct Cookie header
	  if (data.cookies && data.cookies.length) {
	    var cookies = data.cookies.map(function (cookie) {
	      return cookie.name + '=' + cookie.value
	    });

	    if (cookies.length) {
	      data.headersObj.cookie = cookies.join('; ');
	    }
	  }

	  // prep body
	  function some (arr) {
	    return arr.some(function (type) {
	      return data.postData.mimeType.indexOf(type) === 0
	    })
	  }

	  if (some([
	    'multipart/mixed',
	    'multipart/related',
	    'multipart/form-data',
	    'multipart/alternative'])) {
	    // reset values
	    data.postData.mimeType = 'multipart/form-data';
	  } else if (some([
	    'application/x-www-form-urlencoded'])) {
	    if (!data.postData.params) {
	      data.postData.text = '';
	    } else {
	      data.postData.paramsObj = data.postData.params.reduce(this.reducer, {});

	      // always overwrite
	      data.postData.text = querystring__default['default'].stringify(data.postData.paramsObj);
	    }
	  } else if (some([
	    'text/json',
	    'text/x-json',
	    'application/json',
	    'application/x-json'])) {
	    data.postData.mimeType = 'application/json';

	    if (data.postData.text) {
	      try {
	        data.postData.jsonObj = JSON.parse(data.postData.text);
	      } catch (e) {
	        this.request.debug(e);

	        // force back to text/plain
	        data.postData.mimeType = 'text/plain';
	      }
	    }
	  }

	  return data
	};

	Har$1.prototype.options = function (options) {
	  // skip if no har property defined
	  if (!options.har) {
	    return options
	  }

	  var har = {};
	  extend$1(har, options.har);

	  // only process the first entry
	  if (har.log && har.log.entries) {
	    har = har.log.entries[0];
	  }

	  // add optional properties to make validation successful
	  har.url = har.url || options.url || options.uri || options.baseUrl || '/';
	  har.httpVersion = har.httpVersion || 'HTTP/1.1';
	  har.queryString = har.queryString || [];
	  har.headers = har.headers || [];
	  har.cookies = har.cookies || [];
	  har.postData = har.postData || {};
	  har.postData.mimeType = har.postData.mimeType || 'application/octet-stream';

	  har.bodySize = 0;
	  har.headersSize = 0;
	  har.postData.size = 0;

	  if (!promise$3.request(har)) {
	    return options
	  }

	  // clean up and get some utility properties
	  var req = this.prep(har);

	  // construct new options
	  if (req.url) {
	    options.url = req.url;
	  }

	  if (req.method) {
	    options.method = req.method;
	  }

	  if (Object.keys(req.queryObj).length) {
	    options.qs = req.queryObj;
	  }

	  if (Object.keys(req.headersObj).length) {
	    options.headers = req.headersObj;
	  }

	  function test (type) {
	    return req.postData.mimeType.indexOf(type) === 0
	  }
	  if (test('application/x-www-form-urlencoded')) {
	    options.form = req.postData.paramsObj;
	  } else if (test('application/json')) {
	    if (req.postData.jsonObj) {
	      options.body = req.postData.jsonObj;
	      options.json = true;
	    }
	  } else if (test('multipart/form-data')) {
	    options.formData = {};

	    req.postData.params.forEach(function (param) {
	      var attachment = {};

	      if (!param.fileName && !param.contentType) {
	        options.formData[param.name] = param.value;
	        return
	      }

	      // attempt to read from disk!
	      if (param.fileName && !param.value) {
	        attachment.value = fs__default['default'].createReadStream(param.fileName);
	      } else if (param.value) {
	        attachment.value = param.value;
	      }

	      if (param.fileName) {
	        attachment.options = {
	          filename: param.fileName,
	          contentType: param.contentType ? param.contentType : null
	        };
	      }

	      options.formData[param.name] = attachment;
	    });
	  } else {
	    if (req.postData.text) {
	      options.body = req.postData.text;
	    }
	  }

	  return options
	};

	var Har_1 = Har$1;

	var har = {
		Har: Har_1
	};

	// Unique ID creation requires a high quality random # generator.  In node.js
	// this is pretty straight-forward - we use the crypto API.



	var rng = function nodeRNG() {
	  return crypto__default['default'].randomBytes(16);
	};

	/**
	 * Convert array of 16 byte values to UUID string format of the form:
	 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
	 */
	var byteToHex = [];
	for (var i$1 = 0; i$1 < 256; ++i$1) {
	  byteToHex[i$1] = (i$1 + 0x100).toString(16).substr(1);
	}

	function bytesToUuid(buf, offset) {
	  var i = offset || 0;
	  var bth = byteToHex;
	  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4
	  return ([
	    bth[buf[i++]], bth[buf[i++]],
	    bth[buf[i++]], bth[buf[i++]], '-',
	    bth[buf[i++]], bth[buf[i++]], '-',
	    bth[buf[i++]], bth[buf[i++]], '-',
	    bth[buf[i++]], bth[buf[i++]], '-',
	    bth[buf[i++]], bth[buf[i++]],
	    bth[buf[i++]], bth[buf[i++]],
	    bth[buf[i++]], bth[buf[i++]]
	  ]).join('');
	}

	var bytesToUuid_1 = bytesToUuid;

	function v4(options, buf, offset) {
	  var i = buf && offset || 0;

	  if (typeof(options) == 'string') {
	    buf = options === 'binary' ? new Array(16) : null;
	    options = null;
	  }
	  options = options || {};

	  var rnds = options.random || (options.rng || rng)();

	  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
	  rnds[6] = (rnds[6] & 0x0f) | 0x40;
	  rnds[8] = (rnds[8] & 0x3f) | 0x80;

	  // Copy bytes to buffer, if provided
	  if (buf) {
	    for (var ii = 0; ii < 16; ++ii) {
	      buf[i + ii] = rnds[ii];
	    }
	  }

	  return buf || bytesToUuid_1(rnds);
	}

	var v4_1 = v4;

	var md5 = helpers.md5;
	var toBase64$1 = helpers.toBase64;

	function Auth$1 (request) {
	  // define all public properties here
	  this.request = request;
	  this.hasAuth = false;
	  this.sentAuth = false;
	  this.bearerToken = null;
	  this.user = null;
	  this.pass = null;
	}

	Auth$1.prototype.basic = function (user, pass, sendImmediately) {
	  var self = this;
	  if (typeof user !== 'string' || (pass !== undefined && typeof pass !== 'string')) {
	    self.request.emit('error', new Error('auth() received invalid user or password'));
	  }
	  self.user = user;
	  self.pass = pass;
	  self.hasAuth = true;
	  var header = user + ':' + (pass || '');
	  if (sendImmediately || typeof sendImmediately === 'undefined') {
	    var authHeader = 'Basic ' + toBase64$1(header);
	    self.sentAuth = true;
	    return authHeader
	  }
	};

	Auth$1.prototype.bearer = function (bearer, sendImmediately) {
	  var self = this;
	  self.bearerToken = bearer;
	  self.hasAuth = true;
	  if (sendImmediately || typeof sendImmediately === 'undefined') {
	    if (typeof bearer === 'function') {
	      bearer = bearer();
	    }
	    var authHeader = 'Bearer ' + (bearer || '');
	    self.sentAuth = true;
	    return authHeader
	  }
	};

	Auth$1.prototype.digest = function (method, path, authHeader) {
	  // TODO: More complete implementation of RFC 2617.
	  //   - handle challenge.domain
	  //   - support qop="auth-int" only
	  //   - handle Authentication-Info (not necessarily?)
	  //   - check challenge.stale (not necessarily?)
	  //   - increase nc (not necessarily?)
	  // For reference:
	  // http://tools.ietf.org/html/rfc2617#section-3
	  // https://github.com/bagder/curl/blob/master/lib/http_digest.c

	  var self = this;

	  var challenge = {};
	  var re = /([a-z0-9_-]+)=(?:"([^"]+)"|([a-z0-9_-]+))/gi;
	  while (true) {
	    var match = re.exec(authHeader);
	    if (!match) {
	      break
	    }
	    challenge[match[1]] = match[2] || match[3];
	  }

	  /**
	   * RFC 2617: handle both MD5 and MD5-sess algorithms.
	   *
	   * If the algorithm directive's value is "MD5" or unspecified, then HA1 is
	   *   HA1=MD5(username:realm:password)
	   * If the algorithm directive's value is "MD5-sess", then HA1 is
	   *   HA1=MD5(MD5(username:realm:password):nonce:cnonce)
	   */
	  var ha1Compute = function (algorithm, user, realm, pass, nonce, cnonce) {
	    var ha1 = md5(user + ':' + realm + ':' + pass);
	    if (algorithm && algorithm.toLowerCase() === 'md5-sess') {
	      return md5(ha1 + ':' + nonce + ':' + cnonce)
	    } else {
	      return ha1
	    }
	  };

	  var qop = /(^|,)\s*auth\s*($|,)/.test(challenge.qop) && 'auth';
	  var nc = qop && '00000001';
	  var cnonce = qop && v4_1().replace(/-/g, '');
	  var ha1 = ha1Compute(challenge.algorithm, self.user, challenge.realm, self.pass, challenge.nonce, cnonce);
	  var ha2 = md5(method + ':' + path);
	  var digestResponse = qop
	    ? md5(ha1 + ':' + challenge.nonce + ':' + nc + ':' + cnonce + ':' + qop + ':' + ha2)
	    : md5(ha1 + ':' + challenge.nonce + ':' + ha2);
	  var authValues = {
	    username: self.user,
	    realm: challenge.realm,
	    nonce: challenge.nonce,
	    uri: path,
	    qop: qop,
	    response: digestResponse,
	    nc: nc,
	    cnonce: cnonce,
	    algorithm: challenge.algorithm,
	    opaque: challenge.opaque
	  };

	  authHeader = [];
	  for (var k in authValues) {
	    if (authValues[k]) {
	      if (k === 'qop' || k === 'nc' || k === 'algorithm') {
	        authHeader.push(k + '=' + authValues[k]);
	      } else {
	        authHeader.push(k + '="' + authValues[k] + '"');
	      }
	    }
	  }
	  authHeader = 'Digest ' + authHeader.join(', ');
	  self.sentAuth = true;
	  return authHeader
	};

	Auth$1.prototype.onRequest = function (user, pass, sendImmediately, bearer) {
	  var self = this;
	  var request = self.request;

	  var authHeader;
	  if (bearer === undefined && user === undefined) {
	    self.request.emit('error', new Error('no auth mechanism defined'));
	  } else if (bearer !== undefined) {
	    authHeader = self.bearer(bearer, sendImmediately);
	  } else {
	    authHeader = self.basic(user, pass, sendImmediately);
	  }
	  if (authHeader) {
	    request.setHeader('authorization', authHeader);
	  }
	};

	Auth$1.prototype.onResponse = function (response) {
	  var self = this;
	  var request = self.request;

	  if (!self.hasAuth || self.sentAuth) { return null }

	  var c = caseless(response.headers);

	  var authHeader = c.get('www-authenticate');
	  var authVerb = authHeader && authHeader.split(' ')[0].toLowerCase();
	  request.debug('reauth', authVerb);

	  switch (authVerb) {
	    case 'basic':
	      return self.basic(self.user, self.pass, true)

	    case 'bearer':
	      return self.bearer(self.bearerToken, true)

	    case 'digest':
	      return self.digest(request.method, request.path, authHeader)
	  }
	};

	var Auth_1 = Auth$1;

	var auth = {
		Auth: Auth_1
	};

	function sha (key, body, algorithm) {
	  return crypto__default['default'].createHmac(algorithm, key).update(body).digest('base64')
	}

	function rsa (key, body) {
	  return crypto__default['default'].createSign('RSA-SHA1').update(body).sign(key, 'base64')
	}

	function rfc3986 (str) {
	  return encodeURIComponent(str)
	    .replace(/!/g,'%21')
	    .replace(/\*/g,'%2A')
	    .replace(/\(/g,'%28')
	    .replace(/\)/g,'%29')
	    .replace(/'/g,'%27')
	}

	// Maps object to bi-dimensional array
	// Converts { foo: 'A', bar: [ 'b', 'B' ]} to
	// [ ['foo', 'A'], ['bar', 'b'], ['bar', 'B'] ]
	function map$1 (obj) {
	  var key, val, arr = [];
	  for (key in obj) {
	    val = obj[key];
	    if (Array.isArray(val))
	      for (var i = 0; i < val.length; i++)
	        arr.push([key, val[i]]);
	    else if (typeof val === 'object')
	      for (var prop in val)
	        arr.push([key + '[' + prop + ']', val[prop]]);
	    else
	      arr.push([key, val]);
	  }
	  return arr
	}

	// Compare function for sort
	function compare (a, b) {
	  return a > b ? 1 : a < b ? -1 : 0
	}

	function generateBase (httpMethod, base_uri, params) {
	  // adapted from https://dev.twitter.com/docs/auth/oauth and 
	  // https://dev.twitter.com/docs/auth/creating-signature

	  // Parameter normalization
	  // http://tools.ietf.org/html/rfc5849#section-3.4.1.3.2
	  var normalized = map$1(params)
	  // 1.  First, the name and value of each parameter are encoded
	  .map(function (p) {
	    return [ rfc3986(p[0]), rfc3986(p[1] || '') ]
	  })
	  // 2.  The parameters are sorted by name, using ascending byte value
	  //     ordering.  If two or more parameters share the same name, they
	  //     are sorted by their value.
	  .sort(function (a, b) {
	    return compare(a[0], b[0]) || compare(a[1], b[1])
	  })
	  // 3.  The name of each parameter is concatenated to its corresponding
	  //     value using an "=" character (ASCII code 61) as a separator, even
	  //     if the value is empty.
	  .map(function (p) { return p.join('=') })
	   // 4.  The sorted name/value pairs are concatenated together into a
	   //     single string by using an "&" character (ASCII code 38) as
	   //     separator.
	  .join('&');

	  var base = [
	    rfc3986(httpMethod ? httpMethod.toUpperCase() : 'GET'),
	    rfc3986(base_uri),
	    rfc3986(normalized)
	  ].join('&');

	  return base
	}

	function hmacsign (httpMethod, base_uri, params, consumer_secret, token_secret) {
	  var base = generateBase(httpMethod, base_uri, params);
	  var key = [
	    consumer_secret || '',
	    token_secret || ''
	  ].map(rfc3986).join('&');

	  return sha(key, base, 'sha1')
	}

	function hmacsign256 (httpMethod, base_uri, params, consumer_secret, token_secret) {
	  var base = generateBase(httpMethod, base_uri, params);
	  var key = [
	    consumer_secret || '',
	    token_secret || ''
	  ].map(rfc3986).join('&');

	  return sha(key, base, 'sha256')
	}

	function rsasign (httpMethod, base_uri, params, private_key, token_secret) {
	  var base = generateBase(httpMethod, base_uri, params);
	  var key = private_key || '';

	  return rsa(key, base)
	}

	function plaintext (consumer_secret, token_secret) {
	  var key = [
	    consumer_secret || '',
	    token_secret || ''
	  ].map(rfc3986).join('&');

	  return key
	}

	function sign (signMethod, httpMethod, base_uri, params, consumer_secret, token_secret) {
	  var method;
	  var skipArgs = 1;

	  switch (signMethod) {
	    case 'RSA-SHA1':
	      method = rsasign;
	      break
	    case 'HMAC-SHA1':
	      method = hmacsign;
	      break
	    case 'HMAC-SHA256':
	      method = hmacsign256;
	      break
	    case 'PLAINTEXT':
	      method = plaintext;
	      skipArgs = 4;
	      break
	    default:
	     throw new Error('Signature method not supported: ' + signMethod)
	  }

	  return method.apply(null, [].slice.call(arguments, skipArgs))
	}

	var hmacsign_1 = hmacsign;
	var hmacsign256_1 = hmacsign256;
	var rsasign_1 = rsasign;
	var plaintext_1 = plaintext;
	var sign_1 = sign;
	var rfc3986_1 = rfc3986;
	var generateBase_1 = generateBase;

	var oauthSign = {
		hmacsign: hmacsign_1,
		hmacsign256: hmacsign256_1,
		rsasign: rsasign_1,
		plaintext: plaintext_1,
		sign: sign_1,
		rfc3986: rfc3986_1,
		generateBase: generateBase_1
	};

	var Buffer$c = safeBuffer.Buffer;

	function OAuth$1 (request) {
	  this.request = request;
	  this.params = null;
	}

	OAuth$1.prototype.buildParams = function (_oauth, uri, method, query, form, qsLib) {
	  var oa = {};
	  for (var i in _oauth) {
	    oa['oauth_' + i] = _oauth[i];
	  }
	  if (!oa.oauth_version) {
	    oa.oauth_version = '1.0';
	  }
	  if (!oa.oauth_timestamp) {
	    oa.oauth_timestamp = Math.floor(Date.now() / 1000).toString();
	  }
	  if (!oa.oauth_nonce) {
	    oa.oauth_nonce = v4_1().replace(/-/g, '');
	  }
	  if (!oa.oauth_signature_method) {
	    oa.oauth_signature_method = 'HMAC-SHA1';
	  }

	  var consumer_secret_or_private_key = oa.oauth_consumer_secret || oa.oauth_private_key; // eslint-disable-line camelcase
	  delete oa.oauth_consumer_secret;
	  delete oa.oauth_private_key;

	  var token_secret = oa.oauth_token_secret; // eslint-disable-line camelcase
	  delete oa.oauth_token_secret;

	  var realm = oa.oauth_realm;
	  delete oa.oauth_realm;
	  delete oa.oauth_transport_method;

	  var baseurl = uri.protocol + '//' + uri.host + uri.pathname;
	  var params = qsLib.parse([].concat(query, form, qsLib.stringify(oa)).join('&'));

	  oa.oauth_signature = oauthSign.sign(
	    oa.oauth_signature_method,
	    method,
	    baseurl,
	    params,
	    consumer_secret_or_private_key, // eslint-disable-line camelcase
	    token_secret // eslint-disable-line camelcase
	  );

	  if (realm) {
	    oa.realm = realm;
	  }

	  return oa
	};

	OAuth$1.prototype.buildBodyHash = function (_oauth, body) {
	  if (['HMAC-SHA1', 'RSA-SHA1'].indexOf(_oauth.signature_method || 'HMAC-SHA1') < 0) {
	    this.request.emit('error', new Error('oauth: ' + _oauth.signature_method +
	      ' signature_method not supported with body_hash signing.'));
	  }

	  var shasum = crypto__default['default'].createHash('sha1');
	  shasum.update(body || '');
	  var sha1 = shasum.digest('hex');

	  return Buffer$c.from(sha1, 'hex').toString('base64')
	};

	OAuth$1.prototype.concatParams = function (oa, sep, wrap) {
	  wrap = wrap || '';

	  var params = Object.keys(oa).filter(function (i) {
	    return i !== 'realm' && i !== 'oauth_signature'
	  }).sort();

	  if (oa.realm) {
	    params.splice(0, 0, 'realm');
	  }
	  params.push('oauth_signature');

	  return params.map(function (i) {
	    return i + '=' + wrap + oauthSign.rfc3986(oa[i]) + wrap
	  }).join(sep)
	};

	OAuth$1.prototype.onRequest = function (_oauth) {
	  var self = this;
	  self.params = _oauth;

	  var uri = self.request.uri || {};
	  var method = self.request.method || '';
	  var headers = caseless(self.request.headers);
	  var body = self.request.body || '';
	  var qsLib = self.request.qsLib || lib$3;

	  var form;
	  var query;
	  var contentType = headers.get('content-type') || '';
	  var formContentType = 'application/x-www-form-urlencoded';
	  var transport = _oauth.transport_method || 'header';

	  if (contentType.slice(0, formContentType.length) === formContentType) {
	    contentType = formContentType;
	    form = body;
	  }
	  if (uri.query) {
	    query = uri.query;
	  }
	  if (transport === 'body' && (method !== 'POST' || contentType !== formContentType)) {
	    self.request.emit('error', new Error('oauth: transport_method of body requires POST ' +
	      'and content-type ' + formContentType));
	  }

	  if (!form && typeof _oauth.body_hash === 'boolean') {
	    _oauth.body_hash = self.buildBodyHash(_oauth, self.request.body.toString());
	  }

	  var oa = self.buildParams(_oauth, uri, method, query, form, qsLib);

	  switch (transport) {
	    case 'header':
	      self.request.setHeader('Authorization', 'OAuth ' + self.concatParams(oa, ',', '"'));
	      break

	    case 'query':
	      var href = self.request.uri.href += (query ? '&' : '?') + self.concatParams(oa, '&');
	      self.request.uri = url__default['default'].parse(href);
	      self.request.path = self.request.uri.path;
	      break

	    case 'body':
	      self.request.body = (form ? form + '&' : '') + self.concatParams(oa, '&');
	      break

	    default:
	      self.request.emit('error', new Error('oauth: transport_method invalid'));
	  }
	};

	var OAuth_1 = OAuth$1;

	var oauth_1 = {
		OAuth: OAuth_1
	};

	var hawk = createCommonjsModule(function (module, exports) {



	function randomString (size) {
	  var bits = (size + 1) * 6;
	  var buffer = crypto__default['default'].randomBytes(Math.ceil(bits / 8));
	  var string = buffer.toString('base64').replace(/\+/g, '-').replace(/\//g, '_').replace(/=/g, '');
	  return string.slice(0, size)
	}

	function calculatePayloadHash (payload, algorithm, contentType) {
	  var hash = crypto__default['default'].createHash(algorithm);
	  hash.update('hawk.1.payload\n');
	  hash.update((contentType ? contentType.split(';')[0].trim().toLowerCase() : '') + '\n');
	  hash.update(payload || '');
	  hash.update('\n');
	  return hash.digest('base64')
	}

	exports.calculateMac = function (credentials, opts) {
	  var normalized = 'hawk.1.header\n' +
	    opts.ts + '\n' +
	    opts.nonce + '\n' +
	    (opts.method || '').toUpperCase() + '\n' +
	    opts.resource + '\n' +
	    opts.host.toLowerCase() + '\n' +
	    opts.port + '\n' +
	    (opts.hash || '') + '\n';

	  if (opts.ext) {
	    normalized = normalized + opts.ext.replace('\\', '\\\\').replace('\n', '\\n');
	  }

	  normalized = normalized + '\n';

	  if (opts.app) {
	    normalized = normalized + opts.app + '\n' + (opts.dlg || '') + '\n';
	  }

	  var hmac = crypto__default['default'].createHmac(credentials.algorithm, credentials.key).update(normalized);
	  var digest = hmac.digest('base64');
	  return digest
	};

	exports.header = function (uri, method, opts) {
	  var timestamp = opts.timestamp || Math.floor((Date.now() + (opts.localtimeOffsetMsec || 0)) / 1000);
	  var credentials = opts.credentials;
	  if (!credentials || !credentials.id || !credentials.key || !credentials.algorithm) {
	    return ''
	  }

	  if (['sha1', 'sha256'].indexOf(credentials.algorithm) === -1) {
	    return ''
	  }

	  var artifacts = {
	    ts: timestamp,
	    nonce: opts.nonce || randomString(6),
	    method: method,
	    resource: uri.pathname + (uri.search || ''),
	    host: uri.hostname,
	    port: uri.port || (uri.protocol === 'http:' ? 80 : 443),
	    hash: opts.hash,
	    ext: opts.ext,
	    app: opts.app,
	    dlg: opts.dlg
	  };

	  if (!artifacts.hash && (opts.payload || opts.payload === '')) {
	    artifacts.hash = calculatePayloadHash(opts.payload, credentials.algorithm, opts.contentType);
	  }

	  var mac = exports.calculateMac(credentials, artifacts);

	  var hasExt = artifacts.ext !== null && artifacts.ext !== undefined && artifacts.ext !== '';
	  var header = 'Hawk id="' + credentials.id +
	    '", ts="' + artifacts.ts +
	    '", nonce="' + artifacts.nonce +
	    (artifacts.hash ? '", hash="' + artifacts.hash : '') +
	    (hasExt ? '", ext="' + artifacts.ext.replace(/\\/g, '\\\\').replace(/"/g, '\\"') : '') +
	    '", mac="' + mac + '"';

	  if (artifacts.app) {
	    header = header + ', app="' + artifacts.app + (artifacts.dlg ? '", dlg="' + artifacts.dlg : '') + '"';
	  }

	  return header
	};
	});

	var Buffer$b = safeBuffer.Buffer;

	function Multipart$1 (request) {
	  this.request = request;
	  this.boundary = v4_1();
	  this.chunked = false;
	  this.body = null;
	}

	Multipart$1.prototype.isChunked = function (options) {
	  var self = this;
	  var chunked = false;
	  var parts = options.data || options;

	  if (!parts.forEach) {
	    self.request.emit('error', new Error('Argument error, options.multipart.'));
	  }

	  if (options.chunked !== undefined) {
	    chunked = options.chunked;
	  }

	  if (self.request.getHeader('transfer-encoding') === 'chunked') {
	    chunked = true;
	  }

	  if (!chunked) {
	    parts.forEach(function (part) {
	      if (typeof part.body === 'undefined') {
	        self.request.emit('error', new Error('Body attribute missing in multipart.'));
	      }
	      if (isstream(part.body)) {
	        chunked = true;
	      }
	    });
	  }

	  return chunked
	};

	Multipart$1.prototype.setHeaders = function (chunked) {
	  var self = this;

	  if (chunked && !self.request.hasHeader('transfer-encoding')) {
	    self.request.setHeader('transfer-encoding', 'chunked');
	  }

	  var header = self.request.getHeader('content-type');

	  if (!header || header.indexOf('multipart') === -1) {
	    self.request.setHeader('content-type', 'multipart/related; boundary=' + self.boundary);
	  } else {
	    if (header.indexOf('boundary') !== -1) {
	      self.boundary = header.replace(/.*boundary=([^\s;]+).*/, '$1');
	    } else {
	      self.request.setHeader('content-type', header + '; boundary=' + self.boundary);
	    }
	  }
	};

	Multipart$1.prototype.build = function (parts, chunked) {
	  var self = this;
	  var body = chunked ? new combined_stream() : [];

	  function add (part) {
	    if (typeof part === 'number') {
	      part = part.toString();
	    }
	    return chunked ? body.append(part) : body.push(Buffer$b.from(part))
	  }

	  if (self.request.preambleCRLF) {
	    add('\r\n');
	  }

	  parts.forEach(function (part) {
	    var preamble = '--' + self.boundary + '\r\n';
	    Object.keys(part).forEach(function (key) {
	      if (key === 'body') { return }
	      preamble += key + ': ' + part[key] + '\r\n';
	    });
	    preamble += '\r\n';
	    add(preamble);
	    add(part.body);
	    add('\r\n');
	  });
	  add('--' + self.boundary + '--');

	  if (self.request.postambleCRLF) {
	    add('\r\n');
	  }

	  return body
	};

	Multipart$1.prototype.onRequest = function (options) {
	  var self = this;

	  var chunked = self.isChunked(options);
	  var parts = options.data || options;

	  self.setHeaders(chunked);
	  self.chunked = chunked;
	  self.body = self.build(parts, chunked);
	};

	var Multipart_1 = Multipart$1;

	var multipart = {
		Multipart: Multipart_1
	};

	var isUrl = /^https?:/;

	function Redirect$1 (request) {
	  this.request = request;
	  this.followRedirect = true;
	  this.followRedirects = true;
	  this.followAllRedirects = false;
	  this.followOriginalHttpMethod = false;
	  this.allowRedirect = function () { return true };
	  this.maxRedirects = 10;
	  this.redirects = [];
	  this.redirectsFollowed = 0;
	  this.removeRefererHeader = false;
	}

	Redirect$1.prototype.onRequest = function (options) {
	  var self = this;

	  if (options.maxRedirects !== undefined) {
	    self.maxRedirects = options.maxRedirects;
	  }
	  if (typeof options.followRedirect === 'function') {
	    self.allowRedirect = options.followRedirect;
	  }
	  if (options.followRedirect !== undefined) {
	    self.followRedirects = !!options.followRedirect;
	  }
	  if (options.followAllRedirects !== undefined) {
	    self.followAllRedirects = options.followAllRedirects;
	  }
	  if (self.followRedirects || self.followAllRedirects) {
	    self.redirects = self.redirects || [];
	  }
	  if (options.removeRefererHeader !== undefined) {
	    self.removeRefererHeader = options.removeRefererHeader;
	  }
	  if (options.followOriginalHttpMethod !== undefined) {
	    self.followOriginalHttpMethod = options.followOriginalHttpMethod;
	  }
	};

	Redirect$1.prototype.redirectTo = function (response) {
	  var self = this;
	  var request = self.request;

	  var redirectTo = null;
	  if (response.statusCode >= 300 && response.statusCode < 400 && response.caseless.has('location')) {
	    var location = response.caseless.get('location');
	    request.debug('redirect', location);

	    if (self.followAllRedirects) {
	      redirectTo = location;
	    } else if (self.followRedirects) {
	      switch (request.method) {
	        case 'PATCH':
	        case 'PUT':
	        case 'POST':
	        case 'DELETE':
	          // Do not follow redirects
	          break
	        default:
	          redirectTo = location;
	          break
	      }
	    }
	  } else if (response.statusCode === 401) {
	    var authHeader = request._auth.onResponse(response);
	    if (authHeader) {
	      request.setHeader('authorization', authHeader);
	      redirectTo = request.uri;
	    }
	  }
	  return redirectTo
	};

	Redirect$1.prototype.onResponse = function (response) {
	  var self = this;
	  var request = self.request;

	  var redirectTo = self.redirectTo(response);
	  if (!redirectTo || !self.allowRedirect.call(request, response)) {
	    return false
	  }

	  request.debug('redirect to', redirectTo);

	  // ignore any potential response body.  it cannot possibly be useful
	  // to us at this point.
	  // response.resume should be defined, but check anyway before calling. Workaround for browserify.
	  if (response.resume) {
	    response.resume();
	  }

	  if (self.redirectsFollowed >= self.maxRedirects) {
	    request.emit('error', new Error('Exceeded maxRedirects. Probably stuck in a redirect loop ' + request.uri.href));
	    return false
	  }
	  self.redirectsFollowed += 1;

	  if (!isUrl.test(redirectTo)) {
	    redirectTo = url__default['default'].resolve(request.uri.href, redirectTo);
	  }

	  var uriPrev = request.uri;
	  request.uri = url__default['default'].parse(redirectTo);

	  // handle the case where we change protocol from https to http or vice versa
	  if (request.uri.protocol !== uriPrev.protocol) {
	    delete request.agent;
	  }

	  self.redirects.push({ statusCode: response.statusCode, redirectUri: redirectTo });

	  if (self.followAllRedirects && request.method !== 'HEAD' &&
	    response.statusCode !== 401 && response.statusCode !== 307) {
	    request.method = self.followOriginalHttpMethod ? request.method : 'GET';
	  }
	  // request.method = 'GET' // Force all redirects to use GET || commented out fixes #215
	  delete request.src;
	  delete request.req;
	  delete request._started;
	  if (response.statusCode !== 401 && response.statusCode !== 307) {
	    // Remove parameters from the previous response, unless this is the second request
	    // for a server that requires digest authentication.
	    delete request.body;
	    delete request._form;
	    if (request.headers) {
	      request.removeHeader('host');
	      request.removeHeader('content-type');
	      request.removeHeader('content-length');
	      if (request.uri.hostname !== request.originalHost.split(':')[0]) {
	        // Remove authorization if changing hostnames (but not if just
	        // changing ports or protocols).  This matches the behavior of curl:
	        // https://github.com/bagder/curl/blob/6beb0eee/lib/http.c#L710
	        request.removeHeader('authorization');
	      }
	    }
	  }

	  if (!self.removeRefererHeader) {
	    request.setHeader('referer', uriPrev.href);
	  }

	  request.emit('redirect');

	  request.init();

	  return true
	};

	var Redirect_1 = Redirect$1;

	var redirect = {
		Redirect: Redirect_1
	};

	var Buffer$a = safeBuffer.Buffer
	  ;

	var httpOverHttp_1 = httpOverHttp;
	var httpsOverHttp_1 = httpsOverHttp;
	var httpOverHttps_1 = httpOverHttps;
	var httpsOverHttps_1 = httpsOverHttps;


	function httpOverHttp(options) {
	  var agent = new TunnelingAgent(options);
	  agent.request = http__default['default'].request;
	  return agent
	}

	function httpsOverHttp(options) {
	  var agent = new TunnelingAgent(options);
	  agent.request = http__default['default'].request;
	  agent.createSocket = createSecureSocket;
	  agent.defaultPort = 443;
	  return agent
	}

	function httpOverHttps(options) {
	  var agent = new TunnelingAgent(options);
	  agent.request = https__default['default'].request;
	  return agent
	}

	function httpsOverHttps(options) {
	  var agent = new TunnelingAgent(options);
	  agent.request = https__default['default'].request;
	  agent.createSocket = createSecureSocket;
	  agent.defaultPort = 443;
	  return agent
	}


	function TunnelingAgent(options) {
	  var self = this;
	  self.options = options || {};
	  self.proxyOptions = self.options.proxy || {};
	  self.maxSockets = self.options.maxSockets || http__default['default'].Agent.defaultMaxSockets;
	  self.requests = [];
	  self.sockets = [];

	  self.on('free', function onFree(socket, host, port) {
	    for (var i = 0, len = self.requests.length; i < len; ++i) {
	      var pending = self.requests[i];
	      if (pending.host === host && pending.port === port) {
	        // Detect the request to connect same origin server,
	        // reuse the connection.
	        self.requests.splice(i, 1);
	        pending.request.onSocket(socket);
	        return
	      }
	    }
	    socket.destroy();
	    self.removeSocket(socket);
	  });
	}
	util__default['default'].inherits(TunnelingAgent, EventEmitter__default['default'].EventEmitter);

	TunnelingAgent.prototype.addRequest = function addRequest(req, options) {
	  var self = this;

	   // Legacy API: addRequest(req, host, port, path)
	  if (typeof options === 'string') {
	    options = {
	      host: options,
	      port: arguments[2],
	      path: arguments[3]
	    };
	  }

	  if (self.sockets.length >= this.maxSockets) {
	    // We are over limit so we'll add it to the queue.
	    self.requests.push({host: options.host, port: options.port, request: req});
	    return
	  }

	  // If we are under maxSockets create a new one.
	  self.createConnection({host: options.host, port: options.port, request: req});
	};

	TunnelingAgent.prototype.createConnection = function createConnection(pending) {
	  var self = this;

	  self.createSocket(pending, function(socket) {
	    socket.on('free', onFree);
	    socket.on('close', onCloseOrRemove);
	    socket.on('agentRemove', onCloseOrRemove);
	    pending.request.onSocket(socket);

	    function onFree() {
	      self.emit('free', socket, pending.host, pending.port);
	    }

	    function onCloseOrRemove(err) {
	      self.removeSocket(socket);
	      socket.removeListener('free', onFree);
	      socket.removeListener('close', onCloseOrRemove);
	      socket.removeListener('agentRemove', onCloseOrRemove);
	    }
	  });
	};

	TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
	  var self = this;
	  var placeholder = {};
	  self.sockets.push(placeholder);

	  var connectOptions = mergeOptions({}, self.proxyOptions,
	    { method: 'CONNECT'
	    , path: options.host + ':' + options.port
	    , agent: false
	    }
	  );
	  if (connectOptions.proxyAuth) {
	    connectOptions.headers = connectOptions.headers || {};
	    connectOptions.headers['Proxy-Authorization'] = 'Basic ' +
	        Buffer$a.from(connectOptions.proxyAuth).toString('base64');
	  }

	  debug$1('making CONNECT request');
	  var connectReq = self.request(connectOptions);
	  connectReq.useChunkedEncodingByDefault = false; // for v0.6
	  connectReq.once('response', onResponse); // for v0.6
	  connectReq.once('upgrade', onUpgrade);   // for v0.6
	  connectReq.once('connect', onConnect);   // for v0.7 or later
	  connectReq.once('error', onError);
	  connectReq.end();

	  function onResponse(res) {
	    // Very hacky. This is necessary to avoid http-parser leaks.
	    res.upgrade = true;
	  }

	  function onUpgrade(res, socket, head) {
	    // Hacky.
	    process.nextTick(function() {
	      onConnect(res, socket, head);
	    });
	  }

	  function onConnect(res, socket, head) {
	    connectReq.removeAllListeners();
	    socket.removeAllListeners();

	    if (res.statusCode === 200) {
	      assert__default['default'].equal(head.length, 0);
	      debug$1('tunneling connection has established');
	      self.sockets[self.sockets.indexOf(placeholder)] = socket;
	      cb(socket);
	    } else {
	      debug$1('tunneling socket could not be established, statusCode=%d', res.statusCode);
	      var error = new Error('tunneling socket could not be established, ' + 'statusCode=' + res.statusCode);
	      error.code = 'ECONNRESET';
	      options.request.emit('error', error);
	      self.removeSocket(placeholder);
	    }
	  }

	  function onError(cause) {
	    connectReq.removeAllListeners();

	    debug$1('tunneling socket could not be established, cause=%s\n', cause.message, cause.stack);
	    var error = new Error('tunneling socket could not be established, ' + 'cause=' + cause.message);
	    error.code = 'ECONNRESET';
	    options.request.emit('error', error);
	    self.removeSocket(placeholder);
	  }
	};

	TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
	  var pos = this.sockets.indexOf(socket);
	  if (pos === -1) return

	  this.sockets.splice(pos, 1);

	  var pending = this.requests.shift();
	  if (pending) {
	    // If we have pending requests and a socket gets closed a new one
	    // needs to be created to take over in the pool for the one that closed.
	    this.createConnection(pending);
	  }
	};

	function createSecureSocket(options, cb) {
	  var self = this;
	  TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {
	    // 0 is dummy port for v0.6
	    var secureSocket = tls__default['default'].connect(0, mergeOptions({}, self.options,
	      { servername: options.host
	      , socket: socket
	      }
	    ));
	    self.sockets[self.sockets.indexOf(socket)] = secureSocket;
	    cb(secureSocket);
	  });
	}


	function mergeOptions(target) {
	  for (var i = 1, len = arguments.length; i < len; ++i) {
	    var overrides = arguments[i];
	    if (typeof overrides === 'object') {
	      var keys = Object.keys(overrides);
	      for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {
	        var k = keys[j];
	        if (overrides[k] !== undefined) {
	          target[k] = overrides[k];
	        }
	      }
	    }
	  }
	  return target
	}


	var debug$1;
	if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
	  debug$1 = function() {
	    var args = Array.prototype.slice.call(arguments);
	    if (typeof args[0] === 'string') {
	      args[0] = 'TUNNEL: ' + args[0];
	    } else {
	      args.unshift('TUNNEL:');
	    }
	    console.error.apply(console, args);
	  };
	} else {
	  debug$1 = function() {};
	}
	var debug_1 = debug$1; // for test

	var tunnelAgent = {
		httpOverHttp: httpOverHttp_1,
		httpsOverHttp: httpsOverHttp_1,
		httpOverHttps: httpOverHttps_1,
		httpsOverHttps: httpsOverHttps_1,
		debug: debug_1
	};

	var defaultProxyHeaderWhiteList = [
	  'accept',
	  'accept-charset',
	  'accept-encoding',
	  'accept-language',
	  'accept-ranges',
	  'cache-control',
	  'content-encoding',
	  'content-language',
	  'content-location',
	  'content-md5',
	  'content-range',
	  'content-type',
	  'connection',
	  'date',
	  'expect',
	  'max-forwards',
	  'pragma',
	  'referer',
	  'te',
	  'user-agent',
	  'via'
	];

	var defaultProxyHeaderExclusiveList = [
	  'proxy-authorization'
	];

	function constructProxyHost (uriObject) {
	  var port = uriObject.port;
	  var protocol = uriObject.protocol;
	  var proxyHost = uriObject.hostname + ':';

	  if (port) {
	    proxyHost += port;
	  } else if (protocol === 'https:') {
	    proxyHost += '443';
	  } else {
	    proxyHost += '80';
	  }

	  return proxyHost
	}

	function constructProxyHeaderWhiteList (headers, proxyHeaderWhiteList) {
	  var whiteList = proxyHeaderWhiteList
	    .reduce(function (set, header) {
	      set[header.toLowerCase()] = true;
	      return set
	    }, {});

	  return Object.keys(headers)
	    .filter(function (header) {
	      return whiteList[header.toLowerCase()]
	    })
	    .reduce(function (set, header) {
	      set[header] = headers[header];
	      return set
	    }, {})
	}

	function constructTunnelOptions (request, proxyHeaders) {
	  var proxy = request.proxy;

	  var tunnelOptions = {
	    proxy: {
	      host: proxy.hostname,
	      port: +proxy.port,
	      proxyAuth: proxy.auth,
	      headers: proxyHeaders
	    },
	    headers: request.headers,
	    ca: request.ca,
	    cert: request.cert,
	    key: request.key,
	    passphrase: request.passphrase,
	    pfx: request.pfx,
	    ciphers: request.ciphers,
	    rejectUnauthorized: request.rejectUnauthorized,
	    secureOptions: request.secureOptions,
	    secureProtocol: request.secureProtocol
	  };

	  return tunnelOptions
	}

	function constructTunnelFnName (uri, proxy) {
	  var uriProtocol = (uri.protocol === 'https:' ? 'https' : 'http');
	  var proxyProtocol = (proxy.protocol === 'https:' ? 'Https' : 'Http');
	  return [uriProtocol, proxyProtocol].join('Over')
	}

	function getTunnelFn (request) {
	  var uri = request.uri;
	  var proxy = request.proxy;
	  var tunnelFnName = constructTunnelFnName(uri, proxy);
	  return tunnelAgent[tunnelFnName]
	}

	function Tunnel$1 (request) {
	  this.request = request;
	  this.proxyHeaderWhiteList = defaultProxyHeaderWhiteList;
	  this.proxyHeaderExclusiveList = [];
	  if (typeof request.tunnel !== 'undefined') {
	    this.tunnelOverride = request.tunnel;
	  }
	}

	Tunnel$1.prototype.isEnabled = function () {
	  var self = this;
	  var request = self.request;
	    // Tunnel HTTPS by default. Allow the user to override this setting.

	  // If self.tunnelOverride is set (the user specified a value), use it.
	  if (typeof self.tunnelOverride !== 'undefined') {
	    return self.tunnelOverride
	  }

	  // If the destination is HTTPS, tunnel.
	  if (request.uri.protocol === 'https:') {
	    return true
	  }

	  // Otherwise, do not use tunnel.
	  return false
	};

	Tunnel$1.prototype.setup = function (options) {
	  var self = this;
	  var request = self.request;

	  options = options || {};

	  if (typeof request.proxy === 'string') {
	    request.proxy = url__default['default'].parse(request.proxy);
	  }

	  if (!request.proxy || !request.tunnel) {
	    return false
	  }

	  // Setup Proxy Header Exclusive List and White List
	  if (options.proxyHeaderWhiteList) {
	    self.proxyHeaderWhiteList = options.proxyHeaderWhiteList;
	  }
	  if (options.proxyHeaderExclusiveList) {
	    self.proxyHeaderExclusiveList = options.proxyHeaderExclusiveList;
	  }

	  var proxyHeaderExclusiveList = self.proxyHeaderExclusiveList.concat(defaultProxyHeaderExclusiveList);
	  var proxyHeaderWhiteList = self.proxyHeaderWhiteList.concat(proxyHeaderExclusiveList);

	  // Setup Proxy Headers and Proxy Headers Host
	  // Only send the Proxy White Listed Header names
	  var proxyHeaders = constructProxyHeaderWhiteList(request.headers, proxyHeaderWhiteList);
	  proxyHeaders.host = constructProxyHost(request.uri);

	  proxyHeaderExclusiveList.forEach(request.removeHeader, request);

	  // Set Agent from Tunnel Data
	  var tunnelFn = getTunnelFn(request);
	  var tunnelOptions = constructTunnelOptions(request, proxyHeaders);
	  request.agent = tunnelFn(tunnelOptions);

	  return true
	};

	Tunnel$1.defaultProxyHeaderWhiteList = defaultProxyHeaderWhiteList;
	Tunnel$1.defaultProxyHeaderExclusiveList = defaultProxyHeaderExclusiveList;
	var Tunnel_1 = Tunnel$1;

	var tunnel_1 = {
		Tunnel: Tunnel_1
	};

	var performanceNow = createCommonjsModule(function (module) {
	// Generated by CoffeeScript 1.12.2
	(function() {
	  var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;

	  if ((typeof performance !== "undefined" && performance !== null) && performance.now) {
	    module.exports = function() {
	      return performance.now();
	    };
	  } else if ((typeof process !== "undefined" && process !== null) && process.hrtime) {
	    module.exports = function() {
	      return (getNanoSeconds() - nodeLoadTime) / 1e6;
	    };
	    hrtime = process.hrtime;
	    getNanoSeconds = function() {
	      var hr;
	      hr = hrtime();
	      return hr[0] * 1e9 + hr[1];
	    };
	    moduleLoadTime = getNanoSeconds();
	    upTime = process.uptime() * 1e9;
	    nodeLoadTime = moduleLoadTime - upTime;
	  } else if (Date.now) {
	    module.exports = function() {
	      return Date.now() - loadTime;
	    };
	    loadTime = Date.now();
	  } else {
	    module.exports = function() {
	      return new Date().getTime() - loadTime;
	    };
	    loadTime = new Date().getTime();
	  }

	}).call(commonjsGlobal);


	});

	var isTypedArray = isTypedarray.strict;

	var cookies = cookies$1;

	var Querystring = querystring_1.Querystring;
	var Har = har.Har;
	var Auth = auth.Auth;
	var OAuth = oauth_1.OAuth;

	var Multipart = multipart.Multipart;
	var Redirect = redirect.Redirect;
	var Tunnel = tunnel_1.Tunnel;

	var Buffer$9 = safeBuffer.Buffer;

	var safeStringify = helpers.safeStringify;
	var isReadStream = helpers.isReadStream;
	var toBase64 = helpers.toBase64;
	var defer = helpers.defer;
	var copy$2 = helpers.copy;
	var version$7 = helpers.version;
	var globalCookieJar = cookies.jar();

	var globalPool = {};

	function filterForNonReserved (reserved, options) {
	  // Filter out properties that are not reserved.
	  // Reserved values are passed in at call site.

	  var object = {};
	  for (var i in options) {
	    var notReserved = (reserved.indexOf(i) === -1);
	    if (notReserved) {
	      object[i] = options[i];
	    }
	  }
	  return object
	}

	function filterOutReservedFunctions (reserved, options) {
	  // Filter out properties that are functions and are reserved.
	  // Reserved values are passed in at call site.

	  var object = {};
	  for (var i in options) {
	    var isReserved = !(reserved.indexOf(i) === -1);
	    var isFunction = (typeof options[i] === 'function');
	    if (!(isReserved && isFunction)) {
	      object[i] = options[i];
	    }
	  }
	  return object
	}

	// Return a simpler request object to allow serialization
	function requestToJSON () {
	  var self = this;
	  return {
	    uri: self.uri,
	    method: self.method,
	    headers: self.headers
	  }
	}

	// Return a simpler response object to allow serialization
	function responseToJSON () {
	  var self = this;
	  return {
	    statusCode: self.statusCode,
	    body: self.body,
	    headers: self.headers,
	    request: requestToJSON.call(self.request)
	  }
	}

	function Request (options) {
	  // if given the method property in options, set property explicitMethod to true

	  // extend the Request instance with any non-reserved properties
	  // remove any reserved functions from the options object
	  // set Request instance to be readable and writable
	  // call init

	  var self = this;

	  // start with HAR, then override with additional options
	  if (options.har) {
	    self._har = new Har(self);
	    options = self._har.options(options);
	  }

	  require$$0__default['default'].Stream.call(self);
	  var reserved = Object.keys(Request.prototype);
	  var nonReserved = filterForNonReserved(reserved, options);

	  extend$1(self, nonReserved);
	  options = filterOutReservedFunctions(reserved, options);

	  self.readable = true;
	  self.writable = true;
	  if (options.method) {
	    self.explicitMethod = true;
	  }
	  self._qs = new Querystring(self);
	  self._auth = new Auth(self);
	  self._oauth = new OAuth(self);
	  self._multipart = new Multipart(self);
	  self._redirect = new Redirect(self);
	  self._tunnel = new Tunnel(self);
	  self.init(options);
	}

	util__default['default'].inherits(Request, require$$0__default['default'].Stream);

	// Debugging
	Request.debug = process.env.NODE_DEBUG && /\brequest\b/.test(process.env.NODE_DEBUG);
	function debug () {
	  if (Request.debug) {
	    console.error('REQUEST %s', util__default['default'].format.apply(util__default['default'], arguments));
	  }
	}
	Request.prototype.debug = debug;

	Request.prototype.init = function (options) {
	  // init() contains all the code to setup the request object.
	  // the actual outgoing request is not started until start() is called
	  // this function is called from both the constructor and on redirect.
	  var self = this;
	  if (!options) {
	    options = {};
	  }
	  self.headers = self.headers ? copy$2(self.headers) : {};

	  // Delete headers with value undefined since they break
	  // ClientRequest.OutgoingMessage.setHeader in node 0.12
	  for (var headerName in self.headers) {
	    if (typeof self.headers[headerName] === 'undefined') {
	      delete self.headers[headerName];
	    }
	  }

	  caseless.httpify(self, self.headers);

	  if (!self.method) {
	    self.method = options.method || 'GET';
	  }
	  if (!self.localAddress) {
	    self.localAddress = options.localAddress;
	  }

	  self._qs.init(options);

	  debug(options);
	  if (!self.pool && self.pool !== false) {
	    self.pool = globalPool;
	  }
	  self.dests = self.dests || [];
	  self.__isRequestRequest = true;

	  // Protect against double callback
	  if (!self._callback && self.callback) {
	    self._callback = self.callback;
	    self.callback = function () {
	      if (self._callbackCalled) {
	        return // Print a warning maybe?
	      }
	      self._callbackCalled = true;
	      self._callback.apply(self, arguments);
	    };
	    self.on('error', self.callback.bind());
	    self.on('complete', self.callback.bind(self, null));
	  }

	  // People use this property instead all the time, so support it
	  if (!self.uri && self.url) {
	    self.uri = self.url;
	    delete self.url;
	  }

	  // If there's a baseUrl, then use it as the base URL (i.e. uri must be
	  // specified as a relative path and is appended to baseUrl).
	  if (self.baseUrl) {
	    if (typeof self.baseUrl !== 'string') {
	      return self.emit('error', new Error('options.baseUrl must be a string'))
	    }

	    if (typeof self.uri !== 'string') {
	      return self.emit('error', new Error('options.uri must be a string when using options.baseUrl'))
	    }

	    if (self.uri.indexOf('//') === 0 || self.uri.indexOf('://') !== -1) {
	      return self.emit('error', new Error('options.uri must be a path when using options.baseUrl'))
	    }

	    // Handle all cases to make sure that there's only one slash between
	    // baseUrl and uri.
	    var baseUrlEndsWithSlash = self.baseUrl.lastIndexOf('/') === self.baseUrl.length - 1;
	    var uriStartsWithSlash = self.uri.indexOf('/') === 0;

	    if (baseUrlEndsWithSlash && uriStartsWithSlash) {
	      self.uri = self.baseUrl + self.uri.slice(1);
	    } else if (baseUrlEndsWithSlash || uriStartsWithSlash) {
	      self.uri = self.baseUrl + self.uri;
	    } else if (self.uri === '') {
	      self.uri = self.baseUrl;
	    } else {
	      self.uri = self.baseUrl + '/' + self.uri;
	    }
	    delete self.baseUrl;
	  }

	  // A URI is needed by this point, emit error if we haven't been able to get one
	  if (!self.uri) {
	    return self.emit('error', new Error('options.uri is a required argument'))
	  }

	  // If a string URI/URL was given, parse it into a URL object
	  if (typeof self.uri === 'string') {
	    self.uri = url__default['default'].parse(self.uri);
	  }

	  // Some URL objects are not from a URL parsed string and need href added
	  if (!self.uri.href) {
	    self.uri.href = url__default['default'].format(self.uri);
	  }

	  // DEPRECATED: Warning for users of the old Unix Sockets URL Scheme
	  if (self.uri.protocol === 'unix:') {
	    return self.emit('error', new Error('`unix://` URL scheme is no longer supported. Please use the format `http://unix:SOCKET:PATH`'))
	  }

	  // Support Unix Sockets
	  if (self.uri.host === 'unix') {
	    self.enableUnixSocket();
	  }

	  if (self.strictSSL === false) {
	    self.rejectUnauthorized = false;
	  }

	  if (!self.uri.pathname) { self.uri.pathname = '/'; }

	  if (!(self.uri.host || (self.uri.hostname && self.uri.port)) && !self.uri.isUnix) {
	    // Invalid URI: it may generate lot of bad errors, like 'TypeError: Cannot call method `indexOf` of undefined' in CookieJar
	    // Detect and reject it as soon as possible
	    var faultyUri = url__default['default'].format(self.uri);
	    var message = 'Invalid URI "' + faultyUri + '"';
	    if (Object.keys(options).length === 0) {
	      // No option ? This can be the sign of a redirect
	      // As this is a case where the user cannot do anything (they didn't call request directly with this URL)
	      // they should be warned that it can be caused by a redirection (can save some hair)
	      message += '. This can be caused by a crappy redirection.';
	    }
	    // This error was fatal
	    self.abort();
	    return self.emit('error', new Error(message))
	  }

	  if (!self.hasOwnProperty('proxy')) {
	    self.proxy = getProxyFromURI_1(self.uri);
	  }

	  self.tunnel = self._tunnel.isEnabled();
	  if (self.proxy) {
	    self._tunnel.setup(options);
	  }

	  self._redirect.onRequest(options);

	  self.setHost = false;
	  if (!self.hasHeader('host')) {
	    var hostHeaderName = self.originalHostHeaderName || 'host';
	    self.setHeader(hostHeaderName, self.uri.host);
	    // Drop :port suffix from Host header if known protocol.
	    if (self.uri.port) {
	      if ((self.uri.port === '80' && self.uri.protocol === 'http:') ||
	          (self.uri.port === '443' && self.uri.protocol === 'https:')) {
	        self.setHeader(hostHeaderName, self.uri.hostname);
	      }
	    }
	    self.setHost = true;
	  }

	  self.jar(self._jar || options.jar);

	  if (!self.uri.port) {
	    if (self.uri.protocol === 'http:') { self.uri.port = 80; } else if (self.uri.protocol === 'https:') { self.uri.port = 443; }
	  }

	  if (self.proxy && !self.tunnel) {
	    self.port = self.proxy.port;
	    self.host = self.proxy.hostname;
	  } else {
	    self.port = self.uri.port;
	    self.host = self.uri.hostname;
	  }

	  if (options.form) {
	    self.form(options.form);
	  }

	  if (options.formData) {
	    var formData = options.formData;
	    var requestForm = self.form();
	    var appendFormValue = function (key, value) {
	      if (value && value.hasOwnProperty('value') && value.hasOwnProperty('options')) {
	        requestForm.append(key, value.value, value.options);
	      } else {
	        requestForm.append(key, value);
	      }
	    };
	    for (var formKey in formData) {
	      if (formData.hasOwnProperty(formKey)) {
	        var formValue = formData[formKey];
	        if (formValue instanceof Array) {
	          for (var j = 0; j < formValue.length; j++) {
	            appendFormValue(formKey, formValue[j]);
	          }
	        } else {
	          appendFormValue(formKey, formValue);
	        }
	      }
	    }
	  }

	  if (options.qs) {
	    self.qs(options.qs);
	  }

	  if (self.uri.path) {
	    self.path = self.uri.path;
	  } else {
	    self.path = self.uri.pathname + (self.uri.search || '');
	  }

	  if (self.path.length === 0) {
	    self.path = '/';
	  }

	  // Auth must happen last in case signing is dependent on other headers
	  if (options.aws) {
	    self.aws(options.aws);
	  }

	  if (options.hawk) {
	    self.hawk(options.hawk);
	  }

	  if (options.httpSignature) {
	    self.httpSignature(options.httpSignature);
	  }

	  if (options.auth) {
	    if (Object.prototype.hasOwnProperty.call(options.auth, 'username')) {
	      options.auth.user = options.auth.username;
	    }
	    if (Object.prototype.hasOwnProperty.call(options.auth, 'password')) {
	      options.auth.pass = options.auth.password;
	    }

	    self.auth(
	      options.auth.user,
	      options.auth.pass,
	      options.auth.sendImmediately,
	      options.auth.bearer
	    );
	  }

	  if (self.gzip && !self.hasHeader('accept-encoding')) {
	    self.setHeader('accept-encoding', 'gzip, deflate');
	  }

	  if (self.uri.auth && !self.hasHeader('authorization')) {
	    var uriAuthPieces = self.uri.auth.split(':').map(function (item) { return self._qs.unescape(item) });
	    self.auth(uriAuthPieces[0], uriAuthPieces.slice(1).join(':'), true);
	  }

	  if (!self.tunnel && self.proxy && self.proxy.auth && !self.hasHeader('proxy-authorization')) {
	    var proxyAuthPieces = self.proxy.auth.split(':').map(function (item) { return self._qs.unescape(item) });
	    var authHeader = 'Basic ' + toBase64(proxyAuthPieces.join(':'));
	    self.setHeader('proxy-authorization', authHeader);
	  }

	  if (self.proxy && !self.tunnel) {
	    self.path = (self.uri.protocol + '//' + self.uri.host + self.path);
	  }

	  if (options.json) {
	    self.json(options.json);
	  }
	  if (options.multipart) {
	    self.multipart(options.multipart);
	  }

	  if (options.time) {
	    self.timing = true;

	    // NOTE: elapsedTime is deprecated in favor of .timings
	    self.elapsedTime = self.elapsedTime || 0;
	  }

	  function setContentLength () {
	    if (isTypedArray(self.body)) {
	      self.body = Buffer$9.from(self.body);
	    }

	    if (!self.hasHeader('content-length')) {
	      var length;
	      if (typeof self.body === 'string') {
	        length = Buffer$9.byteLength(self.body);
	      } else if (Array.isArray(self.body)) {
	        length = self.body.reduce(function (a, b) { return a + b.length }, 0);
	      } else {
	        length = self.body.length;
	      }

	      if (length) {
	        self.setHeader('content-length', length);
	      } else {
	        self.emit('error', new Error('Argument error, options.body.'));
	      }
	    }
	  }
	  if (self.body && !isstream(self.body)) {
	    setContentLength();
	  }

	  if (options.oauth) {
	    self.oauth(options.oauth);
	  } else if (self._oauth.params && self.hasHeader('authorization')) {
	    self.oauth(self._oauth.params);
	  }

	  var protocol = self.proxy && !self.tunnel ? self.proxy.protocol : self.uri.protocol;
	  var defaultModules = {'http:': http__default['default'], 'https:': https__default['default']};
	  var httpModules = self.httpModules || {};

	  self.httpModule = httpModules[protocol] || defaultModules[protocol];

	  if (!self.httpModule) {
	    return self.emit('error', new Error('Invalid protocol: ' + protocol))
	  }

	  if (options.ca) {
	    self.ca = options.ca;
	  }

	  if (!self.agent) {
	    if (options.agentOptions) {
	      self.agentOptions = options.agentOptions;
	    }

	    if (options.agentClass) {
	      self.agentClass = options.agentClass;
	    } else if (options.forever) {
	      var v = version$7();
	      // use ForeverAgent in node 0.10- only
	      if (v.major === 0 && v.minor <= 10) {
	        self.agentClass = protocol === 'http:' ? foreverAgent : foreverAgent.SSL;
	      } else {
	        self.agentClass = self.httpModule.Agent;
	        self.agentOptions = self.agentOptions || {};
	        self.agentOptions.keepAlive = true;
	      }
	    } else {
	      self.agentClass = self.httpModule.Agent;
	    }
	  }

	  if (self.pool === false) {
	    self.agent = false;
	  } else {
	    self.agent = self.agent || self.getNewAgent();
	  }

	  self.on('pipe', function (src) {
	    if (self.ntick && self._started) {
	      self.emit('error', new Error('You cannot pipe to this stream after the outbound request has started.'));
	    }
	    self.src = src;
	    if (isReadStream(src)) {
	      if (!self.hasHeader('content-type')) {
	        self.setHeader('content-type', mimeTypes.lookup(src.path));
	      }
	    } else {
	      if (src.headers) {
	        for (var i in src.headers) {
	          if (!self.hasHeader(i)) {
	            self.setHeader(i, src.headers[i]);
	          }
	        }
	      }
	      if (self._json && !self.hasHeader('content-type')) {
	        self.setHeader('content-type', 'application/json');
	      }
	      if (src.method && !self.explicitMethod) {
	        self.method = src.method;
	      }
	    }

	  // self.on('pipe', function () {
	  //   console.error('You have already piped to this stream. Pipeing twice is likely to break the request.')
	  // })
	  });

	  defer(function () {
	    if (self._aborted) {
	      return
	    }

	    var end = function () {
	      if (self._form) {
	        if (!self._auth.hasAuth) {
	          self._form.pipe(self);
	        } else if (self._auth.hasAuth && self._auth.sentAuth) {
	          self._form.pipe(self);
	        }
	      }
	      if (self._multipart && self._multipart.chunked) {
	        self._multipart.body.pipe(self);
	      }
	      if (self.body) {
	        if (isstream(self.body)) {
	          self.body.pipe(self);
	        } else {
	          setContentLength();
	          if (Array.isArray(self.body)) {
	            self.body.forEach(function (part) {
	              self.write(part);
	            });
	          } else {
	            self.write(self.body);
	          }
	          self.end();
	        }
	      } else if (self.requestBodyStream) {
	        console.warn('options.requestBodyStream is deprecated, please pass the request object to stream.pipe.');
	        self.requestBodyStream.pipe(self);
	      } else if (!self.src) {
	        if (self._auth.hasAuth && !self._auth.sentAuth) {
	          self.end();
	          return
	        }
	        if (self.method !== 'GET' && typeof self.method !== 'undefined') {
	          self.setHeader('content-length', 0);
	        }
	        self.end();
	      }
	    };

	    if (self._form && !self.hasHeader('content-length')) {
	      // Before ending the request, we had to compute the length of the whole form, asyncly
	      self.setHeader(self._form.getHeaders(), true);
	      self._form.getLength(function (err, length) {
	        if (!err && !isNaN(length)) {
	          self.setHeader('content-length', length);
	        }
	        end();
	      });
	    } else {
	      end();
	    }

	    self.ntick = true;
	  });
	};

	Request.prototype.getNewAgent = function () {
	  var self = this;
	  var Agent = self.agentClass;
	  var options = {};
	  if (self.agentOptions) {
	    for (var i in self.agentOptions) {
	      options[i] = self.agentOptions[i];
	    }
	  }
	  if (self.ca) {
	    options.ca = self.ca;
	  }
	  if (self.ciphers) {
	    options.ciphers = self.ciphers;
	  }
	  if (self.secureProtocol) {
	    options.secureProtocol = self.secureProtocol;
	  }
	  if (self.secureOptions) {
	    options.secureOptions = self.secureOptions;
	  }
	  if (typeof self.rejectUnauthorized !== 'undefined') {
	    options.rejectUnauthorized = self.rejectUnauthorized;
	  }

	  if (self.cert && self.key) {
	    options.key = self.key;
	    options.cert = self.cert;
	  }

	  if (self.pfx) {
	    options.pfx = self.pfx;
	  }

	  if (self.passphrase) {
	    options.passphrase = self.passphrase;
	  }

	  var poolKey = '';

	  // different types of agents are in different pools
	  if (Agent !== self.httpModule.Agent) {
	    poolKey += Agent.name;
	  }

	  // ca option is only relevant if proxy or destination are https
	  var proxy = self.proxy;
	  if (typeof proxy === 'string') {
	    proxy = url__default['default'].parse(proxy);
	  }
	  var isHttps = (proxy && proxy.protocol === 'https:') || this.uri.protocol === 'https:';

	  if (isHttps) {
	    if (options.ca) {
	      if (poolKey) {
	        poolKey += ':';
	      }
	      poolKey += options.ca;
	    }

	    if (typeof options.rejectUnauthorized !== 'undefined') {
	      if (poolKey) {
	        poolKey += ':';
	      }
	      poolKey += options.rejectUnauthorized;
	    }

	    if (options.cert) {
	      if (poolKey) {
	        poolKey += ':';
	      }
	      poolKey += options.cert.toString('ascii') + options.key.toString('ascii');
	    }

	    if (options.pfx) {
	      if (poolKey) {
	        poolKey += ':';
	      }
	      poolKey += options.pfx.toString('ascii');
	    }

	    if (options.ciphers) {
	      if (poolKey) {
	        poolKey += ':';
	      }
	      poolKey += options.ciphers;
	    }

	    if (options.secureProtocol) {
	      if (poolKey) {
	        poolKey += ':';
	      }
	      poolKey += options.secureProtocol;
	    }

	    if (options.secureOptions) {
	      if (poolKey) {
	        poolKey += ':';
	      }
	      poolKey += options.secureOptions;
	    }
	  }

	  if (self.pool === globalPool && !poolKey && Object.keys(options).length === 0 && self.httpModule.globalAgent) {
	    // not doing anything special.  Use the globalAgent
	    return self.httpModule.globalAgent
	  }

	  // we're using a stored agent.  Make sure it's protocol-specific
	  poolKey = self.uri.protocol + poolKey;

	  // generate a new agent for this setting if none yet exists
	  if (!self.pool[poolKey]) {
	    self.pool[poolKey] = new Agent(options);
	    // properly set maxSockets on new agents
	    if (self.pool.maxSockets) {
	      self.pool[poolKey].maxSockets = self.pool.maxSockets;
	    }
	  }

	  return self.pool[poolKey]
	};

	Request.prototype.start = function () {
	  // start() is called once we are ready to send the outgoing HTTP request.
	  // this is usually called on the first write(), end() or on nextTick()
	  var self = this;

	  if (self.timing) {
	    // All timings will be relative to this request's startTime.  In order to do this,
	    // we need to capture the wall-clock start time (via Date), immediately followed
	    // by the high-resolution timer (via now()).  While these two won't be set
	    // at the _exact_ same time, they should be close enough to be able to calculate
	    // high-resolution, monotonically non-decreasing timestamps relative to startTime.
	    var startTime = new Date().getTime();
	    var startTimeNow = performanceNow();
	  }

	  if (self._aborted) {
	    return
	  }

	  self._started = true;
	  self.method = self.method || 'GET';
	  self.href = self.uri.href;

	  if (self.src && self.src.stat && self.src.stat.size && !self.hasHeader('content-length')) {
	    self.setHeader('content-length', self.src.stat.size);
	  }
	  if (self._aws) {
	    self.aws(self._aws, true);
	  }

	  // We have a method named auth, which is completely different from the http.request
	  // auth option.  If we don't remove it, we're gonna have a bad time.
	  var reqOptions = copy$2(self);
	  delete reqOptions.auth;

	  debug('make request', self.uri.href);

	  // node v6.8.0 now supports a `timeout` value in `http.request()`, but we
	  // should delete it for now since we handle timeouts manually for better
	  // consistency with node versions before v6.8.0
	  delete reqOptions.timeout;

	  try {
	    self.req = self.httpModule.request(reqOptions);
	  } catch (err) {
	    self.emit('error', err);
	    return
	  }

	  if (self.timing) {
	    self.startTime = startTime;
	    self.startTimeNow = startTimeNow;

	    // Timing values will all be relative to startTime (by comparing to startTimeNow
	    // so we have an accurate clock)
	    self.timings = {};
	  }

	  var timeout;
	  if (self.timeout && !self.timeoutTimer) {
	    if (self.timeout < 0) {
	      timeout = 0;
	    } else if (typeof self.timeout === 'number' && isFinite(self.timeout)) {
	      timeout = self.timeout;
	    }
	  }

	  self.req.on('response', self.onRequestResponse.bind(self));
	  self.req.on('error', self.onRequestError.bind(self));
	  self.req.on('drain', function () {
	    self.emit('drain');
	  });

	  self.req.on('socket', function (socket) {
	    // `._connecting` was the old property which was made public in node v6.1.0
	    var isConnecting = socket._connecting || socket.connecting;
	    if (self.timing) {
	      self.timings.socket = performanceNow() - self.startTimeNow;

	      if (isConnecting) {
	        var onLookupTiming = function () {
	          self.timings.lookup = performanceNow() - self.startTimeNow;
	        };

	        var onConnectTiming = function () {
	          self.timings.connect = performanceNow() - self.startTimeNow;
	        };

	        socket.once('lookup', onLookupTiming);
	        socket.once('connect', onConnectTiming);

	        // clean up timing event listeners if needed on error
	        self.req.once('error', function () {
	          socket.removeListener('lookup', onLookupTiming);
	          socket.removeListener('connect', onConnectTiming);
	        });
	      }
	    }

	    var setReqTimeout = function () {
	      // This timeout sets the amount of time to wait *between* bytes sent
	      // from the server once connected.
	      //
	      // In particular, it's useful for erroring if the server fails to send
	      // data halfway through streaming a response.
	      self.req.setTimeout(timeout, function () {
	        if (self.req) {
	          self.abort();
	          var e = new Error('ESOCKETTIMEDOUT');
	          e.code = 'ESOCKETTIMEDOUT';
	          e.connect = false;
	          self.emit('error', e);
	        }
	      });
	    };
	    if (timeout !== undefined) {
	      // Only start the connection timer if we're actually connecting a new
	      // socket, otherwise if we're already connected (because this is a
	      // keep-alive connection) do not bother. This is important since we won't
	      // get a 'connect' event for an already connected socket.
	      if (isConnecting) {
	        var onReqSockConnect = function () {
	          socket.removeListener('connect', onReqSockConnect);
	          self.clearTimeout();
	          setReqTimeout();
	        };

	        socket.on('connect', onReqSockConnect);

	        self.req.on('error', function (err) { // eslint-disable-line handle-callback-err
	          socket.removeListener('connect', onReqSockConnect);
	        });

	        // Set a timeout in memory - this block will throw if the server takes more
	        // than `timeout` to write the HTTP status and headers (corresponding to
	        // the on('response') event on the client). NB: this measures wall-clock
	        // time, not the time between bytes sent by the server.
	        self.timeoutTimer = setTimeout(function () {
	          socket.removeListener('connect', onReqSockConnect);
	          self.abort();
	          var e = new Error('ETIMEDOUT');
	          e.code = 'ETIMEDOUT';
	          e.connect = true;
	          self.emit('error', e);
	        }, timeout);
	      } else {
	        // We're already connected
	        setReqTimeout();
	      }
	    }
	    self.emit('socket', socket);
	  });

	  self.emit('request', self.req);
	};

	Request.prototype.onRequestError = function (error) {
	  var self = this;
	  if (self._aborted) {
	    return
	  }
	  if (self.req && self.req._reusedSocket && error.code === 'ECONNRESET' &&
	    self.agent.addRequestNoreuse) {
	    self.agent = { addRequest: self.agent.addRequestNoreuse.bind(self.agent) };
	    self.start();
	    self.req.end();
	    return
	  }
	  self.clearTimeout();
	  self.emit('error', error);
	};

	Request.prototype.onRequestResponse = function (response) {
	  var self = this;

	  if (self.timing) {
	    self.timings.response = performanceNow() - self.startTimeNow;
	  }

	  debug('onRequestResponse', self.uri.href, response.statusCode, response.headers);
	  response.on('end', function () {
	    if (self.timing) {
	      self.timings.end = performanceNow() - self.startTimeNow;
	      response.timingStart = self.startTime;

	      // fill in the blanks for any periods that didn't trigger, such as
	      // no lookup or connect due to keep alive
	      if (!self.timings.socket) {
	        self.timings.socket = 0;
	      }
	      if (!self.timings.lookup) {
	        self.timings.lookup = self.timings.socket;
	      }
	      if (!self.timings.connect) {
	        self.timings.connect = self.timings.lookup;
	      }
	      if (!self.timings.response) {
	        self.timings.response = self.timings.connect;
	      }

	      debug('elapsed time', self.timings.end);

	      // elapsedTime includes all redirects
	      self.elapsedTime += Math.round(self.timings.end);

	      // NOTE: elapsedTime is deprecated in favor of .timings
	      response.elapsedTime = self.elapsedTime;

	      // timings is just for the final fetch
	      response.timings = self.timings;

	      // pre-calculate phase timings as well
	      response.timingPhases = {
	        wait: self.timings.socket,
	        dns: self.timings.lookup - self.timings.socket,
	        tcp: self.timings.connect - self.timings.lookup,
	        firstByte: self.timings.response - self.timings.connect,
	        download: self.timings.end - self.timings.response,
	        total: self.timings.end
	      };
	    }
	    debug('response end', self.uri.href, response.statusCode, response.headers);
	  });

	  if (self._aborted) {
	    debug('aborted', self.uri.href);
	    response.resume();
	    return
	  }

	  self.response = response;
	  response.request = self;
	  response.toJSON = responseToJSON;

	  // XXX This is different on 0.10, because SSL is strict by default
	  if (self.httpModule === https__default['default'] &&
	    self.strictSSL && (!response.hasOwnProperty('socket') ||
	    !response.socket.authorized)) {
	    debug('strict ssl error', self.uri.href);
	    var sslErr = response.hasOwnProperty('socket') ? response.socket.authorizationError : self.uri.href + ' does not support SSL';
	    self.emit('error', new Error('SSL Error: ' + sslErr));
	    return
	  }

	  // Save the original host before any redirect (if it changes, we need to
	  // remove any authorization headers).  Also remember the case of the header
	  // name because lots of broken servers expect Host instead of host and we
	  // want the caller to be able to specify this.
	  self.originalHost = self.getHeader('host');
	  if (!self.originalHostHeaderName) {
	    self.originalHostHeaderName = self.hasHeader('host');
	  }
	  if (self.setHost) {
	    self.removeHeader('host');
	  }
	  self.clearTimeout();

	  var targetCookieJar = (self._jar && self._jar.setCookie) ? self._jar : globalCookieJar;
	  var addCookie = function (cookie) {
	    // set the cookie if it's domain in the href's domain.
	    try {
	      targetCookieJar.setCookie(cookie, self.uri.href, {ignoreError: true});
	    } catch (e) {
	      self.emit('error', e);
	    }
	  };

	  response.caseless = caseless(response.headers);

	  if (response.caseless.has('set-cookie') && (!self._disableCookies)) {
	    var headerName = response.caseless.has('set-cookie');
	    if (Array.isArray(response.headers[headerName])) {
	      response.headers[headerName].forEach(addCookie);
	    } else {
	      addCookie(response.headers[headerName]);
	    }
	  }

	  if (self._redirect.onResponse(response)) {
	    return // Ignore the rest of the response
	  } else {
	    // Be a good stream and emit end when the response is finished.
	    // Hack to emit end on close because of a core bug that never fires end
	    response.on('close', function () {
	      if (!self._ended) {
	        self.response.emit('end');
	      }
	    });

	    response.once('end', function () {
	      self._ended = true;
	    });

	    var noBody = function (code) {
	      return (
	        self.method === 'HEAD' ||
	        // Informational
	        (code >= 100 && code < 200) ||
	        // No Content
	        code === 204 ||
	        // Not Modified
	        code === 304
	      )
	    };

	    var responseContent;
	    if (self.gzip && !noBody(response.statusCode)) {
	      var contentEncoding = response.headers['content-encoding'] || 'identity';
	      contentEncoding = contentEncoding.trim().toLowerCase();

	      // Be more lenient with decoding compressed responses, since (very rarely)
	      // servers send slightly invalid gzip responses that are still accepted
	      // by common browsers.
	      // Always using Z_SYNC_FLUSH is what cURL does.
	      var zlibOptions = {
	        flush: zlib__default['default'].Z_SYNC_FLUSH,
	        finishFlush: zlib__default['default'].Z_SYNC_FLUSH
	      };

	      if (contentEncoding === 'gzip') {
	        responseContent = zlib__default['default'].createGunzip(zlibOptions);
	        response.pipe(responseContent);
	      } else if (contentEncoding === 'deflate') {
	        responseContent = zlib__default['default'].createInflate(zlibOptions);
	        response.pipe(responseContent);
	      } else {
	        // Since previous versions didn't check for Content-Encoding header,
	        // ignore any invalid values to preserve backwards-compatibility
	        if (contentEncoding !== 'identity') {
	          debug('ignoring unrecognized Content-Encoding ' + contentEncoding);
	        }
	        responseContent = response;
	      }
	    } else {
	      responseContent = response;
	    }

	    if (self.encoding) {
	      if (self.dests.length !== 0) {
	        console.error('Ignoring encoding parameter as this stream is being piped to another stream which makes the encoding option invalid.');
	      } else {
	        responseContent.setEncoding(self.encoding);
	      }
	    }

	    if (self._paused) {
	      responseContent.pause();
	    }

	    self.responseContent = responseContent;

	    self.emit('response', response);

	    self.dests.forEach(function (dest) {
	      self.pipeDest(dest);
	    });

	    responseContent.on('data', function (chunk) {
	      if (self.timing && !self.responseStarted) {
	        self.responseStartTime = (new Date()).getTime();

	        // NOTE: responseStartTime is deprecated in favor of .timings
	        response.responseStartTime = self.responseStartTime;
	      }
	      self._destdata = true;
	      self.emit('data', chunk);
	    });
	    responseContent.once('end', function (chunk) {
	      self.emit('end', chunk);
	    });
	    responseContent.on('error', function (error) {
	      self.emit('error', error);
	    });
	    responseContent.on('close', function () { self.emit('close'); });

	    if (self.callback) {
	      self.readResponseBody(response);
	    } else { // if no callback
	      self.on('end', function () {
	        if (self._aborted) {
	          debug('aborted', self.uri.href);
	          return
	        }
	        self.emit('complete', response);
	      });
	    }
	  }
	  debug('finish init function', self.uri.href);
	};

	Request.prototype.readResponseBody = function (response) {
	  var self = this;
	  debug("reading response's body");
	  var buffers = [];
	  var bufferLength = 0;
	  var strings = [];

	  self.on('data', function (chunk) {
	    if (!Buffer$9.isBuffer(chunk)) {
	      strings.push(chunk);
	    } else if (chunk.length) {
	      bufferLength += chunk.length;
	      buffers.push(chunk);
	    }
	  });
	  self.on('end', function () {
	    debug('end event', self.uri.href);
	    if (self._aborted) {
	      debug('aborted', self.uri.href);
	      // `buffer` is defined in the parent scope and used in a closure it exists for the life of the request.
	      // This can lead to leaky behavior if the user retains a reference to the request object.
	      buffers = [];
	      bufferLength = 0;
	      return
	    }

	    if (bufferLength) {
	      debug('has body', self.uri.href, bufferLength);
	      response.body = Buffer$9.concat(buffers, bufferLength);
	      if (self.encoding !== null) {
	        response.body = response.body.toString(self.encoding);
	      }
	      // `buffer` is defined in the parent scope and used in a closure it exists for the life of the Request.
	      // This can lead to leaky behavior if the user retains a reference to the request object.
	      buffers = [];
	      bufferLength = 0;
	    } else if (strings.length) {
	      // The UTF8 BOM [0xEF,0xBB,0xBF] is converted to [0xFE,0xFF] in the JS UTC16/UCS2 representation.
	      // Strip this value out when the encoding is set to 'utf8', as upstream consumers won't expect it and it breaks JSON.parse().
	      if (self.encoding === 'utf8' && strings[0].length > 0 && strings[0][0] === '\uFEFF') {
	        strings[0] = strings[0].substring(1);
	      }
	      response.body = strings.join('');
	    }

	    if (self._json) {
	      try {
	        response.body = JSON.parse(response.body, self._jsonReviver);
	      } catch (e) {
	        debug('invalid JSON received', self.uri.href);
	      }
	    }
	    debug('emitting complete', self.uri.href);
	    if (typeof response.body === 'undefined' && !self._json) {
	      response.body = self.encoding === null ? Buffer$9.alloc(0) : '';
	    }
	    self.emit('complete', response, response.body);
	  });
	};

	Request.prototype.abort = function () {
	  var self = this;
	  self._aborted = true;

	  if (self.req) {
	    self.req.abort();
	  } else if (self.response) {
	    self.response.destroy();
	  }

	  self.clearTimeout();
	  self.emit('abort');
	};

	Request.prototype.pipeDest = function (dest) {
	  var self = this;
	  var response = self.response;
	  // Called after the response is received
	  if (dest.headers && !dest.headersSent) {
	    if (response.caseless.has('content-type')) {
	      var ctname = response.caseless.has('content-type');
	      if (dest.setHeader) {
	        dest.setHeader(ctname, response.headers[ctname]);
	      } else {
	        dest.headers[ctname] = response.headers[ctname];
	      }
	    }

	    if (response.caseless.has('content-length')) {
	      var clname = response.caseless.has('content-length');
	      if (dest.setHeader) {
	        dest.setHeader(clname, response.headers[clname]);
	      } else {
	        dest.headers[clname] = response.headers[clname];
	      }
	    }
	  }
	  if (dest.setHeader && !dest.headersSent) {
	    for (var i in response.headers) {
	      // If the response content is being decoded, the Content-Encoding header
	      // of the response doesn't represent the piped content, so don't pass it.
	      if (!self.gzip || i !== 'content-encoding') {
	        dest.setHeader(i, response.headers[i]);
	      }
	    }
	    dest.statusCode = response.statusCode;
	  }
	  if (self.pipefilter) {
	    self.pipefilter(response, dest);
	  }
	};

	Request.prototype.qs = function (q, clobber) {
	  var self = this;
	  var base;
	  if (!clobber && self.uri.query) {
	    base = self._qs.parse(self.uri.query);
	  } else {
	    base = {};
	  }

	  for (var i in q) {
	    base[i] = q[i];
	  }

	  var qs = self._qs.stringify(base);

	  if (qs === '') {
	    return self
	  }

	  self.uri = url__default['default'].parse(self.uri.href.split('?')[0] + '?' + qs);
	  self.url = self.uri;
	  self.path = self.uri.path;

	  if (self.uri.host === 'unix') {
	    self.enableUnixSocket();
	  }

	  return self
	};
	Request.prototype.form = function (form) {
	  var self = this;
	  if (form) {
	    if (!/^application\/x-www-form-urlencoded\b/.test(self.getHeader('content-type'))) {
	      self.setHeader('content-type', 'application/x-www-form-urlencoded');
	    }
	    self.body = (typeof form === 'string')
	      ? self._qs.rfc3986(form.toString('utf8'))
	      : self._qs.stringify(form).toString('utf8');
	    return self
	  }
	  // create form-data object
	  self._form = new form_data();
	  self._form.on('error', function (err) {
	    err.message = 'form-data: ' + err.message;
	    self.emit('error', err);
	    self.abort();
	  });
	  return self._form
	};
	Request.prototype.multipart = function (multipart) {
	  var self = this;

	  self._multipart.onRequest(multipart);

	  if (!self._multipart.chunked) {
	    self.body = self._multipart.body;
	  }

	  return self
	};
	Request.prototype.json = function (val) {
	  var self = this;

	  if (!self.hasHeader('accept')) {
	    self.setHeader('accept', 'application/json');
	  }

	  if (typeof self.jsonReplacer === 'function') {
	    self._jsonReplacer = self.jsonReplacer;
	  }

	  self._json = true;
	  if (typeof val === 'boolean') {
	    if (self.body !== undefined) {
	      if (!/^application\/x-www-form-urlencoded\b/.test(self.getHeader('content-type'))) {
	        self.body = safeStringify(self.body, self._jsonReplacer);
	      } else {
	        self.body = self._qs.rfc3986(self.body);
	      }
	      if (!self.hasHeader('content-type')) {
	        self.setHeader('content-type', 'application/json');
	      }
	    }
	  } else {
	    self.body = safeStringify(val, self._jsonReplacer);
	    if (!self.hasHeader('content-type')) {
	      self.setHeader('content-type', 'application/json');
	    }
	  }

	  if (typeof self.jsonReviver === 'function') {
	    self._jsonReviver = self.jsonReviver;
	  }

	  return self
	};
	Request.prototype.getHeader = function (name, headers) {
	  var self = this;
	  var result, re, match;
	  if (!headers) {
	    headers = self.headers;
	  }
	  Object.keys(headers).forEach(function (key) {
	    if (key.length !== name.length) {
	      return
	    }
	    re = new RegExp(name, 'i');
	    match = key.match(re);
	    if (match) {
	      result = headers[key];
	    }
	  });
	  return result
	};
	Request.prototype.enableUnixSocket = function () {
	  // Get the socket & request paths from the URL
	  var unixParts = this.uri.path.split(':');
	  var host = unixParts[0];
	  var path = unixParts[1];
	  // Apply unix properties to request
	  this.socketPath = host;
	  this.uri.pathname = path;
	  this.uri.path = path;
	  this.uri.host = host;
	  this.uri.hostname = host;
	  this.uri.isUnix = true;
	};

	Request.prototype.auth = function (user, pass, sendImmediately, bearer) {
	  var self = this;

	  self._auth.onRequest(user, pass, sendImmediately, bearer);

	  return self
	};
	Request.prototype.aws = function (opts, now) {
	  var self = this;

	  if (!now) {
	    self._aws = opts;
	    return self
	  }

	  if (opts.sign_version === 4 || opts.sign_version === '4') {
	    // use aws4
	    var options = {
	      host: self.uri.host,
	      path: self.uri.path,
	      method: self.method,
	      headers: self.headers,
	      body: self.body
	    };
	    if (opts.service) {
	      options.service = opts.service;
	    }
	    var signRes = aws4_1.sign(options, {
	      accessKeyId: opts.key,
	      secretAccessKey: opts.secret,
	      sessionToken: opts.session
	    });
	    self.setHeader('authorization', signRes.headers.Authorization);
	    self.setHeader('x-amz-date', signRes.headers['X-Amz-Date']);
	    if (signRes.headers['X-Amz-Security-Token']) {
	      self.setHeader('x-amz-security-token', signRes.headers['X-Amz-Security-Token']);
	    }
	  } else {
	    // default: use aws-sign2
	    var date = new Date();
	    self.setHeader('date', date.toUTCString());
	    var auth = {
	      key: opts.key,
	      secret: opts.secret,
	      verb: self.method.toUpperCase(),
	      date: date,
	      contentType: self.getHeader('content-type') || '',
	      md5: self.getHeader('content-md5') || '',
	      amazonHeaders: awsSign2.canonicalizeHeaders(self.headers)
	    };
	    var path = self.uri.path;
	    if (opts.bucket && path) {
	      auth.resource = '/' + opts.bucket + path;
	    } else if (opts.bucket && !path) {
	      auth.resource = '/' + opts.bucket;
	    } else if (!opts.bucket && path) {
	      auth.resource = path;
	    } else if (!opts.bucket && !path) {
	      auth.resource = '/';
	    }
	    auth.resource = awsSign2.canonicalizeResource(auth.resource);
	    self.setHeader('authorization', awsSign2.authorization(auth));
	  }

	  return self
	};
	Request.prototype.httpSignature = function (opts) {
	  var self = this;
	  lib$4.signRequest({
	    getHeader: function (header) {
	      return self.getHeader(header, self.headers)
	    },
	    setHeader: function (header, value) {
	      self.setHeader(header, value);
	    },
	    method: self.method,
	    path: self.path
	  }, opts);
	  debug('httpSignature authorization', self.getHeader('authorization'));

	  return self
	};
	Request.prototype.hawk = function (opts) {
	  var self = this;
	  self.setHeader('Authorization', hawk.header(self.uri, self.method, opts));
	};
	Request.prototype.oauth = function (_oauth) {
	  var self = this;

	  self._oauth.onRequest(_oauth);

	  return self
	};

	Request.prototype.jar = function (jar) {
	  var self = this;
	  var cookies;

	  if (self._redirect.redirectsFollowed === 0) {
	    self.originalCookieHeader = self.getHeader('cookie');
	  }

	  if (!jar) {
	    // disable cookies
	    cookies = false;
	    self._disableCookies = true;
	  } else {
	    var targetCookieJar = jar.getCookieString ? jar : globalCookieJar;
	    var urihref = self.uri.href;
	    // fetch cookie in the Specified host
	    if (targetCookieJar) {
	      cookies = targetCookieJar.getCookieString(urihref);
	    }
	  }

	  // if need cookie and cookie is not empty
	  if (cookies && cookies.length) {
	    if (self.originalCookieHeader) {
	      // Don't overwrite existing Cookie header
	      self.setHeader('cookie', self.originalCookieHeader + '; ' + cookies);
	    } else {
	      self.setHeader('cookie', cookies);
	    }
	  }
	  self._jar = jar;
	  return self
	};

	// Stream API
	Request.prototype.pipe = function (dest, opts) {
	  var self = this;

	  if (self.response) {
	    if (self._destdata) {
	      self.emit('error', new Error('You cannot pipe after data has been emitted from the response.'));
	    } else if (self._ended) {
	      self.emit('error', new Error('You cannot pipe after the response has been ended.'));
	    } else {
	      require$$0__default['default'].Stream.prototype.pipe.call(self, dest, opts);
	      self.pipeDest(dest);
	      return dest
	    }
	  } else {
	    self.dests.push(dest);
	    require$$0__default['default'].Stream.prototype.pipe.call(self, dest, opts);
	    return dest
	  }
	};
	Request.prototype.write = function () {
	  var self = this;
	  if (self._aborted) { return }

	  if (!self._started) {
	    self.start();
	  }
	  if (self.req) {
	    return self.req.write.apply(self.req, arguments)
	  }
	};
	Request.prototype.end = function (chunk) {
	  var self = this;
	  if (self._aborted) { return }

	  if (chunk) {
	    self.write(chunk);
	  }
	  if (!self._started) {
	    self.start();
	  }
	  if (self.req) {
	    self.req.end();
	  }
	};
	Request.prototype.pause = function () {
	  var self = this;
	  if (!self.responseContent) {
	    self._paused = true;
	  } else {
	    self.responseContent.pause.apply(self.responseContent, arguments);
	  }
	};
	Request.prototype.resume = function () {
	  var self = this;
	  if (!self.responseContent) {
	    self._paused = false;
	  } else {
	    self.responseContent.resume.apply(self.responseContent, arguments);
	  }
	};
	Request.prototype.destroy = function () {
	  var self = this;
	  this.clearTimeout();
	  if (!self._ended) {
	    self.end();
	  } else if (self.response) {
	    self.response.destroy();
	  }
	};

	Request.prototype.clearTimeout = function () {
	  if (this.timeoutTimer) {
	    clearTimeout(this.timeoutTimer);
	    this.timeoutTimer = null;
	  }
	};

	Request.defaultProxyHeaderWhiteList =
	  Tunnel.defaultProxyHeaderWhiteList.slice();

	Request.defaultProxyHeaderExclusiveList =
	  Tunnel.defaultProxyHeaderExclusiveList.slice();

	// Exports

	Request.prototype.toJSON = requestToJSON;
	var request$2 = Request;

	var paramsHaveRequestBody = helpers.paramsHaveRequestBody;

	// organize params for patch, post, put, head, del
	function initParams (uri, options, callback) {
	  if (typeof options === 'function') {
	    callback = options;
	  }

	  var params = {};
	  if (options !== null && typeof options === 'object') {
	    extend$1(params, options, {uri: uri});
	  } else if (typeof uri === 'string') {
	    extend$1(params, {uri: uri});
	  } else {
	    extend$1(params, uri);
	  }

	  params.callback = callback || params.callback;
	  return params
	}

	function request$1 (uri, options, callback) {
	  if (typeof uri === 'undefined') {
	    throw new Error('undefined is not a valid uri or options object.')
	  }

	  var params = initParams(uri, options, callback);

	  if (params.method === 'HEAD' && paramsHaveRequestBody(params)) {
	    throw new Error('HTTP HEAD requests MUST NOT include a request body.')
	  }

	  return new request$1.Request(params)
	}

	function verbFunc (verb) {
	  var method = verb.toUpperCase();
	  return function (uri, options, callback) {
	    var params = initParams(uri, options, callback);
	    params.method = method;
	    return request$1(params, params.callback)
	  }
	}

	// define like this to please codeintel/intellisense IDEs
	request$1.get = verbFunc('get');
	request$1.head = verbFunc('head');
	request$1.options = verbFunc('options');
	request$1.post = verbFunc('post');
	request$1.put = verbFunc('put');
	request$1.patch = verbFunc('patch');
	request$1.del = verbFunc('delete');
	request$1['delete'] = verbFunc('delete');

	request$1.jar = function (store) {
	  return cookies$1.jar(store)
	};

	request$1.cookie = function (str) {
	  return cookies$1.parse(str)
	};

	function wrapRequestMethod (method, options, requester, verb) {
	  return function (uri, opts, callback) {
	    var params = initParams(uri, opts, callback);

	    var target = {};
	    extend$1(true, target, options, params);

	    target.pool = params.pool || options.pool;

	    if (verb) {
	      target.method = verb.toUpperCase();
	    }

	    if (typeof requester === 'function') {
	      method = requester;
	    }

	    return method(target, target.callback)
	  }
	}

	request$1.defaults = function (options, requester) {
	  var self = this;

	  options = options || {};

	  if (typeof options === 'function') {
	    requester = options;
	    options = {};
	  }

	  var defaults = wrapRequestMethod(self, options, requester);

	  var verbs = ['get', 'head', 'post', 'put', 'patch', 'del', 'delete'];
	  verbs.forEach(function (verb) {
	    defaults[verb] = wrapRequestMethod(self[verb], options, requester, verb);
	  });

	  defaults.cookie = wrapRequestMethod(self.cookie, options, requester);
	  defaults.jar = self.jar;
	  defaults.defaults = self.defaults;
	  return defaults
	};

	request$1.forever = function (agentOptions, optionsArg) {
	  var options = {};
	  if (optionsArg) {
	    extend$1(options, optionsArg);
	  }
	  if (agentOptions) {
	    options.agentOptions = agentOptions;
	  }

	  options.forever = true;
	  return request$1.defaults(options)
	};

	// Exports

	var request_1$1 = request$1;
	request$1.Request = request$2;
	request$1.initParams = initParams;

	// Backwards compatibility for request.debug
	Object.defineProperty(request$1, 'debug', {
	  enumerable: true,
	  get: function () {
	    return request$1.Request.debug
	  },
	  set: function (debug) {
	    request$1.Request.debug = debug;
	  }
	});

	var domain$2; // The domain module is executed on demand
	var hasSetImmediate = typeof setImmediate === "function";

	// Use the fastest means possible to execute a task in its own turn, with
	// priority over other events including network IO events in Node.js.
	//
	// An exception thrown by a task will permanently interrupt the processing of
	// subsequent tasks. The higher level `asap` function ensures that if an
	// exception is thrown by a task, that the task queue will continue flushing as
	// soon as possible, but if you use `rawAsap` directly, you are responsible to
	// either ensure that no exceptions are thrown from your task, or to manually
	// call `rawAsap.requestFlush` if an exception is thrown.
	var raw = rawAsap;
	function rawAsap(task) {
	    if (!queue.length) {
	        requestFlush();
	        flushing = true;
	    }
	    // Avoids a function call
	    queue[queue.length] = task;
	}

	var queue = [];
	// Once a flush has been requested, no further calls to `requestFlush` are
	// necessary until the next `flush` completes.
	var flushing = false;
	// The position of the next task to execute in the task queue. This is
	// preserved between calls to `flush` so that it can be resumed if
	// a task throws an exception.
	var index = 0;
	// If a task schedules additional tasks recursively, the task queue can grow
	// unbounded. To prevent memory excaustion, the task queue will periodically
	// truncate already-completed tasks.
	var capacity = 1024;

	// The flush function processes all tasks that have been scheduled with
	// `rawAsap` unless and until one of those tasks throws an exception.
	// If a task throws an exception, `flush` ensures that its state will remain
	// consistent and will resume where it left off when called again.
	// However, `flush` does not make any arrangements to be called again if an
	// exception is thrown.
	function flush() {
	    while (index < queue.length) {
	        var currentIndex = index;
	        // Advance the index before calling the task. This ensures that we will
	        // begin flushing on the next task the task throws an error.
	        index = index + 1;
	        queue[currentIndex].call();
	        // Prevent leaking memory for long chains of recursive calls to `asap`.
	        // If we call `asap` within tasks scheduled by `asap`, the queue will
	        // grow, but to avoid an O(n) walk for every task we execute, we don't
	        // shift tasks off the queue after they have been executed.
	        // Instead, we periodically shift 1024 tasks off the queue.
	        if (index > capacity) {
	            // Manually shift all values starting at the index back to the
	            // beginning of the queue.
	            for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {
	                queue[scan] = queue[scan + index];
	            }
	            queue.length -= index;
	            index = 0;
	        }
	    }
	    queue.length = 0;
	    index = 0;
	    flushing = false;
	}

	rawAsap.requestFlush = requestFlush;
	function requestFlush() {
	    // Ensure flushing is not bound to any domain.
	    // It is not sufficient to exit the domain, because domains exist on a stack.
	    // To execute code outside of any domain, the following dance is necessary.
	    var parentDomain = process.domain;
	    if (parentDomain) {
	        if (!domain$2) {
	            // Lazy execute the domain module.
	            // Only employed if the user elects to use domains.
	            domain$2 = require$$0__default$3['default'];
	        }
	        domain$2.active = process.domain = null;
	    }

	    // `setImmediate` is slower that `process.nextTick`, but `process.nextTick`
	    // cannot handle recursion.
	    // `requestFlush` will only be called recursively from `asap.js`, to resume
	    // flushing after an error is thrown into a domain.
	    // Conveniently, `setImmediate` was introduced in the same version
	    // `process.nextTick` started throwing recursion errors.
	    if (flushing && hasSetImmediate) {
	        setImmediate(flush);
	    } else {
	        process.nextTick(flush);
	    }

	    if (parentDomain) {
	        domain$2.active = process.domain = parentDomain;
	    }
	}

	function noop$4() {}

	// States:
	//
	// 0 - pending
	// 1 - fulfilled with _value
	// 2 - rejected with _value
	// 3 - adopted the state of another promise, _value
	//
	// once the state is no longer pending (0) it is immutable

	// All `_` prefixed properties will be reduced to `_{random number}`
	// at build time to obfuscate them and discourage their use.
	// We don't use symbols or Object.defineProperty to fully hide them
	// because the performance isn't good enough.


	// to avoid using try/catch inside critical functions, we
	// extract them to here.
	var LAST_ERROR = null;
	var IS_ERROR = {};
	function getThen(obj) {
	  try {
	    return obj.then;
	  } catch (ex) {
	    LAST_ERROR = ex;
	    return IS_ERROR;
	  }
	}

	function tryCallOne(fn, a) {
	  try {
	    return fn(a);
	  } catch (ex) {
	    LAST_ERROR = ex;
	    return IS_ERROR;
	  }
	}
	function tryCallTwo(fn, a, b) {
	  try {
	    fn(a, b);
	  } catch (ex) {
	    LAST_ERROR = ex;
	    return IS_ERROR;
	  }
	}

	var core$1 = Promise$1;

	function Promise$1(fn) {
	  if (typeof this !== 'object') {
	    throw new TypeError('Promises must be constructed via new');
	  }
	  if (typeof fn !== 'function') {
	    throw new TypeError('Promise constructor\'s argument is not a function');
	  }
	  this._40 = 0;
	  this._65 = 0;
	  this._55 = null;
	  this._72 = null;
	  if (fn === noop$4) return;
	  doResolve(fn, this);
	}
	Promise$1._37 = null;
	Promise$1._87 = null;
	Promise$1._61 = noop$4;

	Promise$1.prototype.then = function(onFulfilled, onRejected) {
	  if (this.constructor !== Promise$1) {
	    return safeThen(this, onFulfilled, onRejected);
	  }
	  var res = new Promise$1(noop$4);
	  handle(this, new Handler(onFulfilled, onRejected, res));
	  return res;
	};

	function safeThen(self, onFulfilled, onRejected) {
	  return new self.constructor(function (resolve, reject) {
	    var res = new Promise$1(noop$4);
	    res.then(resolve, reject);
	    handle(self, new Handler(onFulfilled, onRejected, res));
	  });
	}
	function handle(self, deferred) {
	  while (self._65 === 3) {
	    self = self._55;
	  }
	  if (Promise$1._37) {
	    Promise$1._37(self);
	  }
	  if (self._65 === 0) {
	    if (self._40 === 0) {
	      self._40 = 1;
	      self._72 = deferred;
	      return;
	    }
	    if (self._40 === 1) {
	      self._40 = 2;
	      self._72 = [self._72, deferred];
	      return;
	    }
	    self._72.push(deferred);
	    return;
	  }
	  handleResolved(self, deferred);
	}

	function handleResolved(self, deferred) {
	  raw(function() {
	    var cb = self._65 === 1 ? deferred.onFulfilled : deferred.onRejected;
	    if (cb === null) {
	      if (self._65 === 1) {
	        resolve$2(deferred.promise, self._55);
	      } else {
	        reject(deferred.promise, self._55);
	      }
	      return;
	    }
	    var ret = tryCallOne(cb, self._55);
	    if (ret === IS_ERROR) {
	      reject(deferred.promise, LAST_ERROR);
	    } else {
	      resolve$2(deferred.promise, ret);
	    }
	  });
	}
	function resolve$2(self, newValue) {
	  // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
	  if (newValue === self) {
	    return reject(
	      self,
	      new TypeError('A promise cannot be resolved with itself.')
	    );
	  }
	  if (
	    newValue &&
	    (typeof newValue === 'object' || typeof newValue === 'function')
	  ) {
	    var then = getThen(newValue);
	    if (then === IS_ERROR) {
	      return reject(self, LAST_ERROR);
	    }
	    if (
	      then === self.then &&
	      newValue instanceof Promise$1
	    ) {
	      self._65 = 3;
	      self._55 = newValue;
	      finale(self);
	      return;
	    } else if (typeof then === 'function') {
	      doResolve(then.bind(newValue), self);
	      return;
	    }
	  }
	  self._65 = 1;
	  self._55 = newValue;
	  finale(self);
	}

	function reject(self, newValue) {
	  self._65 = 2;
	  self._55 = newValue;
	  if (Promise$1._87) {
	    Promise$1._87(self, newValue);
	  }
	  finale(self);
	}
	function finale(self) {
	  if (self._40 === 1) {
	    handle(self, self._72);
	    self._72 = null;
	  }
	  if (self._40 === 2) {
	    for (var i = 0; i < self._72.length; i++) {
	      handle(self, self._72[i]);
	    }
	    self._72 = null;
	  }
	}

	function Handler(onFulfilled, onRejected, promise){
	  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
	  this.onRejected = typeof onRejected === 'function' ? onRejected : null;
	  this.promise = promise;
	}

	/**
	 * Take a potentially misbehaving resolver function and make sure
	 * onFulfilled and onRejected are only called once.
	 *
	 * Makes no guarantees about asynchrony.
	 */
	function doResolve(fn, promise) {
	  var done = false;
	  var res = tryCallTwo(fn, function (value) {
	    if (done) return;
	    done = true;
	    resolve$2(promise, value);
	  }, function (reason) {
	    if (done) return;
	    done = true;
	    reject(promise, reason);
	  });
	  if (!done && res === IS_ERROR) {
	    done = true;
	    reject(promise, LAST_ERROR);
	  }
	}

	core$1.prototype.done = function (onFulfilled, onRejected) {
	  var self = arguments.length ? this.then.apply(this, arguments) : this;
	  self.then(null, function (err) {
	    setTimeout(function () {
	      throw err;
	    }, 0);
	  });
	};

	core$1.prototype['finally'] = function (f) {
	  return this.then(function (value) {
	    return core$1.resolve(f()).then(function () {
	      return value;
	    });
	  }, function (err) {
	    return core$1.resolve(f()).then(function () {
	      throw err;
	    });
	  });
	};

	/* Static Functions */

	var TRUE = valuePromise(true);
	var FALSE = valuePromise(false);
	var NULL = valuePromise(null);
	var UNDEFINED = valuePromise(undefined);
	var ZERO = valuePromise(0);
	var EMPTYSTRING = valuePromise('');

	function valuePromise(value) {
	  var p = new core$1(core$1._61);
	  p._65 = 1;
	  p._55 = value;
	  return p;
	}
	core$1.resolve = function (value) {
	  if (value instanceof core$1) return value;

	  if (value === null) return NULL;
	  if (value === undefined) return UNDEFINED;
	  if (value === true) return TRUE;
	  if (value === false) return FALSE;
	  if (value === 0) return ZERO;
	  if (value === '') return EMPTYSTRING;

	  if (typeof value === 'object' || typeof value === 'function') {
	    try {
	      var then = value.then;
	      if (typeof then === 'function') {
	        return new core$1(then.bind(value));
	      }
	    } catch (ex) {
	      return new core$1(function (resolve, reject) {
	        reject(ex);
	      });
	    }
	  }
	  return valuePromise(value);
	};

	core$1.all = function (arr) {
	  var args = Array.prototype.slice.call(arr);

	  return new core$1(function (resolve, reject) {
	    if (args.length === 0) return resolve([]);
	    var remaining = args.length;
	    function res(i, val) {
	      if (val && (typeof val === 'object' || typeof val === 'function')) {
	        if (val instanceof core$1 && val.then === core$1.prototype.then) {
	          while (val._65 === 3) {
	            val = val._55;
	          }
	          if (val._65 === 1) return res(i, val._55);
	          if (val._65 === 2) reject(val._55);
	          val.then(function (val) {
	            res(i, val);
	          }, reject);
	          return;
	        } else {
	          var then = val.then;
	          if (typeof then === 'function') {
	            var p = new core$1(then.bind(val));
	            p.then(function (val) {
	              res(i, val);
	            }, reject);
	            return;
	          }
	        }
	      }
	      args[i] = val;
	      if (--remaining === 0) {
	        resolve(args);
	      }
	    }
	    for (var i = 0; i < args.length; i++) {
	      res(i, args[i]);
	    }
	  });
	};

	core$1.reject = function (value) {
	  return new core$1(function (resolve, reject) {
	    reject(value);
	  });
	};

	core$1.race = function (values) {
	  return new core$1(function (resolve, reject) {
	    values.forEach(function(value){
	      core$1.resolve(value).then(resolve, reject);
	    });
	  });
	};

	/* Prototype Methods */

	core$1.prototype['catch'] = function (onRejected) {
	  return this.then(null, onRejected);
	};

	var freeTasks = [];

	/**
	 * Calls a task as soon as possible after returning, in its own event, with
	 * priority over IO events. An exception thrown in a task can be handled by
	 * `process.on("uncaughtException") or `domain.on("error")`, but will otherwise
	 * crash the process. If the error is handled, all subsequent tasks will
	 * resume.
	 *
	 * @param {{call}} task A callable object, typically a function that takes no
	 * arguments.
	 */
	var asap_1 = asap;
	function asap(task) {
	    var rawTask;
	    if (freeTasks.length) {
	        rawTask = freeTasks.pop();
	    } else {
	        rawTask = new RawTask();
	    }
	    rawTask.task = task;
	    rawTask.domain = process.domain;
	    raw(rawTask);
	}

	function RawTask() {
	    this.task = null;
	    this.domain = null;
	}

	RawTask.prototype.call = function () {
	    if (this.domain) {
	        this.domain.enter();
	    }
	    var threw = true;
	    try {
	        this.task.call();
	        threw = false;
	        // If the task throws an exception (presumably) Node.js restores the
	        // domain stack for the next event.
	        if (this.domain) {
	            this.domain.exit();
	        }
	    } finally {
	        // We use try/finally and a threw flag to avoid messing up stack traces
	        // when we catch and release errors.
	        if (threw) {
	            // In Node.js, uncaught exceptions are considered fatal errors.
	            // Re-throw them to interrupt flushing!
	            // Ensure that flushing continues if an uncaught exception is
	            // suppressed listening process.on("uncaughtException") or
	            // domain.on("error").
	            raw.requestFlush();
	        }
	        // If the task threw an error, we do not want to exit the domain here.
	        // Exiting the domain would prevent the domain from catching the error.
	        this.task = null;
	        this.domain = null;
	        freeTasks.push(this);
	    }
	};

	/* Static Functions */

	core$1.denodeify = function (fn, argumentCount) {
	  if (
	    typeof argumentCount === 'number' && argumentCount !== Infinity
	  ) {
	    return denodeifyWithCount(fn, argumentCount);
	  } else {
	    return denodeifyWithoutCount(fn);
	  }
	};

	var callbackFn = (
	  'function (err, res) {' +
	  'if (err) { rj(err); } else { rs(res); }' +
	  '}'
	);
	function denodeifyWithCount(fn, argumentCount) {
	  var args = [];
	  for (var i = 0; i < argumentCount; i++) {
	    args.push('a' + i);
	  }
	  var body = [
	    'return function (' + args.join(',') + ') {',
	    'var self = this;',
	    'return new Promise(function (rs, rj) {',
	    'var res = fn.call(',
	    ['self'].concat(args).concat([callbackFn]).join(','),
	    ');',
	    'if (res &&',
	    '(typeof res === "object" || typeof res === "function") &&',
	    'typeof res.then === "function"',
	    ') {rs(res);}',
	    '});',
	    '};'
	  ].join('');
	  return Function(['Promise', 'fn'], body)(core$1, fn);
	}
	function denodeifyWithoutCount(fn) {
	  var fnLength = Math.max(fn.length - 1, 3);
	  var args = [];
	  for (var i = 0; i < fnLength; i++) {
	    args.push('a' + i);
	  }
	  var body = [
	    'return function (' + args.join(',') + ') {',
	    'var self = this;',
	    'var args;',
	    'var argLength = arguments.length;',
	    'if (arguments.length > ' + fnLength + ') {',
	    'args = new Array(arguments.length + 1);',
	    'for (var i = 0; i < arguments.length; i++) {',
	    'args[i] = arguments[i];',
	    '}',
	    '}',
	    'return new Promise(function (rs, rj) {',
	    'var cb = ' + callbackFn + ';',
	    'var res;',
	    'switch (argLength) {',
	    args.concat(['extra']).map(function (_, index) {
	      return (
	        'case ' + (index) + ':' +
	        'res = fn.call(' + ['self'].concat(args.slice(0, index)).concat('cb').join(',') + ');' +
	        'break;'
	      );
	    }).join(''),
	    'default:',
	    'args[argLength] = cb;',
	    'res = fn.apply(self, args);',
	    '}',
	    
	    'if (res &&',
	    '(typeof res === "object" || typeof res === "function") &&',
	    'typeof res.then === "function"',
	    ') {rs(res);}',
	    '});',
	    '};'
	  ].join('');

	  return Function(
	    ['Promise', 'fn'],
	    body
	  )(core$1, fn);
	}

	core$1.nodeify = function (fn) {
	  return function () {
	    var args = Array.prototype.slice.call(arguments);
	    var callback =
	      typeof args[args.length - 1] === 'function' ? args.pop() : null;
	    var ctx = this;
	    try {
	      return fn.apply(this, arguments).nodeify(callback, ctx);
	    } catch (ex) {
	      if (callback === null || typeof callback == 'undefined') {
	        return new core$1(function (resolve, reject) {
	          reject(ex);
	        });
	      } else {
	        asap_1(function () {
	          callback.call(ctx, ex);
	        });
	      }
	    }
	  }
	};

	core$1.prototype.nodeify = function (callback, ctx) {
	  if (typeof callback != 'function') return this;

	  this.then(function (value) {
	    asap_1(function () {
	      callback.call(ctx, null, value);
	    });
	  }, function (err) {
	    asap_1(function () {
	      callback.call(ctx, err);
	    });
	  });
	};

	core$1.enableSynchronous = function () {
	  core$1.prototype.isPending = function() {
	    return this.getState() == 0;
	  };

	  core$1.prototype.isFulfilled = function() {
	    return this.getState() == 1;
	  };

	  core$1.prototype.isRejected = function() {
	    return this.getState() == 2;
	  };

	  core$1.prototype.getValue = function () {
	    if (this._65 === 3) {
	      return this._55.getValue();
	    }

	    if (!this.isFulfilled()) {
	      throw new Error('Cannot get a value of an unfulfilled promise.');
	    }

	    return this._55;
	  };

	  core$1.prototype.getReason = function () {
	    if (this._65 === 3) {
	      return this._55.getReason();
	    }

	    if (!this.isRejected()) {
	      throw new Error('Cannot get a rejection reason of a non-rejected promise.');
	    }

	    return this._55;
	  };

	  core$1.prototype.getState = function () {
	    if (this._65 === 3) {
	      return this._55.getState();
	    }
	    if (this._65 === -1 || this._65 === -2) {
	      return 0;
	    }

	    return this._65;
	  };
	};

	core$1.disableSynchronous = function() {
	  core$1.prototype.isPending = undefined;
	  core$1.prototype.isFulfilled = undefined;
	  core$1.prototype.isRejected = undefined;
	  core$1.prototype.getValue = undefined;
	  core$1.prototype.getReason = undefined;
	  core$1.prototype.getState = undefined;
	};

	var lib$1 = core$1;

	var promise$2 = lib$1;

	// Copyright (C) 2015 SignalFx, Inc. All rights reserved.

	// Default Parameters
	var DEFAULT_INGEST_ENDPOINT = 'https://ingest.signalfx.com';
	var DEFAULT_API_ENDPOINT = 'https://api.signalfx.com';
	var DEFAULT_SIGNALFLOW_WEBSOCKET_ENDPOINT = 'wss://stream.signalfx.com';
	var DEFAULT_BATCH_SIZE = 300;// Will wait for this many requests before posting
	var DEFAULT_TIMEOUT = 5000; // Default timeout is 5s

	// Whether to request SignalFlow WebSocket message compression.
	var COMPRESS_SIGNALFLOW_WEBSOCKET_MESSAGES = true;

	// Global Parameters
	var PROTOBUF_HEADER_CONTENT_TYPE = 'application/x-protobuf';
	var JSON_HEADER_CONTENT_TYPE = 'application/json';

	var AWS_UNIQUE_ID_URL = 'http://169.254.169.254/2014-11-05/dynamic/instance-identity/document';

	var conf = {
		DEFAULT_INGEST_ENDPOINT: DEFAULT_INGEST_ENDPOINT,
		DEFAULT_API_ENDPOINT: DEFAULT_API_ENDPOINT,
		DEFAULT_SIGNALFLOW_WEBSOCKET_ENDPOINT: DEFAULT_SIGNALFLOW_WEBSOCKET_ENDPOINT,
		DEFAULT_BATCH_SIZE: DEFAULT_BATCH_SIZE,
		DEFAULT_TIMEOUT: DEFAULT_TIMEOUT,
		COMPRESS_SIGNALFLOW_WEBSOCKET_MESSAGES: COMPRESS_SIGNALFLOW_WEBSOCKET_MESSAGES,
		PROTOBUF_HEADER_CONTENT_TYPE: PROTOBUF_HEADER_CONTENT_TYPE,
		JSON_HEADER_CONTENT_TYPE: JSON_HEADER_CONTENT_TYPE,
		AWS_UNIQUE_ID_URL: AWS_UNIQUE_ID_URL
	};

	var platform$3 = {
	  use (impl) {
	    Object.assign(this, impl);
	  }
	};

	var int64Buffer$1 = createCommonjsModule(function (module, exports) {

	!function(exports) {
	  // constants

	  var UNDEFINED = "undefined";
	  var BUFFER = (UNDEFINED !== typeof Buffer) && Buffer;
	  var UINT8ARRAY = (UNDEFINED !== typeof Uint8Array) && Uint8Array;
	  var ARRAYBUFFER = (UNDEFINED !== typeof ArrayBuffer) && ArrayBuffer;
	  var ZERO = [0, 0, 0, 0, 0, 0, 0, 0];
	  var isArray = Array.isArray || _isArray;
	  var BIT32 = 4294967296;
	  var BIT24 = 16777216;

	  // storage class

	  var storage; // Array;

	  // generate classes

	  factory("Uint64BE", true, true);
	  factory("Int64BE", true, false);
	  factory("Uint64LE", false, true);
	  factory("Int64LE", false, false);

	  // class factory

	  function factory(name, bigendian, unsigned) {
	    var posH = bigendian ? 0 : 4;
	    var posL = bigendian ? 4 : 0;
	    var pos0 = bigendian ? 0 : 3;
	    var pos1 = bigendian ? 1 : 2;
	    var pos2 = bigendian ? 2 : 1;
	    var pos3 = bigendian ? 3 : 0;
	    var fromPositive = bigendian ? fromPositiveBE : fromPositiveLE;
	    var fromNegative = bigendian ? fromNegativeBE : fromNegativeLE;
	    var proto = Int64.prototype;
	    var isName = "is" + name;
	    var _isInt64 = "_" + isName;

	    // properties
	    proto.buffer = void 0;
	    proto.offset = 0;
	    proto[_isInt64] = true;

	    // methods
	    proto.toNumber = toNumber;
	    proto.toString = toString;
	    proto.toJSON = toNumber;
	    proto.toArray = toArray;

	    // add .toBuffer() method only when Buffer available
	    if (BUFFER) proto.toBuffer = toBuffer;

	    // add .toArrayBuffer() method only when Uint8Array available
	    if (UINT8ARRAY) proto.toArrayBuffer = toArrayBuffer;

	    // isUint64BE, isInt64BE
	    Int64[isName] = isInt64;

	    // CommonJS
	    exports[name] = Int64;

	    return Int64;

	    // constructor
	    function Int64(buffer, offset, value, raddix) {
	      if (!(this instanceof Int64)) return new Int64(buffer, offset, value, raddix);
	      return init(this, buffer, offset, value, raddix);
	    }

	    // isUint64BE, isInt64BE
	    function isInt64(b) {
	      return !!(b && b[_isInt64]);
	    }

	    // initializer
	    function init(that, buffer, offset, value, raddix) {
	      if (UINT8ARRAY && ARRAYBUFFER) {
	        if (buffer instanceof ARRAYBUFFER) buffer = new UINT8ARRAY(buffer);
	        if (value instanceof ARRAYBUFFER) value = new UINT8ARRAY(value);
	      }

	      // Int64BE() style
	      if (!buffer && !offset && !value && !storage) {
	        // shortcut to initialize with zero
	        that.buffer = newArray(ZERO, 0);
	        return;
	      }

	      // Int64BE(value, raddix) style
	      if (!isValidBuffer(buffer, offset)) {
	        var _storage = storage || Array;
	        raddix = offset;
	        value = buffer;
	        offset = 0;
	        buffer = new _storage(8);
	      }

	      that.buffer = buffer;
	      that.offset = offset |= 0;

	      // Int64BE(buffer, offset) style
	      if (UNDEFINED === typeof value) return;

	      // Int64BE(buffer, offset, value, raddix) style
	      if ("string" === typeof value) {
	        fromString(buffer, offset, value, raddix || 10);
	      } else if (isValidBuffer(value, raddix)) {
	        fromArray(buffer, offset, value, raddix);
	      } else if ("number" === typeof raddix) {
	        writeInt32(buffer, offset + posH, value); // high
	        writeInt32(buffer, offset + posL, raddix); // low
	      } else if (value > 0) {
	        fromPositive(buffer, offset, value); // positive
	      } else if (value < 0) {
	        fromNegative(buffer, offset, value); // negative
	      } else {
	        fromArray(buffer, offset, ZERO, 0); // zero, NaN and others
	      }
	    }

	    function fromString(buffer, offset, str, raddix) {
	      var pos = 0;
	      var len = str.length;
	      var high = 0;
	      var low = 0;
	      if (str[0] === "-") pos++;
	      var sign = pos;
	      while (pos < len) {
	        var chr = parseInt(str[pos++], raddix);
	        if (!(chr >= 0)) break; // NaN
	        low = low * raddix + chr;
	        high = high * raddix + Math.floor(low / BIT32);
	        low %= BIT32;
	      }
	      if (sign) {
	        high = ~high;
	        if (low) {
	          low = BIT32 - low;
	        } else {
	          high++;
	        }
	      }
	      writeInt32(buffer, offset + posH, high);
	      writeInt32(buffer, offset + posL, low);
	    }

	    function toNumber() {
	      var buffer = this.buffer;
	      var offset = this.offset;
	      var high = readInt32(buffer, offset + posH);
	      var low = readInt32(buffer, offset + posL);
	      if (!unsigned) high |= 0; // a trick to get signed
	      return high ? (high * BIT32 + low) : low;
	    }

	    function toString(radix) {
	      var buffer = this.buffer;
	      var offset = this.offset;
	      var high = readInt32(buffer, offset + posH);
	      var low = readInt32(buffer, offset + posL);
	      var str = "";
	      var sign = !unsigned && (high & 0x80000000);
	      if (sign) {
	        high = ~high;
	        low = BIT32 - low;
	      }
	      radix = radix || 10;
	      while (1) {
	        var mod = (high % radix) * BIT32 + low;
	        high = Math.floor(high / radix);
	        low = Math.floor(mod / radix);
	        str = (mod % radix).toString(radix) + str;
	        if (!high && !low) break;
	      }
	      if (sign) {
	        str = "-" + str;
	      }
	      return str;
	    }

	    function writeInt32(buffer, offset, value) {
	      buffer[offset + pos3] = value & 255;
	      value = value >> 8;
	      buffer[offset + pos2] = value & 255;
	      value = value >> 8;
	      buffer[offset + pos1] = value & 255;
	      value = value >> 8;
	      buffer[offset + pos0] = value & 255;
	    }

	    function readInt32(buffer, offset) {
	      return (buffer[offset + pos0] * BIT24) +
	        (buffer[offset + pos1] << 16) +
	        (buffer[offset + pos2] << 8) +
	        buffer[offset + pos3];
	    }
	  }

	  function toArray(raw) {
	    var buffer = this.buffer;
	    var offset = this.offset;
	    storage = null; // Array
	    if (raw !== false && offset === 0 && buffer.length === 8 && isArray(buffer)) return buffer;
	    return newArray(buffer, offset);
	  }

	  function toBuffer(raw) {
	    var buffer = this.buffer;
	    var offset = this.offset;
	    storage = BUFFER;
	    if (raw !== false && offset === 0 && buffer.length === 8 && Buffer.isBuffer(buffer)) return buffer;
	    var dest = new BUFFER(8);
	    fromArray(dest, 0, buffer, offset);
	    return dest;
	  }

	  function toArrayBuffer(raw) {
	    var buffer = this.buffer;
	    var offset = this.offset;
	    var arrbuf = buffer.buffer;
	    storage = UINT8ARRAY;
	    if (raw !== false && offset === 0 && (arrbuf instanceof ARRAYBUFFER) && arrbuf.byteLength === 8) return arrbuf;
	    var dest = new UINT8ARRAY(8);
	    fromArray(dest, 0, buffer, offset);
	    return dest.buffer;
	  }

	  function isValidBuffer(buffer, offset) {
	    var len = buffer && buffer.length;
	    offset |= 0;
	    return len && (offset + 8 <= len) && ("string" !== typeof buffer[offset]);
	  }

	  function fromArray(destbuf, destoff, srcbuf, srcoff) {
	    destoff |= 0;
	    srcoff |= 0;
	    for (var i = 0; i < 8; i++) {
	      destbuf[destoff++] = srcbuf[srcoff++] & 255;
	    }
	  }

	  function newArray(buffer, offset) {
	    return Array.prototype.slice.call(buffer, offset, offset + 8);
	  }

	  function fromPositiveBE(buffer, offset, value) {
	    var pos = offset + 8;
	    while (pos > offset) {
	      buffer[--pos] = value & 255;
	      value /= 256;
	    }
	  }

	  function fromNegativeBE(buffer, offset, value) {
	    var pos = offset + 8;
	    value++;
	    while (pos > offset) {
	      buffer[--pos] = ((-value) & 255) ^ 255;
	      value /= 256;
	    }
	  }

	  function fromPositiveLE(buffer, offset, value) {
	    var end = offset + 8;
	    while (offset < end) {
	      buffer[offset++] = value & 255;
	      value /= 256;
	    }
	  }

	  function fromNegativeLE(buffer, offset, value) {
	    var end = offset + 8;
	    value++;
	    while (offset < end) {
	      buffer[offset++] = ((-value) & 255) ^ 255;
	      value /= 256;
	    }
	  }

	  // https://github.com/retrofox/is-array
	  function _isArray(val) {
	    return !!val && "[object Array]" == Object.prototype.toString.call(val);
	  }

	}(typeof exports.nodeName !== 'string' ? exports : (commonjsGlobal || {}));
	});

	const Uint64BEBase = int64Buffer$1.Uint64BE;

	class Uint64BE$4 extends Uint64BEBase {
	  toJSON () {
	    return this.toString()
	  }
	}

	var uint64be = Uint64BE$4;

	const Buffer$8 = safeBuffer.Buffer;

	const randomBytes$1 = crypto__default['default'].randomBytes;

	// Cryptographically secure local seeds to mitigate Math.random() seed reuse.
	const hiSeed = randomBytes$1(4).readUInt32BE();
	const loSeed = randomBytes$1(4).readUInt32BE();

	// Simple pseudo-random 64-bit ID generator.
	function pseudoRandom () {
	  const buffer = Buffer$8.allocUnsafe(8);

	  const hi = randomUInt32(hiSeed) & 0x7FFFFFFF; // only positive int64
	  const lo = randomUInt32(loSeed);

	  writeUInt32BE(buffer, hi, 0);
	  writeUInt32BE(buffer, lo, 4);

	  return buffer
	}

	// Generate a random unsigned 32-bit integer.
	function randomUInt32 (seed) {
	  return seed ^ Math.floor(Math.random() * (0xFFFFFFFF + 1))
	}

	// Write unsigned integer bytes to a buffer. Faster than Buffer.writeUInt32BE().
	function writeUInt32BE (buffer, value, offset) {
	  buffer[3 + offset] = value & 255;
	  value = value >> 8;
	  buffer[2 + offset] = value & 255;
	  value = value >> 8;
	  buffer[1 + offset] = value & 255;
	  value = value >> 8;
	  buffer[0 + offset] = value & 255;
	}

	var id$1 = () => new uint64be(pseudoRandom());

	var uuid = (size) => crypto__default['default'].randomBytes(16).slice(0, size).toString('hex');

	const loadNs = performanceNow();
	const loadMs = Date.now();

	var now_1 = () => loadMs + performanceNow() - loadNs;

	var env = name => process.env[name];

	var semver$1 = createCommonjsModule(function (module, exports) {
	exports = module.exports = SemVer;

	var debug;
	/* istanbul ignore next */
	if (typeof process === 'object' &&
	    process.env &&
	    process.env.NODE_DEBUG &&
	    /\bsemver\b/i.test(process.env.NODE_DEBUG)) {
	  debug = function () {
	    var args = Array.prototype.slice.call(arguments, 0);
	    args.unshift('SEMVER');
	    console.log.apply(console, args);
	  };
	} else {
	  debug = function () {};
	}

	// Note: this is the semver.org version of the spec that it implements
	// Not necessarily the package version of this code.
	exports.SEMVER_SPEC_VERSION = '2.0.0';

	var MAX_LENGTH = 256;
	var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER ||
	  /* istanbul ignore next */ 9007199254740991;

	// Max safe segment length for coercion.
	var MAX_SAFE_COMPONENT_LENGTH = 16;

	// The actual regexps go on exports.re
	var re = exports.re = [];
	var src = exports.src = [];
	var R = 0;

	// The following Regular Expressions can be used for tokenizing,
	// validating, and parsing SemVer version strings.

	// ## Numeric Identifier
	// A single `0`, or a non-zero digit followed by zero or more digits.

	var NUMERICIDENTIFIER = R++;
	src[NUMERICIDENTIFIER] = '0|[1-9]\\d*';
	var NUMERICIDENTIFIERLOOSE = R++;
	src[NUMERICIDENTIFIERLOOSE] = '[0-9]+';

	// ## Non-numeric Identifier
	// Zero or more digits, followed by a letter or hyphen, and then zero or
	// more letters, digits, or hyphens.

	var NONNUMERICIDENTIFIER = R++;
	src[NONNUMERICIDENTIFIER] = '\\d*[a-zA-Z-][a-zA-Z0-9-]*';

	// ## Main Version
	// Three dot-separated numeric identifiers.

	var MAINVERSION = R++;
	src[MAINVERSION] = '(' + src[NUMERICIDENTIFIER] + ')\\.' +
	                   '(' + src[NUMERICIDENTIFIER] + ')\\.' +
	                   '(' + src[NUMERICIDENTIFIER] + ')';

	var MAINVERSIONLOOSE = R++;
	src[MAINVERSIONLOOSE] = '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\.' +
	                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\.' +
	                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')';

	// ## Pre-release Version Identifier
	// A numeric identifier, or a non-numeric identifier.

	var PRERELEASEIDENTIFIER = R++;
	src[PRERELEASEIDENTIFIER] = '(?:' + src[NUMERICIDENTIFIER] +
	                            '|' + src[NONNUMERICIDENTIFIER] + ')';

	var PRERELEASEIDENTIFIERLOOSE = R++;
	src[PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[NUMERICIDENTIFIERLOOSE] +
	                                 '|' + src[NONNUMERICIDENTIFIER] + ')';

	// ## Pre-release Version
	// Hyphen, followed by one or more dot-separated pre-release version
	// identifiers.

	var PRERELEASE = R++;
	src[PRERELEASE] = '(?:-(' + src[PRERELEASEIDENTIFIER] +
	                  '(?:\\.' + src[PRERELEASEIDENTIFIER] + ')*))';

	var PRERELEASELOOSE = R++;
	src[PRERELEASELOOSE] = '(?:-?(' + src[PRERELEASEIDENTIFIERLOOSE] +
	                       '(?:\\.' + src[PRERELEASEIDENTIFIERLOOSE] + ')*))';

	// ## Build Metadata Identifier
	// Any combination of digits, letters, or hyphens.

	var BUILDIDENTIFIER = R++;
	src[BUILDIDENTIFIER] = '[0-9A-Za-z-]+';

	// ## Build Metadata
	// Plus sign, followed by one or more period-separated build metadata
	// identifiers.

	var BUILD = R++;
	src[BUILD] = '(?:\\+(' + src[BUILDIDENTIFIER] +
	             '(?:\\.' + src[BUILDIDENTIFIER] + ')*))';

	// ## Full Version String
	// A main version, followed optionally by a pre-release version and
	// build metadata.

	// Note that the only major, minor, patch, and pre-release sections of
	// the version string are capturing groups.  The build metadata is not a
	// capturing group, because it should not ever be used in version
	// comparison.

	var FULL = R++;
	var FULLPLAIN = 'v?' + src[MAINVERSION] +
	                src[PRERELEASE] + '?' +
	                src[BUILD] + '?';

	src[FULL] = '^' + FULLPLAIN + '$';

	// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
	// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
	// common in the npm registry.
	var LOOSEPLAIN = '[v=\\s]*' + src[MAINVERSIONLOOSE] +
	                 src[PRERELEASELOOSE] + '?' +
	                 src[BUILD] + '?';

	var LOOSE = R++;
	src[LOOSE] = '^' + LOOSEPLAIN + '$';

	var GTLT = R++;
	src[GTLT] = '((?:<|>)?=?)';

	// Something like "2.*" or "1.2.x".
	// Note that "x.x" is a valid xRange identifer, meaning "any version"
	// Only the first item is strictly required.
	var XRANGEIDENTIFIERLOOSE = R++;
	src[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + '|x|X|\\*';
	var XRANGEIDENTIFIER = R++;
	src[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + '|x|X|\\*';

	var XRANGEPLAIN = R++;
	src[XRANGEPLAIN] = '[v=\\s]*(' + src[XRANGEIDENTIFIER] + ')' +
	                   '(?:\\.(' + src[XRANGEIDENTIFIER] + ')' +
	                   '(?:\\.(' + src[XRANGEIDENTIFIER] + ')' +
	                   '(?:' + src[PRERELEASE] + ')?' +
	                   src[BUILD] + '?' +
	                   ')?)?';

	var XRANGEPLAINLOOSE = R++;
	src[XRANGEPLAINLOOSE] = '[v=\\s]*(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
	                        '(?:\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
	                        '(?:\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
	                        '(?:' + src[PRERELEASELOOSE] + ')?' +
	                        src[BUILD] + '?' +
	                        ')?)?';

	var XRANGE = R++;
	src[XRANGE] = '^' + src[GTLT] + '\\s*' + src[XRANGEPLAIN] + '$';
	var XRANGELOOSE = R++;
	src[XRANGELOOSE] = '^' + src[GTLT] + '\\s*' + src[XRANGEPLAINLOOSE] + '$';

	// Coercion.
	// Extract anything that could conceivably be a part of a valid semver
	var COERCE = R++;
	src[COERCE] = '(?:^|[^\\d])' +
	              '(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '})' +
	              '(?:\\.(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' +
	              '(?:\\.(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' +
	              '(?:$|[^\\d])';

	// Tilde ranges.
	// Meaning is "reasonably at or greater than"
	var LONETILDE = R++;
	src[LONETILDE] = '(?:~>?)';

	var TILDETRIM = R++;
	src[TILDETRIM] = '(\\s*)' + src[LONETILDE] + '\\s+';
	re[TILDETRIM] = new RegExp(src[TILDETRIM], 'g');
	var tildeTrimReplace = '$1~';

	var TILDE = R++;
	src[TILDE] = '^' + src[LONETILDE] + src[XRANGEPLAIN] + '$';
	var TILDELOOSE = R++;
	src[TILDELOOSE] = '^' + src[LONETILDE] + src[XRANGEPLAINLOOSE] + '$';

	// Caret ranges.
	// Meaning is "at least and backwards compatible with"
	var LONECARET = R++;
	src[LONECARET] = '(?:\\^)';

	var CARETTRIM = R++;
	src[CARETTRIM] = '(\\s*)' + src[LONECARET] + '\\s+';
	re[CARETTRIM] = new RegExp(src[CARETTRIM], 'g');
	var caretTrimReplace = '$1^';

	var CARET = R++;
	src[CARET] = '^' + src[LONECARET] + src[XRANGEPLAIN] + '$';
	var CARETLOOSE = R++;
	src[CARETLOOSE] = '^' + src[LONECARET] + src[XRANGEPLAINLOOSE] + '$';

	// A simple gt/lt/eq thing, or just "" to indicate "any version"
	var COMPARATORLOOSE = R++;
	src[COMPARATORLOOSE] = '^' + src[GTLT] + '\\s*(' + LOOSEPLAIN + ')$|^$';
	var COMPARATOR = R++;
	src[COMPARATOR] = '^' + src[GTLT] + '\\s*(' + FULLPLAIN + ')$|^$';

	// An expression to strip any whitespace between the gtlt and the thing
	// it modifies, so that `> 1.2.3` ==> `>1.2.3`
	var COMPARATORTRIM = R++;
	src[COMPARATORTRIM] = '(\\s*)' + src[GTLT] +
	                      '\\s*(' + LOOSEPLAIN + '|' + src[XRANGEPLAIN] + ')';

	// this one has to use the /g flag
	re[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], 'g');
	var comparatorTrimReplace = '$1$2$3';

	// Something like `1.2.3 - 1.2.4`
	// Note that these all use the loose form, because they'll be
	// checked against either the strict or loose comparator form
	// later.
	var HYPHENRANGE = R++;
	src[HYPHENRANGE] = '^\\s*(' + src[XRANGEPLAIN] + ')' +
	                   '\\s+-\\s+' +
	                   '(' + src[XRANGEPLAIN] + ')' +
	                   '\\s*$';

	var HYPHENRANGELOOSE = R++;
	src[HYPHENRANGELOOSE] = '^\\s*(' + src[XRANGEPLAINLOOSE] + ')' +
	                        '\\s+-\\s+' +
	                        '(' + src[XRANGEPLAINLOOSE] + ')' +
	                        '\\s*$';

	// Star ranges basically just allow anything at all.
	var STAR = R++;
	src[STAR] = '(<|>)?=?\\s*\\*';

	// Compile to actual regexp objects.
	// All are flag-free, unless they were created above with a flag.
	for (var i = 0; i < R; i++) {
	  debug(i, src[i]);
	  if (!re[i]) {
	    re[i] = new RegExp(src[i]);
	  }
	}

	exports.parse = parse;
	function parse (version, options) {
	  if (!options || typeof options !== 'object') {
	    options = {
	      loose: !!options,
	      includePrerelease: false
	    };
	  }

	  if (version instanceof SemVer) {
	    return version
	  }

	  if (typeof version !== 'string') {
	    return null
	  }

	  if (version.length > MAX_LENGTH) {
	    return null
	  }

	  var r = options.loose ? re[LOOSE] : re[FULL];
	  if (!r.test(version)) {
	    return null
	  }

	  try {
	    return new SemVer(version, options)
	  } catch (er) {
	    return null
	  }
	}

	exports.valid = valid;
	function valid (version, options) {
	  var v = parse(version, options);
	  return v ? v.version : null
	}

	exports.clean = clean;
	function clean (version, options) {
	  var s = parse(version.trim().replace(/^[=v]+/, ''), options);
	  return s ? s.version : null
	}

	exports.SemVer = SemVer;

	function SemVer (version, options) {
	  if (!options || typeof options !== 'object') {
	    options = {
	      loose: !!options,
	      includePrerelease: false
	    };
	  }
	  if (version instanceof SemVer) {
	    if (version.loose === options.loose) {
	      return version
	    } else {
	      version = version.version;
	    }
	  } else if (typeof version !== 'string') {
	    throw new TypeError('Invalid Version: ' + version)
	  }

	  if (version.length > MAX_LENGTH) {
	    throw new TypeError('version is longer than ' + MAX_LENGTH + ' characters')
	  }

	  if (!(this instanceof SemVer)) {
	    return new SemVer(version, options)
	  }

	  debug('SemVer', version, options);
	  this.options = options;
	  this.loose = !!options.loose;

	  var m = version.trim().match(options.loose ? re[LOOSE] : re[FULL]);

	  if (!m) {
	    throw new TypeError('Invalid Version: ' + version)
	  }

	  this.raw = version;

	  // these are actually numbers
	  this.major = +m[1];
	  this.minor = +m[2];
	  this.patch = +m[3];

	  if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
	    throw new TypeError('Invalid major version')
	  }

	  if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
	    throw new TypeError('Invalid minor version')
	  }

	  if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
	    throw new TypeError('Invalid patch version')
	  }

	  // numberify any prerelease numeric ids
	  if (!m[4]) {
	    this.prerelease = [];
	  } else {
	    this.prerelease = m[4].split('.').map(function (id) {
	      if (/^[0-9]+$/.test(id)) {
	        var num = +id;
	        if (num >= 0 && num < MAX_SAFE_INTEGER) {
	          return num
	        }
	      }
	      return id
	    });
	  }

	  this.build = m[5] ? m[5].split('.') : [];
	  this.format();
	}

	SemVer.prototype.format = function () {
	  this.version = this.major + '.' + this.minor + '.' + this.patch;
	  if (this.prerelease.length) {
	    this.version += '-' + this.prerelease.join('.');
	  }
	  return this.version
	};

	SemVer.prototype.toString = function () {
	  return this.version
	};

	SemVer.prototype.compare = function (other) {
	  debug('SemVer.compare', this.version, this.options, other);
	  if (!(other instanceof SemVer)) {
	    other = new SemVer(other, this.options);
	  }

	  return this.compareMain(other) || this.comparePre(other)
	};

	SemVer.prototype.compareMain = function (other) {
	  if (!(other instanceof SemVer)) {
	    other = new SemVer(other, this.options);
	  }

	  return compareIdentifiers(this.major, other.major) ||
	         compareIdentifiers(this.minor, other.minor) ||
	         compareIdentifiers(this.patch, other.patch)
	};

	SemVer.prototype.comparePre = function (other) {
	  if (!(other instanceof SemVer)) {
	    other = new SemVer(other, this.options);
	  }

	  // NOT having a prerelease is > having one
	  if (this.prerelease.length && !other.prerelease.length) {
	    return -1
	  } else if (!this.prerelease.length && other.prerelease.length) {
	    return 1
	  } else if (!this.prerelease.length && !other.prerelease.length) {
	    return 0
	  }

	  var i = 0;
	  do {
	    var a = this.prerelease[i];
	    var b = other.prerelease[i];
	    debug('prerelease compare', i, a, b);
	    if (a === undefined && b === undefined) {
	      return 0
	    } else if (b === undefined) {
	      return 1
	    } else if (a === undefined) {
	      return -1
	    } else if (a === b) {
	      continue
	    } else {
	      return compareIdentifiers(a, b)
	    }
	  } while (++i)
	};

	// preminor will bump the version up to the next minor release, and immediately
	// down to pre-release. premajor and prepatch work the same way.
	SemVer.prototype.inc = function (release, identifier) {
	  switch (release) {
	    case 'premajor':
	      this.prerelease.length = 0;
	      this.patch = 0;
	      this.minor = 0;
	      this.major++;
	      this.inc('pre', identifier);
	      break
	    case 'preminor':
	      this.prerelease.length = 0;
	      this.patch = 0;
	      this.minor++;
	      this.inc('pre', identifier);
	      break
	    case 'prepatch':
	      // If this is already a prerelease, it will bump to the next version
	      // drop any prereleases that might already exist, since they are not
	      // relevant at this point.
	      this.prerelease.length = 0;
	      this.inc('patch', identifier);
	      this.inc('pre', identifier);
	      break
	    // If the input is a non-prerelease version, this acts the same as
	    // prepatch.
	    case 'prerelease':
	      if (this.prerelease.length === 0) {
	        this.inc('patch', identifier);
	      }
	      this.inc('pre', identifier);
	      break

	    case 'major':
	      // If this is a pre-major version, bump up to the same major version.
	      // Otherwise increment major.
	      // 1.0.0-5 bumps to 1.0.0
	      // 1.1.0 bumps to 2.0.0
	      if (this.minor !== 0 ||
	          this.patch !== 0 ||
	          this.prerelease.length === 0) {
	        this.major++;
	      }
	      this.minor = 0;
	      this.patch = 0;
	      this.prerelease = [];
	      break
	    case 'minor':
	      // If this is a pre-minor version, bump up to the same minor version.
	      // Otherwise increment minor.
	      // 1.2.0-5 bumps to 1.2.0
	      // 1.2.1 bumps to 1.3.0
	      if (this.patch !== 0 || this.prerelease.length === 0) {
	        this.minor++;
	      }
	      this.patch = 0;
	      this.prerelease = [];
	      break
	    case 'patch':
	      // If this is not a pre-release version, it will increment the patch.
	      // If it is a pre-release it will bump up to the same patch version.
	      // 1.2.0-5 patches to 1.2.0
	      // 1.2.0 patches to 1.2.1
	      if (this.prerelease.length === 0) {
	        this.patch++;
	      }
	      this.prerelease = [];
	      break
	    // This probably shouldn't be used publicly.
	    // 1.0.0 "pre" would become 1.0.0-0 which is the wrong direction.
	    case 'pre':
	      if (this.prerelease.length === 0) {
	        this.prerelease = [0];
	      } else {
	        var i = this.prerelease.length;
	        while (--i >= 0) {
	          if (typeof this.prerelease[i] === 'number') {
	            this.prerelease[i]++;
	            i = -2;
	          }
	        }
	        if (i === -1) {
	          // didn't increment anything
	          this.prerelease.push(0);
	        }
	      }
	      if (identifier) {
	        // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
	        // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
	        if (this.prerelease[0] === identifier) {
	          if (isNaN(this.prerelease[1])) {
	            this.prerelease = [identifier, 0];
	          }
	        } else {
	          this.prerelease = [identifier, 0];
	        }
	      }
	      break

	    default:
	      throw new Error('invalid increment argument: ' + release)
	  }
	  this.format();
	  this.raw = this.version;
	  return this
	};

	exports.inc = inc;
	function inc (version, release, loose, identifier) {
	  if (typeof (loose) === 'string') {
	    identifier = loose;
	    loose = undefined;
	  }

	  try {
	    return new SemVer(version, loose).inc(release, identifier).version
	  } catch (er) {
	    return null
	  }
	}

	exports.diff = diff;
	function diff (version1, version2) {
	  if (eq(version1, version2)) {
	    return null
	  } else {
	    var v1 = parse(version1);
	    var v2 = parse(version2);
	    var prefix = '';
	    if (v1.prerelease.length || v2.prerelease.length) {
	      prefix = 'pre';
	      var defaultResult = 'prerelease';
	    }
	    for (var key in v1) {
	      if (key === 'major' || key === 'minor' || key === 'patch') {
	        if (v1[key] !== v2[key]) {
	          return prefix + key
	        }
	      }
	    }
	    return defaultResult // may be undefined
	  }
	}

	exports.compareIdentifiers = compareIdentifiers;

	var numeric = /^[0-9]+$/;
	function compareIdentifiers (a, b) {
	  var anum = numeric.test(a);
	  var bnum = numeric.test(b);

	  if (anum && bnum) {
	    a = +a;
	    b = +b;
	  }

	  return a === b ? 0
	    : (anum && !bnum) ? -1
	    : (bnum && !anum) ? 1
	    : a < b ? -1
	    : 1
	}

	exports.rcompareIdentifiers = rcompareIdentifiers;
	function rcompareIdentifiers (a, b) {
	  return compareIdentifiers(b, a)
	}

	exports.major = major;
	function major (a, loose) {
	  return new SemVer(a, loose).major
	}

	exports.minor = minor;
	function minor (a, loose) {
	  return new SemVer(a, loose).minor
	}

	exports.patch = patch;
	function patch (a, loose) {
	  return new SemVer(a, loose).patch
	}

	exports.compare = compare;
	function compare (a, b, loose) {
	  return new SemVer(a, loose).compare(new SemVer(b, loose))
	}

	exports.compareLoose = compareLoose;
	function compareLoose (a, b) {
	  return compare(a, b, true)
	}

	exports.rcompare = rcompare;
	function rcompare (a, b, loose) {
	  return compare(b, a, loose)
	}

	exports.sort = sort;
	function sort (list, loose) {
	  return list.sort(function (a, b) {
	    return exports.compare(a, b, loose)
	  })
	}

	exports.rsort = rsort;
	function rsort (list, loose) {
	  return list.sort(function (a, b) {
	    return exports.rcompare(a, b, loose)
	  })
	}

	exports.gt = gt;
	function gt (a, b, loose) {
	  return compare(a, b, loose) > 0
	}

	exports.lt = lt;
	function lt (a, b, loose) {
	  return compare(a, b, loose) < 0
	}

	exports.eq = eq;
	function eq (a, b, loose) {
	  return compare(a, b, loose) === 0
	}

	exports.neq = neq;
	function neq (a, b, loose) {
	  return compare(a, b, loose) !== 0
	}

	exports.gte = gte;
	function gte (a, b, loose) {
	  return compare(a, b, loose) >= 0
	}

	exports.lte = lte;
	function lte (a, b, loose) {
	  return compare(a, b, loose) <= 0
	}

	exports.cmp = cmp;
	function cmp (a, op, b, loose) {
	  switch (op) {
	    case '===':
	      if (typeof a === 'object')
	        a = a.version;
	      if (typeof b === 'object')
	        b = b.version;
	      return a === b

	    case '!==':
	      if (typeof a === 'object')
	        a = a.version;
	      if (typeof b === 'object')
	        b = b.version;
	      return a !== b

	    case '':
	    case '=':
	    case '==':
	      return eq(a, b, loose)

	    case '!=':
	      return neq(a, b, loose)

	    case '>':
	      return gt(a, b, loose)

	    case '>=':
	      return gte(a, b, loose)

	    case '<':
	      return lt(a, b, loose)

	    case '<=':
	      return lte(a, b, loose)

	    default:
	      throw new TypeError('Invalid operator: ' + op)
	  }
	}

	exports.Comparator = Comparator;
	function Comparator (comp, options) {
	  if (!options || typeof options !== 'object') {
	    options = {
	      loose: !!options,
	      includePrerelease: false
	    };
	  }

	  if (comp instanceof Comparator) {
	    if (comp.loose === !!options.loose) {
	      return comp
	    } else {
	      comp = comp.value;
	    }
	  }

	  if (!(this instanceof Comparator)) {
	    return new Comparator(comp, options)
	  }

	  debug('comparator', comp, options);
	  this.options = options;
	  this.loose = !!options.loose;
	  this.parse(comp);

	  if (this.semver === ANY) {
	    this.value = '';
	  } else {
	    this.value = this.operator + this.semver.version;
	  }

	  debug('comp', this);
	}

	var ANY = {};
	Comparator.prototype.parse = function (comp) {
	  var r = this.options.loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
	  var m = comp.match(r);

	  if (!m) {
	    throw new TypeError('Invalid comparator: ' + comp)
	  }

	  this.operator = m[1];
	  if (this.operator === '=') {
	    this.operator = '';
	  }

	  // if it literally is just '>' or '' then allow anything.
	  if (!m[2]) {
	    this.semver = ANY;
	  } else {
	    this.semver = new SemVer(m[2], this.options.loose);
	  }
	};

	Comparator.prototype.toString = function () {
	  return this.value
	};

	Comparator.prototype.test = function (version) {
	  debug('Comparator.test', version, this.options.loose);

	  if (this.semver === ANY) {
	    return true
	  }

	  if (typeof version === 'string') {
	    version = new SemVer(version, this.options);
	  }

	  return cmp(version, this.operator, this.semver, this.options)
	};

	Comparator.prototype.intersects = function (comp, options) {
	  if (!(comp instanceof Comparator)) {
	    throw new TypeError('a Comparator is required')
	  }

	  if (!options || typeof options !== 'object') {
	    options = {
	      loose: !!options,
	      includePrerelease: false
	    };
	  }

	  var rangeTmp;

	  if (this.operator === '') {
	    rangeTmp = new Range(comp.value, options);
	    return satisfies(this.value, rangeTmp, options)
	  } else if (comp.operator === '') {
	    rangeTmp = new Range(this.value, options);
	    return satisfies(comp.semver, rangeTmp, options)
	  }

	  var sameDirectionIncreasing =
	    (this.operator === '>=' || this.operator === '>') &&
	    (comp.operator === '>=' || comp.operator === '>');
	  var sameDirectionDecreasing =
	    (this.operator === '<=' || this.operator === '<') &&
	    (comp.operator === '<=' || comp.operator === '<');
	  var sameSemVer = this.semver.version === comp.semver.version;
	  var differentDirectionsInclusive =
	    (this.operator === '>=' || this.operator === '<=') &&
	    (comp.operator === '>=' || comp.operator === '<=');
	  var oppositeDirectionsLessThan =
	    cmp(this.semver, '<', comp.semver, options) &&
	    ((this.operator === '>=' || this.operator === '>') &&
	    (comp.operator === '<=' || comp.operator === '<'));
	  var oppositeDirectionsGreaterThan =
	    cmp(this.semver, '>', comp.semver, options) &&
	    ((this.operator === '<=' || this.operator === '<') &&
	    (comp.operator === '>=' || comp.operator === '>'));

	  return sameDirectionIncreasing || sameDirectionDecreasing ||
	    (sameSemVer && differentDirectionsInclusive) ||
	    oppositeDirectionsLessThan || oppositeDirectionsGreaterThan
	};

	exports.Range = Range;
	function Range (range, options) {
	  if (!options || typeof options !== 'object') {
	    options = {
	      loose: !!options,
	      includePrerelease: false
	    };
	  }

	  if (range instanceof Range) {
	    if (range.loose === !!options.loose &&
	        range.includePrerelease === !!options.includePrerelease) {
	      return range
	    } else {
	      return new Range(range.raw, options)
	    }
	  }

	  if (range instanceof Comparator) {
	    return new Range(range.value, options)
	  }

	  if (!(this instanceof Range)) {
	    return new Range(range, options)
	  }

	  this.options = options;
	  this.loose = !!options.loose;
	  this.includePrerelease = !!options.includePrerelease;

	  // First, split based on boolean or ||
	  this.raw = range;
	  this.set = range.split(/\s*\|\|\s*/).map(function (range) {
	    return this.parseRange(range.trim())
	  }, this).filter(function (c) {
	    // throw out any that are not relevant for whatever reason
	    return c.length
	  });

	  if (!this.set.length) {
	    throw new TypeError('Invalid SemVer Range: ' + range)
	  }

	  this.format();
	}

	Range.prototype.format = function () {
	  this.range = this.set.map(function (comps) {
	    return comps.join(' ').trim()
	  }).join('||').trim();
	  return this.range
	};

	Range.prototype.toString = function () {
	  return this.range
	};

	Range.prototype.parseRange = function (range) {
	  var loose = this.options.loose;
	  range = range.trim();
	  // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`
	  var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE];
	  range = range.replace(hr, hyphenReplace);
	  debug('hyphen replace', range);
	  // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`
	  range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace);
	  debug('comparator trim', range, re[COMPARATORTRIM]);

	  // `~ 1.2.3` => `~1.2.3`
	  range = range.replace(re[TILDETRIM], tildeTrimReplace);

	  // `^ 1.2.3` => `^1.2.3`
	  range = range.replace(re[CARETTRIM], caretTrimReplace);

	  // normalize spaces
	  range = range.split(/\s+/).join(' ');

	  // At this point, the range is completely trimmed and
	  // ready to be split into comparators.

	  var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
	  var set = range.split(' ').map(function (comp) {
	    return parseComparator(comp, this.options)
	  }, this).join(' ').split(/\s+/);
	  if (this.options.loose) {
	    // in loose mode, throw out any that are not valid comparators
	    set = set.filter(function (comp) {
	      return !!comp.match(compRe)
	    });
	  }
	  set = set.map(function (comp) {
	    return new Comparator(comp, this.options)
	  }, this);

	  return set
	};

	Range.prototype.intersects = function (range, options) {
	  if (!(range instanceof Range)) {
	    throw new TypeError('a Range is required')
	  }

	  return this.set.some(function (thisComparators) {
	    return thisComparators.every(function (thisComparator) {
	      return range.set.some(function (rangeComparators) {
	        return rangeComparators.every(function (rangeComparator) {
	          return thisComparator.intersects(rangeComparator, options)
	        })
	      })
	    })
	  })
	};

	// Mostly just for testing and legacy API reasons
	exports.toComparators = toComparators;
	function toComparators (range, options) {
	  return new Range(range, options).set.map(function (comp) {
	    return comp.map(function (c) {
	      return c.value
	    }).join(' ').trim().split(' ')
	  })
	}

	// comprised of xranges, tildes, stars, and gtlt's at this point.
	// already replaced the hyphen ranges
	// turn into a set of JUST comparators.
	function parseComparator (comp, options) {
	  debug('comp', comp, options);
	  comp = replaceCarets(comp, options);
	  debug('caret', comp);
	  comp = replaceTildes(comp, options);
	  debug('tildes', comp);
	  comp = replaceXRanges(comp, options);
	  debug('xrange', comp);
	  comp = replaceStars(comp, options);
	  debug('stars', comp);
	  return comp
	}

	function isX (id) {
	  return !id || id.toLowerCase() === 'x' || id === '*'
	}

	// ~, ~> --> * (any, kinda silly)
	// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0
	// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0
	// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0
	// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0
	// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0
	function replaceTildes (comp, options) {
	  return comp.trim().split(/\s+/).map(function (comp) {
	    return replaceTilde(comp, options)
	  }).join(' ')
	}

	function replaceTilde (comp, options) {
	  var r = options.loose ? re[TILDELOOSE] : re[TILDE];
	  return comp.replace(r, function (_, M, m, p, pr) {
	    debug('tilde', comp, _, M, m, p, pr);
	    var ret;

	    if (isX(M)) {
	      ret = '';
	    } else if (isX(m)) {
	      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
	    } else if (isX(p)) {
	      // ~1.2 == >=1.2.0 <1.3.0
	      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
	    } else if (pr) {
	      debug('replaceTilde pr', pr);
	      ret = '>=' + M + '.' + m + '.' + p + '-' + pr +
	            ' <' + M + '.' + (+m + 1) + '.0';
	    } else {
	      // ~1.2.3 == >=1.2.3 <1.3.0
	      ret = '>=' + M + '.' + m + '.' + p +
	            ' <' + M + '.' + (+m + 1) + '.0';
	    }

	    debug('tilde return', ret);
	    return ret
	  })
	}

	// ^ --> * (any, kinda silly)
	// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0
	// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0
	// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0
	// ^1.2.3 --> >=1.2.3 <2.0.0
	// ^1.2.0 --> >=1.2.0 <2.0.0
	function replaceCarets (comp, options) {
	  return comp.trim().split(/\s+/).map(function (comp) {
	    return replaceCaret(comp, options)
	  }).join(' ')
	}

	function replaceCaret (comp, options) {
	  debug('caret', comp, options);
	  var r = options.loose ? re[CARETLOOSE] : re[CARET];
	  return comp.replace(r, function (_, M, m, p, pr) {
	    debug('caret', comp, _, M, m, p, pr);
	    var ret;

	    if (isX(M)) {
	      ret = '';
	    } else if (isX(m)) {
	      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
	    } else if (isX(p)) {
	      if (M === '0') {
	        ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
	      } else {
	        ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0';
	      }
	    } else if (pr) {
	      debug('replaceCaret pr', pr);
	      if (M === '0') {
	        if (m === '0') {
	          ret = '>=' + M + '.' + m + '.' + p + '-' + pr +
	                ' <' + M + '.' + m + '.' + (+p + 1);
	        } else {
	          ret = '>=' + M + '.' + m + '.' + p + '-' + pr +
	                ' <' + M + '.' + (+m + 1) + '.0';
	        }
	      } else {
	        ret = '>=' + M + '.' + m + '.' + p + '-' + pr +
	              ' <' + (+M + 1) + '.0.0';
	      }
	    } else {
	      debug('no pr');
	      if (M === '0') {
	        if (m === '0') {
	          ret = '>=' + M + '.' + m + '.' + p +
	                ' <' + M + '.' + m + '.' + (+p + 1);
	        } else {
	          ret = '>=' + M + '.' + m + '.' + p +
	                ' <' + M + '.' + (+m + 1) + '.0';
	        }
	      } else {
	        ret = '>=' + M + '.' + m + '.' + p +
	              ' <' + (+M + 1) + '.0.0';
	      }
	    }

	    debug('caret return', ret);
	    return ret
	  })
	}

	function replaceXRanges (comp, options) {
	  debug('replaceXRanges', comp, options);
	  return comp.split(/\s+/).map(function (comp) {
	    return replaceXRange(comp, options)
	  }).join(' ')
	}

	function replaceXRange (comp, options) {
	  comp = comp.trim();
	  var r = options.loose ? re[XRANGELOOSE] : re[XRANGE];
	  return comp.replace(r, function (ret, gtlt, M, m, p, pr) {
	    debug('xRange', comp, ret, gtlt, M, m, p, pr);
	    var xM = isX(M);
	    var xm = xM || isX(m);
	    var xp = xm || isX(p);
	    var anyX = xp;

	    if (gtlt === '=' && anyX) {
	      gtlt = '';
	    }

	    if (xM) {
	      if (gtlt === '>' || gtlt === '<') {
	        // nothing is allowed
	        ret = '<0.0.0';
	      } else {
	        // nothing is forbidden
	        ret = '*';
	      }
	    } else if (gtlt && anyX) {
	      // we know patch is an x, because we have any x at all.
	      // replace X with 0
	      if (xm) {
	        m = 0;
	      }
	      p = 0;

	      if (gtlt === '>') {
	        // >1 => >=2.0.0
	        // >1.2 => >=1.3.0
	        // >1.2.3 => >= 1.2.4
	        gtlt = '>=';
	        if (xm) {
	          M = +M + 1;
	          m = 0;
	          p = 0;
	        } else {
	          m = +m + 1;
	          p = 0;
	        }
	      } else if (gtlt === '<=') {
	        // <=0.7.x is actually <0.8.0, since any 0.7.x should
	        // pass.  Similarly, <=7.x is actually <8.0.0, etc.
	        gtlt = '<';
	        if (xm) {
	          M = +M + 1;
	        } else {
	          m = +m + 1;
	        }
	      }

	      ret = gtlt + M + '.' + m + '.' + p;
	    } else if (xm) {
	      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
	    } else if (xp) {
	      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
	    }

	    debug('xRange return', ret);

	    return ret
	  })
	}

	// Because * is AND-ed with everything else in the comparator,
	// and '' means "any version", just remove the *s entirely.
	function replaceStars (comp, options) {
	  debug('replaceStars', comp, options);
	  // Looseness is ignored here.  star is always as loose as it gets!
	  return comp.trim().replace(re[STAR], '')
	}

	// This function is passed to string.replace(re[HYPHENRANGE])
	// M, m, patch, prerelease, build
	// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
	// 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do
	// 1.2 - 3.4 => >=1.2.0 <3.5.0
	function hyphenReplace ($0,
	  from, fM, fm, fp, fpr, fb,
	  to, tM, tm, tp, tpr, tb) {
	  if (isX(fM)) {
	    from = '';
	  } else if (isX(fm)) {
	    from = '>=' + fM + '.0.0';
	  } else if (isX(fp)) {
	    from = '>=' + fM + '.' + fm + '.0';
	  } else {
	    from = '>=' + from;
	  }

	  if (isX(tM)) {
	    to = '';
	  } else if (isX(tm)) {
	    to = '<' + (+tM + 1) + '.0.0';
	  } else if (isX(tp)) {
	    to = '<' + tM + '.' + (+tm + 1) + '.0';
	  } else if (tpr) {
	    to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr;
	  } else {
	    to = '<=' + to;
	  }

	  return (from + ' ' + to).trim()
	}

	// if ANY of the sets match ALL of its comparators, then pass
	Range.prototype.test = function (version) {
	  if (!version) {
	    return false
	  }

	  if (typeof version === 'string') {
	    version = new SemVer(version, this.options);
	  }

	  for (var i = 0; i < this.set.length; i++) {
	    if (testSet(this.set[i], version, this.options)) {
	      return true
	    }
	  }
	  return false
	};

	function testSet (set, version, options) {
	  for (var i = 0; i < set.length; i++) {
	    if (!set[i].test(version)) {
	      return false
	    }
	  }

	  if (version.prerelease.length && !options.includePrerelease) {
	    // Find the set of versions that are allowed to have prereleases
	    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
	    // That should allow `1.2.3-pr.2` to pass.
	    // However, `1.2.4-alpha.notready` should NOT be allowed,
	    // even though it's within the range set by the comparators.
	    for (i = 0; i < set.length; i++) {
	      debug(set[i].semver);
	      if (set[i].semver === ANY) {
	        continue
	      }

	      if (set[i].semver.prerelease.length > 0) {
	        var allowed = set[i].semver;
	        if (allowed.major === version.major &&
	            allowed.minor === version.minor &&
	            allowed.patch === version.patch) {
	          return true
	        }
	      }
	    }

	    // Version has a -pre, but it's not one of the ones we like.
	    return false
	  }

	  return true
	}

	exports.satisfies = satisfies;
	function satisfies (version, range, options) {
	  try {
	    range = new Range(range, options);
	  } catch (er) {
	    return false
	  }
	  return range.test(version)
	}

	exports.maxSatisfying = maxSatisfying;
	function maxSatisfying (versions, range, options) {
	  var max = null;
	  var maxSV = null;
	  try {
	    var rangeObj = new Range(range, options);
	  } catch (er) {
	    return null
	  }
	  versions.forEach(function (v) {
	    if (rangeObj.test(v)) {
	      // satisfies(v, range, options)
	      if (!max || maxSV.compare(v) === -1) {
	        // compare(max, v, true)
	        max = v;
	        maxSV = new SemVer(max, options);
	      }
	    }
	  });
	  return max
	}

	exports.minSatisfying = minSatisfying;
	function minSatisfying (versions, range, options) {
	  var min = null;
	  var minSV = null;
	  try {
	    var rangeObj = new Range(range, options);
	  } catch (er) {
	    return null
	  }
	  versions.forEach(function (v) {
	    if (rangeObj.test(v)) {
	      // satisfies(v, range, options)
	      if (!min || minSV.compare(v) === 1) {
	        // compare(min, v, true)
	        min = v;
	        minSV = new SemVer(min, options);
	      }
	    }
	  });
	  return min
	}

	exports.minVersion = minVersion;
	function minVersion (range, loose) {
	  range = new Range(range, loose);

	  var minver = new SemVer('0.0.0');
	  if (range.test(minver)) {
	    return minver
	  }

	  minver = new SemVer('0.0.0-0');
	  if (range.test(minver)) {
	    return minver
	  }

	  minver = null;
	  for (var i = 0; i < range.set.length; ++i) {
	    var comparators = range.set[i];

	    comparators.forEach(function (comparator) {
	      // Clone to avoid manipulating the comparator's semver object.
	      var compver = new SemVer(comparator.semver.version);
	      switch (comparator.operator) {
	        case '>':
	          if (compver.prerelease.length === 0) {
	            compver.patch++;
	          } else {
	            compver.prerelease.push(0);
	          }
	          compver.raw = compver.format();
	          /* fallthrough */
	        case '':
	        case '>=':
	          if (!minver || gt(minver, compver)) {
	            minver = compver;
	          }
	          break
	        case '<':
	        case '<=':
	          /* Ignore maximum versions */
	          break
	        /* istanbul ignore next */
	        default:
	          throw new Error('Unexpected operation: ' + comparator.operator)
	      }
	    });
	  }

	  if (minver && range.test(minver)) {
	    return minver
	  }

	  return null
	}

	exports.validRange = validRange;
	function validRange (range, options) {
	  try {
	    // Return '*' instead of '' so that truthiness works.
	    // This will throw if it's invalid anyway
	    return new Range(range, options).range || '*'
	  } catch (er) {
	    return null
	  }
	}

	// Determine if version is less than all the versions possible in the range
	exports.ltr = ltr;
	function ltr (version, range, options) {
	  return outside(version, range, '<', options)
	}

	// Determine if version is greater than all the versions possible in the range.
	exports.gtr = gtr;
	function gtr (version, range, options) {
	  return outside(version, range, '>', options)
	}

	exports.outside = outside;
	function outside (version, range, hilo, options) {
	  version = new SemVer(version, options);
	  range = new Range(range, options);

	  var gtfn, ltefn, ltfn, comp, ecomp;
	  switch (hilo) {
	    case '>':
	      gtfn = gt;
	      ltefn = lte;
	      ltfn = lt;
	      comp = '>';
	      ecomp = '>=';
	      break
	    case '<':
	      gtfn = lt;
	      ltefn = gte;
	      ltfn = gt;
	      comp = '<';
	      ecomp = '<=';
	      break
	    default:
	      throw new TypeError('Must provide a hilo val of "<" or ">"')
	  }

	  // If it satisifes the range it is not outside
	  if (satisfies(version, range, options)) {
	    return false
	  }

	  // From now on, variable terms are as if we're in "gtr" mode.
	  // but note that everything is flipped for the "ltr" function.

	  for (var i = 0; i < range.set.length; ++i) {
	    var comparators = range.set[i];

	    var high = null;
	    var low = null;

	    comparators.forEach(function (comparator) {
	      if (comparator.semver === ANY) {
	        comparator = new Comparator('>=0.0.0');
	      }
	      high = high || comparator;
	      low = low || comparator;
	      if (gtfn(comparator.semver, high.semver, options)) {
	        high = comparator;
	      } else if (ltfn(comparator.semver, low.semver, options)) {
	        low = comparator;
	      }
	    });

	    // If the edge version comparator has a operator then our version
	    // isn't outside it
	    if (high.operator === comp || high.operator === ecomp) {
	      return false
	    }

	    // If the lowest version comparator has an operator and our version
	    // is less than it then it isn't higher than the range
	    if ((!low.operator || low.operator === comp) &&
	        ltefn(version, low.semver)) {
	      return false
	    } else if (low.operator === ecomp && ltfn(version, low.semver)) {
	      return false
	    }
	  }
	  return true
	}

	exports.prerelease = prerelease;
	function prerelease (version, options) {
	  var parsed = parse(version, options);
	  return (parsed && parsed.prerelease.length) ? parsed.prerelease : null
	}

	exports.intersects = intersects;
	function intersects (r1, r2, options) {
	  r1 = new Range(r1, options);
	  r2 = new Range(r2, options);
	  return r1.intersects(r2)
	}

	exports.coerce = coerce;
	function coerce (version) {
	  if (version instanceof SemVer) {
	    return version
	  }

	  if (typeof version !== 'string') {
	    return null
	  }

	  var match = version.match(re[COERCE]);

	  if (match == null) {
	    return null
	  }

	  return parse(match[1] +
	    '.' + (match[2] || '0') +
	    '.' + (match[3] || '0'))
	}
	});

	const SUPPORTED_VERSIONS = '>=4';

	function validate () {
	  if (!semver$1.satisfies(process.versions.node, SUPPORTED_VERSIONS)) {
	    throw new Error([
	      `Node ${process.versions.node} is not supported.`,
	      `Only versions of Node matching "${SUPPORTED_VERSIONS}" are supported.`,
	      `Tracing has been disabled.`
	    ].join(' '))
	  }
	}

	var validate_1 = validate;

	var pathExists = fp => new Promise(resolve => {
		fs__default['default'].access(fp, err => {
			resolve(!err);
		});
	});

	var sync$6 = fp => {
		try {
			fs__default['default'].accessSync(fp);
			return true;
		} catch (err) {
			return false;
		}
	};
	pathExists.sync = sync$6;

	var pTry = cb => new Promise(resolve => {
		resolve(cb());
	});

	var pLimit = concurrency => {
		if (concurrency < 1) {
			throw new TypeError('Expected `concurrency` to be a number from 1 and up');
		}

		const queue = [];
		let activeCount = 0;

		const next = () => {
			activeCount--;

			if (queue.length > 0) {
				queue.shift()();
			}
		};

		return fn => new Promise((resolve, reject) => {
			const run = () => {
				activeCount++;

				pTry(fn).then(
					val => {
						resolve(val);
						next();
					},
					err => {
						reject(err);
						next();
					}
				);
			};

			if (activeCount < concurrency) {
				run();
			} else {
				queue.push(run);
			}
		});
	};

	class EndError extends Error {
		constructor(value) {
			super();
			this.value = value;
		}
	}

	// the input can also be a promise, so we `Promise.all()` them both
	const finder = el => Promise.all(el).then(val => val[1] === true && Promise.reject(new EndError(val[0])));

	var pLocate = (iterable, tester, opts) => {
		opts = Object.assign({
			concurrency: Infinity,
			preserveOrder: true
		}, opts);

		const limit = pLimit(opts.concurrency);

		// start all the promises concurrently with optional limit
		const items = Array.from(iterable).map(el => [el, limit(() => Promise.resolve(el).then(tester))]);

		// check the promises either serially or concurrently
		const checkLimit = pLimit(opts.preserveOrder ? 1 : Infinity);

		return Promise.all(items.map(el => checkLimit(() => finder(el))))
			.then(() => {})
			.catch(err => err instanceof EndError ? err.value : Promise.reject(err));
	};

	var locatePath = (iterable, opts) => {
		opts = Object.assign({
			cwd: process.cwd()
		}, opts);

		return pLocate(iterable, el => pathExists(path__default['default'].resolve(opts.cwd, el)), opts);
	};

	var sync$5 = (iterable, opts) => {
		opts = Object.assign({
			cwd: process.cwd()
		}, opts);

		for (const el of iterable) {
			if (pathExists.sync(path__default['default'].resolve(opts.cwd, el))) {
				return el;
			}
		}
	};
	locatePath.sync = sync$5;

	var findUp = (filename, opts) => {
		opts = opts || {};

		const startDir = path__default['default'].resolve(opts.cwd || '');
		const root = path__default['default'].parse(startDir).root;

		const filenames = [].concat(filename);

		return new Promise(resolve => {
			(function find(dir) {
				locatePath(filenames, {cwd: dir}).then(file => {
					if (file) {
						resolve(path__default['default'].join(dir, file));
					} else if (dir === root) {
						resolve(null);
					} else {
						find(path__default['default'].dirname(dir));
					}
				});
			})(startDir);
		});
	};

	var sync$4 = (filename, opts) => {
		opts = opts || {};

		let dir = path__default['default'].resolve(opts.cwd || '');
		const root = path__default['default'].parse(dir).root;

		const filenames = [].concat(filename);

		// eslint-disable-next-line no-constant-condition
		while (true) {
			const file = locatePath.sync(filenames, {cwd: dir});

			if (file) {
				return path__default['default'].join(dir, file);
			} else if (dir === root) {
				return null;
			}

			dir = path__default['default'].dirname(dir);
		}
	};
	findUp.sync = sync$4;

	var origCwd = process.cwd;
	var cwd = null;

	var platform$2 = process.env.GRACEFUL_FS_PLATFORM || process.platform;

	process.cwd = function() {
	  if (!cwd)
	    cwd = origCwd.call(process);
	  return cwd
	};
	try {
	  process.cwd();
	} catch (er) {}

	// This check is needed until node.js 12 is required
	if (typeof process.chdir === 'function') {
	  var chdir = process.chdir;
	  process.chdir = function (d) {
	    cwd = null;
	    chdir.call(process, d);
	  };
	  if (Object.setPrototypeOf) Object.setPrototypeOf(process.chdir, chdir);
	}

	var polyfills = patch$3;

	function patch$3 (fs) {
	  // (re-)implement some things that are known busted or missing.

	  // lchmod, broken prior to 0.6.2
	  // back-port the fix here.
	  if (constants__default['default'].hasOwnProperty('O_SYMLINK') &&
	      process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)) {
	    patchLchmod(fs);
	  }

	  // lutimes implementation, or no-op
	  if (!fs.lutimes) {
	    patchLutimes(fs);
	  }

	  // https://github.com/isaacs/node-graceful-fs/issues/4
	  // Chown should not fail on einval or eperm if non-root.
	  // It should not fail on enosys ever, as this just indicates
	  // that a fs doesn't support the intended operation.

	  fs.chown = chownFix(fs.chown);
	  fs.fchown = chownFix(fs.fchown);
	  fs.lchown = chownFix(fs.lchown);

	  fs.chmod = chmodFix(fs.chmod);
	  fs.fchmod = chmodFix(fs.fchmod);
	  fs.lchmod = chmodFix(fs.lchmod);

	  fs.chownSync = chownFixSync(fs.chownSync);
	  fs.fchownSync = chownFixSync(fs.fchownSync);
	  fs.lchownSync = chownFixSync(fs.lchownSync);

	  fs.chmodSync = chmodFixSync(fs.chmodSync);
	  fs.fchmodSync = chmodFixSync(fs.fchmodSync);
	  fs.lchmodSync = chmodFixSync(fs.lchmodSync);

	  fs.stat = statFix(fs.stat);
	  fs.fstat = statFix(fs.fstat);
	  fs.lstat = statFix(fs.lstat);

	  fs.statSync = statFixSync(fs.statSync);
	  fs.fstatSync = statFixSync(fs.fstatSync);
	  fs.lstatSync = statFixSync(fs.lstatSync);

	  // if lchmod/lchown do not exist, then make them no-ops
	  if (!fs.lchmod) {
	    fs.lchmod = function (path, mode, cb) {
	      if (cb) process.nextTick(cb);
	    };
	    fs.lchmodSync = function () {};
	  }
	  if (!fs.lchown) {
	    fs.lchown = function (path, uid, gid, cb) {
	      if (cb) process.nextTick(cb);
	    };
	    fs.lchownSync = function () {};
	  }

	  // on Windows, A/V software can lock the directory, causing this
	  // to fail with an EACCES or EPERM if the directory contains newly
	  // created files.  Try again on failure, for up to 60 seconds.

	  // Set the timeout this long because some Windows Anti-Virus, such as Parity
	  // bit9, may lock files for up to a minute, causing npm package install
	  // failures. Also, take care to yield the scheduler. Windows scheduling gives
	  // CPU to a busy looping process, which can cause the program causing the lock
	  // contention to be starved of CPU by node, so the contention doesn't resolve.
	  if (platform$2 === "win32") {
	    fs.rename = (function (fs$rename) { return function (from, to, cb) {
	      var start = Date.now();
	      var backoff = 0;
	      fs$rename(from, to, function CB (er) {
	        if (er
	            && (er.code === "EACCES" || er.code === "EPERM")
	            && Date.now() - start < 60000) {
	          setTimeout(function() {
	            fs.stat(to, function (stater, st) {
	              if (stater && stater.code === "ENOENT")
	                fs$rename(from, to, CB);
	              else
	                cb(er);
	            });
	          }, backoff);
	          if (backoff < 100)
	            backoff += 10;
	          return;
	        }
	        if (cb) cb(er);
	      });
	    }})(fs.rename);
	  }

	  // if read() returns EAGAIN, then just try it again.
	  fs.read = (function (fs$read) {
	    function read (fd, buffer, offset, length, position, callback_) {
	      var callback;
	      if (callback_ && typeof callback_ === 'function') {
	        var eagCounter = 0;
	        callback = function (er, _, __) {
	          if (er && er.code === 'EAGAIN' && eagCounter < 10) {
	            eagCounter ++;
	            return fs$read.call(fs, fd, buffer, offset, length, position, callback)
	          }
	          callback_.apply(this, arguments);
	        };
	      }
	      return fs$read.call(fs, fd, buffer, offset, length, position, callback)
	    }

	    // This ensures `util.promisify` works as it does for native `fs.read`.
	    if (Object.setPrototypeOf) Object.setPrototypeOf(read, fs$read);
	    return read
	  })(fs.read);

	  fs.readSync = (function (fs$readSync) { return function (fd, buffer, offset, length, position) {
	    var eagCounter = 0;
	    while (true) {
	      try {
	        return fs$readSync.call(fs, fd, buffer, offset, length, position)
	      } catch (er) {
	        if (er.code === 'EAGAIN' && eagCounter < 10) {
	          eagCounter ++;
	          continue
	        }
	        throw er
	      }
	    }
	  }})(fs.readSync);

	  function patchLchmod (fs) {
	    fs.lchmod = function (path, mode, callback) {
	      fs.open( path
	             , constants__default['default'].O_WRONLY | constants__default['default'].O_SYMLINK
	             , mode
	             , function (err, fd) {
	        if (err) {
	          if (callback) callback(err);
	          return
	        }
	        // prefer to return the chmod error, if one occurs,
	        // but still try to close, and report closing errors if they occur.
	        fs.fchmod(fd, mode, function (err) {
	          fs.close(fd, function(err2) {
	            if (callback) callback(err || err2);
	          });
	        });
	      });
	    };

	    fs.lchmodSync = function (path, mode) {
	      var fd = fs.openSync(path, constants__default['default'].O_WRONLY | constants__default['default'].O_SYMLINK, mode);

	      // prefer to return the chmod error, if one occurs,
	      // but still try to close, and report closing errors if they occur.
	      var threw = true;
	      var ret;
	      try {
	        ret = fs.fchmodSync(fd, mode);
	        threw = false;
	      } finally {
	        if (threw) {
	          try {
	            fs.closeSync(fd);
	          } catch (er) {}
	        } else {
	          fs.closeSync(fd);
	        }
	      }
	      return ret
	    };
	  }

	  function patchLutimes (fs) {
	    if (constants__default['default'].hasOwnProperty("O_SYMLINK")) {
	      fs.lutimes = function (path, at, mt, cb) {
	        fs.open(path, constants__default['default'].O_SYMLINK, function (er, fd) {
	          if (er) {
	            if (cb) cb(er);
	            return
	          }
	          fs.futimes(fd, at, mt, function (er) {
	            fs.close(fd, function (er2) {
	              if (cb) cb(er || er2);
	            });
	          });
	        });
	      };

	      fs.lutimesSync = function (path, at, mt) {
	        var fd = fs.openSync(path, constants__default['default'].O_SYMLINK);
	        var ret;
	        var threw = true;
	        try {
	          ret = fs.futimesSync(fd, at, mt);
	          threw = false;
	        } finally {
	          if (threw) {
	            try {
	              fs.closeSync(fd);
	            } catch (er) {}
	          } else {
	            fs.closeSync(fd);
	          }
	        }
	        return ret
	      };

	    } else {
	      fs.lutimes = function (_a, _b, _c, cb) { if (cb) process.nextTick(cb); };
	      fs.lutimesSync = function () {};
	    }
	  }

	  function chmodFix (orig) {
	    if (!orig) return orig
	    return function (target, mode, cb) {
	      return orig.call(fs, target, mode, function (er) {
	        if (chownErOk(er)) er = null;
	        if (cb) cb.apply(this, arguments);
	      })
	    }
	  }

	  function chmodFixSync (orig) {
	    if (!orig) return orig
	    return function (target, mode) {
	      try {
	        return orig.call(fs, target, mode)
	      } catch (er) {
	        if (!chownErOk(er)) throw er
	      }
	    }
	  }


	  function chownFix (orig) {
	    if (!orig) return orig
	    return function (target, uid, gid, cb) {
	      return orig.call(fs, target, uid, gid, function (er) {
	        if (chownErOk(er)) er = null;
	        if (cb) cb.apply(this, arguments);
	      })
	    }
	  }

	  function chownFixSync (orig) {
	    if (!orig) return orig
	    return function (target, uid, gid) {
	      try {
	        return orig.call(fs, target, uid, gid)
	      } catch (er) {
	        if (!chownErOk(er)) throw er
	      }
	    }
	  }

	  function statFix (orig) {
	    if (!orig) return orig
	    // Older versions of Node erroneously returned signed integers for
	    // uid + gid.
	    return function (target, options, cb) {
	      if (typeof options === 'function') {
	        cb = options;
	        options = null;
	      }
	      function callback (er, stats) {
	        if (stats) {
	          if (stats.uid < 0) stats.uid += 0x100000000;
	          if (stats.gid < 0) stats.gid += 0x100000000;
	        }
	        if (cb) cb.apply(this, arguments);
	      }
	      return options ? orig.call(fs, target, options, callback)
	        : orig.call(fs, target, callback)
	    }
	  }

	  function statFixSync (orig) {
	    if (!orig) return orig
	    // Older versions of Node erroneously returned signed integers for
	    // uid + gid.
	    return function (target, options) {
	      var stats = options ? orig.call(fs, target, options)
	        : orig.call(fs, target);
	      if (stats.uid < 0) stats.uid += 0x100000000;
	      if (stats.gid < 0) stats.gid += 0x100000000;
	      return stats;
	    }
	  }

	  // ENOSYS means that the fs doesn't support the op. Just ignore
	  // that, because it doesn't matter.
	  //
	  // if there's no getuid, or if getuid() is something other
	  // than 0, and the error is EINVAL or EPERM, then just ignore
	  // it.
	  //
	  // This specific case is a silent failure in cp, install, tar,
	  // and most other unix tools that manage permissions.
	  //
	  // When running as root, or if other types of errors are
	  // encountered, then it's strict.
	  function chownErOk (er) {
	    if (!er)
	      return true

	    if (er.code === "ENOSYS")
	      return true

	    var nonroot = !process.getuid || process.getuid() !== 0;
	    if (nonroot) {
	      if (er.code === "EINVAL" || er.code === "EPERM")
	        return true
	    }

	    return false
	  }
	}

	var Stream = require$$0__default['default'].Stream;

	var legacyStreams = legacy;

	function legacy (fs) {
	  return {
	    ReadStream: ReadStream,
	    WriteStream: WriteStream
	  }

	  function ReadStream (path, options) {
	    if (!(this instanceof ReadStream)) return new ReadStream(path, options);

	    Stream.call(this);

	    var self = this;

	    this.path = path;
	    this.fd = null;
	    this.readable = true;
	    this.paused = false;

	    this.flags = 'r';
	    this.mode = 438; /*=0666*/
	    this.bufferSize = 64 * 1024;

	    options = options || {};

	    // Mixin options into this
	    var keys = Object.keys(options);
	    for (var index = 0, length = keys.length; index < length; index++) {
	      var key = keys[index];
	      this[key] = options[key];
	    }

	    if (this.encoding) this.setEncoding(this.encoding);

	    if (this.start !== undefined) {
	      if ('number' !== typeof this.start) {
	        throw TypeError('start must be a Number');
	      }
	      if (this.end === undefined) {
	        this.end = Infinity;
	      } else if ('number' !== typeof this.end) {
	        throw TypeError('end must be a Number');
	      }

	      if (this.start > this.end) {
	        throw new Error('start must be <= end');
	      }

	      this.pos = this.start;
	    }

	    if (this.fd !== null) {
	      process.nextTick(function() {
	        self._read();
	      });
	      return;
	    }

	    fs.open(this.path, this.flags, this.mode, function (err, fd) {
	      if (err) {
	        self.emit('error', err);
	        self.readable = false;
	        return;
	      }

	      self.fd = fd;
	      self.emit('open', fd);
	      self._read();
	    });
	  }

	  function WriteStream (path, options) {
	    if (!(this instanceof WriteStream)) return new WriteStream(path, options);

	    Stream.call(this);

	    this.path = path;
	    this.fd = null;
	    this.writable = true;

	    this.flags = 'w';
	    this.encoding = 'binary';
	    this.mode = 438; /*=0666*/
	    this.bytesWritten = 0;

	    options = options || {};

	    // Mixin options into this
	    var keys = Object.keys(options);
	    for (var index = 0, length = keys.length; index < length; index++) {
	      var key = keys[index];
	      this[key] = options[key];
	    }

	    if (this.start !== undefined) {
	      if ('number' !== typeof this.start) {
	        throw TypeError('start must be a Number');
	      }
	      if (this.start < 0) {
	        throw new Error('start must be >= zero');
	      }

	      this.pos = this.start;
	    }

	    this.busy = false;
	    this._queue = [];

	    if (this.fd === null) {
	      this._open = fs.open;
	      this._queue.push([this._open, this.path, this.flags, this.mode, undefined]);
	      this.flush();
	    }
	  }
	}

	var clone_1 = clone;

	var getPrototypeOf = Object.getPrototypeOf || function (obj) {
	  return obj.__proto__
	};

	function clone (obj) {
	  if (obj === null || typeof obj !== 'object')
	    return obj

	  if (obj instanceof Object)
	    var copy = { __proto__: getPrototypeOf(obj) };
	  else
	    var copy = Object.create(null);

	  Object.getOwnPropertyNames(obj).forEach(function (key) {
	    Object.defineProperty(copy, key, Object.getOwnPropertyDescriptor(obj, key));
	  });

	  return copy
	}

	var gracefulFs = createCommonjsModule(function (module) {
	/* istanbul ignore next - node 0.x polyfill */
	var gracefulQueue;
	var previousSymbol;

	/* istanbul ignore else - node 0.x polyfill */
	if (typeof Symbol === 'function' && typeof Symbol.for === 'function') {
	  gracefulQueue = Symbol.for('graceful-fs.queue');
	  // This is used in testing by future versions
	  previousSymbol = Symbol.for('graceful-fs.previous');
	} else {
	  gracefulQueue = '___graceful-fs.queue';
	  previousSymbol = '___graceful-fs.previous';
	}

	function noop () {}

	function publishQueue(context, queue) {
	  Object.defineProperty(context, gracefulQueue, {
	    get: function() {
	      return queue
	    }
	  });
	}

	var debug = noop;
	if (util__default['default'].debuglog)
	  debug = util__default['default'].debuglog('gfs4');
	else if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || ''))
	  debug = function() {
	    var m = util__default['default'].format.apply(util__default['default'], arguments);
	    m = 'GFS4: ' + m.split(/\n/).join('\nGFS4: ');
	    console.error(m);
	  };

	// Once time initialization
	if (!fs__default['default'][gracefulQueue]) {
	  // This queue can be shared by multiple loaded instances
	  var queue = commonjsGlobal[gracefulQueue] || [];
	  publishQueue(fs__default['default'], queue);

	  // Patch fs.close/closeSync to shared queue version, because we need
	  // to retry() whenever a close happens *anywhere* in the program.
	  // This is essential when multiple graceful-fs instances are
	  // in play at the same time.
	  fs__default['default'].close = (function (fs$close) {
	    function close (fd, cb) {
	      return fs$close.call(fs__default['default'], fd, function (err) {
	        // This function uses the graceful-fs shared queue
	        if (!err) {
	          retry();
	        }

	        if (typeof cb === 'function')
	          cb.apply(this, arguments);
	      })
	    }

	    Object.defineProperty(close, previousSymbol, {
	      value: fs$close
	    });
	    return close
	  })(fs__default['default'].close);

	  fs__default['default'].closeSync = (function (fs$closeSync) {
	    function closeSync (fd) {
	      // This function uses the graceful-fs shared queue
	      fs$closeSync.apply(fs__default['default'], arguments);
	      retry();
	    }

	    Object.defineProperty(closeSync, previousSymbol, {
	      value: fs$closeSync
	    });
	    return closeSync
	  })(fs__default['default'].closeSync);

	  if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || '')) {
	    process.on('exit', function() {
	      debug(fs__default['default'][gracefulQueue]);
	      assert__default['default'].equal(fs__default['default'][gracefulQueue].length, 0);
	    });
	  }
	}

	if (!commonjsGlobal[gracefulQueue]) {
	  publishQueue(commonjsGlobal, fs__default['default'][gracefulQueue]);
	}

	module.exports = patch(clone_1(fs__default['default']));
	if (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH && !fs__default['default'].__patched) {
	    module.exports = patch(fs__default['default']);
	    fs__default['default'].__patched = true;
	}

	function patch (fs) {
	  // Everything that references the open() function needs to be in here
	  polyfills(fs);
	  fs.gracefulify = patch;

	  fs.createReadStream = createReadStream;
	  fs.createWriteStream = createWriteStream;
	  var fs$readFile = fs.readFile;
	  fs.readFile = readFile;
	  function readFile (path, options, cb) {
	    if (typeof options === 'function')
	      cb = options, options = null;

	    return go$readFile(path, options, cb)

	    function go$readFile (path, options, cb) {
	      return fs$readFile(path, options, function (err) {
	        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
	          enqueue([go$readFile, [path, options, cb]]);
	        else {
	          if (typeof cb === 'function')
	            cb.apply(this, arguments);
	          retry();
	        }
	      })
	    }
	  }

	  var fs$writeFile = fs.writeFile;
	  fs.writeFile = writeFile;
	  function writeFile (path, data, options, cb) {
	    if (typeof options === 'function')
	      cb = options, options = null;

	    return go$writeFile(path, data, options, cb)

	    function go$writeFile (path, data, options, cb) {
	      return fs$writeFile(path, data, options, function (err) {
	        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
	          enqueue([go$writeFile, [path, data, options, cb]]);
	        else {
	          if (typeof cb === 'function')
	            cb.apply(this, arguments);
	          retry();
	        }
	      })
	    }
	  }

	  var fs$appendFile = fs.appendFile;
	  if (fs$appendFile)
	    fs.appendFile = appendFile;
	  function appendFile (path, data, options, cb) {
	    if (typeof options === 'function')
	      cb = options, options = null;

	    return go$appendFile(path, data, options, cb)

	    function go$appendFile (path, data, options, cb) {
	      return fs$appendFile(path, data, options, function (err) {
	        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
	          enqueue([go$appendFile, [path, data, options, cb]]);
	        else {
	          if (typeof cb === 'function')
	            cb.apply(this, arguments);
	          retry();
	        }
	      })
	    }
	  }

	  var fs$copyFile = fs.copyFile;
	  if (fs$copyFile)
	    fs.copyFile = copyFile;
	  function copyFile (src, dest, flags, cb) {
	    if (typeof flags === 'function') {
	      cb = flags;
	      flags = 0;
	    }
	    return fs$copyFile(src, dest, flags, function (err) {
	      if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
	        enqueue([fs$copyFile, [src, dest, flags, cb]]);
	      else {
	        if (typeof cb === 'function')
	          cb.apply(this, arguments);
	        retry();
	      }
	    })
	  }

	  var fs$readdir = fs.readdir;
	  fs.readdir = readdir;
	  function readdir (path, options, cb) {
	    var args = [path];
	    if (typeof options !== 'function') {
	      args.push(options);
	    } else {
	      cb = options;
	    }
	    args.push(go$readdir$cb);

	    return go$readdir(args)

	    function go$readdir$cb (err, files) {
	      if (files && files.sort)
	        files.sort();

	      if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
	        enqueue([go$readdir, [args]]);

	      else {
	        if (typeof cb === 'function')
	          cb.apply(this, arguments);
	        retry();
	      }
	    }
	  }

	  function go$readdir (args) {
	    return fs$readdir.apply(fs, args)
	  }

	  if (process.version.substr(0, 4) === 'v0.8') {
	    var legStreams = legacyStreams(fs);
	    ReadStream = legStreams.ReadStream;
	    WriteStream = legStreams.WriteStream;
	  }

	  var fs$ReadStream = fs.ReadStream;
	  if (fs$ReadStream) {
	    ReadStream.prototype = Object.create(fs$ReadStream.prototype);
	    ReadStream.prototype.open = ReadStream$open;
	  }

	  var fs$WriteStream = fs.WriteStream;
	  if (fs$WriteStream) {
	    WriteStream.prototype = Object.create(fs$WriteStream.prototype);
	    WriteStream.prototype.open = WriteStream$open;
	  }

	  Object.defineProperty(fs, 'ReadStream', {
	    get: function () {
	      return ReadStream
	    },
	    set: function (val) {
	      ReadStream = val;
	    },
	    enumerable: true,
	    configurable: true
	  });
	  Object.defineProperty(fs, 'WriteStream', {
	    get: function () {
	      return WriteStream
	    },
	    set: function (val) {
	      WriteStream = val;
	    },
	    enumerable: true,
	    configurable: true
	  });

	  // legacy names
	  var FileReadStream = ReadStream;
	  Object.defineProperty(fs, 'FileReadStream', {
	    get: function () {
	      return FileReadStream
	    },
	    set: function (val) {
	      FileReadStream = val;
	    },
	    enumerable: true,
	    configurable: true
	  });
	  var FileWriteStream = WriteStream;
	  Object.defineProperty(fs, 'FileWriteStream', {
	    get: function () {
	      return FileWriteStream
	    },
	    set: function (val) {
	      FileWriteStream = val;
	    },
	    enumerable: true,
	    configurable: true
	  });

	  function ReadStream (path, options) {
	    if (this instanceof ReadStream)
	      return fs$ReadStream.apply(this, arguments), this
	    else
	      return ReadStream.apply(Object.create(ReadStream.prototype), arguments)
	  }

	  function ReadStream$open () {
	    var that = this;
	    open(that.path, that.flags, that.mode, function (err, fd) {
	      if (err) {
	        if (that.autoClose)
	          that.destroy();

	        that.emit('error', err);
	      } else {
	        that.fd = fd;
	        that.emit('open', fd);
	        that.read();
	      }
	    });
	  }

	  function WriteStream (path, options) {
	    if (this instanceof WriteStream)
	      return fs$WriteStream.apply(this, arguments), this
	    else
	      return WriteStream.apply(Object.create(WriteStream.prototype), arguments)
	  }

	  function WriteStream$open () {
	    var that = this;
	    open(that.path, that.flags, that.mode, function (err, fd) {
	      if (err) {
	        that.destroy();
	        that.emit('error', err);
	      } else {
	        that.fd = fd;
	        that.emit('open', fd);
	      }
	    });
	  }

	  function createReadStream (path, options) {
	    return new fs.ReadStream(path, options)
	  }

	  function createWriteStream (path, options) {
	    return new fs.WriteStream(path, options)
	  }

	  var fs$open = fs.open;
	  fs.open = open;
	  function open (path, flags, mode, cb) {
	    if (typeof mode === 'function')
	      cb = mode, mode = null;

	    return go$open(path, flags, mode, cb)

	    function go$open (path, flags, mode, cb) {
	      return fs$open(path, flags, mode, function (err, fd) {
	        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
	          enqueue([go$open, [path, flags, mode, cb]]);
	        else {
	          if (typeof cb === 'function')
	            cb.apply(this, arguments);
	          retry();
	        }
	      })
	    }
	  }

	  return fs
	}

	function enqueue (elem) {
	  debug('ENQUEUE', elem[0].name, elem[1]);
	  fs__default['default'][gracefulQueue].push(elem);
	}

	function retry () {
	  var elem = fs__default['default'][gracefulQueue].shift();
	  if (elem) {
	    debug('RETRY', elem[0].name, elem[1]);
	    elem[0].apply(null, elem[1]);
	  }
	}
	});

	var stripBom = x => {
		if (typeof x !== 'string') {
			throw new TypeError('Expected a string, got ' + typeof x);
		}

		// Catches EFBBBF (UTF-8 BOM) because the buffer-to-string
		// conversion translates it to FEFF (UTF-16 BOM)
		if (x.charCodeAt(0) === 0xFEFF) {
			return x.slice(1);
		}

		return x;
	};

	var isArrayish = function isArrayish(obj) {
		if (!obj) {
			return false;
		}

		return obj instanceof Array || Array.isArray(obj) ||
			(obj.length >= 0 && obj.splice instanceof Function);
	};

	var errorEx = function errorEx(name, properties) {
		if (!name || name.constructor !== String) {
			properties = name || {};
			name = Error.name;
		}

		var errorExError = function ErrorEXError(message) {
			if (!this) {
				return new ErrorEXError(message);
			}

			message = message instanceof Error
				? message.message
				: (message || this.message);

			Error.call(this, message);
			Error.captureStackTrace(this, errorExError);

			this.name = name;

			Object.defineProperty(this, 'message', {
				configurable: true,
				enumerable: false,
				get: function () {
					var newMessage = message.split(/\r?\n/g);

					for (var key in properties) {
						if (!properties.hasOwnProperty(key)) {
							continue;
						}

						var modifier = properties[key];

						if ('message' in modifier) {
							newMessage = modifier.message(this[key], newMessage) || newMessage;
							if (!isArrayish(newMessage)) {
								newMessage = [newMessage];
							}
						}
					}

					return newMessage.join('\n');
				},
				set: function (v) {
					message = v;
				}
			});

			var overwrittenStack = null;

			var stackDescriptor = Object.getOwnPropertyDescriptor(this, 'stack');
			var stackGetter = stackDescriptor.get;
			var stackValue = stackDescriptor.value;
			delete stackDescriptor.value;
			delete stackDescriptor.writable;

			stackDescriptor.set = function (newstack) {
				overwrittenStack = newstack;
			};

			stackDescriptor.get = function () {
				var stack = (overwrittenStack || ((stackGetter)
					? stackGetter.call(this)
					: stackValue)).split(/\r?\n+/g);

				// starting in Node 7, the stack builder caches the message.
				// just replace it.
				if (!overwrittenStack) {
					stack[0] = this.name + ': ' + this.message;
				}

				var lineCount = 1;
				for (var key in properties) {
					if (!properties.hasOwnProperty(key)) {
						continue;
					}

					var modifier = properties[key];

					if ('line' in modifier) {
						var line = modifier.line(this[key]);
						if (line) {
							stack.splice(lineCount++, 0, '    ' + line);
						}
					}

					if ('stack' in modifier) {
						modifier.stack(this[key], stack);
					}
				}

				return stack.join('\n');
			};

			Object.defineProperty(this, 'stack', stackDescriptor);
		};

		if (Object.setPrototypeOf) {
			Object.setPrototypeOf(errorExError.prototype, Error.prototype);
			Object.setPrototypeOf(errorExError, Error);
		} else {
			util__default['default'].inherits(errorExError, Error);
		}

		return errorExError;
	};

	errorEx.append = function (str, def) {
		return {
			message: function (v, message) {
				v = v || def;

				if (v) {
					message[0] += ' ' + str.replace('%s', v.toString());
				}

				return message;
			}
		};
	};

	errorEx.line = function (str, def) {
		return {
			line: function (v) {
				v = v || def;

				if (v) {
					return str.replace('%s', v.toString());
				}

				return null;
			}
		};
	};

	var errorEx_1 = errorEx;

	var jsonParseBetterErrors = parseJson$1;
	function parseJson$1 (txt, reviver, context) {
	  context = context || 20;
	  try {
	    return JSON.parse(txt, reviver)
	  } catch (e) {
	    if (typeof txt !== 'string') {
	      const isEmptyArray = Array.isArray(txt) && txt.length === 0;
	      const errorMessage = 'Cannot parse ' +
	      (isEmptyArray ? 'an empty array' : String(txt));
	      throw new TypeError(errorMessage)
	    }
	    const syntaxErr = e.message.match(/^Unexpected token.*position\s+(\d+)/i);
	    const errIdx = syntaxErr
	    ? +syntaxErr[1]
	    : e.message.match(/^Unexpected end of JSON.*/i)
	    ? txt.length - 1
	    : null;
	    if (errIdx != null) {
	      const start = errIdx <= context
	      ? 0
	      : errIdx - context;
	      const end = errIdx + context >= txt.length
	      ? txt.length
	      : errIdx + context;
	      e.message += ` while parsing near '${
        start === 0 ? '' : '...'
      }${txt.slice(start, end)}${
        end === txt.length ? '' : '...'
      }'`;
	    } else {
	      e.message += ` while parsing '${txt.slice(0, context * 2)}'`;
	    }
	    throw e
	  }
	}

	const JSONError = errorEx_1('JSONError', {
		fileName: errorEx_1.append('in %s')
	});

	var parseJson = (input, reviver, filename) => {
		if (typeof reviver === 'string') {
			filename = reviver;
			reviver = null;
		}

		try {
			try {
				return JSON.parse(input, reviver);
			} catch (err) {
				jsonParseBetterErrors(input, reviver);

				throw err;
			}
		} catch (err) {
			err.message = err.message.replace(/\n/g, '');

			const jsonErr = new JSONError(err);
			if (filename) {
				jsonErr.fileName = filename;
			}

			throw jsonErr;
		}
	};

	const processFn$1 = (fn, opts) => function () {
		const P = opts.promiseModule;
		const args = new Array(arguments.length);

		for (let i = 0; i < arguments.length; i++) {
			args[i] = arguments[i];
		}

		return new P((resolve, reject) => {
			if (opts.errorFirst) {
				args.push(function (err, result) {
					if (opts.multiArgs) {
						const results = new Array(arguments.length - 1);

						for (let i = 1; i < arguments.length; i++) {
							results[i - 1] = arguments[i];
						}

						if (err) {
							results.unshift(err);
							reject(results);
						} else {
							resolve(results);
						}
					} else if (err) {
						reject(err);
					} else {
						resolve(result);
					}
				});
			} else {
				args.push(function (result) {
					if (opts.multiArgs) {
						const results = new Array(arguments.length - 1);

						for (let i = 0; i < arguments.length; i++) {
							results[i] = arguments[i];
						}

						resolve(results);
					} else {
						resolve(result);
					}
				});
			}

			fn.apply(this, args);
		});
	};

	var pify$1 = (obj, opts) => {
		opts = Object.assign({
			exclude: [/.+(Sync|Stream)$/],
			errorFirst: true,
			promiseModule: Promise
		}, opts);

		const filter = key => {
			const match = pattern => typeof pattern === 'string' ? key === pattern : pattern.test(key);
			return opts.include ? opts.include.some(match) : !opts.exclude.some(match);
		};

		let ret;
		if (typeof obj === 'function') {
			ret = function () {
				if (opts.excludeMain) {
					return obj.apply(this, arguments);
				}

				return processFn$1(obj, opts).apply(this, arguments);
			};
		} else {
			ret = Object.create(Object.getPrototypeOf(obj));
		}

		for (const key in obj) { // eslint-disable-line guard-for-in
			const x = obj[key];
			ret[key] = typeof x === 'function' && filter(key) ? processFn$1(x, opts) : x;
		}

		return ret;
	};

	const parse$6 = (data, fp) => parseJson(stripBom(data), path__default['default'].relative('.', fp));

	var loadJsonFile = fp => pify$1(gracefulFs.readFile)(fp, 'utf8').then(data => parse$6(data, fp));
	var sync$3 = fp => parse$6(gracefulFs.readFileSync(fp, 'utf8'), fp);
	loadJsonFile.sync = sync$3;

	const processFn = (fn, opts) => function () {
		const P = opts.promiseModule;
		const args = new Array(arguments.length);

		for (let i = 0; i < arguments.length; i++) {
			args[i] = arguments[i];
		}

		return new P((resolve, reject) => {
			if (opts.errorFirst) {
				args.push(function (err, result) {
					if (opts.multiArgs) {
						const results = new Array(arguments.length - 1);

						for (let i = 1; i < arguments.length; i++) {
							results[i - 1] = arguments[i];
						}

						if (err) {
							results.unshift(err);
							reject(results);
						} else {
							resolve(results);
						}
					} else if (err) {
						reject(err);
					} else {
						resolve(result);
					}
				});
			} else {
				args.push(function (result) {
					if (opts.multiArgs) {
						const results = new Array(arguments.length - 1);

						for (let i = 0; i < arguments.length; i++) {
							results[i] = arguments[i];
						}

						resolve(results);
					} else {
						resolve(result);
					}
				});
			}

			fn.apply(this, args);
		});
	};

	var pify = (obj, opts) => {
		opts = Object.assign({
			exclude: [/.+(Sync|Stream)$/],
			errorFirst: true,
			promiseModule: Promise
		}, opts);

		const filter = key => {
			const match = pattern => typeof pattern === 'string' ? key === pattern : pattern.test(key);
			return opts.include ? opts.include.some(match) : !opts.exclude.some(match);
		};

		let ret;
		if (typeof obj === 'function') {
			ret = function () {
				if (opts.excludeMain) {
					return obj.apply(this, arguments);
				}

				return processFn(obj, opts).apply(this, arguments);
			};
		} else {
			ret = Object.create(Object.getPrototypeOf(obj));
		}

		for (const key in obj) { // eslint-disable-line guard-for-in
			const x = obj[key];
			ret[key] = typeof x === 'function' && filter(key) ? processFn(x, opts) : x;
		}

		return ret;
	};

	function type(fn, fn2, fp) {
		if (typeof fp !== 'string') {
			return Promise.reject(new TypeError(`Expected a string, got ${typeof fp}`));
		}

		return pify(fs__default['default'][fn])(fp)
			.then(stats => stats[fn2]())
			.catch(err => {
				if (err.code === 'ENOENT') {
					return false;
				}

				throw err;
			});
	}

	function typeSync(fn, fn2, fp) {
		if (typeof fp !== 'string') {
			throw new TypeError(`Expected a string, got ${typeof fp}`);
		}

		try {
			return fs__default['default'][fn](fp)[fn2]();
		} catch (err) {
			if (err.code === 'ENOENT') {
				return false;
			}

			throw err;
		}
	}

	var file = type.bind(null, 'stat', 'isFile');
	var dir = type.bind(null, 'stat', 'isDirectory');
	var symlink = type.bind(null, 'lstat', 'isSymbolicLink');
	var fileSync = typeSync.bind(null, 'statSync', 'isFile');
	var dirSync = typeSync.bind(null, 'statSync', 'isDirectory');
	var symlinkSync = typeSync.bind(null, 'lstatSync', 'isSymbolicLink');

	var pathType = {
		file: file,
		dir: dir,
		symlink: symlink,
		fileSync: fileSync,
		dirSync: dirSync,
		symlinkSync: symlinkSync
	};

	var semver = createCommonjsModule(function (module, exports) {
	exports = module.exports = SemVer;

	var debug;
	/* istanbul ignore next */
	if (typeof process === 'object' &&
	    process.env &&
	    process.env.NODE_DEBUG &&
	    /\bsemver\b/i.test(process.env.NODE_DEBUG)) {
	  debug = function () {
	    var args = Array.prototype.slice.call(arguments, 0);
	    args.unshift('SEMVER');
	    console.log.apply(console, args);
	  };
	} else {
	  debug = function () {};
	}

	// Note: this is the semver.org version of the spec that it implements
	// Not necessarily the package version of this code.
	exports.SEMVER_SPEC_VERSION = '2.0.0';

	var MAX_LENGTH = 256;
	var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER ||
	  /* istanbul ignore next */ 9007199254740991;

	// Max safe segment length for coercion.
	var MAX_SAFE_COMPONENT_LENGTH = 16;

	// The actual regexps go on exports.re
	var re = exports.re = [];
	var src = exports.src = [];
	var R = 0;

	// The following Regular Expressions can be used for tokenizing,
	// validating, and parsing SemVer version strings.

	// ## Numeric Identifier
	// A single `0`, or a non-zero digit followed by zero or more digits.

	var NUMERICIDENTIFIER = R++;
	src[NUMERICIDENTIFIER] = '0|[1-9]\\d*';
	var NUMERICIDENTIFIERLOOSE = R++;
	src[NUMERICIDENTIFIERLOOSE] = '[0-9]+';

	// ## Non-numeric Identifier
	// Zero or more digits, followed by a letter or hyphen, and then zero or
	// more letters, digits, or hyphens.

	var NONNUMERICIDENTIFIER = R++;
	src[NONNUMERICIDENTIFIER] = '\\d*[a-zA-Z-][a-zA-Z0-9-]*';

	// ## Main Version
	// Three dot-separated numeric identifiers.

	var MAINVERSION = R++;
	src[MAINVERSION] = '(' + src[NUMERICIDENTIFIER] + ')\\.' +
	                   '(' + src[NUMERICIDENTIFIER] + ')\\.' +
	                   '(' + src[NUMERICIDENTIFIER] + ')';

	var MAINVERSIONLOOSE = R++;
	src[MAINVERSIONLOOSE] = '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\.' +
	                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\.' +
	                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')';

	// ## Pre-release Version Identifier
	// A numeric identifier, or a non-numeric identifier.

	var PRERELEASEIDENTIFIER = R++;
	src[PRERELEASEIDENTIFIER] = '(?:' + src[NUMERICIDENTIFIER] +
	                            '|' + src[NONNUMERICIDENTIFIER] + ')';

	var PRERELEASEIDENTIFIERLOOSE = R++;
	src[PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[NUMERICIDENTIFIERLOOSE] +
	                                 '|' + src[NONNUMERICIDENTIFIER] + ')';

	// ## Pre-release Version
	// Hyphen, followed by one or more dot-separated pre-release version
	// identifiers.

	var PRERELEASE = R++;
	src[PRERELEASE] = '(?:-(' + src[PRERELEASEIDENTIFIER] +
	                  '(?:\\.' + src[PRERELEASEIDENTIFIER] + ')*))';

	var PRERELEASELOOSE = R++;
	src[PRERELEASELOOSE] = '(?:-?(' + src[PRERELEASEIDENTIFIERLOOSE] +
	                       '(?:\\.' + src[PRERELEASEIDENTIFIERLOOSE] + ')*))';

	// ## Build Metadata Identifier
	// Any combination of digits, letters, or hyphens.

	var BUILDIDENTIFIER = R++;
	src[BUILDIDENTIFIER] = '[0-9A-Za-z-]+';

	// ## Build Metadata
	// Plus sign, followed by one or more period-separated build metadata
	// identifiers.

	var BUILD = R++;
	src[BUILD] = '(?:\\+(' + src[BUILDIDENTIFIER] +
	             '(?:\\.' + src[BUILDIDENTIFIER] + ')*))';

	// ## Full Version String
	// A main version, followed optionally by a pre-release version and
	// build metadata.

	// Note that the only major, minor, patch, and pre-release sections of
	// the version string are capturing groups.  The build metadata is not a
	// capturing group, because it should not ever be used in version
	// comparison.

	var FULL = R++;
	var FULLPLAIN = 'v?' + src[MAINVERSION] +
	                src[PRERELEASE] + '?' +
	                src[BUILD] + '?';

	src[FULL] = '^' + FULLPLAIN + '$';

	// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
	// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
	// common in the npm registry.
	var LOOSEPLAIN = '[v=\\s]*' + src[MAINVERSIONLOOSE] +
	                 src[PRERELEASELOOSE] + '?' +
	                 src[BUILD] + '?';

	var LOOSE = R++;
	src[LOOSE] = '^' + LOOSEPLAIN + '$';

	var GTLT = R++;
	src[GTLT] = '((?:<|>)?=?)';

	// Something like "2.*" or "1.2.x".
	// Note that "x.x" is a valid xRange identifer, meaning "any version"
	// Only the first item is strictly required.
	var XRANGEIDENTIFIERLOOSE = R++;
	src[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + '|x|X|\\*';
	var XRANGEIDENTIFIER = R++;
	src[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + '|x|X|\\*';

	var XRANGEPLAIN = R++;
	src[XRANGEPLAIN] = '[v=\\s]*(' + src[XRANGEIDENTIFIER] + ')' +
	                   '(?:\\.(' + src[XRANGEIDENTIFIER] + ')' +
	                   '(?:\\.(' + src[XRANGEIDENTIFIER] + ')' +
	                   '(?:' + src[PRERELEASE] + ')?' +
	                   src[BUILD] + '?' +
	                   ')?)?';

	var XRANGEPLAINLOOSE = R++;
	src[XRANGEPLAINLOOSE] = '[v=\\s]*(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
	                        '(?:\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
	                        '(?:\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
	                        '(?:' + src[PRERELEASELOOSE] + ')?' +
	                        src[BUILD] + '?' +
	                        ')?)?';

	var XRANGE = R++;
	src[XRANGE] = '^' + src[GTLT] + '\\s*' + src[XRANGEPLAIN] + '$';
	var XRANGELOOSE = R++;
	src[XRANGELOOSE] = '^' + src[GTLT] + '\\s*' + src[XRANGEPLAINLOOSE] + '$';

	// Coercion.
	// Extract anything that could conceivably be a part of a valid semver
	var COERCE = R++;
	src[COERCE] = '(?:^|[^\\d])' +
	              '(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '})' +
	              '(?:\\.(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' +
	              '(?:\\.(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' +
	              '(?:$|[^\\d])';

	// Tilde ranges.
	// Meaning is "reasonably at or greater than"
	var LONETILDE = R++;
	src[LONETILDE] = '(?:~>?)';

	var TILDETRIM = R++;
	src[TILDETRIM] = '(\\s*)' + src[LONETILDE] + '\\s+';
	re[TILDETRIM] = new RegExp(src[TILDETRIM], 'g');
	var tildeTrimReplace = '$1~';

	var TILDE = R++;
	src[TILDE] = '^' + src[LONETILDE] + src[XRANGEPLAIN] + '$';
	var TILDELOOSE = R++;
	src[TILDELOOSE] = '^' + src[LONETILDE] + src[XRANGEPLAINLOOSE] + '$';

	// Caret ranges.
	// Meaning is "at least and backwards compatible with"
	var LONECARET = R++;
	src[LONECARET] = '(?:\\^)';

	var CARETTRIM = R++;
	src[CARETTRIM] = '(\\s*)' + src[LONECARET] + '\\s+';
	re[CARETTRIM] = new RegExp(src[CARETTRIM], 'g');
	var caretTrimReplace = '$1^';

	var CARET = R++;
	src[CARET] = '^' + src[LONECARET] + src[XRANGEPLAIN] + '$';
	var CARETLOOSE = R++;
	src[CARETLOOSE] = '^' + src[LONECARET] + src[XRANGEPLAINLOOSE] + '$';

	// A simple gt/lt/eq thing, or just "" to indicate "any version"
	var COMPARATORLOOSE = R++;
	src[COMPARATORLOOSE] = '^' + src[GTLT] + '\\s*(' + LOOSEPLAIN + ')$|^$';
	var COMPARATOR = R++;
	src[COMPARATOR] = '^' + src[GTLT] + '\\s*(' + FULLPLAIN + ')$|^$';

	// An expression to strip any whitespace between the gtlt and the thing
	// it modifies, so that `> 1.2.3` ==> `>1.2.3`
	var COMPARATORTRIM = R++;
	src[COMPARATORTRIM] = '(\\s*)' + src[GTLT] +
	                      '\\s*(' + LOOSEPLAIN + '|' + src[XRANGEPLAIN] + ')';

	// this one has to use the /g flag
	re[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], 'g');
	var comparatorTrimReplace = '$1$2$3';

	// Something like `1.2.3 - 1.2.4`
	// Note that these all use the loose form, because they'll be
	// checked against either the strict or loose comparator form
	// later.
	var HYPHENRANGE = R++;
	src[HYPHENRANGE] = '^\\s*(' + src[XRANGEPLAIN] + ')' +
	                   '\\s+-\\s+' +
	                   '(' + src[XRANGEPLAIN] + ')' +
	                   '\\s*$';

	var HYPHENRANGELOOSE = R++;
	src[HYPHENRANGELOOSE] = '^\\s*(' + src[XRANGEPLAINLOOSE] + ')' +
	                        '\\s+-\\s+' +
	                        '(' + src[XRANGEPLAINLOOSE] + ')' +
	                        '\\s*$';

	// Star ranges basically just allow anything at all.
	var STAR = R++;
	src[STAR] = '(<|>)?=?\\s*\\*';

	// Compile to actual regexp objects.
	// All are flag-free, unless they were created above with a flag.
	for (var i = 0; i < R; i++) {
	  debug(i, src[i]);
	  if (!re[i]) {
	    re[i] = new RegExp(src[i]);
	  }
	}

	exports.parse = parse;
	function parse (version, options) {
	  if (!options || typeof options !== 'object') {
	    options = {
	      loose: !!options,
	      includePrerelease: false
	    };
	  }

	  if (version instanceof SemVer) {
	    return version
	  }

	  if (typeof version !== 'string') {
	    return null
	  }

	  if (version.length > MAX_LENGTH) {
	    return null
	  }

	  var r = options.loose ? re[LOOSE] : re[FULL];
	  if (!r.test(version)) {
	    return null
	  }

	  try {
	    return new SemVer(version, options)
	  } catch (er) {
	    return null
	  }
	}

	exports.valid = valid;
	function valid (version, options) {
	  var v = parse(version, options);
	  return v ? v.version : null
	}

	exports.clean = clean;
	function clean (version, options) {
	  var s = parse(version.trim().replace(/^[=v]+/, ''), options);
	  return s ? s.version : null
	}

	exports.SemVer = SemVer;

	function SemVer (version, options) {
	  if (!options || typeof options !== 'object') {
	    options = {
	      loose: !!options,
	      includePrerelease: false
	    };
	  }
	  if (version instanceof SemVer) {
	    if (version.loose === options.loose) {
	      return version
	    } else {
	      version = version.version;
	    }
	  } else if (typeof version !== 'string') {
	    throw new TypeError('Invalid Version: ' + version)
	  }

	  if (version.length > MAX_LENGTH) {
	    throw new TypeError('version is longer than ' + MAX_LENGTH + ' characters')
	  }

	  if (!(this instanceof SemVer)) {
	    return new SemVer(version, options)
	  }

	  debug('SemVer', version, options);
	  this.options = options;
	  this.loose = !!options.loose;

	  var m = version.trim().match(options.loose ? re[LOOSE] : re[FULL]);

	  if (!m) {
	    throw new TypeError('Invalid Version: ' + version)
	  }

	  this.raw = version;

	  // these are actually numbers
	  this.major = +m[1];
	  this.minor = +m[2];
	  this.patch = +m[3];

	  if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
	    throw new TypeError('Invalid major version')
	  }

	  if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
	    throw new TypeError('Invalid minor version')
	  }

	  if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
	    throw new TypeError('Invalid patch version')
	  }

	  // numberify any prerelease numeric ids
	  if (!m[4]) {
	    this.prerelease = [];
	  } else {
	    this.prerelease = m[4].split('.').map(function (id) {
	      if (/^[0-9]+$/.test(id)) {
	        var num = +id;
	        if (num >= 0 && num < MAX_SAFE_INTEGER) {
	          return num
	        }
	      }
	      return id
	    });
	  }

	  this.build = m[5] ? m[5].split('.') : [];
	  this.format();
	}

	SemVer.prototype.format = function () {
	  this.version = this.major + '.' + this.minor + '.' + this.patch;
	  if (this.prerelease.length) {
	    this.version += '-' + this.prerelease.join('.');
	  }
	  return this.version
	};

	SemVer.prototype.toString = function () {
	  return this.version
	};

	SemVer.prototype.compare = function (other) {
	  debug('SemVer.compare', this.version, this.options, other);
	  if (!(other instanceof SemVer)) {
	    other = new SemVer(other, this.options);
	  }

	  return this.compareMain(other) || this.comparePre(other)
	};

	SemVer.prototype.compareMain = function (other) {
	  if (!(other instanceof SemVer)) {
	    other = new SemVer(other, this.options);
	  }

	  return compareIdentifiers(this.major, other.major) ||
	         compareIdentifiers(this.minor, other.minor) ||
	         compareIdentifiers(this.patch, other.patch)
	};

	SemVer.prototype.comparePre = function (other) {
	  if (!(other instanceof SemVer)) {
	    other = new SemVer(other, this.options);
	  }

	  // NOT having a prerelease is > having one
	  if (this.prerelease.length && !other.prerelease.length) {
	    return -1
	  } else if (!this.prerelease.length && other.prerelease.length) {
	    return 1
	  } else if (!this.prerelease.length && !other.prerelease.length) {
	    return 0
	  }

	  var i = 0;
	  do {
	    var a = this.prerelease[i];
	    var b = other.prerelease[i];
	    debug('prerelease compare', i, a, b);
	    if (a === undefined && b === undefined) {
	      return 0
	    } else if (b === undefined) {
	      return 1
	    } else if (a === undefined) {
	      return -1
	    } else if (a === b) {
	      continue
	    } else {
	      return compareIdentifiers(a, b)
	    }
	  } while (++i)
	};

	// preminor will bump the version up to the next minor release, and immediately
	// down to pre-release. premajor and prepatch work the same way.
	SemVer.prototype.inc = function (release, identifier) {
	  switch (release) {
	    case 'premajor':
	      this.prerelease.length = 0;
	      this.patch = 0;
	      this.minor = 0;
	      this.major++;
	      this.inc('pre', identifier);
	      break
	    case 'preminor':
	      this.prerelease.length = 0;
	      this.patch = 0;
	      this.minor++;
	      this.inc('pre', identifier);
	      break
	    case 'prepatch':
	      // If this is already a prerelease, it will bump to the next version
	      // drop any prereleases that might already exist, since they are not
	      // relevant at this point.
	      this.prerelease.length = 0;
	      this.inc('patch', identifier);
	      this.inc('pre', identifier);
	      break
	    // If the input is a non-prerelease version, this acts the same as
	    // prepatch.
	    case 'prerelease':
	      if (this.prerelease.length === 0) {
	        this.inc('patch', identifier);
	      }
	      this.inc('pre', identifier);
	      break

	    case 'major':
	      // If this is a pre-major version, bump up to the same major version.
	      // Otherwise increment major.
	      // 1.0.0-5 bumps to 1.0.0
	      // 1.1.0 bumps to 2.0.0
	      if (this.minor !== 0 ||
	          this.patch !== 0 ||
	          this.prerelease.length === 0) {
	        this.major++;
	      }
	      this.minor = 0;
	      this.patch = 0;
	      this.prerelease = [];
	      break
	    case 'minor':
	      // If this is a pre-minor version, bump up to the same minor version.
	      // Otherwise increment minor.
	      // 1.2.0-5 bumps to 1.2.0
	      // 1.2.1 bumps to 1.3.0
	      if (this.patch !== 0 || this.prerelease.length === 0) {
	        this.minor++;
	      }
	      this.patch = 0;
	      this.prerelease = [];
	      break
	    case 'patch':
	      // If this is not a pre-release version, it will increment the patch.
	      // If it is a pre-release it will bump up to the same patch version.
	      // 1.2.0-5 patches to 1.2.0
	      // 1.2.0 patches to 1.2.1
	      if (this.prerelease.length === 0) {
	        this.patch++;
	      }
	      this.prerelease = [];
	      break
	    // This probably shouldn't be used publicly.
	    // 1.0.0 "pre" would become 1.0.0-0 which is the wrong direction.
	    case 'pre':
	      if (this.prerelease.length === 0) {
	        this.prerelease = [0];
	      } else {
	        var i = this.prerelease.length;
	        while (--i >= 0) {
	          if (typeof this.prerelease[i] === 'number') {
	            this.prerelease[i]++;
	            i = -2;
	          }
	        }
	        if (i === -1) {
	          // didn't increment anything
	          this.prerelease.push(0);
	        }
	      }
	      if (identifier) {
	        // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
	        // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
	        if (this.prerelease[0] === identifier) {
	          if (isNaN(this.prerelease[1])) {
	            this.prerelease = [identifier, 0];
	          }
	        } else {
	          this.prerelease = [identifier, 0];
	        }
	      }
	      break

	    default:
	      throw new Error('invalid increment argument: ' + release)
	  }
	  this.format();
	  this.raw = this.version;
	  return this
	};

	exports.inc = inc;
	function inc (version, release, loose, identifier) {
	  if (typeof (loose) === 'string') {
	    identifier = loose;
	    loose = undefined;
	  }

	  try {
	    return new SemVer(version, loose).inc(release, identifier).version
	  } catch (er) {
	    return null
	  }
	}

	exports.diff = diff;
	function diff (version1, version2) {
	  if (eq(version1, version2)) {
	    return null
	  } else {
	    var v1 = parse(version1);
	    var v2 = parse(version2);
	    var prefix = '';
	    if (v1.prerelease.length || v2.prerelease.length) {
	      prefix = 'pre';
	      var defaultResult = 'prerelease';
	    }
	    for (var key in v1) {
	      if (key === 'major' || key === 'minor' || key === 'patch') {
	        if (v1[key] !== v2[key]) {
	          return prefix + key
	        }
	      }
	    }
	    return defaultResult // may be undefined
	  }
	}

	exports.compareIdentifiers = compareIdentifiers;

	var numeric = /^[0-9]+$/;
	function compareIdentifiers (a, b) {
	  var anum = numeric.test(a);
	  var bnum = numeric.test(b);

	  if (anum && bnum) {
	    a = +a;
	    b = +b;
	  }

	  return a === b ? 0
	    : (anum && !bnum) ? -1
	    : (bnum && !anum) ? 1
	    : a < b ? -1
	    : 1
	}

	exports.rcompareIdentifiers = rcompareIdentifiers;
	function rcompareIdentifiers (a, b) {
	  return compareIdentifiers(b, a)
	}

	exports.major = major;
	function major (a, loose) {
	  return new SemVer(a, loose).major
	}

	exports.minor = minor;
	function minor (a, loose) {
	  return new SemVer(a, loose).minor
	}

	exports.patch = patch;
	function patch (a, loose) {
	  return new SemVer(a, loose).patch
	}

	exports.compare = compare;
	function compare (a, b, loose) {
	  return new SemVer(a, loose).compare(new SemVer(b, loose))
	}

	exports.compareLoose = compareLoose;
	function compareLoose (a, b) {
	  return compare(a, b, true)
	}

	exports.rcompare = rcompare;
	function rcompare (a, b, loose) {
	  return compare(b, a, loose)
	}

	exports.sort = sort;
	function sort (list, loose) {
	  return list.sort(function (a, b) {
	    return exports.compare(a, b, loose)
	  })
	}

	exports.rsort = rsort;
	function rsort (list, loose) {
	  return list.sort(function (a, b) {
	    return exports.rcompare(a, b, loose)
	  })
	}

	exports.gt = gt;
	function gt (a, b, loose) {
	  return compare(a, b, loose) > 0
	}

	exports.lt = lt;
	function lt (a, b, loose) {
	  return compare(a, b, loose) < 0
	}

	exports.eq = eq;
	function eq (a, b, loose) {
	  return compare(a, b, loose) === 0
	}

	exports.neq = neq;
	function neq (a, b, loose) {
	  return compare(a, b, loose) !== 0
	}

	exports.gte = gte;
	function gte (a, b, loose) {
	  return compare(a, b, loose) >= 0
	}

	exports.lte = lte;
	function lte (a, b, loose) {
	  return compare(a, b, loose) <= 0
	}

	exports.cmp = cmp;
	function cmp (a, op, b, loose) {
	  switch (op) {
	    case '===':
	      if (typeof a === 'object')
	        a = a.version;
	      if (typeof b === 'object')
	        b = b.version;
	      return a === b

	    case '!==':
	      if (typeof a === 'object')
	        a = a.version;
	      if (typeof b === 'object')
	        b = b.version;
	      return a !== b

	    case '':
	    case '=':
	    case '==':
	      return eq(a, b, loose)

	    case '!=':
	      return neq(a, b, loose)

	    case '>':
	      return gt(a, b, loose)

	    case '>=':
	      return gte(a, b, loose)

	    case '<':
	      return lt(a, b, loose)

	    case '<=':
	      return lte(a, b, loose)

	    default:
	      throw new TypeError('Invalid operator: ' + op)
	  }
	}

	exports.Comparator = Comparator;
	function Comparator (comp, options) {
	  if (!options || typeof options !== 'object') {
	    options = {
	      loose: !!options,
	      includePrerelease: false
	    };
	  }

	  if (comp instanceof Comparator) {
	    if (comp.loose === !!options.loose) {
	      return comp
	    } else {
	      comp = comp.value;
	    }
	  }

	  if (!(this instanceof Comparator)) {
	    return new Comparator(comp, options)
	  }

	  debug('comparator', comp, options);
	  this.options = options;
	  this.loose = !!options.loose;
	  this.parse(comp);

	  if (this.semver === ANY) {
	    this.value = '';
	  } else {
	    this.value = this.operator + this.semver.version;
	  }

	  debug('comp', this);
	}

	var ANY = {};
	Comparator.prototype.parse = function (comp) {
	  var r = this.options.loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
	  var m = comp.match(r);

	  if (!m) {
	    throw new TypeError('Invalid comparator: ' + comp)
	  }

	  this.operator = m[1];
	  if (this.operator === '=') {
	    this.operator = '';
	  }

	  // if it literally is just '>' or '' then allow anything.
	  if (!m[2]) {
	    this.semver = ANY;
	  } else {
	    this.semver = new SemVer(m[2], this.options.loose);
	  }
	};

	Comparator.prototype.toString = function () {
	  return this.value
	};

	Comparator.prototype.test = function (version) {
	  debug('Comparator.test', version, this.options.loose);

	  if (this.semver === ANY) {
	    return true
	  }

	  if (typeof version === 'string') {
	    version = new SemVer(version, this.options);
	  }

	  return cmp(version, this.operator, this.semver, this.options)
	};

	Comparator.prototype.intersects = function (comp, options) {
	  if (!(comp instanceof Comparator)) {
	    throw new TypeError('a Comparator is required')
	  }

	  if (!options || typeof options !== 'object') {
	    options = {
	      loose: !!options,
	      includePrerelease: false
	    };
	  }

	  var rangeTmp;

	  if (this.operator === '') {
	    rangeTmp = new Range(comp.value, options);
	    return satisfies(this.value, rangeTmp, options)
	  } else if (comp.operator === '') {
	    rangeTmp = new Range(this.value, options);
	    return satisfies(comp.semver, rangeTmp, options)
	  }

	  var sameDirectionIncreasing =
	    (this.operator === '>=' || this.operator === '>') &&
	    (comp.operator === '>=' || comp.operator === '>');
	  var sameDirectionDecreasing =
	    (this.operator === '<=' || this.operator === '<') &&
	    (comp.operator === '<=' || comp.operator === '<');
	  var sameSemVer = this.semver.version === comp.semver.version;
	  var differentDirectionsInclusive =
	    (this.operator === '>=' || this.operator === '<=') &&
	    (comp.operator === '>=' || comp.operator === '<=');
	  var oppositeDirectionsLessThan =
	    cmp(this.semver, '<', comp.semver, options) &&
	    ((this.operator === '>=' || this.operator === '>') &&
	    (comp.operator === '<=' || comp.operator === '<'));
	  var oppositeDirectionsGreaterThan =
	    cmp(this.semver, '>', comp.semver, options) &&
	    ((this.operator === '<=' || this.operator === '<') &&
	    (comp.operator === '>=' || comp.operator === '>'));

	  return sameDirectionIncreasing || sameDirectionDecreasing ||
	    (sameSemVer && differentDirectionsInclusive) ||
	    oppositeDirectionsLessThan || oppositeDirectionsGreaterThan
	};

	exports.Range = Range;
	function Range (range, options) {
	  if (!options || typeof options !== 'object') {
	    options = {
	      loose: !!options,
	      includePrerelease: false
	    };
	  }

	  if (range instanceof Range) {
	    if (range.loose === !!options.loose &&
	        range.includePrerelease === !!options.includePrerelease) {
	      return range
	    } else {
	      return new Range(range.raw, options)
	    }
	  }

	  if (range instanceof Comparator) {
	    return new Range(range.value, options)
	  }

	  if (!(this instanceof Range)) {
	    return new Range(range, options)
	  }

	  this.options = options;
	  this.loose = !!options.loose;
	  this.includePrerelease = !!options.includePrerelease;

	  // First, split based on boolean or ||
	  this.raw = range;
	  this.set = range.split(/\s*\|\|\s*/).map(function (range) {
	    return this.parseRange(range.trim())
	  }, this).filter(function (c) {
	    // throw out any that are not relevant for whatever reason
	    return c.length
	  });

	  if (!this.set.length) {
	    throw new TypeError('Invalid SemVer Range: ' + range)
	  }

	  this.format();
	}

	Range.prototype.format = function () {
	  this.range = this.set.map(function (comps) {
	    return comps.join(' ').trim()
	  }).join('||').trim();
	  return this.range
	};

	Range.prototype.toString = function () {
	  return this.range
	};

	Range.prototype.parseRange = function (range) {
	  var loose = this.options.loose;
	  range = range.trim();
	  // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`
	  var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE];
	  range = range.replace(hr, hyphenReplace);
	  debug('hyphen replace', range);
	  // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`
	  range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace);
	  debug('comparator trim', range, re[COMPARATORTRIM]);

	  // `~ 1.2.3` => `~1.2.3`
	  range = range.replace(re[TILDETRIM], tildeTrimReplace);

	  // `^ 1.2.3` => `^1.2.3`
	  range = range.replace(re[CARETTRIM], caretTrimReplace);

	  // normalize spaces
	  range = range.split(/\s+/).join(' ');

	  // At this point, the range is completely trimmed and
	  // ready to be split into comparators.

	  var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
	  var set = range.split(' ').map(function (comp) {
	    return parseComparator(comp, this.options)
	  }, this).join(' ').split(/\s+/);
	  if (this.options.loose) {
	    // in loose mode, throw out any that are not valid comparators
	    set = set.filter(function (comp) {
	      return !!comp.match(compRe)
	    });
	  }
	  set = set.map(function (comp) {
	    return new Comparator(comp, this.options)
	  }, this);

	  return set
	};

	Range.prototype.intersects = function (range, options) {
	  if (!(range instanceof Range)) {
	    throw new TypeError('a Range is required')
	  }

	  return this.set.some(function (thisComparators) {
	    return thisComparators.every(function (thisComparator) {
	      return range.set.some(function (rangeComparators) {
	        return rangeComparators.every(function (rangeComparator) {
	          return thisComparator.intersects(rangeComparator, options)
	        })
	      })
	    })
	  })
	};

	// Mostly just for testing and legacy API reasons
	exports.toComparators = toComparators;
	function toComparators (range, options) {
	  return new Range(range, options).set.map(function (comp) {
	    return comp.map(function (c) {
	      return c.value
	    }).join(' ').trim().split(' ')
	  })
	}

	// comprised of xranges, tildes, stars, and gtlt's at this point.
	// already replaced the hyphen ranges
	// turn into a set of JUST comparators.
	function parseComparator (comp, options) {
	  debug('comp', comp, options);
	  comp = replaceCarets(comp, options);
	  debug('caret', comp);
	  comp = replaceTildes(comp, options);
	  debug('tildes', comp);
	  comp = replaceXRanges(comp, options);
	  debug('xrange', comp);
	  comp = replaceStars(comp, options);
	  debug('stars', comp);
	  return comp
	}

	function isX (id) {
	  return !id || id.toLowerCase() === 'x' || id === '*'
	}

	// ~, ~> --> * (any, kinda silly)
	// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0
	// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0
	// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0
	// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0
	// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0
	function replaceTildes (comp, options) {
	  return comp.trim().split(/\s+/).map(function (comp) {
	    return replaceTilde(comp, options)
	  }).join(' ')
	}

	function replaceTilde (comp, options) {
	  var r = options.loose ? re[TILDELOOSE] : re[TILDE];
	  return comp.replace(r, function (_, M, m, p, pr) {
	    debug('tilde', comp, _, M, m, p, pr);
	    var ret;

	    if (isX(M)) {
	      ret = '';
	    } else if (isX(m)) {
	      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
	    } else if (isX(p)) {
	      // ~1.2 == >=1.2.0 <1.3.0
	      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
	    } else if (pr) {
	      debug('replaceTilde pr', pr);
	      ret = '>=' + M + '.' + m + '.' + p + '-' + pr +
	            ' <' + M + '.' + (+m + 1) + '.0';
	    } else {
	      // ~1.2.3 == >=1.2.3 <1.3.0
	      ret = '>=' + M + '.' + m + '.' + p +
	            ' <' + M + '.' + (+m + 1) + '.0';
	    }

	    debug('tilde return', ret);
	    return ret
	  })
	}

	// ^ --> * (any, kinda silly)
	// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0
	// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0
	// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0
	// ^1.2.3 --> >=1.2.3 <2.0.0
	// ^1.2.0 --> >=1.2.0 <2.0.0
	function replaceCarets (comp, options) {
	  return comp.trim().split(/\s+/).map(function (comp) {
	    return replaceCaret(comp, options)
	  }).join(' ')
	}

	function replaceCaret (comp, options) {
	  debug('caret', comp, options);
	  var r = options.loose ? re[CARETLOOSE] : re[CARET];
	  return comp.replace(r, function (_, M, m, p, pr) {
	    debug('caret', comp, _, M, m, p, pr);
	    var ret;

	    if (isX(M)) {
	      ret = '';
	    } else if (isX(m)) {
	      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
	    } else if (isX(p)) {
	      if (M === '0') {
	        ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
	      } else {
	        ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0';
	      }
	    } else if (pr) {
	      debug('replaceCaret pr', pr);
	      if (M === '0') {
	        if (m === '0') {
	          ret = '>=' + M + '.' + m + '.' + p + '-' + pr +
	                ' <' + M + '.' + m + '.' + (+p + 1);
	        } else {
	          ret = '>=' + M + '.' + m + '.' + p + '-' + pr +
	                ' <' + M + '.' + (+m + 1) + '.0';
	        }
	      } else {
	        ret = '>=' + M + '.' + m + '.' + p + '-' + pr +
	              ' <' + (+M + 1) + '.0.0';
	      }
	    } else {
	      debug('no pr');
	      if (M === '0') {
	        if (m === '0') {
	          ret = '>=' + M + '.' + m + '.' + p +
	                ' <' + M + '.' + m + '.' + (+p + 1);
	        } else {
	          ret = '>=' + M + '.' + m + '.' + p +
	                ' <' + M + '.' + (+m + 1) + '.0';
	        }
	      } else {
	        ret = '>=' + M + '.' + m + '.' + p +
	              ' <' + (+M + 1) + '.0.0';
	      }
	    }

	    debug('caret return', ret);
	    return ret
	  })
	}

	function replaceXRanges (comp, options) {
	  debug('replaceXRanges', comp, options);
	  return comp.split(/\s+/).map(function (comp) {
	    return replaceXRange(comp, options)
	  }).join(' ')
	}

	function replaceXRange (comp, options) {
	  comp = comp.trim();
	  var r = options.loose ? re[XRANGELOOSE] : re[XRANGE];
	  return comp.replace(r, function (ret, gtlt, M, m, p, pr) {
	    debug('xRange', comp, ret, gtlt, M, m, p, pr);
	    var xM = isX(M);
	    var xm = xM || isX(m);
	    var xp = xm || isX(p);
	    var anyX = xp;

	    if (gtlt === '=' && anyX) {
	      gtlt = '';
	    }

	    if (xM) {
	      if (gtlt === '>' || gtlt === '<') {
	        // nothing is allowed
	        ret = '<0.0.0';
	      } else {
	        // nothing is forbidden
	        ret = '*';
	      }
	    } else if (gtlt && anyX) {
	      // we know patch is an x, because we have any x at all.
	      // replace X with 0
	      if (xm) {
	        m = 0;
	      }
	      p = 0;

	      if (gtlt === '>') {
	        // >1 => >=2.0.0
	        // >1.2 => >=1.3.0
	        // >1.2.3 => >= 1.2.4
	        gtlt = '>=';
	        if (xm) {
	          M = +M + 1;
	          m = 0;
	          p = 0;
	        } else {
	          m = +m + 1;
	          p = 0;
	        }
	      } else if (gtlt === '<=') {
	        // <=0.7.x is actually <0.8.0, since any 0.7.x should
	        // pass.  Similarly, <=7.x is actually <8.0.0, etc.
	        gtlt = '<';
	        if (xm) {
	          M = +M + 1;
	        } else {
	          m = +m + 1;
	        }
	      }

	      ret = gtlt + M + '.' + m + '.' + p;
	    } else if (xm) {
	      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
	    } else if (xp) {
	      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
	    }

	    debug('xRange return', ret);

	    return ret
	  })
	}

	// Because * is AND-ed with everything else in the comparator,
	// and '' means "any version", just remove the *s entirely.
	function replaceStars (comp, options) {
	  debug('replaceStars', comp, options);
	  // Looseness is ignored here.  star is always as loose as it gets!
	  return comp.trim().replace(re[STAR], '')
	}

	// This function is passed to string.replace(re[HYPHENRANGE])
	// M, m, patch, prerelease, build
	// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
	// 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do
	// 1.2 - 3.4 => >=1.2.0 <3.5.0
	function hyphenReplace ($0,
	  from, fM, fm, fp, fpr, fb,
	  to, tM, tm, tp, tpr, tb) {
	  if (isX(fM)) {
	    from = '';
	  } else if (isX(fm)) {
	    from = '>=' + fM + '.0.0';
	  } else if (isX(fp)) {
	    from = '>=' + fM + '.' + fm + '.0';
	  } else {
	    from = '>=' + from;
	  }

	  if (isX(tM)) {
	    to = '';
	  } else if (isX(tm)) {
	    to = '<' + (+tM + 1) + '.0.0';
	  } else if (isX(tp)) {
	    to = '<' + tM + '.' + (+tm + 1) + '.0';
	  } else if (tpr) {
	    to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr;
	  } else {
	    to = '<=' + to;
	  }

	  return (from + ' ' + to).trim()
	}

	// if ANY of the sets match ALL of its comparators, then pass
	Range.prototype.test = function (version) {
	  if (!version) {
	    return false
	  }

	  if (typeof version === 'string') {
	    version = new SemVer(version, this.options);
	  }

	  for (var i = 0; i < this.set.length; i++) {
	    if (testSet(this.set[i], version, this.options)) {
	      return true
	    }
	  }
	  return false
	};

	function testSet (set, version, options) {
	  for (var i = 0; i < set.length; i++) {
	    if (!set[i].test(version)) {
	      return false
	    }
	  }

	  if (version.prerelease.length && !options.includePrerelease) {
	    // Find the set of versions that are allowed to have prereleases
	    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
	    // That should allow `1.2.3-pr.2` to pass.
	    // However, `1.2.4-alpha.notready` should NOT be allowed,
	    // even though it's within the range set by the comparators.
	    for (i = 0; i < set.length; i++) {
	      debug(set[i].semver);
	      if (set[i].semver === ANY) {
	        continue
	      }

	      if (set[i].semver.prerelease.length > 0) {
	        var allowed = set[i].semver;
	        if (allowed.major === version.major &&
	            allowed.minor === version.minor &&
	            allowed.patch === version.patch) {
	          return true
	        }
	      }
	    }

	    // Version has a -pre, but it's not one of the ones we like.
	    return false
	  }

	  return true
	}

	exports.satisfies = satisfies;
	function satisfies (version, range, options) {
	  try {
	    range = new Range(range, options);
	  } catch (er) {
	    return false
	  }
	  return range.test(version)
	}

	exports.maxSatisfying = maxSatisfying;
	function maxSatisfying (versions, range, options) {
	  var max = null;
	  var maxSV = null;
	  try {
	    var rangeObj = new Range(range, options);
	  } catch (er) {
	    return null
	  }
	  versions.forEach(function (v) {
	    if (rangeObj.test(v)) {
	      // satisfies(v, range, options)
	      if (!max || maxSV.compare(v) === -1) {
	        // compare(max, v, true)
	        max = v;
	        maxSV = new SemVer(max, options);
	      }
	    }
	  });
	  return max
	}

	exports.minSatisfying = minSatisfying;
	function minSatisfying (versions, range, options) {
	  var min = null;
	  var minSV = null;
	  try {
	    var rangeObj = new Range(range, options);
	  } catch (er) {
	    return null
	  }
	  versions.forEach(function (v) {
	    if (rangeObj.test(v)) {
	      // satisfies(v, range, options)
	      if (!min || minSV.compare(v) === 1) {
	        // compare(min, v, true)
	        min = v;
	        minSV = new SemVer(min, options);
	      }
	    }
	  });
	  return min
	}

	exports.minVersion = minVersion;
	function minVersion (range, loose) {
	  range = new Range(range, loose);

	  var minver = new SemVer('0.0.0');
	  if (range.test(minver)) {
	    return minver
	  }

	  minver = new SemVer('0.0.0-0');
	  if (range.test(minver)) {
	    return minver
	  }

	  minver = null;
	  for (var i = 0; i < range.set.length; ++i) {
	    var comparators = range.set[i];

	    comparators.forEach(function (comparator) {
	      // Clone to avoid manipulating the comparator's semver object.
	      var compver = new SemVer(comparator.semver.version);
	      switch (comparator.operator) {
	        case '>':
	          if (compver.prerelease.length === 0) {
	            compver.patch++;
	          } else {
	            compver.prerelease.push(0);
	          }
	          compver.raw = compver.format();
	          /* fallthrough */
	        case '':
	        case '>=':
	          if (!minver || gt(minver, compver)) {
	            minver = compver;
	          }
	          break
	        case '<':
	        case '<=':
	          /* Ignore maximum versions */
	          break
	        /* istanbul ignore next */
	        default:
	          throw new Error('Unexpected operation: ' + comparator.operator)
	      }
	    });
	  }

	  if (minver && range.test(minver)) {
	    return minver
	  }

	  return null
	}

	exports.validRange = validRange;
	function validRange (range, options) {
	  try {
	    // Return '*' instead of '' so that truthiness works.
	    // This will throw if it's invalid anyway
	    return new Range(range, options).range || '*'
	  } catch (er) {
	    return null
	  }
	}

	// Determine if version is less than all the versions possible in the range
	exports.ltr = ltr;
	function ltr (version, range, options) {
	  return outside(version, range, '<', options)
	}

	// Determine if version is greater than all the versions possible in the range.
	exports.gtr = gtr;
	function gtr (version, range, options) {
	  return outside(version, range, '>', options)
	}

	exports.outside = outside;
	function outside (version, range, hilo, options) {
	  version = new SemVer(version, options);
	  range = new Range(range, options);

	  var gtfn, ltefn, ltfn, comp, ecomp;
	  switch (hilo) {
	    case '>':
	      gtfn = gt;
	      ltefn = lte;
	      ltfn = lt;
	      comp = '>';
	      ecomp = '>=';
	      break
	    case '<':
	      gtfn = lt;
	      ltefn = gte;
	      ltfn = gt;
	      comp = '<';
	      ecomp = '<=';
	      break
	    default:
	      throw new TypeError('Must provide a hilo val of "<" or ">"')
	  }

	  // If it satisifes the range it is not outside
	  if (satisfies(version, range, options)) {
	    return false
	  }

	  // From now on, variable terms are as if we're in "gtr" mode.
	  // but note that everything is flipped for the "ltr" function.

	  for (var i = 0; i < range.set.length; ++i) {
	    var comparators = range.set[i];

	    var high = null;
	    var low = null;

	    comparators.forEach(function (comparator) {
	      if (comparator.semver === ANY) {
	        comparator = new Comparator('>=0.0.0');
	      }
	      high = high || comparator;
	      low = low || comparator;
	      if (gtfn(comparator.semver, high.semver, options)) {
	        high = comparator;
	      } else if (ltfn(comparator.semver, low.semver, options)) {
	        low = comparator;
	      }
	    });

	    // If the edge version comparator has a operator then our version
	    // isn't outside it
	    if (high.operator === comp || high.operator === ecomp) {
	      return false
	    }

	    // If the lowest version comparator has an operator and our version
	    // is less than it then it isn't higher than the range
	    if ((!low.operator || low.operator === comp) &&
	        ltefn(version, low.semver)) {
	      return false
	    } else if (low.operator === ecomp && ltfn(version, low.semver)) {
	      return false
	    }
	  }
	  return true
	}

	exports.prerelease = prerelease;
	function prerelease (version, options) {
	  var parsed = parse(version, options);
	  return (parsed && parsed.prerelease.length) ? parsed.prerelease : null
	}

	exports.intersects = intersects;
	function intersects (r1, r2, options) {
	  r1 = new Range(r1, options);
	  r2 = new Range(r2, options);
	  return r1.intersects(r2)
	}

	exports.coerce = coerce;
	function coerce (version) {
	  if (version instanceof SemVer) {
	    return version
	  }

	  if (typeof version !== 'string') {
	    return null
	  }

	  var match = version.match(re[COERCE]);

	  if (match == null) {
	    return null
	  }

	  return parse(match[1] +
	    '.' + (match[2] || '0') +
	    '.' + (match[3] || '0'))
	}
	});

	var spdxLicenseIds = [
		"0BSD",
		"AAL",
		"ADSL",
		"AFL-1.1",
		"AFL-1.2",
		"AFL-2.0",
		"AFL-2.1",
		"AFL-3.0",
		"AGPL-1.0-only",
		"AGPL-1.0-or-later",
		"AGPL-3.0-only",
		"AGPL-3.0-or-later",
		"AMDPLPA",
		"AML",
		"AMPAS",
		"ANTLR-PD",
		"ANTLR-PD-fallback",
		"APAFML",
		"APL-1.0",
		"APSL-1.0",
		"APSL-1.1",
		"APSL-1.2",
		"APSL-2.0",
		"Abstyles",
		"Adobe-2006",
		"Adobe-Glyph",
		"Afmparse",
		"Aladdin",
		"Apache-1.0",
		"Apache-1.1",
		"Apache-2.0",
		"Artistic-1.0",
		"Artistic-1.0-Perl",
		"Artistic-1.0-cl8",
		"Artistic-2.0",
		"BSD-1-Clause",
		"BSD-2-Clause",
		"BSD-2-Clause-Patent",
		"BSD-2-Clause-Views",
		"BSD-3-Clause",
		"BSD-3-Clause-Attribution",
		"BSD-3-Clause-Clear",
		"BSD-3-Clause-LBNL",
		"BSD-3-Clause-No-Nuclear-License",
		"BSD-3-Clause-No-Nuclear-License-2014",
		"BSD-3-Clause-No-Nuclear-Warranty",
		"BSD-3-Clause-Open-MPI",
		"BSD-4-Clause",
		"BSD-4-Clause-UC",
		"BSD-Protection",
		"BSD-Source-Code",
		"BSL-1.0",
		"BUSL-1.1",
		"Bahyph",
		"Barr",
		"Beerware",
		"BitTorrent-1.0",
		"BitTorrent-1.1",
		"BlueOak-1.0.0",
		"Borceux",
		"CAL-1.0",
		"CAL-1.0-Combined-Work-Exception",
		"CATOSL-1.1",
		"CC-BY-1.0",
		"CC-BY-2.0",
		"CC-BY-2.5",
		"CC-BY-3.0",
		"CC-BY-3.0-AT",
		"CC-BY-3.0-US",
		"CC-BY-4.0",
		"CC-BY-NC-1.0",
		"CC-BY-NC-2.0",
		"CC-BY-NC-2.5",
		"CC-BY-NC-3.0",
		"CC-BY-NC-4.0",
		"CC-BY-NC-ND-1.0",
		"CC-BY-NC-ND-2.0",
		"CC-BY-NC-ND-2.5",
		"CC-BY-NC-ND-3.0",
		"CC-BY-NC-ND-3.0-IGO",
		"CC-BY-NC-ND-4.0",
		"CC-BY-NC-SA-1.0",
		"CC-BY-NC-SA-2.0",
		"CC-BY-NC-SA-2.5",
		"CC-BY-NC-SA-3.0",
		"CC-BY-NC-SA-4.0",
		"CC-BY-ND-1.0",
		"CC-BY-ND-2.0",
		"CC-BY-ND-2.5",
		"CC-BY-ND-3.0",
		"CC-BY-ND-4.0",
		"CC-BY-SA-1.0",
		"CC-BY-SA-2.0",
		"CC-BY-SA-2.0-UK",
		"CC-BY-SA-2.5",
		"CC-BY-SA-3.0",
		"CC-BY-SA-3.0-AT",
		"CC-BY-SA-4.0",
		"CC-PDDC",
		"CC0-1.0",
		"CDDL-1.0",
		"CDDL-1.1",
		"CDLA-Permissive-1.0",
		"CDLA-Sharing-1.0",
		"CECILL-1.0",
		"CECILL-1.1",
		"CECILL-2.0",
		"CECILL-2.1",
		"CECILL-B",
		"CECILL-C",
		"CERN-OHL-1.1",
		"CERN-OHL-1.2",
		"CERN-OHL-P-2.0",
		"CERN-OHL-S-2.0",
		"CERN-OHL-W-2.0",
		"CNRI-Jython",
		"CNRI-Python",
		"CNRI-Python-GPL-Compatible",
		"CPAL-1.0",
		"CPL-1.0",
		"CPOL-1.02",
		"CUA-OPL-1.0",
		"Caldera",
		"ClArtistic",
		"Condor-1.1",
		"Crossword",
		"CrystalStacker",
		"Cube",
		"D-FSL-1.0",
		"DOC",
		"DSDP",
		"Dotseqn",
		"ECL-1.0",
		"ECL-2.0",
		"EFL-1.0",
		"EFL-2.0",
		"EPICS",
		"EPL-1.0",
		"EPL-2.0",
		"EUDatagrid",
		"EUPL-1.0",
		"EUPL-1.1",
		"EUPL-1.2",
		"Entessa",
		"ErlPL-1.1",
		"Eurosym",
		"FSFAP",
		"FSFUL",
		"FSFULLR",
		"FTL",
		"Fair",
		"Frameworx-1.0",
		"FreeImage",
		"GFDL-1.1-invariants-only",
		"GFDL-1.1-invariants-or-later",
		"GFDL-1.1-no-invariants-only",
		"GFDL-1.1-no-invariants-or-later",
		"GFDL-1.1-only",
		"GFDL-1.1-or-later",
		"GFDL-1.2-invariants-only",
		"GFDL-1.2-invariants-or-later",
		"GFDL-1.2-no-invariants-only",
		"GFDL-1.2-no-invariants-or-later",
		"GFDL-1.2-only",
		"GFDL-1.2-or-later",
		"GFDL-1.3-invariants-only",
		"GFDL-1.3-invariants-or-later",
		"GFDL-1.3-no-invariants-only",
		"GFDL-1.3-no-invariants-or-later",
		"GFDL-1.3-only",
		"GFDL-1.3-or-later",
		"GL2PS",
		"GLWTPL",
		"GPL-1.0-only",
		"GPL-1.0-or-later",
		"GPL-2.0-only",
		"GPL-2.0-or-later",
		"GPL-3.0-only",
		"GPL-3.0-or-later",
		"Giftware",
		"Glide",
		"Glulxe",
		"HPND",
		"HPND-sell-variant",
		"HTMLTIDY",
		"HaskellReport",
		"Hippocratic-2.1",
		"IBM-pibs",
		"ICU",
		"IJG",
		"IPA",
		"IPL-1.0",
		"ISC",
		"ImageMagick",
		"Imlib2",
		"Info-ZIP",
		"Intel",
		"Intel-ACPI",
		"Interbase-1.0",
		"JPNIC",
		"JSON",
		"JasPer-2.0",
		"LAL-1.2",
		"LAL-1.3",
		"LGPL-2.0-only",
		"LGPL-2.0-or-later",
		"LGPL-2.1-only",
		"LGPL-2.1-or-later",
		"LGPL-3.0-only",
		"LGPL-3.0-or-later",
		"LGPLLR",
		"LPL-1.0",
		"LPL-1.02",
		"LPPL-1.0",
		"LPPL-1.1",
		"LPPL-1.2",
		"LPPL-1.3a",
		"LPPL-1.3c",
		"Latex2e",
		"Leptonica",
		"LiLiQ-P-1.1",
		"LiLiQ-R-1.1",
		"LiLiQ-Rplus-1.1",
		"Libpng",
		"Linux-OpenIB",
		"MIT",
		"MIT-0",
		"MIT-CMU",
		"MIT-advertising",
		"MIT-enna",
		"MIT-feh",
		"MIT-open-group",
		"MITNFA",
		"MPL-1.0",
		"MPL-1.1",
		"MPL-2.0",
		"MPL-2.0-no-copyleft-exception",
		"MS-PL",
		"MS-RL",
		"MTLL",
		"MakeIndex",
		"MirOS",
		"Motosoto",
		"MulanPSL-1.0",
		"MulanPSL-2.0",
		"Multics",
		"Mup",
		"NASA-1.3",
		"NBPL-1.0",
		"NCGL-UK-2.0",
		"NCSA",
		"NGPL",
		"NIST-PD",
		"NIST-PD-fallback",
		"NLOD-1.0",
		"NLPL",
		"NOSL",
		"NPL-1.0",
		"NPL-1.1",
		"NPOSL-3.0",
		"NRL",
		"NTP",
		"NTP-0",
		"Naumen",
		"Net-SNMP",
		"NetCDF",
		"Newsletr",
		"Nokia",
		"Noweb",
		"O-UDA-1.0",
		"OCCT-PL",
		"OCLC-2.0",
		"ODC-By-1.0",
		"ODbL-1.0",
		"OFL-1.0",
		"OFL-1.0-RFN",
		"OFL-1.0-no-RFN",
		"OFL-1.1",
		"OFL-1.1-RFN",
		"OFL-1.1-no-RFN",
		"OGC-1.0",
		"OGL-Canada-2.0",
		"OGL-UK-1.0",
		"OGL-UK-2.0",
		"OGL-UK-3.0",
		"OGTSL",
		"OLDAP-1.1",
		"OLDAP-1.2",
		"OLDAP-1.3",
		"OLDAP-1.4",
		"OLDAP-2.0",
		"OLDAP-2.0.1",
		"OLDAP-2.1",
		"OLDAP-2.2",
		"OLDAP-2.2.1",
		"OLDAP-2.2.2",
		"OLDAP-2.3",
		"OLDAP-2.4",
		"OLDAP-2.5",
		"OLDAP-2.6",
		"OLDAP-2.7",
		"OLDAP-2.8",
		"OML",
		"OPL-1.0",
		"OSET-PL-2.1",
		"OSL-1.0",
		"OSL-1.1",
		"OSL-2.0",
		"OSL-2.1",
		"OSL-3.0",
		"OpenSSL",
		"PDDL-1.0",
		"PHP-3.0",
		"PHP-3.01",
		"PSF-2.0",
		"Parity-6.0.0",
		"Parity-7.0.0",
		"Plexus",
		"PolyForm-Noncommercial-1.0.0",
		"PolyForm-Small-Business-1.0.0",
		"PostgreSQL",
		"Python-2.0",
		"QPL-1.0",
		"Qhull",
		"RHeCos-1.1",
		"RPL-1.1",
		"RPL-1.5",
		"RPSL-1.0",
		"RSA-MD",
		"RSCPL",
		"Rdisc",
		"Ruby",
		"SAX-PD",
		"SCEA",
		"SGI-B-1.0",
		"SGI-B-1.1",
		"SGI-B-2.0",
		"SHL-0.5",
		"SHL-0.51",
		"SISSL",
		"SISSL-1.2",
		"SMLNJ",
		"SMPPL",
		"SNIA",
		"SPL-1.0",
		"SSH-OpenSSH",
		"SSH-short",
		"SSPL-1.0",
		"SWL",
		"Saxpath",
		"Sendmail",
		"Sendmail-8.23",
		"SimPL-2.0",
		"Sleepycat",
		"Spencer-86",
		"Spencer-94",
		"Spencer-99",
		"SugarCRM-1.1.3",
		"TAPR-OHL-1.0",
		"TCL",
		"TCP-wrappers",
		"TMate",
		"TORQUE-1.1",
		"TOSL",
		"TU-Berlin-1.0",
		"TU-Berlin-2.0",
		"UCL-1.0",
		"UPL-1.0",
		"Unicode-DFS-2015",
		"Unicode-DFS-2016",
		"Unicode-TOU",
		"Unlicense",
		"VOSTROM",
		"VSL-1.0",
		"Vim",
		"W3C",
		"W3C-19980720",
		"W3C-20150513",
		"WTFPL",
		"Watcom-1.0",
		"Wsuipa",
		"X11",
		"XFree86-1.1",
		"XSkat",
		"Xerox",
		"Xnet",
		"YPL-1.0",
		"YPL-1.1",
		"ZPL-1.1",
		"ZPL-2.0",
		"ZPL-2.1",
		"Zed",
		"Zend-2.0",
		"Zimbra-1.3",
		"Zimbra-1.4",
		"Zlib",
		"blessing",
		"bzip2-1.0.5",
		"bzip2-1.0.6",
		"copyleft-next-0.3.0",
		"copyleft-next-0.3.1",
		"curl",
		"diffmark",
		"dvipdfm",
		"eGenix",
		"etalab-2.0",
		"gSOAP-1.3b",
		"gnuplot",
		"iMatix",
		"libpng-2.0",
		"libselinux-1.0",
		"libtiff",
		"mpich2",
		"psfrag",
		"psutils",
		"xinetd",
		"xpp",
		"zlib-acknowledgement"
	];

	var require$$1 = [
		"AGPL-1.0",
		"AGPL-3.0",
		"BSD-2-Clause-FreeBSD",
		"BSD-2-Clause-NetBSD",
		"GFDL-1.1",
		"GFDL-1.2",
		"GFDL-1.3",
		"GPL-1.0",
		"GPL-2.0",
		"GPL-2.0-with-GCC-exception",
		"GPL-2.0-with-autoconf-exception",
		"GPL-2.0-with-bison-exception",
		"GPL-2.0-with-classpath-exception",
		"GPL-2.0-with-font-exception",
		"GPL-3.0",
		"GPL-3.0-with-GCC-exception",
		"GPL-3.0-with-autoconf-exception",
		"LGPL-2.0",
		"LGPL-2.1",
		"LGPL-3.0",
		"Nunit",
		"StandardML-NJ",
		"eCos-2.0",
		"wxWindows"
	];

	var exceptions = [
		"389-exception",
		"Autoconf-exception-2.0",
		"Autoconf-exception-3.0",
		"Bison-exception-2.2",
		"Bootloader-exception",
		"Classpath-exception-2.0",
		"CLISP-exception-2.0",
		"DigiRule-FOSS-exception",
		"eCos-exception-2.0",
		"Fawkes-Runtime-exception",
		"FLTK-exception",
		"Font-exception-2.0",
		"freertos-exception-2.0",
		"GCC-exception-2.0",
		"GCC-exception-3.1",
		"gnu-javamail-exception",
		"GPL-3.0-linking-exception",
		"GPL-3.0-linking-source-exception",
		"GPL-CC-1.0",
		"i2p-gpl-java-exception",
		"Libtool-exception",
		"Linux-syscall-note",
		"LLVM-exception",
		"LZMA-exception",
		"mif-exception",
		"Nokia-Qt-exception-1.1",
		"OCaml-LGPL-linking-exception",
		"OCCT-exception-1.0",
		"OpenJDK-assembly-exception-1.0",
		"openvpn-openssl-exception",
		"PS-or-PDF-font-exception-20170817",
		"Qt-GPL-exception-1.0",
		"Qt-LGPL-exception-1.1",
		"Qwt-exception-1.0",
		"Swift-exception",
		"u-boot-exception-2.0",
		"Universal-FOSS-exception-1.0",
		"WxWindows-exception-3.1"
	];

	var licenses = []
	  .concat(spdxLicenseIds)
	  .concat(require$$1);


	var scan = function (source) {
	  var index = 0;

	  function hasMore () {
	    return index < source.length
	  }

	  // `value` can be a regexp or a string.
	  // If it is recognized, the matching source string is returned and
	  // the index is incremented. Otherwise `undefined` is returned.
	  function read (value) {
	    if (value instanceof RegExp) {
	      var chars = source.slice(index);
	      var match = chars.match(value);
	      if (match) {
	        index += match[0].length;
	        return match[0]
	      }
	    } else {
	      if (source.indexOf(value, index) === index) {
	        index += value.length;
	        return value
	      }
	    }
	  }

	  function skipWhitespace () {
	    read(/[ ]*/);
	  }

	  function operator () {
	    var string;
	    var possibilities = ['WITH', 'AND', 'OR', '(', ')', ':', '+'];
	    for (var i = 0; i < possibilities.length; i++) {
	      string = read(possibilities[i]);
	      if (string) {
	        break
	      }
	    }

	    if (string === '+' && index > 1 && source[index - 2] === ' ') {
	      throw new Error('Space before `+`')
	    }

	    return string && {
	      type: 'OPERATOR',
	      string: string
	    }
	  }

	  function idstring () {
	    return read(/[A-Za-z0-9-.]+/)
	  }

	  function expectIdstring () {
	    var string = idstring();
	    if (!string) {
	      throw new Error('Expected idstring at offset ' + index)
	    }
	    return string
	  }

	  function documentRef () {
	    if (read('DocumentRef-')) {
	      var string = expectIdstring();
	      return { type: 'DOCUMENTREF', string: string }
	    }
	  }

	  function licenseRef () {
	    if (read('LicenseRef-')) {
	      var string = expectIdstring();
	      return { type: 'LICENSEREF', string: string }
	    }
	  }

	  function identifier () {
	    var begin = index;
	    var string = idstring();

	    if (licenses.indexOf(string) !== -1) {
	      return {
	        type: 'LICENSE',
	        string: string
	      }
	    } else if (exceptions.indexOf(string) !== -1) {
	      return {
	        type: 'EXCEPTION',
	        string: string
	      }
	    }

	    index = begin;
	  }

	  // Tries to read the next token. Returns `undefined` if no token is
	  // recognized.
	  function parseToken () {
	    // Ordering matters
	    return (
	      operator() ||
	      documentRef() ||
	      licenseRef() ||
	      identifier()
	    )
	  }

	  var tokens = [];
	  while (hasMore()) {
	    skipWhitespace();
	    if (!hasMore()) {
	      break
	    }

	    var token = parseToken();
	    if (!token) {
	      throw new Error('Unexpected `' + source[index] +
	                      '` at offset ' + index)
	    }

	    tokens.push(token);
	  }
	  return tokens
	};

	// The ABNF grammar in the spec is totally ambiguous.
	//
	// This parser follows the operator precedence defined in the
	// `Order of Precedence and Parentheses` section.

	var parse$5 = function (tokens) {
	  var index = 0;

	  function hasMore () {
	    return index < tokens.length
	  }

	  function token () {
	    return hasMore() ? tokens[index] : null
	  }

	  function next () {
	    if (!hasMore()) {
	      throw new Error()
	    }
	    index++;
	  }

	  function parseOperator (operator) {
	    var t = token();
	    if (t && t.type === 'OPERATOR' && operator === t.string) {
	      next();
	      return t.string
	    }
	  }

	  function parseWith () {
	    if (parseOperator('WITH')) {
	      var t = token();
	      if (t && t.type === 'EXCEPTION') {
	        next();
	        return t.string
	      }
	      throw new Error('Expected exception after `WITH`')
	    }
	  }

	  function parseLicenseRef () {
	    // TODO: Actually, everything is concatenated into one string
	    // for backward-compatibility but it could be better to return
	    // a nice structure.
	    var begin = index;
	    var string = '';
	    var t = token();
	    if (t.type === 'DOCUMENTREF') {
	      next();
	      string += 'DocumentRef-' + t.string + ':';
	      if (!parseOperator(':')) {
	        throw new Error('Expected `:` after `DocumentRef-...`')
	      }
	    }
	    t = token();
	    if (t.type === 'LICENSEREF') {
	      next();
	      string += 'LicenseRef-' + t.string;
	      return { license: string }
	    }
	    index = begin;
	  }

	  function parseLicense () {
	    var t = token();
	    if (t && t.type === 'LICENSE') {
	      next();
	      var node = { license: t.string };
	      if (parseOperator('+')) {
	        node.plus = true;
	      }
	      var exception = parseWith();
	      if (exception) {
	        node.exception = exception;
	      }
	      return node
	    }
	  }

	  function parseParenthesizedExpression () {
	    var left = parseOperator('(');
	    if (!left) {
	      return
	    }

	    var expr = parseExpression();

	    if (!parseOperator(')')) {
	      throw new Error('Expected `)`')
	    }

	    return expr
	  }

	  function parseAtom () {
	    return (
	      parseParenthesizedExpression() ||
	      parseLicenseRef() ||
	      parseLicense()
	    )
	  }

	  function makeBinaryOpParser (operator, nextParser) {
	    return function parseBinaryOp () {
	      var left = nextParser();
	      if (!left) {
	        return
	      }

	      if (!parseOperator(operator)) {
	        return left
	      }

	      var right = parseBinaryOp();
	      if (!right) {
	        throw new Error('Expected expression')
	      }
	      return {
	        left: left,
	        conjunction: operator.toLowerCase(),
	        right: right
	      }
	    }
	  }

	  var parseAnd = makeBinaryOpParser('AND', parseAtom);
	  var parseExpression = makeBinaryOpParser('OR', parseAnd);

	  var node = parseExpression();
	  if (!node || hasMore()) {
	    throw new Error('Syntax error')
	  }
	  return node
	};

	var spdxExpressionParse = function (source) {
	  return parse$5(scan(source))
	};

	/*
	Copyright spdx-correct.js contributors

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	   http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	*/

	function valid (string) {
	  try {
	    spdxExpressionParse(string);
	    return true
	  } catch (error) {
	    return false
	  }
	}

	// Common transpositions of license identifier acronyms
	var transpositions = [
	  ['APGL', 'AGPL'],
	  ['Gpl', 'GPL'],
	  ['GLP', 'GPL'],
	  ['APL', 'Apache'],
	  ['ISD', 'ISC'],
	  ['GLP', 'GPL'],
	  ['IST', 'ISC'],
	  ['Claude', 'Clause'],
	  [' or later', '+'],
	  [' International', ''],
	  ['GNU', 'GPL'],
	  ['GUN', 'GPL'],
	  ['+', ''],
	  ['GNU GPL', 'GPL'],
	  ['GNU/GPL', 'GPL'],
	  ['GNU GLP', 'GPL'],
	  ['GNU General Public License', 'GPL'],
	  ['Gnu public license', 'GPL'],
	  ['GNU Public License', 'GPL'],
	  ['GNU GENERAL PUBLIC LICENSE', 'GPL'],
	  ['MTI', 'MIT'],
	  ['Mozilla Public License', 'MPL'],
	  ['Universal Permissive License', 'UPL'],
	  ['WTH', 'WTF'],
	  ['-License', '']
	];

	var TRANSPOSED = 0;
	var CORRECT = 1;

	// Simple corrections to nearly valid identifiers.
	var transforms$1 = [
	  // e.g. 'mit'
	  function (argument) {
	    return argument.toUpperCase()
	  },
	  // e.g. 'MIT '
	  function (argument) {
	    return argument.trim()
	  },
	  // e.g. 'M.I.T.'
	  function (argument) {
	    return argument.replace(/\./g, '')
	  },
	  // e.g. 'Apache- 2.0'
	  function (argument) {
	    return argument.replace(/\s+/g, '')
	  },
	  // e.g. 'CC BY 4.0''
	  function (argument) {
	    return argument.replace(/\s+/g, '-')
	  },
	  // e.g. 'LGPLv2.1'
	  function (argument) {
	    return argument.replace('v', '-')
	  },
	  // e.g. 'Apache 2.0'
	  function (argument) {
	    return argument.replace(/,?\s*(\d)/, '-$1')
	  },
	  // e.g. 'GPL 2'
	  function (argument) {
	    return argument.replace(/,?\s*(\d)/, '-$1.0')
	  },
	  // e.g. 'Apache Version 2.0'
	  function (argument) {
	    return argument
	      .replace(/,?\s*(V\.|v\.|V|v|Version|version)\s*(\d)/, '-$2')
	  },
	  // e.g. 'Apache Version 2'
	  function (argument) {
	    return argument
	      .replace(/,?\s*(V\.|v\.|V|v|Version|version)\s*(\d)/, '-$2.0')
	  },
	  // e.g. 'ZLIB'
	  function (argument) {
	    return argument[0].toUpperCase() + argument.slice(1)
	  },
	  // e.g. 'MPL/2.0'
	  function (argument) {
	    return argument.replace('/', '-')
	  },
	  // e.g. 'Apache 2'
	  function (argument) {
	    return argument
	      .replace(/\s*V\s*(\d)/, '-$1')
	      .replace(/(\d)$/, '$1.0')
	  },
	  // e.g. 'GPL-2.0', 'GPL-3.0'
	  function (argument) {
	    if (argument.indexOf('3.0') !== -1) {
	      return argument + '-or-later'
	    } else {
	      return argument + '-only'
	    }
	  },
	  // e.g. 'GPL-2.0-'
	  function (argument) {
	    return argument + 'only'
	  },
	  // e.g. 'GPL2'
	  function (argument) {
	    return argument.replace(/(\d)$/, '-$1.0')
	  },
	  // e.g. 'BSD 3'
	  function (argument) {
	    return argument.replace(/(-| )?(\d)$/, '-$2-Clause')
	  },
	  // e.g. 'BSD clause 3'
	  function (argument) {
	    return argument.replace(/(-| )clause(-| )(\d)/, '-$3-Clause')
	  },
	  // e.g. 'New BSD license'
	  function (argument) {
	    return argument.replace(/\b(Modified|New|Revised)(-| )?BSD((-| )License)?/i, 'BSD-3-Clause')
	  },
	  // e.g. 'Simplified BSD license'
	  function (argument) {
	    return argument.replace(/\bSimplified(-| )?BSD((-| )License)?/i, 'BSD-2-Clause')
	  },
	  // e.g. 'Free BSD license'
	  function (argument) {
	    return argument.replace(/\b(Free|Net)(-| )?BSD((-| )License)?/i, 'BSD-2-Clause-$1BSD')
	  },
	  // e.g. 'Clear BSD license'
	  function (argument) {
	    return argument.replace(/\bClear(-| )?BSD((-| )License)?/i, 'BSD-3-Clause-Clear')
	  },
	  // e.g. 'Old BSD License'
	  function (argument) {
	    return argument.replace(/\b(Old|Original)(-| )?BSD((-| )License)?/i, 'BSD-4-Clause')
	  },
	  // e.g. 'BY-NC-4.0'
	  function (argument) {
	    return 'CC-' + argument
	  },
	  // e.g. 'BY-NC'
	  function (argument) {
	    return 'CC-' + argument + '-4.0'
	  },
	  // e.g. 'Attribution-NonCommercial'
	  function (argument) {
	    return argument
	      .replace('Attribution', 'BY')
	      .replace('NonCommercial', 'NC')
	      .replace('NoDerivatives', 'ND')
	      .replace(/ (\d)/, '-$1')
	      .replace(/ ?International/, '')
	  },
	  // e.g. 'Attribution-NonCommercial'
	  function (argument) {
	    return 'CC-' +
	      argument
	        .replace('Attribution', 'BY')
	        .replace('NonCommercial', 'NC')
	        .replace('NoDerivatives', 'ND')
	        .replace(/ (\d)/, '-$1')
	        .replace(/ ?International/, '') +
	      '-4.0'
	  }
	];

	var licensesWithVersions = spdxLicenseIds
	  .map(function (id) {
	    var match = /^(.*)-\d+\.\d+$/.exec(id);
	    return match
	      ? [match[0], match[1]]
	      : [id, null]
	  })
	  .reduce(function (objectMap, item) {
	    var key = item[1];
	    objectMap[key] = objectMap[key] || [];
	    objectMap[key].push(item[0]);
	    return objectMap
	  }, {});

	var licensesWithOneVersion = Object.keys(licensesWithVersions)
	  .map(function makeEntries (key) {
	    return [key, licensesWithVersions[key]]
	  })
	  .filter(function identifySoleVersions (item) {
	    return (
	      // Licenses has just one valid version suffix.
	      item[1].length === 1 &&
	      item[0] !== null &&
	      // APL will be considered Apache, rather than APL-1.0
	      item[0] !== 'APL'
	    )
	  })
	  .map(function createLastResorts (item) {
	    return [item[0], item[1][0]]
	  });

	licensesWithVersions = undefined;

	// If all else fails, guess that strings containing certain substrings
	// meant to identify certain licenses.
	var lastResorts = [
	  ['UNLI', 'Unlicense'],
	  ['WTF', 'WTFPL'],
	  ['2 CLAUSE', 'BSD-2-Clause'],
	  ['2-CLAUSE', 'BSD-2-Clause'],
	  ['3 CLAUSE', 'BSD-3-Clause'],
	  ['3-CLAUSE', 'BSD-3-Clause'],
	  ['AFFERO', 'AGPL-3.0-or-later'],
	  ['AGPL', 'AGPL-3.0-or-later'],
	  ['APACHE', 'Apache-2.0'],
	  ['ARTISTIC', 'Artistic-2.0'],
	  ['Affero', 'AGPL-3.0-or-later'],
	  ['BEER', 'Beerware'],
	  ['BOOST', 'BSL-1.0'],
	  ['BSD', 'BSD-2-Clause'],
	  ['CDDL', 'CDDL-1.1'],
	  ['ECLIPSE', 'EPL-1.0'],
	  ['FUCK', 'WTFPL'],
	  ['GNU', 'GPL-3.0-or-later'],
	  ['LGPL', 'LGPL-3.0-or-later'],
	  ['GPLV1', 'GPL-1.0-only'],
	  ['GPL-1', 'GPL-1.0-only'],
	  ['GPLV2', 'GPL-2.0-only'],
	  ['GPL-2', 'GPL-2.0-only'],
	  ['GPL', 'GPL-3.0-or-later'],
	  ['MIT +NO-FALSE-ATTRIBS', 'MITNFA'],
	  ['MIT', 'MIT'],
	  ['MPL', 'MPL-2.0'],
	  ['X11', 'X11'],
	  ['ZLIB', 'Zlib']
	].concat(licensesWithOneVersion);

	var SUBSTRING = 0;
	var IDENTIFIER = 1;

	var validTransformation = function (identifier) {
	  for (var i = 0; i < transforms$1.length; i++) {
	    var transformed = transforms$1[i](identifier).trim();
	    if (transformed !== identifier && valid(transformed)) {
	      return transformed
	    }
	  }
	  return null
	};

	var validLastResort = function (identifier) {
	  var upperCased = identifier.toUpperCase();
	  for (var i = 0; i < lastResorts.length; i++) {
	    var lastResort = lastResorts[i];
	    if (upperCased.indexOf(lastResort[SUBSTRING]) > -1) {
	      return lastResort[IDENTIFIER]
	    }
	  }
	  return null
	};

	var anyCorrection = function (identifier, check) {
	  for (var i = 0; i < transpositions.length; i++) {
	    var transposition = transpositions[i];
	    var transposed = transposition[TRANSPOSED];
	    if (identifier.indexOf(transposed) > -1) {
	      var corrected = identifier.replace(
	        transposed,
	        transposition[CORRECT]
	      );
	      var checked = check(corrected);
	      if (checked !== null) {
	        return checked
	      }
	    }
	  }
	  return null
	};

	var spdxCorrect = function (identifier, options) {
	  options = options || {};
	  var upgrade = options.upgrade === undefined ? true : !!options.upgrade;
	  function postprocess (value) {
	    return upgrade ? upgradeGPLs(value) : value
	  }
	  var validArugment = (
	    typeof identifier === 'string' &&
	    identifier.trim().length !== 0
	  );
	  if (!validArugment) {
	    throw Error('Invalid argument. Expected non-empty string.')
	  }
	  identifier = identifier.trim();
	  if (valid(identifier)) {
	    return postprocess(identifier)
	  }
	  var noPlus = identifier.replace(/\+$/, '').trim();
	  if (valid(noPlus)) {
	    return postprocess(noPlus)
	  }
	  var transformed = validTransformation(identifier);
	  if (transformed !== null) {
	    return postprocess(transformed)
	  }
	  transformed = anyCorrection(identifier, function (argument) {
	    if (valid(argument)) {
	      return argument
	    }
	    return validTransformation(argument)
	  });
	  if (transformed !== null) {
	    return postprocess(transformed)
	  }
	  transformed = validLastResort(identifier);
	  if (transformed !== null) {
	    return postprocess(transformed)
	  }
	  transformed = anyCorrection(identifier, validLastResort);
	  if (transformed !== null) {
	    return postprocess(transformed)
	  }
	  return null
	};

	function upgradeGPLs (value) {
	  if ([
	    'GPL-1.0', 'LGPL-1.0', 'AGPL-1.0',
	    'GPL-2.0', 'LGPL-2.0', 'AGPL-2.0',
	    'LGPL-2.1'
	  ].indexOf(value) !== -1) {
	    return value + '-only'
	  } else if ([
	    'GPL-1.0+', 'GPL-2.0+', 'GPL-3.0+',
	    'LGPL-2.0+', 'LGPL-2.1+', 'LGPL-3.0+',
	    'AGPL-1.0+', 'AGPL-3.0+'
	  ].indexOf(value) !== -1) {
	    return value.replace(/\+$/, '-or-later')
	  } else if (['GPL-3.0', 'LGPL-3.0', 'AGPL-3.0'].indexOf(value) !== -1) {
	    return value + '-or-later'
	  } else {
	    return value
	  }
	}

	var genericWarning = (
	  'license should be ' +
	  'a valid SPDX license expression (without "LicenseRef"), ' +
	  '"UNLICENSED", or ' +
	  '"SEE LICENSE IN <filename>"'
	);

	var fileReferenceRE = /^SEE LICEN[CS]E IN (.+)$/;

	function startsWith$1(prefix, string) {
	  return string.slice(0, prefix.length) === prefix;
	}

	function usesLicenseRef(ast) {
	  if (ast.hasOwnProperty('license')) {
	    var license = ast.license;
	    return (
	      startsWith$1('LicenseRef', license) ||
	      startsWith$1('DocumentRef', license)
	    );
	  } else {
	    return (
	      usesLicenseRef(ast.left) ||
	      usesLicenseRef(ast.right)
	    );
	  }
	}

	var validateNpmPackageLicense = function(argument) {
	  var ast;

	  try {
	    ast = spdxExpressionParse(argument);
	  } catch (e) {
	    var match;
	    if (
	      argument === 'UNLICENSED' ||
	      argument === 'UNLICENCED'
	    ) {
	      return {
	        validForOldPackages: true,
	        validForNewPackages: true,
	        unlicensed: true
	      };
	    } else if (match = fileReferenceRE.exec(argument)) {
	      return {
	        validForOldPackages: true,
	        validForNewPackages: true,
	        inFile: match[1]
	      };
	    } else {
	      var result = {
	        validForOldPackages: false,
	        validForNewPackages: false,
	        warnings: [genericWarning]
	      };
	      if (argument.trim().length !== 0) {
	        var corrected = spdxCorrect(argument);
	        if (corrected) {
	          result.warnings.push(
	            'license is similar to the valid expression "' + corrected + '"'
	          );
	        }
	      }
	      return result;
	    }
	  }

	  if (usesLicenseRef(ast)) {
	    return {
	      validForNewPackages: false,
	      validForOldPackages: false,
	      spdx: true,
	      warnings: [genericWarning]
	    };
	  } else {
	    return {
	      validForNewPackages: true,
	      validForOldPackages: true,
	      spdx: true
	    };
	  }
	};

	var gitHostInfo = createCommonjsModule(function (module) {

	var gitHosts = module.exports = {
	  github: {
	    // First two are insecure and generally shouldn't be used any more, but
	    // they are still supported.
	    'protocols': [ 'git', 'http', 'git+ssh', 'git+https', 'ssh', 'https' ],
	    'domain': 'github.com',
	    'treepath': 'tree',
	    'filetemplate': 'https://{auth@}raw.githubusercontent.com/{user}/{project}/{committish}/{path}',
	    'bugstemplate': 'https://{domain}/{user}/{project}/issues',
	    'gittemplate': 'git://{auth@}{domain}/{user}/{project}.git{#committish}',
	    'tarballtemplate': 'https://codeload.{domain}/{user}/{project}/tar.gz/{committish}'
	  },
	  bitbucket: {
	    'protocols': [ 'git+ssh', 'git+https', 'ssh', 'https' ],
	    'domain': 'bitbucket.org',
	    'treepath': 'src',
	    'tarballtemplate': 'https://{domain}/{user}/{project}/get/{committish}.tar.gz'
	  },
	  gitlab: {
	    'protocols': [ 'git+ssh', 'git+https', 'ssh', 'https' ],
	    'domain': 'gitlab.com',
	    'treepath': 'tree',
	    'bugstemplate': 'https://{domain}/{user}/{project}/issues',
	    'httpstemplate': 'git+https://{auth@}{domain}/{user}/{projectPath}.git{#committish}',
	    'tarballtemplate': 'https://{domain}/{user}/{project}/repository/archive.tar.gz?ref={committish}',
	    'pathmatch': /^[/]([^/]+)[/]((?!.*(\/-\/|\/repository\/archive\.tar\.gz\?=.*|\/repository\/[^/]+\/archive.tar.gz$)).*?)(?:[.]git|[/])?$/
	  },
	  gist: {
	    'protocols': [ 'git', 'git+ssh', 'git+https', 'ssh', 'https' ],
	    'domain': 'gist.github.com',
	    'pathmatch': /^[/](?:([^/]+)[/])?([a-z0-9]{32,})(?:[.]git)?$/,
	    'filetemplate': 'https://gist.githubusercontent.com/{user}/{project}/raw{/committish}/{path}',
	    'bugstemplate': 'https://{domain}/{project}',
	    'gittemplate': 'git://{domain}/{project}.git{#committish}',
	    'sshtemplate': 'git@{domain}:/{project}.git{#committish}',
	    'sshurltemplate': 'git+ssh://git@{domain}/{project}.git{#committish}',
	    'browsetemplate': 'https://{domain}/{project}{/committish}',
	    'browsefiletemplate': 'https://{domain}/{project}{/committish}{#path}',
	    'docstemplate': 'https://{domain}/{project}{/committish}',
	    'httpstemplate': 'git+https://{domain}/{project}.git{#committish}',
	    'shortcuttemplate': '{type}:{project}{#committish}',
	    'pathtemplate': '{project}{#committish}',
	    'tarballtemplate': 'https://codeload.github.com/gist/{project}/tar.gz/{committish}',
	    'hashformat': function (fragment) {
	      return 'file-' + formatHashFragment(fragment)
	    }
	  }
	};

	var gitHostDefaults = {
	  'sshtemplate': 'git@{domain}:{user}/{project}.git{#committish}',
	  'sshurltemplate': 'git+ssh://git@{domain}/{user}/{project}.git{#committish}',
	  'browsetemplate': 'https://{domain}/{user}/{project}{/tree/committish}',
	  'browsefiletemplate': 'https://{domain}/{user}/{project}/{treepath}/{committish}/{path}{#fragment}',
	  'docstemplate': 'https://{domain}/{user}/{project}{/tree/committish}#readme',
	  'httpstemplate': 'git+https://{auth@}{domain}/{user}/{project}.git{#committish}',
	  'filetemplate': 'https://{domain}/{user}/{project}/raw/{committish}/{path}',
	  'shortcuttemplate': '{type}:{user}/{project}{#committish}',
	  'pathtemplate': '{user}/{project}{#committish}',
	  'pathmatch': /^[/]([^/]+)[/]([^/]+?)(?:[.]git|[/])?$/,
	  'hashformat': formatHashFragment
	};

	Object.keys(gitHosts).forEach(function (name) {
	  Object.keys(gitHostDefaults).forEach(function (key) {
	    if (gitHosts[name][key]) return
	    gitHosts[name][key] = gitHostDefaults[key];
	  });
	  gitHosts[name].protocols_re = RegExp('^(' +
	    gitHosts[name].protocols.map(function (protocol) {
	      return protocol.replace(/([\\+*{}()[\]$^|])/g, '\\$1')
	    }).join('|') + '):$');
	});

	function formatHashFragment (fragment) {
	  return fragment.toLowerCase().replace(/^\W+|\/|\W+$/g, '').replace(/\W+/g, '-')
	}
	});

	/* eslint-disable node/no-deprecated-api */

	// copy-pasta util._extend from node's source, to avoid pulling
	// the whole util module into peoples' webpack bundles.
	/* istanbul ignore next */
	var extend = Object.assign || function _extend (target, source) {
	  // Don't do anything if source isn't an object
	  if (source === null || typeof source !== 'object') return target

	  var keys = Object.keys(source);
	  var i = keys.length;
	  while (i--) {
	    target[keys[i]] = source[keys[i]];
	  }
	  return target
	};

	var gitHost = GitHost;
	function GitHost (type, user, auth, project, committish, defaultRepresentation, opts) {
	  var gitHostInfo$1 = this;
	  gitHostInfo$1.type = type;
	  Object.keys(gitHostInfo[type]).forEach(function (key) {
	    gitHostInfo$1[key] = gitHostInfo[type][key];
	  });
	  gitHostInfo$1.user = user;
	  gitHostInfo$1.auth = auth;
	  gitHostInfo$1.project = project;
	  gitHostInfo$1.committish = committish;
	  gitHostInfo$1.default = defaultRepresentation;
	  gitHostInfo$1.opts = opts || {};
	}

	GitHost.prototype.hash = function () {
	  return this.committish ? '#' + this.committish : ''
	};

	GitHost.prototype._fill = function (template, opts) {
	  if (!template) return
	  var vars = extend({}, opts);
	  vars.path = vars.path ? vars.path.replace(/^[/]+/g, '') : '';
	  opts = extend(extend({}, this.opts), opts);
	  var self = this;
	  Object.keys(this).forEach(function (key) {
	    if (self[key] != null && vars[key] == null) vars[key] = self[key];
	  });
	  var rawAuth = vars.auth;
	  var rawcommittish = vars.committish;
	  var rawFragment = vars.fragment;
	  var rawPath = vars.path;
	  var rawProject = vars.project;
	  Object.keys(vars).forEach(function (key) {
	    var value = vars[key];
	    if ((key === 'path' || key === 'project') && typeof value === 'string') {
	      vars[key] = value.split('/').map(function (pathComponent) {
	        return encodeURIComponent(pathComponent)
	      }).join('/');
	    } else {
	      vars[key] = encodeURIComponent(value);
	    }
	  });
	  vars['auth@'] = rawAuth ? rawAuth + '@' : '';
	  vars['#fragment'] = rawFragment ? '#' + this.hashformat(rawFragment) : '';
	  vars.fragment = vars.fragment ? vars.fragment : '';
	  vars['#path'] = rawPath ? '#' + this.hashformat(rawPath) : '';
	  vars['/path'] = vars.path ? '/' + vars.path : '';
	  vars.projectPath = rawProject.split('/').map(encodeURIComponent).join('/');
	  if (opts.noCommittish) {
	    vars['#committish'] = '';
	    vars['/tree/committish'] = '';
	    vars['/committish'] = '';
	    vars.committish = '';
	  } else {
	    vars['#committish'] = rawcommittish ? '#' + rawcommittish : '';
	    vars['/tree/committish'] = vars.committish
	      ? '/' + vars.treepath + '/' + vars.committish
	      : '';
	    vars['/committish'] = vars.committish ? '/' + vars.committish : '';
	    vars.committish = vars.committish || 'master';
	  }
	  var res = template;
	  Object.keys(vars).forEach(function (key) {
	    res = res.replace(new RegExp('[{]' + key + '[}]', 'g'), vars[key]);
	  });
	  if (opts.noGitPlus) {
	    return res.replace(/^git[+]/, '')
	  } else {
	    return res
	  }
	};

	GitHost.prototype.ssh = function (opts) {
	  return this._fill(this.sshtemplate, opts)
	};

	GitHost.prototype.sshurl = function (opts) {
	  return this._fill(this.sshurltemplate, opts)
	};

	GitHost.prototype.browse = function (P, F, opts) {
	  if (typeof P === 'string') {
	    if (typeof F !== 'string') {
	      opts = F;
	      F = null;
	    }
	    return this._fill(this.browsefiletemplate, extend({
	      fragment: F,
	      path: P
	    }, opts))
	  } else {
	    return this._fill(this.browsetemplate, P)
	  }
	};

	GitHost.prototype.docs = function (opts) {
	  return this._fill(this.docstemplate, opts)
	};

	GitHost.prototype.bugs = function (opts) {
	  return this._fill(this.bugstemplate, opts)
	};

	GitHost.prototype.https = function (opts) {
	  return this._fill(this.httpstemplate, opts)
	};

	GitHost.prototype.git = function (opts) {
	  return this._fill(this.gittemplate, opts)
	};

	GitHost.prototype.shortcut = function (opts) {
	  return this._fill(this.shortcuttemplate, opts)
	};

	GitHost.prototype.path = function (opts) {
	  return this._fill(this.pathtemplate, opts)
	};

	GitHost.prototype.tarball = function (opts_) {
	  var opts = extend({}, opts_, { noCommittish: false });
	  return this._fill(this.tarballtemplate, opts)
	};

	GitHost.prototype.file = function (P, opts) {
	  return this._fill(this.filetemplate, extend({ path: P }, opts))
	};

	GitHost.prototype.getDefaultRepresentation = function () {
	  return this.default
	};

	GitHost.prototype.toString = function (opts) {
	  if (this.default && typeof this[this.default] === 'function') return this[this.default](opts)
	  return this.sshurl(opts)
	};

	var hostedGitInfo = createCommonjsModule(function (module) {


	var GitHost = module.exports = gitHost;

	var protocolToRepresentationMap = {
	  'git+ssh:': 'sshurl',
	  'git+https:': 'https',
	  'ssh:': 'sshurl',
	  'git:': 'git'
	};

	function protocolToRepresentation (protocol) {
	  return protocolToRepresentationMap[protocol] || protocol.slice(0, -1)
	}

	var authProtocols = {
	  'git:': true,
	  'https:': true,
	  'git+https:': true,
	  'http:': true,
	  'git+http:': true
	};

	var cache = {};

	module.exports.fromUrl = function (giturl, opts) {
	  if (typeof giturl !== 'string') return
	  var key = giturl + JSON.stringify(opts || {});

	  if (!(key in cache)) {
	    cache[key] = fromUrl(giturl, opts);
	  }

	  return cache[key]
	};

	function fromUrl (giturl, opts) {
	  if (giturl == null || giturl === '') return
	  var url = fixupUnqualifiedGist(
	    isGitHubShorthand(giturl) ? 'github:' + giturl : giturl
	  );
	  var parsed = parseGitUrl(url);
	  var shortcutMatch = url.match(new RegExp('^([^:]+):(?:(?:[^@:]+(?:[^@]+)?@)?([^/]*))[/](.+?)(?:[.]git)?($|#)'));
	  var matches = Object.keys(gitHostInfo).map(function (gitHostName) {
	    try {
	      var gitHostInfo$1 = gitHostInfo[gitHostName];
	      var auth = null;
	      if (parsed.auth && authProtocols[parsed.protocol]) {
	        auth = parsed.auth;
	      }
	      var committish = parsed.hash ? decodeURIComponent(parsed.hash.substr(1)) : null;
	      var user = null;
	      var project = null;
	      var defaultRepresentation = null;
	      if (shortcutMatch && shortcutMatch[1] === gitHostName) {
	        user = shortcutMatch[2] && decodeURIComponent(shortcutMatch[2]);
	        project = decodeURIComponent(shortcutMatch[3]);
	        defaultRepresentation = 'shortcut';
	      } else {
	        if (parsed.host && parsed.host !== gitHostInfo$1.domain && parsed.host.replace(/^www[.]/, '') !== gitHostInfo$1.domain) return
	        if (!gitHostInfo$1.protocols_re.test(parsed.protocol)) return
	        if (!parsed.path) return
	        var pathmatch = gitHostInfo$1.pathmatch;
	        var matched = parsed.path.match(pathmatch);
	        if (!matched) return
	        /* istanbul ignore else */
	        if (matched[1] !== null && matched[1] !== undefined) {
	          user = decodeURIComponent(matched[1].replace(/^:/, ''));
	        }
	        project = decodeURIComponent(matched[2]);
	        defaultRepresentation = protocolToRepresentation(parsed.protocol);
	      }
	      return new GitHost(gitHostName, user, auth, project, committish, defaultRepresentation, opts)
	    } catch (ex) {
	      /* istanbul ignore else */
	      if (ex instanceof URIError) ; else throw ex
	    }
	  }).filter(function (gitHostInfo) { return gitHostInfo });
	  if (matches.length !== 1) return
	  return matches[0]
	}

	function isGitHubShorthand (arg) {
	  // Note: This does not fully test the git ref format.
	  // See https://www.kernel.org/pub/software/scm/git/docs/git-check-ref-format.html
	  //
	  // The only way to do this properly would be to shell out to
	  // git-check-ref-format, and as this is a fast sync function,
	  // we don't want to do that.  Just let git fail if it turns
	  // out that the commit-ish is invalid.
	  // GH usernames cannot start with . or -
	  return /^[^:@%/\s.-][^:@%/\s]*[/][^:@\s/%]+(?:#.*)?$/.test(arg)
	}

	function fixupUnqualifiedGist (giturl) {
	  // necessary for round-tripping gists
	  var parsed = url__default['default'].parse(giturl);
	  if (parsed.protocol === 'gist:' && parsed.host && !parsed.path) {
	    return parsed.protocol + '/' + parsed.host
	  } else {
	    return giturl
	  }
	}

	function parseGitUrl (giturl) {
	  var matched = giturl.match(/^([^@]+)@([^:/]+):[/]?((?:[^/]+[/])?[^/]+?)(?:[.]git)?(#.*)?$/);
	  if (!matched) {
	    var legacy = url__default['default'].parse(giturl);
	    // If we don't have url.URL, then sorry, this is just not fixable.
	    // This affects Node <= 6.12.
	    if (legacy.auth && typeof url__default['default'].URL === 'function') {
	      // git urls can be in the form of scp-style/ssh-connect strings, like
	      // git+ssh://user@host.com:some/path, which the legacy url parser
	      // supports, but WhatWG url.URL class does not.  However, the legacy
	      // parser de-urlencodes the username and password, so something like
	      // https://user%3An%40me:p%40ss%3Aword@x.com/ becomes
	      // https://user:n@me:p@ss:word@x.com/ which is all kinds of wrong.
	      // Pull off just the auth and host, so we dont' get the confusing
	      // scp-style URL, then pass that to the WhatWG parser to get the
	      // auth properly escaped.
	      var authmatch = giturl.match(/[^@]+@[^:/]+/);
	      /* istanbul ignore else - this should be impossible */
	      if (authmatch) {
	        var whatwg = new url__default['default'].URL(authmatch[0]);
	        legacy.auth = whatwg.username || '';
	        if (whatwg.password) legacy.auth += ':' + whatwg.password;
	      }
	    }
	    return legacy
	  }
	  return {
	    protocol: 'git+ssh:',
	    slashes: true,
	    auth: matched[1],
	    host: matched[2],
	    port: null,
	    hostname: matched[2],
	    hash: matched[4],
	    search: null,
	    query: null,
	    pathname: '/' + matched[3],
	    path: '/' + matched[3],
	    href: 'git+ssh://' + matched[1] + '@' + matched[2] +
	          '/' + matched[3] + (matched[4] || '')
	  }
	}
	});

	var caller = function () {
	    // see https://code.google.com/p/v8/wiki/JavaScriptStackTraceApi
	    var origPrepareStackTrace = Error.prepareStackTrace;
	    Error.prepareStackTrace = function (_, stack) { return stack; };
	    var stack = (new Error()).stack;
	    Error.prepareStackTrace = origPrepareStackTrace;
	    return stack[2].getFileName();
	};

	var pathParse = createCommonjsModule(function (module) {

	var isWindows = process.platform === 'win32';

	// Regex to split a windows path into three parts: [*, device, slash,
	// tail] windows-only
	var splitDeviceRe =
	    /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/;

	// Regex to split the tail part of the above into [*, dir, basename, ext]
	var splitTailRe =
	    /^([\s\S]*?)((?:\.{1,2}|[^\\\/]+?|)(\.[^.\/\\]*|))(?:[\\\/]*)$/;

	var win32 = {};

	// Function to split a filename into [root, dir, basename, ext]
	function win32SplitPath(filename) {
	  // Separate device+slash from tail
	  var result = splitDeviceRe.exec(filename),
	      device = (result[1] || '') + (result[2] || ''),
	      tail = result[3] || '';
	  // Split the tail into dir, basename and extension
	  var result2 = splitTailRe.exec(tail),
	      dir = result2[1],
	      basename = result2[2],
	      ext = result2[3];
	  return [device, dir, basename, ext];
	}

	win32.parse = function(pathString) {
	  if (typeof pathString !== 'string') {
	    throw new TypeError(
	        "Parameter 'pathString' must be a string, not " + typeof pathString
	    );
	  }
	  var allParts = win32SplitPath(pathString);
	  if (!allParts || allParts.length !== 4) {
	    throw new TypeError("Invalid path '" + pathString + "'");
	  }
	  return {
	    root: allParts[0],
	    dir: allParts[0] + allParts[1].slice(0, -1),
	    base: allParts[2],
	    ext: allParts[3],
	    name: allParts[2].slice(0, allParts[2].length - allParts[3].length)
	  };
	};



	// Split a filename into [root, dir, basename, ext], unix version
	// 'root' is just a slash, or nothing.
	var splitPathRe =
	    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
	var posix = {};


	function posixSplitPath(filename) {
	  return splitPathRe.exec(filename).slice(1);
	}


	posix.parse = function(pathString) {
	  if (typeof pathString !== 'string') {
	    throw new TypeError(
	        "Parameter 'pathString' must be a string, not " + typeof pathString
	    );
	  }
	  var allParts = posixSplitPath(pathString);
	  if (!allParts || allParts.length !== 4) {
	    throw new TypeError("Invalid path '" + pathString + "'");
	  }
	  allParts[1] = allParts[1] || '';
	  allParts[2] = allParts[2] || '';
	  allParts[3] = allParts[3] || '';

	  return {
	    root: allParts[0],
	    dir: allParts[0] + allParts[1].slice(0, -1),
	    base: allParts[2],
	    ext: allParts[3],
	    name: allParts[2].slice(0, allParts[2].length - allParts[3].length)
	  };
	};


	if (isWindows)
	  module.exports = win32.parse;
	else /* posix */
	  module.exports = posix.parse;

	module.exports.posix = posix.parse;
	module.exports.win32 = win32.parse;
	});

	var parse$4 = path__default['default'].parse || pathParse;

	var getNodeModulesDirs = function getNodeModulesDirs(absoluteStart, modules) {
	    var prefix = '/';
	    if ((/^([A-Za-z]:)/).test(absoluteStart)) {
	        prefix = '';
	    } else if ((/^\\\\/).test(absoluteStart)) {
	        prefix = '\\\\';
	    }

	    var paths = [absoluteStart];
	    var parsed = parse$4(absoluteStart);
	    while (parsed.dir !== paths[paths.length - 1]) {
	        paths.push(parsed.dir);
	        parsed = parse$4(parsed.dir);
	    }

	    return paths.reduce(function (dirs, aPath) {
	        return dirs.concat(modules.map(function (moduleDir) {
	            return path__default['default'].resolve(prefix, aPath, moduleDir);
	        }));
	    }, []);
	};

	var nodeModulesPaths = function nodeModulesPaths(start, opts, request) {
	    var modules = opts && opts.moduleDirectory
	        ? [].concat(opts.moduleDirectory)
	        : ['node_modules'];

	    if (opts && typeof opts.paths === 'function') {
	        return opts.paths(
	            request,
	            start,
	            function () { return getNodeModulesDirs(start, modules); },
	            opts
	        );
	    }

	    var dirs = getNodeModulesDirs(start, modules);
	    return opts && opts.paths ? dirs.concat(opts.paths) : dirs;
	};

	var normalizeOptions = function (x, opts) {
	    /**
	     * This file is purposefully a passthrough. It's expected that third-party
	     * environments will override it at runtime in order to inject special logic
	     * into `resolve` (by manipulating the options). One such example is the PnP
	     * code path in Yarn.
	     */

	    return opts || {};
	};

	/* eslint no-invalid-this: 1 */

	var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
	var slice$1 = Array.prototype.slice;
	var toStr = Object.prototype.toString;
	var funcType = '[object Function]';

	var implementation = function bind(that) {
	    var target = this;
	    if (typeof target !== 'function' || toStr.call(target) !== funcType) {
	        throw new TypeError(ERROR_MESSAGE + target);
	    }
	    var args = slice$1.call(arguments, 1);

	    var bound;
	    var binder = function () {
	        if (this instanceof bound) {
	            var result = target.apply(
	                this,
	                args.concat(slice$1.call(arguments))
	            );
	            if (Object(result) === result) {
	                return result;
	            }
	            return this;
	        } else {
	            return target.apply(
	                that,
	                args.concat(slice$1.call(arguments))
	            );
	        }
	    };

	    var boundLength = Math.max(0, target.length - args.length);
	    var boundArgs = [];
	    for (var i = 0; i < boundLength; i++) {
	        boundArgs.push('$' + i);
	    }

	    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

	    if (target.prototype) {
	        var Empty = function Empty() {};
	        Empty.prototype = target.prototype;
	        bound.prototype = new Empty();
	        Empty.prototype = null;
	    }

	    return bound;
	};

	var functionBind = Function.prototype.bind || implementation;

	var src$1 = functionBind.call(Function.call, Object.prototype.hasOwnProperty);

	var assert$1 = true;
	var async_hooks$3 = ">= 8";
	var buffer_ieee754$1 = "< 0.9.7";
	var buffer$1 = true;
	var child_process$1 = true;
	var cluster$1 = true;
	var console$2 = true;
	var constants$6 = true;
	var crypto$2 = true;
	var _debug_agent$1 = ">= 1 && < 8";
	var _debugger$1 = "< 8";
	var dgram$1 = true;
	var diagnostics_channel$1 = ">= 15.1";
	var dns$2 = true;
	var domain$1 = ">= 0.7.12";
	var events$1 = true;
	var freelist$1 = "< 6";
	var fs$1 = true;
	var _http_agent$1 = ">= 0.11.1";
	var _http_client$1 = ">= 0.11.1";
	var _http_common$1 = ">= 0.11.1";
	var _http_incoming$1 = ">= 0.11.1";
	var _http_outgoing$1 = ">= 0.11.1";
	var _http_server$1 = ">= 0.11.1";
	var http$3 = true;
	var http2$1 = ">= 8.8";
	var https$1 = true;
	var inspector$1 = ">= 8.0.0";
	var _linklist$1 = "< 8";
	var module$2 = true;
	var net$2 = true;
	var os$1 = true;
	var path$1 = true;
	var perf_hooks$1 = ">= 8.5";
	var process$2 = ">= 1";
	var punycode$1 = true;
	var querystring$2 = true;
	var readline$1 = true;
	var repl$1 = true;
	var smalloc$1 = ">= 0.11.5 && < 3";
	var _stream_duplex$1 = ">= 0.9.4";
	var _stream_transform$1 = ">= 0.9.4";
	var _stream_wrap$1 = ">= 1.4.1";
	var _stream_passthrough$1 = ">= 0.9.4";
	var _stream_readable$1 = ">= 0.9.4";
	var _stream_writable$1 = ">= 0.9.4";
	var stream$2 = true;
	var string_decoder$1 = true;
	var sys$1 = [
		">= 0.6 && < 0.7",
		">= 0.8"
	];
	var timers$1 = true;
	var _tls_common$1 = ">= 0.11.13";
	var _tls_legacy$1 = ">= 0.11.3 && < 10";
	var _tls_wrap$1 = ">= 0.11.3";
	var tls$1 = true;
	var trace_events$1 = ">= 10";
	var tty$1 = true;
	var url$1 = true;
	var util$1 = true;
	var v8$1 = ">= 1";
	var vm$1 = true;
	var wasi$1 = ">= 13.4 && < 13.5";
	var worker_threads$1 = ">= 11.7";
	var zlib$1 = true;
	var data$1 = {
		assert: assert$1,
		"assert/strict": ">= 15",
		async_hooks: async_hooks$3,
		buffer_ieee754: buffer_ieee754$1,
		buffer: buffer$1,
		child_process: child_process$1,
		cluster: cluster$1,
		console: console$2,
		constants: constants$6,
		crypto: crypto$2,
		_debug_agent: _debug_agent$1,
		_debugger: _debugger$1,
		dgram: dgram$1,
		diagnostics_channel: diagnostics_channel$1,
		dns: dns$2,
		"dns/promises": ">= 15",
		domain: domain$1,
		events: events$1,
		freelist: freelist$1,
		fs: fs$1,
		"fs/promises": [
		">= 10 && < 10.1",
		">= 14"
	],
		_http_agent: _http_agent$1,
		_http_client: _http_client$1,
		_http_common: _http_common$1,
		_http_incoming: _http_incoming$1,
		_http_outgoing: _http_outgoing$1,
		_http_server: _http_server$1,
		http: http$3,
		http2: http2$1,
		https: https$1,
		inspector: inspector$1,
		_linklist: _linklist$1,
		module: module$2,
		net: net$2,
		"node-inspect/lib/_inspect": ">= 7.6.0 && < 12",
		"node-inspect/lib/internal/inspect_client": ">= 7.6.0 && < 12",
		"node-inspect/lib/internal/inspect_repl": ">= 7.6.0 && < 12",
		os: os$1,
		path: path$1,
		"path/posix": ">= 15.3",
		"path/win32": ">= 15.3",
		perf_hooks: perf_hooks$1,
		process: process$2,
		punycode: punycode$1,
		querystring: querystring$2,
		readline: readline$1,
		repl: repl$1,
		smalloc: smalloc$1,
		_stream_duplex: _stream_duplex$1,
		_stream_transform: _stream_transform$1,
		_stream_wrap: _stream_wrap$1,
		_stream_passthrough: _stream_passthrough$1,
		_stream_readable: _stream_readable$1,
		_stream_writable: _stream_writable$1,
		stream: stream$2,
		"stream/promises": ">= 15",
		string_decoder: string_decoder$1,
		sys: sys$1,
		timers: timers$1,
		"timers/promises": ">= 15",
		_tls_common: _tls_common$1,
		_tls_legacy: _tls_legacy$1,
		_tls_wrap: _tls_wrap$1,
		tls: tls$1,
		trace_events: trace_events$1,
		tty: tty$1,
		url: url$1,
		util: util$1,
		"util/types": ">= 15.3",
		"v8/tools/arguments": ">= 10 && < 12",
		"v8/tools/codemap": [
		">= 4.4.0 && < 5",
		">= 5.2.0 && < 12"
	],
		"v8/tools/consarray": [
		">= 4.4.0 && < 5",
		">= 5.2.0 && < 12"
	],
		"v8/tools/csvparser": [
		">= 4.4.0 && < 5",
		">= 5.2.0 && < 12"
	],
		"v8/tools/logreader": [
		">= 4.4.0 && < 5",
		">= 5.2.0 && < 12"
	],
		"v8/tools/profile_view": [
		">= 4.4.0 && < 5",
		">= 5.2.0 && < 12"
	],
		"v8/tools/splaytree": [
		">= 4.4.0 && < 5",
		">= 5.2.0 && < 12"
	],
		v8: v8$1,
		vm: vm$1,
		wasi: wasi$1,
		worker_threads: worker_threads$1,
		zlib: zlib$1
	};

	function specifierIncluded$1(current, specifier) {
		var nodeParts = current.split('.');
		var parts = specifier.split(' ');
		var op = parts.length > 1 ? parts[0] : '=';
		var versionParts = (parts.length > 1 ? parts[1] : parts[0]).split('.');

		for (var i = 0; i < 3; ++i) {
			var cur = parseInt(nodeParts[i] || 0, 10);
			var ver = parseInt(versionParts[i] || 0, 10);
			if (cur === ver) {
				continue; // eslint-disable-line no-restricted-syntax, no-continue
			}
			if (op === '<') {
				return cur < ver;
			}
			if (op === '>=') {
				return cur >= ver;
			}
			return false;
		}
		return op === '>=';
	}

	function matchesRange$1(current, range) {
		var specifiers = range.split(/ ?&& ?/);
		if (specifiers.length === 0) {
			return false;
		}
		for (var i = 0; i < specifiers.length; ++i) {
			if (!specifierIncluded$1(current, specifiers[i])) {
				return false;
			}
		}
		return true;
	}

	function versionIncluded$1(nodeVersion, specifierValue) {
		if (typeof specifierValue === 'boolean') {
			return specifierValue;
		}

		var current = typeof nodeVersion === 'undefined'
			? process.versions && process.versions.node && process.versions.node
			: nodeVersion;

		if (typeof current !== 'string') {
			throw new TypeError(typeof nodeVersion === 'undefined' ? 'Unable to determine current node version' : 'If provided, a valid node version is required');
		}

		if (specifierValue && typeof specifierValue === 'object') {
			for (var i = 0; i < specifierValue.length; ++i) {
				if (matchesRange$1(current, specifierValue[i])) {
					return true;
				}
			}
			return false;
		}
		return matchesRange$1(current, specifierValue);
	}



	var isCoreModule = function isCore(x, nodeVersion) {
		return src$1(data$1, x) && versionIncluded$1(nodeVersion, data$1[x]);
	};

	var realpathFS$1 = fs__default['default'].realpath && typeof fs__default['default'].realpath.native === 'function' ? fs__default['default'].realpath.native : fs__default['default'].realpath;

	var defaultIsFile$1 = function isFile(file, cb) {
	    fs__default['default'].stat(file, function (err, stat) {
	        if (!err) {
	            return cb(null, stat.isFile() || stat.isFIFO());
	        }
	        if (err.code === 'ENOENT' || err.code === 'ENOTDIR') return cb(null, false);
	        return cb(err);
	    });
	};

	var defaultIsDir$1 = function isDirectory(dir, cb) {
	    fs__default['default'].stat(dir, function (err, stat) {
	        if (!err) {
	            return cb(null, stat.isDirectory());
	        }
	        if (err.code === 'ENOENT' || err.code === 'ENOTDIR') return cb(null, false);
	        return cb(err);
	    });
	};

	var defaultRealpath = function realpath(x, cb) {
	    realpathFS$1(x, function (realpathErr, realPath) {
	        if (realpathErr && realpathErr.code !== 'ENOENT') cb(realpathErr);
	        else cb(null, realpathErr ? x : realPath);
	    });
	};

	var maybeRealpath = function maybeRealpath(realpath, x, opts, cb) {
	    if (opts && opts.preserveSymlinks === false) {
	        realpath(x, cb);
	    } else {
	        cb(null, x);
	    }
	};

	var defaultReadPackage = function defaultReadPackage(readFile, pkgfile, cb) {
	    readFile(pkgfile, function (readFileErr, body) {
	        if (readFileErr) cb(readFileErr);
	        else {
	            try {
	                var pkg = JSON.parse(body);
	                cb(null, pkg);
	            } catch (jsonErr) {
	                cb(null);
	            }
	        }
	    });
	};

	var getPackageCandidates$1 = function getPackageCandidates(x, start, opts) {
	    var dirs = nodeModulesPaths(start, opts, x);
	    for (var i = 0; i < dirs.length; i++) {
	        dirs[i] = path__default['default'].join(dirs[i], x);
	    }
	    return dirs;
	};

	var async = function resolve(x, options, callback) {
	    var cb = callback;
	    var opts = options;
	    if (typeof options === 'function') {
	        cb = opts;
	        opts = {};
	    }
	    if (typeof x !== 'string') {
	        var err = new TypeError('Path must be a string.');
	        return process.nextTick(function () {
	            cb(err);
	        });
	    }

	    opts = normalizeOptions(x, opts);

	    var isFile = opts.isFile || defaultIsFile$1;
	    var isDirectory = opts.isDirectory || defaultIsDir$1;
	    var readFile = opts.readFile || fs__default['default'].readFile;
	    var realpath = opts.realpath || defaultRealpath;
	    var readPackage = opts.readPackage || defaultReadPackage;
	    if (opts.readFile && opts.readPackage) {
	        var conflictErr = new TypeError('`readFile` and `readPackage` are mutually exclusive.');
	        return process.nextTick(function () {
	            cb(conflictErr);
	        });
	    }
	    var packageIterator = opts.packageIterator;

	    var extensions = opts.extensions || ['.js'];
	    var includeCoreModules = opts.includeCoreModules !== false;
	    var basedir = opts.basedir || path__default['default'].dirname(caller());
	    var parent = opts.filename || basedir;

	    opts.paths = opts.paths || [];

	    // ensure that `basedir` is an absolute path at this point, resolving against the process' current working directory
	    var absoluteStart = path__default['default'].resolve(basedir);

	    maybeRealpath(
	        realpath,
	        absoluteStart,
	        opts,
	        function (err, realStart) {
	            if (err) cb(err);
	            else init(realStart);
	        }
	    );

	    var res;
	    function init(basedir) {
	        if ((/^(?:\.\.?(?:\/|$)|\/|([A-Za-z]:)?[/\\])/).test(x)) {
	            res = path__default['default'].resolve(basedir, x);
	            if (x === '.' || x === '..' || x.slice(-1) === '/') res += '/';
	            if ((/\/$/).test(x) && res === basedir) {
	                loadAsDirectory(res, opts.package, onfile);
	            } else loadAsFile(res, opts.package, onfile);
	        } else if (includeCoreModules && isCoreModule(x)) {
	            return cb(null, x);
	        } else loadNodeModules(x, basedir, function (err, n, pkg) {
	            if (err) cb(err);
	            else if (n) {
	                return maybeRealpath(realpath, n, opts, function (err, realN) {
	                    if (err) {
	                        cb(err);
	                    } else {
	                        cb(null, realN, pkg);
	                    }
	                });
	            } else {
	                var moduleError = new Error("Cannot find module '" + x + "' from '" + parent + "'");
	                moduleError.code = 'MODULE_NOT_FOUND';
	                cb(moduleError);
	            }
	        });
	    }

	    function onfile(err, m, pkg) {
	        if (err) cb(err);
	        else if (m) cb(null, m, pkg);
	        else loadAsDirectory(res, function (err, d, pkg) {
	            if (err) cb(err);
	            else if (d) {
	                maybeRealpath(realpath, d, opts, function (err, realD) {
	                    if (err) {
	                        cb(err);
	                    } else {
	                        cb(null, realD, pkg);
	                    }
	                });
	            } else {
	                var moduleError = new Error("Cannot find module '" + x + "' from '" + parent + "'");
	                moduleError.code = 'MODULE_NOT_FOUND';
	                cb(moduleError);
	            }
	        });
	    }

	    function loadAsFile(x, thePackage, callback) {
	        var loadAsFilePackage = thePackage;
	        var cb = callback;
	        if (typeof loadAsFilePackage === 'function') {
	            cb = loadAsFilePackage;
	            loadAsFilePackage = undefined;
	        }

	        var exts = [''].concat(extensions);
	        load(exts, x, loadAsFilePackage);

	        function load(exts, x, loadPackage) {
	            if (exts.length === 0) return cb(null, undefined, loadPackage);
	            var file = x + exts[0];

	            var pkg = loadPackage;
	            if (pkg) onpkg(null, pkg);
	            else loadpkg(path__default['default'].dirname(file), onpkg);

	            function onpkg(err, pkg_, dir) {
	                pkg = pkg_;
	                if (err) return cb(err);
	                if (dir && pkg && opts.pathFilter) {
	                    var rfile = path__default['default'].relative(dir, file);
	                    var rel = rfile.slice(0, rfile.length - exts[0].length);
	                    var r = opts.pathFilter(pkg, x, rel);
	                    if (r) return load(
	                        [''].concat(extensions.slice()),
	                        path__default['default'].resolve(dir, r),
	                        pkg
	                    );
	                }
	                isFile(file, onex);
	            }
	            function onex(err, ex) {
	                if (err) return cb(err);
	                if (ex) return cb(null, file, pkg);
	                load(exts.slice(1), x, pkg);
	            }
	        }
	    }

	    function loadpkg(dir, cb) {
	        if (dir === '' || dir === '/') return cb(null);
	        if (process.platform === 'win32' && (/^\w:[/\\]*$/).test(dir)) {
	            return cb(null);
	        }
	        if ((/[/\\]node_modules[/\\]*$/).test(dir)) return cb(null);

	        maybeRealpath(realpath, dir, opts, function (unwrapErr, pkgdir) {
	            if (unwrapErr) return loadpkg(path__default['default'].dirname(dir), cb);
	            var pkgfile = path__default['default'].join(pkgdir, 'package.json');
	            isFile(pkgfile, function (err, ex) {
	                // on err, ex is false
	                if (!ex) return loadpkg(path__default['default'].dirname(dir), cb);

	                readPackage(readFile, pkgfile, function (err, pkgParam) {
	                    if (err) cb(err);

	                    var pkg = pkgParam;

	                    if (pkg && opts.packageFilter) {
	                        pkg = opts.packageFilter(pkg, pkgfile);
	                    }
	                    cb(null, pkg, dir);
	                });
	            });
	        });
	    }

	    function loadAsDirectory(x, loadAsDirectoryPackage, callback) {
	        var cb = callback;
	        var fpkg = loadAsDirectoryPackage;
	        if (typeof fpkg === 'function') {
	            cb = fpkg;
	            fpkg = opts.package;
	        }

	        maybeRealpath(realpath, x, opts, function (unwrapErr, pkgdir) {
	            if (unwrapErr) return cb(unwrapErr);
	            var pkgfile = path__default['default'].join(pkgdir, 'package.json');
	            isFile(pkgfile, function (err, ex) {
	                if (err) return cb(err);
	                if (!ex) return loadAsFile(path__default['default'].join(x, 'index'), fpkg, cb);

	                readPackage(readFile, pkgfile, function (err, pkgParam) {
	                    if (err) return cb(err);

	                    var pkg = pkgParam;

	                    if (pkg && opts.packageFilter) {
	                        pkg = opts.packageFilter(pkg, pkgfile);
	                    }

	                    if (pkg && pkg.main) {
	                        if (typeof pkg.main !== 'string') {
	                            var mainError = new TypeError('package “' + pkg.name + '” `main` must be a string');
	                            mainError.code = 'INVALID_PACKAGE_MAIN';
	                            return cb(mainError);
	                        }
	                        if (pkg.main === '.' || pkg.main === './') {
	                            pkg.main = 'index';
	                        }
	                        loadAsFile(path__default['default'].resolve(x, pkg.main), pkg, function (err, m, pkg) {
	                            if (err) return cb(err);
	                            if (m) return cb(null, m, pkg);
	                            if (!pkg) return loadAsFile(path__default['default'].join(x, 'index'), pkg, cb);

	                            var dir = path__default['default'].resolve(x, pkg.main);
	                            loadAsDirectory(dir, pkg, function (err, n, pkg) {
	                                if (err) return cb(err);
	                                if (n) return cb(null, n, pkg);
	                                loadAsFile(path__default['default'].join(x, 'index'), pkg, cb);
	                            });
	                        });
	                        return;
	                    }

	                    loadAsFile(path__default['default'].join(x, '/index'), pkg, cb);
	                });
	            });
	        });
	    }

	    function processDirs(cb, dirs) {
	        if (dirs.length === 0) return cb(null, undefined);
	        var dir = dirs[0];

	        isDirectory(path__default['default'].dirname(dir), isdir);

	        function isdir(err, isdir) {
	            if (err) return cb(err);
	            if (!isdir) return processDirs(cb, dirs.slice(1));
	            loadAsFile(dir, opts.package, onfile);
	        }

	        function onfile(err, m, pkg) {
	            if (err) return cb(err);
	            if (m) return cb(null, m, pkg);
	            loadAsDirectory(dir, opts.package, ondir);
	        }

	        function ondir(err, n, pkg) {
	            if (err) return cb(err);
	            if (n) return cb(null, n, pkg);
	            processDirs(cb, dirs.slice(1));
	        }
	    }
	    function loadNodeModules(x, start, cb) {
	        var thunk = function () { return getPackageCandidates$1(x, start, opts); };
	        processDirs(
	            cb,
	            packageIterator ? packageIterator(x, start, thunk, opts) : thunk()
	        );
	    }
	};

	var assert = true;
	var async_hooks$2 = ">= 8";
	var buffer_ieee754 = "< 0.9.7";
	var buffer = true;
	var child_process = true;
	var cluster = true;
	var console$1 = true;
	var constants$5 = true;
	var crypto$1 = true;
	var _debug_agent = ">= 1 && < 8";
	var _debugger = "< 8";
	var dgram = true;
	var diagnostics_channel = ">= 15.1";
	var dns$1 = true;
	var domain = ">= 0.7.12";
	var events = true;
	var freelist = "< 6";
	var fs = true;
	var _http_agent = ">= 0.11.1";
	var _http_client = ">= 0.11.1";
	var _http_common = ">= 0.11.1";
	var _http_incoming = ">= 0.11.1";
	var _http_outgoing = ">= 0.11.1";
	var _http_server = ">= 0.11.1";
	var http$2 = true;
	var http2 = ">= 8.8";
	var https = true;
	var inspector = ">= 8.0.0";
	var _linklist = "< 8";
	var module$1 = true;
	var net$1 = true;
	var os = true;
	var path = true;
	var perf_hooks = ">= 8.5";
	var process$1 = ">= 1";
	var punycode = true;
	var querystring$1 = true;
	var readline = true;
	var repl = true;
	var smalloc = ">= 0.11.5 && < 3";
	var _stream_duplex = ">= 0.9.4";
	var _stream_transform = ">= 0.9.4";
	var _stream_wrap = ">= 1.4.1";
	var _stream_passthrough = ">= 0.9.4";
	var _stream_readable = ">= 0.9.4";
	var _stream_writable = ">= 0.9.4";
	var stream$1 = true;
	var string_decoder = true;
	var sys = [
		">= 0.6 && < 0.7",
		">= 0.8"
	];
	var timers = true;
	var _tls_common = ">= 0.11.13";
	var _tls_legacy = ">= 0.11.3 && < 10";
	var _tls_wrap = ">= 0.11.3";
	var tls = true;
	var trace_events = ">= 10";
	var tty = true;
	var url = true;
	var util = true;
	var v8 = ">= 1";
	var vm = true;
	var wasi = ">= 13.4 && < 13.5";
	var worker_threads = ">= 11.7";
	var zlib = true;
	var data = {
		assert: assert,
		"assert/strict": ">= 15",
		async_hooks: async_hooks$2,
		buffer_ieee754: buffer_ieee754,
		buffer: buffer,
		child_process: child_process,
		cluster: cluster,
		console: console$1,
		constants: constants$5,
		crypto: crypto$1,
		_debug_agent: _debug_agent,
		_debugger: _debugger,
		dgram: dgram,
		diagnostics_channel: diagnostics_channel,
		dns: dns$1,
		"dns/promises": ">= 15",
		domain: domain,
		events: events,
		freelist: freelist,
		fs: fs,
		"fs/promises": [
		">= 10 && < 10.1",
		">= 14"
	],
		_http_agent: _http_agent,
		_http_client: _http_client,
		_http_common: _http_common,
		_http_incoming: _http_incoming,
		_http_outgoing: _http_outgoing,
		_http_server: _http_server,
		http: http$2,
		http2: http2,
		https: https,
		inspector: inspector,
		_linklist: _linklist,
		module: module$1,
		net: net$1,
		"node-inspect/lib/_inspect": ">= 7.6.0 && < 12",
		"node-inspect/lib/internal/inspect_client": ">= 7.6.0 && < 12",
		"node-inspect/lib/internal/inspect_repl": ">= 7.6.0 && < 12",
		os: os,
		path: path,
		"path/posix": ">= 15.3",
		"path/win32": ">= 15.3",
		perf_hooks: perf_hooks,
		process: process$1,
		punycode: punycode,
		querystring: querystring$1,
		readline: readline,
		repl: repl,
		smalloc: smalloc,
		_stream_duplex: _stream_duplex,
		_stream_transform: _stream_transform,
		_stream_wrap: _stream_wrap,
		_stream_passthrough: _stream_passthrough,
		_stream_readable: _stream_readable,
		_stream_writable: _stream_writable,
		stream: stream$1,
		"stream/promises": ">= 15",
		string_decoder: string_decoder,
		sys: sys,
		timers: timers,
		"timers/promises": ">= 15",
		_tls_common: _tls_common,
		_tls_legacy: _tls_legacy,
		_tls_wrap: _tls_wrap,
		tls: tls,
		trace_events: trace_events,
		tty: tty,
		url: url,
		util: util,
		"util/types": ">= 15.3",
		"v8/tools/arguments": ">= 10 && < 12",
		"v8/tools/codemap": [
		">= 4.4.0 && < 5",
		">= 5.2.0 && < 12"
	],
		"v8/tools/consarray": [
		">= 4.4.0 && < 5",
		">= 5.2.0 && < 12"
	],
		"v8/tools/csvparser": [
		">= 4.4.0 && < 5",
		">= 5.2.0 && < 12"
	],
		"v8/tools/logreader": [
		">= 4.4.0 && < 5",
		">= 5.2.0 && < 12"
	],
		"v8/tools/profile_view": [
		">= 4.4.0 && < 5",
		">= 5.2.0 && < 12"
	],
		"v8/tools/splaytree": [
		">= 4.4.0 && < 5",
		">= 5.2.0 && < 12"
	],
		v8: v8,
		vm: vm,
		wasi: wasi,
		worker_threads: worker_threads,
		zlib: zlib
	};

	var current = (process.versions && process.versions.node && process.versions.node.split('.')) || [];

	function specifierIncluded(specifier) {
	    var parts = specifier.split(' ');
	    var op = parts.length > 1 ? parts[0] : '=';
	    var versionParts = (parts.length > 1 ? parts[1] : parts[0]).split('.');

	    for (var i = 0; i < 3; ++i) {
	        var cur = parseInt(current[i] || 0, 10);
	        var ver = parseInt(versionParts[i] || 0, 10);
	        if (cur === ver) {
	            continue; // eslint-disable-line no-restricted-syntax, no-continue
	        }
	        if (op === '<') {
	            return cur < ver;
	        } else if (op === '>=') {
	            return cur >= ver;
	        } else {
	            return false;
	        }
	    }
	    return op === '>=';
	}

	function matchesRange(range) {
	    var specifiers = range.split(/ ?&& ?/);
	    if (specifiers.length === 0) { return false; }
	    for (var i = 0; i < specifiers.length; ++i) {
	        if (!specifierIncluded(specifiers[i])) { return false; }
	    }
	    return true;
	}

	function versionIncluded(specifierValue) {
	    if (typeof specifierValue === 'boolean') { return specifierValue; }
	    if (specifierValue && typeof specifierValue === 'object') {
	        for (var i = 0; i < specifierValue.length; ++i) {
	            if (matchesRange(specifierValue[i])) { return true; }
	        }
	        return false;
	    }
	    return matchesRange(specifierValue);
	}



	var core = {};
	for (var mod in data) { // eslint-disable-line no-restricted-syntax
	    if (Object.prototype.hasOwnProperty.call(data, mod)) {
	        core[mod] = versionIncluded(data[mod]);
	    }
	}
	var core_1 = core;

	var isCore = function isCore(x) {
	    return isCoreModule(x);
	};

	var realpathFS = fs__default['default'].realpathSync && typeof fs__default['default'].realpathSync.native === 'function' ? fs__default['default'].realpathSync.native : fs__default['default'].realpathSync;

	var defaultIsFile = function isFile(file) {
	    try {
	        var stat = fs__default['default'].statSync(file);
	    } catch (e) {
	        if (e && (e.code === 'ENOENT' || e.code === 'ENOTDIR')) return false;
	        throw e;
	    }
	    return stat.isFile() || stat.isFIFO();
	};

	var defaultIsDir = function isDirectory(dir) {
	    try {
	        var stat = fs__default['default'].statSync(dir);
	    } catch (e) {
	        if (e && (e.code === 'ENOENT' || e.code === 'ENOTDIR')) return false;
	        throw e;
	    }
	    return stat.isDirectory();
	};

	var defaultRealpathSync = function realpathSync(x) {
	    try {
	        return realpathFS(x);
	    } catch (realpathErr) {
	        if (realpathErr.code !== 'ENOENT') {
	            throw realpathErr;
	        }
	    }
	    return x;
	};

	var maybeRealpathSync = function maybeRealpathSync(realpathSync, x, opts) {
	    if (opts && opts.preserveSymlinks === false) {
	        return realpathSync(x);
	    }
	    return x;
	};

	var defaultReadPackageSync = function defaultReadPackageSync(readFileSync, pkgfile) {
	    var body = readFileSync(pkgfile);
	    try {
	        var pkg = JSON.parse(body);
	        return pkg;
	    } catch (jsonErr) {}
	};

	var getPackageCandidates = function getPackageCandidates(x, start, opts) {
	    var dirs = nodeModulesPaths(start, opts, x);
	    for (var i = 0; i < dirs.length; i++) {
	        dirs[i] = path__default['default'].join(dirs[i], x);
	    }
	    return dirs;
	};

	var sync$2 = function resolveSync(x, options) {
	    if (typeof x !== 'string') {
	        throw new TypeError('Path must be a string.');
	    }
	    var opts = normalizeOptions(x, options);

	    var isFile = opts.isFile || defaultIsFile;
	    var readFileSync = opts.readFileSync || fs__default['default'].readFileSync;
	    var isDirectory = opts.isDirectory || defaultIsDir;
	    var realpathSync = opts.realpathSync || defaultRealpathSync;
	    var readPackageSync = opts.readPackageSync || defaultReadPackageSync;
	    if (opts.readFileSync && opts.readPackageSync) {
	        throw new TypeError('`readFileSync` and `readPackageSync` are mutually exclusive.');
	    }
	    var packageIterator = opts.packageIterator;

	    var extensions = opts.extensions || ['.js'];
	    var includeCoreModules = opts.includeCoreModules !== false;
	    var basedir = opts.basedir || path__default['default'].dirname(caller());
	    var parent = opts.filename || basedir;

	    opts.paths = opts.paths || [];

	    // ensure that `basedir` is an absolute path at this point, resolving against the process' current working directory
	    var absoluteStart = maybeRealpathSync(realpathSync, path__default['default'].resolve(basedir), opts);

	    if ((/^(?:\.\.?(?:\/|$)|\/|([A-Za-z]:)?[/\\])/).test(x)) {
	        var res = path__default['default'].resolve(absoluteStart, x);
	        if (x === '.' || x === '..' || x.slice(-1) === '/') res += '/';
	        var m = loadAsFileSync(res) || loadAsDirectorySync(res);
	        if (m) return maybeRealpathSync(realpathSync, m, opts);
	    } else if (includeCoreModules && isCoreModule(x)) {
	        return x;
	    } else {
	        var n = loadNodeModulesSync(x, absoluteStart);
	        if (n) return maybeRealpathSync(realpathSync, n, opts);
	    }

	    var err = new Error("Cannot find module '" + x + "' from '" + parent + "'");
	    err.code = 'MODULE_NOT_FOUND';
	    throw err;

	    function loadAsFileSync(x) {
	        var pkg = loadpkg(path__default['default'].dirname(x));

	        if (pkg && pkg.dir && pkg.pkg && opts.pathFilter) {
	            var rfile = path__default['default'].relative(pkg.dir, x);
	            var r = opts.pathFilter(pkg.pkg, x, rfile);
	            if (r) {
	                x = path__default['default'].resolve(pkg.dir, r); // eslint-disable-line no-param-reassign
	            }
	        }

	        if (isFile(x)) {
	            return x;
	        }

	        for (var i = 0; i < extensions.length; i++) {
	            var file = x + extensions[i];
	            if (isFile(file)) {
	                return file;
	            }
	        }
	    }

	    function loadpkg(dir) {
	        if (dir === '' || dir === '/') return;
	        if (process.platform === 'win32' && (/^\w:[/\\]*$/).test(dir)) {
	            return;
	        }
	        if ((/[/\\]node_modules[/\\]*$/).test(dir)) return;

	        var pkgfile = path__default['default'].join(maybeRealpathSync(realpathSync, dir, opts), 'package.json');

	        if (!isFile(pkgfile)) {
	            return loadpkg(path__default['default'].dirname(dir));
	        }

	        var pkg = readPackageSync(readFileSync, pkgfile);

	        if (pkg && opts.packageFilter) {
	            // v2 will pass pkgfile
	            pkg = opts.packageFilter(pkg, /*pkgfile,*/ dir); // eslint-disable-line spaced-comment
	        }

	        return { pkg: pkg, dir: dir };
	    }

	    function loadAsDirectorySync(x) {
	        var pkgfile = path__default['default'].join(maybeRealpathSync(realpathSync, x, opts), '/package.json');
	        if (isFile(pkgfile)) {
	            try {
	                var pkg = readPackageSync(readFileSync, pkgfile);
	            } catch (e) {}

	            if (pkg && opts.packageFilter) {
	                // v2 will pass pkgfile
	                pkg = opts.packageFilter(pkg, /*pkgfile,*/ x); // eslint-disable-line spaced-comment
	            }

	            if (pkg && pkg.main) {
	                if (typeof pkg.main !== 'string') {
	                    var mainError = new TypeError('package “' + pkg.name + '” `main` must be a string');
	                    mainError.code = 'INVALID_PACKAGE_MAIN';
	                    throw mainError;
	                }
	                if (pkg.main === '.' || pkg.main === './') {
	                    pkg.main = 'index';
	                }
	                try {
	                    var m = loadAsFileSync(path__default['default'].resolve(x, pkg.main));
	                    if (m) return m;
	                    var n = loadAsDirectorySync(path__default['default'].resolve(x, pkg.main));
	                    if (n) return n;
	                } catch (e) {}
	            }
	        }

	        return loadAsFileSync(path__default['default'].join(x, '/index'));
	    }

	    function loadNodeModulesSync(x, start) {
	        var thunk = function () { return getPackageCandidates(x, start, opts); };
	        var dirs = packageIterator ? packageIterator(x, start, thunk, opts) : thunk();

	        for (var i = 0; i < dirs.length; i++) {
	            var dir = dirs[i];
	            if (isDirectory(path__default['default'].dirname(dir))) {
	                var m = loadAsFileSync(dir);
	                if (m) return m;
	                var n = loadAsDirectorySync(dir);
	                if (n) return n;
	            }
	        }
	    }
	};

	async.core = core_1;
	async.isCore = isCore;
	async.sync = sync$2;

	var resolve$1 = async;

	var extract_description = extractDescription;

	// Extracts description from contents of a readme file in markdown format
	function extractDescription (d) {
	  if (!d) return;
	  if (d === "ERROR: No README data found!") return;
	  // the first block of text before the first heading
	  // that isn't the first line heading
	  d = d.trim().split('\n');
	  for (var s = 0; d[s] && d[s].trim().match(/^(#|$)/); s ++);
	  var l = d.length;
	  for (var e = s + 1; e < l && d[e].trim(); e ++);
	  return d.slice(s, e).join(' ').trim()
	}

	var topLevel = {
		dependancies: "dependencies",
		dependecies: "dependencies",
		depdenencies: "dependencies",
		devEependencies: "devDependencies",
		depends: "dependencies",
		"dev-dependencies": "devDependencies",
		devDependences: "devDependencies",
		devDepenencies: "devDependencies",
		devdependencies: "devDependencies",
		repostitory: "repository",
		repo: "repository",
		prefereGlobal: "preferGlobal",
		hompage: "homepage",
		hampage: "homepage",
		autohr: "author",
		autor: "author",
		contributers: "contributors",
		publicationConfig: "publishConfig",
		script: "scripts"
	};
	var bugs$1 = {
		web: "url",
		name: "url"
	};
	var script = {
		server: "start",
		tests: "test"
	};
	var typos = {
		topLevel: topLevel,
		bugs: bugs$1,
		script: script
	};

	var fixer_1 = createCommonjsModule(function (module) {
	var isBuiltinModule = resolve$1.isCore;
	var depTypes = ["dependencies","devDependencies","optionalDependencies"];




	module.exports = {
	  // default warning function
	  warn: function() {},

	  fixRepositoryField: function(data) {
	    if (data.repositories) {
	      this.warn("repositories");
	      data.repository = data.repositories[0];
	    }
	    if (!data.repository) return this.warn("missingRepository")
	    if (typeof data.repository === "string") {
	      data.repository = {
	        type: "git",
	        url: data.repository
	      };
	    }
	    var r = data.repository.url || "";
	    if (r) {
	      var hosted = hostedGitInfo.fromUrl(r);
	      if (hosted) {
	        r = data.repository.url
	          = hosted.getDefaultRepresentation() == "shortcut" ? hosted.https() : hosted.toString();
	      }
	    }

	    if (r.match(/github.com\/[^\/]+\/[^\/]+\.git\.git$/)) {
	      this.warn("brokenGitUrl", r);
	    }
	  }

	, fixTypos: function(data) {
	    Object.keys(typos.topLevel).forEach(function (d) {
	      if (data.hasOwnProperty(d)) {
	        this.warn("typo", d, typos.topLevel[d]);
	      }
	    }, this);
	  }

	, fixScriptsField: function(data) {
	    if (!data.scripts) return
	    if (typeof data.scripts !== "object") {
	      this.warn("nonObjectScripts");
	      delete data.scripts;
	      return
	    }
	    Object.keys(data.scripts).forEach(function (k) {
	      if (typeof data.scripts[k] !== "string") {
	        this.warn("nonStringScript");
	        delete data.scripts[k];
	      } else if (typos.script[k] && !data.scripts[typos.script[k]]) {
	        this.warn("typo", k, typos.script[k], "scripts");
	      }
	    }, this);
	  }

	, fixFilesField: function(data) {
	    var files = data.files;
	    if (files && !Array.isArray(files)) {
	      this.warn("nonArrayFiles");
	      delete data.files;
	    } else if (data.files) {
	      data.files = data.files.filter(function(file) {
	        if (!file || typeof file !== "string") {
	          this.warn("invalidFilename", file);
	          return false
	        } else {
	          return true
	        }
	      }, this);
	    }
	  }

	, fixBinField: function(data) {
	    if (!data.bin) return;
	    if (typeof data.bin === "string") {
	      var b = {};
	      var match;
	      if (match = data.name.match(/^@[^/]+[/](.*)$/)) {
	        b[match[1]] = data.bin;
	      } else {
	        b[data.name] = data.bin;
	      }
	      data.bin = b;
	    }
	  }

	, fixManField: function(data) {
	    if (!data.man) return;
	    if (typeof data.man === "string") {
	      data.man = [ data.man ];
	    }
	  }
	, fixBundleDependenciesField: function(data) {
	    var bdd = "bundledDependencies";
	    var bd = "bundleDependencies";
	    if (data[bdd] && !data[bd]) {
	      data[bd] = data[bdd];
	      delete data[bdd];
	    }
	    if (data[bd] && !Array.isArray(data[bd])) {
	      this.warn("nonArrayBundleDependencies");
	      delete data[bd];
	    } else if (data[bd]) {
	      data[bd] = data[bd].filter(function(bd) {
	        if (!bd || typeof bd !== 'string') {
	          this.warn("nonStringBundleDependency", bd);
	          return false
	        } else {
	          if (!data.dependencies) {
	            data.dependencies = {};
	          }
	          if (!data.dependencies.hasOwnProperty(bd)) {
	            this.warn("nonDependencyBundleDependency", bd);
	            data.dependencies[bd] = "*";
	          }
	          return true
	        }
	      }, this);
	    }
	  }

	, fixDependencies: function(data, strict) {
	    objectifyDeps(data, this.warn);
	    addOptionalDepsToDeps(data, this.warn);
	    this.fixBundleDependenciesField(data)

	    ;['dependencies','devDependencies'].forEach(function(deps) {
	      if (!(deps in data)) return
	      if (!data[deps] || typeof data[deps] !== "object") {
	        this.warn("nonObjectDependencies", deps);
	        delete data[deps];
	        return
	      }
	      Object.keys(data[deps]).forEach(function (d) {
	        var r = data[deps][d];
	        if (typeof r !== 'string') {
	          this.warn("nonStringDependency", d, JSON.stringify(r));
	          delete data[deps][d];
	        }
	        var hosted = hostedGitInfo.fromUrl(data[deps][d]);
	        if (hosted) data[deps][d] = hosted.toString();
	      }, this);
	    }, this);
	  }

	, fixModulesField: function (data) {
	    if (data.modules) {
	      this.warn("deprecatedModules");
	      delete data.modules;
	    }
	  }

	, fixKeywordsField: function (data) {
	    if (typeof data.keywords === "string") {
	      data.keywords = data.keywords.split(/,\s+/);
	    }
	    if (data.keywords && !Array.isArray(data.keywords)) {
	      delete data.keywords;
	      this.warn("nonArrayKeywords");
	    } else if (data.keywords) {
	      data.keywords = data.keywords.filter(function(kw) {
	        if (typeof kw !== "string" || !kw) {
	          this.warn("nonStringKeyword");
	          return false
	        } else {
	          return true
	        }
	      }, this);
	    }
	  }

	, fixVersionField: function(data, strict) {
	    // allow "loose" semver 1.0 versions in non-strict mode
	    // enforce strict semver 2.0 compliance in strict mode
	    var loose = !strict;
	    if (!data.version) {
	      data.version = "";
	      return true
	    }
	    if (!semver.valid(data.version, loose)) {
	      throw new Error('Invalid version: "'+ data.version + '"')
	    }
	    data.version = semver.clean(data.version, loose);
	    return true
	  }

	, fixPeople: function(data) {
	    modifyPeople(data, unParsePerson);
	    modifyPeople(data, parsePerson);
	  }

	, fixNameField: function(data, options) {
	    if (typeof options === "boolean") options = {strict: options};
	    else if (typeof options === "undefined") options = {};
	    var strict = options.strict;
	    if (!data.name && !strict) {
	      data.name = "";
	      return
	    }
	    if (typeof data.name !== "string") {
	      throw new Error("name field must be a string.")
	    }
	    if (!strict)
	      data.name = data.name.trim();
	    ensureValidName(data.name, strict, options.allowLegacyCase);
	    if (isBuiltinModule(data.name))
	      this.warn("conflictingName", data.name);
	  }


	, fixDescriptionField: function (data) {
	    if (data.description && typeof data.description !== 'string') {
	      this.warn("nonStringDescription");
	      delete data.description;
	    }
	    if (data.readme && !data.description)
	      data.description = extract_description(data.readme);
	      if(data.description === undefined) delete data.description;
	    if (!data.description) this.warn("missingDescription");
	  }

	, fixReadmeField: function (data) {
	    if (!data.readme) {
	      this.warn("missingReadme");
	      data.readme = "ERROR: No README data found!";
	    }
	  }

	, fixBugsField: function(data) {
	    if (!data.bugs && data.repository && data.repository.url) {
	      var hosted = hostedGitInfo.fromUrl(data.repository.url);
	      if(hosted && hosted.bugs()) {
	        data.bugs = {url: hosted.bugs()};
	      }
	    }
	    else if(data.bugs) {
	      var emailRe = /^.+@.*\..+$/;
	      if(typeof data.bugs == "string") {
	        if(emailRe.test(data.bugs))
	          data.bugs = {email:data.bugs};
	        else if(url__default['default'].parse(data.bugs).protocol)
	          data.bugs = {url: data.bugs};
	        else
	          this.warn("nonEmailUrlBugsString");
	      }
	      else {
	        bugsTypos(data.bugs, this.warn);
	        var oldBugs = data.bugs;
	        data.bugs = {};
	        if(oldBugs.url) {
	          if(typeof(oldBugs.url) == "string" && url__default['default'].parse(oldBugs.url).protocol)
	            data.bugs.url = oldBugs.url;
	          else
	            this.warn("nonUrlBugsUrlField");
	        }
	        if(oldBugs.email) {
	          if(typeof(oldBugs.email) == "string" && emailRe.test(oldBugs.email))
	            data.bugs.email = oldBugs.email;
	          else
	            this.warn("nonEmailBugsEmailField");
	        }
	      }
	      if(!data.bugs.email && !data.bugs.url) {
	        delete data.bugs;
	        this.warn("emptyNormalizedBugs");
	      }
	    }
	  }

	, fixHomepageField: function(data) {
	    if (!data.homepage && data.repository && data.repository.url) {
	      var hosted = hostedGitInfo.fromUrl(data.repository.url);
	      if (hosted && hosted.docs()) data.homepage = hosted.docs();
	    }
	    if (!data.homepage) return

	    if(typeof data.homepage !== "string") {
	      this.warn("nonUrlHomepage");
	      return delete data.homepage
	    }
	    if(!url__default['default'].parse(data.homepage).protocol) {
	      data.homepage = "http://" + data.homepage;
	    }
	  }

	, fixLicenseField: function(data) {
	    if (!data.license) {
	      return this.warn("missingLicense")
	    } else {
	      if (
	        typeof(data.license) !== 'string' ||
	        data.license.length < 1 ||
	        data.license.trim() === ''
	      ) {
	        this.warn("invalidLicense");
	      } else {
	        if (!validateNpmPackageLicense(data.license).validForNewPackages)
	          this.warn("invalidLicense");
	      }
	    }
	  }
	};

	function isValidScopedPackageName(spec) {
	  if (spec.charAt(0) !== '@') return false

	  var rest = spec.slice(1).split('/');
	  if (rest.length !== 2) return false

	  return rest[0] && rest[1] &&
	    rest[0] === encodeURIComponent(rest[0]) &&
	    rest[1] === encodeURIComponent(rest[1])
	}

	function isCorrectlyEncodedName(spec) {
	  return !spec.match(/[\/@\s\+%:]/) &&
	    spec === encodeURIComponent(spec)
	}

	function ensureValidName (name, strict, allowLegacyCase) {
	  if (name.charAt(0) === "." ||
	      !(isValidScopedPackageName(name) || isCorrectlyEncodedName(name)) ||
	      (strict && (!allowLegacyCase) && name !== name.toLowerCase()) ||
	      name.toLowerCase() === "node_modules" ||
	      name.toLowerCase() === "favicon.ico") {
	        throw new Error("Invalid name: " + JSON.stringify(name))
	  }
	}

	function modifyPeople (data, fn) {
	  if (data.author) data.author = fn(data.author)
	  ;["maintainers", "contributors"].forEach(function (set) {
	    if (!Array.isArray(data[set])) return;
	    data[set] = data[set].map(fn);
	  });
	  return data
	}

	function unParsePerson (person) {
	  if (typeof person === "string") return person
	  var name = person.name || "";
	  var u = person.url || person.web;
	  var url = u ? (" ("+u+")") : "";
	  var e = person.email || person.mail;
	  var email = e ? (" <"+e+">") : "";
	  return name+email+url
	}

	function parsePerson (person) {
	  if (typeof person !== "string") return person
	  var name = person.match(/^([^\(<]+)/);
	  var url = person.match(/\(([^\)]+)\)/);
	  var email = person.match(/<([^>]+)>/);
	  var obj = {};
	  if (name && name[0].trim()) obj.name = name[0].trim();
	  if (email) obj.email = email[1];
	  if (url) obj.url = url[1];
	  return obj
	}

	function addOptionalDepsToDeps (data, warn) {
	  var o = data.optionalDependencies;
	  if (!o) return;
	  var d = data.dependencies || {};
	  Object.keys(o).forEach(function (k) {
	    d[k] = o[k];
	  });
	  data.dependencies = d;
	}

	function depObjectify (deps, type, warn) {
	  if (!deps) return {}
	  if (typeof deps === "string") {
	    deps = deps.trim().split(/[\n\r\s\t ,]+/);
	  }
	  if (!Array.isArray(deps)) return deps
	  warn("deprecatedArrayDependencies", type);
	  var o = {};
	  deps.filter(function (d) {
	    return typeof d === "string"
	  }).forEach(function(d) {
	    d = d.trim().split(/(:?[@\s><=])/);
	    var dn = d.shift();
	    var dv = d.join("");
	    dv = dv.trim();
	    dv = dv.replace(/^@/, "");
	    o[dn] = dv;
	  });
	  return o
	}

	function objectifyDeps (data, warn) {
	  depTypes.forEach(function (type) {
	    if (!data[type]) return;
	    data[type] = depObjectify(data[type], type, warn);
	  });
	}

	function bugsTypos(bugs, warn) {
	  if (!bugs) return
	  Object.keys(bugs).forEach(function (k) {
	    if (typos.bugs[k]) {
	      warn("typo", k, typos.bugs[k], "bugs");
	      bugs[typos.bugs[k]] = bugs[k];
	      delete bugs[k];
	    }
	  });
	}
	});

	var repositories = "'repositories' (plural) Not supported. Please pick one as the 'repository' field";
	var missingRepository = "No repository field.";
	var brokenGitUrl = "Probably broken git url: %s";
	var nonObjectScripts = "scripts must be an object";
	var nonStringScript = "script values must be string commands";
	var nonArrayFiles = "Invalid 'files' member";
	var invalidFilename = "Invalid filename in 'files' list: %s";
	var nonArrayBundleDependencies = "Invalid 'bundleDependencies' list. Must be array of package names";
	var nonStringBundleDependency = "Invalid bundleDependencies member: %s";
	var nonDependencyBundleDependency = "Non-dependency in bundleDependencies: %s";
	var nonObjectDependencies = "%s field must be an object";
	var nonStringDependency = "Invalid dependency: %s %s";
	var deprecatedArrayDependencies = "specifying %s as array is deprecated";
	var deprecatedModules = "modules field is deprecated";
	var nonArrayKeywords = "keywords should be an array of strings";
	var nonStringKeyword = "keywords should be an array of strings";
	var conflictingName = "%s is also the name of a node core module.";
	var nonStringDescription = "'description' field should be a string";
	var missingDescription = "No description";
	var missingReadme = "No README data";
	var missingLicense = "No license field.";
	var nonEmailUrlBugsString = "Bug string field must be url, email, or {email,url}";
	var nonUrlBugsUrlField = "bugs.url field must be a string url. Deleted.";
	var nonEmailBugsEmailField = "bugs.email field must be a string email. Deleted.";
	var emptyNormalizedBugs = "Normalized value of bugs field is an empty object. Deleted.";
	var nonUrlHomepage = "homepage field must be a string url. Deleted.";
	var invalidLicense = "license should be a valid SPDX license expression";
	var typo = "%s should probably be %s.";
	var messages$1 = {
		repositories: repositories,
		missingRepository: missingRepository,
		brokenGitUrl: brokenGitUrl,
		nonObjectScripts: nonObjectScripts,
		nonStringScript: nonStringScript,
		nonArrayFiles: nonArrayFiles,
		invalidFilename: invalidFilename,
		nonArrayBundleDependencies: nonArrayBundleDependencies,
		nonStringBundleDependency: nonStringBundleDependency,
		nonDependencyBundleDependency: nonDependencyBundleDependency,
		nonObjectDependencies: nonObjectDependencies,
		nonStringDependency: nonStringDependency,
		deprecatedArrayDependencies: deprecatedArrayDependencies,
		deprecatedModules: deprecatedModules,
		nonArrayKeywords: nonArrayKeywords,
		nonStringKeyword: nonStringKeyword,
		conflictingName: conflictingName,
		nonStringDescription: nonStringDescription,
		missingDescription: missingDescription,
		missingReadme: missingReadme,
		missingLicense: missingLicense,
		nonEmailUrlBugsString: nonEmailUrlBugsString,
		nonUrlBugsUrlField: nonUrlBugsUrlField,
		nonEmailBugsEmailField: nonEmailBugsEmailField,
		emptyNormalizedBugs: emptyNormalizedBugs,
		nonUrlHomepage: nonUrlHomepage,
		invalidLicense: invalidLicense,
		typo: typo
	};

	var make_warning = function() {
	  var args = Array.prototype.slice.call(arguments, 0);
	  var warningName = args.shift();
	  if (warningName == "typo") {
	    return makeTypoWarning.apply(null,args)
	  }
	  else {
	    var msgTemplate = messages$1[warningName] ? messages$1[warningName] : warningName + ": '%s'";
	    args.unshift(msgTemplate);
	    return util__default['default'].format.apply(null, args)
	  }
	};

	function makeTypoWarning (providedName, probableName, field) {
	  if (field) {
	    providedName = field + "['" + providedName + "']";
	    probableName = field + "['" + probableName + "']";
	  }
	  return util__default['default'].format(messages$1.typo, providedName, probableName)
	}

	var normalize_1 = normalize;


	normalize.fixer = fixer_1;



	var fieldsToFix = ['name','version','description','repository','modules','scripts'
	                  ,'files','bin','man','bugs','keywords','readme','homepage','license'];
	var otherThingsToFix = ['dependencies','people', 'typos'];

	var thingsToFix = fieldsToFix.map(function(fieldName) {
	  return ucFirst(fieldName) + "Field"
	});
	// two ways to do this in CoffeeScript on only one line, sub-70 chars:
	// thingsToFix = fieldsToFix.map (name) -> ucFirst(name) + "Field"
	// thingsToFix = (ucFirst(name) + "Field" for name in fieldsToFix)
	thingsToFix = thingsToFix.concat(otherThingsToFix);

	function normalize (data, warn, strict) {
	  if(warn === true) warn = null, strict = true;
	  if(!strict) strict = false;
	  if(!warn || data.private) warn = function(msg) { /* noop */ };

	  if (data.scripts &&
	      data.scripts.install === "node-gyp rebuild" &&
	      !data.scripts.preinstall) {
	    data.gypfile = true;
	  }
	  fixer_1.warn = function() { warn(make_warning.apply(null, arguments)); };
	  thingsToFix.forEach(function(thingName) {
	    fixer_1["fix" + ucFirst(thingName)](data, strict);
	  });
	  data._id = data.name + "@" + data.version;
	}

	function ucFirst (string) {
	  return string.charAt(0).toUpperCase() + string.slice(1);
	}

	var readPkg = (fp, opts) => {
		if (typeof fp !== 'string') {
			opts = fp;
			fp = '.';
		}

		opts = opts || {};

		return pathType.dir(fp)
			.then(isDir => {
				if (isDir) {
					fp = path__default['default'].join(fp, 'package.json');
				}

				return loadJsonFile(fp);
			})
			.then(x => {
				if (opts.normalize !== false) {
					normalize_1(x);
				}

				return x;
			});
	};

	var sync$1 = (fp, opts) => {
		if (typeof fp !== 'string') {
			opts = fp;
			fp = '.';
		}

		opts = opts || {};
		fp = pathType.dirSync(fp) ? path__default['default'].join(fp, 'package.json') : fp;

		const x = loadJsonFile.sync(fp);

		if (opts.normalize !== false) {
			normalize_1(x);
		}

		return x;
	};
	readPkg.sync = sync$1;

	var readPkgUp = opts => {
		return findUp('package.json', opts).then(fp => {
			if (!fp) {
				return {};
			}

			return readPkg(fp, opts).then(pkg => ({pkg, path: fp}));
		});
	};

	var sync = opts => {
		const fp = findUp.sync('package.json', opts);

		if (!fp) {
			return {};
		}

		return {
			pkg: readPkg.sync(fp, opts),
			path: fp
		};
	};
	readPkgUp.sync = sync;

	var callsites = function () {
		var _ = Error.prepareStackTrace;
		Error.prepareStackTrace = function (_, stack) {
			return stack;
		};
		var stack = new Error().stack.slice(1);
		Error.prepareStackTrace = _;
		return stack;
	};

	var parentModule = function (filepath) {
		var stacks = callsites();

		if (!filepath) {
			return stacks[2].getFileName();
		}

		var seenVal = false;

		// skip the first stack as it's this function
		for (var i = 1; i < stacks.length; i++) {
			var parentFilepath = stacks[i].getFileName();

			if (parentFilepath === filepath) {
				seenVal = true;
				continue;
			}

			// skip native modules
			if (parentFilepath === 'module.js') {
				continue;
			}

			if (seenVal && parentFilepath !== filepath) {
				return parentFilepath;
			}
		}
	};

	function service$1 () {
	  const callerPath = parentModule();
	  const parentPath = parentModule(callerPath);
	  const cwd = path__default['default'].dirname(parentPath || callerPath);
	  const pkg = readPkgUp.sync({ cwd }).pkg || {};

	  return pkg.name
	}

	var service_1 = service$1;

	function request (options, callback) {
	  options = Object.assign({
	    headers: {},
	    data: [],
	    timeout: 2000
	  }, options);

	  const data = [].concat(options.data);

	  options.headers['Content-Length'] = byteLength$1(data);

	  return new Promise((resolve, reject) => {
	    const client = options.protocol === 'https:' ? https__default['default'] : http__default['default'];
	    const req = client.request(options, res => {
	      let data = '';

	      res.on('data', chunk => { data += chunk; });
	      res.on('end', () => {
	        if (res.statusCode >= 200 && res.statusCode <= 299) {
	          resolve(data);
	        } else {
	          const error = new Error(http__default['default'].STATUS_CODES[res.statusCode]);
	          error.status = res.statusCode;

	          reject(new Error(`Error from the agent: ${res.statusCode} ${http__default['default'].STATUS_CODES[res.statusCode]}`));
	        }
	      });
	    });

	    req.setTimeout(options.timeout, req.abort);
	    req.on('error', e => reject(new Error(`Network error trying to reach the agent: ${e.message}`)));

	    data.forEach(buffer => req.write(buffer));

	    req.end();
	  })
	}

	function byteLength$1 (data) {
	  if (data.length === 0) {
	    return 0
	  }

	  return data.reduce((prev, next) => {
	    if (Buffer.isBuffer(next)) {
	      return prev + next.length
	    }
	    return prev + Buffer.byteLength(next, 'utf8')
	  }, 0)
	}

	var request_1 = request;

	const Buffer$7 = safeBuffer.Buffer;

	var msgpack = {
	  prefix (array) {
	    let buffer;

	    if (array.length <= 0xf) { // fixarray
	      buffer = Buffer$7.alloc(1);
	      buffer.fill(0x90 + array.length);
	    } else if (array.length <= 0xffff) { // array 16
	      buffer = Buffer$7.alloc(3);
	      buffer.fill(0xdc, 0, 1);
	      buffer.writeUInt16BE(array.length, 1);
	    } else { // array 32
	      buffer = Buffer$7.alloc(5);
	      buffer.fill(0xdd, 0, 1);
	      buffer.writeUInt32BE(array.length, 1);
	    }

	    return [buffer].concat(array)
	  }
	};

	const lookup$1 = require$$0__default$4['default'].lookup; // cache to avoid instrumentation
	const Buffer$6 = safeBuffer.Buffer;

	const MAX_BUFFER_SIZE$1 = 1024; // limit from the agent

	class Client {
	  constructor (options) {
	    options = options || {};

	    this._host = options.host || 'localhost';
	    this._port = options.port || 8125;
	    this._prefix = options.prefix || '';
	    this._tags = options.tags || [];
	    this._queue = [];
	    this._buffer = '';
	    this._offset = 0;
	    this._udp4 = this._socket('udp4');
	    this._udp6 = this._socket('udp6');
	  }

	  gauge (stat, value, tags) {
	    this._add(stat, value, 'g', tags);
	  }

	  increment (stat, value, tags) {
	    this._add(stat, value, 'c', tags);
	  }

	  flush () {
	    const queue = this._enqueue();

	    if (this._queue.length === 0) return

	    this._queue = [];

	    lookup$1(this._host, (err, address, family) => {
	      if (err === null) {
	        queue.forEach(buffer => this._send(address, family, buffer));
	      }
	    });
	  }

	  _send (address, family, buffer) {
	    const socket = family === 6 ? this._udp6 : this._udp4;

	    socket.send(buffer, 0, buffer.length, this._port, address);
	  }

	  _add (stat, value, type, tags) {
	    const message = `${this._prefix + stat}:${value}|${type}`;

	    tags = tags ? this._tags.concat(tags) : this._tags;

	    if (tags.length > 0) {
	      this._write(`${message}|#${tags.join(',')}\n`);
	    } else {
	      this._write(`${message}\n`);
	    }
	  }

	  _write (message) {
	    const offset = Buffer$6.byteLength(message);

	    if (this._offset + offset > MAX_BUFFER_SIZE$1) {
	      this._enqueue();
	    }

	    this._offset += offset;
	    this._buffer += message;
	  }

	  _enqueue () {
	    if (this._offset > 0) {
	      this._queue.push(Buffer$6.from(this._buffer));
	      this._buffer = '';
	      this._offset = 0;
	    }

	    return this._queue
	  }

	  _socket (type) {
	    const socket = dgram__default['default'].createSocket(type);

	    socket.on('error', () => {});
	    socket.unref();

	    return socket
	  }
	}

	var dogstatsd = Client;

	/**
	 * lodash (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */

	/** Used as the `TypeError` message for "Functions" methods. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

	/** `Object#toString` result references. */
	var funcTag$2 = '[object Function]',
	    genTag$2 = '[object GeneratorFunction]';

	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	 */
	var reRegExpChar$1 = /[\\^$.*+?()[\]{}|]/g;

	/** Used to detect host constructors (Safari). */
	var reIsHostCtor$1 = /^\[object .+?Constructor\]$/;

	/** Detect free variable `global` from Node.js. */
	var freeGlobal$3 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

	/** Detect free variable `self`. */
	var freeSelf$3 = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root$3 = freeGlobal$3 || freeSelf$3 || Function('return this')();

	/**
	 * Gets the value at `key` of `object`.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {string} key The key of the property to get.
	 * @returns {*} Returns the property value.
	 */
	function getValue$1(object, key) {
	  return object == null ? undefined : object[key];
	}

	/**
	 * Checks if `value` is a host object in IE < 9.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
	 */
	function isHostObject$1(value) {
	  // Many host objects are `Object` objects that can coerce to strings
	  // despite having improperly defined `toString` methods.
	  var result = false;
	  if (value != null && typeof value.toString != 'function') {
	    try {
	      result = !!(value + '');
	    } catch (e) {}
	  }
	  return result;
	}

	/** Used for built-in method references. */
	var arrayProto$1 = Array.prototype,
	    funcProto$1 = Function.prototype,
	    objectProto$3 = Object.prototype;

	/** Used to detect overreaching core-js shims. */
	var coreJsData$1 = root$3['__core-js_shared__'];

	/** Used to detect methods masquerading as native. */
	var maskSrcKey$1 = (function() {
	  var uid = /[^.]+$/.exec(coreJsData$1 && coreJsData$1.keys && coreJsData$1.keys.IE_PROTO || '');
	  return uid ? ('Symbol(src)_1.' + uid) : '';
	}());

	/** Used to resolve the decompiled source of functions. */
	var funcToString$1 = funcProto$1.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty$2 = objectProto$3.hasOwnProperty;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString$3 = objectProto$3.toString;

	/** Used to detect if a method is native. */
	var reIsNative$1 = RegExp('^' +
	  funcToString$1.call(hasOwnProperty$2).replace(reRegExpChar$1, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/** Built-in value references. */
	var splice$1 = arrayProto$1.splice;

	/* Built-in method references that are verified to be native. */
	var Map$2 = getNative$1(root$3, 'Map'),
	    nativeCreate$1 = getNative$1(Object, 'create');

	/**
	 * Creates a hash object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Hash$1(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	/**
	 * Removes all key-value entries from the hash.
	 *
	 * @private
	 * @name clear
	 * @memberOf Hash
	 */
	function hashClear$1() {
	  this.__data__ = nativeCreate$1 ? nativeCreate$1(null) : {};
	}

	/**
	 * Removes `key` and its value from the hash.
	 *
	 * @private
	 * @name delete
	 * @memberOf Hash
	 * @param {Object} hash The hash to modify.
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function hashDelete$1(key) {
	  return this.has(key) && delete this.__data__[key];
	}

	/**
	 * Gets the hash value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Hash
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function hashGet$1(key) {
	  var data = this.__data__;
	  if (nativeCreate$1) {
	    var result = data[key];
	    return result === HASH_UNDEFINED$1 ? undefined : result;
	  }
	  return hasOwnProperty$2.call(data, key) ? data[key] : undefined;
	}

	/**
	 * Checks if a hash value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Hash
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function hashHas$1(key) {
	  var data = this.__data__;
	  return nativeCreate$1 ? data[key] !== undefined : hasOwnProperty$2.call(data, key);
	}

	/**
	 * Sets the hash `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Hash
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the hash instance.
	 */
	function hashSet$1(key, value) {
	  var data = this.__data__;
	  data[key] = (nativeCreate$1 && value === undefined) ? HASH_UNDEFINED$1 : value;
	  return this;
	}

	// Add methods to `Hash`.
	Hash$1.prototype.clear = hashClear$1;
	Hash$1.prototype['delete'] = hashDelete$1;
	Hash$1.prototype.get = hashGet$1;
	Hash$1.prototype.has = hashHas$1;
	Hash$1.prototype.set = hashSet$1;

	/**
	 * Creates an list cache object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function ListCache$1(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	/**
	 * Removes all key-value entries from the list cache.
	 *
	 * @private
	 * @name clear
	 * @memberOf ListCache
	 */
	function listCacheClear$1() {
	  this.__data__ = [];
	}

	/**
	 * Removes `key` and its value from the list cache.
	 *
	 * @private
	 * @name delete
	 * @memberOf ListCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function listCacheDelete$1(key) {
	  var data = this.__data__,
	      index = assocIndexOf$1(data, key);

	  if (index < 0) {
	    return false;
	  }
	  var lastIndex = data.length - 1;
	  if (index == lastIndex) {
	    data.pop();
	  } else {
	    splice$1.call(data, index, 1);
	  }
	  return true;
	}

	/**
	 * Gets the list cache value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf ListCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function listCacheGet$1(key) {
	  var data = this.__data__,
	      index = assocIndexOf$1(data, key);

	  return index < 0 ? undefined : data[index][1];
	}

	/**
	 * Checks if a list cache value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf ListCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function listCacheHas$1(key) {
	  return assocIndexOf$1(this.__data__, key) > -1;
	}

	/**
	 * Sets the list cache `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf ListCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the list cache instance.
	 */
	function listCacheSet$1(key, value) {
	  var data = this.__data__,
	      index = assocIndexOf$1(data, key);

	  if (index < 0) {
	    data.push([key, value]);
	  } else {
	    data[index][1] = value;
	  }
	  return this;
	}

	// Add methods to `ListCache`.
	ListCache$1.prototype.clear = listCacheClear$1;
	ListCache$1.prototype['delete'] = listCacheDelete$1;
	ListCache$1.prototype.get = listCacheGet$1;
	ListCache$1.prototype.has = listCacheHas$1;
	ListCache$1.prototype.set = listCacheSet$1;

	/**
	 * Creates a map cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function MapCache$1(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	/**
	 * Removes all key-value entries from the map.
	 *
	 * @private
	 * @name clear
	 * @memberOf MapCache
	 */
	function mapCacheClear$1() {
	  this.__data__ = {
	    'hash': new Hash$1,
	    'map': new (Map$2 || ListCache$1),
	    'string': new Hash$1
	  };
	}

	/**
	 * Removes `key` and its value from the map.
	 *
	 * @private
	 * @name delete
	 * @memberOf MapCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function mapCacheDelete$1(key) {
	  return getMapData$1(this, key)['delete'](key);
	}

	/**
	 * Gets the map value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf MapCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function mapCacheGet$1(key) {
	  return getMapData$1(this, key).get(key);
	}

	/**
	 * Checks if a map value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf MapCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function mapCacheHas$1(key) {
	  return getMapData$1(this, key).has(key);
	}

	/**
	 * Sets the map `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf MapCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the map cache instance.
	 */
	function mapCacheSet$1(key, value) {
	  getMapData$1(this, key).set(key, value);
	  return this;
	}

	// Add methods to `MapCache`.
	MapCache$1.prototype.clear = mapCacheClear$1;
	MapCache$1.prototype['delete'] = mapCacheDelete$1;
	MapCache$1.prototype.get = mapCacheGet$1;
	MapCache$1.prototype.has = mapCacheHas$1;
	MapCache$1.prototype.set = mapCacheSet$1;

	/**
	 * Gets the index at which the `key` is found in `array` of key-value pairs.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} key The key to search for.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function assocIndexOf$1(array, key) {
	  var length = array.length;
	  while (length--) {
	    if (eq$1(array[length][0], key)) {
	      return length;
	    }
	  }
	  return -1;
	}

	/**
	 * The base implementation of `_.isNative` without bad shim checks.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function,
	 *  else `false`.
	 */
	function baseIsNative$1(value) {
	  if (!isObject$4(value) || isMasked$1(value)) {
	    return false;
	  }
	  var pattern = (isFunction$3(value) || isHostObject$1(value)) ? reIsNative$1 : reIsHostCtor$1;
	  return pattern.test(toSource$1(value));
	}

	/**
	 * Gets the data for `map`.
	 *
	 * @private
	 * @param {Object} map The map to query.
	 * @param {string} key The reference key.
	 * @returns {*} Returns the map data.
	 */
	function getMapData$1(map, key) {
	  var data = map.__data__;
	  return isKeyable$1(key)
	    ? data[typeof key == 'string' ? 'string' : 'hash']
	    : data.map;
	}

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative$1(object, key) {
	  var value = getValue$1(object, key);
	  return baseIsNative$1(value) ? value : undefined;
	}

	/**
	 * Checks if `value` is suitable for use as unique object key.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	 */
	function isKeyable$1(value) {
	  var type = typeof value;
	  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
	    ? (value !== '__proto__')
	    : (value === null);
	}

	/**
	 * Checks if `func` has its source masked.
	 *
	 * @private
	 * @param {Function} func The function to check.
	 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	 */
	function isMasked$1(func) {
	  return !!maskSrcKey$1 && (maskSrcKey$1 in func);
	}

	/**
	 * Converts `func` to its source code.
	 *
	 * @private
	 * @param {Function} func The function to process.
	 * @returns {string} Returns the source code.
	 */
	function toSource$1(func) {
	  if (func != null) {
	    try {
	      return funcToString$1.call(func);
	    } catch (e) {}
	    try {
	      return (func + '');
	    } catch (e) {}
	  }
	  return '';
	}

	/**
	 * Creates a function that memoizes the result of `func`. If `resolver` is
	 * provided, it determines the cache key for storing the result based on the
	 * arguments provided to the memoized function. By default, the first argument
	 * provided to the memoized function is used as the map cache key. The `func`
	 * is invoked with the `this` binding of the memoized function.
	 *
	 * **Note:** The cache is exposed as the `cache` property on the memoized
	 * function. Its creation may be customized by replacing the `_.memoize.Cache`
	 * constructor with one whose instances implement the
	 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
	 * method interface of `delete`, `get`, `has`, and `set`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to have its output memoized.
	 * @param {Function} [resolver] The function to resolve the cache key.
	 * @returns {Function} Returns the new memoized function.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': 2 };
	 * var other = { 'c': 3, 'd': 4 };
	 *
	 * var values = _.memoize(_.values);
	 * values(object);
	 * // => [1, 2]
	 *
	 * values(other);
	 * // => [3, 4]
	 *
	 * object.a = 2;
	 * values(object);
	 * // => [1, 2]
	 *
	 * // Modify the result cache.
	 * values.cache.set(object, ['a', 'b']);
	 * values(object);
	 * // => ['a', 'b']
	 *
	 * // Replace `_.memoize.Cache`.
	 * _.memoize.Cache = WeakMap;
	 */
	function memoize(func, resolver) {
	  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  var memoized = function() {
	    var args = arguments,
	        key = resolver ? resolver.apply(this, args) : args[0],
	        cache = memoized.cache;

	    if (cache.has(key)) {
	      return cache.get(key);
	    }
	    var result = func.apply(this, args);
	    memoized.cache = cache.set(key, result);
	    return result;
	  };
	  memoized.cache = new (memoize.Cache || MapCache$1);
	  return memoized;
	}

	// Assign cache to `_.memoize`.
	memoize.Cache = MapCache$1;

	/**
	 * Performs a
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * comparison between two values to determine if they are equivalent.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.eq(object, object);
	 * // => true
	 *
	 * _.eq(object, other);
	 * // => false
	 *
	 * _.eq('a', 'a');
	 * // => true
	 *
	 * _.eq('a', Object('a'));
	 * // => false
	 *
	 * _.eq(NaN, NaN);
	 * // => true
	 */
	function eq$1(value, other) {
	  return value === other || (value !== value && other !== other);
	}

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction$3(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 8-9 which returns 'object' for typed array and other constructors.
	  var tag = isObject$4(value) ? objectToString$3.call(value) : '';
	  return tag == funcTag$2 || tag == genTag$2;
	}

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject$4(value) {
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	var lodash_memoize = memoize;

	const _default$9 = {
	  debug: message => console.log(message), /* eslint-disable-line no-console */
	  error: err => console.error(err) /* eslint-disable-line no-console */
	};

	let _logger;
	let _enabled;
	let _deprecate;

	const log$2 = {
	  use (logger) {
	    if (logger && logger.debug instanceof Function && logger.error instanceof Function) {
	      _logger = logger;
	    }

	    return this
	  },

	  toggle (enabled) {
	    _enabled = enabled;

	    return this
	  },

	  reset () {
	    _logger = _default$9;
	    _enabled = false;
	    _deprecate = lodash_memoize((code, message) => {
	      _logger.error(message);
	      return this
	    });

	    return this
	  },

	  debug (message) {
	    if (_enabled) {
	      _logger.debug(message instanceof Function ? message() : message);
	    }

	    return this
	  },

	  error (err) {
	    if (_enabled) {
	      if (err instanceof Function) {
	        err = err();
	      }

	      _logger.error(typeof err === 'string' ? new Error(err) : err);
	    }

	    return this
	  },

	  deprecate (code, message) {
	    return _deprecate(code, message)
	  }
	};

	log$2.reset();

	var log_1$1 = log$2;

	// Workaround to fix webpack's build warnings: 'the request of a dependency is an expression'
	var runtimeRequire = typeof __webpack_require__ === 'function' ? __non_webpack_require__ : commonjsRequire; // eslint-disable-line

	var prebuildsOnly = !!process.env.PREBUILDS_ONLY;
	var abi = process.versions.modules; // TODO: support old node where this is undef
	var runtime = isElectron() ? 'electron' : 'node';
	var arch = os__default['default'].arch();
	var platform$1 = os__default['default'].platform();
	var libc = process.env.LIBC || (isAlpine(platform$1) ? 'musl' : 'glibc');
	var armv = process.env.ARM_VERSION || (arch === 'arm64' ? '8' : process.config.variables.arm_version) || '';

	var nodeGypBuild = load;

	function load (dir) {
	  return runtimeRequire(load.path(dir))
	}

	load.path = function (dir) {
	  dir = path__default['default'].resolve(dir || '.');

	  try {
	    var name = runtimeRequire(path__default['default'].join(dir, 'package.json')).name.toUpperCase().replace(/-/g, '_');
	    if (process.env[name + '_PREBUILD']) dir = process.env[name + '_PREBUILD'];
	  } catch (err) {}

	  if (!prebuildsOnly) {
	    var release = getFirst(path__default['default'].join(dir, 'build/Release'), matchBuild);
	    if (release) return release

	    var debug = getFirst(path__default['default'].join(dir, 'build/Debug'), matchBuild);
	    if (debug) return debug
	  }

	  var names = [platform$1 + '-' + arch];
	  if (libc) names.push(platform$1 + libc + '-' + arch);

	  if ((arch === 'arm' || arch === 'arm64') && armv) {
	    names.forEach(function (name) {
	      names.push(name + '-v' + armv);
	    });
	  }

	  // Find most specific flavor first
	  for (var i = names.length; i--;) {
	    var prebuild = getFirst(path__default['default'].join(dir, 'prebuilds/' + names[i]), matchPrebuild);
	    if (prebuild) return prebuild

	    var napiRuntime = getFirst(path__default['default'].join(dir, 'prebuilds/' + names[i]), matchNapiRuntime);
	    if (napiRuntime) return napiRuntime

	    var napi = getFirst(path__default['default'].join(dir, 'prebuilds/' + names[i]), matchNapi);
	    if (napi) return napi
	  }

	  throw new Error('No native build was found for runtime=' + runtime + ' abi=' + abi + ' platform=' + platform$1 + libc + ' arch=' + arch)
	};

	function getFirst (dir, filter) {
	  try {
	    var files = fs__default['default'].readdirSync(dir).filter(filter);
	    return files[0] && path__default['default'].join(dir, files[0])
	  } catch (err) {
	    return null
	  }
	}

	function matchNapiRuntime (name) {
	  return name === runtime + '-napi.node'
	}

	function matchNapi (name) {
	  return name === 'node-napi.node'
	}

	function matchPrebuild (name) {
	  var parts = name.split('-');
	  return parts[0] === runtime && parts[1] === abi + '.node'
	}

	function matchBuild (name) {
	  return /\.node$/.test(name)
	}

	function isElectron () {
	  if (process.versions && process.versions.electron) return true
	  if (process.env.ELECTRON_RUN_AS_NODE) return true
	  return typeof window !== 'undefined' && window.process && window.process.type === 'renderer'
	}

	function isAlpine (platform) {
	  return platform === 'linux' && fs__default['default'].existsSync('/etc/alpine-release')
	}

	// TODO: capture every second and flush every 10 seconds






	const INTERVAL = 10 * 1000;

	let nativeMetrics = null;

	let metrics;
	let interval;
	let client$1;
	let time;
	let cpuUsage;
	let counters;

	reset();

	var metrics_1 = function () {
	  return metrics || (metrics = { // cache the metrics instance
	    start: (options) => {
	      const tags = [
	        `service:${this._config.service}`,
	        `runtime-id:${this.runtime().id()}`
	      ];

	      if (this._config.env) {
	        tags.push(`env:${this._config.env}`);
	      }

	      try {
	        nativeMetrics = nodeGypBuild(path__default['default'].join(__dirname, '..', '..', '..'));
	        nativeMetrics.start();
	      } catch (e) {
	        log_1$1.error('Unable to load native metrics module. Some metrics will not be available.');
	      }

	      client$1 = new dogstatsd({
	        host: this._config.hostname,
	        port: this._config.dogstatsd.port,
	        prefix: 'runtime.node.',
	        tags
	      });

	      time = process.hrtime();

	      if (nativeMetrics) {
	        interval = setInterval(() => {
	          captureCommonMetrics();
	          captureNativeMetrics();
	          client$1.flush();
	        }, INTERVAL);
	      } else {
	        cpuUsage = process.cpuUsage();

	        interval = setInterval(() => {
	          captureCommonMetrics();
	          captureCpuUsage();
	          captureHeapSpace();
	          client$1.flush();
	        }, INTERVAL);
	      }

	      interval.unref();
	    },

	    stop: () => {
	      if (nativeMetrics) {
	        nativeMetrics.stop();
	      }

	      clearInterval(interval);
	      reset();
	    },

	    track (span) {
	      if (nativeMetrics) {
	        const handle = nativeMetrics.track(span);

	        return {
	          finish: () => nativeMetrics.finish(handle)
	        }
	      }

	      return { finish: () => {} }
	    },

	    count (name, count, tag) {
	      if (!client$1) return
	      if (!counters[name]) {
	        counters[name] = tag ? Object.create(null) : 0;
	      }

	      if (tag) {
	        counters[name][tag] = (counters[name][tag] || 0) + count;
	      } else {
	        counters[name] = (counters[name] || 0) + count;
	      }
	    },

	    increment (name, tag) {
	      this.count(name, 1, tag);
	    },

	    decrement (name, tag) {
	      this.count(name, -1, tag);
	    }
	  })
	};

	function reset () {
	  interval = null;
	  client$1 = null;
	  time = null;
	  cpuUsage = null;
	  counters = {};
	}

	function captureCpuUsage () {
	  if (!process.cpuUsage) return

	  const elapsedTime = process.hrtime(time);
	  const elapsedUsage = process.cpuUsage(cpuUsage);

	  time = process.hrtime();
	  cpuUsage = process.cpuUsage();

	  const elapsedMs = elapsedTime[0] * 1000 + elapsedTime[1] / 1000000;
	  const userPercent = 100 * elapsedUsage.user / 1000 / elapsedMs;
	  const systemPercent = 100 * elapsedUsage.system / 1000 / elapsedMs;
	  const totalPercent = userPercent + systemPercent;

	  client$1.gauge('cpu.system', systemPercent.toFixed(2));
	  client$1.gauge('cpu.user', userPercent.toFixed(2));
	  client$1.gauge('cpu.total', totalPercent.toFixed(2));
	}

	function captureMemoryUsage () {
	  const stats = process.memoryUsage();

	  client$1.gauge('mem.heap_total', stats.heapTotal);
	  client$1.gauge('mem.heap_used', stats.heapUsed);
	  client$1.gauge('mem.rss', stats.rss);

	  stats.external && client$1.gauge('mem.external', stats.external);
	}

	function captureProcess () {
	  client$1.gauge('process.uptime', Math.round(process.uptime()));
	}

	function captureHeapStats () {
	  const stats = v8__default['default'].getHeapStatistics();

	  client$1.gauge('heap.total_heap_size', stats.total_heap_size);
	  client$1.gauge('heap.total_heap_size_executable', stats.total_heap_size_executable);
	  client$1.gauge('heap.total_physical_size', stats.total_physical_size);
	  client$1.gauge('heap.total_available_size', stats.total_available_size);
	  client$1.gauge('heap.heap_size_limit', stats.heap_size_limit);

	  stats.malloced_memory && client$1.gauge('heap.malloced_memory', stats.malloced_memory);
	  stats.peak_malloced_memory && client$1.gauge('heap.peak_malloced_memory', stats.peak_malloced_memory);
	}

	function captureHeapSpace () {
	  if (!v8__default['default'].getHeapSpaceStatistics) return

	  const stats = v8__default['default'].getHeapSpaceStatistics();

	  for (let i = 0, l = stats.length; i < l; i++) {
	    const tags = [`space:${stats[i].space_name}`];

	    client$1.gauge('heap.size.by.space', stats[i].space_size, tags);
	    client$1.gauge('heap.used_size.by.space', stats[i].space_used_size, tags);
	    client$1.gauge('heap.available_size.by.space', stats[i].space_available_size, tags);
	    client$1.gauge('heap.physical_size.by.space', stats[i].physical_space_size, tags);
	  }
	}

	function captureCounters () {
	  Object.keys(counters).forEach(name => {
	    if (typeof counters[name] === 'object') {
	      Object.keys(counters[name]).forEach(tag => {
	        client$1.gauge(name, counters[name][tag], [tag]);
	      });
	    } else {
	      client$1.gauge(name, counters[name]);
	    }
	  });
	}

	function captureCommonMetrics () {
	  captureMemoryUsage();
	  captureProcess();
	  captureHeapStats();
	  captureCounters();
	}

	function captureNativeMetrics () {
	  const stats = nativeMetrics.stats();
	  const spaces = stats.heap.spaces;
	  const elapsedTime = process.hrtime(time);

	  time = process.hrtime();

	  const elapsedUs = elapsedTime[0] * 1e6 + elapsedTime[1] / 1e3;
	  const userPercent = 100 * stats.cpu.user / elapsedUs;
	  const systemPercent = 100 * stats.cpu.system / elapsedUs;
	  const totalPercent = userPercent + systemPercent;

	  client$1.gauge('cpu.system', systemPercent.toFixed(2));
	  client$1.gauge('cpu.user', userPercent.toFixed(2));
	  client$1.gauge('cpu.total', totalPercent.toFixed(2));

	  histogram('event_loop.delay', stats.eventLoop);

	  Object.keys(stats.gc).forEach(type => {
	    if (type === 'all') {
	      histogram('gc.pause', stats.gc[type]);
	    } else {
	      histogram('gc.pause.by.type', stats.gc[type]);
	    }
	  });

	  client$1.gauge('spans.finished', stats.spans.total.finished);
	  client$1.gauge('spans.unfinished', stats.spans.total.unfinished);

	  for (let i = 0, l = spaces.length; i < l; i++) {
	    const tags = [`heap_space:${spaces[i].space_name}`];

	    client$1.gauge('heap.size.by.space', spaces[i].space_size, tags);
	    client$1.gauge('heap.used_size.by.space', spaces[i].space_used_size, tags);
	    client$1.gauge('heap.available_size.by.space', spaces[i].space_available_size, tags);
	    client$1.gauge('heap.physical_size.by.space', spaces[i].physical_space_size, tags);
	  }

	  if (stats.spans.operations) {
	    const operations = stats.spans.operations;

	    Object.keys(operations.finished).forEach(name => {
	      client$1.gauge('spans.finished.by.name', operations.finished[name], [`span_name:${name}`]);
	    });

	    Object.keys(operations.unfinished).forEach(name => {
	      client$1.gauge('spans.unfinished.by.name', operations.unfinished[name], [`span_name:${name}`]);
	    });
	  }
	}

	function histogram (name, stats) {
	  client$1.gauge(`${name}.min`, stats.min);
	  client$1.gauge(`${name}.max`, stats.max);
	  client$1.increment(`${name}.sum`, stats.sum);
	  client$1.gauge(`${name}.avg`, stats.avg);
	  client$1.increment(`${name}.count`, stats.count);
	  client$1.gauge(`${name}.median`, stats.median);
	  client$1.gauge(`${name}.95percentile`, stats.p95);
	}

	const emitter = new EventEmitter__default['default']();

	const platform = {
	  _config: {},
	  name: () => 'nodejs',
	  version: () => process.version,
	  engine: () => process.jsEngine || 'v8',
	  configure (config) {
	    this._config = config;
	  },
	  runtime () {
	    return {
	      id: () => {
	        return this._config._runtimeId || (this._config._runtimeId = this.uuid())
	      }
	    }
	  },
	  id: id$1,
	  uuid,
	  now: now_1,
	  env,
	  validate: validate_1,
	  service: service_1,
	  request: request_1,
	  msgpack,
	  metrics: metrics_1,
	  Uint64BE: uint64be,
	  on: emitter.on.bind(emitter),
	  once: emitter.once.bind(emitter),
	  off: emitter.removeListener.bind(emitter)
	};

	process.once('beforeExit', () => emitter.emit('exit'));

	var node = platform;

	/**
	 * Convenience class to use as a binary carrier.
	 *
	 * Any valid Object with a field named `buffer` may be used as a binary carrier;
	 * this class is only one such type of object that can be used.
	 */
	var BinaryCarrier = /** @class */ (function () {
	    function BinaryCarrier(buffer) {
	        this.buffer = buffer;
	    }
	    return BinaryCarrier;
	}());
	var _default$8 = BinaryCarrier;


	var binary_carrier = /*#__PURE__*/Object.defineProperty({
		default: _default$8
	}, '__esModule', {value: true});

	/** SPAN_KIND hints at relationship between spans, e.g. client/server */
	var SPAN_KIND$2 = 'span.kind';
	/** Marks a span representing the client-side of an RPC or other remote call */
	var SPAN_KIND_RPC_CLIENT = 'client';
	/** Marks a span representing the server-side of an RPC or other remote call */
	var SPAN_KIND_RPC_SERVER = 'server';
	/** Marks a span representing the producing-side within a messaging system or other remote call */
	var SPAN_KIND_MESSAGING_PRODUCER = 'producer';
	/** Marks a span representing the consuming-side within a messaging system or other remote call */
	var SPAN_KIND_MESSAGING_CONSUMER = 'consumer';
	/**
	 * ERROR (boolean) true if and only if the application considers the operation
	 * represented by the Span to have failed
	 */
	var ERROR$1 = 'error';
	/**
	 * COMPONENT (string) ia s low-cardinality identifier of the module, library,
	 * or package that is generating a span.
	 */
	var COMPONENT = 'component';
	/**
	 * SAMPLING_PRIORITY (number) determines the priority of sampling this Span.
	 * If greater than 0, a hint to the Tracer to do its best to capture the trace.
	 * If 0, a hint to the trace to not-capture the trace. If absent, the Tracer
	 * should use its default sampling mechanism.
	 */
	var SAMPLING_PRIORITY$1 = 'sampling.priority';
	// ---------------------------------------------------------------------------
	// PEER_* tags can be emitted by either client-side of server-side to describe
	// the other side/service in a peer-to-peer communications, like an RPC call.
	// ---------------------------------------------------------------------------
	/**
	 * PEER_SERVICE (string) Remote service name (for some unspecified
	 * definition of "service"). E.g., "elasticsearch", "a_custom_microservice", "memcache"
	 */
	var PEER_SERVICE = 'peer.service';
	/** PEER_HOSTNAME (string) Remote hostname. E.g., "opentracing.io", "internal.dns.name" */
	var PEER_HOSTNAME = 'peer.hostname';
	/**
	 * PEER_ADDRESS (string) Remote "address", suitable for use in a
	 * networking client library. This may be a "ip:port", a bare
	 * "hostname", a FQDN, or even a JDBC substring like "mysql://prod-db:3306"
	 */
	var PEER_ADDRESS = 'peer.address';
	/**
	 * PEER_HOST_IPV4 (number) Remote IPv4 address as a .-separated tuple.
	 * E.g., "127.0.0.1"
	 */
	var PEER_HOST_IPV4 = 'peer.ipv4';
	// PEER_HOST_IPV6 (string) Remote IPv6 address as a string of
	// colon-separated 4-char hex tuples. E.g., "2001:0db8:85a3:0000:0000:8a2e:0370:7334"
	var PEER_HOST_IPV6 = 'peer.ipv6';
	// PEER_PORT (number) Remote port. E.g., 80
	var PEER_PORT = 'peer.port';
	// ---------------------------------------------------------------------------
	// HTTP tags
	// ---------------------------------------------------------------------------
	/**
	 * HTTP_URL (string) URL of the request being handled in this segment of the
	 * trace, in standard URI format. E.g., "https://domain.net/path/to?resource=here"
	 */
	var HTTP_URL$1 = 'http.url';
	/**
	 * HTTP_METHOD (string) HTTP method of the request for the associated Span. E.g.,
	 * "GET", "POST"
	 */
	var HTTP_METHOD$1 = 'http.method';
	/**
	 * HTTP_STATUS_CODE (number) HTTP response status code for the associated Span.
	 * E.g., 200, 503, 404
	 */
	var HTTP_STATUS_CODE$2 = 'http.status_code';
	// -------------------------------------------------------------------------
	// Messaging tags
	// -------------------------------------------------------------------------
	/**
	 * MESSAGE_BUS_DESTINATION (string) An address at which messages can be exchanged.
	 * E.g. A Kafka record has an associated "topic name" that can be extracted
	 * by the instrumented producer or consumer and stored using this tag.
	 */
	var MESSAGE_BUS_DESTINATION = 'message_bus.destination';
	// --------------------------------------------------------------------------
	// Database tags
	// --------------------------------------------------------------------------
	/**
	 * DB_INSTANCE (string) Database instance name. E.g., In java, if the
	 * jdbc.url="jdbc:mysql://127.0.0.1:3306/customers", the instance name is "customers".
	 */
	var DB_INSTANCE = 'db.instance';
	/**
	 * DB_STATEMENT (string) A database statement for the given database type.
	 * E.g., for db.type="SQL", "SELECT * FROM wuser_table";
	 * for db.type="redis", "SET mykey 'WuValue'".
	 */
	var DB_STATEMENT = 'db.statement';
	/**
	 * DB_TYPE (string) Database type. For any SQL database, "sql". For others,
	 * the lower-case database category, e.g. "cassandra", "hbase", or "redis".
	 */
	var DB_TYPE = 'db.type';
	/**
	 * DB_USER (string) Username for accessing database. E.g., "readonly_user"
	 * or "reporting_user"
	 */
	var DB_USER = 'db.user';


	var tags$1 = /*#__PURE__*/Object.defineProperty({
		SPAN_KIND: SPAN_KIND$2,
		SPAN_KIND_RPC_CLIENT: SPAN_KIND_RPC_CLIENT,
		SPAN_KIND_RPC_SERVER: SPAN_KIND_RPC_SERVER,
		SPAN_KIND_MESSAGING_PRODUCER: SPAN_KIND_MESSAGING_PRODUCER,
		SPAN_KIND_MESSAGING_CONSUMER: SPAN_KIND_MESSAGING_CONSUMER,
		ERROR: ERROR$1,
		COMPONENT: COMPONENT,
		SAMPLING_PRIORITY: SAMPLING_PRIORITY$1,
		PEER_SERVICE: PEER_SERVICE,
		PEER_HOSTNAME: PEER_HOSTNAME,
		PEER_ADDRESS: PEER_ADDRESS,
		PEER_HOST_IPV4: PEER_HOST_IPV4,
		PEER_HOST_IPV6: PEER_HOST_IPV6,
		PEER_PORT: PEER_PORT,
		HTTP_URL: HTTP_URL$1,
		HTTP_METHOD: HTTP_METHOD$1,
		HTTP_STATUS_CODE: HTTP_STATUS_CODE$2,
		MESSAGE_BUS_DESTINATION: MESSAGE_BUS_DESTINATION,
		DB_INSTANCE: DB_INSTANCE,
		DB_STATEMENT: DB_STATEMENT,
		DB_TYPE: DB_TYPE,
		DB_USER: DB_USER
	}, '__esModule', {value: true});

	/**
	 * Span represents a logical unit of work as part of a broader Trace. Examples
	 * of span might include remote procedure calls or a in-process function calls
	 * to sub-components. A Trace has a single, top-level "root" Span that in turn
	 * may have zero or more child Spans, which in turn may have children.
	 */
	var Span$3 = /** @class */ (function () {
	    function Span() {
	    }
	    // ---------------------------------------------------------------------- //
	    // OpenTracing API methods
	    // ---------------------------------------------------------------------- //
	    /**
	     * Returns the SpanContext object associated with this Span.
	     *
	     * @return {SpanContext}
	     */
	    Span.prototype.context = function () {
	        return this._context();
	    };
	    /**
	     * Returns the Tracer object used to create this Span.
	     *
	     * @return {Tracer}
	     */
	    Span.prototype.tracer = function () {
	        return this._tracer();
	    };
	    /**
	     * Sets the string name for the logical operation this span represents.
	     *
	     * @param {string} name
	     */
	    Span.prototype.setOperationName = function (name) {
	        this._setOperationName(name);
	        return this;
	    };
	    /**
	     * Sets a key:value pair on this Span that also propagates to future
	     * children of the associated Span.
	     *
	     * setBaggageItem() enables powerful functionality given a full-stack
	     * opentracing integration (e.g., arbitrary application data from a web
	     * client can make it, transparently, all the way into the depths of a
	     * storage system), and with it some powerful costs: use this feature with
	     * care.
	     *
	     * IMPORTANT NOTE #1: setBaggageItem() will only propagate baggage items to
	     * *future* causal descendants of the associated Span.
	     *
	     * IMPORTANT NOTE #2: Use this thoughtfully and with care. Every key and
	     * value is copied into every local *and remote* child of the associated
	     * Span, and that can add up to a lot of network and cpu overhead.
	     *
	     * @param {string} key
	     * @param {string} value
	     */
	    Span.prototype.setBaggageItem = function (key, value) {
	        this._setBaggageItem(key, value);
	        return this;
	    };
	    /**
	     * Returns the value for a baggage item given its key.
	     *
	     * @param  {string} key
	     *         The key for the given trace attribute.
	     * @return {string}
	     *         String value for the given key, or undefined if the key does not
	     *         correspond to a set trace attribute.
	     */
	    Span.prototype.getBaggageItem = function (key) {
	        return this._getBaggageItem(key);
	    };
	    /**
	     * Adds a single tag to the span.  See `addTags()` for details.
	     *
	     * @param {string} key
	     * @param {any} value
	     */
	    Span.prototype.setTag = function (key, value) {
	        var _a;
	        // NOTE: the call is normalized to a call to _addTags()
	        this._addTags((_a = {}, _a[key] = value, _a));
	        return this;
	    };
	    /**
	     * Adds the given key value pairs to the set of span tags.
	     *
	     * Multiple calls to addTags() results in the tags being the superset of
	     * all calls.
	     *
	     * The behavior of setting the same key multiple times on the same span
	     * is undefined.
	     *
	     * The supported type of the values is implementation-dependent.
	     * Implementations are expected to safely handle all types of values but
	     * may choose to ignore unrecognized / unhandle-able values (e.g. objects
	     * with cyclic references, function objects).
	     *
	     * @return {[type]} [description]
	     */
	    Span.prototype.addTags = function (keyValueMap) {
	        this._addTags(keyValueMap);
	        return this;
	    };
	    /**
	     * Add a log record to this Span, optionally at a user-provided timestamp.
	     *
	     * For example:
	     *
	     *     span.log({
	     *         size: rpc.size(),  // numeric value
	     *         URI: rpc.URI(),  // string value
	     *         payload: rpc.payload(),  // Object value
	     *         "keys can be arbitrary strings": rpc.foo(),
	     *     });
	     *
	     *     span.log({
	     *         "error.description": someError.description(),
	     *     }, someError.timestampMillis());
	     *
	     * @param {object} keyValuePairs
	     *        An object mapping string keys to arbitrary value types. All
	     *        Tracer implementations should support bool, string, and numeric
	     *        value types, and some may also support Object values.
	     * @param {number} timestamp
	     *        An optional parameter specifying the timestamp in milliseconds
	     *        since the Unix epoch. Fractional values are allowed so that
	     *        timestamps with sub-millisecond accuracy can be represented. If
	     *        not specified, the implementation is expected to use its notion
	     *        of the current time of the call.
	     */
	    Span.prototype.log = function (keyValuePairs, timestamp) {
	        this._log(keyValuePairs, timestamp);
	        return this;
	    };
	    /**
	     * DEPRECATED
	     */
	    Span.prototype.logEvent = function (eventName, payload) {
	        return this._log({ event: eventName, payload: payload });
	    };
	    /**
	     * Sets the end timestamp and finalizes Span state.
	     *
	     * With the exception of calls to Span.context() (which are always allowed),
	     * finish() must be the last call made to any span instance, and to do
	     * otherwise leads to undefined behavior.
	     *
	     * @param  {number} finishTime
	     *         Optional finish time in milliseconds as a Unix timestamp. Decimal
	     *         values are supported for timestamps with sub-millisecond accuracy.
	     *         If not specified, the current time (as defined by the
	     *         implementation) will be used.
	     */
	    Span.prototype.finish = function (finishTime) {
	        this._finish(finishTime);
	        // Do not return `this`. The Span generally should not be used after it
	        // is finished so chaining is not desired in this context.
	    };
	    // ---------------------------------------------------------------------- //
	    // Derived classes can choose to implement the below
	    // ---------------------------------------------------------------------- //
	    // By default returns a no-op SpanContext.
	    Span.prototype._context = function () {
	        return noop$3.spanContext;
	    };
	    // By default returns a no-op tracer.
	    //
	    // The base class could store the tracer that created it, but it does not
	    // in order to ensure the no-op span implementation has zero members,
	    // which allows V8 to aggressively optimize calls to such objects.
	    Span.prototype._tracer = function () {
	        return noop$3.tracer;
	    };
	    // By default does nothing
	    Span.prototype._setOperationName = function (name) {
	    };
	    // By default does nothing
	    Span.prototype._setBaggageItem = function (key, value) {
	    };
	    // By default does nothing
	    Span.prototype._getBaggageItem = function (key) {
	        return undefined;
	    };
	    // By default does nothing
	    //
	    // NOTE: both setTag() and addTags() map to this function. keyValuePairs
	    // will always be an associative array.
	    Span.prototype._addTags = function (keyValuePairs) {
	    };
	    // By default does nothing
	    Span.prototype._log = function (keyValuePairs, timestamp) {
	    };
	    // By default does nothing
	    //
	    // finishTime is expected to be either a number or undefined.
	    Span.prototype._finish = function (finishTime) {
	    };
	    return Span;
	}());
	var Span_1 = Span$3;
	var _default$7 = Span$3;


	var span$3 = /*#__PURE__*/Object.defineProperty({
		Span: Span_1,
		default: _default$7
	}, '__esModule', {value: true});

	/**
	 * SpanContext represents Span state that must propagate to descendant Spans
	 * and across process boundaries.
	 *
	 * SpanContext is logically divided into two pieces: the user-level "Baggage"
	 * (see setBaggageItem and getBaggageItem) that propagates across Span
	 * boundaries and any Tracer-implementation-specific fields that are needed to
	 * identify or otherwise contextualize the associated Span instance (e.g., a
	 * <trace_id, span_id, sampled> tuple).
	 */
	var SpanContext$1 = /** @class */ (function () {
	    function SpanContext() {
	    }
	    // The SpanContext is entirely implementation dependent
	    /**
	     * Returns a string representation of the implementation internal trace ID.
	     *
	     * @returns {string}
	     */
	    SpanContext.prototype.toTraceId = function () {
	        return '';
	    };
	    /**
	     * Returns a string representation of the implementation internal span ID.
	     *
	     * @returns {string}
	     */
	    SpanContext.prototype.toSpanId = function () {
	        return '';
	    };
	    return SpanContext;
	}());
	var SpanContext_1 = SpanContext$1;
	var _default$6 = SpanContext$1;


	var span_context$1 = /*#__PURE__*/Object.defineProperty({
		SpanContext: SpanContext_1,
		default: _default$6
	}, '__esModule', {value: true});

	/**
	 * The FORMAT_BINARY format represents SpanContexts in an opaque binary
	 * carrier.
	 *
	 * Tracer.inject() will set the buffer field to an Array-like (Array,
	 * ArrayBuffer, or TypedBuffer) object containing the injected binary data.
	 * Any valid Object can be used as long as the buffer field of the object
	 * can be set.
	 *
	 * Tracer.extract() will look for `carrier.buffer`, and that field is
	 * expected to be an Array-like object (Array, ArrayBuffer, or
	 * TypedBuffer).
	 */
	var FORMAT_BINARY = 'binary';
	/**
	 * The FORMAT_TEXT_MAP format represents SpanContexts using a
	 * string->string map (backed by a Javascript Object) as a carrier.
	 *
	 * NOTE: Unlike FORMAT_HTTP_HEADERS, FORMAT_TEXT_MAP places no restrictions
	 * on the characters used in either the keys or the values of the map
	 * entries.
	 *
	 * The FORMAT_TEXT_MAP carrier map may contain unrelated data (e.g.,
	 * arbitrary gRPC metadata); as such, the Tracer implementation should use
	 * a prefix or other convention to distinguish Tracer-specific key:value
	 * pairs.
	 */
	var FORMAT_TEXT_MAP = 'text_map';
	/**
	 * The FORMAT_HTTP_HEADERS format represents SpanContexts using a
	 * character-restricted string->string map (backed by a Javascript Object)
	 * as a carrier.
	 *
	 * Keys and values in the FORMAT_HTTP_HEADERS carrier must be suitable for
	 * use as HTTP headers (without modification or further escaping). That is,
	 * the keys have a greatly restricted character set, casing for the keys
	 * may not be preserved by various intermediaries, and the values should be
	 * URL-escaped.
	 *
	 * The FORMAT_HTTP_HEADERS carrier map may contain unrelated data (e.g.,
	 * arbitrary HTTP headers); as such, the Tracer implementation should use a
	 * prefix or other convention to distinguish Tracer-specific key:value
	 * pairs.
	 */
	var FORMAT_HTTP_HEADERS$1 = 'http_headers';
	/**
	 * A Span may be the "child of" a parent Span. In a “child of” reference,
	 * the parent Span depends on the child Span in some capacity.
	 *
	 * See more about reference types at https://github.com/opentracing/specification
	 */
	var REFERENCE_CHILD_OF$3 = 'child_of';
	/**
	 * Some parent Spans do not depend in any way on the result of their child
	 * Spans. In these cases, we say merely that the child Span “follows from”
	 * the parent Span in a causal sense.
	 *
	 * See more about reference types at https://github.com/opentracing/specification
	 */
	var REFERENCE_FOLLOWS_FROM$1 = 'follows_from';


	var constants$4 = /*#__PURE__*/Object.defineProperty({
		FORMAT_BINARY: FORMAT_BINARY,
		FORMAT_TEXT_MAP: FORMAT_TEXT_MAP,
		FORMAT_HTTP_HEADERS: FORMAT_HTTP_HEADERS$1,
		REFERENCE_CHILD_OF: REFERENCE_CHILD_OF$3,
		REFERENCE_FOLLOWS_FROM: REFERENCE_FOLLOWS_FROM$1
	}, '__esModule', {value: true});

	/**
	 * Reference pairs a reference type constant (e.g., REFERENCE_CHILD_OF or
	 * REFERENCE_FOLLOWS_FROM) with the SpanContext it points to.
	 *
	 * See the exported childOf() and followsFrom() functions at the package level.
	 */
	var Reference$3 = /** @class */ (function () {
	    /**
	     * Initialize a new Reference instance.
	     *
	     * @param {string} type - the Reference type constant (e.g.,
	     *        REFERENCE_CHILD_OF or REFERENCE_FOLLOWS_FROM).
	     * @param {SpanContext} referencedContext - the SpanContext being referred
	     *        to. As a convenience, a Span instance may be passed in instead
	     *        (in which case its .context() is used here).
	     */
	    function Reference(type, referencedContext) {
	        this._type = type;
	        this._referencedContext = (referencedContext instanceof span$3.default ?
	            referencedContext.context() :
	            referencedContext);
	    }
	    /**
	     * @return {string} The Reference type (e.g., REFERENCE_CHILD_OF or
	     *         REFERENCE_FOLLOWS_FROM).
	     */
	    Reference.prototype.type = function () {
	        return this._type;
	    };
	    /**
	     * @return {SpanContext} The SpanContext being referred to (e.g., the
	     *         parent in a REFERENCE_CHILD_OF Reference).
	     */
	    Reference.prototype.referencedContext = function () {
	        return this._referencedContext;
	    };
	    return Reference;
	}());
	var _default$5 = Reference$3;


	var reference = /*#__PURE__*/Object.defineProperty({
		default: _default$5
	}, '__esModule', {value: true});

	/**
	 * Return a new REFERENCE_CHILD_OF reference.
	 *
	 * @param {SpanContext} spanContext - the parent SpanContext instance to
	 *        reference.
	 * @return a REFERENCE_CHILD_OF reference pointing to `spanContext`
	 */
	function childOf(spanContext) {
	    // Allow the user to pass a Span instead of a SpanContext
	    if (spanContext instanceof span$3.default) {
	        spanContext = spanContext.context();
	    }
	    return new reference.default(constants$4.REFERENCE_CHILD_OF, spanContext);
	}
	var childOf_1 = childOf;
	/**
	 * Return a new REFERENCE_FOLLOWS_FROM reference.
	 *
	 * @param {SpanContext} spanContext - the parent SpanContext instance to
	 *        reference.
	 * @return a REFERENCE_FOLLOWS_FROM reference pointing to `spanContext`
	 */
	function followsFrom(spanContext) {
	    // Allow the user to pass a Span instead of a SpanContext
	    if (spanContext instanceof span$3.default) {
	        spanContext = spanContext.context();
	    }
	    return new reference.default(constants$4.REFERENCE_FOLLOWS_FROM, spanContext);
	}
	var followsFrom_1 = followsFrom;


	var functions = /*#__PURE__*/Object.defineProperty({
		childOf: childOf_1,
		followsFrom: followsFrom_1
	}, '__esModule', {value: true});

	/**
	 * Tracer is the entry-point between the instrumentation API and the tracing
	 * implementation.
	 *
	 * The default object acts as a no-op implementation.
	 *
	 * Note to implementators: derived classes can choose to directly implement the
	 * methods in the "OpenTracing API methods" section, or optionally the subset of
	 * underscore-prefixed methods to pick up the argument checking and handling
	 * automatically from the base class.
	 */
	var Tracer$3 = /** @class */ (function () {
	    function Tracer() {
	    }
	    // ---------------------------------------------------------------------- //
	    // OpenTracing API methods
	    // ---------------------------------------------------------------------- //
	    /**
	     * Starts and returns a new Span representing a logical unit of work.
	     *
	     * For example:
	     *
	     *     // Start a new (parentless) root Span:
	     *     var parent = Tracer.startSpan('DoWork');
	     *
	     *     // Start a new (child) Span:
	     *     var child = Tracer.startSpan('load-from-db', {
	     *         childOf: parent.context(),
	     *     });
	     *
	     *     // Start a new async (FollowsFrom) Span:
	     *     var child = Tracer.startSpan('async-cache-write', {
	     *         references: [
	     *             opentracing.followsFrom(parent.context())
	     *         ],
	     *     });
	     *
	     * @param {string} name - the name of the operation (REQUIRED).
	     * @param {SpanOptions} [options] - options for the newly created span.
	     * @return {Span} - a new Span object.
	     */
	    Tracer.prototype.startSpan = function (name, options) {
	        if (options === void 0) { options = {}; }
	        // Convert options.childOf to fields.references as needed.
	        if (options.childOf) {
	            // Convert from a Span or a SpanContext into a Reference.
	            var childOf = functions.childOf(options.childOf);
	            if (options.references) {
	                options.references.push(childOf);
	            }
	            else {
	                options.references = [childOf];
	            }
	            delete (options.childOf);
	        }
	        return this._startSpan(name, options);
	    };
	    /**
	     * Injects the given SpanContext instance for cross-process propagation
	     * within `carrier`. The expected type of `carrier` depends on the value of
	     * `format.
	     *
	     * OpenTracing defines a common set of `format` values (see
	     * FORMAT_TEXT_MAP, FORMAT_HTTP_HEADERS, and FORMAT_BINARY), and each has
	     * an expected carrier type.
	     *
	     * Consider this pseudocode example:
	     *
	     *     var clientSpan = ...;
	     *     ...
	     *     // Inject clientSpan into a text carrier.
	     *     var headersCarrier = {};
	     *     Tracer.inject(clientSpan.context(), Tracer.FORMAT_HTTP_HEADERS, headersCarrier);
	     *     // Incorporate the textCarrier into the outbound HTTP request header
	     *     // map.
	     *     Object.assign(outboundHTTPReq.headers, headersCarrier);
	     *     // ... send the httpReq
	     *
	     * @param  {SpanContext} spanContext - the SpanContext to inject into the
	     *         carrier object. As a convenience, a Span instance may be passed
	     *         in instead (in which case its .context() is used for the
	     *         inject()).
	     * @param  {string} format - the format of the carrier.
	     * @param  {any} carrier - see the documentation for the chosen `format`
	     *         for a description of the carrier object.
	     */
	    Tracer.prototype.inject = function (spanContext, format, carrier) {
	        // Allow the user to pass a Span instead of a SpanContext
	        if (spanContext instanceof span$3.default) {
	            spanContext = spanContext.context();
	        }
	        return this._inject(spanContext, format, carrier);
	    };
	    /**
	     * Returns a SpanContext instance extracted from `carrier` in the given
	     * `format`.
	     *
	     * OpenTracing defines a common set of `format` values (see
	     * FORMAT_TEXT_MAP, FORMAT_HTTP_HEADERS, and FORMAT_BINARY), and each has
	     * an expected carrier type.
	     *
	     * Consider this pseudocode example:
	     *
	     *     // Use the inbound HTTP request's headers as a text map carrier.
	     *     var headersCarrier = inboundHTTPReq.headers;
	     *     var wireCtx = Tracer.extract(Tracer.FORMAT_HTTP_HEADERS, headersCarrier);
	     *     var serverSpan = Tracer.startSpan('...', { childOf : wireCtx });
	     *
	     * @param  {string} format - the format of the carrier.
	     * @param  {any} carrier - the type of the carrier object is determined by
	     *         the format.
	     * @return {SpanContext}
	     *         The extracted SpanContext, or null if no such SpanContext could
	     *         be found in `carrier`
	     */
	    Tracer.prototype.extract = function (format, carrier) {
	        return this._extract(format, carrier);
	    };
	    // ---------------------------------------------------------------------- //
	    // Derived classes can choose to implement the below
	    // ---------------------------------------------------------------------- //
	    // NOTE: the input to this method is *always* an associative array. The
	    // public-facing startSpan() method normalizes the arguments so that
	    // all N implementations do not need to worry about variations in the call
	    // signature.
	    //
	    // The default behavior returns a no-op span.
	    Tracer.prototype._startSpan = function (name, fields) {
	        return noop$3.span;
	    };
	    // The default behavior is a no-op.
	    Tracer.prototype._inject = function (spanContext, format, carrier) {
	    };
	    // The default behavior is to return a no-op SpanContext.
	    Tracer.prototype._extract = function (format, carrier) {
	        return noop$3.spanContext;
	    };
	    return Tracer;
	}());
	var Tracer_1 = Tracer$3;
	var _default$4 = Tracer$3;


	var tracer$3 = /*#__PURE__*/Object.defineProperty({
		Tracer: Tracer_1,
		default: _default$4
	}, '__esModule', {value: true});

	var noop$3 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });



	exports.tracer = null;
	exports.spanContext = null;
	exports.span = null;
	// Deferred initialization to avoid a dependency cycle where Tracer depends on
	// Span which depends on the noop tracer.
	function initialize() {
	    exports.tracer = new tracer$3.default();
	    exports.span = new span$3.default();
	    exports.spanContext = new span_context$1.default();
	}
	exports.initialize = initialize;

	});

	var __extends$3 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();


	/**
	 * OpenTracing Context implementation designed for use in
	 * unit tests.
	 */
	var MockContext$1 = /** @class */ (function (_super) {
	    __extends$3(MockContext, _super);
	    function MockContext(span) {
	        var _this = _super.call(this) || this;
	        // Store a reference to the span itself since this is a mock tracer
	        // intended to make debugging and unit testing easier.
	        _this._span = span;
	        return _this;
	    }
	    MockContext.prototype.span = function () {
	        return this._span;
	    };
	    return MockContext;
	}(span_context$1.SpanContext));
	var MockContext_1 = MockContext$1;
	var _default$3 = MockContext$1;


	var mock_context = /*#__PURE__*/Object.defineProperty({
		MockContext: MockContext_1,
		default: _default$3
	}, '__esModule', {value: true});

	/* eslint-disable import/no-extraneous-dependencies */
	var __extends$2 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();



	/**
	 * OpenTracing Span implementation designed for use in unit tests.
	 */
	var MockSpan$1 = /** @class */ (function (_super) {
	    __extends$2(MockSpan, _super);
	    //------------------------------------------------------------------------//
	    // MockSpan-specific
	    //------------------------------------------------------------------------//
	    function MockSpan(tracer) {
	        var _this = _super.call(this) || this;
	        _this._mockTracer = tracer;
	        _this._uuid = _this._generateUUID();
	        _this._startMs = Date.now();
	        _this._finishMs = 0;
	        _this._operationName = '';
	        _this._tags = {};
	        _this._logs = [];
	        return _this;
	    }
	    //------------------------------------------------------------------------//
	    // OpenTracing implementation
	    //------------------------------------------------------------------------//
	    MockSpan.prototype._context = function () {
	        return new mock_context.default(this);
	    };
	    MockSpan.prototype._setOperationName = function (name) {
	        this._operationName = name;
	    };
	    MockSpan.prototype._addTags = function (set) {
	        var keys = Object.keys(set);
	        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
	            var key = keys_1[_i];
	            this._tags[key] = set[key];
	        }
	    };
	    MockSpan.prototype._log = function (fields, timestamp) {
	        this._logs.push({
	            fields: fields,
	            timestamp: timestamp
	        });
	    };
	    MockSpan.prototype._finish = function (finishTime) {
	        this._finishMs = finishTime || Date.now();
	    };
	    MockSpan.prototype.uuid = function () {
	        return this._uuid;
	    };
	    MockSpan.prototype.operationName = function () {
	        return this._operationName;
	    };
	    MockSpan.prototype.durationMs = function () {
	        return this._finishMs - this._startMs;
	    };
	    MockSpan.prototype.tags = function () {
	        return this._tags;
	    };
	    MockSpan.prototype.tracer = function () {
	        return this._mockTracer;
	    };
	    MockSpan.prototype._generateUUID = function () {
	        var p0 = ("00000000" + Math.abs((Math.random() * 0xFFFFFFFF) | 0).toString(16)).substr(-8);
	        var p1 = ("00000000" + Math.abs((Math.random() * 0xFFFFFFFF) | 0).toString(16)).substr(-8);
	        return "" + p0 + p1;
	    };
	    MockSpan.prototype.addReference = function (ref) {
	    };
	    /**
	     * Returns a simplified object better for console.log()'ing.
	     */
	    MockSpan.prototype.debug = function () {
	        var obj = {
	            uuid: this._uuid,
	            operation: this._operationName,
	            millis: [this._finishMs - this._startMs, this._startMs, this._finishMs]
	        };
	        if (Object.keys(this._tags).length) {
	            obj.tags = this._tags;
	        }
	        return obj;
	    };
	    return MockSpan;
	}(lib.Span));
	var MockSpan_1 = MockSpan$1;
	var _default$2 = MockSpan$1;


	var mock_span = /*#__PURE__*/Object.defineProperty({
		MockSpan: MockSpan_1,
		default: _default$2
	}, '__esModule', {value: true});

	/**
	 * Index a collection of reported MockSpans in a way that's easy to run unit
	 * test assertions against.
	 */
	var MockReport = /** @class */ (function () {
	    function MockReport(spans) {
	        var _this = this;
	        this.spans = spans;
	        this.spansByUUID = {};
	        this.spansByTag = {};
	        this.debugSpans = [];
	        this.unfinishedSpans = [];
	        spans.forEach(function (span) {
	            if (span._finishMs === 0) {
	                _this.unfinishedSpans.push(span);
	            }
	            _this.spansByUUID[span.uuid()] = span;
	            _this.debugSpans.push(span.debug());
	            var tags = span.tags();
	            Object.keys(tags).forEach(function (key) {
	                var val = tags[key];
	                _this.spansByTag[key] = _this.spansByTag[key] || {};
	                _this.spansByTag[key][val] = _this.spansByTag[key][val] || [];
	                _this.spansByTag[key][val].push(span);
	            });
	        });
	    }
	    MockReport.prototype.firstSpanWithTagValue = function (key, val) {
	        var m = this.spansByTag[key];
	        if (!m) {
	            return null;
	        }
	        var n = m[val];
	        if (!n) {
	            return null;
	        }
	        return n[0];
	    };
	    return MockReport;
	}());
	var MockReport_1 = MockReport;
	var _default$1 = MockReport;


	var mock_report = /*#__PURE__*/Object.defineProperty({
		MockReport: MockReport_1,
		default: _default$1
	}, '__esModule', {value: true});

	var __extends$1 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();

	// TODO: Move mock-tracer to its own NPM package once it is complete and tested.



	/**
	 * OpenTracing Tracer implementation designed for use in unit tests.
	 */
	var MockTracer$1 = /** @class */ (function (_super) {
	    __extends$1(MockTracer, _super);
	    //------------------------------------------------------------------------//
	    // MockTracer-specific
	    //------------------------------------------------------------------------//
	    function MockTracer() {
	        var _this = _super.call(this) || this;
	        _this._spans = [];
	        return _this;
	    }
	    //------------------------------------------------------------------------//
	    // OpenTracing implementation
	    //------------------------------------------------------------------------//
	    MockTracer.prototype._startSpan = function (name, fields) {
	        // _allocSpan is given it's own method so that derived classes can
	        // allocate any type of object they want, but not have to duplicate
	        // the other common logic in startSpan().
	        var span = this._allocSpan();
	        span.setOperationName(name);
	        this._spans.push(span);
	        if (fields.references) {
	            for (var _i = 0, _a = fields.references; _i < _a.length; _i++) {
	                var ref = _a[_i];
	                span.addReference(ref);
	            }
	        }
	        // Capture the stack at the time the span started
	        span._startStack = new Error().stack;
	        return span;
	    };
	    MockTracer.prototype._inject = function (span, format, carrier) {
	        throw new Error('NOT YET IMPLEMENTED');
	    };
	    MockTracer.prototype._extract = function (format, carrier) {
	        throw new Error('NOT YET IMPLEMENTED');
	    };
	    MockTracer.prototype._allocSpan = function () {
	        return new mock_span.default(this);
	    };
	    /**
	     * Discard any buffered data.
	     */
	    MockTracer.prototype.clear = function () {
	        this._spans = [];
	    };
	    /**
	     * Return the buffered data in a format convenient for making unit test
	     * assertions.
	     */
	    MockTracer.prototype.report = function () {
	        return new mock_report.default(this._spans);
	    };
	    return MockTracer;
	}(lib.Tracer));
	var MockTracer_1 = MockTracer$1;
	var _default = MockTracer$1;


	var mock_tracer$1 = /*#__PURE__*/Object.defineProperty({
		MockTracer: MockTracer_1,
		default: _default
	}, '__esModule', {value: true});

	var MockContext = mock_context.default;

	var MockSpan = mock_span.default;

	var MockTracer = mock_tracer$1.default;


	var mock_tracer = /*#__PURE__*/Object.defineProperty({
		MockContext: MockContext,
		MockSpan: MockSpan,
		MockTracer: MockTracer
	}, '__esModule', {value: true});

	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();


	var noopTracer = new tracer$3.default();
	var _globalTracer = null;
	// Allows direct importing/requiring of the global tracer:
	//
	// let globalTracer = require('opentracing/global');
	//      OR
	// import globalTracer from 'opentracing/global';
	//
	// Acts a bridge to the global tracer that can be safely called before the
	// global tracer is initialized. The purpose of the delegation is to avoid the
	// sometimes nearly intractible initialization order problems that can arise in
	// applications with a complex set of dependencies, while also avoiding the
	// case where
	var GlobalTracerDelegate = /** @class */ (function (_super) {
	    __extends(GlobalTracerDelegate, _super);
	    function GlobalTracerDelegate() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    GlobalTracerDelegate.prototype.startSpan = function () {
	        var tracer = _globalTracer || noopTracer;
	        return tracer.startSpan.apply(tracer, arguments);
	    };
	    GlobalTracerDelegate.prototype.inject = function () {
	        var tracer = _globalTracer || noopTracer;
	        return tracer.inject.apply(tracer, arguments);
	    };
	    GlobalTracerDelegate.prototype.extract = function () {
	        var tracer = _globalTracer || noopTracer;
	        return tracer.extract.apply(tracer, arguments);
	    };
	    return GlobalTracerDelegate;
	}(tracer$3.default));
	var globalTracerDelegate = new GlobalTracerDelegate();
	/**
	 * Set the global Tracer.
	 *
	 * The behavior is undefined if this function is called more than once.
	 *
	 * @param {Tracer} tracer - the Tracer implementation
	 */
	function initGlobalTracer(tracer) {
	    _globalTracer = tracer;
	}
	var initGlobalTracer_1 = initGlobalTracer;
	/**
	 * Returns the global tracer.
	 */
	function globalTracer() {
	    // Return the delegate.  Since the global tracer is largely a convenience
	    // (the user can always create their own tracers), the delegate is used to
	    // give the added convenience of not needing to worry about initialization
	    // order.
	    return globalTracerDelegate;
	}
	var globalTracer_1 = globalTracer;


	var global_tracer = /*#__PURE__*/Object.defineProperty({
		initGlobalTracer: initGlobalTracer_1,
		globalTracer: globalTracer_1
	}, '__esModule', {value: true});

	var lib = createCommonjsModule(function (module, exports) {
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	Object.defineProperty(exports, "__esModule", { value: true });

	exports.BinaryCarrier = binary_carrier.default;

	exports.Tags = tags$1;


	exports.Reference = reference.default;

	exports.Span = span$3.default;

	exports.SpanContext = span_context$1.default;

	exports.Tracer = tracer$3.Tracer;

	exports.MockTracer = mock_tracer.MockTracer;
	__export(global_tracer);
	__export(constants$4);
	__export(functions);
	// Initialize the noops last to avoid a dependecy cycle between the classes.
	noop$3.initialize();

	});

	let id = 0;

	class Scope$2 {
	  active () {
	    return this._active() || null
	  }

	  activate (span, callback) {
	    if (typeof callback !== 'function') return callback

	    return this._activate(span, callback)
	  }

	  bind (target, span) {
	    if (target === undefined || target === null) return target

	    if (this._isEmitter(target)) {
	      target = this._bindEmitter(target, span);
	    }

	    if (this._isPromise(target)) {
	      target = this._bindPromise(target, span);
	    }

	    if (typeof target === 'function') {
	      target = this._bindFn(target, span);
	    }

	    return target
	  }

	  _active () {
	    return null
	  }

	  _activate (span, callback) {
	    return typeof callback === 'function' && callback()
	  }

	  _bindFn (fn, span) {
	    const scope = this;
	    const spanOrActive = this._spanOrActive(span);

	    return function () {
	      return scope.activate(spanOrActive, () => {
	        return fn.apply(this, arguments)
	      })
	    }
	  }

	  _bindEmitter (emitter, span) {
	    if (emitter._datadog_events) return emitter

	    emitter._datadog_events = {};

	    if (emitter.addListener) {
	      emitter.addListener = wrapAddListener(emitter.addListener, this, span);
	    }

	    if (emitter.prependListener) {
	      emitter.prependListener = wrapAddListener(emitter.prependListener, this, span);
	    }

	    if (emitter.on) {
	      emitter.on = wrapAddListener(emitter.on, this, span);
	    }

	    if (emitter.removeListener) {
	      emitter.removeListener = wrapRemoveListener(emitter.removeListener);
	    }

	    if (emitter.off) {
	      emitter.off = wrapRemoveListener(emitter.off);
	    }

	    if (emitter.removeAllListeners) {
	      emitter.removeAllListeners = wrapRemoveAllListeners(emitter.removeAllListeners);
	    }

	    return emitter
	  }

	  _bindPromise (promise, span) {
	    const scope = this;
	    const then = promise.then;

	    promise.then = function thenWithTrace (onFulfilled, onRejected) {
	      const args = new Array(arguments.length);

	      for (let i = 0, l = args.length; i < l; i++) {
	        args[i] = scope.bind(arguments[i], span);
	      }

	      return then.apply(this, args)
	    };

	    return promise
	  }

	  _spanOrActive (span) {
	    return span !== undefined ? span : this.active()
	  }

	  _isEmitter (emitter) {
	    return emitter &&
	      typeof emitter.emit === 'function' &&
	      typeof emitter.on === 'function' &&
	      typeof emitter.addListener === 'function' &&
	      typeof emitter.removeListener === 'function'
	  }

	  _isPromise (promise) {
	    return promise && typeof promise.then === 'function'
	  }
	}

	function wrapAddListener (addListener, scope, span) {
	  return function addListenerWithTrace (eventName, listener) {
	    if (!listener || listener._datadog_bound) return addListener.apply(this, arguments)

	    const bound = scope.bind(listener, scope._spanOrActive(span));

	    bound._datadog_bound = true;
	    listener._datadog_id = listener._datadog_id || ++id;

	    if (!this._datadog_events[eventName]) {
	      this._datadog_events[eventName] = {};
	    }

	    const events = this._datadog_events[eventName];

	    if (!events[listener._datadog_id]) {
	      events[listener._datadog_id] = [];
	    }

	    events[listener._datadog_id].push(bound);

	    return addListener.call(this, eventName, bound)
	  }
	}

	function wrapRemoveListener (removeListener) {
	  return function removeListenerWithTrace (eventName, listener) {
	    const listeners = this._datadog_events[eventName];

	    if (!listener || !listeners || !listeners[listener._datadog_id]) {
	      return removeListener.apply(this, arguments)
	    }

	    let bound;

	    while ((bound = listeners[listener._datadog_id].pop())) {
	      removeListener.call(this, eventName, bound);
	    }

	    return removeListener.call(this, eventName, listener)
	  }
	}

	function wrapRemoveAllListeners (removeAllListeners) {
	  return function removeAllListenersWithTrace (eventName) {
	    if (eventName) {
	      this._datadog_events[eventName] = {};
	    } else {
	      this._datadog_events = {};
	    }

	    return removeAllListeners.call(this, eventName)
	  }
	}

	var base = Scope$2;

	function idToHex$3 (id) {
	  if (id === null || id === undefined) {
	    return undefined
	  }
	  const padded = '0000000000000000' + id.toString(16);
	  return padded.slice(-16)
	}

	function microTs$1 (ts) {
	  return Math.round(ts * 1000)
	}

	var utils = { idToHex: idToHex$3, microTs: microTs$1 };

	const SpanContext = lib.SpanContext;

	class SignalFxSpanContext extends SpanContext {
	  constructor (props) {
	    super();

	    props = props || {};

	    this._traceId = props.traceId;
	    this._spanId = props.spanId;
	    this._parentId = props.parentId || null;
	    this._name = props.name;
	    this._isFinished = props.isFinished || false;
	    this._tags = props.tags || {};
	    this._logs = props.logs || [];
	    this._metrics = props.metrics || {};
	    this._sampling = props.sampling || {};
	    this._baggageItems = props.baggageItems || {};
	    this._trace = props.trace || {
	      started: [],
	      finished: []
	    };
	  }

	  toTraceIdHex () {
	    return utils.idToHex(this._traceId)
	  }

	  toTraceId () {
	    return this._traceId.toString()
	  }

	  toSpanIdHex () {
	    return utils.idToHex(this._spanId)
	  }

	  toSpanId () {
	    return this._spanId.toString()
	  }
	}

	var span_context = SignalFxSpanContext;

	var priority$1 = {
	  USER_REJECT: -1,
	  AUTO_REJECT: 0,
	  AUTO_KEEP: 1,
	  USER_KEEP: 2
	};

	const Span$2 = lib.Span;



	const USER_REJECT$1 = priority$1.USER_REJECT;

	class NoopSpan extends Span$2 {
	  constructor (tracer) {
	    super();

	    // Avoid circular dependency
	    Object.defineProperties(this, {
	      _noopTracer: {
	        value: tracer
	      },

	      _noopContext: {
	        value: new span_context({
	          traceId: 0,
	          spanId: 0,
	          sampling: {
	            priority: USER_REJECT$1
	          }
	        })
	      }
	    });
	  }

	  _context () {
	    return this._noopContext
	  }

	  _tracer () {
	    return this._noopTracer
	  }
	}

	var span$2 = NoopSpan;

	class Scope$1 {
	  constructor (span, finishSpanOnClose) {
	    this._span = span;
	    this._finishSpanOnClose = finishSpanOnClose;
	    this.close();
	  }

	  span () {
	    return this._span
	  }

	  close () {
	    if (this._finishSpanOnClose) {
	      this._span.finish();
	    }
	  }
	}

	var scope$1 = Scope$1;

	const Span$1 = lib.Span;


	let singleton$1 = null;

	const span$1 = new Span$1();

	class ScopeManager {
	  constructor () {
	    if (!singleton$1) {
	      singleton$1 = this;
	    }

	    return singleton$1
	  }

	  active () {
	    return new scope$1(span$1)
	  }

	  activate (span, finishSpanOnClose) {
	    return new scope$1(span, finishSpanOnClose)
	  }
	}

	var scope_manager$1 = ScopeManager;

	var scope_manager = scope_manager$1;

	const Tracer$2 = lib.Tracer;



	class NoopTracer extends Tracer$2 {
	  constructor (config) {
	    super(config);

	    let ScopeManager;

	    if (process.env.SIGNALFX_CONTEXT_PROPAGATION === 'false') {
	      ScopeManager = scope_manager$1;
	    } else {
	      ScopeManager = scope_manager;
	    }

	    this._scopeManager = new ScopeManager();
	    this._scope = new base();
	    this._span = new span$2(this);
	  }

	  withNonReportingScope (callback) {
	    return callback()
	  }

	  trace (name, options, fn) {
	    return fn(this._span, () => {})
	  }

	  wrap (name, options, fn) {
	    return fn
	  }

	  scopeManager () {
	    return this._scopeManager
	  }

	  scope () {
	    return this._scope
	  }

	  currentSpan () {
	    return null
	  }

	  _startSpan (name, options) {
	    return this._span
	  }

	  flush () {
	    return Promise.resolve()
	  }
	}

	var tracer$2 = NoopTracer;

	/**
	 * lodash (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */

	var lodash_truncate = createCommonjsModule(function (module, exports) {
	/** Used as default options for `_.truncate`. */
	var DEFAULT_TRUNC_LENGTH = 30,
	    DEFAULT_TRUNC_OMISSION = '...';

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0,
	    MAX_INTEGER = 1.7976931348623157e+308,
	    NAN = 0 / 0;

	/** `Object#toString` result references. */
	var regexpTag = '[object RegExp]',
	    symbolTag = '[object Symbol]';

	/** Used to match leading and trailing whitespace. */
	var reTrim = /^\s+|\s+$/g;

	/** Used to match `RegExp` flags from their coerced string values. */
	var reFlags = /\w*$/;

	/** Used to detect bad signed hexadecimal string values. */
	var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

	/** Used to detect binary string values. */
	var reIsBinary = /^0b[01]+$/i;

	/** Used to detect octal string values. */
	var reIsOctal = /^0o[0-7]+$/i;

	/** Used to compose unicode character classes. */
	var rsAstralRange = '\\ud800-\\udfff',
	    rsComboMarksRange = '\\u0300-\\u036f\\ufe20-\\ufe23',
	    rsComboSymbolsRange = '\\u20d0-\\u20f0',
	    rsVarRange = '\\ufe0e\\ufe0f';

	/** Used to compose unicode capture groups. */
	var rsAstral = '[' + rsAstralRange + ']',
	    rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',
	    rsFitz = '\\ud83c[\\udffb-\\udfff]',
	    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
	    rsNonAstral = '[^' + rsAstralRange + ']',
	    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
	    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
	    rsZWJ = '\\u200d';

	/** Used to compose unicode regexes. */
	var reOptMod = rsModifier + '?',
	    rsOptVar = '[' + rsVarRange + ']?',
	    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
	    rsSeq = rsOptVar + reOptMod + rsOptJoin,
	    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

	/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
	var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

	/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
	var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');

	/** Built-in method references without a dependency on `root`. */
	var freeParseInt = parseInt;

	/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();

	/** Detect free variable `exports`. */
	var freeExports = exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/** Detect free variable `process` from Node.js. */
	var freeProcess = moduleExports && freeGlobal.process;

	/** Used to access faster Node.js helpers. */
	var nodeUtil = (function() {
	  try {
	    return freeProcess && freeProcess.binding('util');
	  } catch (e) {}
	}());

	/* Node.js helper references. */
	var nodeIsRegExp = nodeUtil && nodeUtil.isRegExp;

	/**
	 * Gets the size of an ASCII `string`.
	 *
	 * @private
	 * @param {string} string The string inspect.
	 * @returns {number} Returns the string size.
	 */
	var asciiSize = baseProperty('length');

	/**
	 * Converts an ASCII `string` to an array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the converted array.
	 */
	function asciiToArray(string) {
	  return string.split('');
	}

	/**
	 * The base implementation of `_.property` without support for deep paths.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 */
	function baseProperty(key) {
	  return function(object) {
	    return object == null ? undefined : object[key];
	  };
	}

	/**
	 * The base implementation of `_.unary` without support for storing metadata.
	 *
	 * @private
	 * @param {Function} func The function to cap arguments for.
	 * @returns {Function} Returns the new capped function.
	 */
	function baseUnary(func) {
	  return function(value) {
	    return func(value);
	  };
	}

	/**
	 * Checks if `string` contains Unicode symbols.
	 *
	 * @private
	 * @param {string} string The string to inspect.
	 * @returns {boolean} Returns `true` if a symbol is found, else `false`.
	 */
	function hasUnicode(string) {
	  return reHasUnicode.test(string);
	}

	/**
	 * Gets the number of symbols in `string`.
	 *
	 * @private
	 * @param {string} string The string to inspect.
	 * @returns {number} Returns the string size.
	 */
	function stringSize(string) {
	  return hasUnicode(string)
	    ? unicodeSize(string)
	    : asciiSize(string);
	}

	/**
	 * Converts `string` to an array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the converted array.
	 */
	function stringToArray(string) {
	  return hasUnicode(string)
	    ? unicodeToArray(string)
	    : asciiToArray(string);
	}

	/**
	 * Gets the size of a Unicode `string`.
	 *
	 * @private
	 * @param {string} string The string inspect.
	 * @returns {number} Returns the string size.
	 */
	function unicodeSize(string) {
	  var result = reUnicode.lastIndex = 0;
	  while (reUnicode.test(string)) {
	    result++;
	  }
	  return result;
	}

	/**
	 * Converts a Unicode `string` to an array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the converted array.
	 */
	function unicodeToArray(string) {
	  return string.match(reUnicode) || [];
	}

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/** Built-in value references. */
	var Symbol = root.Symbol;

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = Symbol ? Symbol.prototype : undefined,
	    symbolToString = symbolProto ? symbolProto.toString : undefined;

	/**
	 * The base implementation of `_.isRegExp` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
	 */
	function baseIsRegExp(value) {
	  return isObject(value) && objectToString.call(value) == regexpTag;
	}

	/**
	 * The base implementation of `_.slice` without an iteratee call guard.
	 *
	 * @private
	 * @param {Array} array The array to slice.
	 * @param {number} [start=0] The start position.
	 * @param {number} [end=array.length] The end position.
	 * @returns {Array} Returns the slice of `array`.
	 */
	function baseSlice(array, start, end) {
	  var index = -1,
	      length = array.length;

	  if (start < 0) {
	    start = -start > length ? 0 : (length + start);
	  }
	  end = end > length ? length : end;
	  if (end < 0) {
	    end += length;
	  }
	  length = start > end ? 0 : ((end - start) >>> 0);
	  start >>>= 0;

	  var result = Array(length);
	  while (++index < length) {
	    result[index] = array[index + start];
	  }
	  return result;
	}

	/**
	 * The base implementation of `_.toString` which doesn't convert nullish
	 * values to empty strings.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 */
	function baseToString(value) {
	  // Exit early for strings to avoid a performance hit in some environments.
	  if (typeof value == 'string') {
	    return value;
	  }
	  if (isSymbol(value)) {
	    return symbolToString ? symbolToString.call(value) : '';
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	}

	/**
	 * Casts `array` to a slice if it's needed.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {number} start The start position.
	 * @param {number} [end=array.length] The end position.
	 * @returns {Array} Returns the cast slice.
	 */
	function castSlice(array, start, end) {
	  var length = array.length;
	  end = end === undefined ? length : end;
	  return (!start && end >= length) ? array : baseSlice(array, start, end);
	}

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	/**
	 * Checks if `value` is classified as a `RegExp` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
	 * @example
	 *
	 * _.isRegExp(/abc/);
	 * // => true
	 *
	 * _.isRegExp('/abc/');
	 * // => false
	 */
	var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol(value) {
	  return typeof value == 'symbol' ||
	    (isObjectLike(value) && objectToString.call(value) == symbolTag);
	}

	/**
	 * Converts `value` to a finite number.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.12.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {number} Returns the converted number.
	 * @example
	 *
	 * _.toFinite(3.2);
	 * // => 3.2
	 *
	 * _.toFinite(Number.MIN_VALUE);
	 * // => 5e-324
	 *
	 * _.toFinite(Infinity);
	 * // => 1.7976931348623157e+308
	 *
	 * _.toFinite('3.2');
	 * // => 3.2
	 */
	function toFinite(value) {
	  if (!value) {
	    return value === 0 ? value : 0;
	  }
	  value = toNumber(value);
	  if (value === INFINITY || value === -INFINITY) {
	    var sign = (value < 0 ? -1 : 1);
	    return sign * MAX_INTEGER;
	  }
	  return value === value ? value : 0;
	}

	/**
	 * Converts `value` to an integer.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {number} Returns the converted integer.
	 * @example
	 *
	 * _.toInteger(3.2);
	 * // => 3
	 *
	 * _.toInteger(Number.MIN_VALUE);
	 * // => 0
	 *
	 * _.toInteger(Infinity);
	 * // => 1.7976931348623157e+308
	 *
	 * _.toInteger('3.2');
	 * // => 3
	 */
	function toInteger(value) {
	  var result = toFinite(value),
	      remainder = result % 1;

	  return result === result ? (remainder ? result - remainder : result) : 0;
	}

	/**
	 * Converts `value` to a number.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to process.
	 * @returns {number} Returns the number.
	 * @example
	 *
	 * _.toNumber(3.2);
	 * // => 3.2
	 *
	 * _.toNumber(Number.MIN_VALUE);
	 * // => 5e-324
	 *
	 * _.toNumber(Infinity);
	 * // => Infinity
	 *
	 * _.toNumber('3.2');
	 * // => 3.2
	 */
	function toNumber(value) {
	  if (typeof value == 'number') {
	    return value;
	  }
	  if (isSymbol(value)) {
	    return NAN;
	  }
	  if (isObject(value)) {
	    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
	    value = isObject(other) ? (other + '') : other;
	  }
	  if (typeof value != 'string') {
	    return value === 0 ? value : +value;
	  }
	  value = value.replace(reTrim, '');
	  var isBinary = reIsBinary.test(value);
	  return (isBinary || reIsOctal.test(value))
	    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
	    : (reIsBadHex.test(value) ? NAN : +value);
	}

	/**
	 * Converts `value` to a string. An empty string is returned for `null`
	 * and `undefined` values. The sign of `-0` is preserved.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 * @example
	 *
	 * _.toString(null);
	 * // => ''
	 *
	 * _.toString(-0);
	 * // => '-0'
	 *
	 * _.toString([1, 2, 3]);
	 * // => '1,2,3'
	 */
	function toString(value) {
	  return value == null ? '' : baseToString(value);
	}

	/**
	 * Truncates `string` if it's longer than the given maximum string length.
	 * The last characters of the truncated string are replaced with the omission
	 * string which defaults to "...".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category String
	 * @param {string} [string=''] The string to truncate.
	 * @param {Object} [options={}] The options object.
	 * @param {number} [options.length=30] The maximum string length.
	 * @param {string} [options.omission='...'] The string to indicate text is omitted.
	 * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
	 * @returns {string} Returns the truncated string.
	 * @example
	 *
	 * _.truncate('hi-diddly-ho there, neighborino');
	 * // => 'hi-diddly-ho there, neighbo...'
	 *
	 * _.truncate('hi-diddly-ho there, neighborino', {
	 *   'length': 24,
	 *   'separator': ' '
	 * });
	 * // => 'hi-diddly-ho there,...'
	 *
	 * _.truncate('hi-diddly-ho there, neighborino', {
	 *   'length': 24,
	 *   'separator': /,? +/
	 * });
	 * // => 'hi-diddly-ho there...'
	 *
	 * _.truncate('hi-diddly-ho there, neighborino', {
	 *   'omission': ' [...]'
	 * });
	 * // => 'hi-diddly-ho there, neig [...]'
	 */
	function truncate(string, options) {
	  var length = DEFAULT_TRUNC_LENGTH,
	      omission = DEFAULT_TRUNC_OMISSION;

	  if (isObject(options)) {
	    var separator = 'separator' in options ? options.separator : separator;
	    length = 'length' in options ? toInteger(options.length) : length;
	    omission = 'omission' in options ? baseToString(options.omission) : omission;
	  }
	  string = toString(string);

	  var strLength = string.length;
	  if (hasUnicode(string)) {
	    var strSymbols = stringToArray(string);
	    strLength = strSymbols.length;
	  }
	  if (length >= strLength) {
	    return string;
	  }
	  var end = length - stringSize(omission);
	  if (end < 1) {
	    return omission;
	  }
	  var result = strSymbols
	    ? castSlice(strSymbols, 0, end).join('')
	    : string.slice(0, end);

	  if (separator === undefined) {
	    return result + omission;
	  }
	  if (strSymbols) {
	    end += (result.length - end);
	  }
	  if (isRegExp(separator)) {
	    if (string.slice(end).search(separator)) {
	      var match,
	          substring = result;

	      if (!separator.global) {
	        separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
	      }
	      separator.lastIndex = 0;
	      while ((match = separator.exec(substring))) {
	        var newEnd = match.index;
	      }
	      result = result.slice(0, newEnd === undefined ? end : newEnd);
	    }
	  } else if (string.indexOf(baseToString(separator), end) != end) {
	    var index = result.lastIndexOf(separator);
	    if (index > -1) {
	      result = result.slice(0, index);
	    }
	  }
	  return result + omission;
	}

	module.exports = truncate;
	});

	var constants$3 = {
	  SAMPLE_RATE_METRIC_KEY: '_sample_rate',
	  SAMPLING_PRIORITY_KEY: '_sampling_priority_v1',
	  ANALYTICS_KEY: '_dd1.sr.eausr',
	  ORIGIN_KEY: '_dd.origin',
	  REFERENCE_NOOP: 'noop'
	};

	function truncate (value, length) {
	  if (typeof length !== 'number' || !(length >= 0)) {
	    return value
	  }

	  const type = typeof value;

	  if (type === 'object' && value === null) {
	    return value
	  }

	  if (type === 'object' || Array.isArray(value)) {
	    return lodash_truncate(JSON.stringify(value), { length })
	  }

	  if (type === 'string') {
	    return lodash_truncate(value, { length })
	  }

	  if (type === 'bigint' || type === 'symbol' || type === 'function') {
	    return lodash_truncate(value.toString(), { length })
	  }

	  return value
	}

	var truncate_1 = truncate;

	const Span = lib.Span;








	const SAMPLE_RATE_METRIC_KEY = constants$3.SAMPLE_RATE_METRIC_KEY;

	class SignalFxSpan extends Span {
	  constructor (tracer, recorder, sampler, prioritySampler, fields) {
	    super();

	    const startTime = fields.startTime || platform$3.now();
	    const operationName = fields.operationName;
	    const parent = fields.parent || null;
	    const tags = Object.assign({}, fields.tags);
	    const metrics = {
	      [SAMPLE_RATE_METRIC_KEY]: sampler.rate()
	    };

	    this._parentTracer = tracer;
	    this._sampler = sampler;
	    this._recorder = recorder;
	    this._prioritySampler = prioritySampler;
	    this._startTime = startTime;

	    this._spanContext = this._createContext(parent);
	    this._spanContext._name = operationName;
	    this._spanContext._tags = tags;
	    this._spanContext._logs = [];
	    this._spanContext._metrics = metrics;

	    this._handle = platform$3.metrics().track(this);
	  }

	  toString () {
	    const spanContext = this.context();
	    const json = JSON.stringify({
	      traceId: utils.idToHex(spanContext._traceId),
	      spanId: utils.idToHex(spanContext._spanId),
	      parentId: utils.idToHex(spanContext._parentId),
	      service: spanContext._tags['service.name'],
	      name: spanContext._name,
	      resource: lodash_truncate(spanContext._tags['resource.name'], { length: 100 })
	    });

	    return `Span${json}`
	  }

	  _createContext (parent) {
	    let spanContext;

	    if (parent) {
	      spanContext = new span_context({
	        traceId: parent._traceId,
	        spanId: platform$3.id(),
	        parentId: parent._spanId,
	        sampling: parent._sampling,
	        baggageItems: parent._baggageItems,
	        trace: parent._trace
	      });
	    } else {
	      const spanId = platform$3.id();
	      spanContext = new span_context({
	        traceId: spanId,
	        spanId
	      });
	    }

	    spanContext._trace.started.push(this);

	    return spanContext
	  }

	  _context () {
	    return this._spanContext
	  }

	  _tracer () {
	    return this._parentTracer
	  }

	  _setOperationName (name) {
	    this._spanContext._name = name;
	  }

	  _setBaggageItem (key, value) {
	    this._spanContext._baggageItems[key] = value;
	  }

	  _getBaggageItem (key) {
	    return this._spanContext._baggageItems[key]
	  }

	  _addTags (keyValuePairs) {
	    try {
	      for (const key of Object.keys(keyValuePairs)) {
	        this._spanContext._tags[key] = truncate_1(keyValuePairs[key], this.tracer()._recordedValueMaxLength);
	      }
	    } catch (e) {
	      log_1$1.error(e);
	    }
	  }

	  _log (keyValuePairs, timestamp) {
	    this._spanContext._logs.push({
	      timestamp: timestamp || platform$3.now(),
	      value: truncate_1(keyValuePairs, this.tracer()._recordedValueMaxLength)
	    });
	  }

	  _finish (finishTime) {
	    if (this._duration !== undefined) {
	      return
	    }

	    finishTime = parseFloat(finishTime) || platform$3.now();

	    this._duration = finishTime - this._startTime;
	    this._spanContext._trace.finished.push(this);
	    this._spanContext._isFinished = true;
	    this._handle.finish();
	    this._recorder.record(this);
	  }
	}

	var span = SignalFxSpan;

	class SignalFxNonReportingSpanContext extends span_context {
	}

	var nonreporting_span_context = SignalFxNonReportingSpanContext;

	class SignalFxNonReportingSpan extends span {
	  _createContext (_) {
	    const spanId = platform$3.id();
	    const spanContext = new nonreporting_span_context({
	      traceId: spanId,
	      spanId
	    });
	    return spanContext
	  }

	  _finish (finishTime) {
	    if (this._duration !== undefined) {
	      return
	    }

	    finishTime = parseFloat(finishTime) || platform$3.now();
	    this._duration = finishTime - this._startTime;
	    this._spanContext._isFinished = true;
	    this._handle.finish();
	  }
	}

	var nonreporting_span = SignalFxNonReportingSpan;

	const tags = {
	  // Common
	  SERVICE_NAME: 'service.name',
	  RESOURCE_NAME: 'resource.name',
	  SPAN_TYPE: 'span.type',
	  SPAN_KIND: 'span.kind',
	  SAMPLING_PRIORITY: 'sampling.priority',
	  ANALYTICS: '_dd1.sr.eausr',
	  ERROR: 'error',
	  MANUAL_KEEP: 'manual.keep',
	  MANUAL_DROP: 'manual.drop',

	  // HTTP
	  HTTP_URL: 'http.url',
	  HTTP_METHOD: 'http.method',
	  HTTP_STATUS_CODE: 'http.status_code',
	  HTTP_ROUTE: 'http.route',
	  HTTP_REQUEST_HEADERS: 'http.request.headers',
	  HTTP_RESPONSE_HEADERS: 'http.response.headers'
	};

	// Deprecated
	tags.ANALYTICS_SAMPLE_RATE = tags.ANALYTICS;

	var tags_1 = tags;

	const Int64BE$3 = int64Buffer$1.Int64BE;





	const SAMPLING_PRIORITY_KEY = constants$3.SAMPLING_PRIORITY_KEY;
	const ANALYTICS_KEY = constants$3.ANALYTICS_KEY;
	const ANALYTICS$2 = tags_1.ANALYTICS;
	const ORIGIN_KEY = constants$3.ORIGIN_KEY;

	const map = {
	  'service.name': 'service',
	  'span.type': 'type',
	  'resource.name': 'resource'
	};

	function format$5 (span) {
	  const formatted = formatSpan$1(span);

	  extractError(formatted, span);
	  extractTags(formatted, span);
	  extractMetrics(formatted, span);

	  return formatted
	}

	function formatSpan$1 (span) {
	  const spanContext = span.context();

	  return {
	    trace_id: spanContext._traceId,
	    span_id: spanContext._spanId,
	    parent_id: spanContext._parentId,
	    name: serialize(spanContext._name),
	    resource: serialize(spanContext._name),
	    error: 0,
	    meta: {},
	    metrics: {},
	    start: new Int64BE$3(Math.round(span._startTime * 1e6)),
	    duration: new Int64BE$3(Math.round(span._duration * 1e6))
	  }
	}

	function extractTags (trace, span) {
	  const origin = span.context()._trace.origin;
	  const tags = span.context()._tags;

	  Object.keys(tags).forEach(tag => {
	    switch (tag) {
	      case 'service.name':
	      case 'span.type':
	      case 'resource.name':
	        addTag$1(trace, map[tag], tags[tag]);
	        break
	      case ANALYTICS$2:
	        break
	      case 'error':
	        if (tags[tag]) {
	          trace.error = 1;
	        }
	        break
	      case 'sfx.error.kind':
	      case 'sfx.error.message':
	      case 'sfx.error.stack':
	        trace.error = 1;
	      default: // eslint-disable-line no-fallthrough
	        addTag$1(trace.meta, tag, tags[tag]);
	    }
	  });

	  if (origin) {
	    addTag$1(trace.meta, ORIGIN_KEY, origin);
	  }

	  if (span.tracer()._service === tags['service.name']) {
	    addTag$1(trace.meta, 'runtime-id', platform$3.runtime().id());
	    addTag$1(trace.meta, 'language', 'javascript');
	  }
	}

	function extractError (trace, span) {
	  const error = span.context()._tags['error'];

	  if (error instanceof Error) {
	    trace.meta['sfx.error.message'] = error.message;
	    trace.meta['sfx.error.kind'] = error.name;
	    trace.meta['sfx.error.stack'] = error.stack;
	  }
	}

	function extractMetrics (trace, span) {
	  const spanContext = span.context();

	  let analytics = spanContext._tags[ANALYTICS$2];

	  Object.keys(spanContext._metrics).forEach(metric => {
	    if (typeof spanContext._metrics[metric] === 'number') {
	      trace.metrics[metric] = spanContext._metrics[metric];
	    }
	  });

	  if (spanContext._sampling.priority !== undefined) {
	    trace.metrics[SAMPLING_PRIORITY_KEY] = spanContext._sampling.priority;
	  }

	  switch (typeof analytics) {
	    case 'string':
	      analytics = parseFloat(analytics);
	    case 'number': // eslint-disable-line no-fallthrough
	      if (!isNaN(analytics)) {
	        trace.metrics[ANALYTICS_KEY] = Math.max(Math.min(analytics, 1), 0);
	      }
	      break
	    case 'boolean':
	      trace.metrics[ANALYTICS_KEY] = analytics ? 1 : 0;
	      break
	  }
	}

	function addTag$1 (meta, key, value, depth) {
	  depth = depth || 0;

	  switch (typeof value) {
	    case 'string':
	      meta[key] = value;
	      break
	    case 'undefined':
	      break
	    case 'object':
	      if (value === null) break

	      if (!Array.isArray(value) && depth < 2) {
	        Object.keys(value).forEach(prop => {
	          addTag$1(meta, `${key}.${prop}`, value[prop], depth + 1);
	        });
	        break
	      }
	    default: // eslint-disable-line no-fallthrough
	      addTag$1(meta, key, serialize(value));
	  }
	}

	function serialize (obj) {
	  try {
	    return obj && typeof obj.toString !== 'function' ? JSON.stringify(obj) : String(obj)
	  } catch (e) {
	    log_1$1.error(e);
	  }
	}

	var format_1 = format$5;

	/* globals Buffer */

	var bufferGlobal =
	  c(("undefined" !== typeof Buffer) && Buffer) ||
	  c(commonjsGlobal.Buffer) ||
	  c(("undefined" !== typeof window) && window.Buffer) ||
	  commonjsGlobal.Buffer;

	function c(B) {
	  return B && B.isBuffer && B;
	}

	var bufferishArray = createCommonjsModule(function (module) {
	// bufferish-array.js



	var exports = module.exports = alloc(0);

	exports.alloc = alloc;
	exports.concat = bufferish.concat;
	exports.from = from;

	/**
	 * @param size {Number}
	 * @returns {Buffer|Uint8Array|Array}
	 */

	function alloc(size) {
	  return new Array(size);
	}

	/**
	 * @param value {Array|ArrayBuffer|Buffer|String}
	 * @returns {Array}
	 */

	function from(value) {
	  if (!bufferish.isBuffer(value) && bufferish.isView(value)) {
	    // TypedArray to Uint8Array
	    value = bufferish.Uint8Array.from(value);
	  } else if (bufferish.isArrayBuffer(value)) {
	    // ArrayBuffer to Uint8Array
	    value = new Uint8Array(value);
	  } else if (typeof value === "string") {
	    // String to Array
	    return bufferish.from.call(exports, value);
	  } else if (typeof value === "number") {
	    throw new TypeError('"value" argument must not be a number');
	  }

	  // Array-like to Array
	  return Array.prototype.slice.call(value);
	}
	});

	var bufferishBuffer = createCommonjsModule(function (module) {
	// bufferish-buffer.js


	var Buffer = bufferish.global;

	var exports = module.exports = bufferish.hasBuffer ? alloc(0) : [];

	exports.alloc = bufferish.hasBuffer && Buffer.alloc || alloc;
	exports.concat = bufferish.concat;
	exports.from = from;

	/**
	 * @param size {Number}
	 * @returns {Buffer|Uint8Array|Array}
	 */

	function alloc(size) {
	  return new Buffer(size);
	}

	/**
	 * @param value {Array|ArrayBuffer|Buffer|String}
	 * @returns {Buffer}
	 */

	function from(value) {
	  if (!bufferish.isBuffer(value) && bufferish.isView(value)) {
	    // TypedArray to Uint8Array
	    value = bufferish.Uint8Array.from(value);
	  } else if (bufferish.isArrayBuffer(value)) {
	    // ArrayBuffer to Uint8Array
	    value = new Uint8Array(value);
	  } else if (typeof value === "string") {
	    // String to Buffer
	    return bufferish.from.call(exports, value);
	  } else if (typeof value === "number") {
	    throw new TypeError('"value" argument must not be a number');
	  }

	  // Array-like to Buffer
	  if (Buffer.from && Buffer.from.length !== 1) {
	    return Buffer.from(value); // node v6+
	  } else {
	    return new Buffer(value); // node v4
	  }
	}
	});

	var bufferishUint8array = createCommonjsModule(function (module) {
	// bufferish-uint8array.js



	var exports = module.exports = bufferish.hasArrayBuffer ? alloc(0) : [];

	exports.alloc = alloc;
	exports.concat = bufferish.concat;
	exports.from = from;

	/**
	 * @param size {Number}
	 * @returns {Buffer|Uint8Array|Array}
	 */

	function alloc(size) {
	  return new Uint8Array(size);
	}

	/**
	 * @param value {Array|ArrayBuffer|Buffer|String}
	 * @returns {Uint8Array}
	 */

	function from(value) {
	  if (bufferish.isView(value)) {
	    // TypedArray to ArrayBuffer
	    var byteOffset = value.byteOffset;
	    var byteLength = value.byteLength;
	    value = value.buffer;
	    if (value.byteLength !== byteLength) {
	      if (value.slice) {
	        value = value.slice(byteOffset, byteOffset + byteLength);
	      } else {
	        // Android 4.1 does not have ArrayBuffer.prototype.slice
	        value = new Uint8Array(value);
	        if (value.byteLength !== byteLength) {
	          // TypedArray to ArrayBuffer to Uint8Array to Array
	          value = Array.prototype.slice.call(value, byteOffset, byteOffset + byteLength);
	        }
	      }
	    }
	  } else if (typeof value === "string") {
	    // String to Uint8Array
	    return bufferish.from.call(exports, value);
	  } else if (typeof value === "number") {
	    throw new TypeError('"value" argument must not be a number');
	  }

	  return new Uint8Array(value);
	}
	});

	// buffer-lite.js

	var copy_1$1 = copy$1;
	var toString_1$1 = toString$6;
	var write_1 = write$3;

	/**
	 * Buffer.prototype.write()
	 *
	 * @param string {String}
	 * @param [offset] {Number}
	 * @returns {Number}
	 */

	function write$3(string, offset) {
	  var buffer = this;
	  var index = offset || (offset |= 0);
	  var length = string.length;
	  var chr = 0;
	  var i = 0;
	  while (i < length) {
	    chr = string.charCodeAt(i++);

	    if (chr < 128) {
	      buffer[index++] = chr;
	    } else if (chr < 0x800) {
	      // 2 bytes
	      buffer[index++] = 0xC0 | (chr >>> 6);
	      buffer[index++] = 0x80 | (chr & 0x3F);
	    } else if (chr < 0xD800 || chr > 0xDFFF) {
	      // 3 bytes
	      buffer[index++] = 0xE0 | (chr  >>> 12);
	      buffer[index++] = 0x80 | ((chr >>> 6)  & 0x3F);
	      buffer[index++] = 0x80 | (chr          & 0x3F);
	    } else {
	      // 4 bytes - surrogate pair
	      chr = (((chr - 0xD800) << 10) | (string.charCodeAt(i++) - 0xDC00)) + 0x10000;
	      buffer[index++] = 0xF0 | (chr >>> 18);
	      buffer[index++] = 0x80 | ((chr >>> 12) & 0x3F);
	      buffer[index++] = 0x80 | ((chr >>> 6)  & 0x3F);
	      buffer[index++] = 0x80 | (chr          & 0x3F);
	    }
	  }
	  return index - offset;
	}

	/**
	 * Buffer.prototype.toString()
	 *
	 * @param [encoding] {String} ignored
	 * @param [start] {Number}
	 * @param [end] {Number}
	 * @returns {String}
	 */

	function toString$6(encoding, start, end) {
	  var buffer = this;
	  var index = start|0;
	  if (!end) end = buffer.length;
	  var string = '';
	  var chr = 0;

	  while (index < end) {
	    chr = buffer[index++];
	    if (chr < 128) {
	      string += String.fromCharCode(chr);
	      continue;
	    }

	    if ((chr & 0xE0) === 0xC0) {
	      // 2 bytes
	      chr = (chr & 0x1F) << 6 |
	            (buffer[index++] & 0x3F);

	    } else if ((chr & 0xF0) === 0xE0) {
	      // 3 bytes
	      chr = (chr & 0x0F)             << 12 |
	            (buffer[index++] & 0x3F) << 6  |
	            (buffer[index++] & 0x3F);

	    } else if ((chr & 0xF8) === 0xF0) {
	      // 4 bytes
	      chr = (chr & 0x07)             << 18 |
	            (buffer[index++] & 0x3F) << 12 |
	            (buffer[index++] & 0x3F) << 6  |
	            (buffer[index++] & 0x3F);
	    }

	    if (chr >= 0x010000) {
	      // A surrogate pair
	      chr -= 0x010000;

	      string += String.fromCharCode((chr >>> 10) + 0xD800, (chr & 0x3FF) + 0xDC00);
	    } else {
	      string += String.fromCharCode(chr);
	    }
	  }

	  return string;
	}

	/**
	 * Buffer.prototype.copy()
	 *
	 * @param target {Buffer}
	 * @param [targetStart] {Number}
	 * @param [start] {Number}
	 * @param [end] {Number}
	 * @returns {number}
	 */

	function copy$1(target, targetStart, start, end) {
	  var i;
	  if (!start) start = 0;
	  if (!end && end !== 0) end = this.length;
	  if (!targetStart) targetStart = 0;
	  var len = end - start;

	  if (target === this && start < targetStart && targetStart < end) {
	    // descending
	    for (i = len - 1; i >= 0; i--) {
	      target[i + targetStart] = this[i + start];
	    }
	  } else {
	    // ascending
	    for (i = 0; i < len; i++) {
	      target[i + targetStart] = this[i + start];
	    }
	  }

	  return len;
	}

	var bufferLite = {
		copy: copy_1$1,
		toString: toString_1$1,
		write: write_1
	};

	// bufferish-proto.js

	/* jshint eqnull:true */



	var copy_1 = copy;
	var slice_1 = slice;
	var toString_1 = toString$5;
	var write$2 = gen("write");


	var Buffer$5 = bufferish.global;

	var isBufferShim = bufferish.hasBuffer && ("TYPED_ARRAY_SUPPORT" in Buffer$5);
	var brokenTypedArray = isBufferShim && !Buffer$5.TYPED_ARRAY_SUPPORT;

	/**
	 * @param target {Buffer|Uint8Array|Array}
	 * @param [targetStart] {Number}
	 * @param [start] {Number}
	 * @param [end] {Number}
	 * @returns {Buffer|Uint8Array|Array}
	 */

	function copy(target, targetStart, start, end) {
	  var thisIsBuffer = bufferish.isBuffer(this);
	  var targetIsBuffer = bufferish.isBuffer(target);
	  if (thisIsBuffer && targetIsBuffer) {
	    // Buffer to Buffer
	    return this.copy(target, targetStart, start, end);
	  } else if (!brokenTypedArray && !thisIsBuffer && !targetIsBuffer &&
	    bufferish.isView(this) && bufferish.isView(target)) {
	    // Uint8Array to Uint8Array (except for minor some browsers)
	    var buffer = (start || end != null) ? slice.call(this, start, end) : this;
	    target.set(buffer, targetStart);
	    return buffer.length;
	  } else {
	    // other cases
	    return bufferLite.copy.call(this, target, targetStart, start, end);
	  }
	}

	/**
	 * @param [start] {Number}
	 * @param [end] {Number}
	 * @returns {Buffer|Uint8Array|Array}
	 */

	function slice(start, end) {
	  // for Buffer, Uint8Array (except for minor some browsers) and Array
	  var f = this.slice || (!brokenTypedArray && this.subarray);
	  if (f) return f.call(this, start, end);

	  // Uint8Array (for minor some browsers)
	  var target = bufferish.alloc.call(this, end - start);
	  copy.call(this, target, 0, start, end);
	  return target;
	}

	/**
	 * Buffer.prototype.toString()
	 *
	 * @param [encoding] {String} ignored
	 * @param [start] {Number}
	 * @param [end] {Number}
	 * @returns {String}
	 */

	function toString$5(encoding, start, end) {
	  var f = (!isBufferShim && bufferish.isBuffer(this)) ? this.toString : bufferLite.toString;
	  return f.apply(this, arguments);
	}

	/**
	 * @private
	 */

	function gen(method) {
	  return wrap;

	  function wrap() {
	    var f = this[method] || bufferLite[method];
	    return f.apply(this, arguments);
	  }
	}

	var bufferishProto = {
		copy: copy_1,
		slice: slice_1,
		toString: toString_1,
		write: write$2
	};

	var bufferish = createCommonjsModule(function (module, exports) {
	// bufferish.js

	var Buffer = exports.global = bufferGlobal;
	var hasBuffer = exports.hasBuffer = Buffer && !!Buffer.isBuffer;
	var hasArrayBuffer = exports.hasArrayBuffer = ("undefined" !== typeof ArrayBuffer);

	var isArray = exports.isArray = isarray;
	exports.isArrayBuffer = hasArrayBuffer ? isArrayBuffer : _false;
	var isBuffer = exports.isBuffer = hasBuffer ? Buffer.isBuffer : _false;
	var isView = exports.isView = hasArrayBuffer ? (ArrayBuffer.isView || _is("ArrayBuffer", "buffer")) : _false;

	exports.alloc = alloc;
	exports.concat = concat;
	exports.from = from;

	var BufferArray = exports.Array = bufferishArray;
	var BufferBuffer = exports.Buffer = bufferishBuffer;
	var BufferUint8Array = exports.Uint8Array = bufferishUint8array;
	var BufferProto = exports.prototype = bufferishProto;

	/**
	 * @param value {Array|ArrayBuffer|Buffer|String}
	 * @returns {Buffer|Uint8Array|Array}
	 */

	function from(value) {
	  if (typeof value === "string") {
	    return fromString.call(this, value);
	  } else {
	    return auto(this).from(value);
	  }
	}

	/**
	 * @param size {Number}
	 * @returns {Buffer|Uint8Array|Array}
	 */

	function alloc(size) {
	  return auto(this).alloc(size);
	}

	/**
	 * @param list {Array} array of (Buffer|Uint8Array|Array)s
	 * @param [length]
	 * @returns {Buffer|Uint8Array|Array}
	 */

	function concat(list, length) {
	  if (!length) {
	    length = 0;
	    Array.prototype.forEach.call(list, dryrun);
	  }
	  var ref = (this !== exports) && this || list[0];
	  var result = alloc.call(ref, length);
	  var offset = 0;
	  Array.prototype.forEach.call(list, append);
	  return result;

	  function dryrun(buffer) {
	    length += buffer.length;
	  }

	  function append(buffer) {
	    offset += BufferProto.copy.call(buffer, result, offset);
	  }
	}

	var _isArrayBuffer = _is("ArrayBuffer");

	function isArrayBuffer(value) {
	  return (value instanceof ArrayBuffer) || _isArrayBuffer(value);
	}

	/**
	 * @private
	 */

	function fromString(value) {
	  var expected = value.length * 3;
	  var that = alloc.call(this, expected);
	  var actual = BufferProto.write.call(that, value);
	  if (expected !== actual) {
	    that = BufferProto.slice.call(that, 0, actual);
	  }
	  return that;
	}

	function auto(that) {
	  return isBuffer(that) ? BufferBuffer
	    : isView(that) ? BufferUint8Array
	    : isArray(that) ? BufferArray
	    : hasBuffer ? BufferBuffer
	    : hasArrayBuffer ? BufferUint8Array
	    : BufferArray;
	}

	function _false() {
	  return false;
	}

	function _is(name, key) {
	  /* jshint eqnull:true */
	  name = "[object " + name + "]";
	  return function(value) {
	    return (value != null) && {}.toString.call(key ? value[key] : value) === name;
	  };
	}
	});

	// ext-buffer.js

	var ExtBuffer_1 = ExtBuffer$3;



	function ExtBuffer$3(buffer, type) {
	  if (!(this instanceof ExtBuffer$3)) return new ExtBuffer$3(buffer, type);
	  this.buffer = bufferish.from(buffer);
	  this.type = type;
	}

	var extBuffer = {
		ExtBuffer: ExtBuffer_1
	};

	// ext-packer.js

	var setExtPackers_1 = setExtPackers;


	var Buffer$4 = bufferish.global;
	var packTypedArray = bufferish.Uint8Array.from;
	var _encode;

	var ERROR_COLUMNS$1 = {name: 1, message: 1, stack: 1, columnNumber: 1, fileName: 1, lineNumber: 1};

	function setExtPackers(codec) {
	  codec.addExtPacker(0x0E, Error, [packError, encode$4]);
	  codec.addExtPacker(0x01, EvalError, [packError, encode$4]);
	  codec.addExtPacker(0x02, RangeError, [packError, encode$4]);
	  codec.addExtPacker(0x03, ReferenceError, [packError, encode$4]);
	  codec.addExtPacker(0x04, SyntaxError, [packError, encode$4]);
	  codec.addExtPacker(0x05, TypeError, [packError, encode$4]);
	  codec.addExtPacker(0x06, URIError, [packError, encode$4]);

	  codec.addExtPacker(0x0A, RegExp, [packRegExp, encode$4]);
	  codec.addExtPacker(0x0B, Boolean, [packValueOf, encode$4]);
	  codec.addExtPacker(0x0C, String, [packValueOf, encode$4]);
	  codec.addExtPacker(0x0D, Date, [Number, encode$4]);
	  codec.addExtPacker(0x0F, Number, [packValueOf, encode$4]);

	  if ("undefined" !== typeof Uint8Array) {
	    codec.addExtPacker(0x11, Int8Array, packTypedArray);
	    codec.addExtPacker(0x12, Uint8Array, packTypedArray);
	    codec.addExtPacker(0x13, Int16Array, packTypedArray);
	    codec.addExtPacker(0x14, Uint16Array, packTypedArray);
	    codec.addExtPacker(0x15, Int32Array, packTypedArray);
	    codec.addExtPacker(0x16, Uint32Array, packTypedArray);
	    codec.addExtPacker(0x17, Float32Array, packTypedArray);

	    // PhantomJS/1.9.7 doesn't have Float64Array
	    if ("undefined" !== typeof Float64Array) {
	      codec.addExtPacker(0x18, Float64Array, packTypedArray);
	    }

	    // IE10 doesn't have Uint8ClampedArray
	    if ("undefined" !== typeof Uint8ClampedArray) {
	      codec.addExtPacker(0x19, Uint8ClampedArray, packTypedArray);
	    }

	    codec.addExtPacker(0x1A, ArrayBuffer, packTypedArray);
	    codec.addExtPacker(0x1D, DataView, packTypedArray);
	  }

	  if (bufferish.hasBuffer) {
	    codec.addExtPacker(0x1B, Buffer$4, bufferish.from);
	  }
	}

	function encode$4(input) {
	  if (!_encode) _encode = encode_1.encode; // lazy load
	  return _encode(input);
	}

	function packValueOf(value) {
	  return (value).valueOf();
	}

	function packRegExp(value) {
	  value = RegExp.prototype.toString.call(value).split("/");
	  value.shift();
	  var out = [value.pop()];
	  out.unshift(value.join("/"));
	  return out;
	}

	function packError(value) {
	  var out = {};
	  for (var key in ERROR_COLUMNS$1) {
	    out[key] = value[key];
	  }
	  return out;
	}

	var extPacker = {
		setExtPackers: setExtPackers_1
	};

	var int64Buffer = createCommonjsModule(function (module, exports) {

	!function(exports) {
	  // constants

	  var UNDEFINED = "undefined";
	  var BUFFER = (UNDEFINED !== typeof Buffer) && Buffer;
	  var UINT8ARRAY = (UNDEFINED !== typeof Uint8Array) && Uint8Array;
	  var ARRAYBUFFER = (UNDEFINED !== typeof ArrayBuffer) && ArrayBuffer;
	  var ZERO = [0, 0, 0, 0, 0, 0, 0, 0];
	  var isArray = Array.isArray || _isArray;
	  var BIT32 = 4294967296;
	  var BIT24 = 16777216;

	  // storage class

	  var storage; // Array;

	  // generate classes

	  factory("Uint64BE", true, true);
	  factory("Int64BE", true, false);
	  factory("Uint64LE", false, true);
	  factory("Int64LE", false, false);

	  // class factory

	  function factory(name, bigendian, unsigned) {
	    var posH = bigendian ? 0 : 4;
	    var posL = bigendian ? 4 : 0;
	    var pos0 = bigendian ? 0 : 3;
	    var pos1 = bigendian ? 1 : 2;
	    var pos2 = bigendian ? 2 : 1;
	    var pos3 = bigendian ? 3 : 0;
	    var fromPositive = bigendian ? fromPositiveBE : fromPositiveLE;
	    var fromNegative = bigendian ? fromNegativeBE : fromNegativeLE;
	    var proto = Int64.prototype;
	    var isName = "is" + name;
	    var _isInt64 = "_" + isName;

	    // properties
	    proto.buffer = void 0;
	    proto.offset = 0;
	    proto[_isInt64] = true;

	    // methods
	    proto.toNumber = toNumber;
	    proto.toString = toString;
	    proto.toJSON = toNumber;
	    proto.toArray = toArray;

	    // add .toBuffer() method only when Buffer available
	    if (BUFFER) proto.toBuffer = toBuffer;

	    // add .toArrayBuffer() method only when Uint8Array available
	    if (UINT8ARRAY) proto.toArrayBuffer = toArrayBuffer;

	    // isUint64BE, isInt64BE
	    Int64[isName] = isInt64;

	    // CommonJS
	    exports[name] = Int64;

	    return Int64;

	    // constructor
	    function Int64(buffer, offset, value, raddix) {
	      if (!(this instanceof Int64)) return new Int64(buffer, offset, value, raddix);
	      return init(this, buffer, offset, value, raddix);
	    }

	    // isUint64BE, isInt64BE
	    function isInt64(b) {
	      return !!(b && b[_isInt64]);
	    }

	    // initializer
	    function init(that, buffer, offset, value, raddix) {
	      if (UINT8ARRAY && ARRAYBUFFER) {
	        if (buffer instanceof ARRAYBUFFER) buffer = new UINT8ARRAY(buffer);
	        if (value instanceof ARRAYBUFFER) value = new UINT8ARRAY(value);
	      }

	      // Int64BE() style
	      if (!buffer && !offset && !value && !storage) {
	        // shortcut to initialize with zero
	        that.buffer = newArray(ZERO, 0);
	        return;
	      }

	      // Int64BE(value, raddix) style
	      if (!isValidBuffer(buffer, offset)) {
	        var _storage = storage || Array;
	        raddix = offset;
	        value = buffer;
	        offset = 0;
	        buffer = new _storage(8);
	      }

	      that.buffer = buffer;
	      that.offset = offset |= 0;

	      // Int64BE(buffer, offset) style
	      if (UNDEFINED === typeof value) return;

	      // Int64BE(buffer, offset, value, raddix) style
	      if ("string" === typeof value) {
	        fromString(buffer, offset, value, raddix || 10);
	      } else if (isValidBuffer(value, raddix)) {
	        fromArray(buffer, offset, value, raddix);
	      } else if ("number" === typeof raddix) {
	        writeInt32(buffer, offset + posH, value); // high
	        writeInt32(buffer, offset + posL, raddix); // low
	      } else if (value > 0) {
	        fromPositive(buffer, offset, value); // positive
	      } else if (value < 0) {
	        fromNegative(buffer, offset, value); // negative
	      } else {
	        fromArray(buffer, offset, ZERO, 0); // zero, NaN and others
	      }
	    }

	    function fromString(buffer, offset, str, raddix) {
	      var pos = 0;
	      var len = str.length;
	      var high = 0;
	      var low = 0;
	      if (str[0] === "-") pos++;
	      var sign = pos;
	      while (pos < len) {
	        var chr = parseInt(str[pos++], raddix);
	        if (!(chr >= 0)) break; // NaN
	        low = low * raddix + chr;
	        high = high * raddix + Math.floor(low / BIT32);
	        low %= BIT32;
	      }
	      if (sign) {
	        high = ~high;
	        if (low) {
	          low = BIT32 - low;
	        } else {
	          high++;
	        }
	      }
	      writeInt32(buffer, offset + posH, high);
	      writeInt32(buffer, offset + posL, low);
	    }

	    function toNumber() {
	      var buffer = this.buffer;
	      var offset = this.offset;
	      var high = readInt32(buffer, offset + posH);
	      var low = readInt32(buffer, offset + posL);
	      if (!unsigned) high |= 0; // a trick to get signed
	      return high ? (high * BIT32 + low) : low;
	    }

	    function toString(radix) {
	      var buffer = this.buffer;
	      var offset = this.offset;
	      var high = readInt32(buffer, offset + posH);
	      var low = readInt32(buffer, offset + posL);
	      var str = "";
	      var sign = !unsigned && (high & 0x80000000);
	      if (sign) {
	        high = ~high;
	        low = BIT32 - low;
	      }
	      radix = radix || 10;
	      while (1) {
	        var mod = (high % radix) * BIT32 + low;
	        high = Math.floor(high / radix);
	        low = Math.floor(mod / radix);
	        str = (mod % radix).toString(radix) + str;
	        if (!high && !low) break;
	      }
	      if (sign) {
	        str = "-" + str;
	      }
	      return str;
	    }

	    function writeInt32(buffer, offset, value) {
	      buffer[offset + pos3] = value & 255;
	      value = value >> 8;
	      buffer[offset + pos2] = value & 255;
	      value = value >> 8;
	      buffer[offset + pos1] = value & 255;
	      value = value >> 8;
	      buffer[offset + pos0] = value & 255;
	    }

	    function readInt32(buffer, offset) {
	      return (buffer[offset + pos0] * BIT24) +
	        (buffer[offset + pos1] << 16) +
	        (buffer[offset + pos2] << 8) +
	        buffer[offset + pos3];
	    }
	  }

	  function toArray(raw) {
	    var buffer = this.buffer;
	    var offset = this.offset;
	    storage = null; // Array
	    if (raw !== false && offset === 0 && buffer.length === 8 && isArray(buffer)) return buffer;
	    return newArray(buffer, offset);
	  }

	  function toBuffer(raw) {
	    var buffer = this.buffer;
	    var offset = this.offset;
	    storage = BUFFER;
	    if (raw !== false && offset === 0 && buffer.length === 8 && Buffer.isBuffer(buffer)) return buffer;
	    var dest = new BUFFER(8);
	    fromArray(dest, 0, buffer, offset);
	    return dest;
	  }

	  function toArrayBuffer(raw) {
	    var buffer = this.buffer;
	    var offset = this.offset;
	    var arrbuf = buffer.buffer;
	    storage = UINT8ARRAY;
	    if (raw !== false && offset === 0 && (arrbuf instanceof ARRAYBUFFER) && arrbuf.byteLength === 8) return arrbuf;
	    var dest = new UINT8ARRAY(8);
	    fromArray(dest, 0, buffer, offset);
	    return dest.buffer;
	  }

	  function isValidBuffer(buffer, offset) {
	    var len = buffer && buffer.length;
	    offset |= 0;
	    return len && (offset + 8 <= len) && ("string" !== typeof buffer[offset]);
	  }

	  function fromArray(destbuf, destoff, srcbuf, srcoff) {
	    destoff |= 0;
	    srcoff |= 0;
	    for (var i = 0; i < 8; i++) {
	      destbuf[destoff++] = srcbuf[srcoff++] & 255;
	    }
	  }

	  function newArray(buffer, offset) {
	    return Array.prototype.slice.call(buffer, offset, offset + 8);
	  }

	  function fromPositiveBE(buffer, offset, value) {
	    var pos = offset + 8;
	    while (pos > offset) {
	      buffer[--pos] = value & 255;
	      value /= 256;
	    }
	  }

	  function fromNegativeBE(buffer, offset, value) {
	    var pos = offset + 8;
	    value++;
	    while (pos > offset) {
	      buffer[--pos] = ((-value) & 255) ^ 255;
	      value /= 256;
	    }
	  }

	  function fromPositiveLE(buffer, offset, value) {
	    var end = offset + 8;
	    while (offset < end) {
	      buffer[offset++] = value & 255;
	      value /= 256;
	    }
	  }

	  function fromNegativeLE(buffer, offset, value) {
	    var end = offset + 8;
	    value++;
	    while (offset < end) {
	      buffer[offset++] = ((-value) & 255) ^ 255;
	      value /= 256;
	    }
	  }

	  // https://github.com/retrofox/is-array
	  function _isArray(val) {
	    return !!val && "[object Array]" == Object.prototype.toString.call(val);
	  }

	}(typeof exports.nodeName !== 'string' ? exports : (commonjsGlobal || {}));
	});

	/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
	var read$2 = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m;
	  var eLen = (nBytes * 8) - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var nBits = -7;
	  var i = isLE ? (nBytes - 1) : 0;
	  var d = isLE ? -1 : 1;
	  var s = buffer[offset + i];

	  i += d;

	  e = s & ((1 << (-nBits)) - 1);
	  s >>= (-nBits);
	  nBits += eLen;
	  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1);
	  e >>= (-nBits);
	  nBits += mLen;
	  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias;
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen);
	    e = e - eBias;
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	};

	var write$1 = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c;
	  var eLen = (nBytes * 8) - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
	  var i = isLE ? 0 : (nBytes - 1);
	  var d = isLE ? 1 : -1;
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

	  value = Math.abs(value);

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0;
	    e = eMax;
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2);
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--;
	      c *= 2;
	    }
	    if (e + eBias >= 1) {
	      value += rt / c;
	    } else {
	      value += rt * Math.pow(2, 1 - eBias);
	    }
	    if (value * c >= 2) {
	      e++;
	      c /= 2;
	    }

	    if (e + eBias >= eMax) {
	      m = 0;
	      e = eMax;
	    } else if (e + eBias >= 1) {
	      m = ((value * c) - 1) * Math.pow(2, mLen);
	      e = e + eBias;
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
	      e = 0;
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m;
	  eLen += mLen;
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128;
	};

	var ieee754 = {
		read: read$2,
		write: write$1
	};

	var writeUint8 = createCommonjsModule(function (module, exports) {
	// write-unit8.js

	var constant = exports.uint8 = new Array(256);

	for (var i = 0x00; i <= 0xFF; i++) {
	  constant[i] = write0(i);
	}

	function write0(type) {
	  return function(encoder) {
	    var offset = encoder.reserve(1);
	    encoder.buffer[offset] = type;
	  };
	}
	});

	// write-token.js



	var Uint64BE$3 = int64Buffer.Uint64BE;
	var Int64BE$2 = int64Buffer.Int64BE;

	var uint8$2 = writeUint8.uint8;

	var Buffer$3 = bufferish.global;
	var IS_BUFFER_SHIM = bufferish.hasBuffer && ("TYPED_ARRAY_SUPPORT" in Buffer$3);
	var NO_TYPED_ARRAY = IS_BUFFER_SHIM && !Buffer$3.TYPED_ARRAY_SUPPORT;
	var Buffer_prototype = bufferish.hasBuffer && Buffer$3.prototype || {};

	var getWriteToken_1 = getWriteToken;

	function getWriteToken(options) {
	  if (options && options.uint8array) {
	    return init_uint8array();
	  } else if (NO_TYPED_ARRAY || (bufferish.hasBuffer && options && options.safe)) {
	    return init_safe();
	  } else {
	    return init_token$1();
	  }
	}

	function init_uint8array() {
	  var token = init_token$1();

	  // float 32 -- 0xca
	  // float 64 -- 0xcb
	  token[0xca] = writeN(0xca, 4, writeFloatBE);
	  token[0xcb] = writeN(0xcb, 8, writeDoubleBE);

	  return token;
	}

	// Node.js and browsers with TypedArray

	function init_token$1() {
	  // (immediate values)
	  // positive fixint -- 0x00 - 0x7f
	  // nil -- 0xc0
	  // false -- 0xc2
	  // true -- 0xc3
	  // negative fixint -- 0xe0 - 0xff
	  var token = uint8$2.slice();

	  // bin 8 -- 0xc4
	  // bin 16 -- 0xc5
	  // bin 32 -- 0xc6
	  token[0xc4] = write1(0xc4);
	  token[0xc5] = write2(0xc5);
	  token[0xc6] = write4(0xc6);

	  // ext 8 -- 0xc7
	  // ext 16 -- 0xc8
	  // ext 32 -- 0xc9
	  token[0xc7] = write1(0xc7);
	  token[0xc8] = write2(0xc8);
	  token[0xc9] = write4(0xc9);

	  // float 32 -- 0xca
	  // float 64 -- 0xcb
	  token[0xca] = writeN(0xca, 4, (Buffer_prototype.writeFloatBE || writeFloatBE), true);
	  token[0xcb] = writeN(0xcb, 8, (Buffer_prototype.writeDoubleBE || writeDoubleBE), true);

	  // uint 8 -- 0xcc
	  // uint 16 -- 0xcd
	  // uint 32 -- 0xce
	  // uint 64 -- 0xcf
	  token[0xcc] = write1(0xcc);
	  token[0xcd] = write2(0xcd);
	  token[0xce] = write4(0xce);
	  token[0xcf] = writeN(0xcf, 8, writeUInt64BE);

	  // int 8 -- 0xd0
	  // int 16 -- 0xd1
	  // int 32 -- 0xd2
	  // int 64 -- 0xd3
	  token[0xd0] = write1(0xd0);
	  token[0xd1] = write2(0xd1);
	  token[0xd2] = write4(0xd2);
	  token[0xd3] = writeN(0xd3, 8, writeInt64BE);

	  // str 8 -- 0xd9
	  // str 16 -- 0xda
	  // str 32 -- 0xdb
	  token[0xd9] = write1(0xd9);
	  token[0xda] = write2(0xda);
	  token[0xdb] = write4(0xdb);

	  // array 16 -- 0xdc
	  // array 32 -- 0xdd
	  token[0xdc] = write2(0xdc);
	  token[0xdd] = write4(0xdd);

	  // map 16 -- 0xde
	  // map 32 -- 0xdf
	  token[0xde] = write2(0xde);
	  token[0xdf] = write4(0xdf);

	  return token;
	}

	// safe mode: for old browsers and who needs asserts

	function init_safe() {
	  // (immediate values)
	  // positive fixint -- 0x00 - 0x7f
	  // nil -- 0xc0
	  // false -- 0xc2
	  // true -- 0xc3
	  // negative fixint -- 0xe0 - 0xff
	  var token = uint8$2.slice();

	  // bin 8 -- 0xc4
	  // bin 16 -- 0xc5
	  // bin 32 -- 0xc6
	  token[0xc4] = writeN(0xc4, 1, Buffer$3.prototype.writeUInt8);
	  token[0xc5] = writeN(0xc5, 2, Buffer$3.prototype.writeUInt16BE);
	  token[0xc6] = writeN(0xc6, 4, Buffer$3.prototype.writeUInt32BE);

	  // ext 8 -- 0xc7
	  // ext 16 -- 0xc8
	  // ext 32 -- 0xc9
	  token[0xc7] = writeN(0xc7, 1, Buffer$3.prototype.writeUInt8);
	  token[0xc8] = writeN(0xc8, 2, Buffer$3.prototype.writeUInt16BE);
	  token[0xc9] = writeN(0xc9, 4, Buffer$3.prototype.writeUInt32BE);

	  // float 32 -- 0xca
	  // float 64 -- 0xcb
	  token[0xca] = writeN(0xca, 4, Buffer$3.prototype.writeFloatBE);
	  token[0xcb] = writeN(0xcb, 8, Buffer$3.prototype.writeDoubleBE);

	  // uint 8 -- 0xcc
	  // uint 16 -- 0xcd
	  // uint 32 -- 0xce
	  // uint 64 -- 0xcf
	  token[0xcc] = writeN(0xcc, 1, Buffer$3.prototype.writeUInt8);
	  token[0xcd] = writeN(0xcd, 2, Buffer$3.prototype.writeUInt16BE);
	  token[0xce] = writeN(0xce, 4, Buffer$3.prototype.writeUInt32BE);
	  token[0xcf] = writeN(0xcf, 8, writeUInt64BE);

	  // int 8 -- 0xd0
	  // int 16 -- 0xd1
	  // int 32 -- 0xd2
	  // int 64 -- 0xd3
	  token[0xd0] = writeN(0xd0, 1, Buffer$3.prototype.writeInt8);
	  token[0xd1] = writeN(0xd1, 2, Buffer$3.prototype.writeInt16BE);
	  token[0xd2] = writeN(0xd2, 4, Buffer$3.prototype.writeInt32BE);
	  token[0xd3] = writeN(0xd3, 8, writeInt64BE);

	  // str 8 -- 0xd9
	  // str 16 -- 0xda
	  // str 32 -- 0xdb
	  token[0xd9] = writeN(0xd9, 1, Buffer$3.prototype.writeUInt8);
	  token[0xda] = writeN(0xda, 2, Buffer$3.prototype.writeUInt16BE);
	  token[0xdb] = writeN(0xdb, 4, Buffer$3.prototype.writeUInt32BE);

	  // array 16 -- 0xdc
	  // array 32 -- 0xdd
	  token[0xdc] = writeN(0xdc, 2, Buffer$3.prototype.writeUInt16BE);
	  token[0xdd] = writeN(0xdd, 4, Buffer$3.prototype.writeUInt32BE);

	  // map 16 -- 0xde
	  // map 32 -- 0xdf
	  token[0xde] = writeN(0xde, 2, Buffer$3.prototype.writeUInt16BE);
	  token[0xdf] = writeN(0xdf, 4, Buffer$3.prototype.writeUInt32BE);

	  return token;
	}

	function write1(type) {
	  return function(encoder, value) {
	    var offset = encoder.reserve(2);
	    var buffer = encoder.buffer;
	    buffer[offset++] = type;
	    buffer[offset] = value;
	  };
	}

	function write2(type) {
	  return function(encoder, value) {
	    var offset = encoder.reserve(3);
	    var buffer = encoder.buffer;
	    buffer[offset++] = type;
	    buffer[offset++] = value >>> 8;
	    buffer[offset] = value;
	  };
	}

	function write4(type) {
	  return function(encoder, value) {
	    var offset = encoder.reserve(5);
	    var buffer = encoder.buffer;
	    buffer[offset++] = type;
	    buffer[offset++] = value >>> 24;
	    buffer[offset++] = value >>> 16;
	    buffer[offset++] = value >>> 8;
	    buffer[offset] = value;
	  };
	}

	function writeN(type, len, method, noAssert) {
	  return function(encoder, value) {
	    var offset = encoder.reserve(len + 1);
	    encoder.buffer[offset++] = type;
	    method.call(encoder.buffer, value, offset, noAssert);
	  };
	}

	function writeUInt64BE(value, offset) {
	  new Uint64BE$3(this, offset, value);
	}

	function writeInt64BE(value, offset) {
	  new Int64BE$2(this, offset, value);
	}

	function writeFloatBE(value, offset) {
	  ieee754.write(this, value, offset, false, 23, 4);
	}

	function writeDoubleBE(value, offset) {
	  ieee754.write(this, value, offset, false, 52, 8);
	}

	var writeToken = {
		getWriteToken: getWriteToken_1
	};

	// write-type.js



	var Uint64BE$2 = int64Buffer.Uint64BE;
	var Int64BE$1 = int64Buffer.Int64BE;




	var uint8$1 = writeUint8.uint8;
	var ExtBuffer$2 = extBuffer.ExtBuffer;

	var HAS_UINT8ARRAY = ("undefined" !== typeof Uint8Array);
	var HAS_MAP$1 = ("undefined" !== typeof Map);

	var extmap = [];
	extmap[1] = 0xd4;
	extmap[2] = 0xd5;
	extmap[4] = 0xd6;
	extmap[8] = 0xd7;
	extmap[16] = 0xd8;

	var getWriteType_1 = getWriteType;

	function getWriteType(options) {
	  var token = writeToken.getWriteToken(options);
	  var useraw = options && options.useraw;
	  var binarraybuffer = HAS_UINT8ARRAY && options && options.binarraybuffer;
	  var isBuffer = binarraybuffer ? bufferish.isArrayBuffer : bufferish.isBuffer;
	  var bin = binarraybuffer ? bin_arraybuffer : bin_buffer;
	  var usemap = HAS_MAP$1 && options && options.usemap;
	  var map = usemap ? map_to_map : obj_to_map;

	  var writeType = {
	    "boolean": bool,
	    "function": nil,
	    "number": number,
	    "object": (useraw ? object_raw : object),
	    "string": _string(useraw ? raw_head_size : str_head_size),
	    "symbol": nil,
	    "undefined": nil
	  };

	  return writeType;

	  // false -- 0xc2
	  // true -- 0xc3
	  function bool(encoder, value) {
	    var type = value ? 0xc3 : 0xc2;
	    token[type](encoder, value);
	  }

	  function number(encoder, value) {
	    var ivalue = value | 0;
	    var type;
	    if (value !== ivalue) {
	      // float 64 -- 0xcb
	      type = 0xcb;
	      token[type](encoder, value);
	      return;
	    } else if (-0x20 <= ivalue && ivalue <= 0x7F) {
	      // positive fixint -- 0x00 - 0x7f
	      // negative fixint -- 0xe0 - 0xff
	      type = ivalue & 0xFF;
	    } else if (0 <= ivalue) {
	      // uint 8 -- 0xcc
	      // uint 16 -- 0xcd
	      // uint 32 -- 0xce
	      type = (ivalue <= 0xFF) ? 0xcc : (ivalue <= 0xFFFF) ? 0xcd : 0xce;
	    } else {
	      // int 8 -- 0xd0
	      // int 16 -- 0xd1
	      // int 32 -- 0xd2
	      type = (-0x80 <= ivalue) ? 0xd0 : (-0x8000 <= ivalue) ? 0xd1 : 0xd2;
	    }
	    token[type](encoder, ivalue);
	  }

	  // uint 64 -- 0xcf
	  function uint64(encoder, value) {
	    var type = 0xcf;
	    token[type](encoder, value.toArray());
	  }

	  // int 64 -- 0xd3
	  function int64(encoder, value) {
	    var type = 0xd3;
	    token[type](encoder, value.toArray());
	  }

	  // str 8 -- 0xd9
	  // str 16 -- 0xda
	  // str 32 -- 0xdb
	  // fixstr -- 0xa0 - 0xbf
	  function str_head_size(length) {
	    return (length < 32) ? 1 : (length <= 0xFF) ? 2 : (length <= 0xFFFF) ? 3 : 5;
	  }

	  // raw 16 -- 0xda
	  // raw 32 -- 0xdb
	  // fixraw -- 0xa0 - 0xbf
	  function raw_head_size(length) {
	    return (length < 32) ? 1 : (length <= 0xFFFF) ? 3 : 5;
	  }

	  function _string(head_size) {
	    return string;

	    function string(encoder, value) {
	      // prepare buffer
	      var length = value.length;
	      var maxsize = 5 + length * 3;
	      encoder.offset = encoder.reserve(maxsize);
	      var buffer = encoder.buffer;

	      // expected header size
	      var expected = head_size(length);

	      // expected start point
	      var start = encoder.offset + expected;

	      // write string
	      length = bufferishProto.write.call(buffer, value, start);

	      // actual header size
	      var actual = head_size(length);

	      // move content when needed
	      if (expected !== actual) {
	        var targetStart = start + actual - expected;
	        var end = start + length;
	        bufferishProto.copy.call(buffer, buffer, targetStart, start, end);
	      }

	      // write header
	      var type = (actual === 1) ? (0xa0 + length) : (actual <= 3) ? (0xd7 + actual) : 0xdb;
	      token[type](encoder, length);

	      // move cursor
	      encoder.offset += length;
	    }
	  }

	  function object(encoder, value) {
	    // null
	    if (value === null) return nil(encoder, value);

	    // Buffer
	    if (isBuffer(value)) return bin(encoder, value);

	    // Array
	    if (isarray(value)) return array(encoder, value);

	    // int64-buffer objects
	    if (Uint64BE$2.isUint64BE(value)) return uint64(encoder, value);
	    if (Int64BE$1.isInt64BE(value)) return int64(encoder, value);

	    // ext formats
	    var packer = encoder.codec.getExtPacker(value);
	    if (packer) value = packer(value);
	    if (value instanceof ExtBuffer$2) return ext(encoder, value);

	    // plain old Objects or Map
	    map(encoder, value);
	  }

	  function object_raw(encoder, value) {
	    // Buffer
	    if (isBuffer(value)) return raw(encoder, value);

	    // others
	    object(encoder, value);
	  }

	  // nil -- 0xc0
	  function nil(encoder, value) {
	    var type = 0xc0;
	    token[type](encoder, value);
	  }

	  // fixarray -- 0x90 - 0x9f
	  // array 16 -- 0xdc
	  // array 32 -- 0xdd
	  function array(encoder, value) {
	    var length = value.length;
	    var type = (length < 16) ? (0x90 + length) : (length <= 0xFFFF) ? 0xdc : 0xdd;
	    token[type](encoder, length);

	    var encode = encoder.codec.encode;
	    for (var i = 0; i < length; i++) {
	      encode(encoder, value[i]);
	    }
	  }

	  // bin 8 -- 0xc4
	  // bin 16 -- 0xc5
	  // bin 32 -- 0xc6
	  function bin_buffer(encoder, value) {
	    var length = value.length;
	    var type = (length < 0xFF) ? 0xc4 : (length <= 0xFFFF) ? 0xc5 : 0xc6;
	    token[type](encoder, length);
	    encoder.send(value);
	  }

	  function bin_arraybuffer(encoder, value) {
	    bin_buffer(encoder, new Uint8Array(value));
	  }

	  // fixext 1 -- 0xd4
	  // fixext 2 -- 0xd5
	  // fixext 4 -- 0xd6
	  // fixext 8 -- 0xd7
	  // fixext 16 -- 0xd8
	  // ext 8 -- 0xc7
	  // ext 16 -- 0xc8
	  // ext 32 -- 0xc9
	  function ext(encoder, value) {
	    var buffer = value.buffer;
	    var length = buffer.length;
	    var type = extmap[length] || ((length < 0xFF) ? 0xc7 : (length <= 0xFFFF) ? 0xc8 : 0xc9);
	    token[type](encoder, length);
	    uint8$1[value.type](encoder);
	    encoder.send(buffer);
	  }

	  // fixmap -- 0x80 - 0x8f
	  // map 16 -- 0xde
	  // map 32 -- 0xdf
	  function obj_to_map(encoder, value) {
	    var keys = Object.keys(value);
	    var length = keys.length;
	    var type = (length < 16) ? (0x80 + length) : (length <= 0xFFFF) ? 0xde : 0xdf;
	    token[type](encoder, length);

	    var encode = encoder.codec.encode;
	    keys.forEach(function(key) {
	      encode(encoder, key);
	      encode(encoder, value[key]);
	    });
	  }

	  // fixmap -- 0x80 - 0x8f
	  // map 16 -- 0xde
	  // map 32 -- 0xdf
	  function map_to_map(encoder, value) {
	    if (!(value instanceof Map)) return obj_to_map(encoder, value);

	    var length = value.size;
	    var type = (length < 16) ? (0x80 + length) : (length <= 0xFFFF) ? 0xde : 0xdf;
	    token[type](encoder, length);

	    var encode = encoder.codec.encode;
	    value.forEach(function(val, key, m) {
	      encode(encoder, key);
	      encode(encoder, val);
	    });
	  }

	  // raw 16 -- 0xda
	  // raw 32 -- 0xdb
	  // fixraw -- 0xa0 - 0xbf
	  function raw(encoder, value) {
	    var length = value.length;
	    var type = (length < 32) ? (0xa0 + length) : (length <= 0xFFFF) ? 0xda : 0xdb;
	    token[type](encoder, length);
	    encoder.send(value);
	  }
	}

	var writeType = {
		getWriteType: getWriteType_1
	};

	// codec-base.js



	var createCodec_1 = createCodec$2;
	var install_1 = install;
	var filter_1 = filter;



	function Codec(options) {
	  if (!(this instanceof Codec)) return new Codec(options);
	  this.options = options;
	  this.init();
	}

	Codec.prototype.init = function() {
	  var options = this.options;

	  if (options && options.uint8array) {
	    this.bufferish = bufferish.Uint8Array;
	  }

	  return this;
	};

	function install(props) {
	  for (var key in props) {
	    Codec.prototype[key] = add(Codec.prototype[key], props[key]);
	  }
	}

	function add(a, b) {
	  return (a && b) ? ab : (a || b);

	  function ab() {
	    a.apply(this, arguments);
	    return b.apply(this, arguments);
	  }
	}

	function join(filters) {
	  filters = filters.slice();

	  return function(value) {
	    return filters.reduce(iterator, value);
	  };

	  function iterator(value, filter) {
	    return filter(value);
	  }
	}

	function filter(filter) {
	  return isarray(filter) ? join(filter) : filter;
	}

	// @public
	// msgpack.createCodec()

	function createCodec$2(options) {
	  return new Codec(options);
	}

	// default shared codec

	var preset$4 = createCodec$2({preset: true});

	var codecBase = {
		createCodec: createCodec_1,
		install: install_1,
		filter: filter_1,
		preset: preset$4
	};

	// write-core.js

	var ExtBuffer$1 = extBuffer.ExtBuffer;




	codecBase.install({
	  addExtPacker: addExtPacker,
	  getExtPacker: getExtPacker,
	  init: init$1
	});

	var preset$3 = init$1.call(codecBase.preset);

	function getEncoder(options) {
	  var writeType$1 = writeType.getWriteType(options);
	  return encode;

	  function encode(encoder, value) {
	    var func = writeType$1[typeof value];
	    if (!func) throw new Error("Unsupported type \"" + (typeof value) + "\": " + value);
	    func(encoder, value);
	  }
	}

	function init$1() {
	  var options = this.options;
	  this.encode = getEncoder(options);

	  if (options && options.preset) {
	    extPacker.setExtPackers(this);
	  }

	  return this;
	}

	function addExtPacker(etype, Class, packer) {
	  packer = codecBase.filter(packer);
	  var name = Class.name;
	  if (name && name !== "Object") {
	    var packers = this.extPackers || (this.extPackers = {});
	    packers[name] = extPacker;
	  } else {
	    // fallback for IE
	    var list = this.extEncoderList || (this.extEncoderList = []);
	    list.unshift([Class, extPacker]);
	  }

	  function extPacker(value) {
	    if (packer) value = packer(value);
	    return new ExtBuffer$1(value, etype);
	  }
	}

	function getExtPacker(value) {
	  var packers = this.extPackers || (this.extPackers = {});
	  var c = value.constructor;
	  var e = c && c.name && packers[c.name];
	  if (e) return e;

	  // fallback for IE
	  var list = this.extEncoderList || (this.extEncoderList = []);
	  var len = list.length;
	  for (var i = 0; i < len; i++) {
	    var pair = list[i];
	    if (c === pair[0]) return pair[1];
	  }
	}

	var writeCore = {
		preset: preset$3
	};

	// flex-buffer.js

	var FlexDecoder_1 = FlexDecoder$1;
	var FlexEncoder_1 = FlexEncoder$1;



	var MIN_BUFFER_SIZE = 2048;
	var MAX_BUFFER_SIZE = 65536;
	var BUFFER_SHORTAGE = "BUFFER_SHORTAGE";

	function FlexDecoder$1() {
	  if (!(this instanceof FlexDecoder$1)) return new FlexDecoder$1();
	}

	function FlexEncoder$1() {
	  if (!(this instanceof FlexEncoder$1)) return new FlexEncoder$1();
	}

	FlexDecoder$1.mixin = mixinFactory(getDecoderMethods());
	FlexDecoder$1.mixin(FlexDecoder$1.prototype);

	FlexEncoder$1.mixin = mixinFactory(getEncoderMethods());
	FlexEncoder$1.mixin(FlexEncoder$1.prototype);

	function getDecoderMethods() {
	  return {
	    bufferish: bufferish,
	    write: write,
	    fetch: fetch,
	    flush: flush,
	    push: push$1,
	    pull: pull,
	    read: read$1,
	    reserve: reserve,
	    offset: 0
	  };

	  function write(chunk) {
	    var prev = this.offset ? bufferish.prototype.slice.call(this.buffer, this.offset) : this.buffer;
	    this.buffer = prev ? (chunk ? this.bufferish.concat([prev, chunk]) : prev) : chunk;
	    this.offset = 0;
	  }

	  function flush() {
	    while (this.offset < this.buffer.length) {
	      var start = this.offset;
	      var value;
	      try {
	        value = this.fetch();
	      } catch (e) {
	        if (e && e.message != BUFFER_SHORTAGE) throw e;
	        // rollback
	        this.offset = start;
	        break;
	      }
	      this.push(value);
	    }
	  }

	  function reserve(length) {
	    var start = this.offset;
	    var end = start + length;
	    if (end > this.buffer.length) throw new Error(BUFFER_SHORTAGE);
	    this.offset = end;
	    return start;
	  }
	}

	function getEncoderMethods() {
	  return {
	    bufferish: bufferish,
	    write: write,
	    fetch: fetch,
	    flush: flush,
	    push: push$1,
	    pull: pull,
	    read: read$1,
	    reserve: reserve,
	    send: send,
	    maxBufferSize: MAX_BUFFER_SIZE,
	    minBufferSize: MIN_BUFFER_SIZE,
	    offset: 0,
	    start: 0
	  };

	  function fetch() {
	    var start = this.start;
	    if (start < this.offset) {
	      var end = this.start = this.offset;
	      return bufferish.prototype.slice.call(this.buffer, start, end);
	    }
	  }

	  function flush() {
	    while (this.start < this.offset) {
	      var value = this.fetch();
	      if (value) this.push(value);
	    }
	  }

	  function pull() {
	    var buffers = this.buffers || (this.buffers = []);
	    var chunk = buffers.length > 1 ? this.bufferish.concat(buffers) : buffers[0];
	    buffers.length = 0; // buffer exhausted
	    return chunk;
	  }

	  function reserve(length) {
	    var req = length | 0;

	    if (this.buffer) {
	      var size = this.buffer.length;
	      var start = this.offset | 0;
	      var end = start + req;

	      // is it long enough?
	      if (end < size) {
	        this.offset = end;
	        return start;
	      }

	      // flush current buffer
	      this.flush();

	      // resize it to 2x current length
	      length = Math.max(length, Math.min(size * 2, this.maxBufferSize));
	    }

	    // minimum buffer size
	    length = Math.max(length, this.minBufferSize);

	    // allocate new buffer
	    this.buffer = this.bufferish.alloc(length);
	    this.start = 0;
	    this.offset = req;
	    return 0;
	  }

	  function send(buffer) {
	    var length = buffer.length;
	    if (length > this.minBufferSize) {
	      this.flush();
	      this.push(buffer);
	    } else {
	      var offset = this.reserve(length);
	      bufferish.prototype.copy.call(buffer, this.buffer, offset);
	    }
	  }
	}

	// common methods

	function write() {
	  throw new Error("method not implemented: write()");
	}

	function fetch() {
	  throw new Error("method not implemented: fetch()");
	}

	function read$1() {
	  var length = this.buffers && this.buffers.length;

	  // fetch the first result
	  if (!length) return this.fetch();

	  // flush current buffer
	  this.flush();

	  // read from the results
	  return this.pull();
	}

	function push$1(chunk) {
	  var buffers = this.buffers || (this.buffers = []);
	  buffers.push(chunk);
	}

	function pull() {
	  var buffers = this.buffers || (this.buffers = []);
	  return buffers.shift();
	}

	function mixinFactory(source) {
	  return mixin;

	  function mixin(target) {
	    for (var key in source) {
	      target[key] = source[key];
	    }
	    return target;
	  }
	}

	var flexBuffer = {
		FlexDecoder: FlexDecoder_1,
		FlexEncoder: FlexEncoder_1
	};

	// encode-buffer.js

	var EncodeBuffer_1 = EncodeBuffer$3;

	var preset$2 = writeCore.preset;

	var FlexEncoder = flexBuffer.FlexEncoder;

	FlexEncoder.mixin(EncodeBuffer$3.prototype);

	function EncodeBuffer$3(options) {
	  if (!(this instanceof EncodeBuffer$3)) return new EncodeBuffer$3(options);

	  if (options) {
	    this.options = options;
	    if (options.codec) {
	      var codec = this.codec = options.codec;
	      if (codec.bufferish) this.bufferish = codec.bufferish;
	    }
	  }
	}

	EncodeBuffer$3.prototype.codec = preset$2;

	EncodeBuffer$3.prototype.write = function(input) {
	  this.codec.encode(this, input);
	};

	var encodeBuffer = {
		EncodeBuffer: EncodeBuffer_1
	};

	// encode.js

	var encode_2 = encode$3;

	var EncodeBuffer$2 = encodeBuffer.EncodeBuffer;

	function encode$3(input, options) {
	  var encoder = new EncodeBuffer$2(options);
	  encoder.write(input);
	  return encoder.read();
	}

	var encode_1 = {
		encode: encode_2
	};

	// ext-unpacker.js

	var setExtUnpackers_1 = setExtUnpackers;


	var Buffer$2 = bufferish.global;
	var _decode;

	var ERROR_COLUMNS = {name: 1, message: 1, stack: 1, columnNumber: 1, fileName: 1, lineNumber: 1};

	function setExtUnpackers(codec) {
	  codec.addExtUnpacker(0x0E, [decode$3, unpackError(Error)]);
	  codec.addExtUnpacker(0x01, [decode$3, unpackError(EvalError)]);
	  codec.addExtUnpacker(0x02, [decode$3, unpackError(RangeError)]);
	  codec.addExtUnpacker(0x03, [decode$3, unpackError(ReferenceError)]);
	  codec.addExtUnpacker(0x04, [decode$3, unpackError(SyntaxError)]);
	  codec.addExtUnpacker(0x05, [decode$3, unpackError(TypeError)]);
	  codec.addExtUnpacker(0x06, [decode$3, unpackError(URIError)]);

	  codec.addExtUnpacker(0x0A, [decode$3, unpackRegExp]);
	  codec.addExtUnpacker(0x0B, [decode$3, unpackClass(Boolean)]);
	  codec.addExtUnpacker(0x0C, [decode$3, unpackClass(String)]);
	  codec.addExtUnpacker(0x0D, [decode$3, unpackClass(Date)]);
	  codec.addExtUnpacker(0x0F, [decode$3, unpackClass(Number)]);

	  if ("undefined" !== typeof Uint8Array) {
	    codec.addExtUnpacker(0x11, unpackClass(Int8Array));
	    codec.addExtUnpacker(0x12, unpackClass(Uint8Array));
	    codec.addExtUnpacker(0x13, [unpackArrayBuffer, unpackClass(Int16Array)]);
	    codec.addExtUnpacker(0x14, [unpackArrayBuffer, unpackClass(Uint16Array)]);
	    codec.addExtUnpacker(0x15, [unpackArrayBuffer, unpackClass(Int32Array)]);
	    codec.addExtUnpacker(0x16, [unpackArrayBuffer, unpackClass(Uint32Array)]);
	    codec.addExtUnpacker(0x17, [unpackArrayBuffer, unpackClass(Float32Array)]);

	    // PhantomJS/1.9.7 doesn't have Float64Array
	    if ("undefined" !== typeof Float64Array) {
	      codec.addExtUnpacker(0x18, [unpackArrayBuffer, unpackClass(Float64Array)]);
	    }

	    // IE10 doesn't have Uint8ClampedArray
	    if ("undefined" !== typeof Uint8ClampedArray) {
	      codec.addExtUnpacker(0x19, unpackClass(Uint8ClampedArray));
	    }

	    codec.addExtUnpacker(0x1A, unpackArrayBuffer);
	    codec.addExtUnpacker(0x1D, [unpackArrayBuffer, unpackClass(DataView)]);
	  }

	  if (bufferish.hasBuffer) {
	    codec.addExtUnpacker(0x1B, unpackClass(Buffer$2));
	  }
	}

	function decode$3(input) {
	  if (!_decode) _decode = decode_1.decode; // lazy load
	  return _decode(input);
	}

	function unpackRegExp(value) {
	  return RegExp.apply(null, value);
	}

	function unpackError(Class) {
	  return function(value) {
	    var out = new Class();
	    for (var key in ERROR_COLUMNS) {
	      out[key] = value[key];
	    }
	    return out;
	  };
	}

	function unpackClass(Class) {
	  return function(value) {
	    return new Class(value);
	  };
	}

	function unpackArrayBuffer(value) {
	  return (new Uint8Array(value)).buffer;
	}

	var extUnpacker = {
		setExtUnpackers: setExtUnpackers_1
	};

	// read-format.js



	var Uint64BE$1 = int64Buffer.Uint64BE;
	var Int64BE = int64Buffer.Int64BE;

	var getReadFormat_1 = getReadFormat;
	var readUint8$1 = uint8;




	var HAS_MAP = ("undefined" !== typeof Map);
	var NO_ASSERT = true;

	function getReadFormat(options) {
	  var binarraybuffer = bufferish.hasArrayBuffer && options && options.binarraybuffer;
	  var int64 = options && options.int64;
	  var usemap = HAS_MAP && options && options.usemap;

	  var readFormat = {
	    map: (usemap ? map_to_map : map_to_obj),
	    array: array,
	    str: str,
	    bin: (binarraybuffer ? bin_arraybuffer : bin_buffer),
	    ext: ext$2,
	    uint8: uint8,
	    uint16: uint16,
	    uint32: uint32,
	    uint64: read(8, int64 ? readUInt64BE_int64 : readUInt64BE),
	    int8: int8,
	    int16: int16,
	    int32: int32,
	    int64: read(8, int64 ? readInt64BE_int64 : readInt64BE),
	    float32: read(4, readFloatBE),
	    float64: read(8, readDoubleBE)
	  };

	  return readFormat;
	}

	function map_to_obj(decoder, len) {
	  var value = {};
	  var i;
	  var k = new Array(len);
	  var v = new Array(len);

	  var decode = decoder.codec.decode;
	  for (i = 0; i < len; i++) {
	    k[i] = decode(decoder);
	    v[i] = decode(decoder);
	  }
	  for (i = 0; i < len; i++) {
	    value[k[i]] = v[i];
	  }
	  return value;
	}

	function map_to_map(decoder, len) {
	  var value = new Map();
	  var i;
	  var k = new Array(len);
	  var v = new Array(len);

	  var decode = decoder.codec.decode;
	  for (i = 0; i < len; i++) {
	    k[i] = decode(decoder);
	    v[i] = decode(decoder);
	  }
	  for (i = 0; i < len; i++) {
	    value.set(k[i], v[i]);
	  }
	  return value;
	}

	function array(decoder, len) {
	  var value = new Array(len);
	  var decode = decoder.codec.decode;
	  for (var i = 0; i < len; i++) {
	    value[i] = decode(decoder);
	  }
	  return value;
	}

	function str(decoder, len) {
	  var start = decoder.reserve(len);
	  var end = start + len;
	  return bufferishProto.toString.call(decoder.buffer, "utf-8", start, end);
	}

	function bin_buffer(decoder, len) {
	  var start = decoder.reserve(len);
	  var end = start + len;
	  var buf = bufferishProto.slice.call(decoder.buffer, start, end);
	  return bufferish.from(buf);
	}

	function bin_arraybuffer(decoder, len) {
	  var start = decoder.reserve(len);
	  var end = start + len;
	  var buf = bufferishProto.slice.call(decoder.buffer, start, end);
	  return bufferish.Uint8Array.from(buf).buffer;
	}

	function ext$2(decoder, len) {
	  var start = decoder.reserve(len+1);
	  var type = decoder.buffer[start++];
	  var end = start + len;
	  var unpack = decoder.codec.getExtUnpacker(type);
	  if (!unpack) throw new Error("Invalid ext type: " + (type ? ("0x" + type.toString(16)) : type));
	  var buf = bufferishProto.slice.call(decoder.buffer, start, end);
	  return unpack(buf);
	}

	function uint8(decoder) {
	  var start = decoder.reserve(1);
	  return decoder.buffer[start];
	}

	function int8(decoder) {
	  var start = decoder.reserve(1);
	  var value = decoder.buffer[start];
	  return (value & 0x80) ? value - 0x100 : value;
	}

	function uint16(decoder) {
	  var start = decoder.reserve(2);
	  var buffer = decoder.buffer;
	  return (buffer[start++] << 8) | buffer[start];
	}

	function int16(decoder) {
	  var start = decoder.reserve(2);
	  var buffer = decoder.buffer;
	  var value = (buffer[start++] << 8) | buffer[start];
	  return (value & 0x8000) ? value - 0x10000 : value;
	}

	function uint32(decoder) {
	  var start = decoder.reserve(4);
	  var buffer = decoder.buffer;
	  return (buffer[start++] * 16777216) + (buffer[start++] << 16) + (buffer[start++] << 8) + buffer[start];
	}

	function int32(decoder) {
	  var start = decoder.reserve(4);
	  var buffer = decoder.buffer;
	  return (buffer[start++] << 24) | (buffer[start++] << 16) | (buffer[start++] << 8) | buffer[start];
	}

	function read(len, method) {
	  return function(decoder) {
	    var start = decoder.reserve(len);
	    return method.call(decoder.buffer, start, NO_ASSERT);
	  };
	}

	function readUInt64BE(start) {
	  return new Uint64BE$1(this, start).toNumber();
	}

	function readInt64BE(start) {
	  return new Int64BE(this, start).toNumber();
	}

	function readUInt64BE_int64(start) {
	  return new Uint64BE$1(this, start);
	}

	function readInt64BE_int64(start) {
	  return new Int64BE(this, start);
	}

	function readFloatBE(start) {
	  return ieee754.read(this, start, false, 23, 4);
	}

	function readDoubleBE(start) {
	  return ieee754.read(this, start, false, 52, 8);
	}

	var readFormat = {
		getReadFormat: getReadFormat_1,
		readUint8: readUint8$1
	};

	// read-token.js



	var getReadToken_1 = getReadToken;

	function getReadToken(options) {
	  var format = readFormat.getReadFormat(options);

	  if (options && options.useraw) {
	    return init_useraw(format);
	  } else {
	    return init_token(format);
	  }
	}

	function init_token(format) {
	  var i;
	  var token = new Array(256);

	  // positive fixint -- 0x00 - 0x7f
	  for (i = 0x00; i <= 0x7f; i++) {
	    token[i] = constant(i);
	  }

	  // fixmap -- 0x80 - 0x8f
	  for (i = 0x80; i <= 0x8f; i++) {
	    token[i] = fix(i - 0x80, format.map);
	  }

	  // fixarray -- 0x90 - 0x9f
	  for (i = 0x90; i <= 0x9f; i++) {
	    token[i] = fix(i - 0x90, format.array);
	  }

	  // fixstr -- 0xa0 - 0xbf
	  for (i = 0xa0; i <= 0xbf; i++) {
	    token[i] = fix(i - 0xa0, format.str);
	  }

	  // nil -- 0xc0
	  token[0xc0] = constant(null);

	  // (never used) -- 0xc1
	  token[0xc1] = null;

	  // false -- 0xc2
	  // true -- 0xc3
	  token[0xc2] = constant(false);
	  token[0xc3] = constant(true);

	  // bin 8 -- 0xc4
	  // bin 16 -- 0xc5
	  // bin 32 -- 0xc6
	  token[0xc4] = flex(format.uint8, format.bin);
	  token[0xc5] = flex(format.uint16, format.bin);
	  token[0xc6] = flex(format.uint32, format.bin);

	  // ext 8 -- 0xc7
	  // ext 16 -- 0xc8
	  // ext 32 -- 0xc9
	  token[0xc7] = flex(format.uint8, format.ext);
	  token[0xc8] = flex(format.uint16, format.ext);
	  token[0xc9] = flex(format.uint32, format.ext);

	  // float 32 -- 0xca
	  // float 64 -- 0xcb
	  token[0xca] = format.float32;
	  token[0xcb] = format.float64;

	  // uint 8 -- 0xcc
	  // uint 16 -- 0xcd
	  // uint 32 -- 0xce
	  // uint 64 -- 0xcf
	  token[0xcc] = format.uint8;
	  token[0xcd] = format.uint16;
	  token[0xce] = format.uint32;
	  token[0xcf] = format.uint64;

	  // int 8 -- 0xd0
	  // int 16 -- 0xd1
	  // int 32 -- 0xd2
	  // int 64 -- 0xd3
	  token[0xd0] = format.int8;
	  token[0xd1] = format.int16;
	  token[0xd2] = format.int32;
	  token[0xd3] = format.int64;

	  // fixext 1 -- 0xd4
	  // fixext 2 -- 0xd5
	  // fixext 4 -- 0xd6
	  // fixext 8 -- 0xd7
	  // fixext 16 -- 0xd8
	  token[0xd4] = fix(1, format.ext);
	  token[0xd5] = fix(2, format.ext);
	  token[0xd6] = fix(4, format.ext);
	  token[0xd7] = fix(8, format.ext);
	  token[0xd8] = fix(16, format.ext);

	  // str 8 -- 0xd9
	  // str 16 -- 0xda
	  // str 32 -- 0xdb
	  token[0xd9] = flex(format.uint8, format.str);
	  token[0xda] = flex(format.uint16, format.str);
	  token[0xdb] = flex(format.uint32, format.str);

	  // array 16 -- 0xdc
	  // array 32 -- 0xdd
	  token[0xdc] = flex(format.uint16, format.array);
	  token[0xdd] = flex(format.uint32, format.array);

	  // map 16 -- 0xde
	  // map 32 -- 0xdf
	  token[0xde] = flex(format.uint16, format.map);
	  token[0xdf] = flex(format.uint32, format.map);

	  // negative fixint -- 0xe0 - 0xff
	  for (i = 0xe0; i <= 0xff; i++) {
	    token[i] = constant(i - 0x100);
	  }

	  return token;
	}

	function init_useraw(format) {
	  var i;
	  var token = init_token(format).slice();

	  // raw 8 -- 0xd9
	  // raw 16 -- 0xda
	  // raw 32 -- 0xdb
	  token[0xd9] = token[0xc4];
	  token[0xda] = token[0xc5];
	  token[0xdb] = token[0xc6];

	  // fixraw -- 0xa0 - 0xbf
	  for (i = 0xa0; i <= 0xbf; i++) {
	    token[i] = fix(i - 0xa0, format.bin);
	  }

	  return token;
	}

	function constant(value) {
	  return function() {
	    return value;
	  };
	}

	function flex(lenFunc, decodeFunc) {
	  return function(decoder) {
	    var len = lenFunc(decoder);
	    return decodeFunc(decoder, len);
	  };
	}

	function fix(len, method) {
	  return function(decoder) {
	    return method(decoder, len);
	  };
	}

	var readToken = {
		getReadToken: getReadToken_1
	};

	// read-core.js

	var ExtBuffer = extBuffer.ExtBuffer;

	var readUint8 = readFormat.readUint8;



	codecBase.install({
	  addExtUnpacker: addExtUnpacker,
	  getExtUnpacker: getExtUnpacker,
	  init: init
	});

	var preset$1 = init.call(codecBase.preset);

	function getDecoder(options) {
	  var readToken$1 = readToken.getReadToken(options);
	  return decode;

	  function decode(decoder) {
	    var type = readUint8(decoder);
	    var func = readToken$1[type];
	    if (!func) throw new Error("Invalid type: " + (type ? ("0x" + type.toString(16)) : type));
	    return func(decoder);
	  }
	}

	function init() {
	  var options = this.options;
	  this.decode = getDecoder(options);

	  if (options && options.preset) {
	    extUnpacker.setExtUnpackers(this);
	  }

	  return this;
	}

	function addExtUnpacker(etype, unpacker) {
	  var unpackers = this.extUnpackers || (this.extUnpackers = []);
	  unpackers[etype] = codecBase.filter(unpacker);
	}

	function getExtUnpacker(type) {
	  var unpackers = this.extUnpackers || (this.extUnpackers = []);
	  return unpackers[type] || extUnpacker;

	  function extUnpacker(buffer) {
	    return new ExtBuffer(buffer, type);
	  }
	}

	var readCore = {
		preset: preset$1
	};

	// decode-buffer.js

	var DecodeBuffer_1 = DecodeBuffer$3;

	var preset = readCore.preset;

	var FlexDecoder = flexBuffer.FlexDecoder;

	FlexDecoder.mixin(DecodeBuffer$3.prototype);

	function DecodeBuffer$3(options) {
	  if (!(this instanceof DecodeBuffer$3)) return new DecodeBuffer$3(options);

	  if (options) {
	    this.options = options;
	    if (options.codec) {
	      var codec = this.codec = options.codec;
	      if (codec.bufferish) this.bufferish = codec.bufferish;
	    }
	  }
	}

	DecodeBuffer$3.prototype.codec = preset;

	DecodeBuffer$3.prototype.fetch = function() {
	  return this.codec.decode(this);
	};

	var decodeBuffer = {
		DecodeBuffer: DecodeBuffer_1
	};

	// decode.js

	var decode_2 = decode$2;

	var DecodeBuffer$2 = decodeBuffer.DecodeBuffer;

	function decode$2(input, options) {
	  var decoder = new DecodeBuffer$2(options);
	  decoder.write(input);
	  return decoder.read();
	}

	var decode_1 = {
		decode: decode_2
	};

	/**
	 * event-lite.js - Light-weight EventEmitter (less than 1KB when gzipped)
	 *
	 * @copyright Yusuke Kawasaki
	 * @license MIT
	 * @constructor
	 * @see https://github.com/kawanet/event-lite
	 * @see http://kawanet.github.io/event-lite/EventLite.html
	 * @example
	 * var EventLite = require("event-lite");
	 *
	 * function MyClass() {...}             // your class
	 *
	 * EventLite.mixin(MyClass.prototype);  // import event methods
	 *
	 * var obj = new MyClass();
	 * obj.on("foo", function() {...});     // add event listener
	 * obj.once("bar", function() {...});   // add one-time event listener
	 * obj.emit("foo");                     // dispatch event
	 * obj.emit("bar");                     // dispatch another event
	 * obj.off("foo");                      // remove event listener
	 */

	var eventLite = createCommonjsModule(function (module) {
	function EventLite() {
	  if (!(this instanceof EventLite)) return new EventLite();
	}

	(function(EventLite) {
	  // export the class for node.js
	  module.exports = EventLite;

	  // property name to hold listeners
	  var LISTENERS = "listeners";

	  // methods to export
	  var methods = {
	    on: on,
	    once: once,
	    off: off,
	    emit: emit
	  };

	  // mixin to self
	  mixin(EventLite.prototype);

	  // export mixin function
	  EventLite.mixin = mixin;

	  /**
	   * Import on(), once(), off() and emit() methods into target object.
	   *
	   * @function EventLite.mixin
	   * @param target {Prototype}
	   */

	  function mixin(target) {
	    for (var key in methods) {
	      target[key] = methods[key];
	    }
	    return target;
	  }

	  /**
	   * Add an event listener.
	   *
	   * @function EventLite.prototype.on
	   * @param type {string}
	   * @param func {Function}
	   * @returns {EventLite} Self for method chaining
	   */

	  function on(type, func) {
	    getListeners(this, type).push(func);
	    return this;
	  }

	  /**
	   * Add one-time event listener.
	   *
	   * @function EventLite.prototype.once
	   * @param type {string}
	   * @param func {Function}
	   * @returns {EventLite} Self for method chaining
	   */

	  function once(type, func) {
	    var that = this;
	    wrap.originalListener = func;
	    getListeners(that, type).push(wrap);
	    return that;

	    function wrap() {
	      off.call(that, type, wrap);
	      func.apply(this, arguments);
	    }
	  }

	  /**
	   * Remove an event listener.
	   *
	   * @function EventLite.prototype.off
	   * @param [type] {string}
	   * @param [func] {Function}
	   * @returns {EventLite} Self for method chaining
	   */

	  function off(type, func) {
	    var that = this;
	    var listners;
	    if (!arguments.length) {
	      delete that[LISTENERS];
	    } else if (!func) {
	      listners = that[LISTENERS];
	      if (listners) {
	        delete listners[type];
	        if (!Object.keys(listners).length) return off.call(that);
	      }
	    } else {
	      listners = getListeners(that, type, true);
	      if (listners) {
	        listners = listners.filter(ne);
	        if (!listners.length) return off.call(that, type);
	        that[LISTENERS][type] = listners;
	      }
	    }
	    return that;

	    function ne(test) {
	      return test !== func && test.originalListener !== func;
	    }
	  }

	  /**
	   * Dispatch (trigger) an event.
	   *
	   * @function EventLite.prototype.emit
	   * @param type {string}
	   * @param [value] {*}
	   * @returns {boolean} True when a listener received the event
	   */

	  function emit(type, value) {
	    var that = this;
	    var listeners = getListeners(that, type, true);
	    if (!listeners) return false;
	    var arglen = arguments.length;
	    if (arglen === 1) {
	      listeners.forEach(zeroarg);
	    } else if (arglen === 2) {
	      listeners.forEach(onearg);
	    } else {
	      var args = Array.prototype.slice.call(arguments, 1);
	      listeners.forEach(moreargs);
	    }
	    return !!listeners.length;

	    function zeroarg(func) {
	      func.call(that);
	    }

	    function onearg(func) {
	      func.call(that, value);
	    }

	    function moreargs(func) {
	      func.apply(that, args);
	    }
	  }

	  /**
	   * @ignore
	   */

	  function getListeners(that, type, readonly) {
	    if (readonly && !that[LISTENERS]) return;
	    var listeners = that[LISTENERS] || (that[LISTENERS] = {});
	    return listeners[type] || (listeners[type] = []);
	  }

	})(EventLite);
	});

	// encoder.js

	var Encoder_1 = Encoder$1;


	var EncodeBuffer$1 = encodeBuffer.EncodeBuffer;

	function Encoder$1(options) {
	  if (!(this instanceof Encoder$1)) return new Encoder$1(options);
	  EncodeBuffer$1.call(this, options);
	}

	Encoder$1.prototype = new EncodeBuffer$1();

	eventLite.mixin(Encoder$1.prototype);

	Encoder$1.prototype.encode = function(chunk) {
	  this.write(chunk);
	  this.emit("data", this.read());
	};

	Encoder$1.prototype.end = function(chunk) {
	  if (arguments.length) this.encode(chunk);
	  this.flush();
	  this.emit("end");
	};

	var encoder = {
		Encoder: Encoder_1
	};

	// decoder.js

	var Decoder_1 = Decoder$1;


	var DecodeBuffer$1 = decodeBuffer.DecodeBuffer;

	function Decoder$1(options) {
	  if (!(this instanceof Decoder$1)) return new Decoder$1(options);
	  DecodeBuffer$1.call(this, options);
	}

	Decoder$1.prototype = new DecodeBuffer$1();

	eventLite.mixin(Decoder$1.prototype);

	Decoder$1.prototype.decode = function(chunk) {
	  if (arguments.length) this.write(chunk);
	  this.flush();
	};

	Decoder$1.prototype.push = function(chunk) {
	  this.emit("data", chunk);
	};

	Decoder$1.prototype.end = function(chunk) {
	  this.decode(chunk);
	  this.emit("end");
	};

	var decoder = {
		Decoder: Decoder_1
	};

	// encode-stream.js

	var createEncodeStream$1 = EncodeStream;


	var Transform$1 = require$$0__default['default'].Transform;
	var EncodeBuffer = encodeBuffer.EncodeBuffer;

	util__default['default'].inherits(EncodeStream, Transform$1);

	var DEFAULT_OPTIONS$1 = {objectMode: true};

	function EncodeStream(options) {
	  if (!(this instanceof EncodeStream)) return new EncodeStream(options);
	  if (options) {
	    options.objectMode = true;
	  } else {
	    options = DEFAULT_OPTIONS$1;
	  }
	  Transform$1.call(this, options);

	  var stream = this;
	  var encoder = this.encoder = new EncodeBuffer(options);
	  encoder.push = function(chunk) {
	    stream.push(chunk);
	  };
	}

	EncodeStream.prototype._transform = function(chunk, encoding, callback) {
	  this.encoder.write(chunk);
	  if (callback) callback();
	};

	EncodeStream.prototype._flush = function(callback) {
	  this.encoder.flush();
	  if (callback) callback();
	};

	var encodeStream = {
		createEncodeStream: createEncodeStream$1
	};

	// decode-stream.js

	var createDecodeStream$1 = DecodeStream;


	var Transform = require$$0__default['default'].Transform;
	var DecodeBuffer = decodeBuffer.DecodeBuffer;

	util__default['default'].inherits(DecodeStream, Transform);

	var DEFAULT_OPTIONS = {objectMode: true};

	function DecodeStream(options) {
	  if (!(this instanceof DecodeStream)) return new DecodeStream(options);
	  if (options) {
	    options.objectMode = true;
	  } else {
	    options = DEFAULT_OPTIONS;
	  }
	  Transform.call(this, options);
	  var stream = this;
	  var decoder = this.decoder = new DecodeBuffer(options);
	  decoder.push = function(chunk) {
	    stream.push(chunk);
	  };
	}

	DecodeStream.prototype._transform = function(chunk, encoding, callback) {
	  this.decoder.write(chunk);
	  this.decoder.flush();
	  if (callback) callback();
	};

	var decodeStream = {
		createDecodeStream: createDecodeStream$1
	};

	// ext.js

	// load both interfaces



	var createCodec$1 = codecBase.createCodec;

	var ext$1 = {
		createCodec: createCodec$1
	};

	// codec.js

	// load both interfaces



	// @public
	// msgpack.codec.preset

	var codec_1 = {
	  preset: codecBase.preset
	};

	var codec$2 = {
		codec: codec_1
	};

	// msgpack.js

	var encode$2 = encode_1.encode;
	var decode$1 = decode_1.decode;

	var Encoder = encoder.Encoder;
	var Decoder = decoder.Decoder;

	var createEncodeStream = encodeStream.createEncodeStream;
	var createDecodeStream = decodeStream.createDecodeStream;

	var createCodec = ext$1.createCodec;
	var codec$1 = codec$2.codec;

	var msgpackLite = {
		encode: encode$2,
		decode: decode$1,
		Encoder: Encoder,
		Decoder: Decoder,
		createEncodeStream: createEncodeStream,
		createDecodeStream: createDecodeStream,
		createCodec: createCodec,
		codec: codec$1
	};

	const codec = msgpackLite.createCodec({ int64: true });

	var encode$1 = data => msgpackLite.encode(data, { codec });

	var version$6 = '0.10.0';

	const MAX_SIZE = 8 * 1024 * 1024; // 8MB

	class Writer$1 {
	  constructor (prioritySampler, url) {
	    this._queue = [];
	    this._prioritySampler = prioritySampler;
	    this._url = url;
	    this.format = format_1;
	    this.encode = encode$1;
	    this._size = 0;
	  }

	  get length () {
	    return this._queue.length
	  }

	  append (span) {
	    const spanContext = span.context();
	    const trace = spanContext._trace;

	    if (trace.started.length === trace.finished.length) {
	      this._prioritySampler.sample(spanContext);

	      const formattedTrace = trace.finished.map(this.format);
	      this._erase(trace);

	      if (spanContext._sampling.drop === true) {
	        log_1$1.debug(() => `Dropping trace due to user configured filtering: ${JSON.stringify(formattedTrace)}`);
	        return
	      }

	      log_1$1.debug(() => `Encoding trace: ${JSON.stringify(formattedTrace)}`);

	      const buffer = this.encode(formattedTrace);

	      log_1$1.debug(() => `Adding encoded trace to buffer: ${buffer.toString('hex').match(/../g).join(' ')}`);

	      if (buffer.length + this._size > MAX_SIZE) {
	        this.flush();
	      }

	      this._size += buffer.length;
	      this._queue.push(buffer);
	    }
	  }

	  flush () {
	    if (this._queue.length > 0) {
	      const data = platform$3.msgpack.prefix(this._queue);

	      const request = this._request(data, this._queue.length);

	      this._queue = [];
	      this._size = 0;
	      return request
	    }
	  }

	  _request (data, count) {
	    const options = {
	      path: '/v0.4/traces',
	      method: 'PUT',
	      headers: {
	        'Content-Type': 'application/msgpack',
	        'Datadog-Meta-Lang': platform$3.name(),
	        'Datadog-Meta-Lang-Version': platform$3.version(),
	        'Datadog-Meta-Lang-Interpreter': platform$3.engine(),
	        'Datadog-Meta-Tracer-Version': version$6,
	        'X-Datadog-Trace-Count': String(count)
	      }
	    };

	    if (this._url.protocol === 'unix:') {
	      options.socketPath = this._url.pathname;
	    } else {
	      options.protocol = this._url.protocol;
	      options.hostname = this._url.hostname;
	      options.port = this._url.port;
	    }

	    log_1$1.debug(() => `Request to the agent: ${JSON.stringify(options)}`);

	    return platform$3
	      .request(Object.assign({ data }, options))
	      .then(res => {
	        log_1$1.debug(`Response from the agent: ${res}`);

	        this._prioritySampler.update(JSON.parse(res).rate_by_service);
	      })
	      .catch(e => log_1$1.error(e))
	  }

	  _erase (trace) {
	    trace.finished.forEach(span => {
	      span.context()._tags = {};
	      span.context()._logs = [];
	      span.context()._metrics = {};
	    });

	    trace.started = [];
	    trace.finished = [];
	  }
	}

	var writer$2 = Writer$1;

	const microTs = utils.microTs;
	const idToHex$2 = utils.idToHex;

	function formatZipkinV2Json (span) {
	  const formatted = {};

	  formatLocalEndpoint(formatted, span);
	  formatAnnotations(formatted, span);
	  formatTags(formatted, span);
	  formatSpan(formatted, span);

	  return formatted
	}

	function formatLocalEndpoint (formatted, span) {
	  formatted.localEndpoint = { 'serviceName': span._parentTracer._service };
	}

	function formatAnnotations (formatted, span) {
	  const logs = span.context()._logs;
	  if (logs.length === 0) {
	    return
	  }

	  const annotations = [];
	  logs.forEach(logged => {
	    annotations.push({
	      timestamp: microTs(logged.timestamp),
	      value: JSON.stringify(logged.value)
	    });
	  });
	  formatted.annotations = annotations;
	}

	function formatTags (formatted, span) {
	  const tags = span.context()._tags;
	  const keys = Object.keys(tags);
	  if (keys.length === 0) {
	    return
	  }

	  const formattedTags = {};
	  formatted.tags = formattedTags;

	  keys.forEach(tag => {
	    switch (tag) {
	      case 'span.kind':
	        if (span.kind == null) {
	          span.kind = tags[tag];
	        }
	        break
	      case 'span.type':
	        if (formattedTags.component === undefined) {
	          formattedTags.component = String(tags[tag]);
	        }
	        break
	      case 'service.name':
	        break // do not add to tags
	      case 'resource.name':
	        // resource names make for more informative OT operation names
	        span.setOperationName(tags[tag]);
	        break
	      case 'error':
	        if (tags[tag]) {
	          formattedTags.error = String(tags[tag]);
	        }
	        break
	      case 'sfx.error.kind':
	      case 'sfx.error.message':
	      case 'sfx.error.stack':
	        formattedTags.error = 'true';
	        formattedTags[tag] = String(tags[tag]);
	        break
	      default:
	        formattedTags[tag] = String(tags[tag]);
	    }
	  });
	}

	function formatSpan (formatted, span) {
	  const spanContext = span.context();

	  formatted.traceId = idToHex$2(spanContext._traceId);
	  formatted.name = String(spanContext._name);
	  formatted.id = idToHex$2(spanContext._spanId);
	  formatted.timestamp = microTs(span._startTime);
	  formatted.duration = microTs(span._duration);

	  const parentId = spanContext._parentId;
	  if (parentId) {
	    formatted.parentId = idToHex$2(parentId);
	  }

	  if (span.kind) {
	    formatted.kind = span.kind.toUpperCase();
	  }

	  return formatted
	}

	var format$4 = formatZipkinV2Json;

	class ZipkinV2Writer extends writer$2 {
	  constructor (prioritySampler, url, path, headers) {
	    super(prioritySampler, url);
	    // The dd-writer updates service-based sampling priorities for each
	    // trace write to the agent.  We just need to prime the default
	    // AUTO_KEEP sampler for subsequent isSampled(span) calls
	    this._prioritySampler.update({});

	    this.format = format$4;
	    this.encode = (trace) => trace;
	    this._path = path;
	    this._headers = headers;
	  }

	  flush () {
	    if (this._queue.length > 0) {
	      const spans = [];
	      this._queue.forEach((trace) => {
	        trace.forEach((span) => {
	          spans.push(span);
	        });
	      });
	      const data = JSON.stringify(spans);

	      const request = this._request(data);

	      this._queue = [];
	      this._size = 0;
	      return request
	    }
	  }

	  _request (data) {
	    const options = {
	      protocol: this._url.protocol,
	      hostname: this._url.hostname,
	      port: this._url.port,
	      path: this._url.pathname,
	      method: 'POST',
	      headers: Object.assign({ 'Content-Type': 'application/json' }, this._headers)
	    };
	    log_1$1.debug(() => `Request to the agent: ${JSON.stringify(options)}`);

	    return platform$3
	      .request(Object.assign({ data }, options))
	      .catch(e => log_1$1.error(e))
	  }
	}

	var writer$1 = ZipkinV2Writer;

	class Scheduler {
	  constructor (callback, interval) {
	    this._timer = null;
	    this._callback = callback;
	    this._interval = interval;
	  }

	  start () {
	    this._timer = setInterval(this._callback, this._interval);
	    this._timer.unref && this._timer.unref();

	    platform$3.on('exit', this._callback);
	  }

	  stop () {
	    clearInterval(this._timer);

	    platform$3.off('exit', this._callback);
	  }

	  reset () {
	    this.stop();
	    this.start();
	  }
	}

	var scheduler = Scheduler;

	// TODO: make calls to Writer#append asynchronous

	class Recorder {
	  constructor (writer, interval) {
	    this._writer = writer;

	    if (interval > 0) {
	      this._scheduler = new scheduler(() => this._writer.flush(), interval);
	    }
	  }

	  init () {
	    this._scheduler && this._scheduler.start();
	  }

	  record (span) {
	    this._writer.append(span);

	    if (!this._scheduler) {
	      this._writer.flush();
	    }
	  }
	}

	var recorder = Recorder;

	class Sampler {
	  constructor (rate) {
	    this._rate = rate;
	  }

	  rate () {
	    return this._rate
	  }

	  isSampled () {
	    return this._rate === 1 || Math.random() < this._rate
	  }
	}

	var sampler = Sampler;

	var formats = {
	  TEXT_MAP: lib.FORMAT_TEXT_MAP,
	  HTTP_HEADERS: lib.FORMAT_HTTP_HEADERS,
	  BINARY: lib.FORMAT_BINARY,
	  LOG: 'log'
	};

	var kinds = {
	  SERVER: 'server',
	  CLIENT: 'client',
	  PRODUCER: 'producer',
	  CONSUMER: 'consumer'
	};

	var types = {
	  HTTP: 'http',
	  WEB: 'web'
	};

	var ext = {
	  formats,
	  kinds,
	  priority: priority$1,
	  tags: tags_1,
	  types
	};

	const SERVICE_NAME$2 = ext.tags.SERVICE_NAME;
	const SAMPLING_PRIORITY = ext.tags.SAMPLING_PRIORITY;
	const MANUAL_KEEP = ext.tags.MANUAL_KEEP;
	const MANUAL_DROP = ext.tags.MANUAL_DROP;
	const USER_REJECT = ext.priority.USER_REJECT;
	const AUTO_REJECT = ext.priority.AUTO_REJECT;
	const AUTO_KEEP = ext.priority.AUTO_KEEP;
	const USER_KEEP = ext.priority.USER_KEEP;
	const DEFAULT_KEY = 'service:,env:';

	const priorities = new Set([
	  USER_REJECT,
	  AUTO_REJECT,
	  AUTO_KEEP,
	  USER_KEEP
	]);

	class PrioritySampler {
	  constructor (env) {
	    this._env = env;
	    this.update({});
	  }

	  isSampled (span) {
	    const context = this._getContext(span);
	    const key = `service:${context._tags[SERVICE_NAME$2]},env:${this._env}`;
	    const sampler = this._samplers[key] || this._samplers[DEFAULT_KEY];

	    return sampler.isSampled(span)
	  }

	  sample (span) {
	    const context = this._getContext(span);

	    if (context._sampling.priority !== undefined) return

	    const tag = this._getPriority(context._tags);

	    if (this.validate(tag)) {
	      context._sampling.priority = tag;
	      return
	    }

	    context._sampling.priority = this.isSampled(span) ? AUTO_KEEP : AUTO_REJECT;
	  }

	  update (rates) {
	    const samplers = {};

	    for (const key in rates) {
	      const rate = rates[key];
	      const sampler$1 = new sampler(rate);

	      samplers[key] = sampler$1;
	    }

	    samplers[DEFAULT_KEY] = samplers[DEFAULT_KEY] || new sampler(AUTO_KEEP);

	    this._samplers = samplers;
	  }

	  validate (samplingPriority) {
	    return priorities.has(samplingPriority)
	  }

	  _getContext (span) {
	    return typeof span.context === 'function' ? span.context() : span
	  }

	  _getPriority (tags) {
	    if (tags.hasOwnProperty(MANUAL_KEEP) && tags[MANUAL_KEEP] !== false) {
	      return USER_KEEP
	    } else if (tags.hasOwnProperty(MANUAL_DROP) && tags[MANUAL_DROP] !== false) {
	      return USER_REJECT
	    } else {
	      const priority = parseInt(tags[SAMPLING_PRIORITY], 10);

	      if (priority === 1 || priority === 2) {
	        return USER_KEEP
	      } else if (priority === 0 || priority === -1) {
	        return USER_REJECT
	      }
	    }
	  }
	}

	var priority_sampler = PrioritySampler;

	/**
	 * lodash (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */

	/** Used as references for various `Number` constants. */
	var INFINITY$2 = 1 / 0,
	    MAX_SAFE_INTEGER = 9007199254740991;

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    funcTag$1 = '[object Function]',
	    genTag$1 = '[object GeneratorFunction]',
	    symbolTag$1 = '[object Symbol]';

	/** Detect free variable `global` from Node.js. */
	var freeGlobal$2 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

	/** Detect free variable `self`. */
	var freeSelf$2 = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root$2 = freeGlobal$2 || freeSelf$2 || Function('return this')();

	/**
	 * A faster alternative to `Function#apply`, this function invokes `func`
	 * with the `this` binding of `thisArg` and the arguments of `args`.
	 *
	 * @private
	 * @param {Function} func The function to invoke.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {Array} args The arguments to invoke `func` with.
	 * @returns {*} Returns the result of `func`.
	 */
	function apply(func, thisArg, args) {
	  switch (args.length) {
	    case 0: return func.call(thisArg);
	    case 1: return func.call(thisArg, args[0]);
	    case 2: return func.call(thisArg, args[0], args[1]);
	    case 3: return func.call(thisArg, args[0], args[1], args[2]);
	  }
	  return func.apply(thisArg, args);
	}

	/**
	 * A specialized version of `_.map` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	function arrayMap(array, iteratee) {
	  var index = -1,
	      length = array ? array.length : 0,
	      result = Array(length);

	  while (++index < length) {
	    result[index] = iteratee(array[index], index, array);
	  }
	  return result;
	}

	/**
	 * Appends the elements of `values` to `array`.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {Array} values The values to append.
	 * @returns {Array} Returns `array`.
	 */
	function arrayPush(array, values) {
	  var index = -1,
	      length = values.length,
	      offset = array.length;

	  while (++index < length) {
	    array[offset + index] = values[index];
	  }
	  return array;
	}

	/** Used for built-in method references. */
	var objectProto$2 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$1 = objectProto$2.hasOwnProperty;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString$2 = objectProto$2.toString;

	/** Built-in value references. */
	var Symbol$2 = root$2.Symbol,
	    propertyIsEnumerable = objectProto$2.propertyIsEnumerable,
	    spreadableSymbol = Symbol$2 ? Symbol$2.isConcatSpreadable : undefined;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;

	/**
	 * The base implementation of `_.flatten` with support for restricting flattening.
	 *
	 * @private
	 * @param {Array} array The array to flatten.
	 * @param {number} depth The maximum recursion depth.
	 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
	 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
	 * @param {Array} [result=[]] The initial result value.
	 * @returns {Array} Returns the new flattened array.
	 */
	function baseFlatten(array, depth, predicate, isStrict, result) {
	  var index = -1,
	      length = array.length;

	  predicate || (predicate = isFlattenable);
	  result || (result = []);

	  while (++index < length) {
	    var value = array[index];
	    if (depth > 0 && predicate(value)) {
	      if (depth > 1) {
	        // Recursively flatten arrays (susceptible to call stack limits).
	        baseFlatten(value, depth - 1, predicate, isStrict, result);
	      } else {
	        arrayPush(result, value);
	      }
	    } else if (!isStrict) {
	      result[result.length] = value;
	    }
	  }
	  return result;
	}

	/**
	 * The base implementation of `_.pick` without support for individual
	 * property identifiers.
	 *
	 * @private
	 * @param {Object} object The source object.
	 * @param {string[]} props The property identifiers to pick.
	 * @returns {Object} Returns the new object.
	 */
	function basePick(object, props) {
	  object = Object(object);
	  return basePickBy(object, props, function(value, key) {
	    return key in object;
	  });
	}

	/**
	 * The base implementation of  `_.pickBy` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The source object.
	 * @param {string[]} props The property identifiers to pick from.
	 * @param {Function} predicate The function invoked per property.
	 * @returns {Object} Returns the new object.
	 */
	function basePickBy(object, props, predicate) {
	  var index = -1,
	      length = props.length,
	      result = {};

	  while (++index < length) {
	    var key = props[index],
	        value = object[key];

	    if (predicate(value, key)) {
	      result[key] = value;
	    }
	  }
	  return result;
	}

	/**
	 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @returns {Function} Returns the new function.
	 */
	function baseRest(func, start) {
	  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
	  return function() {
	    var args = arguments,
	        index = -1,
	        length = nativeMax(args.length - start, 0),
	        array = Array(length);

	    while (++index < length) {
	      array[index] = args[start + index];
	    }
	    index = -1;
	    var otherArgs = Array(start + 1);
	    while (++index < start) {
	      otherArgs[index] = args[index];
	    }
	    otherArgs[start] = array;
	    return apply(func, this, otherArgs);
	  };
	}

	/**
	 * Checks if `value` is a flattenable `arguments` object or array.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
	 */
	function isFlattenable(value) {
	  return isArray(value) || isArguments(value) ||
	    !!(spreadableSymbol && value && value[spreadableSymbol]);
	}

	/**
	 * Converts `value` to a string key if it's not a string or symbol.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @returns {string|symbol} Returns the key.
	 */
	function toKey(value) {
	  if (typeof value == 'string' || isSymbol$1(value)) {
	    return value;
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY$2) ? '-0' : result;
	}

	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	function isArguments(value) {
	  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
	  return isArrayLikeObject(value) && hasOwnProperty$1.call(value, 'callee') &&
	    (!propertyIsEnumerable.call(value, 'callee') || objectToString$2.call(value) == argsTag);
	}

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray = Array.isArray;

	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null && isLength(value.length) && !isFunction$2(value);
	}

	/**
	 * This method is like `_.isArrayLike` except that it also checks if `value`
	 * is an object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array-like object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArrayLikeObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLikeObject(document.body.children);
	 * // => true
	 *
	 * _.isArrayLikeObject('abc');
	 * // => false
	 *
	 * _.isArrayLikeObject(_.noop);
	 * // => false
	 */
	function isArrayLikeObject(value) {
	  return isObjectLike$1(value) && isArrayLike(value);
	}

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction$2(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 8-9 which returns 'object' for typed array and other constructors.
	  var tag = isObject$3(value) ? objectToString$2.call(value) : '';
	  return tag == funcTag$1 || tag == genTag$1;
	}

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' &&
	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject$3(value) {
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike$1(value) {
	  return !!value && typeof value == 'object';
	}

	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol$1(value) {
	  return typeof value == 'symbol' ||
	    (isObjectLike$1(value) && objectToString$2.call(value) == symbolTag$1);
	}

	/**
	 * Creates an object composed of the picked `object` properties.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The source object.
	 * @param {...(string|string[])} [props] The property identifiers to pick.
	 * @returns {Object} Returns the new object.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': '2', 'c': 3 };
	 *
	 * _.pick(object, ['a', 'c']);
	 * // => { 'a': 1, 'c': 3 }
	 */
	var pick = baseRest(function(object, props) {
	  return object == null ? {} : basePick(object, arrayMap(baseFlatten(props, 1), toKey));
	});

	var lodash_pick = pick;

	const traceKey = 'x-datadog-trace-id';
	const spanKey = 'x-datadog-parent-id';
	const originKey = 'x-datadog-origin';
	const samplingKey = 'x-datadog-sampling-priority';
	const baggagePrefix$1 = 'ot-baggage-';
	const baggageExpr = new RegExp(`^${baggagePrefix$1}(.+)$`);
	const logKeys$1 = [traceKey, spanKey, samplingKey, originKey];

	class TextMapPropagator {
	  inject (spanContext, carrier) {
	    carrier[traceKey] = spanContext.toTraceId();
	    carrier[spanKey] = spanContext.toSpanId();

	    this._injectOrigin(spanContext, carrier);
	    this._injectSamplingPriority(spanContext, carrier);
	    this._injectBaggageItems(spanContext, carrier);

	    log_1$1.debug(() => `Inject into carrier: ${JSON.stringify(lodash_pick(carrier, logKeys$1))}.`);
	  }

	  extract (carrier) {
	    if (!carrier[traceKey] || !carrier[spanKey]) {
	      return null
	    }

	    const spanContext = new span_context({
	      traceId: new platform$3.Uint64BE(carrier[traceKey], 10),
	      spanId: new platform$3.Uint64BE(carrier[spanKey], 10)
	    });

	    this._extractOrigin(carrier, spanContext);
	    this._extractBaggageItems(carrier, spanContext);
	    this._extractSamplingPriority(carrier, spanContext);

	    log_1$1.debug(() => `Extract from carrier: ${JSON.stringify(lodash_pick(carrier, logKeys$1))}.`);

	    return spanContext
	  }

	  _injectOrigin (spanContext, carrier) {
	    const origin = spanContext._trace.origin;

	    if (origin) {
	      carrier[originKey] = origin;
	    }
	  }

	  _injectSamplingPriority (spanContext, carrier) {
	    const priority = spanContext._sampling.priority;

	    if (Number.isInteger(priority)) {
	      carrier[samplingKey] = priority.toString();
	    }
	  }

	  _injectBaggageItems (spanContext, carrier) {
	    spanContext._baggageItems && Object.keys(spanContext._baggageItems).forEach(key => {
	      carrier[baggagePrefix$1 + key] = String(spanContext._baggageItems[key]);
	    });
	  }

	  _extractOrigin (carrier, spanContext) {
	    const origin = carrier[originKey];

	    if (typeof carrier[originKey] === 'string') {
	      spanContext._trace.origin = origin;
	    }
	  }

	  _extractBaggageItems (carrier, spanContext) {
	    Object.keys(carrier).forEach(key => {
	      const match = key.match(baggageExpr);

	      if (match) {
	        spanContext._baggageItems[match[1]] = carrier[key];
	      }
	    });
	  }

	  _extractSamplingPriority (carrier, spanContext) {
	    const priority = parseInt(carrier[samplingKey], 10);

	    if (Number.isInteger(priority)) {
	      spanContext._sampling.priority = parseInt(carrier[samplingKey], 10);
	    }
	  }
	}

	var text_map = TextMapPropagator;

	class HttpPropagator extends text_map {}

	var http$1 = HttpPropagator;

	const Uint64BE = int64Buffer$1.Uint64BE;


	const idToHex$1 = utils.idToHex;
	const priority = ext.priority;

	const traceIdKey = 'x-b3-traceid';
	const spanIdKey = 'x-b3-spanid';
	const parentIdKey = 'x-b3-parentspanid';
	const sampledKey = 'x-b3-sampled';
	const flagsKey = 'x-b3-flags';
	const otBaggagePrefix = 'ot-baggage-';
	const baggagePrefix = 'baggage-';
	const baggagePrefixes = [otBaggagePrefix, baggagePrefix];

	const logKeys = [traceIdKey, spanIdKey, parentIdKey, sampledKey];

	class B3TextMapPropagator {
	  inject (spanContext, carrier) {
	    const traceId = idToHex$1(spanContext._traceId);
	    // Don't inject trace data from NoopSpan
	    if (traceId === '0000000000000000') {
	      return
	    }
	    carrier[traceIdKey] = traceId;
	    carrier[spanIdKey] = idToHex$1(spanContext._spanId);

	    const parentId = spanContext._parentId;
	    if (parentId !== null) {
	      carrier[parentIdKey] = idToHex$1(parentId);
	    }
	    this._injectSampled(spanContext, carrier);
	    this._injectBaggageItems(spanContext, carrier);

	    log_1$1.debug(() => `Inject into carrier: ${JSON.stringify(lodash_pick(carrier, logKeys))}.`);
	  }

	  extract (carrier) {
	    let traceId;
	    let spanId;
	    const keys = Object.keys(carrier);
	    for (let i = 0; i < keys.length; i++) {
	      const key = keys[i];
	      const lcKey = key.toLowerCase();
	      if (lcKey === traceIdKey) {
	        traceId = carrier[key];
	      } else if (lcKey === spanIdKey) {
	        spanId = carrier[key];
	      }
	      if (traceId && spanId) {
	        break
	      }
	    }

	    if (!(traceId && spanId)) {
	      return null
	    }

	    const spanContext = new span_context({
	      traceId: new Uint64BE(traceId, 16),
	      spanId: new Uint64BE(spanId, 16)
	    });

	    this._extractBaggageItems(carrier, spanContext);
	    this._extractSamplingPriority(carrier, spanContext);

	    log_1$1.debug(() => `Extract from carrier: ${JSON.stringify(lodash_pick(carrier, logKeys))}.`);

	    return spanContext
	  }

	  _injectSampled (spanContext, carrier) {
	    let sampled = false;
	    const contextPriority = spanContext._sampling.priority;
	    if (contextPriority !== undefined) {
	      sampled = contextPriority === priority.USER_KEEP || contextPriority === priority.AUTO_KEEP;
	    }
	    carrier[sampledKey] = sampled ? '1' : '0';
	  }

	  _injectBaggageItems (spanContext, carrier) {
	    spanContext._baggageItems && Object.keys(spanContext._baggageItems).forEach(key => {
	      carrier[otBaggagePrefix + key] = String(spanContext._baggageItems[key]);
	    });
	  }

	  _extractBaggageItems (carrier, spanContext) {
	    Object.keys(carrier).forEach(key => {
	      const checkedKey = key.toLowerCase();
	      let baggageItem;
	      for (let i = 0; i < baggagePrefixes.length; i++) {
	        const prefix = baggagePrefixes[i];
	        if (checkedKey.startsWith(prefix)) {
	          baggageItem = key.substr(prefix.length);
	          spanContext._baggageItems[baggageItem] = carrier[key];
	          break
	        }
	      }
	    });
	  }

	  _extractSamplingPriority (carrier, spanContext) {
	    let sampled;
	    let debugged;
	    const keys = Object.keys(carrier);
	    for (let i = 0; i < keys.length; i++) {
	      const key = keys[i];
	      const lcKey = key.toLowerCase();
	      if (lcKey === sampledKey) {
	        sampled = carrier[key];
	      } else if (lcKey === flagsKey) {
	        debugged = carrier[key];
	      }
	      if (sampled && debugged) {
	        break
	      }
	    }

	    if (debugged !== undefined) {
	      const debugFlag = parseInt(debugged, 10);
	      if (debugFlag === 1) {
	        spanContext._sampling.priority = priority.USER_KEEP;
	        return
	      }
	    }

	    if (sampled !== undefined) { // otherwise force priority sampler to decide on isSampled()
	      const isSampled = parseInt(sampled, 10);
	      if (Number.isInteger(isSampled)) {
	        spanContext._sampling.priority = isSampled;
	      }
	    }
	  }
	}

	var b3_text_map = B3TextMapPropagator;

	class BinaryPropagator {
	  inject (spanContext, carrier) {}

	  extract (carrier) {
	    return null
	  }
	}

	var binary = BinaryPropagator;

	class LogPropagator {
	  inject (spanContext, carrier) {
	    if (!carrier) return

	    carrier.signalfx = {
	      trace_id: spanContext.toTraceIdHex(),
	      span_id: spanContext.toSpanIdHex()
	    };
	  }

	  extract (carrier) {
	    if (!carrier || !carrier.signalfx || !carrier.signalfx.trace_id || !carrier.signalfx.span_id) {
	      return null
	    }

	    const spanContext = new span_context({
	      traceId: new platform$3.Uint64BE(carrier.signalfx.trace_id, 16),
	      spanId: new platform$3.Uint64BE(carrier.signalfx.span_id, 16)
	    });

	    return spanContext
	  }
	}

	var log$1 = LogPropagator;

	const Tracer$1 = lib.Tracer;
	const Reference$2 = lib.Reference;



















	const REFERENCE_NOOP$2 = constants$3.REFERENCE_NOOP;
	const REFERENCE_CHILD_OF$2 = lib.REFERENCE_CHILD_OF;
	const REFERENCE_FOLLOWS_FROM = lib.REFERENCE_FOLLOWS_FROM;

	class SignalFxTracer$1 extends Tracer$1 {
	  constructor (config) {
	    super();

	    log_1$1.use(config.logger);
	    log_1$1.toggle(config.debug);

	    this._noopSpan = new span$2(this);
	    this._service = config.service;
	    this._url = config.url;
	    this._env = config.env;
	    this._tags = config.tags;
	    this._logInjection = config.logInjection;
	    this._analytics = config.analytics;
	    this._prioritySampler = new priority_sampler(config.env);
	    if (config.zipkin) {
	      this._writer = new writer$1(
	        this._prioritySampler, config.url, config.path, config.headers
	      );
	    } else {
	      this._writer = new writer$2(this._prioritySampler, config.url);
	    }
	    this._recorder = new recorder(this._writer, config.flushInterval);
	    this._recorder.init();
	    this._sampler = new sampler(config.sampleRate);
	    this._propagators = {
	      [formats.BINARY]: new binary(),
	      [formats.LOG]: new log$1()
	    };

	    if (config.zipkin) {
	      this._propagators[formats.TEXT_MAP] = new b3_text_map();
	      this._propagators[formats.HTTP_HEADERS] = new b3_text_map();
	    } else {
	      this._propagators[formats.TEXT_MAP] = new text_map();
	      this._propagators[formats.HTTP_HEADERS] = new http$1();
	    }

	    this._recordedValueMaxLength = config.recordedValueMaxLength;
	  }

	  _startSpan (name, fields) {
	    const references = getReferences(fields.references);
	    const reference = getParent(references);
	    const type = reference && reference.type();
	    const parent = reference && reference.referencedContext();
	    const noopSpan = this._noopSpan;

	    if (parent instanceof nonreporting_span || parent instanceof nonreporting_span_context) {
	      return new nonreporting_span(this, this._recorder, this._sampler, this._prioritySampler, {
	        operationName: fields.operationName || 'nonReportingSFXSpan'
	      })
	    }

	    if (type === REFERENCE_NOOP$2) return noopSpan
	    if (parent && parent === noopSpan.context()) return noopSpan
	    const isSampled = this._sampler.isSampled();
	    if (!parent && !isSampled) return noopSpan
	    if (parent && parent.isSynthesized && !isSampled) return noopSpan

	    const tags = {
	      'service.name': this._service
	    };

	    if (this._env) {
	      tags.env = this._env;
	    }

	    const span$1 = new span(this, this._recorder, this._sampler, this._prioritySampler, {
	      operationName: fields.operationName || name,
	      parent,
	      tags: Object.assign(tags, this._tags, fields.tags),
	      startTime: fields.startTime
	    });

	    return span$1
	  }

	  _inject (spanContext, format, carrier) {
	    try {
	      this._prioritySampler.sample(spanContext);
	      this._propagators[format].inject(spanContext, carrier);
	    } catch (e) {
	      log_1$1.error(e);
	    }

	    return this
	  }

	  _extract (format, carrier) {
	    try {
	      return this._propagators[format].extract(carrier)
	    } catch (e) {
	      log_1$1.error(e);
	      return null
	    }
	  }

	  flush () {
	    const flushed = this._writer.flush();
	    if (flushed == null) {
	      return Promise.resolve()
	    }
	    return flushed
	  }
	}

	function getReferences (references) {
	  if (!references) return []

	  return references.filter(ref => {
	    if (!(ref instanceof Reference$2)) {
	      log_1$1.error(() => `Expected ${ref} to be an instance of opentracing.Reference`);
	      return false
	    }

	    const spanContext = ref.referencedContext();

	    if (ref.type() !== REFERENCE_NOOP$2 && !(spanContext instanceof span_context)) {
	      log_1$1.error(() => `Expected ${spanContext} to be an instance of SpanContext`);
	      return false
	    }

	    return true
	  })
	}

	function getParent (references) {
	  let parent = null;

	  for (let i = 0; i < references.length; i++) {
	    const ref = references[i];
	    const type = ref.type();

	    if (type === REFERENCE_CHILD_OF$2 || type === REFERENCE_NOOP$2) {
	      parent = ref;
	      break
	    } else if (type === REFERENCE_FOLLOWS_FROM) {
	      if (!parent) {
	        parent = ref;
	      }
	    }
	  }

	  return parent
	}

	var tracer$1 = SignalFxTracer$1;

	var async_hooks$1 = require$$0__default$5['default'];

	function NextTickWrap() {}

	var nextTick = function patch() {
	  const hooks = this._hooks;
	  const state = this._state;

	  const oldNextTick = process.nextTick;
	  process.nextTick = function () {
	    if (!state.enabled) return oldNextTick.apply(process, arguments);

	    const args = new Array(arguments.length);
	    for (let i = 0; i < arguments.length; i++) {
	      args[i] = arguments[i];
	    }
	    const callback = args[0];

	    if (typeof callback !== 'function') {
	      throw new TypeError('callback is not a function');
	    }

	    const handle = new NextTickWrap();
	    const uid = --state.counter;

	    // call the init hook
	    hooks.init.call(handle, uid, 0, null, null);

	    // overwrite callback
	    args[0] = function () {
	      // call the pre hook
	      hooks.pre.call(handle, uid);

	      let didThrow = true;
	      try {
	        callback.apply(this, arguments);
	        didThrow = false;
	      } finally {
	        // If `callback` threw and there is an uncaughtException handler
	        // then call the `post` and `destroy` hook after the uncaughtException
	        // user handlers have been invoked.
	        if(didThrow && process.listenerCount('uncaughtException') > 0) {
	          process.once('uncaughtException', function () {
	            hooks.post.call(handle, uid, true);
	            hooks.destroy.call(null, uid);
	          });
	        }
	      }

	      // callback done successfully
	      hooks.post.call(handle, uid, false);
	      hooks.destroy.call(null, uid);
	    };

	    return oldNextTick.apply(process, args);
	  };
	};

	function PromiseWrap() {}

	var promise$1 = function patchPromise() {
	  const hooks = this._hooks;
	  const state = this._state;

	  const Promise = commonjsGlobal.Promise;

	  /* As per ECMAScript 2015, .catch must be implemented by calling .then, as
	   * such we need needn't patch .catch as well. see:
	   * http://www.ecma-international.org/ecma-262/6.0/#sec-promise.prototype.catch
	   */
	  const oldThen = Promise.prototype.then;
	  Promise.prototype.then = wrappedThen;

	  function makeWrappedHandler(fn, handle, uid, isOnFulfilled) {
	    if ('function' !== typeof fn) {
	      return isOnFulfilled
	        ? makeUnhandledResolutionHandler(uid)
	        : makeUnhandledRejectionHandler(uid);
	    }

	    return function wrappedHandler() {
	      hooks.pre.call(handle, uid);
	      try {
	        return fn.apply(this, arguments);
	      } finally {
	        hooks.post.call(handle, uid, false);
	        hooks.destroy.call(null, uid);
	      }
	    };
	  }

	  function makeUnhandledResolutionHandler(uid) {
	    return function unhandledResolutionHandler(val) {
	      hooks.destroy.call(null, uid);
	      return val;
	    };
	  }

	  function makeUnhandledRejectionHandler(uid) {
	    return function unhandledRejectedHandler(val) {
	      hooks.destroy.call(null, uid);
	      throw val;
	    };
	  }

	  function wrappedThen(onFulfilled, onRejected) {
	    if (!state.enabled) return oldThen.call(this, onFulfilled, onRejected);

	    const handle = new PromiseWrap();
	    const uid = --state.counter;

	    hooks.init.call(handle, uid, 0, null, null);

	    return oldThen.call(
	      this,
	      makeWrappedHandler(onFulfilled, handle, uid, true),
	      makeWrappedHandler(onRejected, handle, uid, false)
	    );
	  }
	};

	function TimeoutWrap() {}
	function IntervalWrap() {}
	function ImmediateWrap() {}

	const timeoutMap = new Map();
	const intervalMap = new Map();
	const ImmediateMap = new Map();

	let activeCallback = null;
	let clearedInCallback = false;

	var timers_1 = function patch() {
	  patchTimer(this._hooks, this._state, 'setTimeout', 'clearTimeout', TimeoutWrap, timeoutMap, true);
	  patchTimer(this._hooks, this._state, 'setInterval', 'clearInterval', IntervalWrap, intervalMap, false);
	  patchTimer(this._hooks, this._state, 'setImmediate', 'clearImmediate', ImmediateWrap, ImmediateMap, true);

	  commonjsGlobal.setTimeout = timers__default['default'].setTimeout;
	  commonjsGlobal.setInterval = timers__default['default'].setInterval;
	  commonjsGlobal.setImmediate = timers__default['default'].setImmediate;

	  commonjsGlobal.clearTimeout = timers__default['default'].clearTimeout;
	  commonjsGlobal.clearInterval = timers__default['default'].clearInterval;
	  commonjsGlobal.clearImmediate = timers__default['default'].clearImmediate;
	};

	function patchTimer(hooks, state, setFn, clearFn, Handle, timerMap, singleCall) {
	  const oldSetFn = timers__default['default'][setFn];
	  const oldClearFn = timers__default['default'][clearFn];

	  // overwrite set[Timeout]
	  timers__default['default'][setFn] = function () {
	    if (!state.enabled) return oldSetFn.apply(timers__default['default'], arguments);

	    const args = new Array(arguments.length);
	    for (let i = 0; i < arguments.length; i++) {
	      args[i] = arguments[i];
	    }
	    const callback = args[0];

	    if (typeof callback !== 'function') {
	      throw new TypeError('"callback" argument must be a function');
	    }

	    const handle = new Handle();
	    const uid = --state.counter;
	    let timerId = undefined;

	    // call the init hook
	    hooks.init.call(handle, uid, 0, null, null);

	    // overwrite callback
	    args[0] = function () {
	      // call the pre hook
	      activeCallback = timerId;
	      hooks.pre.call(handle, uid);

	      let didThrow = true;
	      try {
	        callback.apply(this, arguments);
	        didThrow = false;
	      } finally {
	        // If `callback` threw and there is an uncaughtException handler
	        // then call the `post` and `destroy` hook after the uncaughtException
	        // user handlers have been invoked.
	        if (didThrow && process.listenerCount('uncaughtException') > 0) {
	          process.once('uncaughtException', function () {
	            // call the post hook
	            hooks.post.call(handle, uid, true);
	            // setInterval won't continue
	            timerMap.delete(timerId);
	            hooks.destroy.call(null, uid);
	          });
	        }
	      }

	      // callback done successfully
	      hooks.post.call(handle, uid, false);
	      activeCallback = null;

	      // call the destroy hook if the callback will only be called once
	      if (singleCall || clearedInCallback) {
	        clearedInCallback = false;
	        timerMap.delete(timerId);
	        hooks.destroy.call(null, uid);
	      }
	    };

	    timerId = oldSetFn.apply(timers__default['default'], args);
	    // Bind the timerId and uid for later use, in case the clear* function is
	    // called.
	    timerMap.set(timerId, uid);

	    return timerId;
	  };

	  // overwrite clear[Timeout]
	  timers__default['default'][clearFn] = function (timerId) {
	    // If clear* was called within the timer callback, then delay the destroy
	    // event to after the post event has been called.
	    if (activeCallback === timerId && timerId !== null) {
	      clearedInCallback = true;
	    }
	    // clear should call the destroy hook. Note if timerId doesn't exists
	    // it is because asyncWrap wasn't enabled at the time.
	    else if (timerMap.has(timerId)) {
	      const uid = timerMap.get(timerId);
	      timerMap.delete(timerId);
	      hooks.destroy.call(null, uid);
	    }

	    oldClearFn.apply(timers__default['default'], arguments);
	  };
	}

	var name$5 = "async-hook-jl";
	var description$4 = "Inspect the life of handle objects in node";
	var version$5 = "1.7.6";
	var author$4 = "Andreas Madsen <amwebdk@gmail.com>";
	var main$3 = "./index.js";
	var scripts$5 = {
		test: "node ./test/runner.js && eslint ."
	};
	var repository$4 = {
		type: "git",
		url: "git://github.com/jeff-lewis/async-hook-jl.git"
	};
	var keywords$3 = [
		"async",
		"async hooks",
		"inspect",
		"async wrap"
	];
	var license$4 = "MIT";
	var dependencies$3 = {
		"stack-chain": "^1.3.7"
	};
	var devDependencies$4 = {
		async: "1.5.x",
		"cli-color": "1.1.x",
		eslint: "^3.4.0",
		endpoint: "0.4.x"
	};
	var engines$1 = {
		node: "^4.7 || >=6.9 || >=7.3"
	};
	var require$$0$3 = {
		name: name$5,
		description: description$4,
		version: version$5,
		author: author$4,
		main: main$3,
		scripts: scripts$5,
		repository: repository$4,
		keywords: keywords$3,
		license: license$4,
		dependencies: dependencies$3,
		devDependencies: devDependencies$4,
		engines: engines$1
	};

	const asyncWrap$1 = process.binding('async_wrap');
	const TIMERWRAP = asyncWrap$1.Providers.TIMERWRAP;

	const patchs = {
	  'nextTick': nextTick,
	  'promise': promise$1,
	  'timers': timers_1
	};

	const ignoreUIDs = new Set();

	function State$1() {
	  this.enabled = false;
	  this.counter = 0;
	}

	function Hooks() {
	  const initFns = this.initFns = [];
	  const preFns = this.preFns = [];
	  const postFns = this.postFns = [];
	  const destroyFns = this.destroyFns = [];

	  this.init = function (uid, provider, parentUid, parentHandle) {
	    // Ignore TIMERWRAP, since setTimeout etc. is monkey patched
	    if (provider === TIMERWRAP) {
	      ignoreUIDs.add(uid);
	      return;
	    }

	    // call hooks
	    for (const hook of initFns) {
	      hook(uid, this, provider, parentUid, parentHandle);
	    }
	  };

	  this.pre = function (uid) {
	    if (ignoreUIDs.has(uid)) return;

	    // call hooks
	    for (const hook of preFns) {
	      hook(uid, this);
	    }
	  };

	  this.post = function (uid, didThrow) {
	    if (ignoreUIDs.has(uid)) return;

	    // call hooks
	    for (const hook of postFns) {
	      hook(uid, this, didThrow);
	    }
	  };

	  this.destroy = function (uid) {
	    // Cleanup the ignore list if this uid should be ignored
	    if (ignoreUIDs.has(uid)) {
	      ignoreUIDs.delete(uid);
	      return;
	    }

	    // call hooks
	    for (const hook of destroyFns) {
	      hook(uid);
	    }
	  };
	}

	Hooks.prototype.add = function (hooks) {
	  if (hooks.init) this.initFns.push(hooks.init);
	  if (hooks.pre) this.preFns.push(hooks.pre);
	  if (hooks.post) this.postFns.push(hooks.post);
	  if (hooks.destroy) this.destroyFns.push(hooks.destroy);
	};

	function removeElement(array, item) {
	  const index = array.indexOf(item);
	  if (index === -1) return;
	  array.splice(index, 1);
	}

	Hooks.prototype.remove = function (hooks) {
	  if (hooks.init) removeElement(this.initFns, hooks.init);
	  if (hooks.pre) removeElement(this.preFns, hooks.pre);
	  if (hooks.post) removeElement(this.postFns, hooks.post);
	  if (hooks.destroy) removeElement(this.destroyFns, hooks.destroy);
	};

	function AsyncHook() {
	  this._state = new State$1();
	  this._hooks = new Hooks();

	  // expose version for conflict detection
	  this.version = require$$0$3.version;

	  // expose the Providers map
	  this.providers = asyncWrap$1.Providers;

	  // apply patches
	  for (const key of Object.keys(patchs)) {
	    patchs[key].call(this);
	  }

	  // setup async wrap
	  if (process.env.hasOwnProperty('NODE_ASYNC_HOOK_WARNING')) {
	    console.warn('warning: you are using async-hook-jl which is unstable.');
	  }
	  asyncWrap$1.setupHooks({
	    init: this._hooks.init,
	    pre: this._hooks.pre,
	    post: this._hooks.post,
	    destroy: this._hooks.destroy
	  });
	}
	var asyncHook$1 = AsyncHook;

	AsyncHook.prototype.addHooks = function (hooks) {
	  this._hooks.add(hooks);
	};

	AsyncHook.prototype.removeHooks = function (hooks) {
	  this._hooks.remove(hooks);
	};

	AsyncHook.prototype.enable = function () {
	  this._state.enabled = true;
	  asyncWrap$1.enable();
	};

	AsyncHook.prototype.disable = function () {
	  this._state.enabled = false;
	  asyncWrap$1.disable();
	};

	var name$4 = "stack-chain";
	var description$3 = "API for combining call site modifiers";
	var version$4 = "1.3.7";
	var author$3 = "Andreas Madsen <amwebdk@gmail.com>";
	var scripts$4 = {
		test: "tap ./test/simple"
	};
	var repository$3 = {
		type: "git",
		url: "git://github.com/AndreasMadsen/stack-chain.git"
	};
	var keywords$2 = [
		"stack",
		"chain",
		"trace",
		"call site",
		"concat",
		"format"
	];
	var devDependencies$3 = {
		tap: "2.x.x",
		"uglify-js": "2.5.x"
	};
	var license$3 = "MIT";
	var require$$0$2 = {
		name: name$4,
		description: description$3,
		version: version$4,
		author: author$3,
		scripts: scripts$4,
		repository: repository$3,
		keywords: keywords$2,
		devDependencies: devDependencies$3,
		license: license$3
	};

	// Copyright 2012 the V8 project authors. All rights reserved.
	// Redistribution and use in source and binary forms, with or without
	// modification, are permitted provided that the following conditions are
	// met:
	//
	//     * Redistributions of source code must retain the above copyright
	//       notice, this list of conditions and the following disclaimer.
	//     * Redistributions in binary form must reproduce the above
	//       copyright notice, this list of conditions and the following
	//       disclaimer in the documentation and/or other materials provided
	//       with the distribution.
	//     * Neither the name of Google Inc. nor the names of its
	//       contributors may be used to endorse or promote products derived
	//       from this software without specific prior written permission.
	//
	// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
	// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
	// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
	// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
	// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

	function FormatErrorString(error) {
	  try {
	    return Error.prototype.toString.call(error);
	  } catch (e) {
	    try {
	      return "<error: " + e + ">";
	    } catch (ee) {
	      return "<error>";
	    }
	  }
	}

	var format$3 = function FormatStackTrace(error, frames) {
	  var lines = [];
	  lines.push(FormatErrorString(error));
	  for (var i = 0; i < frames.length; i++) {
	    var frame = frames[i];
	    var line;
	    try {
	      line = frame.toString();
	    } catch (e) {
	      try {
	        line = "<error: " + e + ">";
	      } catch (ee) {
	        // Any code that reaches this point is seriously nasty!
	        line = "<error>";
	      }
	    }
	    lines.push("    at " + line);
	  }
	  return lines.join("\n");
	};

	// use a already existing formater or fallback to the default v8 formater


	// public define API
	function stackChain$1() {
	  this.extend = new TraceModifier();
	  this.filter = new TraceModifier();
	  this.format = new StackFormater();
	  this.version = require$$0$2.version;
	}


	var SHORTCIRCUIT_CALLSITE = false;
	stackChain$1.prototype.callSite = function collectCallSites(options) {
	  if (!options) options = {};

	  // Get CallSites
	  SHORTCIRCUIT_CALLSITE = true;
	  var obj = {};
	  Error.captureStackTrace(obj, collectCallSites);
	  var callSites = obj.stack;
	  SHORTCIRCUIT_CALLSITE = false;

	  // Slice
	  callSites = callSites.slice(options.slice || 0);

	  // Modify CallSites
	  if (options.extend) callSites = this.extend._modify(obj, callSites);
	  if (options.filter) callSites = this.filter._modify(obj, callSites);

	  // Done
	  return callSites;
	};

	var chain = new stackChain$1();

	function TraceModifier() {
	  this._modifiers = [];
	}

	TraceModifier.prototype._modify = function (error, frames) {
	  for (var i = 0, l = this._modifiers.length; i < l; i++) {
	    frames = this._modifiers[i](error, frames);
	  }

	  return frames;
	};

	TraceModifier.prototype.attach = function (modifier) {
	  this._modifiers.push(modifier);
	};

	TraceModifier.prototype.deattach = function (modifier) {
	  var index = this._modifiers.indexOf(modifier);

	  if (index === -1) return false;

	  this._modifiers.splice(index, 1);
	  return true;
	};

	function StackFormater() {
	  this._formater = format$3;
	  this._previous = undefined;
	}

	StackFormater.prototype.replace = function (formater) {
	  if (formater) {
	    this._formater = formater;
	  } else {
	    this.restore();
	  }
	};

	StackFormater.prototype.restore  = function () {
	  this._formater = format$3;
	  this._previous = undefined;
	};

	StackFormater.prototype._backup = function () {
	  this._previous = this._formater;
	};

	StackFormater.prototype._roolback = function () {
	  if (this._previous === format$3) {
	    this.replace(undefined);
	  } else {
	    this.replace(this._previous);
	  }

	  this._previous = undefined;
	};


	//
	// Set Error.prepareStackTrace thus allowing stack-chain
	// to take control of the Error().stack formating.
	//

	// If there already is a custom stack formater, then set
	// that as the stack-chain formater.
	if (Error.prepareStackTrace) {
	    chain.format.replace(Error.prepareStackTrace);
	}

	var SHORTCIRCUIT_FORMATER = false;
	function prepareStackTrace(error, originalFrames) {
	  if (SHORTCIRCUIT_CALLSITE) return originalFrames;
	  if (SHORTCIRCUIT_FORMATER) return format$3(error, originalFrames);

	  // Make a loss copy of originalFrames
	  var frames = originalFrames.concat();

	  // extend frames
	  frames = chain.extend._modify(error, frames);

	  // filter frames
	  frames = chain.filter._modify(error, frames);

	  // reduce frames to match Error.stackTraceLimit
	  frames = frames.slice(0, Error.stackTraceLimit);

	  // Set the callSite property
	  // But only if it hasn't been explicitly set, otherwise
	  // error.stack would have unintended side effects. Check also for
	  // non-extensible/sealed objects, such as those from Google's Closure Library
	  if (Object.isExtensible(error) &&
	      (Object.getOwnPropertyDescriptor(error, "callSite") === undefined)) {
	    error.callSite = {
	      original: originalFrames,
	      mutated: frames
	    };
	  }

	  // format frames
	  SHORTCIRCUIT_FORMATER = true;
	  var format = chain.format._formater(error, frames);
	  SHORTCIRCUIT_FORMATER = false;

	  return format;
	}

	// Replace the v8 stack trace creator
	Object.defineProperty(Error, 'prepareStackTrace', {
	  'get': function () {
	    return prepareStackTrace;
	  },

	  'set': function (formater) {
	    // If formater is prepareStackTrace it means that someone ran
	    // var old = Error.prepareStackTrace;
	    // Error.prepareStackTrace = custom
	    // new Error().stack
	    // Error.prepareStackTrace = old;
	    // The effect of this, should be that the old behaviour is restored.
	    if (formater === prepareStackTrace) {
	      chain.format._roolback();
	    }
	    // Error.prepareStackTrace was set, this means that someone is
	    // trying to take control of the Error().stack format. Make
	    // them belive they succeeded by setting them up as the stack-chain
	    // formater.
	    else {
	      chain.format._backup();
	      chain.format.replace(formater);
	    }
	  }
	});

	//
	// Manage call site storeage
	//
	function callSiteGetter() {
	  // calculate call site object
	  this.stack;

	  // return call site object
	  return this.callSite;
	}

	Object.defineProperty(Error.prototype, 'callSite', {
	  'get': callSiteGetter,

	  'set': function (frames) {
	    // In case callSite was set before [[getter]], just set
	    // the value
	    Object.defineProperty(this, 'callSite', {
	        value: frames,
	        writable: true,
	        configurable: true
	    });
	  },

	  configurable: true
	});

	var stackChain_1 = chain;

	var stackChain = createCommonjsModule(function (module) {
	// If a another copy (same version or not) of stack-chain exists it will result
	// in wrong stack traces (most likely dublicate callSites).
	if (commonjsGlobal._stackChain) {
	  // In case the version match, we can simply return the first initialized copy
	  if (commonjsGlobal._stackChain.version === require$$0$2.version) {
	    module.exports = commonjsGlobal._stackChain;
	  }
	  // The version don't match, this is really bad. Lets just throw
	  else {
	    throw new Error('Conflicting version of stack-chain found');
	  }
	}
	// Yay, no other stack-chain copy exists, yet :/
	else {
	  module.exports = commonjsGlobal._stackChain = stackChain_1;
	}
	});

	var asyncHookJl = createCommonjsModule(function (module) {



	// If a another copy (same version or not) of stack-chain exists it will result
	// in wrong stack traces (most likely dublicate callSites).
	if (commonjsGlobal._asyncHook) {
	  // In case the version match, we can simply return the first initialized copy
	  if (commonjsGlobal._asyncHook.version === require$$0$3.version) {
	    module.exports = commonjsGlobal._asyncHook;
	  }
	  // The version don't match, this is really bad. Lets just throw
	  else {
	    throw new Error('Conflicting version of async-hook-jl found');
	  }
	} else {
	  const stackChain$1 = stackChain;

	  // Remove callSites from this module. AsyncWrap doesn't have any callSites
	  // and the hooks are expected to be completely transparent.
	  stackChain$1.filter.attach(function (error, frames) {
	    return frames.filter(function (callSite) {
	      const filename = callSite.getFileName();
	      // filename is not always a string, for example in case of eval it is
	      // undefined. So check if the filename is defined.
	      return !(filename && filename.slice(0, __dirname.length) === __dirname);
	    });
	  });

	  module.exports = commonjsGlobal._asyncHook = new asyncHook$1();
	}
	});

	const asyncWrap = process.binding('async_wrap');

	let asyncHook;

	try {
	  // load async-hook if the user is using it
	  asyncHook = require$$0__default$6['default'];
	} catch (e) {
	  // otherwise load the more recent async-hook-jl
	  asyncHook = asyncHookJl;
	}

	const stack = [];

	const providers = Object.keys(asyncWrap.Providers)
	  .reduce((prev, next) => {
	    prev[asyncWrap.Providers[next]] = next;
	    return prev
	  }, {});

	var async_wrap = {
	  createHook (callbacks) {
	    const hooks = {};

	    if (callbacks.init) {
	      hooks.init = (uid, handle, provider, parentUid, parentHandle) => {
	        callbacks.init(uid, providers[provider], parentUid, handle);
	      };
	    }

	    if (callbacks.before) {
	      hooks.pre = (uid, handle) => {
	        callbacks.before(uid);
	      };
	    }

	    if (callbacks.after) {
	      hooks.post = (uid, handle, didThrow) => {
	        callbacks.after(uid);
	      };
	    }

	    if (callbacks.destroy) {
	      hooks.destroy = (uid) => {
	        callbacks.destroy(uid);
	      };
	    }

	    asyncHook.addHooks({
	      pre: (uid, handle) => {
	        stack.push(uid);
	      },
	      post: (uid, handle, didThrow) => {
	        if (uid === this.executionAsyncId()) {
	          stack.pop();
	        }
	      }
	    });

	    asyncHook.enable();

	    return {
	      enable: () => asyncHook.addHooks(hooks),
	      disable: () => asyncHook.removeHooks(hooks)
	    }
	  },

	  executionAsyncId () {
	    return stack[stack.length - 1] || 0
	  }
	};

	var async_hooks = createCommonjsModule(function (module) {



	if (process && semver$1.gte(process.versions.node, '8.0.0')) {
	  module.exports = async_hooks$1;
	} else {
	  module.exports = async_wrap;
	}
	});

	const eid = async_hooks.executionAsyncId || async_hooks.currentId;




	// https://github.com/nodejs/node/issues/19859
	const hasKeepAliveBug = !semver$1.satisfies(process.version, '^8.13 || >=10.14.2');

	let singleton = null;

	class Scope extends base {
	  constructor (options) {
	    if (singleton) return singleton

	    super();

	    singleton = this;

	    this._spans = Object.create(null);
	    this._types = Object.create(null);
	    this._weaks = new WeakMap();
	    this._hook = async_hooks.createHook({
	      init: this._init.bind(this),
	      destroy: this._destroy.bind(this),
	      promiseResolve: this._destroy.bind(this)
	    });

	    this._hook.enable();
	  }

	  _active () {
	    return this._spans[eid()] || null
	  }

	  _activate (span, callback) {
	    const asyncId = eid();
	    const oldSpan = this._spans[asyncId];

	    this._spans[asyncId] = span;

	    try {
	      return callback()
	    } catch (e) {
	      if (span && typeof span.addTags === 'function') {
	        span.addTags({
	          'sfx.error.kind': e.name,
	          'sfx.error.message': e.message,
	          'sfx.error.stack': e.stack
	        });
	      }

	      throw e
	    } finally {
	      if (oldSpan) {
	        this._spans[asyncId] = oldSpan;
	      } else {
	        delete this._spans[asyncId];
	      }
	    }
	  }

	  _init (asyncId, type, triggerAsyncId, resource) {
	    this._spans[asyncId] = this._active();
	    this._types[asyncId] = type;

	    if (hasKeepAliveBug && (type === 'TCPWRAP' || type === 'HTTPPARSER')) {
	      this._destroy(this._weaks.get(resource));
	      this._weaks.set(resource, asyncId);
	    }

	    platform$3.metrics().increment('async.resources');
	    platform$3.metrics().increment('async.resources.by.type', `resource_type:${type}`);
	  }

	  _destroy (asyncId) {
	    const type = this._types[asyncId];

	    if (type) {
	      platform$3.metrics().decrement('async.resources');
	      platform$3.metrics().decrement('async.resources.by.type', `resource_type:${type}`);
	    }

	    delete this._spans[asyncId];
	    delete this._types[asyncId];
	  }
	}

	var scope = Scope;

	const SPAN_TYPE$1 = tags_1.SPAN_TYPE;
	const RESOURCE_NAME$1 = tags_1.RESOURCE_NAME;
	const SERVICE_NAME$1 = tags_1.SERVICE_NAME;
	const ANALYTICS$1 = tags_1.ANALYTICS;

	class SignalFxTracer extends tracer$1 {
	  constructor (config) {
	    super(config);

	    let ScopeManager;
	    let Scope;

	    if (process.env.SIGNALFX_CONTEXT_PROPAGATION === 'false') {
	      ScopeManager = scope_manager$1;
	      Scope = base;
	    } else {
	      ScopeManager = scope_manager;
	      Scope = scope;
	    }

	    this._scopeManager = new ScopeManager();
	    this._scope = new Scope();
	  }

	  withNonReportingScope (callback) {
	    const span = new nonreporting_span(this, this._recorder, this._sampler, this._prioritySampler, {
	      operationName: 'nonReportingSFXSpan'
	    });
	    return this.scope().activate(span, () => {
	      return callback()
	    })
	  }

	  trace (name, options, fn) {
	    options = Object.assign({}, {
	      childOf: this.scope().active()
	    }, options);

	    const span = this.startSpan(name, options);

	    addTags$3(span, options);

	    try {
	      if (fn.length > 1) {
	        return this.scope().activate(span, () => fn(span, err => {
	          addError$5(span, err);
	          span.finish();
	        }))
	      }

	      const result = this.scope().activate(span, () => fn(span));

	      if (result && typeof result.then === 'function') {
	        result.then(
	          () => span.finish(),
	          err => {
	            addError$5(span, err);
	            span.finish();
	          }
	        );
	      } else {
	        span.finish();
	      }

	      return result
	    } catch (e) {
	      addError$5(span, e);
	      span.finish();
	      throw e
	    }
	  }

	  wrap (name, options, fn) {
	    const tracer = this;

	    return function () {
	      const cb = arguments[arguments.length - 1];

	      if (typeof cb === 'function') {
	        return tracer.trace(name, options, (span, done) => {
	          arguments[arguments.length - 1] = function (err) {
	            done(err);
	            return cb.apply(this, arguments)
	          };

	          fn.apply(this, arguments);
	        })
	      } else {
	        return tracer.trace(name, options, () => fn.apply(this, arguments))
	      }
	    }
	  }

	  scopeManager () {
	    return this._scopeManager
	  }

	  scope () {
	    return this._scope
	  }

	  currentSpan () {
	    return this.scope().active()
	  }
	}

	function addError$5 (span, error) {
	  if (error && error instanceof Error) {
	    span.addTags({
	      'sfx.error.kind': error.name,
	      'sfx.error.message': error.message,
	      'sfx.error.stack': error.stack
	    });
	  }
	}

	function addTags$3 (span, options) {
	  const tags = {};

	  if (options.type) tags[SPAN_TYPE$1] = options.type;
	  if (options.service) tags[SERVICE_NAME$1] = options.service;
	  if (options.resource) tags[RESOURCE_NAME$1] = options.resource;

	  tags[ANALYTICS$1] = options.analytics;

	  span.addTags(tags);
	}

	var tracer = SignalFxTracer;

	/**
	 * Check if we're required to add a port number.
	 *
	 * @see https://url.spec.whatwg.org/#default-port
	 * @param {Number|String} port Port number we need to check
	 * @param {String} protocol Protocol we need to check against.
	 * @returns {Boolean} Is it a default port for the given protocol
	 * @api private
	 */
	var requiresPort = function required(port, protocol) {
	  protocol = protocol.split(':')[0];
	  port = +port;

	  if (!port) return false;

	  switch (protocol) {
	    case 'http':
	    case 'ws':
	    return port !== 80;

	    case 'https':
	    case 'wss':
	    return port !== 443;

	    case 'ftp':
	    return port !== 21;

	    case 'gopher':
	    return port !== 70;

	    case 'file':
	    return false;
	  }

	  return port !== 0;
	};

	var has = Object.prototype.hasOwnProperty
	  , undef;

	/**
	 * Decode a URI encoded string.
	 *
	 * @param {String} input The URI encoded string.
	 * @returns {String|Null} The decoded string.
	 * @api private
	 */
	function decode(input) {
	  try {
	    return decodeURIComponent(input.replace(/\+/g, ' '));
	  } catch (e) {
	    return null;
	  }
	}

	/**
	 * Attempts to encode a given input.
	 *
	 * @param {String} input The string that needs to be encoded.
	 * @returns {String|Null} The encoded string.
	 * @api private
	 */
	function encode(input) {
	  try {
	    return encodeURIComponent(input);
	  } catch (e) {
	    return null;
	  }
	}

	/**
	 * Simple query string parser.
	 *
	 * @param {String} query The query string that needs to be parsed.
	 * @returns {Object}
	 * @api public
	 */
	function querystring(query) {
	  var parser = /([^=?#&]+)=?([^&]*)/g
	    , result = {}
	    , part;

	  while (part = parser.exec(query)) {
	    var key = decode(part[1])
	      , value = decode(part[2]);

	    //
	    // Prevent overriding of existing properties. This ensures that build-in
	    // methods like `toString` or __proto__ are not overriden by malicious
	    // querystrings.
	    //
	    // In the case if failed decoding, we want to omit the key/value pairs
	    // from the result.
	    //
	    if (key === null || value === null || key in result) continue;
	    result[key] = value;
	  }

	  return result;
	}

	/**
	 * Transform a query string to an object.
	 *
	 * @param {Object} obj Object that should be transformed.
	 * @param {String} prefix Optional prefix.
	 * @returns {String}
	 * @api public
	 */
	function querystringify(obj, prefix) {
	  prefix = prefix || '';

	  var pairs = []
	    , value
	    , key;

	  //
	  // Optionally prefix with a '?' if needed
	  //
	  if ('string' !== typeof prefix) prefix = '?';

	  for (key in obj) {
	    if (has.call(obj, key)) {
	      value = obj[key];

	      //
	      // Edge cases where we actually want to encode the value to an empty
	      // string instead of the stringified value.
	      //
	      if (!value && (value === null || value === undef || isNaN(value))) {
	        value = '';
	      }

	      key = encode(key);
	      value = encode(value);

	      //
	      // If we failed to encode the strings, we should bail out as we don't
	      // want to add invalid strings to the query.
	      //
	      if (key === null || value === null) continue;
	      pairs.push(key +'='+ value);
	    }
	  }

	  return pairs.length ? prefix + pairs.join('&') : '';
	}

	//
	// Expose the module.
	//
	var stringify = querystringify;
	var parse$3 = querystring;

	var querystringify_1 = {
		stringify: stringify,
		parse: parse$3
	};

	var slashes = /^[A-Za-z][A-Za-z0-9+-.]*:[\\/]+/
	  , protocolre = /^([a-z][a-z0-9.+-]*:)?([\\/]{1,})?([\S\s]*)/i
	  , whitespace = '[\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF]'
	  , left = new RegExp('^'+ whitespace +'+');

	/**
	 * Trim a given string.
	 *
	 * @param {String} str String to trim.
	 * @public
	 */
	function trimLeft(str) {
	  return (str ? str : '').toString().replace(left, '');
	}

	/**
	 * These are the parse rules for the URL parser, it informs the parser
	 * about:
	 *
	 * 0. The char it Needs to parse, if it's a string it should be done using
	 *    indexOf, RegExp using exec and NaN means set as current value.
	 * 1. The property we should set when parsing this value.
	 * 2. Indication if it's backwards or forward parsing, when set as number it's
	 *    the value of extra chars that should be split off.
	 * 3. Inherit from location if non existing in the parser.
	 * 4. `toLowerCase` the resulting value.
	 */
	var rules = [
	  ['#', 'hash'],                        // Extract from the back.
	  ['?', 'query'],                       // Extract from the back.
	  function sanitize(address) {          // Sanitize what is left of the address
	    return address.replace('\\', '/');
	  },
	  ['/', 'pathname'],                    // Extract from the back.
	  ['@', 'auth', 1],                     // Extract from the front.
	  [NaN, 'host', undefined, 1, 1],       // Set left over value.
	  [/:(\d+)$/, 'port', undefined, 1],    // RegExp the back.
	  [NaN, 'hostname', undefined, 1, 1]    // Set left over.
	];

	/**
	 * These properties should not be copied or inherited from. This is only needed
	 * for all non blob URL's as a blob URL does not include a hash, only the
	 * origin.
	 *
	 * @type {Object}
	 * @private
	 */
	var ignore = { hash: 1, query: 1 };

	/**
	 * The location object differs when your code is loaded through a normal page,
	 * Worker or through a worker using a blob. And with the blobble begins the
	 * trouble as the location object will contain the URL of the blob, not the
	 * location of the page where our code is loaded in. The actual origin is
	 * encoded in the `pathname` so we can thankfully generate a good "default"
	 * location from it so we can generate proper relative URL's again.
	 *
	 * @param {Object|String} loc Optional default location object.
	 * @returns {Object} lolcation object.
	 * @public
	 */
	function lolcation(loc) {
	  var globalVar;

	  if (typeof window !== 'undefined') globalVar = window;
	  else if (typeof commonjsGlobal !== 'undefined') globalVar = commonjsGlobal;
	  else if (typeof self !== 'undefined') globalVar = self;
	  else globalVar = {};

	  var location = globalVar.location || {};
	  loc = loc || location;

	  var finaldestination = {}
	    , type = typeof loc
	    , key;

	  if ('blob:' === loc.protocol) {
	    finaldestination = new Url(unescape(loc.pathname), {});
	  } else if ('string' === type) {
	    finaldestination = new Url(loc, {});
	    for (key in ignore) delete finaldestination[key];
	  } else if ('object' === type) {
	    for (key in loc) {
	      if (key in ignore) continue;
	      finaldestination[key] = loc[key];
	    }

	    if (finaldestination.slashes === undefined) {
	      finaldestination.slashes = slashes.test(loc.href);
	    }
	  }

	  return finaldestination;
	}

	/**
	 * @typedef ProtocolExtract
	 * @type Object
	 * @property {String} protocol Protocol matched in the URL, in lowercase.
	 * @property {Boolean} slashes `true` if protocol is followed by "//", else `false`.
	 * @property {String} rest Rest of the URL that is not part of the protocol.
	 */

	/**
	 * Extract protocol information from a URL with/without double slash ("//").
	 *
	 * @param {String} address URL we want to extract from.
	 * @return {ProtocolExtract} Extracted information.
	 * @private
	 */
	function extractProtocol(address) {
	  address = trimLeft(address);

	  var match = protocolre.exec(address)
	    , protocol = match[1] ? match[1].toLowerCase() : ''
	    , slashes = !!(match[2] && match[2].length >= 2)
	    , rest =  match[2] && match[2].length === 1 ? '/' + match[3] : match[3];

	  return {
	    protocol: protocol,
	    slashes: slashes,
	    rest: rest
	  };
	}

	/**
	 * Resolve a relative URL pathname against a base URL pathname.
	 *
	 * @param {String} relative Pathname of the relative URL.
	 * @param {String} base Pathname of the base URL.
	 * @return {String} Resolved pathname.
	 * @private
	 */
	function resolve(relative, base) {
	  if (relative === '') return base;

	  var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/'))
	    , i = path.length
	    , last = path[i - 1]
	    , unshift = false
	    , up = 0;

	  while (i--) {
	    if (path[i] === '.') {
	      path.splice(i, 1);
	    } else if (path[i] === '..') {
	      path.splice(i, 1);
	      up++;
	    } else if (up) {
	      if (i === 0) unshift = true;
	      path.splice(i, 1);
	      up--;
	    }
	  }

	  if (unshift) path.unshift('');
	  if (last === '.' || last === '..') path.push('');

	  return path.join('/');
	}

	/**
	 * The actual URL instance. Instead of returning an object we've opted-in to
	 * create an actual constructor as it's much more memory efficient and
	 * faster and it pleases my OCD.
	 *
	 * It is worth noting that we should not use `URL` as class name to prevent
	 * clashes with the global URL instance that got introduced in browsers.
	 *
	 * @constructor
	 * @param {String} address URL we want to parse.
	 * @param {Object|String} [location] Location defaults for relative paths.
	 * @param {Boolean|Function} [parser] Parser for the query string.
	 * @private
	 */
	function Url(address, location, parser) {
	  address = trimLeft(address);

	  if (!(this instanceof Url)) {
	    return new Url(address, location, parser);
	  }

	  var relative, extracted, parse, instruction, index, key
	    , instructions = rules.slice()
	    , type = typeof location
	    , url = this
	    , i = 0;

	  //
	  // The following if statements allows this module two have compatibility with
	  // 2 different API:
	  //
	  // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments
	  //    where the boolean indicates that the query string should also be parsed.
	  //
	  // 2. The `URL` interface of the browser which accepts a URL, object as
	  //    arguments. The supplied object will be used as default values / fall-back
	  //    for relative paths.
	  //
	  if ('object' !== type && 'string' !== type) {
	    parser = location;
	    location = null;
	  }

	  if (parser && 'function' !== typeof parser) parser = querystringify_1.parse;

	  location = lolcation(location);

	  //
	  // Extract protocol information before running the instructions.
	  //
	  extracted = extractProtocol(address || '');
	  relative = !extracted.protocol && !extracted.slashes;
	  url.slashes = extracted.slashes || relative && location.slashes;
	  url.protocol = extracted.protocol || location.protocol || '';
	  address = extracted.rest;

	  //
	  // When the authority component is absent the URL starts with a path
	  // component.
	  //
	  if (!extracted.slashes) instructions[3] = [/(.*)/, 'pathname'];

	  for (; i < instructions.length; i++) {
	    instruction = instructions[i];

	    if (typeof instruction === 'function') {
	      address = instruction(address);
	      continue;
	    }

	    parse = instruction[0];
	    key = instruction[1];

	    if (parse !== parse) {
	      url[key] = address;
	    } else if ('string' === typeof parse) {
	      if (~(index = address.indexOf(parse))) {
	        if ('number' === typeof instruction[2]) {
	          url[key] = address.slice(0, index);
	          address = address.slice(index + instruction[2]);
	        } else {
	          url[key] = address.slice(index);
	          address = address.slice(0, index);
	        }
	      }
	    } else if ((index = parse.exec(address))) {
	      url[key] = index[1];
	      address = address.slice(0, index.index);
	    }

	    url[key] = url[key] || (
	      relative && instruction[3] ? location[key] || '' : ''
	    );

	    //
	    // Hostname, host and protocol should be lowercased so they can be used to
	    // create a proper `origin`.
	    //
	    if (instruction[4]) url[key] = url[key].toLowerCase();
	  }

	  //
	  // Also parse the supplied query string in to an object. If we're supplied
	  // with a custom parser as function use that instead of the default build-in
	  // parser.
	  //
	  if (parser) url.query = parser(url.query);

	  //
	  // If the URL is relative, resolve the pathname against the base URL.
	  //
	  if (
	      relative
	    && location.slashes
	    && url.pathname.charAt(0) !== '/'
	    && (url.pathname !== '' || location.pathname !== '')
	  ) {
	    url.pathname = resolve(url.pathname, location.pathname);
	  }

	  //
	  // Default to a / for pathname if none exists. This normalizes the URL
	  // to always have a /
	  //
	  if (url.pathname.charAt(0) !== '/' && url.hostname) {
	    url.pathname = '/' + url.pathname;
	  }

	  //
	  // We should not add port numbers if they are already the default port number
	  // for a given protocol. As the host also contains the port number we're going
	  // override it with the hostname which contains no port number.
	  //
	  if (!requiresPort(url.port, url.protocol)) {
	    url.host = url.hostname;
	    url.port = '';
	  }

	  //
	  // Parse down the `auth` for the username and password.
	  //
	  url.username = url.password = '';
	  if (url.auth) {
	    instruction = url.auth.split(':');
	    url.username = instruction[0] || '';
	    url.password = instruction[1] || '';
	  }

	  url.origin = url.protocol && url.host && url.protocol !== 'file:'
	    ? url.protocol +'//'+ url.host
	    : 'null';

	  //
	  // The href is just the compiled result.
	  //
	  url.href = url.toString();
	}

	/**
	 * This is convenience method for changing properties in the URL instance to
	 * insure that they all propagate correctly.
	 *
	 * @param {String} part          Property we need to adjust.
	 * @param {Mixed} value          The newly assigned value.
	 * @param {Boolean|Function} fn  When setting the query, it will be the function
	 *                               used to parse the query.
	 *                               When setting the protocol, double slash will be
	 *                               removed from the final url if it is true.
	 * @returns {URL} URL instance for chaining.
	 * @public
	 */
	function set(part, value, fn) {
	  var url = this;

	  switch (part) {
	    case 'query':
	      if ('string' === typeof value && value.length) {
	        value = (fn || querystringify_1.parse)(value);
	      }

	      url[part] = value;
	      break;

	    case 'port':
	      url[part] = value;

	      if (!requiresPort(value, url.protocol)) {
	        url.host = url.hostname;
	        url[part] = '';
	      } else if (value) {
	        url.host = url.hostname +':'+ value;
	      }

	      break;

	    case 'hostname':
	      url[part] = value;

	      if (url.port) value += ':'+ url.port;
	      url.host = value;
	      break;

	    case 'host':
	      url[part] = value;

	      if (/:\d+$/.test(value)) {
	        value = value.split(':');
	        url.port = value.pop();
	        url.hostname = value.join(':');
	      } else {
	        url.hostname = value;
	        url.port = '';
	      }

	      break;

	    case 'protocol':
	      url.protocol = value.toLowerCase();
	      url.slashes = !fn;
	      break;

	    case 'pathname':
	    case 'hash':
	      if (value) {
	        var char = part === 'pathname' ? '/' : '#';
	        url[part] = value.charAt(0) !== char ? char + value : value;
	      } else {
	        url[part] = value;
	      }
	      break;

	    default:
	      url[part] = value;
	  }

	  for (var i = 0; i < rules.length; i++) {
	    var ins = rules[i];

	    if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();
	  }

	  url.origin = url.protocol && url.host && url.protocol !== 'file:'
	    ? url.protocol +'//'+ url.host
	    : 'null';

	  url.href = url.toString();

	  return url;
	}

	/**
	 * Transform the properties back in to a valid and full URL string.
	 *
	 * @param {Function} stringify Optional query stringify function.
	 * @returns {String} Compiled version of the URL.
	 * @public
	 */
	function toString$4(stringify) {
	  if (!stringify || 'function' !== typeof stringify) stringify = querystringify_1.stringify;

	  var query
	    , url = this
	    , protocol = url.protocol;

	  if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';

	  var result = protocol + (url.slashes ? '//' : '');

	  if (url.username) {
	    result += url.username;
	    if (url.password) result += ':'+ url.password;
	    result += '@';
	  }

	  result += url.host + url.pathname;

	  query = 'object' === typeof url.query ? stringify(url.query) : url.query;
	  if (query) result += '?' !== query.charAt(0) ? '?'+ query : query;

	  if (url.hash) result += url.hash;

	  return result;
	}

	Url.prototype = { set: set, toString: toString$4 };

	//
	// Expose the URL parser and some additional properties that might be useful for
	// others or testing.
	//
	Url.extractProtocol = extractProtocol;
	Url.location = lolcation;
	Url.trimLeft = trimLeft;
	Url.qs = querystringify_1;

	var urlParse = Url;

	/**
	 * Coalesce function to find the first valid value.
	 * A valid value is one that is not undefined, not null and not NaN (not a number).
	 * If no values are valid, then the last argument is returned.
	 *
	 * ```js
	 * console.log(koalas(undefined, null, NaN, 'a', 'b'));
	 * //=> 'a'
	 *
	 * console.log(koalas(undefined, null, NaN, {a: 'b'}, 'b'));
	 * //=> {a: 'b'}
	 *
	 * console.log(koalas(undefined, null, NaN, ['a', 'b', 'c'], {a: 'b'}, 'b'));
	 * //=> ['a', 'b', 'c']
	 *
	 * console.log(koalas(undefined, NaN, null));
	 * //=> null
	 * ```
	 * @name koalas
	 * @param {Mixed} `arguments` Pass in any amount of arguments.
	 * @return {Mixed} First valid value.
	 * @api public
	 */

	function koalas() {
	  var len = arguments.length;
	  var arg;
	  for (var i = 0; i < len; i++) {
	    arg = arguments[i];
	    if (hasValue(arg)) {
	      return arg;
	    }
	  }
	  return arg;
	}

	/**
	 * Check to see if a value actually has a valid value:
	 *  - not undefined
	 *  - not null
	 *  - not NaN (not a number)
	 *
	 * @param  {*} `val` value to check
	 * @return {Boolean} returns `true` if the `val` has a valid value
	 */

	function hasValue(val) {
	  // eslint-disable-next-line no-self-compare
	  return val != null && val === val;
	}

	/**
	 * Expose koalas
	 */

	var koalas_1 = koalas;

	const DEFAULT_RECORDED_VALUE_MAX_LENGTH = 1200;

	class Config$1 {
	  constructor (service, options) {
	    options = options || {};

	    const enabled = koalas_1(options.enabled, platform$3.env('SIGNALFX_TRACING_ENABLED'), true);
	    const debug = koalas_1(options.debug, platform$3.env('SIGNALFX_TRACING_DEBUG'), false);
	    const logInjection = koalas_1(options.logInjection, platform$3.env('SIGNALFX_LOGS_INJECTION'), false);
	    const env = koalas_1(options.env, platform$3.env('SIGNALFX_ENV'));
	    const url = koalas_1(
	      options.url, platform$3.env('SIGNALFX_ENDPOINT_URL'),
	      platform$3.env('SIGNALFX_INGEST_URL'), 'http://localhost:9080/v1/trace'
	    );
	    const accessToken = koalas_1(options.accessToken, platform$3.env('SIGNALFX_ACCESS_TOKEN'));
	    const protocol = 'http';
	    const hostname = koalas_1(
	      options.hostname,
	      platform$3.env('SIGNALFX_AGENT_HOST'),
	      platform$3.env('SIGNALFX_TRACE_AGENT_HOSTNAME'),
	      'localhost'
	    );
	    const port = koalas_1(options.port, platform$3.env('SIGNALFX_TRACE_AGENT_PORT'), 9080);
	    const zipkin = koalas_1(options.zipkin, true);
	    const path = koalas_1(options.path, '');
	    const headers = koalas_1(options.headers, {});
	    const sampleRate = koalas_1(Math.min(Math.max(options.sampleRate, 0), 1), 1);
	    const flushInterval = koalas_1(parseInt(options.flushInterval, 10), 2000);
	    const plugins = koalas_1(options.plugins, true);
	    const dogstatsd = options.dogstatsd || {};
	    const runtimeMetrics = koalas_1(options.runtimeMetrics, platform$3.env('SIGNALFX_RUNTIME_METRICS_ENABLED'), false);
	    const analytics = koalas_1(
	      options.analytics,
	      platform$3.env('SIGNALFX_TRACE_ANALYTICS_ENABLED'),
	      platform$3.env('SIGNALFX_TRACE_ANALYTICS')
	    );

	    this.enabled = String(enabled) === 'true';
	    this.debug = String(debug) === 'true';
	    this.logInjection = String(logInjection) === 'true';
	    this.env = env;
	    this.url = url ? new urlParse(url) : new urlParse(`${protocol}://${hostname}:${port}${path}`);
	    this.zipkin = zipkin;
	    this.path = path;
	    this.headers = headers;

	    if (accessToken) {
	      this.headers['x-sf-token'] = accessToken;
	    }
	    this.hostname = hostname || this.url.hostname;
	    this.flushInterval = flushInterval;
	    this.sampleRate = sampleRate;
	    this.logger = options.logger;
	    this.plugins = !!plugins;
	    this.service = koalas_1(options.service, platform$3.env('SIGNALFX_SERVICE_NAME'), service, 'unnamed-nodejs-service');
	    this.analytics = String(analytics) === 'true';
	    this.tags = Object.assign({
	      'signalfx.tracing.library': 'nodejs-tracing',
	      'signalfx.tracing.version': version$6
	    }, options.tags);
	    if (process.env.SIGNALFX_SPAN_TAGS) {
	      for (const segment of process.env.SIGNALFX_SPAN_TAGS.split(',')) {
	        const kv = segment.split(':');
	        if (kv.length === 2 && kv[0].trim().length !== 0 && kv[1].trim().length !== 0) {
	          this.tags[kv[0].trim()] = kv[1].trim();
	        }
	      }
	    }

	    this.recordedValueMaxLength = koalas_1(
	      parseInt(options.recordedValueMaxLength, 10),
	      parseInt(platform$3.env('SIGNALFX_RECORDED_VALUE_MAX_LENGTH'), 10),
	      DEFAULT_RECORDED_VALUE_MAX_LENGTH
	    );

	    this.dogstatsd = {
	      port: String(koalas_1(dogstatsd.port, platform$3.env('DD_DOGSTATSD_PORT'), 8125))
	    };
	    this.runtimeMetrics = String(runtimeMetrics) === 'true';
	    this.experimental = {};
	  }
	}

	var config = Config$1;

	var moduleDetailsFromPath = function (file) {
	  var segments = file.split(path__default['default'].sep);
	  var index = segments.lastIndexOf('node_modules');
	  if (index === -1) return
	  if (!segments[index + 1]) return
	  var scoped = segments[index + 1][0] === '@';
	  var name = scoped ? segments[index + 1] + '/' + segments[index + 2] : segments[index + 1];
	  var offset = scoped ? 3 : 2;
	  return {
	    name: name,
	    basedir: segments.slice(0, index + offset).join(path__default['default'].sep),
	    path: segments.slice(index + offset).join(path__default['default'].sep)
	  }
	};

	var name$3 = "require-in-the-middle";
	var version$3 = "2.2.2";
	var description$2 = "Module to hook into the Node.js require function";
	var main$2 = "index.js";
	var dependencies$2 = {
		"module-details-from-path": "^1.0.3",
		resolve: "^1.5.0"
	};
	var devDependencies$2 = {
		"ipp-printer": "^1.0.0",
		patterns: "^1.0.3",
		roundround: "^0.2.0",
		standard: "^11.0.0",
		tape: "^4.9.0"
	};
	var scripts$3 = {
		test: "standard && tape test/test.js"
	};
	var repository$2 = {
		type: "git",
		url: "git+https://github.com/opbeat/require-in-the-middle.git"
	};
	var keywords$1 = [
		"require",
		"hook",
		"shim",
		"shimmer",
		"shimming",
		"patch",
		"monkey",
		"monkeypatch",
		"module",
		"load"
	];
	var author$2 = "Thomas Watson Steen <w@tson.dk> (https://twitter.com/wa7son)";
	var license$2 = "MIT";
	var bugs = {
		url: "https://github.com/opbeat/require-in-the-middle/issues"
	};
	var homepage$2 = "https://github.com/opbeat/require-in-the-middle#readme";
	var coordinates = [
		55.6779395,
		12.5715844
	];
	var require$$0$1 = {
		name: name$3,
		version: version$3,
		description: description$2,
		main: main$2,
		dependencies: dependencies$2,
		devDependencies: devDependencies$2,
		scripts: scripts$3,
		repository: repository$2,
		keywords: keywords$1,
		author: author$2,
		license: license$2,
		bugs: bugs,
		homepage: homepage$2,
		coordinates: coordinates
	};

	var orig = Module__default['default'].prototype.require;

	var requireInTheMiddle = function hook (modules, options, onrequire) {
	  if (typeof modules === 'function') return hook(null, {}, modules)
	  if (typeof options === 'function') return hook(modules, {}, options)

	  if (typeof Module__default['default']._resolveFilename !== 'function') {
	    console.error('Error: Expected Module._resolveFilename to be a function (was: %s) - aborting!', typeof Module__default['default']._resolveFilename);
	    console.error('Please report this error as an issue related to Node.js %s at %s', process.version, require$$0$1.bugs.url);
	    return
	  }

	  options = options || {};

	  hook.cache = {};

	  var patching = {};

	  Module__default['default'].prototype.require = function (request) {
	    var filename = Module__default['default']._resolveFilename(request, this);
	    var core = filename.indexOf(path__default['default'].sep) === -1;
	    var name, basedir;

	    // return known patched modules immediately
	    if (hook.cache.hasOwnProperty(filename)) {
	      return hook.cache[filename]
	    }

	    // Check if this module has a patcher in-progress already.
	    // Otherwise, mark this module as patching in-progress.
	    var patched = patching[filename];
	    if (!patched) {
	      patching[filename] = true;
	    }

	    var exports = orig.apply(this, arguments);

	    // If it's already patched, just return it as-is.
	    if (patched) return exports

	    // The module has already been loaded,
	    // so the patching mark can be cleaned up.
	    delete patching[filename];

	    if (core) {
	      if (modules && modules.indexOf(filename) === -1) return exports // abort if module name isn't on whitelist
	      name = filename;
	    } else {
	      var stat = moduleDetailsFromPath(filename);
	      if (!stat) return exports // abort if filename could not be parsed
	      name = stat.name;
	      basedir = stat.basedir;

	      if (modules && modules.indexOf(name) === -1) return exports // abort if module name isn't on whitelist

	      // figure out if this is the main module file, or a file inside the module
	      try {
	        var res = resolve$1.sync(name, { basedir: basedir });
	      } catch (e) {
	        return exports // abort if module could not be resolved (e.g. no main in package.json and no index.js file)
	      }
	      if (res !== filename) {
	        // this is a module-internal file
	        if (options.internals) {
	          // use the module-relative path to the file, prefixed by original module name
	          name = name + path__default['default'].sep + path__default['default'].relative(basedir, filename);
	        } else return exports // abort if not main module file
	      }
	    }

	    // only call onrequire the first time a module is loaded
	    if (!hook.cache.hasOwnProperty(filename)) {
	      // ensure that the cache entry is assigned a value before calling
	      // onrequire, in case calling onrequire requires the same module.
	      hook.cache[filename] = exports;
	      hook.cache[filename] = onrequire(exports, name, basedir);
	    }

	    return hook.cache[filename]
	  };
	};

	function isFunction$1 (funktion) {
	  return typeof funktion === 'function'
	}

	// Default to complaining loudly when things don't go according to plan.
	var logger = console.error.bind(console);

	// Sets a property on an object, preserving its enumerability.
	// This function assumes that the property is already writable.
	function defineProperty (obj, name, value) {
	  var enumerable = !!obj[name] && obj.propertyIsEnumerable(name);
	  Object.defineProperty(obj, name, {
	    configurable: true,
	    enumerable: enumerable,
	    writable: true,
	    value: value
	  });
	}

	// Keep initialization idempotent.
	function shimmer (options) {
	  if (options && options.logger) {
	    if (!isFunction$1(options.logger)) logger("new logger isn't a function, not replacing");
	    else logger = options.logger;
	  }
	}

	function wrap (nodule, name, wrapper) {
	  if (!nodule || !nodule[name]) {
	    logger('no original function ' + name + ' to wrap');
	    return
	  }

	  if (!wrapper) {
	    logger('no wrapper function');
	    logger((new Error()).stack);
	    return
	  }

	  if (!isFunction$1(nodule[name]) || !isFunction$1(wrapper)) {
	    logger('original object and wrapper must be functions');
	    return
	  }

	  var original = nodule[name];
	  var wrapped = wrapper(original, name);

	  defineProperty(wrapped, '__original', original);
	  defineProperty(wrapped, '__unwrap', function () {
	    if (nodule[name] === wrapped) defineProperty(nodule, name, original);
	  });
	  defineProperty(wrapped, '__wrapped', true);

	  defineProperty(nodule, name, wrapped);
	  return wrapped
	}

	function massWrap (nodules, names, wrapper) {
	  if (!nodules) {
	    logger('must provide one or more modules to patch');
	    logger((new Error()).stack);
	    return
	  } else if (!Array.isArray(nodules)) {
	    nodules = [nodules];
	  }

	  if (!(names && Array.isArray(names))) {
	    logger('must provide one or more functions to wrap on modules');
	    return
	  }

	  nodules.forEach(function (nodule) {
	    names.forEach(function (name) {
	      wrap(nodule, name, wrapper);
	    });
	  });
	}

	function unwrap (nodule, name) {
	  if (!nodule || !nodule[name]) {
	    logger('no function to unwrap.');
	    logger((new Error()).stack);
	    return
	  }

	  if (!nodule[name].__unwrap) {
	    logger('no original to unwrap to -- has ' + name + ' already been unwrapped?');
	  } else {
	    return nodule[name].__unwrap()
	  }
	}

	function massUnwrap (nodules, names) {
	  if (!nodules) {
	    logger('must provide one or more modules to patch');
	    logger((new Error()).stack);
	    return
	  } else if (!Array.isArray(nodules)) {
	    nodules = [nodules];
	  }

	  if (!(names && Array.isArray(names))) {
	    logger('must provide one or more functions to unwrap on modules');
	    return
	  }

	  nodules.forEach(function (nodule) {
	    names.forEach(function (name) {
	      unwrap(nodule, name);
	    });
	  });
	}

	shimmer.wrap = wrap;
	shimmer.massWrap = massWrap;
	shimmer.unwrap = unwrap;
	shimmer.massUnwrap = massUnwrap;

	var shimmer_1 = shimmer;

	/**
	 * lodash (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */

	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/** Used as references for various `Number` constants. */
	var INFINITY$1 = 1 / 0;

	/** `Object#toString` result references. */
	var funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]';

	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	 */
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

	/** Used to detect host constructors (Safari). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/** Detect free variable `global` from Node.js. */
	var freeGlobal$1 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

	/** Detect free variable `self`. */
	var freeSelf$1 = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root$1 = freeGlobal$1 || freeSelf$1 || Function('return this')();

	/**
	 * A specialized version of `_.includes` for arrays without support for
	 * specifying an index to search from.
	 *
	 * @private
	 * @param {Array} [array] The array to inspect.
	 * @param {*} target The value to search for.
	 * @returns {boolean} Returns `true` if `target` is found, else `false`.
	 */
	function arrayIncludes(array, value) {
	  var length = array ? array.length : 0;
	  return !!length && baseIndexOf(array, value, 0) > -1;
	}

	/**
	 * This function is like `arrayIncludes` except that it accepts a comparator.
	 *
	 * @private
	 * @param {Array} [array] The array to inspect.
	 * @param {*} target The value to search for.
	 * @param {Function} comparator The comparator invoked per element.
	 * @returns {boolean} Returns `true` if `target` is found, else `false`.
	 */
	function arrayIncludesWith(array, value, comparator) {
	  var index = -1,
	      length = array ? array.length : 0;

	  while (++index < length) {
	    if (comparator(value, array[index])) {
	      return true;
	    }
	  }
	  return false;
	}

	/**
	 * The base implementation of `_.findIndex` and `_.findLastIndex` without
	 * support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {Function} predicate The function invoked per iteration.
	 * @param {number} fromIndex The index to search from.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function baseFindIndex(array, predicate, fromIndex, fromRight) {
	  var length = array.length,
	      index = fromIndex + (fromRight ? 1 : -1);

	  while ((fromRight ? index-- : ++index < length)) {
	    if (predicate(array[index], index, array)) {
	      return index;
	    }
	  }
	  return -1;
	}

	/**
	 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} value The value to search for.
	 * @param {number} fromIndex The index to search from.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function baseIndexOf(array, value, fromIndex) {
	  if (value !== value) {
	    return baseFindIndex(array, baseIsNaN, fromIndex);
	  }
	  var index = fromIndex - 1,
	      length = array.length;

	  while (++index < length) {
	    if (array[index] === value) {
	      return index;
	    }
	  }
	  return -1;
	}

	/**
	 * The base implementation of `_.isNaN` without support for number objects.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	 */
	function baseIsNaN(value) {
	  return value !== value;
	}

	/**
	 * Checks if a cache value for `key` exists.
	 *
	 * @private
	 * @param {Object} cache The cache to query.
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function cacheHas(cache, key) {
	  return cache.has(key);
	}

	/**
	 * Gets the value at `key` of `object`.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {string} key The key of the property to get.
	 * @returns {*} Returns the property value.
	 */
	function getValue(object, key) {
	  return object == null ? undefined : object[key];
	}

	/**
	 * Checks if `value` is a host object in IE < 9.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
	 */
	function isHostObject(value) {
	  // Many host objects are `Object` objects that can coerce to strings
	  // despite having improperly defined `toString` methods.
	  var result = false;
	  if (value != null && typeof value.toString != 'function') {
	    try {
	      result = !!(value + '');
	    } catch (e) {}
	  }
	  return result;
	}

	/**
	 * Converts `set` to an array of its values.
	 *
	 * @private
	 * @param {Object} set The set to convert.
	 * @returns {Array} Returns the values.
	 */
	function setToArray(set) {
	  var index = -1,
	      result = Array(set.size);

	  set.forEach(function(value) {
	    result[++index] = value;
	  });
	  return result;
	}

	/** Used for built-in method references. */
	var arrayProto = Array.prototype,
	    funcProto = Function.prototype,
	    objectProto$1 = Object.prototype;

	/** Used to detect overreaching core-js shims. */
	var coreJsData = root$1['__core-js_shared__'];

	/** Used to detect methods masquerading as native. */
	var maskSrcKey = (function() {
	  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	  return uid ? ('Symbol(src)_1.' + uid) : '';
	}());

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto$1.hasOwnProperty;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString$1 = objectProto$1.toString;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/** Built-in value references. */
	var splice = arrayProto.splice;

	/* Built-in method references that are verified to be native. */
	var Map$1 = getNative(root$1, 'Map'),
	    Set$1 = getNative(root$1, 'Set'),
	    nativeCreate = getNative(Object, 'create');

	/**
	 * Creates a hash object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Hash(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	/**
	 * Removes all key-value entries from the hash.
	 *
	 * @private
	 * @name clear
	 * @memberOf Hash
	 */
	function hashClear() {
	  this.__data__ = nativeCreate ? nativeCreate(null) : {};
	}

	/**
	 * Removes `key` and its value from the hash.
	 *
	 * @private
	 * @name delete
	 * @memberOf Hash
	 * @param {Object} hash The hash to modify.
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function hashDelete(key) {
	  return this.has(key) && delete this.__data__[key];
	}

	/**
	 * Gets the hash value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Hash
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function hashGet(key) {
	  var data = this.__data__;
	  if (nativeCreate) {
	    var result = data[key];
	    return result === HASH_UNDEFINED ? undefined : result;
	  }
	  return hasOwnProperty.call(data, key) ? data[key] : undefined;
	}

	/**
	 * Checks if a hash value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Hash
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function hashHas(key) {
	  var data = this.__data__;
	  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
	}

	/**
	 * Sets the hash `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Hash
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the hash instance.
	 */
	function hashSet(key, value) {
	  var data = this.__data__;
	  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
	  return this;
	}

	// Add methods to `Hash`.
	Hash.prototype.clear = hashClear;
	Hash.prototype['delete'] = hashDelete;
	Hash.prototype.get = hashGet;
	Hash.prototype.has = hashHas;
	Hash.prototype.set = hashSet;

	/**
	 * Creates an list cache object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function ListCache(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	/**
	 * Removes all key-value entries from the list cache.
	 *
	 * @private
	 * @name clear
	 * @memberOf ListCache
	 */
	function listCacheClear() {
	  this.__data__ = [];
	}

	/**
	 * Removes `key` and its value from the list cache.
	 *
	 * @private
	 * @name delete
	 * @memberOf ListCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function listCacheDelete(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  if (index < 0) {
	    return false;
	  }
	  var lastIndex = data.length - 1;
	  if (index == lastIndex) {
	    data.pop();
	  } else {
	    splice.call(data, index, 1);
	  }
	  return true;
	}

	/**
	 * Gets the list cache value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf ListCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function listCacheGet(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  return index < 0 ? undefined : data[index][1];
	}

	/**
	 * Checks if a list cache value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf ListCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function listCacheHas(key) {
	  return assocIndexOf(this.__data__, key) > -1;
	}

	/**
	 * Sets the list cache `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf ListCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the list cache instance.
	 */
	function listCacheSet(key, value) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  if (index < 0) {
	    data.push([key, value]);
	  } else {
	    data[index][1] = value;
	  }
	  return this;
	}

	// Add methods to `ListCache`.
	ListCache.prototype.clear = listCacheClear;
	ListCache.prototype['delete'] = listCacheDelete;
	ListCache.prototype.get = listCacheGet;
	ListCache.prototype.has = listCacheHas;
	ListCache.prototype.set = listCacheSet;

	/**
	 * Creates a map cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function MapCache(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	/**
	 * Removes all key-value entries from the map.
	 *
	 * @private
	 * @name clear
	 * @memberOf MapCache
	 */
	function mapCacheClear() {
	  this.__data__ = {
	    'hash': new Hash,
	    'map': new (Map$1 || ListCache),
	    'string': new Hash
	  };
	}

	/**
	 * Removes `key` and its value from the map.
	 *
	 * @private
	 * @name delete
	 * @memberOf MapCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function mapCacheDelete(key) {
	  return getMapData(this, key)['delete'](key);
	}

	/**
	 * Gets the map value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf MapCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function mapCacheGet(key) {
	  return getMapData(this, key).get(key);
	}

	/**
	 * Checks if a map value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf MapCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function mapCacheHas(key) {
	  return getMapData(this, key).has(key);
	}

	/**
	 * Sets the map `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf MapCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the map cache instance.
	 */
	function mapCacheSet(key, value) {
	  getMapData(this, key).set(key, value);
	  return this;
	}

	// Add methods to `MapCache`.
	MapCache.prototype.clear = mapCacheClear;
	MapCache.prototype['delete'] = mapCacheDelete;
	MapCache.prototype.get = mapCacheGet;
	MapCache.prototype.has = mapCacheHas;
	MapCache.prototype.set = mapCacheSet;

	/**
	 *
	 * Creates an array cache object to store unique values.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [values] The values to cache.
	 */
	function SetCache(values) {
	  var index = -1,
	      length = values ? values.length : 0;

	  this.__data__ = new MapCache;
	  while (++index < length) {
	    this.add(values[index]);
	  }
	}

	/**
	 * Adds `value` to the array cache.
	 *
	 * @private
	 * @name add
	 * @memberOf SetCache
	 * @alias push
	 * @param {*} value The value to cache.
	 * @returns {Object} Returns the cache instance.
	 */
	function setCacheAdd(value) {
	  this.__data__.set(value, HASH_UNDEFINED);
	  return this;
	}

	/**
	 * Checks if `value` is in the array cache.
	 *
	 * @private
	 * @name has
	 * @memberOf SetCache
	 * @param {*} value The value to search for.
	 * @returns {number} Returns `true` if `value` is found, else `false`.
	 */
	function setCacheHas(value) {
	  return this.__data__.has(value);
	}

	// Add methods to `SetCache`.
	SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
	SetCache.prototype.has = setCacheHas;

	/**
	 * Gets the index at which the `key` is found in `array` of key-value pairs.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} key The key to search for.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function assocIndexOf(array, key) {
	  var length = array.length;
	  while (length--) {
	    if (eq(array[length][0], key)) {
	      return length;
	    }
	  }
	  return -1;
	}

	/**
	 * The base implementation of `_.isNative` without bad shim checks.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function,
	 *  else `false`.
	 */
	function baseIsNative(value) {
	  if (!isObject$2(value) || isMasked(value)) {
	    return false;
	  }
	  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
	  return pattern.test(toSource(value));
	}

	/**
	 * The base implementation of `_.uniqBy` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {Function} [iteratee] The iteratee invoked per element.
	 * @param {Function} [comparator] The comparator invoked per element.
	 * @returns {Array} Returns the new duplicate free array.
	 */
	function baseUniq(array, iteratee, comparator) {
	  var index = -1,
	      includes = arrayIncludes,
	      length = array.length,
	      isCommon = true,
	      result = [],
	      seen = result;

	  if (comparator) {
	    isCommon = false;
	    includes = arrayIncludesWith;
	  }
	  else if (length >= LARGE_ARRAY_SIZE) {
	    var set = iteratee ? null : createSet(array);
	    if (set) {
	      return setToArray(set);
	    }
	    isCommon = false;
	    includes = cacheHas;
	    seen = new SetCache;
	  }
	  else {
	    seen = iteratee ? [] : result;
	  }
	  outer:
	  while (++index < length) {
	    var value = array[index],
	        computed = iteratee ? iteratee(value) : value;

	    value = (comparator || value !== 0) ? value : 0;
	    if (isCommon && computed === computed) {
	      var seenIndex = seen.length;
	      while (seenIndex--) {
	        if (seen[seenIndex] === computed) {
	          continue outer;
	        }
	      }
	      if (iteratee) {
	        seen.push(computed);
	      }
	      result.push(value);
	    }
	    else if (!includes(seen, computed, comparator)) {
	      if (seen !== result) {
	        seen.push(computed);
	      }
	      result.push(value);
	    }
	  }
	  return result;
	}

	/**
	 * Creates a set object of `values`.
	 *
	 * @private
	 * @param {Array} values The values to add to the set.
	 * @returns {Object} Returns the new set.
	 */
	var createSet = !(Set$1 && (1 / setToArray(new Set$1([,-0]))[1]) == INFINITY$1) ? noop$2 : function(values) {
	  return new Set$1(values);
	};

	/**
	 * Gets the data for `map`.
	 *
	 * @private
	 * @param {Object} map The map to query.
	 * @param {string} key The reference key.
	 * @returns {*} Returns the map data.
	 */
	function getMapData(map, key) {
	  var data = map.__data__;
	  return isKeyable(key)
	    ? data[typeof key == 'string' ? 'string' : 'hash']
	    : data.map;
	}

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = getValue(object, key);
	  return baseIsNative(value) ? value : undefined;
	}

	/**
	 * Checks if `value` is suitable for use as unique object key.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	 */
	function isKeyable(value) {
	  var type = typeof value;
	  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
	    ? (value !== '__proto__')
	    : (value === null);
	}

	/**
	 * Checks if `func` has its source masked.
	 *
	 * @private
	 * @param {Function} func The function to check.
	 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	 */
	function isMasked(func) {
	  return !!maskSrcKey && (maskSrcKey in func);
	}

	/**
	 * Converts `func` to its source code.
	 *
	 * @private
	 * @param {Function} func The function to process.
	 * @returns {string} Returns the source code.
	 */
	function toSource(func) {
	  if (func != null) {
	    try {
	      return funcToString.call(func);
	    } catch (e) {}
	    try {
	      return (func + '');
	    } catch (e) {}
	  }
	  return '';
	}

	/**
	 * Creates a duplicate-free version of an array, using
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * for equality comparisons, in which only the first occurrence of each
	 * element is kept.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Array
	 * @param {Array} array The array to inspect.
	 * @returns {Array} Returns the new duplicate free array.
	 * @example
	 *
	 * _.uniq([2, 1, 2]);
	 * // => [2, 1]
	 */
	function uniq(array) {
	  return (array && array.length)
	    ? baseUniq(array)
	    : [];
	}

	/**
	 * Performs a
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * comparison between two values to determine if they are equivalent.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.eq(object, object);
	 * // => true
	 *
	 * _.eq(object, other);
	 * // => false
	 *
	 * _.eq('a', 'a');
	 * // => true
	 *
	 * _.eq('a', Object('a'));
	 * // => false
	 *
	 * _.eq(NaN, NaN);
	 * // => true
	 */
	function eq(value, other) {
	  return value === other || (value !== value && other !== other);
	}

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 8-9 which returns 'object' for typed array and other constructors.
	  var tag = isObject$2(value) ? objectToString$1.call(value) : '';
	  return tag == funcTag || tag == genTag;
	}

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject$2(value) {
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	/**
	 * This method returns `undefined`.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.3.0
	 * @category Util
	 * @example
	 *
	 * _.times(2, _.noop);
	 * // => [undefined, undefined]
	 */
	function noop$2() {
	  // No operation performed.
	}

	var lodash_uniq = uniq;

	/**
	 * Expose `pathtoRegexp`.
	 */
	var pathToRegexp = pathtoRegexp;

	/**
	 * Match matching groups in a regular expression.
	 */
	var MATCHING_GROUP_REGEXP = /\((?!\?)/g;

	/**
	 * Normalize the given path string,
	 * returning a regular expression.
	 *
	 * An empty array should be passed,
	 * which will contain the placeholder
	 * key names. For example "/user/:id" will
	 * then contain ["id"].
	 *
	 * @param  {String|RegExp|Array} path
	 * @param  {Array} keys
	 * @param  {Object} options
	 * @return {RegExp}
	 * @api private
	 */

	function pathtoRegexp(path, keys, options) {
	  options = options || {};
	  keys = keys || [];
	  var strict = options.strict;
	  var end = options.end !== false;
	  var flags = options.sensitive ? '' : 'i';
	  var extraOffset = 0;
	  var keysOffset = keys.length;
	  var i = 0;
	  var name = 0;
	  var m;

	  if (path instanceof RegExp) {
	    while (m = MATCHING_GROUP_REGEXP.exec(path.source)) {
	      keys.push({
	        name: name++,
	        optional: false,
	        offset: m.index
	      });
	    }

	    return path;
	  }

	  if (Array.isArray(path)) {
	    // Map array parts into regexps and return their source. We also pass
	    // the same keys and options instance into every generation to get
	    // consistent matching groups before we join the sources together.
	    path = path.map(function (value) {
	      return pathtoRegexp(value, keys, options).source;
	    });

	    return new RegExp('(?:' + path.join('|') + ')', flags);
	  }

	  path = ('^' + path + (strict ? '' : path[path.length - 1] === '/' ? '?' : '/?'))
	    .replace(/\/\(/g, '/(?:')
	    .replace(/([\/\.])/g, '\\$1')
	    .replace(/(\\\/)?(\\\.)?:(\w+)(\(.*?\))?(\*)?(\?)?/g, function (match, slash, format, key, capture, star, optional, offset) {
	      slash = slash || '';
	      format = format || '';
	      capture = capture || '([^\\/' + format + ']+?)';
	      optional = optional || '';

	      keys.push({
	        name: key,
	        optional: !!optional,
	        offset: offset + extraOffset
	      });

	      var result = ''
	        + (optional ? '' : slash)
	        + '(?:'
	        + format + (optional ? slash : '') + capture
	        + (star ? '((?:[\\/' + format + '].+?)?)' : '')
	        + ')'
	        + optional;

	      extraOffset += result.length - match.length;

	      return result;
	    })
	    .replace(/\*/g, function (star, index) {
	      var len = keys.length;

	      while (len-- > keysOffset && keys[len].offset > index) {
	        keys[len].offset += 3; // Replacement length minus asterisk length.
	      }

	      return '(.*)';
	    });

	  // This is a workaround for handling unnamed matching groups.
	  while (m = MATCHING_GROUP_REGEXP.exec(path)) {
	    var escapeCount = 0;
	    var index = m.index;

	    while (path.charAt(--index) === '\\') {
	      escapeCount++;
	    }

	    // It's possible to escape the bracket.
	    if (escapeCount % 2 === 1) {
	      continue;
	    }

	    if (keysOffset + i === keys.length || keys[keysOffset + i].offset > m.index) {
	      keys.splice(keysOffset + i, 0, {
	        name: name++, // Unnamed matching groups must be consistently linear.
	        optional: false,
	        offset: m.index
	      });
	    }

	    i++;
	  }

	  // If the path is non-ending, match until the end or a slash.
	  path += (end ? '$' : (path[path.length - 1] === '/' ? '' : '(?=\\/|$)'));

	  return new RegExp(path, flags);
	}

	/*!
	 * XRegExp 4.4.1
	 * <xregexp.com>
	 * Steven Levithan (c) 2007-present MIT License
	 */

	/**
	 * XRegExp provides augmented, extensible regular expressions. You get additional regex syntax and
	 * flags, beyond what browsers support natively. XRegExp is also a regex utility belt with tools to
	 * make your client-side grepping simpler and more powerful, while freeing you from related
	 * cross-browser inconsistencies.
	 */

	// ==--------------------------==
	// Private stuff
	// ==--------------------------==

	// Property name used for extended regex instance data
	const REGEX_DATA = 'xregexp';
	// Optional features that can be installed and uninstalled
	const features = {
	    astral: false,
	    namespacing: false
	};
	// Native methods to use and restore ('native' is an ES3 reserved keyword)
	const nativ = {
	    exec: RegExp.prototype.exec,
	    test: RegExp.prototype.test,
	    match: String.prototype.match,
	    replace: String.prototype.replace,
	    split: String.prototype.split
	};
	// Storage for fixed/extended native methods
	const fixed = {};
	// Storage for regexes cached by `XRegExp.cache`
	let regexCache = {};
	// Storage for pattern details cached by the `XRegExp` constructor
	let patternCache = {};
	// Storage for regex syntax tokens added internally or by `XRegExp.addToken`
	const tokens = [];
	// Token scopes
	const defaultScope = 'default';
	const classScope = 'class';
	// Regexes that match native regex syntax, including octals
	const nativeTokens = {
	    // Any native multicharacter token in default scope, or any single character
	    'default': /\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9]\d*|x[\dA-Fa-f]{2}|u(?:[\dA-Fa-f]{4}|{[\dA-Fa-f]+})|c[A-Za-z]|[\s\S])|\(\?(?:[:=!]|<[=!])|[?*+]\?|{\d+(?:,\d*)?}\??|[\s\S]/,
	    // Any native multicharacter token in character class scope, or any single character
	    'class': /\\(?:[0-3][0-7]{0,2}|[4-7][0-7]?|x[\dA-Fa-f]{2}|u(?:[\dA-Fa-f]{4}|{[\dA-Fa-f]+})|c[A-Za-z]|[\s\S])|[\s\S]/
	};
	// Any backreference or dollar-prefixed character in replacement strings
	const replacementToken = /\$(?:{([\w$]+)}|<([\w$]+)>|(\d\d?|[\s\S]))/g;
	// Check for correct `exec` handling of nonparticipating capturing groups
	const correctExecNpcg = nativ.exec.call(/()??/, '')[1] === undefined;
	// Check for ES6 `flags` prop support
	const hasFlagsProp = /x/.flags !== undefined;
	// Shortcut to `Object.prototype.toString`
	const {toString: toString$3} = {};

	function hasNativeFlag(flag) {
	    // Can't check based on the presence of properties/getters since browsers might support such
	    // properties even when they don't support the corresponding flag in regex construction (tested
	    // in Chrome 48, where `'unicode' in /x/` is true but trying to construct a regex with flag `u`
	    // throws an error)
	    let isSupported = true;
	    try {
	        // Can't use regex literals for testing even in a `try` because regex literals with
	        // unsupported flags cause a compilation error in IE
	        new RegExp('', flag);

	        // Work around a broken/incomplete IE11 polyfill for sticky introduced in core-js 3.6.0
	        if (flag === 'y') {
	            // Using function to avoid babel transform to regex literal
	            const gy = (() => 'gy')();
	            const incompleteY = '.a'.replace(new RegExp('a', gy), '.') === '..';
	            if (incompleteY) {
	                isSupported = false;
	            }
	        }
	    } catch (exception) {
	        isSupported = false;
	    }
	    return isSupported;
	}
	// Check for ES6 `u` flag support
	const hasNativeU = hasNativeFlag('u');
	// Check for ES6 `y` flag support
	const hasNativeY = hasNativeFlag('y');
	// Tracker for known flags, including addon flags
	const registeredFlags = {
	    g: true,
	    i: true,
	    m: true,
	    u: hasNativeU,
	    y: hasNativeY
	};

	/**
	 * Attaches extended data and `XRegExp.prototype` properties to a regex object.
	 *
	 * @private
	 * @param {RegExp} regex Regex to augment.
	 * @param {Array} captureNames Array with capture names, or `null`.
	 * @param {String} xSource XRegExp pattern used to generate `regex`, or `null` if N/A.
	 * @param {String} xFlags XRegExp flags used to generate `regex`, or `null` if N/A.
	 * @param {Boolean} [isInternalOnly=false] Whether the regex will be used only for internal
	 *   operations, and never exposed to users. For internal-only regexes, we can improve perf by
	 *   skipping some operations like attaching `XRegExp.prototype` properties.
	 * @returns {!RegExp} Augmented regex.
	 */
	function augment(regex, captureNames, xSource, xFlags, isInternalOnly) {
	    regex[REGEX_DATA] = {
	        captureNames
	    };

	    if (isInternalOnly) {
	        return regex;
	    }

	    // Can't auto-inherit these since the XRegExp constructor returns a nonprimitive value
	    if (regex.__proto__) {
	        regex.__proto__ = XRegExp.prototype;
	    } else {
	        for (const p in XRegExp.prototype) {
	            // An `XRegExp.prototype.hasOwnProperty(p)` check wouldn't be worth it here, since this
	            // is performance sensitive, and enumerable `Object.prototype` or `RegExp.prototype`
	            // extensions exist on `regex.prototype` anyway
	            regex[p] = XRegExp.prototype[p];
	        }
	    }

	    regex[REGEX_DATA].source = xSource;
	    // Emulate the ES6 `flags` prop by ensuring flags are in alphabetical order
	    regex[REGEX_DATA].flags = xFlags ? xFlags.split('').sort().join('') : xFlags;

	    return regex;
	}

	/**
	 * Removes any duplicate characters from the provided string.
	 *
	 * @private
	 * @param {String} str String to remove duplicate characters from.
	 * @returns {string} String with any duplicate characters removed.
	 */
	function clipDuplicates(str) {
	    return nativ.replace.call(str, /([\s\S])(?=[\s\S]*\1)/g, '');
	}

	/**
	 * Copies a regex object while preserving extended data and augmenting with `XRegExp.prototype`
	 * properties. The copy has a fresh `lastIndex` property (set to zero). Allows adding and removing
	 * flags g and y while copying the regex.
	 *
	 * @private
	 * @param {RegExp} regex Regex to copy.
	 * @param {Object} [options] Options object with optional properties:
	 *   - `addG` {Boolean} Add flag g while copying the regex.
	 *   - `addY` {Boolean} Add flag y while copying the regex.
	 *   - `removeG` {Boolean} Remove flag g while copying the regex.
	 *   - `removeY` {Boolean} Remove flag y while copying the regex.
	 *   - `isInternalOnly` {Boolean} Whether the copied regex will be used only for internal
	 *     operations, and never exposed to users. For internal-only regexes, we can improve perf by
	 *     skipping some operations like attaching `XRegExp.prototype` properties.
	 *   - `source` {String} Overrides `<regex>.source`, for special cases.
	 * @returns {RegExp} Copy of the provided regex, possibly with modified flags.
	 */
	function copyRegex(regex, options) {
	    if (!XRegExp.isRegExp(regex)) {
	        throw new TypeError('Type RegExp expected');
	    }

	    const xData = regex[REGEX_DATA] || {};
	    let flags = getNativeFlags(regex);
	    let flagsToAdd = '';
	    let flagsToRemove = '';
	    let xregexpSource = null;
	    let xregexpFlags = null;

	    options = options || {};

	    if (options.removeG) {flagsToRemove += 'g';}
	    if (options.removeY) {flagsToRemove += 'y';}
	    if (flagsToRemove) {
	        flags = nativ.replace.call(flags, new RegExp(`[${flagsToRemove}]+`, 'g'), '');
	    }

	    if (options.addG) {flagsToAdd += 'g';}
	    if (options.addY) {flagsToAdd += 'y';}
	    if (flagsToAdd) {
	        flags = clipDuplicates(flags + flagsToAdd);
	    }

	    if (!options.isInternalOnly) {
	        if (xData.source !== undefined) {
	            xregexpSource = xData.source;
	        }
	        // null or undefined; don't want to add to `flags` if the previous value was null, since
	        // that indicates we're not tracking original precompilation flags
	        if (xData.flags != null) {
	            // Flags are only added for non-internal regexes by `XRegExp.globalize`. Flags are never
	            // removed for non-internal regexes, so don't need to handle it
	            xregexpFlags = flagsToAdd ? clipDuplicates(xData.flags + flagsToAdd) : xData.flags;
	        }
	    }

	    // Augment with `XRegExp.prototype` properties, but use the native `RegExp` constructor to avoid
	    // searching for special tokens. That would be wrong for regexes constructed by `RegExp`, and
	    // unnecessary for regexes constructed by `XRegExp` because the regex has already undergone the
	    // translation to native regex syntax
	    regex = augment(
	        new RegExp(options.source || regex.source, flags),
	        hasNamedCapture(regex) ? xData.captureNames.slice(0) : null,
	        xregexpSource,
	        xregexpFlags,
	        options.isInternalOnly
	    );

	    return regex;
	}

	/**
	 * Converts hexadecimal to decimal.
	 *
	 * @private
	 * @param {String} hex
	 * @returns {number}
	 */
	function dec(hex) {
	    return parseInt(hex, 16);
	}

	/**
	 * Returns a pattern that can be used in a native RegExp in place of an ignorable token such as an
	 * inline comment or whitespace with flag x. This is used directly as a token handler function
	 * passed to `XRegExp.addToken`.
	 *
	 * @private
	 * @param {String} match Match arg of `XRegExp.addToken` handler
	 * @param {String} scope Scope arg of `XRegExp.addToken` handler
	 * @param {String} flags Flags arg of `XRegExp.addToken` handler
	 * @returns {string} Either '' or '(?:)', depending on which is needed in the context of the match.
	 */
	function getContextualTokenSeparator(match, scope, flags) {
	    if (
	        // No need to separate tokens if at the beginning or end of a group
	        match.input[match.index - 1] === '(' ||
	        match.input[match.index + match[0].length] === ')' ||

	        // No need to separate tokens if before or after a `|`
	        match.input[match.index - 1] === '|' ||
	        match.input[match.index + match[0].length] === '|' ||

	        // No need to separate tokens if at the beginning or end of the pattern
	        match.index < 1 ||
	        match.index + match[0].length >= match.input.length ||

	        // No need to separate tokens if at the beginning of a noncapturing group or lookahead.
	        // The way this is written relies on:
	        // - The search regex matching only 3-char strings.
	        // - Although `substr` gives chars from the end of the string if given a negative index,
	        //   the resulting substring will be too short to match. Ex: `'abcd'.substr(-1, 3) === 'd'`
	        nativ.test.call(/^\(\?[:=!]/, match.input.substr(match.index - 3, 3)) ||

	        // Avoid separating tokens when the following token is a quantifier
	        isQuantifierNext(match.input, match.index + match[0].length, flags)
	    ) {
	        return '';
	    }
	    // Keep tokens separated. This avoids e.g. inadvertedly changing `\1 1` or `\1(?#)1` to `\11`.
	    // This also ensures all tokens remain as discrete atoms, e.g. it avoids converting the syntax
	    // error `(? :` into `(?:`.
	    return '(?:)';
	}

	/**
	 * Returns native `RegExp` flags used by a regex object.
	 *
	 * @private
	 * @param {RegExp} regex Regex to check.
	 * @returns {string} Native flags in use.
	 */
	function getNativeFlags(regex) {
	    return hasFlagsProp ?
	        regex.flags :
	        // Explicitly using `RegExp.prototype.toString` (rather than e.g. `String` or concatenation
	        // with an empty string) allows this to continue working predictably when
	        // `XRegExp.proptotype.toString` is overridden
	        nativ.exec.call(/\/([a-z]*)$/i, RegExp.prototype.toString.call(regex))[1];
	}

	/**
	 * Determines whether a regex has extended instance data used to track capture names.
	 *
	 * @private
	 * @param {RegExp} regex Regex to check.
	 * @returns {boolean} Whether the regex uses named capture.
	 */
	function hasNamedCapture(regex) {
	    return !!(regex[REGEX_DATA] && regex[REGEX_DATA].captureNames);
	}

	/**
	 * Converts decimal to hexadecimal.
	 *
	 * @private
	 * @param {Number|String} dec
	 * @returns {string}
	 */
	function hex(dec) {
	    return parseInt(dec, 10).toString(16);
	}

	/**
	 * Checks whether the next nonignorable token after the specified position is a quantifier.
	 *
	 * @private
	 * @param {String} pattern Pattern to search within.
	 * @param {Number} pos Index in `pattern` to search at.
	 * @param {String} flags Flags used by the pattern.
	 * @returns {Boolean} Whether the next nonignorable token is a quantifier.
	 */
	function isQuantifierNext(pattern, pos, flags) {
	    const inlineCommentPattern = '\\(\\?#[^)]*\\)';
	    const lineCommentPattern = '#[^#\\n]*';
	    const quantifierPattern = '[?*+]|{\\d+(?:,\\d*)?}';
	    return nativ.test.call(
	        flags.includes('x') ?
	            // Ignore any leading whitespace, line comments, and inline comments
	            new RegExp(`^(?:\\s|${lineCommentPattern}|${inlineCommentPattern})*(?:${quantifierPattern})`) :
	            // Ignore any leading inline comments
	            new RegExp(`^(?:${inlineCommentPattern})*(?:${quantifierPattern})`),
	        pattern.slice(pos)
	    );
	}

	/**
	 * Determines whether a value is of the specified type, by resolving its internal [[Class]].
	 *
	 * @private
	 * @param {*} value Object to check.
	 * @param {String} type Type to check for, in TitleCase.
	 * @returns {boolean} Whether the object matches the type.
	 */
	function isType(value, type) {
	    return toString$3.call(value) === `[object ${type}]`;
	}

	/**
	 * Adds leading zeros if shorter than four characters. Used for fixed-length hexadecimal values.
	 *
	 * @private
	 * @param {String} str
	 * @returns {string}
	 */
	function pad4(str) {
	    while (str.length < 4) {
	        str = `0${str}`;
	    }
	    return str;
	}

	/**
	 * Checks for flag-related errors, and strips/applies flags in a leading mode modifier. Offloads
	 * the flag preparation logic from the `XRegExp` constructor.
	 *
	 * @private
	 * @param {String} pattern Regex pattern, possibly with a leading mode modifier.
	 * @param {String} flags Any combination of flags.
	 * @returns {!Object} Object with properties `pattern` and `flags`.
	 */
	function prepareFlags(pattern, flags) {
	    // Recent browsers throw on duplicate flags, so copy this behavior for nonnative flags
	    if (clipDuplicates(flags) !== flags) {
	        throw new SyntaxError(`Invalid duplicate regex flag ${flags}`);
	    }

	    // Strip and apply a leading mode modifier with any combination of flags except g or y
	    pattern = nativ.replace.call(pattern, /^\(\?([\w$]+)\)/, ($0, $1) => {
	        if (nativ.test.call(/[gy]/, $1)) {
	            throw new SyntaxError(`Cannot use flag g or y in mode modifier ${$0}`);
	        }
	        // Allow duplicate flags within the mode modifier
	        flags = clipDuplicates(flags + $1);
	        return '';
	    });

	    // Throw on unknown native or nonnative flags
	    for (const flag of flags) {
	        if (!registeredFlags[flag]) {
	            throw new SyntaxError(`Unknown regex flag ${flag}`);
	        }
	    }

	    return {
	        pattern,
	        flags
	    };
	}

	/**
	 * Prepares an options object from the given value.
	 *
	 * @private
	 * @param {String|Object} value Value to convert to an options object.
	 * @returns {Object} Options object.
	 */
	function prepareOptions(value) {
	    const options = {};

	    if (isType(value, 'String')) {
	        XRegExp.forEach(value, /[^\s,]+/, (match) => {
	            options[match] = true;
	        });

	        return options;
	    }

	    return value;
	}

	/**
	 * Registers a flag so it doesn't throw an 'unknown flag' error.
	 *
	 * @private
	 * @param {String} flag Single-character flag to register.
	 */
	function registerFlag(flag) {
	    if (!/^[\w$]$/.test(flag)) {
	        throw new Error('Flag must be a single character A-Za-z0-9_$');
	    }

	    registeredFlags[flag] = true;
	}

	/**
	 * Runs built-in and custom regex syntax tokens in reverse insertion order at the specified
	 * position, until a match is found.
	 *
	 * @private
	 * @param {String} pattern Original pattern from which an XRegExp object is being built.
	 * @param {String} flags Flags being used to construct the regex.
	 * @param {Number} pos Position to search for tokens within `pattern`.
	 * @param {Number} scope Regex scope to apply: 'default' or 'class'.
	 * @param {Object} context Context object to use for token handler functions.
	 * @returns {Object} Object with properties `matchLength`, `output`, and `reparse`; or `null`.
	 */
	function runTokens(pattern, flags, pos, scope, context) {
	    let i = tokens.length;
	    const leadChar = pattern[pos];
	    let result = null;
	    let match;
	    let t;

	    // Run in reverse insertion order
	    while (i--) {
	        t = tokens[i];
	        if (
	            (t.leadChar && t.leadChar !== leadChar) ||
	            (t.scope !== scope && t.scope !== 'all') ||
	            (t.flag && !flags.includes(t.flag))
	        ) {
	            continue;
	        }

	        match = XRegExp.exec(pattern, t.regex, pos, 'sticky');
	        if (match) {
	            result = {
	                matchLength: match[0].length,
	                output: t.handler.call(context, match, scope, flags),
	                reparse: t.reparse
	            };
	            // Finished with token tests
	            break;
	        }
	    }

	    return result;
	}

	/**
	 * Enables or disables implicit astral mode opt-in. When enabled, flag A is automatically added to
	 * all new regexes created by XRegExp. This causes an error to be thrown when creating regexes if
	 * the Unicode Base addon is not available, since flag A is registered by that addon.
	 *
	 * @private
	 * @param {Boolean} on `true` to enable; `false` to disable.
	 */
	function setAstral(on) {
	    features.astral = on;
	}

	/**
	 * Adds named capture groups to the `groups` property of match arrays. See here for details:
	 * https://github.com/tc39/proposal-regexp-named-groups
	 *
	 * @private
	 * @param {Boolean} on `true` to enable; `false` to disable.
	 */
	function setNamespacing(on) {
	    features.namespacing = on;
	}

	/**
	 * Returns the object, or throws an error if it is `null` or `undefined`. This is used to follow
	 * the ES5 abstract operation `ToObject`.
	 *
	 * @private
	 * @param {*} value Object to check and return.
	 * @returns {*} The provided object.
	 */
	function toObject(value) {
	    // null or undefined
	    if (value == null) {
	        throw new TypeError('Cannot convert null or undefined to object');
	    }

	    return value;
	}

	// ==--------------------------==
	// Constructor
	// ==--------------------------==

	/**
	 * Creates an extended regular expression object for matching text with a pattern. Differs from a
	 * native regular expression in that additional syntax and flags are supported. The returned object
	 * is in fact a native `RegExp` and works with all native methods.
	 *
	 * @class XRegExp
	 * @constructor
	 * @param {String|RegExp} pattern Regex pattern string, or an existing regex object to copy.
	 * @param {String} [flags] Any combination of flags.
	 *   Native flags:
	 *     - `g` - global
	 *     - `i` - ignore case
	 *     - `m` - multiline anchors
	 *     - `u` - unicode (ES6)
	 *     - `y` - sticky (Firefox 3+, ES6)
	 *   Additional XRegExp flags:
	 *     - `n` - explicit capture
	 *     - `s` - dot matches all (aka singleline)
	 *     - `x` - free-spacing and line comments (aka extended)
	 *     - `A` - astral (requires the Unicode Base addon)
	 *   Flags cannot be provided when constructing one `RegExp` from another.
	 * @returns {RegExp} Extended regular expression object.
	 * @example
	 *
	 * // With named capture and flag x
	 * XRegExp(`(?<year>  [0-9]{4} ) -?  # year
	 *          (?<month> [0-9]{2} ) -?  # month
	 *          (?<day>   [0-9]{2} )     # day`, 'x');
	 *
	 * // Providing a regex object copies it. Native regexes are recompiled using native (not XRegExp)
	 * // syntax. Copies maintain extended data, are augmented with `XRegExp.prototype` properties, and
	 * // have fresh `lastIndex` properties (set to zero).
	 * XRegExp(/regex/);
	 */
	function XRegExp(pattern, flags) {
	    if (XRegExp.isRegExp(pattern)) {
	        if (flags !== undefined) {
	            throw new TypeError('Cannot supply flags when copying a RegExp');
	        }
	        return copyRegex(pattern);
	    }

	    // Copy the argument behavior of `RegExp`
	    pattern = pattern === undefined ? '' : String(pattern);
	    flags = flags === undefined ? '' : String(flags);

	    if (XRegExp.isInstalled('astral') && !flags.includes('A')) {
	        // This causes an error to be thrown if the Unicode Base addon is not available
	        flags += 'A';
	    }

	    if (!patternCache[pattern]) {
	        patternCache[pattern] = {};
	    }

	    if (!patternCache[pattern][flags]) {
	        const context = {
	            hasNamedCapture: false,
	            captureNames: []
	        };
	        let scope = defaultScope;
	        let output = '';
	        let pos = 0;
	        let result;

	        // Check for flag-related errors, and strip/apply flags in a leading mode modifier
	        const applied = prepareFlags(pattern, flags);
	        let appliedPattern = applied.pattern;
	        const appliedFlags = applied.flags;

	        // Use XRegExp's tokens to translate the pattern to a native regex pattern.
	        // `appliedPattern.length` may change on each iteration if tokens use `reparse`
	        while (pos < appliedPattern.length) {
	            do {
	                // Check for custom tokens at the current position
	                result = runTokens(appliedPattern, appliedFlags, pos, scope, context);
	                // If the matched token used the `reparse` option, splice its output into the
	                // pattern before running tokens again at the same position
	                if (result && result.reparse) {
	                    appliedPattern = appliedPattern.slice(0, pos) +
	                        result.output +
	                        appliedPattern.slice(pos + result.matchLength);
	                }
	            } while (result && result.reparse);

	            if (result) {
	                output += result.output;
	                pos += (result.matchLength || 1);
	            } else {
	                // Get the native token at the current position
	                const [token] = XRegExp.exec(appliedPattern, nativeTokens[scope], pos, 'sticky');
	                output += token;
	                pos += token.length;
	                if (token === '[' && scope === defaultScope) {
	                    scope = classScope;
	                } else if (token === ']' && scope === classScope) {
	                    scope = defaultScope;
	                }
	            }
	        }

	        patternCache[pattern][flags] = {
	            // Use basic cleanup to collapse repeated empty groups like `(?:)(?:)` to `(?:)`. Empty
	            // groups are sometimes inserted during regex transpilation in order to keep tokens
	            // separated. However, more than one empty group in a row is never needed.
	            pattern: nativ.replace.call(output, /(?:\(\?:\))+/g, '(?:)'),
	            // Strip all but native flags
	            flags: nativ.replace.call(appliedFlags, /[^gimuy]+/g, ''),
	            // `context.captureNames` has an item for each capturing group, even if unnamed
	            captures: context.hasNamedCapture ? context.captureNames : null
	        };
	    }

	    const generated = patternCache[pattern][flags];
	    return augment(
	        new RegExp(generated.pattern, generated.flags),
	        generated.captures,
	        pattern,
	        flags
	    );
	}

	// Add `RegExp.prototype` to the prototype chain
	XRegExp.prototype = new RegExp();

	// ==--------------------------==
	// Public properties
	// ==--------------------------==

	/**
	 * The XRegExp version number as a string containing three dot-separated parts. For example,
	 * '2.0.0-beta-3'.
	 *
	 * @static
	 * @memberOf XRegExp
	 * @type String
	 */
	XRegExp.version = '4.4.1';

	// ==--------------------------==
	// Public methods
	// ==--------------------------==

	// Intentionally undocumented; used in tests and addons
	XRegExp._clipDuplicates = clipDuplicates;
	XRegExp._hasNativeFlag = hasNativeFlag;
	XRegExp._dec = dec;
	XRegExp._hex = hex;
	XRegExp._pad4 = pad4;

	/**
	 * Extends XRegExp syntax and allows custom flags. This is used internally and can be used to
	 * create XRegExp addons. If more than one token can match the same string, the last added wins.
	 *
	 * @memberOf XRegExp
	 * @param {RegExp} regex Regex object that matches the new token.
	 * @param {Function} handler Function that returns a new pattern string (using native regex syntax)
	 *   to replace the matched token within all future XRegExp regexes. Has access to persistent
	 *   properties of the regex being built, through `this`. Invoked with three arguments:
	 *   - The match array, with named backreference properties.
	 *   - The regex scope where the match was found: 'default' or 'class'.
	 *   - The flags used by the regex, including any flags in a leading mode modifier.
	 *   The handler function becomes part of the XRegExp construction process, so be careful not to
	 *   construct XRegExps within the function or you will trigger infinite recursion.
	 * @param {Object} [options] Options object with optional properties:
	 *   - `scope` {String} Scope where the token applies: 'default', 'class', or 'all'.
	 *   - `flag` {String} Single-character flag that triggers the token. This also registers the
	 *     flag, which prevents XRegExp from throwing an 'unknown flag' error when the flag is used.
	 *   - `optionalFlags` {String} Any custom flags checked for within the token `handler` that are
	 *     not required to trigger the token. This registers the flags, to prevent XRegExp from
	 *     throwing an 'unknown flag' error when any of the flags are used.
	 *   - `reparse` {Boolean} Whether the `handler` function's output should not be treated as
	 *     final, and instead be reparseable by other tokens (including the current token). Allows
	 *     token chaining or deferring.
	 *   - `leadChar` {String} Single character that occurs at the beginning of any successful match
	 *     of the token (not always applicable). This doesn't change the behavior of the token unless
	 *     you provide an erroneous value. However, providing it can increase the token's performance
	 *     since the token can be skipped at any positions where this character doesn't appear.
	 * @example
	 *
	 * // Basic usage: Add \a for the ALERT control code
	 * XRegExp.addToken(
	 *   /\\a/,
	 *   () => '\\x07',
	 *   {scope: 'all'}
	 * );
	 * XRegExp('\\a[\\a-\\n]+').test('\x07\n\x07'); // -> true
	 *
	 * // Add the U (ungreedy) flag from PCRE and RE2, which reverses greedy and lazy quantifiers.
	 * // Since `scope` is not specified, it uses 'default' (i.e., transformations apply outside of
	 * // character classes only)
	 * XRegExp.addToken(
	 *   /([?*+]|{\d+(?:,\d*)?})(\??)/,
	 *   (match) => `${match[1]}${match[2] ? '' : '?'}`,
	 *   {flag: 'U'}
	 * );
	 * XRegExp('a+', 'U').exec('aaa')[0]; // -> 'a'
	 * XRegExp('a+?', 'U').exec('aaa')[0]; // -> 'aaa'
	 */
	XRegExp.addToken = (regex, handler, options) => {
	    options = options || {};
	    let {optionalFlags} = options;

	    if (options.flag) {
	        registerFlag(options.flag);
	    }

	    if (optionalFlags) {
	        optionalFlags = nativ.split.call(optionalFlags, '');
	        for (const flag of optionalFlags) {
	            registerFlag(flag);
	        }
	    }

	    // Add to the private list of syntax tokens
	    tokens.push({
	        regex: copyRegex(regex, {
	            addG: true,
	            addY: hasNativeY,
	            isInternalOnly: true
	        }),
	        handler,
	        scope: options.scope || defaultScope,
	        flag: options.flag,
	        reparse: options.reparse,
	        leadChar: options.leadChar
	    });

	    // Reset the pattern cache used by the `XRegExp` constructor, since the same pattern and flags
	    // might now produce different results
	    XRegExp.cache.flush('patterns');
	};

	/**
	 * Caches and returns the result of calling `XRegExp(pattern, flags)`. On any subsequent call with
	 * the same pattern and flag combination, the cached copy of the regex is returned.
	 *
	 * @memberOf XRegExp
	 * @param {String} pattern Regex pattern string.
	 * @param {String} [flags] Any combination of XRegExp flags.
	 * @returns {RegExp} Cached XRegExp object.
	 * @example
	 *
	 * while (match = XRegExp.cache('.', 'gs').exec(str)) {
	 *   // The regex is compiled once only
	 * }
	 */
	XRegExp.cache = (pattern, flags) => {
	    if (!regexCache[pattern]) {
	        regexCache[pattern] = {};
	    }
	    return regexCache[pattern][flags] || (
	        regexCache[pattern][flags] = XRegExp(pattern, flags)
	    );
	};

	// Intentionally undocumented; used in tests
	XRegExp.cache.flush = (cacheName) => {
	    if (cacheName === 'patterns') {
	        // Flush the pattern cache used by the `XRegExp` constructor
	        patternCache = {};
	    } else {
	        // Flush the regex cache populated by `XRegExp.cache`
	        regexCache = {};
	    }
	};

	/**
	 * Escapes any regular expression metacharacters, for use when matching literal strings. The result
	 * can safely be used at any point within a regex that uses any flags.
	 *
	 * @memberOf XRegExp
	 * @param {String} str String to escape.
	 * @returns {string} String with regex metacharacters escaped.
	 * @example
	 *
	 * XRegExp.escape('Escaped? <.>');
	 * // -> 'Escaped\?\ <\.>'
	 */
	XRegExp.escape = (str) => nativ.replace.call(toObject(str), /[-\[\]{}()*+?.,\\^$|#\s]/g, '\\$&');

	/**
	 * Executes a regex search in a specified string. Returns a match array or `null`. If the provided
	 * regex uses named capture, named backreference properties are included on the match array.
	 * Optional `pos` and `sticky` arguments specify the search start position, and whether the match
	 * must start at the specified position only. The `lastIndex` property of the provided regex is not
	 * used, but is updated for compatibility. Also fixes browser bugs compared to the native
	 * `RegExp.prototype.exec` and can be used reliably cross-browser.
	 *
	 * @memberOf XRegExp
	 * @param {String} str String to search.
	 * @param {RegExp} regex Regex to search with.
	 * @param {Number} [pos=0] Zero-based index at which to start the search.
	 * @param {Boolean|String} [sticky=false] Whether the match must start at the specified position
	 *   only. The string `'sticky'` is accepted as an alternative to `true`.
	 * @returns {Array} Match array with named backreference properties, or `null`.
	 * @example
	 *
	 * // Basic use, with named backreference
	 * let match = XRegExp.exec('U+2620', XRegExp('U\\+(?<hex>[0-9A-F]{4})'));
	 * match.hex; // -> '2620'
	 *
	 * // With pos and sticky, in a loop
	 * let pos = 2, result = [], match;
	 * while (match = XRegExp.exec('<1><2><3><4>5<6>', /<(\d)>/, pos, 'sticky')) {
	 *   result.push(match[1]);
	 *   pos = match.index + match[0].length;
	 * }
	 * // result -> ['2', '3', '4']
	 */
	XRegExp.exec = (str, regex, pos, sticky) => {
	    let cacheKey = 'g';
	    let addY = false;
	    let fakeY = false;
	    let match;

	    addY = hasNativeY && !!(sticky || (regex.sticky && sticky !== false));
	    if (addY) {
	        cacheKey += 'y';
	    } else if (sticky) {
	        // Simulate sticky matching by appending an empty capture to the original regex. The
	        // resulting regex will succeed no matter what at the current index (set with `lastIndex`),
	        // and will not search the rest of the subject string. We'll know that the original regex
	        // has failed if that last capture is `''` rather than `undefined` (i.e., if that last
	        // capture participated in the match).
	        fakeY = true;
	        cacheKey += 'FakeY';
	    }

	    regex[REGEX_DATA] = regex[REGEX_DATA] || {};

	    // Shares cached copies with `XRegExp.match`/`replace`
	    const r2 = regex[REGEX_DATA][cacheKey] || (
	        regex[REGEX_DATA][cacheKey] = copyRegex(regex, {
	            addG: true,
	            addY,
	            source: fakeY ? `${regex.source}|()` : undefined,
	            removeY: sticky === false,
	            isInternalOnly: true
	        })
	    );

	    pos = pos || 0;
	    r2.lastIndex = pos;

	    // Fixed `exec` required for `lastIndex` fix, named backreferences, etc.
	    match = fixed.exec.call(r2, str);

	    // Get rid of the capture added by the pseudo-sticky matcher if needed. An empty string means
	    // the original regexp failed (see above).
	    if (fakeY && match && match.pop() === '') {
	        match = null;
	    }

	    if (regex.global) {
	        regex.lastIndex = match ? r2.lastIndex : 0;
	    }

	    return match;
	};

	/**
	 * Executes a provided function once per regex match. Searches always start at the beginning of the
	 * string and continue until the end, regardless of the state of the regex's `global` property and
	 * initial `lastIndex`.
	 *
	 * @memberOf XRegExp
	 * @param {String} str String to search.
	 * @param {RegExp} regex Regex to search with.
	 * @param {Function} callback Function to execute for each match. Invoked with four arguments:
	 *   - The match array, with named backreference properties.
	 *   - The zero-based match index.
	 *   - The string being traversed.
	 *   - The regex object being used to traverse the string.
	 * @example
	 *
	 * // Extracts every other digit from a string
	 * const evens = [];
	 * XRegExp.forEach('1a2345', /\d/, (match, i) => {
	 *   if (i % 2) evens.push(+match[0]);
	 * });
	 * // evens -> [2, 4]
	 */
	XRegExp.forEach = (str, regex, callback) => {
	    let pos = 0;
	    let i = -1;
	    let match;

	    while ((match = XRegExp.exec(str, regex, pos))) {
	        // Because `regex` is provided to `callback`, the function could use the deprecated/
	        // nonstandard `RegExp.prototype.compile` to mutate the regex. However, since `XRegExp.exec`
	        // doesn't use `lastIndex` to set the search position, this can't lead to an infinite loop,
	        // at least. Actually, because of the way `XRegExp.exec` caches globalized versions of
	        // regexes, mutating the regex will not have any effect on the iteration or matched strings,
	        // which is a nice side effect that brings extra safety.
	        callback(match, ++i, str, regex);

	        pos = match.index + (match[0].length || 1);
	    }
	};

	/**
	 * Copies a regex object and adds flag `g`. The copy maintains extended data, is augmented with
	 * `XRegExp.prototype` properties, and has a fresh `lastIndex` property (set to zero). Native
	 * regexes are not recompiled using XRegExp syntax.
	 *
	 * @memberOf XRegExp
	 * @param {RegExp} regex Regex to globalize.
	 * @returns {RegExp} Copy of the provided regex with flag `g` added.
	 * @example
	 *
	 * const globalCopy = XRegExp.globalize(/regex/);
	 * globalCopy.global; // -> true
	 */
	XRegExp.globalize = (regex) => copyRegex(regex, {addG: true});

	/**
	 * Installs optional features according to the specified options. Can be undone using
	 * `XRegExp.uninstall`.
	 *
	 * @memberOf XRegExp
	 * @param {Object|String} options Options object or string.
	 * @example
	 *
	 * // With an options object
	 * XRegExp.install({
	 *   // Enables support for astral code points in Unicode addons (implicitly sets flag A)
	 *   astral: true,
	 *
	 *   // Adds named capture groups to the `groups` property of matches
	 *   namespacing: true
	 * });
	 *
	 * // With an options string
	 * XRegExp.install('astral namespacing');
	 */
	XRegExp.install = (options) => {
	    options = prepareOptions(options);

	    if (!features.astral && options.astral) {
	        setAstral(true);
	    }

	    if (!features.namespacing && options.namespacing) {
	        setNamespacing(true);
	    }
	};

	/**
	 * Checks whether an individual optional feature is installed.
	 *
	 * @memberOf XRegExp
	 * @param {String} feature Name of the feature to check. One of:
	 *   - `astral`
	 *   - `namespacing`
	 * @returns {boolean} Whether the feature is installed.
	 * @example
	 *
	 * XRegExp.isInstalled('astral');
	 */
	XRegExp.isInstalled = (feature) => !!(features[feature]);

	/**
	 * Returns `true` if an object is a regex; `false` if it isn't. This works correctly for regexes
	 * created in another frame, when `instanceof` and `constructor` checks would fail.
	 *
	 * @memberOf XRegExp
	 * @param {*} value Object to check.
	 * @returns {boolean} Whether the object is a `RegExp` object.
	 * @example
	 *
	 * XRegExp.isRegExp('string'); // -> false
	 * XRegExp.isRegExp(/regex/i); // -> true
	 * XRegExp.isRegExp(RegExp('^', 'm')); // -> true
	 * XRegExp.isRegExp(XRegExp('(?s).')); // -> true
	 */
	XRegExp.isRegExp = (value) => toString$3.call(value) === '[object RegExp]'; // isType(value, 'RegExp');

	/**
	 * Returns the first matched string, or in global mode, an array containing all matched strings.
	 * This is essentially a more convenient re-implementation of `String.prototype.match` that gives
	 * the result types you actually want (string instead of `exec`-style array in match-first mode,
	 * and an empty array instead of `null` when no matches are found in match-all mode). It also lets
	 * you override flag g and ignore `lastIndex`, and fixes browser bugs.
	 *
	 * @memberOf XRegExp
	 * @param {String} str String to search.
	 * @param {RegExp} regex Regex to search with.
	 * @param {String} [scope='one'] Use 'one' to return the first match as a string. Use 'all' to
	 *   return an array of all matched strings. If not explicitly specified and `regex` uses flag g,
	 *   `scope` is 'all'.
	 * @returns {String|Array} In match-first mode: First match as a string, or `null`. In match-all
	 *   mode: Array of all matched strings, or an empty array.
	 * @example
	 *
	 * // Match first
	 * XRegExp.match('abc', /\w/); // -> 'a'
	 * XRegExp.match('abc', /\w/g, 'one'); // -> 'a'
	 * XRegExp.match('abc', /x/g, 'one'); // -> null
	 *
	 * // Match all
	 * XRegExp.match('abc', /\w/g); // -> ['a', 'b', 'c']
	 * XRegExp.match('abc', /\w/, 'all'); // -> ['a', 'b', 'c']
	 * XRegExp.match('abc', /x/, 'all'); // -> []
	 */
	XRegExp.match = (str, regex, scope) => {
	    const global = (regex.global && scope !== 'one') || scope === 'all';
	    const cacheKey = ((global ? 'g' : '') + (regex.sticky ? 'y' : '')) || 'noGY';

	    regex[REGEX_DATA] = regex[REGEX_DATA] || {};

	    // Shares cached copies with `XRegExp.exec`/`replace`
	    const r2 = regex[REGEX_DATA][cacheKey] || (
	        regex[REGEX_DATA][cacheKey] = copyRegex(regex, {
	            addG: !!global,
	            removeG: scope === 'one',
	            isInternalOnly: true
	        })
	    );

	    const result = nativ.match.call(toObject(str), r2);

	    if (regex.global) {
	        regex.lastIndex = (
	            (scope === 'one' && result) ?
	                // Can't use `r2.lastIndex` since `r2` is nonglobal in this case
	                (result.index + result[0].length) : 0
	        );
	    }

	    return global ? (result || []) : (result && result[0]);
	};

	/**
	 * Retrieves the matches from searching a string using a chain of regexes that successively search
	 * within previous matches. The provided `chain` array can contain regexes and or objects with
	 * `regex` and `backref` properties. When a backreference is specified, the named or numbered
	 * backreference is passed forward to the next regex or returned.
	 *
	 * @memberOf XRegExp
	 * @param {String} str String to search.
	 * @param {Array} chain Regexes that each search for matches within preceding results.
	 * @returns {Array} Matches by the last regex in the chain, or an empty array.
	 * @example
	 *
	 * // Basic usage; matches numbers within <b> tags
	 * XRegExp.matchChain('1 <b>2</b> 3 <b>4 a 56</b>', [
	 *   XRegExp('(?is)<b>.*?</b>'),
	 *   /\d+/
	 * ]);
	 * // -> ['2', '4', '56']
	 *
	 * // Passing forward and returning specific backreferences
	 * html = '<a href="http://xregexp.com/api/">XRegExp</a>\
	 *         <a href="http://www.google.com/">Google</a>';
	 * XRegExp.matchChain(html, [
	 *   {regex: /<a href="([^"]+)">/i, backref: 1},
	 *   {regex: XRegExp('(?i)^https?://(?<domain>[^/?#]+)'), backref: 'domain'}
	 * ]);
	 * // -> ['xregexp.com', 'www.google.com']
	 */
	XRegExp.matchChain = (str, chain) => (function recurseChain(values, level) {
	    const item = chain[level].regex ? chain[level] : {regex: chain[level]};
	    const matches = [];

	    function addMatch(match) {
	        if (item.backref) {
	            const ERR_UNDEFINED_GROUP = `Backreference to undefined group: ${item.backref}`;
	            const isNamedBackref = isNaN(item.backref);

	            if (isNamedBackref && XRegExp.isInstalled('namespacing')) {
	                // `groups` has `null` as prototype, so using `in` instead of `hasOwnProperty`
	                if (!(item.backref in match.groups)) {
	                    throw new ReferenceError(ERR_UNDEFINED_GROUP);
	                }
	            } else if (!match.hasOwnProperty(item.backref)) {
	                throw new ReferenceError(ERR_UNDEFINED_GROUP);
	            }

	            const backrefValue = isNamedBackref && XRegExp.isInstalled('namespacing') ?
	                match.groups[item.backref] :
	                match[item.backref];

	            matches.push(backrefValue || '');
	        } else {
	            matches.push(match[0]);
	        }
	    }

	    for (const value of values) {
	        XRegExp.forEach(value, item.regex, addMatch);
	    }

	    return ((level === chain.length - 1) || !matches.length) ?
	        matches :
	        recurseChain(matches, level + 1);
	}([str], 0));

	/**
	 * Returns a new string with one or all matches of a pattern replaced. The pattern can be a string
	 * or regex, and the replacement can be a string or a function to be called for each match. To
	 * perform a global search and replace, use the optional `scope` argument or include flag g if using
	 * a regex. Replacement strings can use `${n}` or `$<n>` for named and numbered backreferences.
	 * Replacement functions can use named backreferences via `arguments[0].name`. Also fixes browser
	 * bugs compared to the native `String.prototype.replace` and can be used reliably cross-browser.
	 *
	 * @memberOf XRegExp
	 * @param {String} str String to search.
	 * @param {RegExp|String} search Search pattern to be replaced.
	 * @param {String|Function} replacement Replacement string or a function invoked to create it.
	 *   Replacement strings can include special replacement syntax:
	 *     - $$ - Inserts a literal $ character.
	 *     - $&, $0 - Inserts the matched substring.
	 *     - $` - Inserts the string that precedes the matched substring (left context).
	 *     - $' - Inserts the string that follows the matched substring (right context).
	 *     - $n, $nn - Where n/nn are digits referencing an existent capturing group, inserts
	 *       backreference n/nn.
	 *     - ${n}, $<n> - Where n is a name or any number of digits that reference an existent capturing
	 *       group, inserts backreference n.
	 *   Replacement functions are invoked with three or more arguments:
	 *     - The matched substring (corresponds to $& above). Named backreferences are accessible as
	 *       properties of this first argument.
	 *     - 0..n arguments, one for each backreference (corresponding to $1, $2, etc. above).
	 *     - The zero-based index of the match within the total search string.
	 *     - The total string being searched.
	 * @param {String} [scope='one'] Use 'one' to replace the first match only, or 'all'. If not
	 *   explicitly specified and using a regex with flag g, `scope` is 'all'.
	 * @returns {String} New string with one or all matches replaced.
	 * @example
	 *
	 * // Regex search, using named backreferences in replacement string
	 * const name = XRegExp('(?<first>\\w+) (?<last>\\w+)');
	 * XRegExp.replace('John Smith', name, '$<last>, $<first>');
	 * // -> 'Smith, John'
	 *
	 * // Regex search, using named backreferences in replacement function
	 * XRegExp.replace('John Smith', name, (match) => `${match.last}, ${match.first}`);
	 * // -> 'Smith, John'
	 *
	 * // String search, with replace-all
	 * XRegExp.replace('RegExp builds RegExps', 'RegExp', 'XRegExp', 'all');
	 * // -> 'XRegExp builds XRegExps'
	 */
	XRegExp.replace = (str, search, replacement, scope) => {
	    const isRegex = XRegExp.isRegExp(search);
	    const global = (search.global && scope !== 'one') || scope === 'all';
	    const cacheKey = ((global ? 'g' : '') + (search.sticky ? 'y' : '')) || 'noGY';
	    let s2 = search;

	    if (isRegex) {
	        search[REGEX_DATA] = search[REGEX_DATA] || {};

	        // Shares cached copies with `XRegExp.exec`/`match`. Since a copy is used, `search`'s
	        // `lastIndex` isn't updated *during* replacement iterations
	        s2 = search[REGEX_DATA][cacheKey] || (
	            search[REGEX_DATA][cacheKey] = copyRegex(search, {
	                addG: !!global,
	                removeG: scope === 'one',
	                isInternalOnly: true
	            })
	        );
	    } else if (global) {
	        s2 = new RegExp(XRegExp.escape(String(search)), 'g');
	    }

	    // Fixed `replace` required for named backreferences, etc.
	    const result = fixed.replace.call(toObject(str), s2, replacement);

	    if (isRegex && search.global) {
	        // Fixes IE, Safari bug (last tested IE 9, Safari 5.1)
	        search.lastIndex = 0;
	    }

	    return result;
	};

	/**
	 * Performs batch processing of string replacements. Used like `XRegExp.replace`, but accepts an
	 * array of replacement details. Later replacements operate on the output of earlier replacements.
	 * Replacement details are accepted as an array with a regex or string to search for, the
	 * replacement string or function, and an optional scope of 'one' or 'all'. Uses the XRegExp
	 * replacement text syntax, which supports named backreference properties via `${name}` or
	 * `$<name>`.
	 *
	 * @memberOf XRegExp
	 * @param {String} str String to search.
	 * @param {Array} replacements Array of replacement detail arrays.
	 * @returns {String} New string with all replacements.
	 * @example
	 *
	 * str = XRegExp.replaceEach(str, [
	 *   [XRegExp('(?<name>a)'), 'z${name}'],
	 *   [/b/gi, 'y'],
	 *   [/c/g, 'x', 'one'], // scope 'one' overrides /g
	 *   [/d/, 'w', 'all'],  // scope 'all' overrides lack of /g
	 *   ['e', 'v', 'all'],  // scope 'all' allows replace-all for strings
	 *   [/f/g, ($0) => $0.toUpperCase()]
	 * ]);
	 */
	XRegExp.replaceEach = (str, replacements) => {
	    for (const r of replacements) {
	        str = XRegExp.replace(str, r[0], r[1], r[2]);
	    }

	    return str;
	};

	/**
	 * Splits a string into an array of strings using a regex or string separator. Matches of the
	 * separator are not included in the result array. However, if `separator` is a regex that contains
	 * capturing groups, backreferences are spliced into the result each time `separator` is matched.
	 * Fixes browser bugs compared to the native `String.prototype.split` and can be used reliably
	 * cross-browser.
	 *
	 * @memberOf XRegExp
	 * @param {String} str String to split.
	 * @param {RegExp|String} separator Regex or string to use for separating the string.
	 * @param {Number} [limit] Maximum number of items to include in the result array.
	 * @returns {Array} Array of substrings.
	 * @example
	 *
	 * // Basic use
	 * XRegExp.split('a b c', ' ');
	 * // -> ['a', 'b', 'c']
	 *
	 * // With limit
	 * XRegExp.split('a b c', ' ', 2);
	 * // -> ['a', 'b']
	 *
	 * // Backreferences in result array
	 * XRegExp.split('..word1..', /([a-z]+)(\d+)/i);
	 * // -> ['..', 'word', '1', '..']
	 */
	XRegExp.split = (str, separator, limit) => fixed.split.call(toObject(str), separator, limit);

	/**
	 * Executes a regex search in a specified string. Returns `true` or `false`. Optional `pos` and
	 * `sticky` arguments specify the search start position, and whether the match must start at the
	 * specified position only. The `lastIndex` property of the provided regex is not used, but is
	 * updated for compatibility. Also fixes browser bugs compared to the native
	 * `RegExp.prototype.test` and can be used reliably cross-browser.
	 *
	 * @memberOf XRegExp
	 * @param {String} str String to search.
	 * @param {RegExp} regex Regex to search with.
	 * @param {Number} [pos=0] Zero-based index at which to start the search.
	 * @param {Boolean|String} [sticky=false] Whether the match must start at the specified position
	 *   only. The string `'sticky'` is accepted as an alternative to `true`.
	 * @returns {boolean} Whether the regex matched the provided value.
	 * @example
	 *
	 * // Basic use
	 * XRegExp.test('abc', /c/); // -> true
	 *
	 * // With pos and sticky
	 * XRegExp.test('abc', /c/, 0, 'sticky'); // -> false
	 * XRegExp.test('abc', /c/, 2, 'sticky'); // -> true
	 */
	// Do this the easy way :-)
	XRegExp.test = (str, regex, pos, sticky) => !!XRegExp.exec(str, regex, pos, sticky);

	/**
	 * Uninstalls optional features according to the specified options. All optional features start out
	 * uninstalled, so this is used to undo the actions of `XRegExp.install`.
	 *
	 * @memberOf XRegExp
	 * @param {Object|String} options Options object or string.
	 * @example
	 *
	 * // With an options object
	 * XRegExp.uninstall({
	 *   // Disables support for astral code points in Unicode addons
	 *   astral: true,
	 *
	 *   // Don't add named capture groups to the `groups` property of matches
	 *   namespacing: true
	 * });
	 *
	 * // With an options string
	 * XRegExp.uninstall('astral namespacing');
	 */
	XRegExp.uninstall = (options) => {
	    options = prepareOptions(options);

	    if (features.astral && options.astral) {
	        setAstral(false);
	    }

	    if (features.namespacing && options.namespacing) {
	        setNamespacing(false);
	    }
	};

	/**
	 * Returns an XRegExp object that is the union of the given patterns. Patterns can be provided as
	 * regex objects or strings. Metacharacters are escaped in patterns provided as strings.
	 * Backreferences in provided regex objects are automatically renumbered to work correctly within
	 * the larger combined pattern. Native flags used by provided regexes are ignored in favor of the
	 * `flags` argument.
	 *
	 * @memberOf XRegExp
	 * @param {Array} patterns Regexes and strings to combine.
	 * @param {String} [flags] Any combination of XRegExp flags.
	 * @param {Object} [options] Options object with optional properties:
	 *   - `conjunction` {String} Type of conjunction to use: 'or' (default) or 'none'.
	 * @returns {RegExp} Union of the provided regexes and strings.
	 * @example
	 *
	 * XRegExp.union(['a+b*c', /(dogs)\1/, /(cats)\1/], 'i');
	 * // -> /a\+b\*c|(dogs)\1|(cats)\2/i
	 *
	 * XRegExp.union([/man/, /bear/, /pig/], 'i', {conjunction: 'none'});
	 * // -> /manbearpig/i
	 */
	XRegExp.union = (patterns, flags, options) => {
	    options = options || {};
	    const conjunction = options.conjunction || 'or';
	    let numCaptures = 0;
	    let numPriorCaptures;
	    let captureNames;

	    function rewrite(match, paren, backref) {
	        const name = captureNames[numCaptures - numPriorCaptures];

	        // Capturing group
	        if (paren) {
	            ++numCaptures;
	            // If the current capture has a name, preserve the name
	            if (name) {
	                return `(?<${name}>`;
	            }
	        // Backreference
	        } else if (backref) {
	            // Rewrite the backreference
	            return `\\${+backref + numPriorCaptures}`;
	        }

	        return match;
	    }

	    if (!(isType(patterns, 'Array') && patterns.length)) {
	        throw new TypeError('Must provide a nonempty array of patterns to merge');
	    }

	    const parts = /(\()(?!\?)|\\([1-9]\d*)|\\[\s\S]|\[(?:[^\\\]]|\\[\s\S])*\]/g;
	    const output = [];
	    for (const pattern of patterns) {
	        if (XRegExp.isRegExp(pattern)) {
	            numPriorCaptures = numCaptures;
	            captureNames = (pattern[REGEX_DATA] && pattern[REGEX_DATA].captureNames) || [];

	            // Rewrite backreferences. Passing to XRegExp dies on octals and ensures patterns are
	            // independently valid; helps keep this simple. Named captures are put back
	            output.push(nativ.replace.call(XRegExp(pattern.source).source, parts, rewrite));
	        } else {
	            output.push(XRegExp.escape(pattern));
	        }
	    }

	    const separator = conjunction === 'none' ? '' : '|';
	    return XRegExp(output.join(separator), flags);
	};

	// ==--------------------------==
	// Fixed/extended native methods
	// ==--------------------------==

	/**
	 * Adds named capture support (with backreferences returned as `result.name`), and fixes browser
	 * bugs in the native `RegExp.prototype.exec`. Use via `XRegExp.exec`.
	 *
	 * @memberOf RegExp
	 * @param {String} str String to search.
	 * @returns {Array} Match array with named backreference properties, or `null`.
	 */
	fixed.exec = function(str) {
	    const origLastIndex = this.lastIndex;
	    const match = nativ.exec.apply(this, arguments);

	    if (match) {
	        // Fix browsers whose `exec` methods don't return `undefined` for nonparticipating capturing
	        // groups. This fixes IE 5.5-8, but not IE 9's quirks mode or emulation of older IEs. IE 9
	        // in standards mode follows the spec.
	        if (!correctExecNpcg && match.length > 1 && match.includes('')) {
	            const r2 = copyRegex(this, {
	                removeG: true,
	                isInternalOnly: true
	            });
	            // Using `str.slice(match.index)` rather than `match[0]` in case lookahead allowed
	            // matching due to characters outside the match
	            nativ.replace.call(String(str).slice(match.index), r2, (...args) => {
	                const len = args.length;
	                // Skip index 0 and the last 2
	                for (let i = 1; i < len - 2; ++i) {
	                    if (args[i] === undefined) {
	                        match[i] = undefined;
	                    }
	                }
	            });
	        }

	        // Attach named capture properties
	        let groupsObject = match;
	        if (XRegExp.isInstalled('namespacing')) {
	            // https://tc39.github.io/proposal-regexp-named-groups/#sec-regexpbuiltinexec
	            match.groups = Object.create(null);
	            groupsObject = match.groups;
	        }
	        if (this[REGEX_DATA] && this[REGEX_DATA].captureNames) {
	            // Skip index 0
	            for (let i = 1; i < match.length; ++i) {
	                const name = this[REGEX_DATA].captureNames[i - 1];
	                if (name) {
	                    groupsObject[name] = match[i];
	                }
	            }
	        }

	        // Fix browsers that increment `lastIndex` after zero-length matches
	        if (this.global && !match[0].length && (this.lastIndex > match.index)) {
	            this.lastIndex = match.index;
	        }
	    }

	    if (!this.global) {
	        // Fixes IE, Opera bug (last tested IE 9, Opera 11.6)
	        this.lastIndex = origLastIndex;
	    }

	    return match;
	};

	/**
	 * Fixes browser bugs in the native `RegExp.prototype.test`.
	 *
	 * @memberOf RegExp
	 * @param {String} str String to search.
	 * @returns {boolean} Whether the regex matched the provided value.
	 */
	fixed.test = function(str) {
	    // Do this the easy way :-)
	    return !!fixed.exec.call(this, str);
	};

	/**
	 * Adds named capture support (with backreferences returned as `result.name`), and fixes browser
	 * bugs in the native `String.prototype.match`.
	 *
	 * @memberOf String
	 * @param {RegExp|*} regex Regex to search with. If not a regex object, it is passed to `RegExp`.
	 * @returns {Array} If `regex` uses flag g, an array of match strings or `null`. Without flag g,
	 *   the result of calling `regex.exec(this)`.
	 */
	fixed.match = function(regex) {
	    if (!XRegExp.isRegExp(regex)) {
	        // Use the native `RegExp` rather than `XRegExp`
	        regex = new RegExp(regex);
	    } else if (regex.global) {
	        const result = nativ.match.apply(this, arguments);
	        // Fixes IE bug
	        regex.lastIndex = 0;

	        return result;
	    }

	    return fixed.exec.call(regex, toObject(this));
	};

	/**
	 * Adds support for `${n}` (or `$<n>`) tokens for named and numbered backreferences in replacement
	 * text, and provides named backreferences to replacement functions as `arguments[0].name`. Also
	 * fixes browser bugs in replacement text syntax when performing a replacement using a nonregex
	 * search value, and the value of a replacement regex's `lastIndex` property during replacement
	 * iterations and upon completion. Note that this doesn't support SpiderMonkey's proprietary third
	 * (`flags`) argument. Use via `XRegExp.replace`.
	 *
	 * @memberOf String
	 * @param {RegExp|String} search Search pattern to be replaced.
	 * @param {String|Function} replacement Replacement string or a function invoked to create it.
	 * @returns {string} New string with one or all matches replaced.
	 */
	fixed.replace = function(search, replacement) {
	    const isRegex = XRegExp.isRegExp(search);
	    let origLastIndex;
	    let captureNames;
	    let result;

	    if (isRegex) {
	        if (search[REGEX_DATA]) {
	            ({captureNames} = search[REGEX_DATA]);
	        }
	        // Only needed if `search` is nonglobal
	        origLastIndex = search.lastIndex;
	    } else {
	        search += ''; // Type-convert
	    }

	    // Don't use `typeof`; some older browsers return 'function' for regex objects
	    if (isType(replacement, 'Function')) {
	        // Stringifying `this` fixes a bug in IE < 9 where the last argument in replacement
	        // functions isn't type-converted to a string
	        result = nativ.replace.call(String(this), search, (...args) => {
	            if (captureNames) {
	                let groupsObject;

	                if (XRegExp.isInstalled('namespacing')) {
	                    // https://tc39.github.io/proposal-regexp-named-groups/#sec-regexpbuiltinexec
	                    groupsObject = Object.create(null);
	                    args.push(groupsObject);
	                } else {
	                    // Change the `args[0]` string primitive to a `String` object that can store
	                    // properties. This really does need to use `String` as a constructor
	                    args[0] = new String(args[0]);
	                    [groupsObject] = args;
	                }

	                // Store named backreferences
	                for (let i = 0; i < captureNames.length; ++i) {
	                    if (captureNames[i]) {
	                        groupsObject[captureNames[i]] = args[i + 1];
	                    }
	                }
	            }
	            // ES6 specs the context for replacement functions as `undefined`
	            return replacement(...args);
	        });
	    } else {
	        // Ensure that the last value of `args` will be a string when given nonstring `this`,
	        // while still throwing on null or undefined context
	        result = nativ.replace.call(this == null ? this : String(this), search, (...args) => {
	            return nativ.replace.call(String(replacement), replacementToken, replacer);

	            function replacer($0, bracketed, angled, dollarToken) {
	                bracketed = bracketed || angled;
	                // Named or numbered backreference with curly or angled braces
	                if (bracketed) {
	                    // XRegExp behavior for `${n}` or `$<n>`:
	                    // 1. Backreference to numbered capture, if `n` is an integer. Use `0` for the
	                    //    entire match. Any number of leading zeros may be used.
	                    // 2. Backreference to named capture `n`, if it exists and is not an integer
	                    //    overridden by numbered capture. In practice, this does not overlap with
	                    //    numbered capture since XRegExp does not allow named capture to use a bare
	                    //    integer as the name.
	                    // 3. If the name or number does not refer to an existing capturing group, it's
	                    //    an error.
	                    let n = +bracketed; // Type-convert; drop leading zeros
	                    if (n <= args.length - 3) {
	                        return args[n] || '';
	                    }
	                    // Groups with the same name is an error, else would need `lastIndexOf`
	                    n = captureNames ? captureNames.indexOf(bracketed) : -1;
	                    if (n < 0) {
	                        throw new SyntaxError(`Backreference to undefined group ${$0}`);
	                    }
	                    return args[n + 1] || '';
	                }
	                // Else, special variable or numbered backreference without curly braces
	                if (dollarToken === '$') { // $$
	                    return '$';
	                }
	                if (dollarToken === '&' || +dollarToken === 0) { // $&, $0 (not followed by 1-9), $00
	                    return args[0];
	                }
	                if (dollarToken === '`') { // $` (left context)
	                    return args[args.length - 1].slice(0, args[args.length - 2]);
	                }
	                if (dollarToken === "'") { // $' (right context)
	                    return args[args.length - 1].slice(args[args.length - 2] + args[0].length);
	                }
	                // Else, numbered backreference without braces
	                dollarToken = +dollarToken; // Type-convert; drop leading zero
	                // XRegExp behavior for `$n` and `$nn`:
	                // - Backrefs end after 1 or 2 digits. Use `${..}` or `$<..>` for more digits.
	                // - `$1` is an error if no capturing groups.
	                // - `$10` is an error if less than 10 capturing groups. Use `${1}0` or `$<1>0`
	                //   instead.
	                // - `$01` is `$1` if at least one capturing group, else it's an error.
	                // - `$0` (not followed by 1-9) and `$00` are the entire match.
	                // Native behavior, for comparison:
	                // - Backrefs end after 1 or 2 digits. Cannot reference capturing group 100+.
	                // - `$1` is a literal `$1` if no capturing groups.
	                // - `$10` is `$1` followed by a literal `0` if less than 10 capturing groups.
	                // - `$01` is `$1` if at least one capturing group, else it's a literal `$01`.
	                // - `$0` is a literal `$0`.
	                if (!isNaN(dollarToken)) {
	                    if (dollarToken > args.length - 3) {
	                        throw new SyntaxError(`Backreference to undefined group ${$0}`);
	                    }
	                    return args[dollarToken] || '';
	                }
	                // `$` followed by an unsupported char is an error, unlike native JS
	                throw new SyntaxError(`Invalid token ${$0}`);
	            }
	        });
	    }

	    if (isRegex) {
	        if (search.global) {
	            // Fixes IE, Safari bug (last tested IE 9, Safari 5.1)
	            search.lastIndex = 0;
	        } else {
	            // Fixes IE, Opera bug (last tested IE 9, Opera 11.6)
	            search.lastIndex = origLastIndex;
	        }
	    }

	    return result;
	};

	/**
	 * Fixes browser bugs in the native `String.prototype.split`. Use via `XRegExp.split`.
	 *
	 * @memberOf String
	 * @param {RegExp|String} separator Regex or string to use for separating the string.
	 * @param {Number} [limit] Maximum number of items to include in the result array.
	 * @returns {!Array} Array of substrings.
	 */
	fixed.split = function(separator, limit) {
	    if (!XRegExp.isRegExp(separator)) {
	        // Browsers handle nonregex split correctly, so use the faster native method
	        return nativ.split.apply(this, arguments);
	    }

	    const str = String(this);
	    const output = [];
	    const origLastIndex = separator.lastIndex;
	    let lastLastIndex = 0;
	    let lastLength;

	    // Values for `limit`, per the spec:
	    // If undefined: pow(2,32) - 1
	    // If 0, Infinity, or NaN: 0
	    // If positive number: limit = floor(limit); if (limit >= pow(2,32)) limit -= pow(2,32);
	    // If negative number: pow(2,32) - floor(abs(limit))
	    // If other: Type-convert, then use the above rules
	    // This line fails in very strange ways for some values of `limit` in Opera 10.5-10.63, unless
	    // Opera Dragonfly is open (go figure). It works in at least Opera 9.5-10.1 and 11+
	    limit = (limit === undefined ? -1 : limit) >>> 0;

	    XRegExp.forEach(str, separator, (match) => {
	        // This condition is not the same as `if (match[0].length)`
	        if ((match.index + match[0].length) > lastLastIndex) {
	            output.push(str.slice(lastLastIndex, match.index));
	            if (match.length > 1 && match.index < str.length) {
	                Array.prototype.push.apply(output, match.slice(1));
	            }
	            lastLength = match[0].length;
	            lastLastIndex = match.index + lastLength;
	        }
	    });

	    if (lastLastIndex === str.length) {
	        if (!nativ.test.call(separator, '') || lastLength) {
	            output.push('');
	        }
	    } else {
	        output.push(str.slice(lastLastIndex));
	    }

	    separator.lastIndex = origLastIndex;
	    return output.length > limit ? output.slice(0, limit) : output;
	};

	// ==--------------------------==
	// Built-in syntax/flag tokens
	// ==--------------------------==

	/*
	 * Letter escapes that natively match literal characters: `\a`, `\A`, etc. These should be
	 * SyntaxErrors but are allowed in web reality. XRegExp makes them errors for cross-browser
	 * consistency and to reserve their syntax, but lets them be superseded by addons.
	 */
	XRegExp.addToken(
	    /\\([ABCE-RTUVXYZaeg-mopqyz]|c(?![A-Za-z])|u(?![\dA-Fa-f]{4}|{[\dA-Fa-f]+})|x(?![\dA-Fa-f]{2}))/,
	    (match, scope) => {
	        // \B is allowed in default scope only
	        if (match[1] === 'B' && scope === defaultScope) {
	            return match[0];
	        }
	        throw new SyntaxError(`Invalid escape ${match[0]}`);
	    },
	    {
	        scope: 'all',
	        leadChar: '\\'
	    }
	);

	/*
	 * Unicode code point escape with curly braces: `\u{N..}`. `N..` is any one or more digit
	 * hexadecimal number from 0-10FFFF, and can include leading zeros. Requires the native ES6 `u` flag
	 * to support code points greater than U+FFFF. Avoids converting code points above U+FFFF to
	 * surrogate pairs (which could be done without flag `u`), since that could lead to broken behavior
	 * if you follow a `\u{N..}` token that references a code point above U+FFFF with a quantifier, or
	 * if you use the same in a character class.
	 */
	XRegExp.addToken(
	    /\\u{([\dA-Fa-f]+)}/,
	    (match, scope, flags) => {
	        const code = dec(match[1]);
	        if (code > 0x10FFFF) {
	            throw new SyntaxError(`Invalid Unicode code point ${match[0]}`);
	        }
	        if (code <= 0xFFFF) {
	            // Converting to \uNNNN avoids needing to escape the literal character and keep it
	            // separate from preceding tokens
	            return `\\u${pad4(hex(code))}`;
	        }
	        // If `code` is between 0xFFFF and 0x10FFFF, require and defer to native handling
	        if (hasNativeU && flags.includes('u')) {
	            return match[0];
	        }
	        throw new SyntaxError('Cannot use Unicode code point above \\u{FFFF} without flag u');
	    },
	    {
	        scope: 'all',
	        leadChar: '\\'
	    }
	);

	/*
	 * Empty character class: `[]` or `[^]`. This fixes a critical cross-browser syntax inconsistency.
	 * Unless this is standardized (per the ES spec), regex syntax can't be accurately parsed because
	 * character class endings can't be determined.
	 */
	XRegExp.addToken(
	    /\[(\^?)\]/,
	    // For cross-browser compatibility with ES3, convert [] to \b\B and [^] to [\s\S].
	    // (?!) should work like \b\B, but is unreliable in some versions of Firefox
	    /* eslint-disable no-confusing-arrow */
	    (match) => (match[1] ? '[\\s\\S]' : '\\b\\B'),
	    /* eslint-enable no-confusing-arrow */
	    {leadChar: '['}
	);

	/*
	 * Comment pattern: `(?# )`. Inline comments are an alternative to the line comments allowed in
	 * free-spacing mode (flag x).
	 */
	XRegExp.addToken(
	    /\(\?#[^)]*\)/,
	    getContextualTokenSeparator,
	    {leadChar: '('}
	);

	/*
	 * Whitespace and line comments, in free-spacing mode (aka extended mode, flag x) only.
	 */
	XRegExp.addToken(
	    /\s+|#[^\n]*\n?/,
	    getContextualTokenSeparator,
	    {flag: 'x'}
	);

	/*
	 * Dot, in dotall mode (aka singleline mode, flag s) only.
	 */
	XRegExp.addToken(
	    /\./,
	    () => '[\\s\\S]',
	    {
	        flag: 's',
	        leadChar: '.'
	    }
	);

	/*
	 * Named backreference: `\k<name>`. Backreference names can use the characters A-Z, a-z, 0-9, _,
	 * and $ only. Also allows numbered backreferences as `\k<n>`.
	 */
	XRegExp.addToken(
	    /\\k<([\w$]+)>/,
	    function(match) {
	        // Groups with the same name is an error, else would need `lastIndexOf`
	        const index = isNaN(match[1]) ? (this.captureNames.indexOf(match[1]) + 1) : +match[1];
	        const endIndex = match.index + match[0].length;
	        if (!index || index > this.captureNames.length) {
	            throw new SyntaxError(`Backreference to undefined group ${match[0]}`);
	        }
	        // Keep backreferences separate from subsequent literal numbers. This avoids e.g.
	        // inadvertedly changing `(?<n>)\k<n>1` to `()\11`.
	        return `\\${index}${
            endIndex === match.input.length || isNaN(match.input[endIndex]) ?
                '' : '(?:)'
        }`;
	    },
	    {leadChar: '\\'}
	);

	/*
	 * Numbered backreference or octal, plus any following digits: `\0`, `\11`, etc. Octals except `\0`
	 * not followed by 0-9 and backreferences to unopened capture groups throw an error. Other matches
	 * are returned unaltered. IE < 9 doesn't support backreferences above `\99` in regex syntax.
	 */
	XRegExp.addToken(
	    /\\(\d+)/,
	    function(match, scope) {
	        if (
	            !(
	                scope === defaultScope &&
	                /^[1-9]/.test(match[1]) &&
	                +match[1] <= this.captureNames.length
	            ) &&
	            match[1] !== '0'
	        ) {
	            throw new SyntaxError(`Cannot use octal escape or backreference to undefined group ${match[0]}`);
	        }
	        return match[0];
	    },
	    {
	        scope: 'all',
	        leadChar: '\\'
	    }
	);

	/*
	 * Named capturing group; match the opening delimiter only: `(?<name>`. Capture names can use the
	 * characters A-Z, a-z, 0-9, _, and $ only. Names can't be integers. Supports Python-style
	 * `(?P<name>` as an alternate syntax to avoid issues in some older versions of Opera which natively
	 * supported the Python-style syntax. Otherwise, XRegExp might treat numbered backreferences to
	 * Python-style named capture as octals.
	 */
	XRegExp.addToken(
	    /\(\?P?<([\w$]+)>/,
	    function(match) {
	        // Disallow bare integers as names because named backreferences are added to match arrays
	        // and therefore numeric properties may lead to incorrect lookups
	        if (!isNaN(match[1])) {
	            throw new SyntaxError(`Cannot use integer as capture name ${match[0]}`);
	        }
	        if (!XRegExp.isInstalled('namespacing') && (match[1] === 'length' || match[1] === '__proto__')) {
	            throw new SyntaxError(`Cannot use reserved word as capture name ${match[0]}`);
	        }
	        if (this.captureNames.includes(match[1])) {
	            throw new SyntaxError(`Cannot use same name for multiple groups ${match[0]}`);
	        }
	        this.captureNames.push(match[1]);
	        this.hasNamedCapture = true;
	        return '(';
	    },
	    {leadChar: '('}
	);

	/*
	 * Capturing group; match the opening parenthesis only. Required for support of named capturing
	 * groups. Also adds explicit capture mode (flag n).
	 */
	XRegExp.addToken(
	    /\((?!\?)/,
	    function(match, scope, flags) {
	        if (flags.includes('n')) {
	            return '(?:';
	        }
	        this.captureNames.push(null);
	        return '(';
	    },
	    {
	        optionalFlags: 'n',
	        leadChar: '('
	    }
	);

	/*!
	 * XRegExp.build 4.4.1
	 * <xregexp.com>
	 * Steven Levithan (c) 2012-present MIT License
	 */

	var build = (XRegExp) => {
	    const REGEX_DATA = 'xregexp';
	    const subParts = /(\()(?!\?)|\\([1-9]\d*)|\\[\s\S]|\[(?:[^\\\]]|\\[\s\S])*\]/g;
	    const parts = XRegExp.union([/\({{([\w$]+)}}\)|{{([\w$]+)}}/, subParts], 'g', {
	        conjunction: 'or'
	    });

	    /**
	     * Strips a leading `^` and trailing unescaped `$`, if both are present.
	     *
	     * @private
	     * @param {String} pattern Pattern to process.
	     * @returns {String} Pattern with edge anchors removed.
	     */
	    function deanchor(pattern) {
	        // Allow any number of empty noncapturing groups before/after anchors, because regexes
	        // built/generated by XRegExp sometimes include them
	        const leadingAnchor = /^(?:\(\?:\))*\^/;
	        const trailingAnchor = /\$(?:\(\?:\))*$/;

	        if (
	            leadingAnchor.test(pattern) &&
	            trailingAnchor.test(pattern) &&
	            // Ensure that the trailing `$` isn't escaped
	            trailingAnchor.test(pattern.replace(/\\[\s\S]/g, ''))
	        ) {
	            return pattern.replace(leadingAnchor, '').replace(trailingAnchor, '');
	        }

	        return pattern;
	    }

	    /**
	     * Converts the provided value to an XRegExp. Native RegExp flags are not preserved.
	     *
	     * @private
	     * @param {String|RegExp} value Value to convert.
	     * @param {Boolean} [addFlagX] Whether to apply the `x` flag in cases when `value` is not
	     *   already a regex generated by XRegExp
	     * @returns {RegExp} XRegExp object with XRegExp syntax applied.
	     */
	    function asXRegExp(value, addFlagX) {
	        const flags = addFlagX ? 'x' : '';
	        return XRegExp.isRegExp(value) ?
	            (value[REGEX_DATA] && value[REGEX_DATA].captureNames ?
	                // Don't recompile, to preserve capture names
	                value :
	                // Recompile as XRegExp
	                XRegExp(value.source, flags)
	            ) :
	            // Compile string as XRegExp
	            XRegExp(value, flags);
	    }

	    function interpolate(substitution) {
	        return substitution instanceof RegExp ? substitution : XRegExp.escape(substitution);
	    }

	    function reduceToSubpatternsObject(subpatterns, interpolated, subpatternIndex) {
	        subpatterns[`subpattern${subpatternIndex}`] = interpolated;
	        return subpatterns;
	    }

	    function embedSubpatternAfter(raw, subpatternIndex, rawLiterals) {
	        const hasSubpattern = subpatternIndex < rawLiterals.length - 1;
	        return raw + (hasSubpattern ? `{{subpattern${subpatternIndex}}}` : '');
	    }

	    /**
	     * Provides tagged template literals that create regexes with XRegExp syntax and flags. The
	     * provided pattern is handled as a raw string, so backslashes don't need to be escaped.
	     *
	     * Interpolation of strings and regexes shares the features of `XRegExp.build`. Interpolated
	     * patterns are treated as atomic units when quantified, interpolated strings have their special
	     * characters escaped, a leading `^` and trailing unescaped `$` are stripped from interpolated
	     * regexes if both are present, and any backreferences within an interpolated regex are
	     * rewritten to work within the overall pattern.
	     *
	     * @memberOf XRegExp
	     * @param {String} [flags] Any combination of XRegExp flags.
	     * @returns {Function} Handler for template literals that construct regexes with XRegExp syntax.
	     * @example
	     *
	     * const h12 = /1[0-2]|0?[1-9]/;
	     * const h24 = /2[0-3]|[01][0-9]/;
	     * const hours = XRegExp.tag('x')`${h12} : | ${h24}`;
	     * const minutes = /^[0-5][0-9]$/;
	     * // Note that explicitly naming the 'minutes' group is required for named backreferences
	     * const time = XRegExp.tag('x')`^ ${hours} (?<minutes>${minutes}) $`;
	     * time.test('10:59'); // -> true
	     * XRegExp.exec('10:59', time).minutes; // -> '59'
	     */
	    XRegExp.tag = (flags) => (literals, ...substitutions) => {
	        const subpatterns = substitutions.map(interpolate).reduce(reduceToSubpatternsObject, {});
	        const pattern = literals.raw.map(embedSubpatternAfter).join('');
	        return XRegExp.build(pattern, subpatterns, flags);
	    };

	    /**
	     * Builds regexes using named subpatterns, for readability and pattern reuse. Backreferences in
	     * the outer pattern and provided subpatterns are automatically renumbered to work correctly.
	     * Native flags used by provided subpatterns are ignored in favor of the `flags` argument.
	     *
	     * @memberOf XRegExp
	     * @param {String} pattern XRegExp pattern using `{{name}}` for embedded subpatterns. Allows
	     *   `({{name}})` as shorthand for `(?<name>{{name}})`. Patterns cannot be embedded within
	     *   character classes.
	     * @param {Object} subs Lookup object for named subpatterns. Values can be strings or regexes. A
	     *   leading `^` and trailing unescaped `$` are stripped from subpatterns, if both are present.
	     * @param {String} [flags] Any combination of XRegExp flags.
	     * @returns {RegExp} Regex with interpolated subpatterns.
	     * @example
	     *
	     * const time = XRegExp.build('(?x)^ {{hours}} ({{minutes}}) $', {
	     *   hours: XRegExp.build('{{h12}} : | {{h24}}', {
	     *     h12: /1[0-2]|0?[1-9]/,
	     *     h24: /2[0-3]|[01][0-9]/
	     *   }, 'x'),
	     *   minutes: /^[0-5][0-9]$/
	     * });
	     * time.test('10:59'); // -> true
	     * XRegExp.exec('10:59', time).minutes; // -> '59'
	     */
	    XRegExp.build = (pattern, subs, flags) => {
	        flags = flags || '';
	        // Used with `asXRegExp` calls for `pattern` and subpatterns in `subs`, to work around how
	        // some browsers convert `RegExp('\n')` to a regex that contains the literal characters `\`
	        // and `n`. See more details at <https://github.com/slevithan/xregexp/pull/163>.
	        const addFlagX = flags.includes('x');
	        const inlineFlags = /^\(\?([\w$]+)\)/.exec(pattern);
	        // Add flags within a leading mode modifier to the overall pattern's flags
	        if (inlineFlags) {
	            flags = XRegExp._clipDuplicates(flags + inlineFlags[1]);
	        }

	        const data = {};
	        for (const p in subs) {
	            if (subs.hasOwnProperty(p)) {
	                // Passing to XRegExp enables extended syntax and ensures independent validity,
	                // lest an unescaped `(`, `)`, `[`, or trailing `\` breaks the `(?:)` wrapper. For
	                // subpatterns provided as native regexes, it dies on octals and adds the property
	                // used to hold extended regex instance data, for simplicity.
	                const sub = asXRegExp(subs[p], addFlagX);
	                data[p] = {
	                    // Deanchoring allows embedding independently useful anchored regexes. If you
	                    // really need to keep your anchors, double them (i.e., `^^...$$`).
	                    pattern: deanchor(sub.source),
	                    names: sub[REGEX_DATA].captureNames || []
	                };
	            }
	        }

	        // Passing to XRegExp dies on octals and ensures the outer pattern is independently valid;
	        // helps keep this simple. Named captures will be put back.
	        const patternAsRegex = asXRegExp(pattern, addFlagX);

	        // 'Caps' is short for 'captures'
	        let numCaps = 0;
	        let numPriorCaps;
	        let numOuterCaps = 0;
	        const outerCapsMap = [0];
	        const outerCapNames = patternAsRegex[REGEX_DATA].captureNames || [];
	        const output = patternAsRegex.source.replace(parts, ($0, $1, $2, $3, $4) => {
	            const subName = $1 || $2;
	            let capName;
	            let intro;
	            let localCapIndex;
	            // Named subpattern
	            if (subName) {
	                if (!data.hasOwnProperty(subName)) {
	                    throw new ReferenceError(`Undefined property ${$0}`);
	                }
	                // Named subpattern was wrapped in a capturing group
	                if ($1) {
	                    capName = outerCapNames[numOuterCaps];
	                    outerCapsMap[++numOuterCaps] = ++numCaps;
	                    // If it's a named group, preserve the name. Otherwise, use the subpattern name
	                    // as the capture name
	                    intro = `(?<${capName || subName}>`;
	                } else {
	                    intro = '(?:';
	                }
	                numPriorCaps = numCaps;
	                const rewrittenSubpattern = data[subName].pattern.replace(subParts, (match, paren, backref) => {
	                    // Capturing group
	                    if (paren) {
	                        capName = data[subName].names[numCaps - numPriorCaps];
	                        ++numCaps;
	                        // If the current capture has a name, preserve the name
	                        if (capName) {
	                            return `(?<${capName}>`;
	                        }
	                    // Backreference
	                    } else if (backref) {
	                        localCapIndex = +backref - 1;
	                        // Rewrite the backreference
	                        return data[subName].names[localCapIndex] ?
	                            // Need to preserve the backreference name in case using flag `n`
	                            `\\k<${data[subName].names[localCapIndex]}>` :
	                            `\\${+backref + numPriorCaps}`;
	                    }
	                    return match;
	                });
	                return `${intro}${rewrittenSubpattern})`;
	            }
	            // Capturing group
	            if ($3) {
	                capName = outerCapNames[numOuterCaps];
	                outerCapsMap[++numOuterCaps] = ++numCaps;
	                // If the current capture has a name, preserve the name
	                if (capName) {
	                    return `(?<${capName}>`;
	                }
	            // Backreference
	            } else if ($4) {
	                localCapIndex = +$4 - 1;
	                // Rewrite the backreference
	                return outerCapNames[localCapIndex] ?
	                    // Need to preserve the backreference name in case using flag `n`
	                    `\\k<${outerCapNames[localCapIndex]}>` :
	                    `\\${outerCapsMap[+$4]}`;
	            }
	            return $0;
	        });

	        return XRegExp(output, flags);
	    };
	};

	/*!
	 * XRegExp.matchRecursive 4.4.1
	 * <xregexp.com>
	 * Steven Levithan (c) 2009-present MIT License
	 */

	var matchRecursive = (XRegExp) => {

	    /**
	     * Returns a match detail object composed of the provided values.
	     *
	     * @private
	     */
	    function row(name, value, start, end) {
	        return {
	            name,
	            value,
	            start,
	            end
	        };
	    }

	    /**
	     * Returns an array of match strings between outermost left and right delimiters, or an array of
	     * objects with detailed match parts and position data. An error is thrown if delimiters are
	     * unbalanced within the data.
	     *
	     * @memberOf XRegExp
	     * @param {String} str String to search.
	     * @param {String} left Left delimiter as an XRegExp pattern.
	     * @param {String} right Right delimiter as an XRegExp pattern.
	     * @param {String} [flags] Any native or XRegExp flags, used for the left and right delimiters.
	     * @param {Object} [options] Lets you specify `valueNames` and `escapeChar` options.
	     * @returns {!Array} Array of matches, or an empty array.
	     * @example
	     *
	     * // Basic usage
	     * let str = '(t((e))s)t()(ing)';
	     * XRegExp.matchRecursive(str, '\\(', '\\)', 'g');
	     * // -> ['t((e))s', '', 'ing']
	     *
	     * // Extended information mode with valueNames
	     * str = 'Here is <div> <div>an</div></div> example';
	     * XRegExp.matchRecursive(str, '<div\\s*>', '</div>', 'gi', {
	     *   valueNames: ['between', 'left', 'match', 'right']
	     * });
	     * // -> [
	     * // {name: 'between', value: 'Here is ',       start: 0,  end: 8},
	     * // {name: 'left',    value: '<div>',          start: 8,  end: 13},
	     * // {name: 'match',   value: ' <div>an</div>', start: 13, end: 27},
	     * // {name: 'right',   value: '</div>',         start: 27, end: 33},
	     * // {name: 'between', value: ' example',       start: 33, end: 41}
	     * // ]
	     *
	     * // Omitting unneeded parts with null valueNames, and using escapeChar
	     * str = '...{1}.\\{{function(x,y){return {y:x}}}';
	     * XRegExp.matchRecursive(str, '{', '}', 'g', {
	     *   valueNames: ['literal', null, 'value', null],
	     *   escapeChar: '\\'
	     * });
	     * // -> [
	     * // {name: 'literal', value: '...',  start: 0, end: 3},
	     * // {name: 'value',   value: '1',    start: 4, end: 5},
	     * // {name: 'literal', value: '.\\{', start: 6, end: 9},
	     * // {name: 'value',   value: 'function(x,y){return {y:x}}', start: 10, end: 37}
	     * // ]
	     *
	     * // Sticky mode via flag y
	     * str = '<1><<<2>>><3>4<5>';
	     * XRegExp.matchRecursive(str, '<', '>', 'gy');
	     * // -> ['1', '<<2>>', '3']
	     */
	    XRegExp.matchRecursive = (str, left, right, flags, options) => {
	        flags = flags || '';
	        options = options || {};
	        const global = flags.includes('g');
	        const sticky = flags.includes('y');
	        // Flag `y` is controlled internally
	        const basicFlags = flags.replace(/y/g, '');
	        let {escapeChar} = options;
	        const vN = options.valueNames;
	        const output = [];
	        let openTokens = 0;
	        let delimStart = 0;
	        let delimEnd = 0;
	        let lastOuterEnd = 0;
	        let outerStart;
	        let innerStart;
	        let leftMatch;
	        let rightMatch;
	        let esc;
	        left = XRegExp(left, basicFlags);
	        right = XRegExp(right, basicFlags);

	        if (escapeChar) {
	            if (escapeChar.length > 1) {
	                throw new Error('Cannot use more than one escape character');
	            }
	            escapeChar = XRegExp.escape(escapeChar);
	            // Example of concatenated `esc` regex:
	            // `escapeChar`: '%'
	            // `left`: '<'
	            // `right`: '>'
	            // Regex is: /(?:%[\S\s]|(?:(?!<|>)[^%])+)+/
	            esc = new RegExp(
	                `(?:${escapeChar}[\\S\\s]|(?:(?!${
                    // Using `XRegExp.union` safely rewrites backreferences in `left` and `right`.
                    // Intentionally not passing `basicFlags` to `XRegExp.union` since any syntax
                    // transformation resulting from those flags was already applied to `left` and
                    // `right` when they were passed through the XRegExp constructor above.
                    XRegExp.union([left, right], '', {conjunction: 'or'}).source
                })[^${escapeChar}])+)+`,
	                // Flags `gy` not needed here
	                flags.replace(/[^imu]+/g, '')
	            );
	        }

	        while (true) {
	            // If using an escape character, advance to the delimiter's next starting position,
	            // skipping any escaped characters in between
	            if (escapeChar) {
	                delimEnd += (XRegExp.exec(str, esc, delimEnd, 'sticky') || [''])[0].length;
	            }
	            leftMatch = XRegExp.exec(str, left, delimEnd);
	            rightMatch = XRegExp.exec(str, right, delimEnd);
	            // Keep the leftmost match only
	            if (leftMatch && rightMatch) {
	                if (leftMatch.index <= rightMatch.index) {
	                    rightMatch = null;
	                } else {
	                    leftMatch = null;
	                }
	            }
	            // Paths (LM: leftMatch, RM: rightMatch, OT: openTokens):
	            // LM | RM | OT | Result
	            // 1  | 0  | 1  | loop
	            // 1  | 0  | 0  | loop
	            // 0  | 1  | 1  | loop
	            // 0  | 1  | 0  | throw
	            // 0  | 0  | 1  | throw
	            // 0  | 0  | 0  | break
	            // The paths above don't include the sticky mode special case. The loop ends after the
	            // first completed match if not `global`.
	            if (leftMatch || rightMatch) {
	                delimStart = (leftMatch || rightMatch).index;
	                delimEnd = delimStart + (leftMatch || rightMatch)[0].length;
	            } else if (!openTokens) {
	                break;
	            }
	            if (sticky && !openTokens && delimStart > lastOuterEnd) {
	                break;
	            }
	            if (leftMatch) {
	                if (!openTokens) {
	                    outerStart = delimStart;
	                    innerStart = delimEnd;
	                }
	                ++openTokens;
	            } else if (rightMatch && openTokens) {
	                if (!--openTokens) {
	                    if (vN) {
	                        if (vN[0] && outerStart > lastOuterEnd) {
	                            output.push(row(vN[0], str.slice(lastOuterEnd, outerStart), lastOuterEnd, outerStart));
	                        }
	                        if (vN[1]) {
	                            output.push(row(vN[1], str.slice(outerStart, innerStart), outerStart, innerStart));
	                        }
	                        if (vN[2]) {
	                            output.push(row(vN[2], str.slice(innerStart, delimStart), innerStart, delimStart));
	                        }
	                        if (vN[3]) {
	                            output.push(row(vN[3], str.slice(delimStart, delimEnd), delimStart, delimEnd));
	                        }
	                    } else {
	                        output.push(str.slice(innerStart, delimStart));
	                    }
	                    lastOuterEnd = delimEnd;
	                    if (!global) {
	                        break;
	                    }
	                }
	            } else {
	                throw new Error('Unbalanced delimiter found in string');
	            }
	            // If the delimiter matched an empty string, avoid an infinite loop
	            if (delimStart === delimEnd) {
	                ++delimEnd;
	            }
	        }

	        if (global && !sticky && vN && vN[0] && str.length > lastOuterEnd) {
	            output.push(row(vN[0], str.slice(lastOuterEnd), lastOuterEnd, str.length));
	        }

	        return output;
	    };
	};

	/*!
	 * XRegExp Unicode Base 4.4.1
	 * <xregexp.com>
	 * Steven Levithan (c) 2008-present MIT License
	 */

	var unicodeBase = (XRegExp) => {

	    /**
	     * Adds base support for Unicode matching:
	     * - Adds syntax `\p{..}` for matching Unicode tokens. Tokens can be inverted using `\P{..}` or
	     *   `\p{^..}`. Token names ignore case, spaces, hyphens, and underscores. You can omit the
	     *   braces for token names that are a single letter (e.g. `\pL` or `PL`).
	     * - Adds flag A (astral), which enables 21-bit Unicode support.
	     * - Adds the `XRegExp.addUnicodeData` method used by other addons to provide character data.
	     *
	     * Unicode Base relies on externally provided Unicode character data. Official addons are
	     * available to provide data for Unicode categories, scripts, blocks, and properties.
	     *
	     * @requires XRegExp
	     */

	    // ==--------------------------==
	    // Private stuff
	    // ==--------------------------==

	    // Storage for Unicode data
	    const unicode = {};

	    // Reuse utils
	    const dec = XRegExp._dec;
	    const hex = XRegExp._hex;
	    const pad4 = XRegExp._pad4;

	    // Generates a token lookup name: lowercase, with hyphens, spaces, and underscores removed
	    function normalize(name) {
	        return name.replace(/[- _]+/g, '').toLowerCase();
	    }

	    // Gets the decimal code of a literal code unit, \xHH, \uHHHH, or a backslash-escaped literal
	    function charCode(chr) {
	        const esc = /^\\[xu](.+)/.exec(chr);
	        return esc ?
	            dec(esc[1]) :
	            chr.charCodeAt(chr[0] === '\\' ? 1 : 0);
	    }

	    // Inverts a list of ordered BMP characters and ranges
	    function invertBmp(range) {
	        let output = '';
	        let lastEnd = -1;

	        XRegExp.forEach(
	            range,
	            /(\\x..|\\u....|\\?[\s\S])(?:-(\\x..|\\u....|\\?[\s\S]))?/,
	            (m) => {
	                const start = charCode(m[1]);
	                if (start > (lastEnd + 1)) {
	                    output += `\\u${pad4(hex(lastEnd + 1))}`;
	                    if (start > (lastEnd + 2)) {
	                        output += `-\\u${pad4(hex(start - 1))}`;
	                    }
	                }
	                lastEnd = charCode(m[2] || m[1]);
	            }
	        );

	        if (lastEnd < 0xFFFF) {
	            output += `\\u${pad4(hex(lastEnd + 1))}`;
	            if (lastEnd < 0xFFFE) {
	                output += '-\\uFFFF';
	            }
	        }

	        return output;
	    }

	    // Generates an inverted BMP range on first use
	    function cacheInvertedBmp(slug) {
	        const prop = 'b!';
	        return (
	            unicode[slug][prop] ||
	            (unicode[slug][prop] = invertBmp(unicode[slug].bmp))
	        );
	    }

	    // Combines and optionally negates BMP and astral data
	    function buildAstral(slug, isNegated) {
	        const item = unicode[slug];
	        let combined = '';

	        if (item.bmp && !item.isBmpLast) {
	            combined = `[${item.bmp}]${item.astral ? '|' : ''}`;
	        }
	        if (item.astral) {
	            combined += item.astral;
	        }
	        if (item.isBmpLast && item.bmp) {
	            combined += `${item.astral ? '|' : ''}[${item.bmp}]`;
	        }

	        // Astral Unicode tokens always match a code point, never a code unit
	        return isNegated ?
	            `(?:(?!${combined})(?:[\uD800-\uDBFF][\uDC00-\uDFFF]|[\0-\uFFFF]))` :
	            `(?:${combined})`;
	    }

	    // Builds a complete astral pattern on first use
	    function cacheAstral(slug, isNegated) {
	        const prop = isNegated ? 'a!' : 'a=';
	        return (
	            unicode[slug][prop] ||
	            (unicode[slug][prop] = buildAstral(slug, isNegated))
	        );
	    }

	    // ==--------------------------==
	    // Core functionality
	    // ==--------------------------==

	    /*
	     * Add astral mode (flag A) and Unicode token syntax: `\p{..}`, `\P{..}`, `\p{^..}`, `\pC`.
	     */
	    XRegExp.addToken(
	        // Use `*` instead of `+` to avoid capturing `^` as the token name in `\p{^}`
	        /\\([pP])(?:{(\^?)([^}]*)}|([A-Za-z]))/,
	        (match, scope, flags) => {
	            const ERR_DOUBLE_NEG = 'Invalid double negation ';
	            const ERR_UNKNOWN_NAME = 'Unknown Unicode token ';
	            const ERR_UNKNOWN_REF = 'Unicode token missing data ';
	            const ERR_ASTRAL_ONLY = 'Astral mode required for Unicode token ';
	            const ERR_ASTRAL_IN_CLASS = 'Astral mode does not support Unicode tokens within character classes';
	            // Negated via \P{..} or \p{^..}
	            let isNegated = match[1] === 'P' || !!match[2];
	            // Switch from BMP (0-FFFF) to astral (0-10FFFF) mode via flag A
	            const isAstralMode = flags.includes('A');
	            // Token lookup name. Check `[4]` first to avoid passing `undefined` via `\p{}`
	            let slug = normalize(match[4] || match[3]);
	            // Token data object
	            let item = unicode[slug];

	            if (match[1] === 'P' && match[2]) {
	                throw new SyntaxError(ERR_DOUBLE_NEG + match[0]);
	            }
	            if (!unicode.hasOwnProperty(slug)) {
	                throw new SyntaxError(ERR_UNKNOWN_NAME + match[0]);
	            }

	            // Switch to the negated form of the referenced Unicode token
	            if (item.inverseOf) {
	                slug = normalize(item.inverseOf);
	                if (!unicode.hasOwnProperty(slug)) {
	                    throw new ReferenceError(`${ERR_UNKNOWN_REF + match[0]} -> ${item.inverseOf}`);
	                }
	                item = unicode[slug];
	                isNegated = !isNegated;
	            }

	            if (!(item.bmp || isAstralMode)) {
	                throw new SyntaxError(ERR_ASTRAL_ONLY + match[0]);
	            }
	            if (isAstralMode) {
	                if (scope === 'class') {
	                    throw new SyntaxError(ERR_ASTRAL_IN_CLASS);
	                }

	                return cacheAstral(slug, isNegated);
	            }

	            return scope === 'class' ?
	                (isNegated ? cacheInvertedBmp(slug) : item.bmp) :
	                `${(isNegated ? '[^' : '[') + item.bmp}]`;
	        },
	        {
	            scope: 'all',
	            optionalFlags: 'A',
	            leadChar: '\\'
	        }
	    );

	    /**
	     * Adds to the list of Unicode tokens that XRegExp regexes can match via `\p` or `\P`.
	     *
	     * @memberOf XRegExp
	     * @param {Array} data Objects with named character ranges. Each object may have properties
	     *   `name`, `alias`, `isBmpLast`, `inverseOf`, `bmp`, and `astral`. All but `name` are
	     *   optional, although one of `bmp` or `astral` is required (unless `inverseOf` is set). If
	     *   `astral` is absent, the `bmp` data is used for BMP and astral modes. If `bmp` is absent,
	     *   the name errors in BMP mode but works in astral mode. If both `bmp` and `astral` are
	     *   provided, the `bmp` data only is used in BMP mode, and the combination of `bmp` and
	     *   `astral` data is used in astral mode. `isBmpLast` is needed when a token matches orphan
	     *   high surrogates *and* uses surrogate pairs to match astral code points. The `bmp` and
	     *   `astral` data should be a combination of literal characters and `\xHH` or `\uHHHH` escape
	     *   sequences, with hyphens to create ranges. Any regex metacharacters in the data should be
	     *   escaped, apart from range-creating hyphens. The `astral` data can additionally use
	     *   character classes and alternation, and should use surrogate pairs to represent astral code
	     *   points. `inverseOf` can be used to avoid duplicating character data if a Unicode token is
	     *   defined as the exact inverse of another token.
	     * @example
	     *
	     * // Basic use
	     * XRegExp.addUnicodeData([{
	     *   name: 'XDigit',
	     *   alias: 'Hexadecimal',
	     *   bmp: '0-9A-Fa-f'
	     * }]);
	     * XRegExp('\\p{XDigit}:\\p{Hexadecimal}+').test('0:3D'); // -> true
	     */
	    XRegExp.addUnicodeData = (data) => {
	        const ERR_NO_NAME = 'Unicode token requires name';
	        const ERR_NO_DATA = 'Unicode token has no character data ';

	        for (const item of data) {
	            if (!item.name) {
	                throw new Error(ERR_NO_NAME);
	            }
	            if (!(item.inverseOf || item.bmp || item.astral)) {
	                throw new Error(ERR_NO_DATA + item.name);
	            }
	            unicode[normalize(item.name)] = item;
	            if (item.alias) {
	                unicode[normalize(item.alias)] = item;
	            }
	        }

	        // Reset the pattern cache used by the `XRegExp` constructor, since the same pattern and
	        // flags might now produce different results
	        XRegExp.cache.flush('patterns');
	    };

	    /**
	     * @ignore
	     *
	     * Return a reference to the internal Unicode definition structure for the given Unicode
	     * Property if the given name is a legal Unicode Property for use in XRegExp `\p` or `\P` regex
	     * constructs.
	     *
	     * @memberOf XRegExp
	     * @param {String} name Name by which the Unicode Property may be recognized (case-insensitive),
	     *   e.g. `'N'` or `'Number'`. The given name is matched against all registered Unicode
	     *   Properties and Property Aliases.
	     * @returns {Object} Reference to definition structure when the name matches a Unicode Property.
	     *
	     * @note
	     * For more info on Unicode Properties, see also http://unicode.org/reports/tr18/#Categories.
	     *
	     * @note
	     * This method is *not* part of the officially documented API and may change or be removed in
	     * the future. It is meant for userland code that wishes to reuse the (large) internal Unicode
	     * structures set up by XRegExp.
	     */
	    XRegExp._getUnicodeProperty = (name) => {
	        const slug = normalize(name);
	        return unicode[slug];
	    };
	};

	var blocks = [
	    {
	        'name': 'InAdlam',
	        'astral': '\uD83A[\uDD00-\uDD5F]'
	    },
	    {
	        'name': 'InAegean_Numbers',
	        'astral': '\uD800[\uDD00-\uDD3F]'
	    },
	    {
	        'name': 'InAhom',
	        'astral': '\uD805[\uDF00-\uDF3F]'
	    },
	    {
	        'name': 'InAlchemical_Symbols',
	        'astral': '\uD83D[\uDF00-\uDF7F]'
	    },
	    {
	        'name': 'InAlphabetic_Presentation_Forms',
	        'bmp': '\uFB00-\uFB4F'
	    },
	    {
	        'name': 'InAnatolian_Hieroglyphs',
	        'astral': '\uD811[\uDC00-\uDE7F]'
	    },
	    {
	        'name': 'InAncient_Greek_Musical_Notation',
	        'astral': '\uD834[\uDE00-\uDE4F]'
	    },
	    {
	        'name': 'InAncient_Greek_Numbers',
	        'astral': '\uD800[\uDD40-\uDD8F]'
	    },
	    {
	        'name': 'InAncient_Symbols',
	        'astral': '\uD800[\uDD90-\uDDCF]'
	    },
	    {
	        'name': 'InArabic',
	        'bmp': '\u0600-\u06FF'
	    },
	    {
	        'name': 'InArabic_Extended_A',
	        'bmp': '\u08A0-\u08FF'
	    },
	    {
	        'name': 'InArabic_Mathematical_Alphabetic_Symbols',
	        'astral': '\uD83B[\uDE00-\uDEFF]'
	    },
	    {
	        'name': 'InArabic_Presentation_Forms_A',
	        'bmp': '\uFB50-\uFDFF'
	    },
	    {
	        'name': 'InArabic_Presentation_Forms_B',
	        'bmp': '\uFE70-\uFEFF'
	    },
	    {
	        'name': 'InArabic_Supplement',
	        'bmp': '\u0750-\u077F'
	    },
	    {
	        'name': 'InArmenian',
	        'bmp': '\u0530-\u058F'
	    },
	    {
	        'name': 'InArrows',
	        'bmp': '\u2190-\u21FF'
	    },
	    {
	        'name': 'InAvestan',
	        'astral': '\uD802[\uDF00-\uDF3F]'
	    },
	    {
	        'name': 'InBalinese',
	        'bmp': '\u1B00-\u1B7F'
	    },
	    {
	        'name': 'InBamum',
	        'bmp': '\uA6A0-\uA6FF'
	    },
	    {
	        'name': 'InBamum_Supplement',
	        'astral': '\uD81A[\uDC00-\uDE3F]'
	    },
	    {
	        'name': 'InBasic_Latin',
	        'bmp': '\0-\x7F'
	    },
	    {
	        'name': 'InBassa_Vah',
	        'astral': '\uD81A[\uDED0-\uDEFF]'
	    },
	    {
	        'name': 'InBatak',
	        'bmp': '\u1BC0-\u1BFF'
	    },
	    {
	        'name': 'InBengali',
	        'bmp': '\u0980-\u09FF'
	    },
	    {
	        'name': 'InBhaiksuki',
	        'astral': '\uD807[\uDC00-\uDC6F]'
	    },
	    {
	        'name': 'InBlock_Elements',
	        'bmp': '\u2580-\u259F'
	    },
	    {
	        'name': 'InBopomofo',
	        'bmp': '\u3100-\u312F'
	    },
	    {
	        'name': 'InBopomofo_Extended',
	        'bmp': '\u31A0-\u31BF'
	    },
	    {
	        'name': 'InBox_Drawing',
	        'bmp': '\u2500-\u257F'
	    },
	    {
	        'name': 'InBrahmi',
	        'astral': '\uD804[\uDC00-\uDC7F]'
	    },
	    {
	        'name': 'InBraille_Patterns',
	        'bmp': '\u2800-\u28FF'
	    },
	    {
	        'name': 'InBuginese',
	        'bmp': '\u1A00-\u1A1F'
	    },
	    {
	        'name': 'InBuhid',
	        'bmp': '\u1740-\u175F'
	    },
	    {
	        'name': 'InByzantine_Musical_Symbols',
	        'astral': '\uD834[\uDC00-\uDCFF]'
	    },
	    {
	        'name': 'InCJK_Compatibility',
	        'bmp': '\u3300-\u33FF'
	    },
	    {
	        'name': 'InCJK_Compatibility_Forms',
	        'bmp': '\uFE30-\uFE4F'
	    },
	    {
	        'name': 'InCJK_Compatibility_Ideographs',
	        'bmp': '\uF900-\uFAFF'
	    },
	    {
	        'name': 'InCJK_Compatibility_Ideographs_Supplement',
	        'astral': '\uD87E[\uDC00-\uDE1F]'
	    },
	    {
	        'name': 'InCJK_Radicals_Supplement',
	        'bmp': '\u2E80-\u2EFF'
	    },
	    {
	        'name': 'InCJK_Strokes',
	        'bmp': '\u31C0-\u31EF'
	    },
	    {
	        'name': 'InCJK_Symbols_And_Punctuation',
	        'bmp': '\u3000-\u303F'
	    },
	    {
	        'name': 'InCJK_Unified_Ideographs',
	        'bmp': '\u4E00-\u9FFF'
	    },
	    {
	        'name': 'InCJK_Unified_Ideographs_Extension_A',
	        'bmp': '\u3400-\u4DBF'
	    },
	    {
	        'name': 'InCJK_Unified_Ideographs_Extension_B',
	        'astral': '[\uD840-\uD868][\uDC00-\uDFFF]|\uD869[\uDC00-\uDEDF]'
	    },
	    {
	        'name': 'InCJK_Unified_Ideographs_Extension_C',
	        'astral': '\uD869[\uDF00-\uDFFF]|[\uD86A-\uD86C][\uDC00-\uDFFF]|\uD86D[\uDC00-\uDF3F]'
	    },
	    {
	        'name': 'InCJK_Unified_Ideographs_Extension_D',
	        'astral': '\uD86D[\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1F]'
	    },
	    {
	        'name': 'InCJK_Unified_Ideographs_Extension_E',
	        'astral': '\uD86E[\uDC20-\uDFFF]|[\uD86F-\uD872][\uDC00-\uDFFF]|\uD873[\uDC00-\uDEAF]'
	    },
	    {
	        'name': 'InCJK_Unified_Ideographs_Extension_F',
	        'astral': '\uD873[\uDEB0-\uDFFF]|[\uD874-\uD879][\uDC00-\uDFFF]|\uD87A[\uDC00-\uDFEF]'
	    },
	    {
	        'name': 'InCarian',
	        'astral': '\uD800[\uDEA0-\uDEDF]'
	    },
	    {
	        'name': 'InCaucasian_Albanian',
	        'astral': '\uD801[\uDD30-\uDD6F]'
	    },
	    {
	        'name': 'InChakma',
	        'astral': '\uD804[\uDD00-\uDD4F]'
	    },
	    {
	        'name': 'InCham',
	        'bmp': '\uAA00-\uAA5F'
	    },
	    {
	        'name': 'InCherokee',
	        'bmp': '\u13A0-\u13FF'
	    },
	    {
	        'name': 'InCherokee_Supplement',
	        'bmp': '\uAB70-\uABBF'
	    },
	    {
	        'name': 'InChess_Symbols',
	        'astral': '\uD83E[\uDE00-\uDE6F]'
	    },
	    {
	        'name': 'InCombining_Diacritical_Marks',
	        'bmp': '\u0300-\u036F'
	    },
	    {
	        'name': 'InCombining_Diacritical_Marks_Extended',
	        'bmp': '\u1AB0-\u1AFF'
	    },
	    {
	        'name': 'InCombining_Diacritical_Marks_For_Symbols',
	        'bmp': '\u20D0-\u20FF'
	    },
	    {
	        'name': 'InCombining_Diacritical_Marks_Supplement',
	        'bmp': '\u1DC0-\u1DFF'
	    },
	    {
	        'name': 'InCombining_Half_Marks',
	        'bmp': '\uFE20-\uFE2F'
	    },
	    {
	        'name': 'InCommon_Indic_Number_Forms',
	        'bmp': '\uA830-\uA83F'
	    },
	    {
	        'name': 'InControl_Pictures',
	        'bmp': '\u2400-\u243F'
	    },
	    {
	        'name': 'InCoptic',
	        'bmp': '\u2C80-\u2CFF'
	    },
	    {
	        'name': 'InCoptic_Epact_Numbers',
	        'astral': '\uD800[\uDEE0-\uDEFF]'
	    },
	    {
	        'name': 'InCounting_Rod_Numerals',
	        'astral': '\uD834[\uDF60-\uDF7F]'
	    },
	    {
	        'name': 'InCuneiform',
	        'astral': '\uD808[\uDC00-\uDFFF]'
	    },
	    {
	        'name': 'InCuneiform_Numbers_And_Punctuation',
	        'astral': '\uD809[\uDC00-\uDC7F]'
	    },
	    {
	        'name': 'InCurrency_Symbols',
	        'bmp': '\u20A0-\u20CF'
	    },
	    {
	        'name': 'InCypriot_Syllabary',
	        'astral': '\uD802[\uDC00-\uDC3F]'
	    },
	    {
	        'name': 'InCyrillic',
	        'bmp': '\u0400-\u04FF'
	    },
	    {
	        'name': 'InCyrillic_Extended_A',
	        'bmp': '\u2DE0-\u2DFF'
	    },
	    {
	        'name': 'InCyrillic_Extended_B',
	        'bmp': '\uA640-\uA69F'
	    },
	    {
	        'name': 'InCyrillic_Extended_C',
	        'bmp': '\u1C80-\u1C8F'
	    },
	    {
	        'name': 'InCyrillic_Supplement',
	        'bmp': '\u0500-\u052F'
	    },
	    {
	        'name': 'InDeseret',
	        'astral': '\uD801[\uDC00-\uDC4F]'
	    },
	    {
	        'name': 'InDevanagari',
	        'bmp': '\u0900-\u097F'
	    },
	    {
	        'name': 'InDevanagari_Extended',
	        'bmp': '\uA8E0-\uA8FF'
	    },
	    {
	        'name': 'InDingbats',
	        'bmp': '\u2700-\u27BF'
	    },
	    {
	        'name': 'InDogra',
	        'astral': '\uD806[\uDC00-\uDC4F]'
	    },
	    {
	        'name': 'InDomino_Tiles',
	        'astral': '\uD83C[\uDC30-\uDC9F]'
	    },
	    {
	        'name': 'InDuployan',
	        'astral': '\uD82F[\uDC00-\uDC9F]'
	    },
	    {
	        'name': 'InEarly_Dynastic_Cuneiform',
	        'astral': '\uD809[\uDC80-\uDD4F]'
	    },
	    {
	        'name': 'InEgyptian_Hieroglyphs',
	        'astral': '\uD80C[\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2F]'
	    },
	    {
	        'name': 'InElbasan',
	        'astral': '\uD801[\uDD00-\uDD2F]'
	    },
	    {
	        'name': 'InEmoticons',
	        'astral': '\uD83D[\uDE00-\uDE4F]'
	    },
	    {
	        'name': 'InEnclosed_Alphanumeric_Supplement',
	        'astral': '\uD83C[\uDD00-\uDDFF]'
	    },
	    {
	        'name': 'InEnclosed_Alphanumerics',
	        'bmp': '\u2460-\u24FF'
	    },
	    {
	        'name': 'InEnclosed_CJK_Letters_And_Months',
	        'bmp': '\u3200-\u32FF'
	    },
	    {
	        'name': 'InEnclosed_Ideographic_Supplement',
	        'astral': '\uD83C[\uDE00-\uDEFF]'
	    },
	    {
	        'name': 'InEthiopic',
	        'bmp': '\u1200-\u137F'
	    },
	    {
	        'name': 'InEthiopic_Extended',
	        'bmp': '\u2D80-\u2DDF'
	    },
	    {
	        'name': 'InEthiopic_Extended_A',
	        'bmp': '\uAB00-\uAB2F'
	    },
	    {
	        'name': 'InEthiopic_Supplement',
	        'bmp': '\u1380-\u139F'
	    },
	    {
	        'name': 'InGeneral_Punctuation',
	        'bmp': '\u2000-\u206F'
	    },
	    {
	        'name': 'InGeometric_Shapes',
	        'bmp': '\u25A0-\u25FF'
	    },
	    {
	        'name': 'InGeometric_Shapes_Extended',
	        'astral': '\uD83D[\uDF80-\uDFFF]'
	    },
	    {
	        'name': 'InGeorgian',
	        'bmp': '\u10A0-\u10FF'
	    },
	    {
	        'name': 'InGeorgian_Extended',
	        'bmp': '\u1C90-\u1CBF'
	    },
	    {
	        'name': 'InGeorgian_Supplement',
	        'bmp': '\u2D00-\u2D2F'
	    },
	    {
	        'name': 'InGlagolitic',
	        'bmp': '\u2C00-\u2C5F'
	    },
	    {
	        'name': 'InGlagolitic_Supplement',
	        'astral': '\uD838[\uDC00-\uDC2F]'
	    },
	    {
	        'name': 'InGothic',
	        'astral': '\uD800[\uDF30-\uDF4F]'
	    },
	    {
	        'name': 'InGrantha',
	        'astral': '\uD804[\uDF00-\uDF7F]'
	    },
	    {
	        'name': 'InGreek_And_Coptic',
	        'bmp': '\u0370-\u03FF'
	    },
	    {
	        'name': 'InGreek_Extended',
	        'bmp': '\u1F00-\u1FFF'
	    },
	    {
	        'name': 'InGujarati',
	        'bmp': '\u0A80-\u0AFF'
	    },
	    {
	        'name': 'InGunjala_Gondi',
	        'astral': '\uD807[\uDD60-\uDDAF]'
	    },
	    {
	        'name': 'InGurmukhi',
	        'bmp': '\u0A00-\u0A7F'
	    },
	    {
	        'name': 'InHalfwidth_And_Fullwidth_Forms',
	        'bmp': '\uFF00-\uFFEF'
	    },
	    {
	        'name': 'InHangul_Compatibility_Jamo',
	        'bmp': '\u3130-\u318F'
	    },
	    {
	        'name': 'InHangul_Jamo',
	        'bmp': '\u1100-\u11FF'
	    },
	    {
	        'name': 'InHangul_Jamo_Extended_A',
	        'bmp': '\uA960-\uA97F'
	    },
	    {
	        'name': 'InHangul_Jamo_Extended_B',
	        'bmp': '\uD7B0-\uD7FF'
	    },
	    {
	        'name': 'InHangul_Syllables',
	        'bmp': '\uAC00-\uD7AF'
	    },
	    {
	        'name': 'InHanifi_Rohingya',
	        'astral': '\uD803[\uDD00-\uDD3F]'
	    },
	    {
	        'name': 'InHanunoo',
	        'bmp': '\u1720-\u173F'
	    },
	    {
	        'name': 'InHatran',
	        'astral': '\uD802[\uDCE0-\uDCFF]'
	    },
	    {
	        'name': 'InHebrew',
	        'bmp': '\u0590-\u05FF'
	    },
	    {
	        'name': 'InHigh_Private_Use_Surrogates',
	        'bmp': '\uDB80-\uDBFF'
	    },
	    {
	        'name': 'InHigh_Surrogates',
	        'bmp': '\uD800-\uDB7F'
	    },
	    {
	        'name': 'InHiragana',
	        'bmp': '\u3040-\u309F'
	    },
	    {
	        'name': 'InIPA_Extensions',
	        'bmp': '\u0250-\u02AF'
	    },
	    {
	        'name': 'InIdeographic_Description_Characters',
	        'bmp': '\u2FF0-\u2FFF'
	    },
	    {
	        'name': 'InIdeographic_Symbols_And_Punctuation',
	        'astral': '\uD81B[\uDFE0-\uDFFF]'
	    },
	    {
	        'name': 'InImperial_Aramaic',
	        'astral': '\uD802[\uDC40-\uDC5F]'
	    },
	    {
	        'name': 'InIndic_Siyaq_Numbers',
	        'astral': '\uD83B[\uDC70-\uDCBF]'
	    },
	    {
	        'name': 'InInscriptional_Pahlavi',
	        'astral': '\uD802[\uDF60-\uDF7F]'
	    },
	    {
	        'name': 'InInscriptional_Parthian',
	        'astral': '\uD802[\uDF40-\uDF5F]'
	    },
	    {
	        'name': 'InJavanese',
	        'bmp': '\uA980-\uA9DF'
	    },
	    {
	        'name': 'InKaithi',
	        'astral': '\uD804[\uDC80-\uDCCF]'
	    },
	    {
	        'name': 'InKana_Extended_A',
	        'astral': '\uD82C[\uDD00-\uDD2F]'
	    },
	    {
	        'name': 'InKana_Supplement',
	        'astral': '\uD82C[\uDC00-\uDCFF]'
	    },
	    {
	        'name': 'InKanbun',
	        'bmp': '\u3190-\u319F'
	    },
	    {
	        'name': 'InKangxi_Radicals',
	        'bmp': '\u2F00-\u2FDF'
	    },
	    {
	        'name': 'InKannada',
	        'bmp': '\u0C80-\u0CFF'
	    },
	    {
	        'name': 'InKatakana',
	        'bmp': '\u30A0-\u30FF'
	    },
	    {
	        'name': 'InKatakana_Phonetic_Extensions',
	        'bmp': '\u31F0-\u31FF'
	    },
	    {
	        'name': 'InKayah_Li',
	        'bmp': '\uA900-\uA92F'
	    },
	    {
	        'name': 'InKharoshthi',
	        'astral': '\uD802[\uDE00-\uDE5F]'
	    },
	    {
	        'name': 'InKhmer',
	        'bmp': '\u1780-\u17FF'
	    },
	    {
	        'name': 'InKhmer_Symbols',
	        'bmp': '\u19E0-\u19FF'
	    },
	    {
	        'name': 'InKhojki',
	        'astral': '\uD804[\uDE00-\uDE4F]'
	    },
	    {
	        'name': 'InKhudawadi',
	        'astral': '\uD804[\uDEB0-\uDEFF]'
	    },
	    {
	        'name': 'InLao',
	        'bmp': '\u0E80-\u0EFF'
	    },
	    {
	        'name': 'InLatin_1_Supplement',
	        'bmp': '\x80-\xFF'
	    },
	    {
	        'name': 'InLatin_Extended_A',
	        'bmp': '\u0100-\u017F'
	    },
	    {
	        'name': 'InLatin_Extended_Additional',
	        'bmp': '\u1E00-\u1EFF'
	    },
	    {
	        'name': 'InLatin_Extended_B',
	        'bmp': '\u0180-\u024F'
	    },
	    {
	        'name': 'InLatin_Extended_C',
	        'bmp': '\u2C60-\u2C7F'
	    },
	    {
	        'name': 'InLatin_Extended_D',
	        'bmp': '\uA720-\uA7FF'
	    },
	    {
	        'name': 'InLatin_Extended_E',
	        'bmp': '\uAB30-\uAB6F'
	    },
	    {
	        'name': 'InLepcha',
	        'bmp': '\u1C00-\u1C4F'
	    },
	    {
	        'name': 'InLetterlike_Symbols',
	        'bmp': '\u2100-\u214F'
	    },
	    {
	        'name': 'InLimbu',
	        'bmp': '\u1900-\u194F'
	    },
	    {
	        'name': 'InLinear_A',
	        'astral': '\uD801[\uDE00-\uDF7F]'
	    },
	    {
	        'name': 'InLinear_B_Ideograms',
	        'astral': '\uD800[\uDC80-\uDCFF]'
	    },
	    {
	        'name': 'InLinear_B_Syllabary',
	        'astral': '\uD800[\uDC00-\uDC7F]'
	    },
	    {
	        'name': 'InLisu',
	        'bmp': '\uA4D0-\uA4FF'
	    },
	    {
	        'name': 'InLow_Surrogates',
	        'bmp': '\uDC00-\uDFFF'
	    },
	    {
	        'name': 'InLycian',
	        'astral': '\uD800[\uDE80-\uDE9F]'
	    },
	    {
	        'name': 'InLydian',
	        'astral': '\uD802[\uDD20-\uDD3F]'
	    },
	    {
	        'name': 'InMahajani',
	        'astral': '\uD804[\uDD50-\uDD7F]'
	    },
	    {
	        'name': 'InMahjong_Tiles',
	        'astral': '\uD83C[\uDC00-\uDC2F]'
	    },
	    {
	        'name': 'InMakasar',
	        'astral': '\uD807[\uDEE0-\uDEFF]'
	    },
	    {
	        'name': 'InMalayalam',
	        'bmp': '\u0D00-\u0D7F'
	    },
	    {
	        'name': 'InMandaic',
	        'bmp': '\u0840-\u085F'
	    },
	    {
	        'name': 'InManichaean',
	        'astral': '\uD802[\uDEC0-\uDEFF]'
	    },
	    {
	        'name': 'InMarchen',
	        'astral': '\uD807[\uDC70-\uDCBF]'
	    },
	    {
	        'name': 'InMasaram_Gondi',
	        'astral': '\uD807[\uDD00-\uDD5F]'
	    },
	    {
	        'name': 'InMathematical_Alphanumeric_Symbols',
	        'astral': '\uD835[\uDC00-\uDFFF]'
	    },
	    {
	        'name': 'InMathematical_Operators',
	        'bmp': '\u2200-\u22FF'
	    },
	    {
	        'name': 'InMayan_Numerals',
	        'astral': '\uD834[\uDEE0-\uDEFF]'
	    },
	    {
	        'name': 'InMedefaidrin',
	        'astral': '\uD81B[\uDE40-\uDE9F]'
	    },
	    {
	        'name': 'InMeetei_Mayek',
	        'bmp': '\uABC0-\uABFF'
	    },
	    {
	        'name': 'InMeetei_Mayek_Extensions',
	        'bmp': '\uAAE0-\uAAFF'
	    },
	    {
	        'name': 'InMende_Kikakui',
	        'astral': '\uD83A[\uDC00-\uDCDF]'
	    },
	    {
	        'name': 'InMeroitic_Cursive',
	        'astral': '\uD802[\uDDA0-\uDDFF]'
	    },
	    {
	        'name': 'InMeroitic_Hieroglyphs',
	        'astral': '\uD802[\uDD80-\uDD9F]'
	    },
	    {
	        'name': 'InMiao',
	        'astral': '\uD81B[\uDF00-\uDF9F]'
	    },
	    {
	        'name': 'InMiscellaneous_Mathematical_Symbols_A',
	        'bmp': '\u27C0-\u27EF'
	    },
	    {
	        'name': 'InMiscellaneous_Mathematical_Symbols_B',
	        'bmp': '\u2980-\u29FF'
	    },
	    {
	        'name': 'InMiscellaneous_Symbols',
	        'bmp': '\u2600-\u26FF'
	    },
	    {
	        'name': 'InMiscellaneous_Symbols_And_Arrows',
	        'bmp': '\u2B00-\u2BFF'
	    },
	    {
	        'name': 'InMiscellaneous_Symbols_And_Pictographs',
	        'astral': '\uD83C[\uDF00-\uDFFF]|\uD83D[\uDC00-\uDDFF]'
	    },
	    {
	        'name': 'InMiscellaneous_Technical',
	        'bmp': '\u2300-\u23FF'
	    },
	    {
	        'name': 'InModi',
	        'astral': '\uD805[\uDE00-\uDE5F]'
	    },
	    {
	        'name': 'InModifier_Tone_Letters',
	        'bmp': '\uA700-\uA71F'
	    },
	    {
	        'name': 'InMongolian',
	        'bmp': '\u1800-\u18AF'
	    },
	    {
	        'name': 'InMongolian_Supplement',
	        'astral': '\uD805[\uDE60-\uDE7F]'
	    },
	    {
	        'name': 'InMro',
	        'astral': '\uD81A[\uDE40-\uDE6F]'
	    },
	    {
	        'name': 'InMultani',
	        'astral': '\uD804[\uDE80-\uDEAF]'
	    },
	    {
	        'name': 'InMusical_Symbols',
	        'astral': '\uD834[\uDD00-\uDDFF]'
	    },
	    {
	        'name': 'InMyanmar',
	        'bmp': '\u1000-\u109F'
	    },
	    {
	        'name': 'InMyanmar_Extended_A',
	        'bmp': '\uAA60-\uAA7F'
	    },
	    {
	        'name': 'InMyanmar_Extended_B',
	        'bmp': '\uA9E0-\uA9FF'
	    },
	    {
	        'name': 'InNKo',
	        'bmp': '\u07C0-\u07FF'
	    },
	    {
	        'name': 'InNabataean',
	        'astral': '\uD802[\uDC80-\uDCAF]'
	    },
	    {
	        'name': 'InNew_Tai_Lue',
	        'bmp': '\u1980-\u19DF'
	    },
	    {
	        'name': 'InNewa',
	        'astral': '\uD805[\uDC00-\uDC7F]'
	    },
	    {
	        'name': 'InNumber_Forms',
	        'bmp': '\u2150-\u218F'
	    },
	    {
	        'name': 'InNushu',
	        'astral': '\uD82C[\uDD70-\uDEFF]'
	    },
	    {
	        'name': 'InOgham',
	        'bmp': '\u1680-\u169F'
	    },
	    {
	        'name': 'InOl_Chiki',
	        'bmp': '\u1C50-\u1C7F'
	    },
	    {
	        'name': 'InOld_Hungarian',
	        'astral': '\uD803[\uDC80-\uDCFF]'
	    },
	    {
	        'name': 'InOld_Italic',
	        'astral': '\uD800[\uDF00-\uDF2F]'
	    },
	    {
	        'name': 'InOld_North_Arabian',
	        'astral': '\uD802[\uDE80-\uDE9F]'
	    },
	    {
	        'name': 'InOld_Permic',
	        'astral': '\uD800[\uDF50-\uDF7F]'
	    },
	    {
	        'name': 'InOld_Persian',
	        'astral': '\uD800[\uDFA0-\uDFDF]'
	    },
	    {
	        'name': 'InOld_Sogdian',
	        'astral': '\uD803[\uDF00-\uDF2F]'
	    },
	    {
	        'name': 'InOld_South_Arabian',
	        'astral': '\uD802[\uDE60-\uDE7F]'
	    },
	    {
	        'name': 'InOld_Turkic',
	        'astral': '\uD803[\uDC00-\uDC4F]'
	    },
	    {
	        'name': 'InOptical_Character_Recognition',
	        'bmp': '\u2440-\u245F'
	    },
	    {
	        'name': 'InOriya',
	        'bmp': '\u0B00-\u0B7F'
	    },
	    {
	        'name': 'InOrnamental_Dingbats',
	        'astral': '\uD83D[\uDE50-\uDE7F]'
	    },
	    {
	        'name': 'InOsage',
	        'astral': '\uD801[\uDCB0-\uDCFF]'
	    },
	    {
	        'name': 'InOsmanya',
	        'astral': '\uD801[\uDC80-\uDCAF]'
	    },
	    {
	        'name': 'InPahawh_Hmong',
	        'astral': '\uD81A[\uDF00-\uDF8F]'
	    },
	    {
	        'name': 'InPalmyrene',
	        'astral': '\uD802[\uDC60-\uDC7F]'
	    },
	    {
	        'name': 'InPau_Cin_Hau',
	        'astral': '\uD806[\uDEC0-\uDEFF]'
	    },
	    {
	        'name': 'InPhags_Pa',
	        'bmp': '\uA840-\uA87F'
	    },
	    {
	        'name': 'InPhaistos_Disc',
	        'astral': '\uD800[\uDDD0-\uDDFF]'
	    },
	    {
	        'name': 'InPhoenician',
	        'astral': '\uD802[\uDD00-\uDD1F]'
	    },
	    {
	        'name': 'InPhonetic_Extensions',
	        'bmp': '\u1D00-\u1D7F'
	    },
	    {
	        'name': 'InPhonetic_Extensions_Supplement',
	        'bmp': '\u1D80-\u1DBF'
	    },
	    {
	        'name': 'InPlaying_Cards',
	        'astral': '\uD83C[\uDCA0-\uDCFF]'
	    },
	    {
	        'name': 'InPrivate_Use_Area',
	        'bmp': '\uE000-\uF8FF'
	    },
	    {
	        'name': 'InPsalter_Pahlavi',
	        'astral': '\uD802[\uDF80-\uDFAF]'
	    },
	    {
	        'name': 'InRejang',
	        'bmp': '\uA930-\uA95F'
	    },
	    {
	        'name': 'InRumi_Numeral_Symbols',
	        'astral': '\uD803[\uDE60-\uDE7F]'
	    },
	    {
	        'name': 'InRunic',
	        'bmp': '\u16A0-\u16FF'
	    },
	    {
	        'name': 'InSamaritan',
	        'bmp': '\u0800-\u083F'
	    },
	    {
	        'name': 'InSaurashtra',
	        'bmp': '\uA880-\uA8DF'
	    },
	    {
	        'name': 'InSharada',
	        'astral': '\uD804[\uDD80-\uDDDF]'
	    },
	    {
	        'name': 'InShavian',
	        'astral': '\uD801[\uDC50-\uDC7F]'
	    },
	    {
	        'name': 'InShorthand_Format_Controls',
	        'astral': '\uD82F[\uDCA0-\uDCAF]'
	    },
	    {
	        'name': 'InSiddham',
	        'astral': '\uD805[\uDD80-\uDDFF]'
	    },
	    {
	        'name': 'InSinhala',
	        'bmp': '\u0D80-\u0DFF'
	    },
	    {
	        'name': 'InSinhala_Archaic_Numbers',
	        'astral': '\uD804[\uDDE0-\uDDFF]'
	    },
	    {
	        'name': 'InSmall_Form_Variants',
	        'bmp': '\uFE50-\uFE6F'
	    },
	    {
	        'name': 'InSogdian',
	        'astral': '\uD803[\uDF30-\uDF6F]'
	    },
	    {
	        'name': 'InSora_Sompeng',
	        'astral': '\uD804[\uDCD0-\uDCFF]'
	    },
	    {
	        'name': 'InSoyombo',
	        'astral': '\uD806[\uDE50-\uDEAF]'
	    },
	    {
	        'name': 'InSpacing_Modifier_Letters',
	        'bmp': '\u02B0-\u02FF'
	    },
	    {
	        'name': 'InSpecials',
	        'bmp': '\uFFF0-\uFFFF'
	    },
	    {
	        'name': 'InSundanese',
	        'bmp': '\u1B80-\u1BBF'
	    },
	    {
	        'name': 'InSundanese_Supplement',
	        'bmp': '\u1CC0-\u1CCF'
	    },
	    {
	        'name': 'InSuperscripts_And_Subscripts',
	        'bmp': '\u2070-\u209F'
	    },
	    {
	        'name': 'InSupplemental_Arrows_A',
	        'bmp': '\u27F0-\u27FF'
	    },
	    {
	        'name': 'InSupplemental_Arrows_B',
	        'bmp': '\u2900-\u297F'
	    },
	    {
	        'name': 'InSupplemental_Arrows_C',
	        'astral': '\uD83E[\uDC00-\uDCFF]'
	    },
	    {
	        'name': 'InSupplemental_Mathematical_Operators',
	        'bmp': '\u2A00-\u2AFF'
	    },
	    {
	        'name': 'InSupplemental_Punctuation',
	        'bmp': '\u2E00-\u2E7F'
	    },
	    {
	        'name': 'InSupplemental_Symbols_And_Pictographs',
	        'astral': '\uD83E[\uDD00-\uDDFF]'
	    },
	    {
	        'name': 'InSupplementary_Private_Use_Area_A',
	        'astral': '[\uDB80-\uDBBF][\uDC00-\uDFFF]'
	    },
	    {
	        'name': 'InSupplementary_Private_Use_Area_B',
	        'astral': '[\uDBC0-\uDBFF][\uDC00-\uDFFF]'
	    },
	    {
	        'name': 'InSutton_SignWriting',
	        'astral': '\uD836[\uDC00-\uDEAF]'
	    },
	    {
	        'name': 'InSyloti_Nagri',
	        'bmp': '\uA800-\uA82F'
	    },
	    {
	        'name': 'InSyriac',
	        'bmp': '\u0700-\u074F'
	    },
	    {
	        'name': 'InSyriac_Supplement',
	        'bmp': '\u0860-\u086F'
	    },
	    {
	        'name': 'InTagalog',
	        'bmp': '\u1700-\u171F'
	    },
	    {
	        'name': 'InTagbanwa',
	        'bmp': '\u1760-\u177F'
	    },
	    {
	        'name': 'InTags',
	        'astral': '\uDB40[\uDC00-\uDC7F]'
	    },
	    {
	        'name': 'InTai_Le',
	        'bmp': '\u1950-\u197F'
	    },
	    {
	        'name': 'InTai_Tham',
	        'bmp': '\u1A20-\u1AAF'
	    },
	    {
	        'name': 'InTai_Viet',
	        'bmp': '\uAA80-\uAADF'
	    },
	    {
	        'name': 'InTai_Xuan_Jing_Symbols',
	        'astral': '\uD834[\uDF00-\uDF5F]'
	    },
	    {
	        'name': 'InTakri',
	        'astral': '\uD805[\uDE80-\uDECF]'
	    },
	    {
	        'name': 'InTamil',
	        'bmp': '\u0B80-\u0BFF'
	    },
	    {
	        'name': 'InTangut',
	        'astral': '[\uD81C-\uD821][\uDC00-\uDFFF]'
	    },
	    {
	        'name': 'InTangut_Components',
	        'astral': '\uD822[\uDC00-\uDEFF]'
	    },
	    {
	        'name': 'InTelugu',
	        'bmp': '\u0C00-\u0C7F'
	    },
	    {
	        'name': 'InThaana',
	        'bmp': '\u0780-\u07BF'
	    },
	    {
	        'name': 'InThai',
	        'bmp': '\u0E00-\u0E7F'
	    },
	    {
	        'name': 'InTibetan',
	        'bmp': '\u0F00-\u0FFF'
	    },
	    {
	        'name': 'InTifinagh',
	        'bmp': '\u2D30-\u2D7F'
	    },
	    {
	        'name': 'InTirhuta',
	        'astral': '\uD805[\uDC80-\uDCDF]'
	    },
	    {
	        'name': 'InTransport_And_Map_Symbols',
	        'astral': '\uD83D[\uDE80-\uDEFF]'
	    },
	    {
	        'name': 'InUgaritic',
	        'astral': '\uD800[\uDF80-\uDF9F]'
	    },
	    {
	        'name': 'InUnified_Canadian_Aboriginal_Syllabics',
	        'bmp': '\u1400-\u167F'
	    },
	    {
	        'name': 'InUnified_Canadian_Aboriginal_Syllabics_Extended',
	        'bmp': '\u18B0-\u18FF'
	    },
	    {
	        'name': 'InVai',
	        'bmp': '\uA500-\uA63F'
	    },
	    {
	        'name': 'InVariation_Selectors',
	        'bmp': '\uFE00-\uFE0F'
	    },
	    {
	        'name': 'InVariation_Selectors_Supplement',
	        'astral': '\uDB40[\uDD00-\uDDEF]'
	    },
	    {
	        'name': 'InVedic_Extensions',
	        'bmp': '\u1CD0-\u1CFF'
	    },
	    {
	        'name': 'InVertical_Forms',
	        'bmp': '\uFE10-\uFE1F'
	    },
	    {
	        'name': 'InWarang_Citi',
	        'astral': '\uD806[\uDCA0-\uDCFF]'
	    },
	    {
	        'name': 'InYi_Radicals',
	        'bmp': '\uA490-\uA4CF'
	    },
	    {
	        'name': 'InYi_Syllables',
	        'bmp': '\uA000-\uA48F'
	    },
	    {
	        'name': 'InYijing_Hexagram_Symbols',
	        'bmp': '\u4DC0-\u4DFF'
	    },
	    {
	        'name': 'InZanabazar_Square',
	        'astral': '\uD806[\uDE00-\uDE4F]'
	    },
	    {
	        'name': 'Inundefined',
	        'astral': '\uD803[\uDE80-\uDEBF\uDFB0-\uDFFF]|\uD806[\uDD00-\uDD5F\uDDA0-\uDDFF]|\uD807[\uDFB0-\uDFFF]|\uD80D[\uDC30-\uDC3F]|\uD822[\uDF00-\uDFFF]|\uD823[\uDC00-\uDD8F]|\uD82C[\uDD30-\uDD6F]|\uD838[\uDD00-\uDD4F\uDEC0-\uDEFF]|\uD83B[\uDD00-\uDD4F]|\uD83E[\uDE70-\uDFFF]|[\uD880-\uD883][\uDC00-\uDFFF]|\uD884[\uDC00-\uDF4F]'
	    }
	];

	/*!
	 * XRegExp Unicode Blocks 4.4.1
	 * <xregexp.com>
	 * Steven Levithan (c) 2010-present MIT License
	 * Unicode data by Mathias Bynens <mathiasbynens.be>
	 */

	var unicodeBlocks = (XRegExp) => {

	    /**
	     * Adds support for all Unicode blocks. Block names use the prefix 'In'. E.g.,
	     * `\p{InBasicLatin}`. Token names are case insensitive, and any spaces, hyphens, and
	     * underscores are ignored.
	     *
	     * Uses Unicode 13.0.0.
	     *
	     * @requires XRegExp, Unicode Base
	     */

	    if (!XRegExp.addUnicodeData) {
	        throw new ReferenceError('Unicode Base must be loaded before Unicode Blocks');
	    }

	    XRegExp.addUnicodeData(blocks);
	};

	var categories = [
	    {
	        'name': 'C',
	        'alias': 'Other',
	        'isBmpLast': true,
	        'bmp': '\0-\x1F\x7F-\x9F\xAD\u0378\u0379\u0380-\u0383\u038B\u038D\u03A2\u0530\u0557\u0558\u058B\u058C\u0590\u05C8-\u05CF\u05EB-\u05EE\u05F5-\u0605\u061C\u061D\u06DD\u070E\u070F\u074B\u074C\u07B2-\u07BF\u07FB\u07FC\u082E\u082F\u083F\u085C\u085D\u085F\u086B-\u089F\u08B5\u08C8-\u08D2\u08E2\u0984\u098D\u098E\u0991\u0992\u09A9\u09B1\u09B3-\u09B5\u09BA\u09BB\u09C5\u09C6\u09C9\u09CA\u09CF-\u09D6\u09D8-\u09DB\u09DE\u09E4\u09E5\u09FF\u0A00\u0A04\u0A0B-\u0A0E\u0A11\u0A12\u0A29\u0A31\u0A34\u0A37\u0A3A\u0A3B\u0A3D\u0A43-\u0A46\u0A49\u0A4A\u0A4E-\u0A50\u0A52-\u0A58\u0A5D\u0A5F-\u0A65\u0A77-\u0A80\u0A84\u0A8E\u0A92\u0AA9\u0AB1\u0AB4\u0ABA\u0ABB\u0AC6\u0ACA\u0ACE\u0ACF\u0AD1-\u0ADF\u0AE4\u0AE5\u0AF2-\u0AF8\u0B00\u0B04\u0B0D\u0B0E\u0B11\u0B12\u0B29\u0B31\u0B34\u0B3A\u0B3B\u0B45\u0B46\u0B49\u0B4A\u0B4E-\u0B54\u0B58-\u0B5B\u0B5E\u0B64\u0B65\u0B78-\u0B81\u0B84\u0B8B-\u0B8D\u0B91\u0B96-\u0B98\u0B9B\u0B9D\u0BA0-\u0BA2\u0BA5-\u0BA7\u0BAB-\u0BAD\u0BBA-\u0BBD\u0BC3-\u0BC5\u0BC9\u0BCE\u0BCF\u0BD1-\u0BD6\u0BD8-\u0BE5\u0BFB-\u0BFF\u0C0D\u0C11\u0C29\u0C3A-\u0C3C\u0C45\u0C49\u0C4E-\u0C54\u0C57\u0C5B-\u0C5F\u0C64\u0C65\u0C70-\u0C76\u0C8D\u0C91\u0CA9\u0CB4\u0CBA\u0CBB\u0CC5\u0CC9\u0CCE-\u0CD4\u0CD7-\u0CDD\u0CDF\u0CE4\u0CE5\u0CF0\u0CF3-\u0CFF\u0D0D\u0D11\u0D45\u0D49\u0D50-\u0D53\u0D64\u0D65\u0D80\u0D84\u0D97-\u0D99\u0DB2\u0DBC\u0DBE\u0DBF\u0DC7-\u0DC9\u0DCB-\u0DCE\u0DD5\u0DD7\u0DE0-\u0DE5\u0DF0\u0DF1\u0DF5-\u0E00\u0E3B-\u0E3E\u0E5C-\u0E80\u0E83\u0E85\u0E8B\u0EA4\u0EA6\u0EBE\u0EBF\u0EC5\u0EC7\u0ECE\u0ECF\u0EDA\u0EDB\u0EE0-\u0EFF\u0F48\u0F6D-\u0F70\u0F98\u0FBD\u0FCD\u0FDB-\u0FFF\u10C6\u10C8-\u10CC\u10CE\u10CF\u1249\u124E\u124F\u1257\u1259\u125E\u125F\u1289\u128E\u128F\u12B1\u12B6\u12B7\u12BF\u12C1\u12C6\u12C7\u12D7\u1311\u1316\u1317\u135B\u135C\u137D-\u137F\u139A-\u139F\u13F6\u13F7\u13FE\u13FF\u169D-\u169F\u16F9-\u16FF\u170D\u1715-\u171F\u1737-\u173F\u1754-\u175F\u176D\u1771\u1774-\u177F\u17DE\u17DF\u17EA-\u17EF\u17FA-\u17FF\u180E\u180F\u181A-\u181F\u1879-\u187F\u18AB-\u18AF\u18F6-\u18FF\u191F\u192C-\u192F\u193C-\u193F\u1941-\u1943\u196E\u196F\u1975-\u197F\u19AC-\u19AF\u19CA-\u19CF\u19DB-\u19DD\u1A1C\u1A1D\u1A5F\u1A7D\u1A7E\u1A8A-\u1A8F\u1A9A-\u1A9F\u1AAE\u1AAF\u1AC1-\u1AFF\u1B4C-\u1B4F\u1B7D-\u1B7F\u1BF4-\u1BFB\u1C38-\u1C3A\u1C4A-\u1C4C\u1C89-\u1C8F\u1CBB\u1CBC\u1CC8-\u1CCF\u1CFB-\u1CFF\u1DFA\u1F16\u1F17\u1F1E\u1F1F\u1F46\u1F47\u1F4E\u1F4F\u1F58\u1F5A\u1F5C\u1F5E\u1F7E\u1F7F\u1FB5\u1FC5\u1FD4\u1FD5\u1FDC\u1FF0\u1FF1\u1FF5\u1FFF\u200B-\u200F\u202A-\u202E\u2060-\u206F\u2072\u2073\u208F\u209D-\u209F\u20C0-\u20CF\u20F1-\u20FF\u218C-\u218F\u2427-\u243F\u244B-\u245F\u2B74\u2B75\u2B96\u2C2F\u2C5F\u2CF4-\u2CF8\u2D26\u2D28-\u2D2C\u2D2E\u2D2F\u2D68-\u2D6E\u2D71-\u2D7E\u2D97-\u2D9F\u2DA7\u2DAF\u2DB7\u2DBF\u2DC7\u2DCF\u2DD7\u2DDF\u2E53-\u2E7F\u2E9A\u2EF4-\u2EFF\u2FD6-\u2FEF\u2FFC-\u2FFF\u3040\u3097\u3098\u3100-\u3104\u3130\u318F\u31E4-\u31EF\u321F\u9FFD-\u9FFF\uA48D-\uA48F\uA4C7-\uA4CF\uA62C-\uA63F\uA6F8-\uA6FF\uA7C0\uA7C1\uA7CB-\uA7F4\uA82D-\uA82F\uA83A-\uA83F\uA878-\uA87F\uA8C6-\uA8CD\uA8DA-\uA8DF\uA954-\uA95E\uA97D-\uA97F\uA9CE\uA9DA-\uA9DD\uA9FF\uAA37-\uAA3F\uAA4E\uAA4F\uAA5A\uAA5B\uAAC3-\uAADA\uAAF7-\uAB00\uAB07\uAB08\uAB0F\uAB10\uAB17-\uAB1F\uAB27\uAB2F\uAB6C-\uAB6F\uABEE\uABEF\uABFA-\uABFF\uD7A4-\uD7AF\uD7C7-\uD7CA\uD7FC-\uF8FF\uFA6E\uFA6F\uFADA-\uFAFF\uFB07-\uFB12\uFB18-\uFB1C\uFB37\uFB3D\uFB3F\uFB42\uFB45\uFBC2-\uFBD2\uFD40-\uFD4F\uFD90\uFD91\uFDC8-\uFDEF\uFDFE\uFDFF\uFE1A-\uFE1F\uFE53\uFE67\uFE6C-\uFE6F\uFE75\uFEFD-\uFF00\uFFBF-\uFFC1\uFFC8\uFFC9\uFFD0\uFFD1\uFFD8\uFFD9\uFFDD-\uFFDF\uFFE7\uFFEF-\uFFFB\uFFFE\uFFFF',
	        'astral': '\uD800[\uDC0C\uDC27\uDC3B\uDC3E\uDC4E\uDC4F\uDC5E-\uDC7F\uDCFB-\uDCFF\uDD03-\uDD06\uDD34-\uDD36\uDD8F\uDD9D-\uDD9F\uDDA1-\uDDCF\uDDFE-\uDE7F\uDE9D-\uDE9F\uDED1-\uDEDF\uDEFC-\uDEFF\uDF24-\uDF2C\uDF4B-\uDF4F\uDF7B-\uDF7F\uDF9E\uDFC4-\uDFC7\uDFD6-\uDFFF]|\uD801[\uDC9E\uDC9F\uDCAA-\uDCAF\uDCD4-\uDCD7\uDCFC-\uDCFF\uDD28-\uDD2F\uDD64-\uDD6E\uDD70-\uDDFF\uDF37-\uDF3F\uDF56-\uDF5F\uDF68-\uDFFF]|\uD802[\uDC06\uDC07\uDC09\uDC36\uDC39-\uDC3B\uDC3D\uDC3E\uDC56\uDC9F-\uDCA6\uDCB0-\uDCDF\uDCF3\uDCF6-\uDCFA\uDD1C-\uDD1E\uDD3A-\uDD3E\uDD40-\uDD7F\uDDB8-\uDDBB\uDDD0\uDDD1\uDE04\uDE07-\uDE0B\uDE14\uDE18\uDE36\uDE37\uDE3B-\uDE3E\uDE49-\uDE4F\uDE59-\uDE5F\uDEA0-\uDEBF\uDEE7-\uDEEA\uDEF7-\uDEFF\uDF36-\uDF38\uDF56\uDF57\uDF73-\uDF77\uDF92-\uDF98\uDF9D-\uDFA8\uDFB0-\uDFFF]|\uD803[\uDC49-\uDC7F\uDCB3-\uDCBF\uDCF3-\uDCF9\uDD28-\uDD2F\uDD3A-\uDE5F\uDE7F\uDEAA\uDEAE\uDEAF\uDEB2-\uDEFF\uDF28-\uDF2F\uDF5A-\uDFAF\uDFCC-\uDFDF\uDFF7-\uDFFF]|\uD804[\uDC4E-\uDC51\uDC70-\uDC7E\uDCBD\uDCC2-\uDCCF\uDCE9-\uDCEF\uDCFA-\uDCFF\uDD35\uDD48-\uDD4F\uDD77-\uDD7F\uDDE0\uDDF5-\uDDFF\uDE12\uDE3F-\uDE7F\uDE87\uDE89\uDE8E\uDE9E\uDEAA-\uDEAF\uDEEB-\uDEEF\uDEFA-\uDEFF\uDF04\uDF0D\uDF0E\uDF11\uDF12\uDF29\uDF31\uDF34\uDF3A\uDF45\uDF46\uDF49\uDF4A\uDF4E\uDF4F\uDF51-\uDF56\uDF58-\uDF5C\uDF64\uDF65\uDF6D-\uDF6F\uDF75-\uDFFF]|\uD805[\uDC5C\uDC62-\uDC7F\uDCC8-\uDCCF\uDCDA-\uDD7F\uDDB6\uDDB7\uDDDE-\uDDFF\uDE45-\uDE4F\uDE5A-\uDE5F\uDE6D-\uDE7F\uDEB9-\uDEBF\uDECA-\uDEFF\uDF1B\uDF1C\uDF2C-\uDF2F\uDF40-\uDFFF]|\uD806[\uDC3C-\uDC9F\uDCF3-\uDCFE\uDD07\uDD08\uDD0A\uDD0B\uDD14\uDD17\uDD36\uDD39\uDD3A\uDD47-\uDD4F\uDD5A-\uDD9F\uDDA8\uDDA9\uDDD8\uDDD9\uDDE5-\uDDFF\uDE48-\uDE4F\uDEA3-\uDEBF\uDEF9-\uDFFF]|\uD807[\uDC09\uDC37\uDC46-\uDC4F\uDC6D-\uDC6F\uDC90\uDC91\uDCA8\uDCB7-\uDCFF\uDD07\uDD0A\uDD37-\uDD39\uDD3B\uDD3E\uDD48-\uDD4F\uDD5A-\uDD5F\uDD66\uDD69\uDD8F\uDD92\uDD99-\uDD9F\uDDAA-\uDEDF\uDEF9-\uDFAF\uDFB1-\uDFBF\uDFF2-\uDFFE]|\uD808[\uDF9A-\uDFFF]|\uD809[\uDC6F\uDC75-\uDC7F\uDD44-\uDFFF]|[\uD80A\uD80B\uD80E-\uD810\uD812-\uD819\uD824-\uD82B\uD82D\uD82E\uD830-\uD833\uD837\uD839\uD83F\uD87B-\uD87D\uD87F\uD885-\uDB3F\uDB41-\uDBFF][\uDC00-\uDFFF]|\uD80D[\uDC2F-\uDFFF]|\uD811[\uDE47-\uDFFF]|\uD81A[\uDE39-\uDE3F\uDE5F\uDE6A-\uDE6D\uDE70-\uDECF\uDEEE\uDEEF\uDEF6-\uDEFF\uDF46-\uDF4F\uDF5A\uDF62\uDF78-\uDF7C\uDF90-\uDFFF]|\uD81B[\uDC00-\uDE3F\uDE9B-\uDEFF\uDF4B-\uDF4E\uDF88-\uDF8E\uDFA0-\uDFDF\uDFE5-\uDFEF\uDFF2-\uDFFF]|\uD821[\uDFF8-\uDFFF]|\uD823[\uDCD6-\uDCFF\uDD09-\uDFFF]|\uD82C[\uDD1F-\uDD4F\uDD53-\uDD63\uDD68-\uDD6F\uDEFC-\uDFFF]|\uD82F[\uDC6B-\uDC6F\uDC7D-\uDC7F\uDC89-\uDC8F\uDC9A\uDC9B\uDCA0-\uDFFF]|\uD834[\uDCF6-\uDCFF\uDD27\uDD28\uDD73-\uDD7A\uDDE9-\uDDFF\uDE46-\uDEDF\uDEF4-\uDEFF\uDF57-\uDF5F\uDF79-\uDFFF]|\uD835[\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]|\uD836[\uDE8C-\uDE9A\uDEA0\uDEB0-\uDFFF]|\uD838[\uDC07\uDC19\uDC1A\uDC22\uDC25\uDC2B-\uDCFF\uDD2D-\uDD2F\uDD3E\uDD3F\uDD4A-\uDD4D\uDD50-\uDEBF\uDEFA-\uDEFE\uDF00-\uDFFF]|\uD83A[\uDCC5\uDCC6\uDCD7-\uDCFF\uDD4C-\uDD4F\uDD5A-\uDD5D\uDD60-\uDFFF]|\uD83B[\uDC00-\uDC70\uDCB5-\uDD00\uDD3E-\uDDFF\uDE04\uDE20\uDE23\uDE25\uDE26\uDE28\uDE33\uDE38\uDE3A\uDE3C-\uDE41\uDE43-\uDE46\uDE48\uDE4A\uDE4C\uDE50\uDE53\uDE55\uDE56\uDE58\uDE5A\uDE5C\uDE5E\uDE60\uDE63\uDE65\uDE66\uDE6B\uDE73\uDE78\uDE7D\uDE7F\uDE8A\uDE9C-\uDEA0\uDEA4\uDEAA\uDEBC-\uDEEF\uDEF2-\uDFFF]|\uD83C[\uDC2C-\uDC2F\uDC94-\uDC9F\uDCAF\uDCB0\uDCC0\uDCD0\uDCF6-\uDCFF\uDDAE-\uDDE5\uDE03-\uDE0F\uDE3C-\uDE3F\uDE49-\uDE4F\uDE52-\uDE5F\uDE66-\uDEFF]|\uD83D[\uDED8-\uDEDF\uDEED-\uDEEF\uDEFD-\uDEFF\uDF74-\uDF7F\uDFD9-\uDFDF\uDFEC-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE\uDCAF\uDCB2-\uDCFF\uDD79\uDDCC\uDE54-\uDE5F\uDE6E\uDE6F\uDE75-\uDE77\uDE7B-\uDE7F\uDE87-\uDE8F\uDEA9-\uDEAF\uDEB7-\uDEBF\uDEC3-\uDECF\uDED7-\uDEFF\uDF93\uDFCB-\uDFEF\uDFFA-\uDFFF]|\uD869[\uDEDE-\uDEFF]|\uD86D[\uDF35-\uDF3F]|\uD86E[\uDC1E\uDC1F]|\uD873[\uDEA2-\uDEAF]|\uD87A[\uDFE1-\uDFFF]|\uD87E[\uDE1E-\uDFFF]|\uD884[\uDF4B-\uDFFF]|\uDB40[\uDC00-\uDCFF\uDDF0-\uDFFF]'
	    },
	    {
	        'name': 'Cc',
	        'alias': 'Control',
	        'bmp': '\0-\x1F\x7F-\x9F'
	    },
	    {
	        'name': 'Cf',
	        'alias': 'Format',
	        'bmp': '\xAD\u0600-\u0605\u061C\u06DD\u070F\u08E2\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB',
	        'astral': '\uD804[\uDCBD\uDCCD]|\uD80D[\uDC30-\uDC38]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|\uDB40[\uDC01\uDC20-\uDC7F]'
	    },
	    {
	        'name': 'Cn',
	        'alias': 'Unassigned',
	        'bmp': '\u0378\u0379\u0380-\u0383\u038B\u038D\u03A2\u0530\u0557\u0558\u058B\u058C\u0590\u05C8-\u05CF\u05EB-\u05EE\u05F5-\u05FF\u061D\u070E\u074B\u074C\u07B2-\u07BF\u07FB\u07FC\u082E\u082F\u083F\u085C\u085D\u085F\u086B-\u089F\u08B5\u08C8-\u08D2\u0984\u098D\u098E\u0991\u0992\u09A9\u09B1\u09B3-\u09B5\u09BA\u09BB\u09C5\u09C6\u09C9\u09CA\u09CF-\u09D6\u09D8-\u09DB\u09DE\u09E4\u09E5\u09FF\u0A00\u0A04\u0A0B-\u0A0E\u0A11\u0A12\u0A29\u0A31\u0A34\u0A37\u0A3A\u0A3B\u0A3D\u0A43-\u0A46\u0A49\u0A4A\u0A4E-\u0A50\u0A52-\u0A58\u0A5D\u0A5F-\u0A65\u0A77-\u0A80\u0A84\u0A8E\u0A92\u0AA9\u0AB1\u0AB4\u0ABA\u0ABB\u0AC6\u0ACA\u0ACE\u0ACF\u0AD1-\u0ADF\u0AE4\u0AE5\u0AF2-\u0AF8\u0B00\u0B04\u0B0D\u0B0E\u0B11\u0B12\u0B29\u0B31\u0B34\u0B3A\u0B3B\u0B45\u0B46\u0B49\u0B4A\u0B4E-\u0B54\u0B58-\u0B5B\u0B5E\u0B64\u0B65\u0B78-\u0B81\u0B84\u0B8B-\u0B8D\u0B91\u0B96-\u0B98\u0B9B\u0B9D\u0BA0-\u0BA2\u0BA5-\u0BA7\u0BAB-\u0BAD\u0BBA-\u0BBD\u0BC3-\u0BC5\u0BC9\u0BCE\u0BCF\u0BD1-\u0BD6\u0BD8-\u0BE5\u0BFB-\u0BFF\u0C0D\u0C11\u0C29\u0C3A-\u0C3C\u0C45\u0C49\u0C4E-\u0C54\u0C57\u0C5B-\u0C5F\u0C64\u0C65\u0C70-\u0C76\u0C8D\u0C91\u0CA9\u0CB4\u0CBA\u0CBB\u0CC5\u0CC9\u0CCE-\u0CD4\u0CD7-\u0CDD\u0CDF\u0CE4\u0CE5\u0CF0\u0CF3-\u0CFF\u0D0D\u0D11\u0D45\u0D49\u0D50-\u0D53\u0D64\u0D65\u0D80\u0D84\u0D97-\u0D99\u0DB2\u0DBC\u0DBE\u0DBF\u0DC7-\u0DC9\u0DCB-\u0DCE\u0DD5\u0DD7\u0DE0-\u0DE5\u0DF0\u0DF1\u0DF5-\u0E00\u0E3B-\u0E3E\u0E5C-\u0E80\u0E83\u0E85\u0E8B\u0EA4\u0EA6\u0EBE\u0EBF\u0EC5\u0EC7\u0ECE\u0ECF\u0EDA\u0EDB\u0EE0-\u0EFF\u0F48\u0F6D-\u0F70\u0F98\u0FBD\u0FCD\u0FDB-\u0FFF\u10C6\u10C8-\u10CC\u10CE\u10CF\u1249\u124E\u124F\u1257\u1259\u125E\u125F\u1289\u128E\u128F\u12B1\u12B6\u12B7\u12BF\u12C1\u12C6\u12C7\u12D7\u1311\u1316\u1317\u135B\u135C\u137D-\u137F\u139A-\u139F\u13F6\u13F7\u13FE\u13FF\u169D-\u169F\u16F9-\u16FF\u170D\u1715-\u171F\u1737-\u173F\u1754-\u175F\u176D\u1771\u1774-\u177F\u17DE\u17DF\u17EA-\u17EF\u17FA-\u17FF\u180F\u181A-\u181F\u1879-\u187F\u18AB-\u18AF\u18F6-\u18FF\u191F\u192C-\u192F\u193C-\u193F\u1941-\u1943\u196E\u196F\u1975-\u197F\u19AC-\u19AF\u19CA-\u19CF\u19DB-\u19DD\u1A1C\u1A1D\u1A5F\u1A7D\u1A7E\u1A8A-\u1A8F\u1A9A-\u1A9F\u1AAE\u1AAF\u1AC1-\u1AFF\u1B4C-\u1B4F\u1B7D-\u1B7F\u1BF4-\u1BFB\u1C38-\u1C3A\u1C4A-\u1C4C\u1C89-\u1C8F\u1CBB\u1CBC\u1CC8-\u1CCF\u1CFB-\u1CFF\u1DFA\u1F16\u1F17\u1F1E\u1F1F\u1F46\u1F47\u1F4E\u1F4F\u1F58\u1F5A\u1F5C\u1F5E\u1F7E\u1F7F\u1FB5\u1FC5\u1FD4\u1FD5\u1FDC\u1FF0\u1FF1\u1FF5\u1FFF\u2065\u2072\u2073\u208F\u209D-\u209F\u20C0-\u20CF\u20F1-\u20FF\u218C-\u218F\u2427-\u243F\u244B-\u245F\u2B74\u2B75\u2B96\u2C2F\u2C5F\u2CF4-\u2CF8\u2D26\u2D28-\u2D2C\u2D2E\u2D2F\u2D68-\u2D6E\u2D71-\u2D7E\u2D97-\u2D9F\u2DA7\u2DAF\u2DB7\u2DBF\u2DC7\u2DCF\u2DD7\u2DDF\u2E53-\u2E7F\u2E9A\u2EF4-\u2EFF\u2FD6-\u2FEF\u2FFC-\u2FFF\u3040\u3097\u3098\u3100-\u3104\u3130\u318F\u31E4-\u31EF\u321F\u9FFD-\u9FFF\uA48D-\uA48F\uA4C7-\uA4CF\uA62C-\uA63F\uA6F8-\uA6FF\uA7C0\uA7C1\uA7CB-\uA7F4\uA82D-\uA82F\uA83A-\uA83F\uA878-\uA87F\uA8C6-\uA8CD\uA8DA-\uA8DF\uA954-\uA95E\uA97D-\uA97F\uA9CE\uA9DA-\uA9DD\uA9FF\uAA37-\uAA3F\uAA4E\uAA4F\uAA5A\uAA5B\uAAC3-\uAADA\uAAF7-\uAB00\uAB07\uAB08\uAB0F\uAB10\uAB17-\uAB1F\uAB27\uAB2F\uAB6C-\uAB6F\uABEE\uABEF\uABFA-\uABFF\uD7A4-\uD7AF\uD7C7-\uD7CA\uD7FC-\uD7FF\uFA6E\uFA6F\uFADA-\uFAFF\uFB07-\uFB12\uFB18-\uFB1C\uFB37\uFB3D\uFB3F\uFB42\uFB45\uFBC2-\uFBD2\uFD40-\uFD4F\uFD90\uFD91\uFDC8-\uFDEF\uFDFE\uFDFF\uFE1A-\uFE1F\uFE53\uFE67\uFE6C-\uFE6F\uFE75\uFEFD\uFEFE\uFF00\uFFBF-\uFFC1\uFFC8\uFFC9\uFFD0\uFFD1\uFFD8\uFFD9\uFFDD-\uFFDF\uFFE7\uFFEF-\uFFF8\uFFFE\uFFFF',
	        'astral': '\uD800[\uDC0C\uDC27\uDC3B\uDC3E\uDC4E\uDC4F\uDC5E-\uDC7F\uDCFB-\uDCFF\uDD03-\uDD06\uDD34-\uDD36\uDD8F\uDD9D-\uDD9F\uDDA1-\uDDCF\uDDFE-\uDE7F\uDE9D-\uDE9F\uDED1-\uDEDF\uDEFC-\uDEFF\uDF24-\uDF2C\uDF4B-\uDF4F\uDF7B-\uDF7F\uDF9E\uDFC4-\uDFC7\uDFD6-\uDFFF]|\uD801[\uDC9E\uDC9F\uDCAA-\uDCAF\uDCD4-\uDCD7\uDCFC-\uDCFF\uDD28-\uDD2F\uDD64-\uDD6E\uDD70-\uDDFF\uDF37-\uDF3F\uDF56-\uDF5F\uDF68-\uDFFF]|\uD802[\uDC06\uDC07\uDC09\uDC36\uDC39-\uDC3B\uDC3D\uDC3E\uDC56\uDC9F-\uDCA6\uDCB0-\uDCDF\uDCF3\uDCF6-\uDCFA\uDD1C-\uDD1E\uDD3A-\uDD3E\uDD40-\uDD7F\uDDB8-\uDDBB\uDDD0\uDDD1\uDE04\uDE07-\uDE0B\uDE14\uDE18\uDE36\uDE37\uDE3B-\uDE3E\uDE49-\uDE4F\uDE59-\uDE5F\uDEA0-\uDEBF\uDEE7-\uDEEA\uDEF7-\uDEFF\uDF36-\uDF38\uDF56\uDF57\uDF73-\uDF77\uDF92-\uDF98\uDF9D-\uDFA8\uDFB0-\uDFFF]|\uD803[\uDC49-\uDC7F\uDCB3-\uDCBF\uDCF3-\uDCF9\uDD28-\uDD2F\uDD3A-\uDE5F\uDE7F\uDEAA\uDEAE\uDEAF\uDEB2-\uDEFF\uDF28-\uDF2F\uDF5A-\uDFAF\uDFCC-\uDFDF\uDFF7-\uDFFF]|\uD804[\uDC4E-\uDC51\uDC70-\uDC7E\uDCC2-\uDCCC\uDCCE\uDCCF\uDCE9-\uDCEF\uDCFA-\uDCFF\uDD35\uDD48-\uDD4F\uDD77-\uDD7F\uDDE0\uDDF5-\uDDFF\uDE12\uDE3F-\uDE7F\uDE87\uDE89\uDE8E\uDE9E\uDEAA-\uDEAF\uDEEB-\uDEEF\uDEFA-\uDEFF\uDF04\uDF0D\uDF0E\uDF11\uDF12\uDF29\uDF31\uDF34\uDF3A\uDF45\uDF46\uDF49\uDF4A\uDF4E\uDF4F\uDF51-\uDF56\uDF58-\uDF5C\uDF64\uDF65\uDF6D-\uDF6F\uDF75-\uDFFF]|\uD805[\uDC5C\uDC62-\uDC7F\uDCC8-\uDCCF\uDCDA-\uDD7F\uDDB6\uDDB7\uDDDE-\uDDFF\uDE45-\uDE4F\uDE5A-\uDE5F\uDE6D-\uDE7F\uDEB9-\uDEBF\uDECA-\uDEFF\uDF1B\uDF1C\uDF2C-\uDF2F\uDF40-\uDFFF]|\uD806[\uDC3C-\uDC9F\uDCF3-\uDCFE\uDD07\uDD08\uDD0A\uDD0B\uDD14\uDD17\uDD36\uDD39\uDD3A\uDD47-\uDD4F\uDD5A-\uDD9F\uDDA8\uDDA9\uDDD8\uDDD9\uDDE5-\uDDFF\uDE48-\uDE4F\uDEA3-\uDEBF\uDEF9-\uDFFF]|\uD807[\uDC09\uDC37\uDC46-\uDC4F\uDC6D-\uDC6F\uDC90\uDC91\uDCA8\uDCB7-\uDCFF\uDD07\uDD0A\uDD37-\uDD39\uDD3B\uDD3E\uDD48-\uDD4F\uDD5A-\uDD5F\uDD66\uDD69\uDD8F\uDD92\uDD99-\uDD9F\uDDAA-\uDEDF\uDEF9-\uDFAF\uDFB1-\uDFBF\uDFF2-\uDFFE]|\uD808[\uDF9A-\uDFFF]|\uD809[\uDC6F\uDC75-\uDC7F\uDD44-\uDFFF]|[\uD80A\uD80B\uD80E-\uD810\uD812-\uD819\uD824-\uD82B\uD82D\uD82E\uD830-\uD833\uD837\uD839\uD83F\uD87B-\uD87D\uD87F\uD885-\uDB3F\uDB41-\uDB7F][\uDC00-\uDFFF]|\uD80D[\uDC2F\uDC39-\uDFFF]|\uD811[\uDE47-\uDFFF]|\uD81A[\uDE39-\uDE3F\uDE5F\uDE6A-\uDE6D\uDE70-\uDECF\uDEEE\uDEEF\uDEF6-\uDEFF\uDF46-\uDF4F\uDF5A\uDF62\uDF78-\uDF7C\uDF90-\uDFFF]|\uD81B[\uDC00-\uDE3F\uDE9B-\uDEFF\uDF4B-\uDF4E\uDF88-\uDF8E\uDFA0-\uDFDF\uDFE5-\uDFEF\uDFF2-\uDFFF]|\uD821[\uDFF8-\uDFFF]|\uD823[\uDCD6-\uDCFF\uDD09-\uDFFF]|\uD82C[\uDD1F-\uDD4F\uDD53-\uDD63\uDD68-\uDD6F\uDEFC-\uDFFF]|\uD82F[\uDC6B-\uDC6F\uDC7D-\uDC7F\uDC89-\uDC8F\uDC9A\uDC9B\uDCA4-\uDFFF]|\uD834[\uDCF6-\uDCFF\uDD27\uDD28\uDDE9-\uDDFF\uDE46-\uDEDF\uDEF4-\uDEFF\uDF57-\uDF5F\uDF79-\uDFFF]|\uD835[\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]|\uD836[\uDE8C-\uDE9A\uDEA0\uDEB0-\uDFFF]|\uD838[\uDC07\uDC19\uDC1A\uDC22\uDC25\uDC2B-\uDCFF\uDD2D-\uDD2F\uDD3E\uDD3F\uDD4A-\uDD4D\uDD50-\uDEBF\uDEFA-\uDEFE\uDF00-\uDFFF]|\uD83A[\uDCC5\uDCC6\uDCD7-\uDCFF\uDD4C-\uDD4F\uDD5A-\uDD5D\uDD60-\uDFFF]|\uD83B[\uDC00-\uDC70\uDCB5-\uDD00\uDD3E-\uDDFF\uDE04\uDE20\uDE23\uDE25\uDE26\uDE28\uDE33\uDE38\uDE3A\uDE3C-\uDE41\uDE43-\uDE46\uDE48\uDE4A\uDE4C\uDE50\uDE53\uDE55\uDE56\uDE58\uDE5A\uDE5C\uDE5E\uDE60\uDE63\uDE65\uDE66\uDE6B\uDE73\uDE78\uDE7D\uDE7F\uDE8A\uDE9C-\uDEA0\uDEA4\uDEAA\uDEBC-\uDEEF\uDEF2-\uDFFF]|\uD83C[\uDC2C-\uDC2F\uDC94-\uDC9F\uDCAF\uDCB0\uDCC0\uDCD0\uDCF6-\uDCFF\uDDAE-\uDDE5\uDE03-\uDE0F\uDE3C-\uDE3F\uDE49-\uDE4F\uDE52-\uDE5F\uDE66-\uDEFF]|\uD83D[\uDED8-\uDEDF\uDEED-\uDEEF\uDEFD-\uDEFF\uDF74-\uDF7F\uDFD9-\uDFDF\uDFEC-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE\uDCAF\uDCB2-\uDCFF\uDD79\uDDCC\uDE54-\uDE5F\uDE6E\uDE6F\uDE75-\uDE77\uDE7B-\uDE7F\uDE87-\uDE8F\uDEA9-\uDEAF\uDEB7-\uDEBF\uDEC3-\uDECF\uDED7-\uDEFF\uDF93\uDFCB-\uDFEF\uDFFA-\uDFFF]|\uD869[\uDEDE-\uDEFF]|\uD86D[\uDF35-\uDF3F]|\uD86E[\uDC1E\uDC1F]|\uD873[\uDEA2-\uDEAF]|\uD87A[\uDFE1-\uDFFF]|\uD87E[\uDE1E-\uDFFF]|\uD884[\uDF4B-\uDFFF]|\uDB40[\uDC00\uDC02-\uDC1F\uDC80-\uDCFF\uDDF0-\uDFFF]|[\uDBBF\uDBFF][\uDFFE\uDFFF]'
	    },
	    {
	        'name': 'Co',
	        'alias': 'Private_Use',
	        'bmp': '\uE000-\uF8FF',
	        'astral': '[\uDB80-\uDBBE\uDBC0-\uDBFE][\uDC00-\uDFFF]|[\uDBBF\uDBFF][\uDC00-\uDFFD]'
	    },
	    {
	        'name': 'Cs',
	        'alias': 'Surrogate',
	        'bmp': '\uD800-\uDFFF'
	    },
	    {
	        'name': 'L',
	        'alias': 'Letter',
	        'bmp': 'A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\u9FFC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7CA\uA7F5-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC',
	        'astral': '\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82C[\uDC00-\uDD1E\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD838[\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDEC0-\uDEEB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDD\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A]'
	    },
	    {
	        'name': 'LC',
	        'alias': 'Cased_Letter',
	        'bmp': 'A-Za-z\xB5\xC0-\xD6\xD8-\xF6\xF8-\u01BA\u01BC-\u01BF\u01C4-\u0293\u0295-\u02AF\u0370-\u0373\u0376\u0377\u037B-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0560-\u0588\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FD-\u10FF\u13A0-\u13F5\u13F8-\u13FD\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2134\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2C7B\u2C7E-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA640-\uA66D\uA680-\uA69B\uA722-\uA76F\uA771-\uA787\uA78B-\uA78E\uA790-\uA7BF\uA7C2-\uA7CA\uA7F5\uA7F6\uA7FA\uAB30-\uAB5A\uAB60-\uAB68\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF21-\uFF3A\uFF41-\uFF5A',
	        'astral': '\uD801[\uDC00-\uDC4F\uDCB0-\uDCD3\uDCD8-\uDCFB]|\uD803[\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD806[\uDCA0-\uDCDF]|\uD81B[\uDE40-\uDE7F]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDD00-\uDD43]'
	    },
	    {
	        'name': 'Ll',
	        'alias': 'Lowercase_Letter',
	        'bmp': 'a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0560-\u0588\u10D0-\u10FA\u10FD-\u10FF\u13F8-\u13FD\u1C80-\u1C88\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7AF\uA7B5\uA7B7\uA7B9\uA7BB\uA7BD\uA7BF\uA7C3\uA7C8\uA7CA\uA7F6\uA7FA\uAB30-\uAB5A\uAB60-\uAB68\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A',
	        'astral': '\uD801[\uDC28-\uDC4F\uDCD8-\uDCFB]|\uD803[\uDCC0-\uDCF2]|\uD806[\uDCC0-\uDCDF]|\uD81B[\uDE60-\uDE7F]|\uD835[\uDC1A-\uDC33\uDC4E-\uDC54\uDC56-\uDC67\uDC82-\uDC9B\uDCB6-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDCEA-\uDD03\uDD1E-\uDD37\uDD52-\uDD6B\uDD86-\uDD9F\uDDBA-\uDDD3\uDDEE-\uDE07\uDE22-\uDE3B\uDE56-\uDE6F\uDE8A-\uDEA5\uDEC2-\uDEDA\uDEDC-\uDEE1\uDEFC-\uDF14\uDF16-\uDF1B\uDF36-\uDF4E\uDF50-\uDF55\uDF70-\uDF88\uDF8A-\uDF8F\uDFAA-\uDFC2\uDFC4-\uDFC9\uDFCB]|\uD83A[\uDD22-\uDD43]'
	    },
	    {
	        'name': 'Lm',
	        'alias': 'Modifier_Letter',
	        'bmp': '\u02B0-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0374\u037A\u0559\u0640\u06E5\u06E6\u07F4\u07F5\u07FA\u081A\u0824\u0828\u0971\u0E46\u0EC6\u10FC\u17D7\u1843\u1AA7\u1C78-\u1C7D\u1D2C-\u1D6A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C\u2C7D\u2D6F\u2E2F\u3005\u3031-\u3035\u303B\u309D\u309E\u30FC-\u30FE\uA015\uA4F8-\uA4FD\uA60C\uA67F\uA69C\uA69D\uA717-\uA71F\uA770\uA788\uA7F8\uA7F9\uA9CF\uA9E6\uAA70\uAADD\uAAF3\uAAF4\uAB5C-\uAB5F\uAB69\uFF70\uFF9E\uFF9F',
	        'astral': '\uD81A[\uDF40-\uDF43]|\uD81B[\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD838[\uDD37-\uDD3D]|\uD83A\uDD4B'
	    },
	    {
	        'name': 'Lo',
	        'alias': 'Other_Letter',
	        'bmp': '\xAA\xBA\u01BB\u01C0-\u01C3\u0294\u05D0-\u05EA\u05EF-\u05F2\u0620-\u063F\u0641-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u0800-\u0815\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u0904-\u0939\u093D\u0950\u0958-\u0961\u0972-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E45\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u1100-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17DC\u1820-\u1842\u1844-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C77\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u2135-\u2138\u2D30-\u2D67\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3006\u303C\u3041-\u3096\u309F\u30A1-\u30FA\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\u9FFC\uA000-\uA014\uA016-\uA48C\uA4D0-\uA4F7\uA500-\uA60B\uA610-\uA61F\uA62A\uA62B\uA66E\uA6A0-\uA6E5\uA78F\uA7F7\uA7FB-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9E0-\uA9E4\uA9E7-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA6F\uAA71-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB\uAADC\uAAE0-\uAAEA\uAAF2\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF66-\uFF6F\uFF71-\uFF9D\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC',
	        'astral': '\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC50-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDD00-\uDD23\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A]|\uD806[\uDC00-\uDC2B\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF4A\uDF50]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82C[\uDC00-\uDD1E\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD838[\uDD00-\uDD2C\uDD4E\uDEC0-\uDEEB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDD\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A]'
	    },
	    {
	        'name': 'Lt',
	        'alias': 'Titlecase_Letter',
	        'bmp': '\u01C5\u01C8\u01CB\u01F2\u1F88-\u1F8F\u1F98-\u1F9F\u1FA8-\u1FAF\u1FBC\u1FCC\u1FFC'
	    },
	    {
	        'name': 'Lu',
	        'alias': 'Uppercase_Letter',
	        'bmp': 'A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1C90-\u1CBA\u1CBD-\u1CBF\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AE\uA7B0-\uA7B4\uA7B6\uA7B8\uA7BA\uA7BC\uA7BE\uA7C2\uA7C4-\uA7C7\uA7C9\uA7F5\uFF21-\uFF3A',
	        'astral': '\uD801[\uDC00-\uDC27\uDCB0-\uDCD3]|\uD803[\uDC80-\uDCB2]|\uD806[\uDCA0-\uDCBF]|\uD81B[\uDE40-\uDE5F]|\uD835[\uDC00-\uDC19\uDC34-\uDC4D\uDC68-\uDC81\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB5\uDCD0-\uDCE9\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD38\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD6C-\uDD85\uDDA0-\uDDB9\uDDD4-\uDDED\uDE08-\uDE21\uDE3C-\uDE55\uDE70-\uDE89\uDEA8-\uDEC0\uDEE2-\uDEFA\uDF1C-\uDF34\uDF56-\uDF6E\uDF90-\uDFA8\uDFCA]|\uD83A[\uDD00-\uDD21]'
	    },
	    {
	        'name': 'M',
	        'alias': 'Mark',
	        'bmp': '\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C04\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u1885\u1886\u18A9\u1920-\u192B\u1930-\u193B\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1AC0\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F',
	        'astral': '\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD803[\uDD24-\uDD27\uDEAB\uDEAC\uDF46-\uDF50]|\uD804[\uDC00-\uDC02\uDC38-\uDC46\uDC7F-\uDC82\uDCB0-\uDCBA\uDD00-\uDD02\uDD27-\uDD34\uDD45\uDD46\uDD73\uDD80-\uDD82\uDDB3-\uDDC0\uDDC9-\uDDCC\uDDCE\uDDCF\uDE2C-\uDE37\uDE3E\uDEDF-\uDEEA\uDF00-\uDF03\uDF3B\uDF3C\uDF3E-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC35-\uDC46\uDC5E\uDCB0-\uDCC3\uDDAF-\uDDB5\uDDB8-\uDDC0\uDDDC\uDDDD\uDE30-\uDE40\uDEAB-\uDEB7\uDF1D-\uDF2B]|\uD806[\uDC2C-\uDC3A\uDD30-\uDD35\uDD37\uDD38\uDD3B-\uDD3E\uDD40\uDD42\uDD43\uDDD1-\uDDD7\uDDDA-\uDDE0\uDDE4\uDE01-\uDE0A\uDE33-\uDE39\uDE3B-\uDE3E\uDE47\uDE51-\uDE5B\uDE8A-\uDE99]|\uD807[\uDC2F-\uDC36\uDC38-\uDC3F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD31-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD45\uDD47\uDD8A-\uDD8E\uDD90\uDD91\uDD93-\uDD97\uDEF3-\uDEF6]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF4F\uDF51-\uDF87\uDF8F-\uDF92\uDFE4\uDFF0\uDFF1]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD30-\uDD36\uDEEC-\uDEEF]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uDB40[\uDD00-\uDDEF]'
	    },
	    {
	        'name': 'Mc',
	        'alias': 'Spacing_Mark',
	        'bmp': '\u0903\u093B\u093E-\u0940\u0949-\u094C\u094E\u094F\u0982\u0983\u09BE-\u09C0\u09C7\u09C8\u09CB\u09CC\u09D7\u0A03\u0A3E-\u0A40\u0A83\u0ABE-\u0AC0\u0AC9\u0ACB\u0ACC\u0B02\u0B03\u0B3E\u0B40\u0B47\u0B48\u0B4B\u0B4C\u0B57\u0BBE\u0BBF\u0BC1\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD7\u0C01-\u0C03\u0C41-\u0C44\u0C82\u0C83\u0CBE\u0CC0-\u0CC4\u0CC7\u0CC8\u0CCA\u0CCB\u0CD5\u0CD6\u0D02\u0D03\u0D3E-\u0D40\u0D46-\u0D48\u0D4A-\u0D4C\u0D57\u0D82\u0D83\u0DCF-\u0DD1\u0DD8-\u0DDF\u0DF2\u0DF3\u0F3E\u0F3F\u0F7F\u102B\u102C\u1031\u1038\u103B\u103C\u1056\u1057\u1062-\u1064\u1067-\u106D\u1083\u1084\u1087-\u108C\u108F\u109A-\u109C\u17B6\u17BE-\u17C5\u17C7\u17C8\u1923-\u1926\u1929-\u192B\u1930\u1931\u1933-\u1938\u1A19\u1A1A\u1A55\u1A57\u1A61\u1A63\u1A64\u1A6D-\u1A72\u1B04\u1B35\u1B3B\u1B3D-\u1B41\u1B43\u1B44\u1B82\u1BA1\u1BA6\u1BA7\u1BAA\u1BE7\u1BEA-\u1BEC\u1BEE\u1BF2\u1BF3\u1C24-\u1C2B\u1C34\u1C35\u1CE1\u1CF7\u302E\u302F\uA823\uA824\uA827\uA880\uA881\uA8B4-\uA8C3\uA952\uA953\uA983\uA9B4\uA9B5\uA9BA\uA9BB\uA9BE-\uA9C0\uAA2F\uAA30\uAA33\uAA34\uAA4D\uAA7B\uAA7D\uAAEB\uAAEE\uAAEF\uAAF5\uABE3\uABE4\uABE6\uABE7\uABE9\uABEA\uABEC',
	        'astral': '\uD804[\uDC00\uDC02\uDC82\uDCB0-\uDCB2\uDCB7\uDCB8\uDD2C\uDD45\uDD46\uDD82\uDDB3-\uDDB5\uDDBF\uDDC0\uDDCE\uDE2C-\uDE2E\uDE32\uDE33\uDE35\uDEE0-\uDEE2\uDF02\uDF03\uDF3E\uDF3F\uDF41-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63]|\uD805[\uDC35-\uDC37\uDC40\uDC41\uDC45\uDCB0-\uDCB2\uDCB9\uDCBB-\uDCBE\uDCC1\uDDAF-\uDDB1\uDDB8-\uDDBB\uDDBE\uDE30-\uDE32\uDE3B\uDE3C\uDE3E\uDEAC\uDEAE\uDEAF\uDEB6\uDF20\uDF21\uDF26]|\uD806[\uDC2C-\uDC2E\uDC38\uDD30-\uDD35\uDD37\uDD38\uDD3D\uDD40\uDD42\uDDD1-\uDDD3\uDDDC-\uDDDF\uDDE4\uDE39\uDE57\uDE58\uDE97]|\uD807[\uDC2F\uDC3E\uDCA9\uDCB1\uDCB4\uDD8A-\uDD8E\uDD93\uDD94\uDD96\uDEF5\uDEF6]|\uD81B[\uDF51-\uDF87\uDFF0\uDFF1]|\uD834[\uDD65\uDD66\uDD6D-\uDD72]'
	    },
	    {
	        'name': 'Me',
	        'alias': 'Enclosing_Mark',
	        'bmp': '\u0488\u0489\u1ABE\u20DD-\u20E0\u20E2-\u20E4\uA670-\uA672'
	    },
	    {
	        'name': 'Mn',
	        'alias': 'Nonspacing_Mark',
	        'bmp': '\u0300-\u036F\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2\u09E3\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B55\u0B56\u0B62\u0B63\u0B82\u0BC0\u0BCD\u0C00\u0C04\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CBF\u0CC6\u0CCC\u0CCD\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D41-\u0D44\u0D4D\u0D62\u0D63\u0D81\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1ABD\u1ABF\u1AC0\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302D\u3099\u309A\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA82C\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F',
	        'astral': '\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD803[\uDD24-\uDD27\uDEAB\uDEAC\uDF46-\uDF50]|\uD804[\uDC01\uDC38-\uDC46\uDC7F-\uDC81\uDCB3-\uDCB6\uDCB9\uDCBA\uDD00-\uDD02\uDD27-\uDD2B\uDD2D-\uDD34\uDD73\uDD80\uDD81\uDDB6-\uDDBE\uDDC9-\uDDCC\uDDCF\uDE2F-\uDE31\uDE34\uDE36\uDE37\uDE3E\uDEDF\uDEE3-\uDEEA\uDF00\uDF01\uDF3B\uDF3C\uDF40\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC38-\uDC3F\uDC42-\uDC44\uDC46\uDC5E\uDCB3-\uDCB8\uDCBA\uDCBF\uDCC0\uDCC2\uDCC3\uDDB2-\uDDB5\uDDBC\uDDBD\uDDBF\uDDC0\uDDDC\uDDDD\uDE33-\uDE3A\uDE3D\uDE3F\uDE40\uDEAB\uDEAD\uDEB0-\uDEB5\uDEB7\uDF1D-\uDF1F\uDF22-\uDF25\uDF27-\uDF2B]|\uD806[\uDC2F-\uDC37\uDC39\uDC3A\uDD3B\uDD3C\uDD3E\uDD43\uDDD4-\uDDD7\uDDDA\uDDDB\uDDE0\uDE01-\uDE0A\uDE33-\uDE38\uDE3B-\uDE3E\uDE47\uDE51-\uDE56\uDE59-\uDE5B\uDE8A-\uDE96\uDE98\uDE99]|\uD807[\uDC30-\uDC36\uDC38-\uDC3D\uDC3F\uDC92-\uDCA7\uDCAA-\uDCB0\uDCB2\uDCB3\uDCB5\uDCB6\uDD31-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD45\uDD47\uDD90\uDD91\uDD95\uDD97\uDEF3\uDEF4]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF4F\uDF8F-\uDF92\uDFE4]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD67-\uDD69\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD30-\uDD36\uDEEC-\uDEEF]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uDB40[\uDD00-\uDDEF]'
	    },
	    {
	        'name': 'N',
	        'alias': 'Number',
	        'bmp': '0-9\xB2\xB3\xB9\xBC-\xBE\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u09F4-\u09F9\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0B72-\u0B77\u0BE6-\u0BF2\u0C66-\u0C6F\u0C78-\u0C7E\u0CE6-\u0CEF\u0D58-\u0D5E\u0D66-\u0D78\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F33\u1040-\u1049\u1090-\u1099\u1369-\u137C\u16EE-\u16F0\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1946-\u194F\u19D0-\u19DA\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\u2070\u2074-\u2079\u2080-\u2089\u2150-\u2182\u2185-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3007\u3021-\u3029\u3038-\u303A\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA620-\uA629\uA6E6-\uA6EF\uA830-\uA835\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19',
	        'astral': '\uD800[\uDD07-\uDD33\uDD40-\uDD78\uDD8A\uDD8B\uDEE1-\uDEFB\uDF20-\uDF23\uDF41\uDF4A\uDFD1-\uDFD5]|\uD801[\uDCA0-\uDCA9]|\uD802[\uDC58-\uDC5F\uDC79-\uDC7F\uDCA7-\uDCAF\uDCFB-\uDCFF\uDD16-\uDD1B\uDDBC\uDDBD\uDDC0-\uDDCF\uDDD2-\uDDFF\uDE40-\uDE48\uDE7D\uDE7E\uDE9D-\uDE9F\uDEEB-\uDEEF\uDF58-\uDF5F\uDF78-\uDF7F\uDFA9-\uDFAF]|\uD803[\uDCFA-\uDCFF\uDD30-\uDD39\uDE60-\uDE7E\uDF1D-\uDF26\uDF51-\uDF54\uDFC5-\uDFCB]|\uD804[\uDC52-\uDC6F\uDCF0-\uDCF9\uDD36-\uDD3F\uDDD0-\uDDD9\uDDE1-\uDDF4\uDEF0-\uDEF9]|\uD805[\uDC50-\uDC59\uDCD0-\uDCD9\uDE50-\uDE59\uDEC0-\uDEC9\uDF30-\uDF3B]|\uD806[\uDCE0-\uDCF2\uDD50-\uDD59]|\uD807[\uDC50-\uDC6C\uDD50-\uDD59\uDDA0-\uDDA9\uDFC0-\uDFD4]|\uD809[\uDC00-\uDC6E]|\uD81A[\uDE60-\uDE69\uDF50-\uDF59\uDF5B-\uDF61]|\uD81B[\uDE80-\uDE96]|\uD834[\uDEE0-\uDEF3\uDF60-\uDF78]|\uD835[\uDFCE-\uDFFF]|\uD838[\uDD40-\uDD49\uDEF0-\uDEF9]|\uD83A[\uDCC7-\uDCCF\uDD50-\uDD59]|\uD83B[\uDC71-\uDCAB\uDCAD-\uDCAF\uDCB1-\uDCB4\uDD01-\uDD2D\uDD2F-\uDD3D]|\uD83C[\uDD00-\uDD0C]|\uD83E[\uDFF0-\uDFF9]'
	    },
	    {
	        'name': 'Nd',
	        'alias': 'Decimal_Number',
	        'bmp': '0-9\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0BE6-\u0BEF\u0C66-\u0C6F\u0CE6-\u0CEF\u0D66-\u0D6F\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F29\u1040-\u1049\u1090-\u1099\u17E0-\u17E9\u1810-\u1819\u1946-\u194F\u19D0-\u19D9\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\uA620-\uA629\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19',
	        'astral': '\uD801[\uDCA0-\uDCA9]|\uD803[\uDD30-\uDD39]|\uD804[\uDC66-\uDC6F\uDCF0-\uDCF9\uDD36-\uDD3F\uDDD0-\uDDD9\uDEF0-\uDEF9]|\uD805[\uDC50-\uDC59\uDCD0-\uDCD9\uDE50-\uDE59\uDEC0-\uDEC9\uDF30-\uDF39]|\uD806[\uDCE0-\uDCE9\uDD50-\uDD59]|\uD807[\uDC50-\uDC59\uDD50-\uDD59\uDDA0-\uDDA9]|\uD81A[\uDE60-\uDE69\uDF50-\uDF59]|\uD835[\uDFCE-\uDFFF]|\uD838[\uDD40-\uDD49\uDEF0-\uDEF9]|\uD83A[\uDD50-\uDD59]|\uD83E[\uDFF0-\uDFF9]'
	    },
	    {
	        'name': 'Nl',
	        'alias': 'Letter_Number',
	        'bmp': '\u16EE-\u16F0\u2160-\u2182\u2185-\u2188\u3007\u3021-\u3029\u3038-\u303A\uA6E6-\uA6EF',
	        'astral': '\uD800[\uDD40-\uDD74\uDF41\uDF4A\uDFD1-\uDFD5]|\uD809[\uDC00-\uDC6E]'
	    },
	    {
	        'name': 'No',
	        'alias': 'Other_Number',
	        'bmp': '\xB2\xB3\xB9\xBC-\xBE\u09F4-\u09F9\u0B72-\u0B77\u0BF0-\u0BF2\u0C78-\u0C7E\u0D58-\u0D5E\u0D70-\u0D78\u0F2A-\u0F33\u1369-\u137C\u17F0-\u17F9\u19DA\u2070\u2074-\u2079\u2080-\u2089\u2150-\u215F\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA830-\uA835',
	        'astral': '\uD800[\uDD07-\uDD33\uDD75-\uDD78\uDD8A\uDD8B\uDEE1-\uDEFB\uDF20-\uDF23]|\uD802[\uDC58-\uDC5F\uDC79-\uDC7F\uDCA7-\uDCAF\uDCFB-\uDCFF\uDD16-\uDD1B\uDDBC\uDDBD\uDDC0-\uDDCF\uDDD2-\uDDFF\uDE40-\uDE48\uDE7D\uDE7E\uDE9D-\uDE9F\uDEEB-\uDEEF\uDF58-\uDF5F\uDF78-\uDF7F\uDFA9-\uDFAF]|\uD803[\uDCFA-\uDCFF\uDE60-\uDE7E\uDF1D-\uDF26\uDF51-\uDF54\uDFC5-\uDFCB]|\uD804[\uDC52-\uDC65\uDDE1-\uDDF4]|\uD805[\uDF3A\uDF3B]|\uD806[\uDCEA-\uDCF2]|\uD807[\uDC5A-\uDC6C\uDFC0-\uDFD4]|\uD81A[\uDF5B-\uDF61]|\uD81B[\uDE80-\uDE96]|\uD834[\uDEE0-\uDEF3\uDF60-\uDF78]|\uD83A[\uDCC7-\uDCCF]|\uD83B[\uDC71-\uDCAB\uDCAD-\uDCAF\uDCB1-\uDCB4\uDD01-\uDD2D\uDD2F-\uDD3D]|\uD83C[\uDD00-\uDD0C]'
	    },
	    {
	        'name': 'P',
	        'alias': 'Punctuation',
	        'bmp': '!-#%-\\*,-\\/:;\\?@\\[-\\]_\\{\\}\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u2E52\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65',
	        'astral': '\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDEAD\uDF55-\uDF59]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5A\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDF3C-\uDF3E]|\uD806[\uDC3B\uDD44-\uDD46\uDDE2\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8\uDFFF]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A\uDFE2]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]'
	    },
	    {
	        'name': 'Pc',
	        'alias': 'Connector_Punctuation',
	        'bmp': '_\u203F\u2040\u2054\uFE33\uFE34\uFE4D-\uFE4F\uFF3F'
	    },
	    {
	        'name': 'Pd',
	        'alias': 'Dash_Punctuation',
	        'bmp': '\\-\u058A\u05BE\u1400\u1806\u2010-\u2015\u2E17\u2E1A\u2E3A\u2E3B\u2E40\u301C\u3030\u30A0\uFE31\uFE32\uFE58\uFE63\uFF0D',
	        'astral': '\uD803\uDEAD'
	    },
	    {
	        'name': 'Pe',
	        'alias': 'Close_Punctuation',
	        'bmp': '\\)\\]\\}\u0F3B\u0F3D\u169C\u2046\u207E\u208E\u2309\u230B\u232A\u2769\u276B\u276D\u276F\u2771\u2773\u2775\u27C6\u27E7\u27E9\u27EB\u27ED\u27EF\u2984\u2986\u2988\u298A\u298C\u298E\u2990\u2992\u2994\u2996\u2998\u29D9\u29DB\u29FD\u2E23\u2E25\u2E27\u2E29\u3009\u300B\u300D\u300F\u3011\u3015\u3017\u3019\u301B\u301E\u301F\uFD3E\uFE18\uFE36\uFE38\uFE3A\uFE3C\uFE3E\uFE40\uFE42\uFE44\uFE48\uFE5A\uFE5C\uFE5E\uFF09\uFF3D\uFF5D\uFF60\uFF63'
	    },
	    {
	        'name': 'Pf',
	        'alias': 'Final_Punctuation',
	        'bmp': '\xBB\u2019\u201D\u203A\u2E03\u2E05\u2E0A\u2E0D\u2E1D\u2E21'
	    },
	    {
	        'name': 'Pi',
	        'alias': 'Initial_Punctuation',
	        'bmp': '\xAB\u2018\u201B\u201C\u201F\u2039\u2E02\u2E04\u2E09\u2E0C\u2E1C\u2E20'
	    },
	    {
	        'name': 'Po',
	        'alias': 'Other_Punctuation',
	        'bmp': '!-#%-\'\\*,\\.\\/:;\\?@\\\xA1\xA7\xB6\xB7\xBF\u037E\u0387\u055A-\u055F\u0589\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u166E\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u1805\u1807-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2016\u2017\u2020-\u2027\u2030-\u2038\u203B-\u203E\u2041-\u2043\u2047-\u2051\u2053\u2055-\u205E\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00\u2E01\u2E06-\u2E08\u2E0B\u2E0E-\u2E16\u2E18\u2E19\u2E1B\u2E1E\u2E1F\u2E2A-\u2E2E\u2E30-\u2E39\u2E3C-\u2E3F\u2E41\u2E43-\u2E4F\u2E52\u3001-\u3003\u303D\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFE10-\uFE16\uFE19\uFE30\uFE45\uFE46\uFE49-\uFE4C\uFE50-\uFE52\uFE54-\uFE57\uFE5F-\uFE61\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF07\uFF0A\uFF0C\uFF0E\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3C\uFF61\uFF64\uFF65',
	        'astral': '\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDF55-\uDF59]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5A\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDF3C-\uDF3E]|\uD806[\uDC3B\uDD44-\uDD46\uDDE2\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8\uDFFF]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A\uDFE2]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]'
	    },
	    {
	        'name': 'Ps',
	        'alias': 'Open_Punctuation',
	        'bmp': '\\(\\[\\{\u0F3A\u0F3C\u169B\u201A\u201E\u2045\u207D\u208D\u2308\u230A\u2329\u2768\u276A\u276C\u276E\u2770\u2772\u2774\u27C5\u27E6\u27E8\u27EA\u27EC\u27EE\u2983\u2985\u2987\u2989\u298B\u298D\u298F\u2991\u2993\u2995\u2997\u29D8\u29DA\u29FC\u2E22\u2E24\u2E26\u2E28\u2E42\u3008\u300A\u300C\u300E\u3010\u3014\u3016\u3018\u301A\u301D\uFD3F\uFE17\uFE35\uFE37\uFE39\uFE3B\uFE3D\uFE3F\uFE41\uFE43\uFE47\uFE59\uFE5B\uFE5D\uFF08\uFF3B\uFF5B\uFF5F\uFF62'
	    },
	    {
	        'name': 'S',
	        'alias': 'Symbol',
	        'bmp': '\\$\\+<->\\^`\\|~\xA2-\xA6\xA8\xA9\xAC\xAE-\xB1\xB4\xB8\xD7\xF7\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0384\u0385\u03F6\u0482\u058D-\u058F\u0606-\u0608\u060B\u060E\u060F\u06DE\u06E9\u06FD\u06FE\u07F6\u07FE\u07FF\u09F2\u09F3\u09FA\u09FB\u0AF1\u0B70\u0BF3-\u0BFA\u0C7F\u0D4F\u0D79\u0E3F\u0F01-\u0F03\u0F13\u0F15-\u0F17\u0F1A-\u0F1F\u0F34\u0F36\u0F38\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE\u0FCF\u0FD5-\u0FD8\u109E\u109F\u1390-\u1399\u166D\u17DB\u1940\u19DE-\u19FF\u1B61-\u1B6A\u1B74-\u1B7C\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u2044\u2052\u207A-\u207C\u208A-\u208C\u20A0-\u20BF\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u2140-\u2144\u214A-\u214D\u214F\u218A\u218B\u2190-\u2307\u230C-\u2328\u232B-\u2426\u2440-\u244A\u249C-\u24E9\u2500-\u2767\u2794-\u27C4\u27C7-\u27E5\u27F0-\u2982\u2999-\u29D7\u29DC-\u29FB\u29FE-\u2B73\u2B76-\u2B95\u2B97-\u2BFF\u2CE5-\u2CEA\u2E50\u2E51\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFB\u3004\u3012\u3013\u3020\u3036\u3037\u303E\u303F\u309B\u309C\u3190\u3191\u3196-\u319F\u31C0-\u31E3\u3200-\u321E\u322A-\u3247\u3250\u3260-\u327F\u328A-\u32B0\u32C0-\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA700-\uA716\uA720\uA721\uA789\uA78A\uA828-\uA82B\uA836-\uA839\uAA77-\uAA79\uAB5B\uAB6A\uAB6B\uFB29\uFBB2-\uFBC1\uFDFC\uFDFD\uFE62\uFE64-\uFE66\uFE69\uFF04\uFF0B\uFF1C-\uFF1E\uFF3E\uFF40\uFF5C\uFF5E\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFFC\uFFFD',
	        'astral': '\uD800[\uDD37-\uDD3F\uDD79-\uDD89\uDD8C-\uDD8E\uDD90-\uDD9C\uDDA0\uDDD0-\uDDFC]|\uD802[\uDC77\uDC78\uDEC8]|\uD805\uDF3F|\uD807[\uDFD5-\uDFF1]|\uD81A[\uDF3C-\uDF3F\uDF45]|\uD82F\uDC9C|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD64\uDD6A-\uDD6C\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDE8\uDE00-\uDE41\uDE45\uDF00-\uDF56]|\uD835[\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85\uDE86]|\uD838[\uDD4F\uDEFF]|\uD83B[\uDCAC\uDCB0\uDD2E\uDEF0\uDEF1]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD0D-\uDDAD\uDDE6-\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDE60-\uDE65\uDF00-\uDFFF]|\uD83D[\uDC00-\uDED7\uDEE0-\uDEEC\uDEF0-\uDEFC\uDF00-\uDF73\uDF80-\uDFD8\uDFE0-\uDFEB]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDCB0\uDCB1\uDD00-\uDD78\uDD7A-\uDDCB\uDDCD-\uDE53\uDE60-\uDE6D\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6\uDF00-\uDF92\uDF94-\uDFCA]'
	    },
	    {
	        'name': 'Sc',
	        'alias': 'Currency_Symbol',
	        'bmp': '\\$\xA2-\xA5\u058F\u060B\u07FE\u07FF\u09F2\u09F3\u09FB\u0AF1\u0BF9\u0E3F\u17DB\u20A0-\u20BF\uA838\uFDFC\uFE69\uFF04\uFFE0\uFFE1\uFFE5\uFFE6',
	        'astral': '\uD807[\uDFDD-\uDFE0]|\uD838\uDEFF|\uD83B\uDCB0'
	    },
	    {
	        'name': 'Sk',
	        'alias': 'Modifier_Symbol',
	        'bmp': '\\^`\xA8\xAF\xB4\xB8\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0384\u0385\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u309B\u309C\uA700-\uA716\uA720\uA721\uA789\uA78A\uAB5B\uAB6A\uAB6B\uFBB2-\uFBC1\uFF3E\uFF40\uFFE3',
	        'astral': '\uD83C[\uDFFB-\uDFFF]'
	    },
	    {
	        'name': 'Sm',
	        'alias': 'Math_Symbol',
	        'bmp': '\\+<->\\|~\xAC\xB1\xD7\xF7\u03F6\u0606-\u0608\u2044\u2052\u207A-\u207C\u208A-\u208C\u2118\u2140-\u2144\u214B\u2190-\u2194\u219A\u219B\u21A0\u21A3\u21A6\u21AE\u21CE\u21CF\u21D2\u21D4\u21F4-\u22FF\u2320\u2321\u237C\u239B-\u23B3\u23DC-\u23E1\u25B7\u25C1\u25F8-\u25FF\u266F\u27C0-\u27C4\u27C7-\u27E5\u27F0-\u27FF\u2900-\u2982\u2999-\u29D7\u29DC-\u29FB\u29FE-\u2AFF\u2B30-\u2B44\u2B47-\u2B4C\uFB29\uFE62\uFE64-\uFE66\uFF0B\uFF1C-\uFF1E\uFF5C\uFF5E\uFFE2\uFFE9-\uFFEC',
	        'astral': '\uD835[\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3]|\uD83B[\uDEF0\uDEF1]'
	    },
	    {
	        'name': 'So',
	        'alias': 'Other_Symbol',
	        'bmp': '\xA6\xA9\xAE\xB0\u0482\u058D\u058E\u060E\u060F\u06DE\u06E9\u06FD\u06FE\u07F6\u09FA\u0B70\u0BF3-\u0BF8\u0BFA\u0C7F\u0D4F\u0D79\u0F01-\u0F03\u0F13\u0F15-\u0F17\u0F1A-\u0F1F\u0F34\u0F36\u0F38\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE\u0FCF\u0FD5-\u0FD8\u109E\u109F\u1390-\u1399\u166D\u1940\u19DE-\u19FF\u1B61-\u1B6A\u1B74-\u1B7C\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116\u2117\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u214A\u214C\u214D\u214F\u218A\u218B\u2195-\u2199\u219C-\u219F\u21A1\u21A2\u21A4\u21A5\u21A7-\u21AD\u21AF-\u21CD\u21D0\u21D1\u21D3\u21D5-\u21F3\u2300-\u2307\u230C-\u231F\u2322-\u2328\u232B-\u237B\u237D-\u239A\u23B4-\u23DB\u23E2-\u2426\u2440-\u244A\u249C-\u24E9\u2500-\u25B6\u25B8-\u25C0\u25C2-\u25F7\u2600-\u266E\u2670-\u2767\u2794-\u27BF\u2800-\u28FF\u2B00-\u2B2F\u2B45\u2B46\u2B4D-\u2B73\u2B76-\u2B95\u2B97-\u2BFF\u2CE5-\u2CEA\u2E50\u2E51\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFB\u3004\u3012\u3013\u3020\u3036\u3037\u303E\u303F\u3190\u3191\u3196-\u319F\u31C0-\u31E3\u3200-\u321E\u322A-\u3247\u3250\u3260-\u327F\u328A-\u32B0\u32C0-\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA828-\uA82B\uA836\uA837\uA839\uAA77-\uAA79\uFDFD\uFFE4\uFFE8\uFFED\uFFEE\uFFFC\uFFFD',
	        'astral': '\uD800[\uDD37-\uDD3F\uDD79-\uDD89\uDD8C-\uDD8E\uDD90-\uDD9C\uDDA0\uDDD0-\uDDFC]|\uD802[\uDC77\uDC78\uDEC8]|\uD805\uDF3F|\uD807[\uDFD5-\uDFDC\uDFE1-\uDFF1]|\uD81A[\uDF3C-\uDF3F\uDF45]|\uD82F\uDC9C|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD64\uDD6A-\uDD6C\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDE8\uDE00-\uDE41\uDE45\uDF00-\uDF56]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85\uDE86]|\uD838\uDD4F|\uD83B[\uDCAC\uDD2E]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD0D-\uDDAD\uDDE6-\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDE60-\uDE65\uDF00-\uDFFA]|\uD83D[\uDC00-\uDED7\uDEE0-\uDEEC\uDEF0-\uDEFC\uDF00-\uDF73\uDF80-\uDFD8\uDFE0-\uDFEB]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDCB0\uDCB1\uDD00-\uDD78\uDD7A-\uDDCB\uDDCD-\uDE53\uDE60-\uDE6D\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6\uDF00-\uDF92\uDF94-\uDFCA]'
	    },
	    {
	        'name': 'Z',
	        'alias': 'Separator',
	        'bmp': ' \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000'
	    },
	    {
	        'name': 'Zl',
	        'alias': 'Line_Separator',
	        'bmp': '\u2028'
	    },
	    {
	        'name': 'Zp',
	        'alias': 'Paragraph_Separator',
	        'bmp': '\u2029'
	    },
	    {
	        'name': 'Zs',
	        'alias': 'Space_Separator',
	        'bmp': ' \xA0\u1680\u2000-\u200A\u202F\u205F\u3000'
	    }
	];

	/*!
	 * XRegExp Unicode Categories 4.4.1
	 * <xregexp.com>
	 * Steven Levithan (c) 2010-present MIT License
	 * Unicode data by Mathias Bynens <mathiasbynens.be>
	 */

	var unicodeCategories = (XRegExp) => {

	    /**
	     * Adds support for Unicode's general categories. E.g., `\p{Lu}` or `\p{Uppercase Letter}`. See
	     * category descriptions in UAX #44 <http://unicode.org/reports/tr44/#GC_Values_Table>. Token
	     * names are case insensitive, and any spaces, hyphens, and underscores are ignored.
	     *
	     * Uses Unicode 13.0.0.
	     *
	     * @requires XRegExp, Unicode Base
	     */

	    if (!XRegExp.addUnicodeData) {
	        throw new ReferenceError('Unicode Base must be loaded before Unicode Categories');
	    }

	    XRegExp.addUnicodeData(categories);
	};

	var properties = [
	    {
	        'name': 'ASCII',
	        'bmp': '\0-\x7F'
	    },
	    {
	        'name': 'Alphabetic',
	        'bmp': 'A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0345\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05B0-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05EF-\u05F2\u0610-\u061A\u0620-\u0657\u0659-\u065F\u066E-\u06D3\u06D5-\u06DC\u06E1-\u06E8\u06ED-\u06EF\u06FA-\u06FC\u06FF\u0710-\u073F\u074D-\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0817\u081A-\u082C\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u08D4-\u08DF\u08E3-\u08E9\u08F0-\u093B\u093D-\u094C\u094E-\u0950\u0955-\u0963\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD-\u09C4\u09C7\u09C8\u09CB\u09CC\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09F0\u09F1\u09FC\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3E-\u0A42\u0A47\u0A48\u0A4B\u0A4C\u0A51\u0A59-\u0A5C\u0A5E\u0A70-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD-\u0AC5\u0AC7-\u0AC9\u0ACB\u0ACC\u0AD0\u0AE0-\u0AE3\u0AF9-\u0AFC\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D-\u0B44\u0B47\u0B48\u0B4B\u0B4C\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD0\u0BD7\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4C\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCC\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CF1\u0CF2\u0D00-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4C\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D7A-\u0D7F\u0D81-\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E46\u0E4D\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0ECD\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F71-\u0F81\u0F88-\u0F97\u0F99-\u0FBC\u1000-\u1036\u1038\u103B-\u103F\u1050-\u108F\u109A-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1713\u1720-\u1733\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17B3\u17B6-\u17C8\u17D7\u17DC\u1820-\u1878\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u1938\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A1B\u1A20-\u1A5E\u1A61-\u1A74\u1AA7\u1ABF\u1AC0\u1B00-\u1B33\u1B35-\u1B43\u1B45-\u1B4B\u1B80-\u1BA9\u1BAC-\u1BAF\u1BBA-\u1BE5\u1BE7-\u1BF1\u1C00-\u1C36\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1DE7-\u1DF4\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u24B6-\u24E9\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\u9FFC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA674-\uA67B\uA67F-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7CA\uA7F5-\uA805\uA807-\uA827\uA840-\uA873\uA880-\uA8C3\uA8C5\uA8F2-\uA8F7\uA8FB\uA8FD-\uA8FF\uA90A-\uA92A\uA930-\uA952\uA960-\uA97C\uA980-\uA9B2\uA9B4-\uA9BF\uA9CF\uA9E0-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA60-\uAA76\uAA7A-\uAABE\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF5\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABEA\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC',
	        'astral': '\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD27\uDE80-\uDEA9\uDEAB\uDEAC\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC00-\uDC45\uDC82-\uDCB8\uDCD0-\uDCE8\uDD00-\uDD32\uDD44-\uDD47\uDD50-\uDD72\uDD76\uDD80-\uDDBF\uDDC1-\uDDC4\uDDCE\uDDCF\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE34\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEE8\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D-\uDF44\uDF47\uDF48\uDF4B\uDF4C\uDF50\uDF57\uDF5D-\uDF63]|\uD805[\uDC00-\uDC41\uDC43-\uDC45\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCC1\uDCC4\uDCC5\uDCC7\uDD80-\uDDB5\uDDB8-\uDDBE\uDDD8-\uDDDD\uDE00-\uDE3E\uDE40\uDE44\uDE80-\uDEB5\uDEB8\uDF00-\uDF1A\uDF1D-\uDF2A]|\uD806[\uDC00-\uDC38\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD35\uDD37\uDD38\uDD3B\uDD3C\uDD3F-\uDD42\uDDA0-\uDDA7\uDDAA-\uDDD7\uDDDA-\uDDDF\uDDE1\uDDE3\uDDE4\uDE00-\uDE32\uDE35-\uDE3E\uDE50-\uDE97\uDE9D\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC3E\uDC40\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD41\uDD43\uDD46\uDD47\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD8E\uDD90\uDD91\uDD93-\uDD96\uDD98\uDEE0-\uDEF6\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF4A\uDF4F-\uDF87\uDF8F-\uDF9F\uDFE0\uDFE1\uDFE3\uDFF0\uDFF1]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82C[\uDC00-\uDD1E\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9E]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDEC0-\uDEEB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD47\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD83C[\uDD30-\uDD49\uDD50-\uDD69\uDD70-\uDD89]|\uD869[\uDC00-\uDEDD\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A]'
	    },
	    {
	        'name': 'Any',
	        'isBmpLast': true,
	        'bmp': '\0-\uFFFF',
	        'astral': '[\uD800-\uDBFF][\uDC00-\uDFFF]'
	    },
	    {
	        'name': 'Default_Ignorable_Code_Point',
	        'bmp': '\xAD\u034F\u061C\u115F\u1160\u17B4\u17B5\u180B-\u180E\u200B-\u200F\u202A-\u202E\u2060-\u206F\u3164\uFE00-\uFE0F\uFEFF\uFFA0\uFFF0-\uFFF8',
	        'astral': '\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|[\uDB40-\uDB43][\uDC00-\uDFFF]'
	    },
	    {
	        'name': 'Lowercase',
	        'bmp': 'a-z\xAA\xB5\xBA\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02B8\u02C0\u02C1\u02E0-\u02E4\u0345\u0371\u0373\u0377\u037A-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0560-\u0588\u10D0-\u10FA\u10FD-\u10FF\u13F8-\u13FD\u1C80-\u1C88\u1D00-\u1DBF\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u2071\u207F\u2090-\u209C\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2170-\u217F\u2184\u24D0-\u24E9\u2C30-\u2C5E\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7D\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B-\uA69D\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7AF\uA7B5\uA7B7\uA7B9\uA7BB\uA7BD\uA7BF\uA7C3\uA7C8\uA7CA\uA7F6\uA7F8-\uA7FA\uAB30-\uAB5A\uAB5C-\uAB68\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A',
	        'astral': '\uD801[\uDC28-\uDC4F\uDCD8-\uDCFB]|\uD803[\uDCC0-\uDCF2]|\uD806[\uDCC0-\uDCDF]|\uD81B[\uDE60-\uDE7F]|\uD835[\uDC1A-\uDC33\uDC4E-\uDC54\uDC56-\uDC67\uDC82-\uDC9B\uDCB6-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDCEA-\uDD03\uDD1E-\uDD37\uDD52-\uDD6B\uDD86-\uDD9F\uDDBA-\uDDD3\uDDEE-\uDE07\uDE22-\uDE3B\uDE56-\uDE6F\uDE8A-\uDEA5\uDEC2-\uDEDA\uDEDC-\uDEE1\uDEFC-\uDF14\uDF16-\uDF1B\uDF36-\uDF4E\uDF50-\uDF55\uDF70-\uDF88\uDF8A-\uDF8F\uDFAA-\uDFC2\uDFC4-\uDFC9\uDFCB]|\uD83A[\uDD22-\uDD43]'
	    },
	    {
	        'name': 'Noncharacter_Code_Point',
	        'bmp': '\uFDD0-\uFDEF\uFFFE\uFFFF',
	        'astral': '[\uD83F\uD87F\uD8BF\uD8FF\uD93F\uD97F\uD9BF\uD9FF\uDA3F\uDA7F\uDABF\uDAFF\uDB3F\uDB7F\uDBBF\uDBFF][\uDFFE\uDFFF]'
	    },
	    {
	        'name': 'Uppercase',
	        'bmp': 'A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1C90-\u1CBA\u1CBD-\u1CBF\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2160-\u216F\u2183\u24B6-\u24CF\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AE\uA7B0-\uA7B4\uA7B6\uA7B8\uA7BA\uA7BC\uA7BE\uA7C2\uA7C4-\uA7C7\uA7C9\uA7F5\uFF21-\uFF3A',
	        'astral': '\uD801[\uDC00-\uDC27\uDCB0-\uDCD3]|\uD803[\uDC80-\uDCB2]|\uD806[\uDCA0-\uDCBF]|\uD81B[\uDE40-\uDE5F]|\uD835[\uDC00-\uDC19\uDC34-\uDC4D\uDC68-\uDC81\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB5\uDCD0-\uDCE9\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD38\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD6C-\uDD85\uDDA0-\uDDB9\uDDD4-\uDDED\uDE08-\uDE21\uDE3C-\uDE55\uDE70-\uDE89\uDEA8-\uDEC0\uDEE2-\uDEFA\uDF1C-\uDF34\uDF56-\uDF6E\uDF90-\uDFA8\uDFCA]|\uD83A[\uDD00-\uDD21]|\uD83C[\uDD30-\uDD49\uDD50-\uDD69\uDD70-\uDD89]'
	    },
	    {
	        'name': 'White_Space',
	        'bmp': '\t-\r \x85\xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000'
	    }
	];

	/*!
	 * XRegExp Unicode Properties 4.4.1
	 * <xregexp.com>
	 * Steven Levithan (c) 2012-present MIT License
	 * Unicode data by Mathias Bynens <mathiasbynens.be>
	 */

	var unicodeProperties = (XRegExp) => {

	    /**
	     * Adds properties to meet the UTS #18 Level 1 RL1.2 requirements for Unicode regex support. See
	     * <http://unicode.org/reports/tr18/#RL1.2>. Following are definitions of these properties from
	     * UAX #44 <http://unicode.org/reports/tr44/>:
	     *
	     * - Alphabetic
	     *   Characters with the Alphabetic property. Generated from: Lowercase + Uppercase + Lt + Lm +
	     *   Lo + Nl + Other_Alphabetic.
	     *
	     * - Default_Ignorable_Code_Point
	     *   For programmatic determination of default ignorable code points. New characters that should
	     *   be ignored in rendering (unless explicitly supported) will be assigned in these ranges,
	     *   permitting programs to correctly handle the default rendering of such characters when not
	     *   otherwise supported.
	     *
	     * - Lowercase
	     *   Characters with the Lowercase property. Generated from: Ll + Other_Lowercase.
	     *
	     * - Noncharacter_Code_Point
	     *   Code points permanently reserved for internal use.
	     *
	     * - Uppercase
	     *   Characters with the Uppercase property. Generated from: Lu + Other_Uppercase.
	     *
	     * - White_Space
	     *   Spaces, separator characters and other control characters which should be treated by
	     *   programming languages as "white space" for the purpose of parsing elements.
	     *
	     * The properties ASCII, Any, and Assigned are also included but are not defined in UAX #44. UTS
	     * #18 RL1.2 additionally requires support for Unicode scripts and general categories. These are
	     * included in XRegExp's Unicode Categories and Unicode Scripts addons.
	     *
	     * Token names are case insensitive, and any spaces, hyphens, and underscores are ignored.
	     *
	     * Uses Unicode 13.0.0.
	     *
	     * @requires XRegExp, Unicode Base
	     */

	    if (!XRegExp.addUnicodeData) {
	        throw new ReferenceError('Unicode Base must be loaded before Unicode Properties');
	    }

	    const unicodeData = properties;

	    // Add non-generated data
	    unicodeData.push({
	        name: 'Assigned',
	        // Since this is defined as the inverse of Unicode category Cn (Unassigned), the Unicode
	        // Categories addon is required to use this property
	        inverseOf: 'Cn'
	    });

	    XRegExp.addUnicodeData(unicodeData);
	};

	var scripts$2 = [
	    {
	        'name': 'Adlam',
	        'astral': '\uD83A[\uDD00-\uDD4B\uDD50-\uDD59\uDD5E\uDD5F]'
	    },
	    {
	        'name': 'Ahom',
	        'astral': '\uD805[\uDF00-\uDF1A\uDF1D-\uDF2B\uDF30-\uDF3F]'
	    },
	    {
	        'name': 'Anatolian_Hieroglyphs',
	        'astral': '\uD811[\uDC00-\uDE46]'
	    },
	    {
	        'name': 'Arabic',
	        'bmp': '\u0600-\u0604\u0606-\u060B\u060D-\u061A\u061C\u061E\u0620-\u063F\u0641-\u064A\u0656-\u066F\u0671-\u06DC\u06DE-\u06FF\u0750-\u077F\u08A0-\u08B4\u08B6-\u08C7\u08D3-\u08E1\u08E3-\u08FF\uFB50-\uFBC1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFD\uFE70-\uFE74\uFE76-\uFEFC',
	        'astral': '\uD803[\uDE60-\uDE7E]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB\uDEF0\uDEF1]'
	    },
	    {
	        'name': 'Armenian',
	        'bmp': '\u0531-\u0556\u0559-\u058A\u058D-\u058F\uFB13-\uFB17'
	    },
	    {
	        'name': 'Avestan',
	        'astral': '\uD802[\uDF00-\uDF35\uDF39-\uDF3F]'
	    },
	    {
	        'name': 'Balinese',
	        'bmp': '\u1B00-\u1B4B\u1B50-\u1B7C'
	    },
	    {
	        'name': 'Bamum',
	        'bmp': '\uA6A0-\uA6F7',
	        'astral': '\uD81A[\uDC00-\uDE38]'
	    },
	    {
	        'name': 'Bassa_Vah',
	        'astral': '\uD81A[\uDED0-\uDEED\uDEF0-\uDEF5]'
	    },
	    {
	        'name': 'Batak',
	        'bmp': '\u1BC0-\u1BF3\u1BFC-\u1BFF'
	    },
	    {
	        'name': 'Bengali',
	        'bmp': '\u0980-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09FE'
	    },
	    {
	        'name': 'Bhaiksuki',
	        'astral': '\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC45\uDC50-\uDC6C]'
	    },
	    {
	        'name': 'Bopomofo',
	        'bmp': '\u02EA\u02EB\u3105-\u312F\u31A0-\u31BF'
	    },
	    {
	        'name': 'Brahmi',
	        'astral': '\uD804[\uDC00-\uDC4D\uDC52-\uDC6F\uDC7F]'
	    },
	    {
	        'name': 'Braille',
	        'bmp': '\u2800-\u28FF'
	    },
	    {
	        'name': 'Buginese',
	        'bmp': '\u1A00-\u1A1B\u1A1E\u1A1F'
	    },
	    {
	        'name': 'Buhid',
	        'bmp': '\u1740-\u1753'
	    },
	    {
	        'name': 'Canadian_Aboriginal',
	        'bmp': '\u1400-\u167F\u18B0-\u18F5'
	    },
	    {
	        'name': 'Carian',
	        'astral': '\uD800[\uDEA0-\uDED0]'
	    },
	    {
	        'name': 'Caucasian_Albanian',
	        'astral': '\uD801[\uDD30-\uDD63\uDD6F]'
	    },
	    {
	        'name': 'Chakma',
	        'astral': '\uD804[\uDD00-\uDD34\uDD36-\uDD47]'
	    },
	    {
	        'name': 'Cham',
	        'bmp': '\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA5C-\uAA5F'
	    },
	    {
	        'name': 'Cherokee',
	        'bmp': '\u13A0-\u13F5\u13F8-\u13FD\uAB70-\uABBF'
	    },
	    {
	        'name': 'Chorasmian',
	        'astral': '\uD803[\uDFB0-\uDFCB]'
	    },
	    {
	        'name': 'Common',
	        'bmp': '\0-@\\[-`\\{-\xA9\xAB-\xB9\xBB-\xBF\xD7\xF7\u02B9-\u02DF\u02E5-\u02E9\u02EC-\u02FF\u0374\u037E\u0385\u0387\u0605\u060C\u061B\u061F\u0640\u06DD\u08E2\u0964\u0965\u0E3F\u0FD5-\u0FD8\u10FB\u16EB-\u16ED\u1735\u1736\u1802\u1803\u1805\u1CD3\u1CE1\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5-\u1CF7\u1CFA\u2000-\u200B\u200E-\u2064\u2066-\u2070\u2074-\u207E\u2080-\u208E\u20A0-\u20BF\u2100-\u2125\u2127-\u2129\u212C-\u2131\u2133-\u214D\u214F-\u215F\u2189-\u218B\u2190-\u2426\u2440-\u244A\u2460-\u27FF\u2900-\u2B73\u2B76-\u2B95\u2B97-\u2BFF\u2E00-\u2E52\u2FF0-\u2FFB\u3000-\u3004\u3006\u3008-\u3020\u3030-\u3037\u303C-\u303F\u309B\u309C\u30A0\u30FB\u30FC\u3190-\u319F\u31C0-\u31E3\u3220-\u325F\u327F-\u32CF\u32FF\u3358-\u33FF\u4DC0-\u4DFF\uA700-\uA721\uA788-\uA78A\uA830-\uA839\uA92E\uA9CF\uAB5B\uAB6A\uAB6B\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE66\uFE68-\uFE6B\uFEFF\uFF01-\uFF20\uFF3B-\uFF40\uFF5B-\uFF65\uFF70\uFF9E\uFF9F\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFF9-\uFFFD',
	        'astral': '\uD800[\uDD00-\uDD02\uDD07-\uDD33\uDD37-\uDD3F\uDD90-\uDD9C\uDDD0-\uDDFC\uDEE1-\uDEFB]|\uD81B[\uDFE2\uDFE3]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD66\uDD6A-\uDD7A\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDE8\uDEE0-\uDEF3\uDF00-\uDF56\uDF60-\uDF78]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDFCB\uDFCE-\uDFFF]|\uD83B[\uDC71-\uDCB4\uDD01-\uDD3D]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD00-\uDDAD\uDDE6-\uDDFF\uDE01\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDE60-\uDE65\uDF00-\uDFFF]|\uD83D[\uDC00-\uDED7\uDEE0-\uDEEC\uDEF0-\uDEFC\uDF00-\uDF73\uDF80-\uDFD8\uDFE0-\uDFEB]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDCB0\uDCB1\uDD00-\uDD78\uDD7A-\uDDCB\uDDCD-\uDE53\uDE60-\uDE6D\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6\uDF00-\uDF92\uDF94-\uDFCA\uDFF0-\uDFF9]|\uDB40[\uDC01\uDC20-\uDC7F]'
	    },
	    {
	        'name': 'Coptic',
	        'bmp': '\u03E2-\u03EF\u2C80-\u2CF3\u2CF9-\u2CFF'
	    },
	    {
	        'name': 'Cuneiform',
	        'astral': '\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC70-\uDC74\uDC80-\uDD43]'
	    },
	    {
	        'name': 'Cypriot',
	        'astral': '\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F]'
	    },
	    {
	        'name': 'Cyrillic',
	        'bmp': '\u0400-\u0484\u0487-\u052F\u1C80-\u1C88\u1D2B\u1D78\u2DE0-\u2DFF\uA640-\uA69F\uFE2E\uFE2F'
	    },
	    {
	        'name': 'Deseret',
	        'astral': '\uD801[\uDC00-\uDC4F]'
	    },
	    {
	        'name': 'Devanagari',
	        'bmp': '\u0900-\u0950\u0955-\u0963\u0966-\u097F\uA8E0-\uA8FF'
	    },
	    {
	        'name': 'Dives_Akuru',
	        'astral': '\uD806[\uDD00-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD35\uDD37\uDD38\uDD3B-\uDD46\uDD50-\uDD59]'
	    },
	    {
	        'name': 'Dogra',
	        'astral': '\uD806[\uDC00-\uDC3B]'
	    },
	    {
	        'name': 'Duployan',
	        'astral': '\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9C-\uDC9F]'
	    },
	    {
	        'name': 'Egyptian_Hieroglyphs',
	        'astral': '\uD80C[\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E\uDC30-\uDC38]'
	    },
	    {
	        'name': 'Elbasan',
	        'astral': '\uD801[\uDD00-\uDD27]'
	    },
	    {
	        'name': 'Elymaic',
	        'astral': '\uD803[\uDFE0-\uDFF6]'
	    },
	    {
	        'name': 'Ethiopic',
	        'bmp': '\u1200-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u137C\u1380-\u1399\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E'
	    },
	    {
	        'name': 'Georgian',
	        'bmp': '\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u10FF\u1C90-\u1CBA\u1CBD-\u1CBF\u2D00-\u2D25\u2D27\u2D2D'
	    },
	    {
	        'name': 'Glagolitic',
	        'bmp': '\u2C00-\u2C2E\u2C30-\u2C5E',
	        'astral': '\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]'
	    },
	    {
	        'name': 'Gothic',
	        'astral': '\uD800[\uDF30-\uDF4A]'
	    },
	    {
	        'name': 'Grantha',
	        'astral': '\uD804[\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]'
	    },
	    {
	        'name': 'Greek',
	        'bmp': '\u0370-\u0373\u0375-\u0377\u037A-\u037D\u037F\u0384\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03E1\u03F0-\u03FF\u1D26-\u1D2A\u1D5D-\u1D61\u1D66-\u1D6A\u1DBF\u1F00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FC4\u1FC6-\u1FD3\u1FD6-\u1FDB\u1FDD-\u1FEF\u1FF2-\u1FF4\u1FF6-\u1FFE\u2126\uAB65',
	        'astral': '\uD800[\uDD40-\uDD8E\uDDA0]|\uD834[\uDE00-\uDE45]'
	    },
	    {
	        'name': 'Gujarati',
	        'bmp': '\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AF1\u0AF9-\u0AFF'
	    },
	    {
	        'name': 'Gunjala_Gondi',
	        'astral': '\uD807[\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD8E\uDD90\uDD91\uDD93-\uDD98\uDDA0-\uDDA9]'
	    },
	    {
	        'name': 'Gurmukhi',
	        'bmp': '\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A76'
	    },
	    {
	        'name': 'Han',
	        'bmp': '\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u3005\u3007\u3021-\u3029\u3038-\u303B\u3400-\u4DBF\u4E00-\u9FFC\uF900-\uFA6D\uFA70-\uFAD9',
	        'astral': '\uD81B[\uDFF0\uDFF1]|[\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD869[\uDC00-\uDEDD\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A]'
	    },
	    {
	        'name': 'Hangul',
	        'bmp': '\u1100-\u11FF\u302E\u302F\u3131-\u318E\u3200-\u321E\u3260-\u327E\uA960-\uA97C\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC'
	    },
	    {
	        'name': 'Hanifi_Rohingya',
	        'astral': '\uD803[\uDD00-\uDD27\uDD30-\uDD39]'
	    },
	    {
	        'name': 'Hanunoo',
	        'bmp': '\u1720-\u1734'
	    },
	    {
	        'name': 'Hatran',
	        'astral': '\uD802[\uDCE0-\uDCF2\uDCF4\uDCF5\uDCFB-\uDCFF]'
	    },
	    {
	        'name': 'Hebrew',
	        'bmp': '\u0591-\u05C7\u05D0-\u05EA\u05EF-\u05F4\uFB1D-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFB4F'
	    },
	    {
	        'name': 'Hiragana',
	        'bmp': '\u3041-\u3096\u309D-\u309F',
	        'astral': '\uD82C[\uDC01-\uDD1E\uDD50-\uDD52]|\uD83C\uDE00'
	    },
	    {
	        'name': 'Imperial_Aramaic',
	        'astral': '\uD802[\uDC40-\uDC55\uDC57-\uDC5F]'
	    },
	    {
	        'name': 'Inherited',
	        'bmp': '\u0300-\u036F\u0485\u0486\u064B-\u0655\u0670\u0951-\u0954\u1AB0-\u1AC0\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u200C\u200D\u20D0-\u20F0\u302A-\u302D\u3099\u309A\uFE00-\uFE0F\uFE20-\uFE2D',
	        'astral': '\uD800[\uDDFD\uDEE0]|\uD804\uDF3B|\uD834[\uDD67-\uDD69\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD]|\uDB40[\uDD00-\uDDEF]'
	    },
	    {
	        'name': 'Inscriptional_Pahlavi',
	        'astral': '\uD802[\uDF60-\uDF72\uDF78-\uDF7F]'
	    },
	    {
	        'name': 'Inscriptional_Parthian',
	        'astral': '\uD802[\uDF40-\uDF55\uDF58-\uDF5F]'
	    },
	    {
	        'name': 'Javanese',
	        'bmp': '\uA980-\uA9CD\uA9D0-\uA9D9\uA9DE\uA9DF'
	    },
	    {
	        'name': 'Kaithi',
	        'astral': '\uD804[\uDC80-\uDCC1\uDCCD]'
	    },
	    {
	        'name': 'Kannada',
	        'bmp': '\u0C80-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2'
	    },
	    {
	        'name': 'Katakana',
	        'bmp': '\u30A1-\u30FA\u30FD-\u30FF\u31F0-\u31FF\u32D0-\u32FE\u3300-\u3357\uFF66-\uFF6F\uFF71-\uFF9D',
	        'astral': '\uD82C[\uDC00\uDD64-\uDD67]'
	    },
	    {
	        'name': 'Kayah_Li',
	        'bmp': '\uA900-\uA92D\uA92F'
	    },
	    {
	        'name': 'Kharoshthi',
	        'astral': '\uD802[\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE38-\uDE3A\uDE3F-\uDE48\uDE50-\uDE58]'
	    },
	    {
	        'name': 'Khitan_Small_Script',
	        'astral': '\uD81B\uDFE4|\uD822[\uDF00-\uDFFF]|\uD823[\uDC00-\uDCD5]'
	    },
	    {
	        'name': 'Khmer',
	        'bmp': '\u1780-\u17DD\u17E0-\u17E9\u17F0-\u17F9\u19E0-\u19FF'
	    },
	    {
	        'name': 'Khojki',
	        'astral': '\uD804[\uDE00-\uDE11\uDE13-\uDE3E]'
	    },
	    {
	        'name': 'Khudawadi',
	        'astral': '\uD804[\uDEB0-\uDEEA\uDEF0-\uDEF9]'
	    },
	    {
	        'name': 'Lao',
	        'bmp': '\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF'
	    },
	    {
	        'name': 'Latin',
	        'bmp': 'A-Za-z\xAA\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02B8\u02E0-\u02E4\u1D00-\u1D25\u1D2C-\u1D5C\u1D62-\u1D65\u1D6B-\u1D77\u1D79-\u1DBE\u1E00-\u1EFF\u2071\u207F\u2090-\u209C\u212A\u212B\u2132\u214E\u2160-\u2188\u2C60-\u2C7F\uA722-\uA787\uA78B-\uA7BF\uA7C2-\uA7CA\uA7F5-\uA7FF\uAB30-\uAB5A\uAB5C-\uAB64\uAB66-\uAB69\uFB00-\uFB06\uFF21-\uFF3A\uFF41-\uFF5A'
	    },
	    {
	        'name': 'Lepcha',
	        'bmp': '\u1C00-\u1C37\u1C3B-\u1C49\u1C4D-\u1C4F'
	    },
	    {
	        'name': 'Limbu',
	        'bmp': '\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1940\u1944-\u194F'
	    },
	    {
	        'name': 'Linear_A',
	        'astral': '\uD801[\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]'
	    },
	    {
	        'name': 'Linear_B',
	        'astral': '\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA]'
	    },
	    {
	        'name': 'Lisu',
	        'bmp': '\uA4D0-\uA4FF',
	        'astral': '\uD807\uDFB0'
	    },
	    {
	        'name': 'Lycian',
	        'astral': '\uD800[\uDE80-\uDE9C]'
	    },
	    {
	        'name': 'Lydian',
	        'astral': '\uD802[\uDD20-\uDD39\uDD3F]'
	    },
	    {
	        'name': 'Mahajani',
	        'astral': '\uD804[\uDD50-\uDD76]'
	    },
	    {
	        'name': 'Makasar',
	        'astral': '\uD807[\uDEE0-\uDEF8]'
	    },
	    {
	        'name': 'Malayalam',
	        'bmp': '\u0D00-\u0D0C\u0D0E-\u0D10\u0D12-\u0D44\u0D46-\u0D48\u0D4A-\u0D4F\u0D54-\u0D63\u0D66-\u0D7F'
	    },
	    {
	        'name': 'Mandaic',
	        'bmp': '\u0840-\u085B\u085E'
	    },
	    {
	        'name': 'Manichaean',
	        'astral': '\uD802[\uDEC0-\uDEE6\uDEEB-\uDEF6]'
	    },
	    {
	        'name': 'Marchen',
	        'astral': '\uD807[\uDC70-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6]'
	    },
	    {
	        'name': 'Masaram_Gondi',
	        'astral': '\uD807[\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD47\uDD50-\uDD59]'
	    },
	    {
	        'name': 'Medefaidrin',
	        'astral': '\uD81B[\uDE40-\uDE9A]'
	    },
	    {
	        'name': 'Meetei_Mayek',
	        'bmp': '\uAAE0-\uAAF6\uABC0-\uABED\uABF0-\uABF9'
	    },
	    {
	        'name': 'Mende_Kikakui',
	        'astral': '\uD83A[\uDC00-\uDCC4\uDCC7-\uDCD6]'
	    },
	    {
	        'name': 'Meroitic_Cursive',
	        'astral': '\uD802[\uDDA0-\uDDB7\uDDBC-\uDDCF\uDDD2-\uDDFF]'
	    },
	    {
	        'name': 'Meroitic_Hieroglyphs',
	        'astral': '\uD802[\uDD80-\uDD9F]'
	    },
	    {
	        'name': 'Miao',
	        'astral': '\uD81B[\uDF00-\uDF4A\uDF4F-\uDF87\uDF8F-\uDF9F]'
	    },
	    {
	        'name': 'Modi',
	        'astral': '\uD805[\uDE00-\uDE44\uDE50-\uDE59]'
	    },
	    {
	        'name': 'Mongolian',
	        'bmp': '\u1800\u1801\u1804\u1806-\u180E\u1810-\u1819\u1820-\u1878\u1880-\u18AA',
	        'astral': '\uD805[\uDE60-\uDE6C]'
	    },
	    {
	        'name': 'Mro',
	        'astral': '\uD81A[\uDE40-\uDE5E\uDE60-\uDE69\uDE6E\uDE6F]'
	    },
	    {
	        'name': 'Multani',
	        'astral': '\uD804[\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA9]'
	    },
	    {
	        'name': 'Myanmar',
	        'bmp': '\u1000-\u109F\uA9E0-\uA9FE\uAA60-\uAA7F'
	    },
	    {
	        'name': 'Nabataean',
	        'astral': '\uD802[\uDC80-\uDC9E\uDCA7-\uDCAF]'
	    },
	    {
	        'name': 'Nandinagari',
	        'astral': '\uD806[\uDDA0-\uDDA7\uDDAA-\uDDD7\uDDDA-\uDDE4]'
	    },
	    {
	        'name': 'New_Tai_Lue',
	        'bmp': '\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u19DE\u19DF'
	    },
	    {
	        'name': 'Newa',
	        'astral': '\uD805[\uDC00-\uDC5B\uDC5D-\uDC61]'
	    },
	    {
	        'name': 'Nko',
	        'bmp': '\u07C0-\u07FA\u07FD-\u07FF'
	    },
	    {
	        'name': 'Nushu',
	        'astral': '\uD81B\uDFE1|\uD82C[\uDD70-\uDEFB]'
	    },
	    {
	        'name': 'Nyiakeng_Puachue_Hmong',
	        'astral': '\uD838[\uDD00-\uDD2C\uDD30-\uDD3D\uDD40-\uDD49\uDD4E\uDD4F]'
	    },
	    {
	        'name': 'Ogham',
	        'bmp': '\u1680-\u169C'
	    },
	    {
	        'name': 'Ol_Chiki',
	        'bmp': '\u1C50-\u1C7F'
	    },
	    {
	        'name': 'Old_Hungarian',
	        'astral': '\uD803[\uDC80-\uDCB2\uDCC0-\uDCF2\uDCFA-\uDCFF]'
	    },
	    {
	        'name': 'Old_Italic',
	        'astral': '\uD800[\uDF00-\uDF23\uDF2D-\uDF2F]'
	    },
	    {
	        'name': 'Old_North_Arabian',
	        'astral': '\uD802[\uDE80-\uDE9F]'
	    },
	    {
	        'name': 'Old_Permic',
	        'astral': '\uD800[\uDF50-\uDF7A]'
	    },
	    {
	        'name': 'Old_Persian',
	        'astral': '\uD800[\uDFA0-\uDFC3\uDFC8-\uDFD5]'
	    },
	    {
	        'name': 'Old_Sogdian',
	        'astral': '\uD803[\uDF00-\uDF27]'
	    },
	    {
	        'name': 'Old_South_Arabian',
	        'astral': '\uD802[\uDE60-\uDE7F]'
	    },
	    {
	        'name': 'Old_Turkic',
	        'astral': '\uD803[\uDC00-\uDC48]'
	    },
	    {
	        'name': 'Oriya',
	        'bmp': '\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B77'
	    },
	    {
	        'name': 'Osage',
	        'astral': '\uD801[\uDCB0-\uDCD3\uDCD8-\uDCFB]'
	    },
	    {
	        'name': 'Osmanya',
	        'astral': '\uD801[\uDC80-\uDC9D\uDCA0-\uDCA9]'
	    },
	    {
	        'name': 'Pahawh_Hmong',
	        'astral': '\uD81A[\uDF00-\uDF45\uDF50-\uDF59\uDF5B-\uDF61\uDF63-\uDF77\uDF7D-\uDF8F]'
	    },
	    {
	        'name': 'Palmyrene',
	        'astral': '\uD802[\uDC60-\uDC7F]'
	    },
	    {
	        'name': 'Pau_Cin_Hau',
	        'astral': '\uD806[\uDEC0-\uDEF8]'
	    },
	    {
	        'name': 'Phags_Pa',
	        'bmp': '\uA840-\uA877'
	    },
	    {
	        'name': 'Phoenician',
	        'astral': '\uD802[\uDD00-\uDD1B\uDD1F]'
	    },
	    {
	        'name': 'Psalter_Pahlavi',
	        'astral': '\uD802[\uDF80-\uDF91\uDF99-\uDF9C\uDFA9-\uDFAF]'
	    },
	    {
	        'name': 'Rejang',
	        'bmp': '\uA930-\uA953\uA95F'
	    },
	    {
	        'name': 'Runic',
	        'bmp': '\u16A0-\u16EA\u16EE-\u16F8'
	    },
	    {
	        'name': 'Samaritan',
	        'bmp': '\u0800-\u082D\u0830-\u083E'
	    },
	    {
	        'name': 'Saurashtra',
	        'bmp': '\uA880-\uA8C5\uA8CE-\uA8D9'
	    },
	    {
	        'name': 'Sharada',
	        'astral': '\uD804[\uDD80-\uDDDF]'
	    },
	    {
	        'name': 'Shavian',
	        'astral': '\uD801[\uDC50-\uDC7F]'
	    },
	    {
	        'name': 'Siddham',
	        'astral': '\uD805[\uDD80-\uDDB5\uDDB8-\uDDDD]'
	    },
	    {
	        'name': 'SignWriting',
	        'astral': '\uD836[\uDC00-\uDE8B\uDE9B-\uDE9F\uDEA1-\uDEAF]'
	    },
	    {
	        'name': 'Sinhala',
	        'bmp': '\u0D81-\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2-\u0DF4',
	        'astral': '\uD804[\uDDE1-\uDDF4]'
	    },
	    {
	        'name': 'Sogdian',
	        'astral': '\uD803[\uDF30-\uDF59]'
	    },
	    {
	        'name': 'Sora_Sompeng',
	        'astral': '\uD804[\uDCD0-\uDCE8\uDCF0-\uDCF9]'
	    },
	    {
	        'name': 'Soyombo',
	        'astral': '\uD806[\uDE50-\uDEA2]'
	    },
	    {
	        'name': 'Sundanese',
	        'bmp': '\u1B80-\u1BBF\u1CC0-\u1CC7'
	    },
	    {
	        'name': 'Syloti_Nagri',
	        'bmp': '\uA800-\uA82C'
	    },
	    {
	        'name': 'Syriac',
	        'bmp': '\u0700-\u070D\u070F-\u074A\u074D-\u074F\u0860-\u086A'
	    },
	    {
	        'name': 'Tagalog',
	        'bmp': '\u1700-\u170C\u170E-\u1714'
	    },
	    {
	        'name': 'Tagbanwa',
	        'bmp': '\u1760-\u176C\u176E-\u1770\u1772\u1773'
	    },
	    {
	        'name': 'Tai_Le',
	        'bmp': '\u1950-\u196D\u1970-\u1974'
	    },
	    {
	        'name': 'Tai_Tham',
	        'bmp': '\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA0-\u1AAD'
	    },
	    {
	        'name': 'Tai_Viet',
	        'bmp': '\uAA80-\uAAC2\uAADB-\uAADF'
	    },
	    {
	        'name': 'Takri',
	        'astral': '\uD805[\uDE80-\uDEB8\uDEC0-\uDEC9]'
	    },
	    {
	        'name': 'Tamil',
	        'bmp': '\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BFA',
	        'astral': '\uD807[\uDFC0-\uDFF1\uDFFF]'
	    },
	    {
	        'name': 'Tangut',
	        'astral': '\uD81B\uDFE0|[\uD81C-\uD820][\uDC00-\uDFFF]|\uD821[\uDC00-\uDFF7]|\uD822[\uDC00-\uDEFF]|\uD823[\uDD00-\uDD08]'
	    },
	    {
	        'name': 'Telugu',
	        'bmp': '\u0C00-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C77-\u0C7F'
	    },
	    {
	        'name': 'Thaana',
	        'bmp': '\u0780-\u07B1'
	    },
	    {
	        'name': 'Thai',
	        'bmp': '\u0E01-\u0E3A\u0E40-\u0E5B'
	    },
	    {
	        'name': 'Tibetan',
	        'bmp': '\u0F00-\u0F47\u0F49-\u0F6C\u0F71-\u0F97\u0F99-\u0FBC\u0FBE-\u0FCC\u0FCE-\u0FD4\u0FD9\u0FDA'
	    },
	    {
	        'name': 'Tifinagh',
	        'bmp': '\u2D30-\u2D67\u2D6F\u2D70\u2D7F'
	    },
	    {
	        'name': 'Tirhuta',
	        'astral': '\uD805[\uDC80-\uDCC7\uDCD0-\uDCD9]'
	    },
	    {
	        'name': 'Ugaritic',
	        'astral': '\uD800[\uDF80-\uDF9D\uDF9F]'
	    },
	    {
	        'name': 'Vai',
	        'bmp': '\uA500-\uA62B'
	    },
	    {
	        'name': 'Wancho',
	        'astral': '\uD838[\uDEC0-\uDEF9\uDEFF]'
	    },
	    {
	        'name': 'Warang_Citi',
	        'astral': '\uD806[\uDCA0-\uDCF2\uDCFF]'
	    },
	    {
	        'name': 'Yezidi',
	        'astral': '\uD803[\uDE80-\uDEA9\uDEAB-\uDEAD\uDEB0\uDEB1]'
	    },
	    {
	        'name': 'Yi',
	        'bmp': '\uA000-\uA48C\uA490-\uA4C6'
	    },
	    {
	        'name': 'Zanabazar_Square',
	        'astral': '\uD806[\uDE00-\uDE47]'
	    }
	];

	/*!
	 * XRegExp Unicode Scripts 4.4.1
	 * <xregexp.com>
	 * Steven Levithan (c) 2010-present MIT License
	 * Unicode data by Mathias Bynens <mathiasbynens.be>
	 */

	var unicodeScripts = (XRegExp) => {

	    /**
	     * Adds support for all Unicode scripts. E.g., `\p{Latin}`. Token names are case insensitive,
	     * and any spaces, hyphens, and underscores are ignored.
	     *
	     * Uses Unicode 13.0.0.
	     *
	     * @requires XRegExp, Unicode Base
	     */

	    if (!XRegExp.addUnicodeData) {
	        throw new ReferenceError('Unicode Base must be loaded before Unicode Scripts');
	    }

	    XRegExp.addUnicodeData(scripts$2);
	};

	build(XRegExp);
	matchRecursive(XRegExp);
	unicodeBase(XRegExp);
	unicodeBlocks(XRegExp);
	unicodeCategories(XRegExp);
	unicodeProperties(XRegExp);
	unicodeScripts(XRegExp);

	var src = /*#__PURE__*/Object.freeze({
		__proto__: null,
		'default': XRegExp
	});

	const ANALYTICS = tags_1.ANALYTICS;

	var analytics_sampler = {
	  sample (span, config, useDefault) {
	    if (!config || config.enabled !== true) return

	    if (useDefault) {
	      if (config.sampleRate === undefined) {
	        span.setTag(ANALYTICS, 1);
	      } else if (config.sampleRate >= 0 && config.sampleRate <= 1) {
	        span.setTag(ANALYTICS, config.sampleRate);
	      }
	    }

	    if (config.sampleRates && typeof config.sampleRates === 'object') {
	      const name = span.context()._name;

	      if (config.sampleRates.hasOwnProperty(name)) {
	        this.sample(span, {
	          enabled: true,
	          sampleRate: config.sampleRates[name]
	        }, true);
	      }
	    }
	  }
	};

	const urlFilter = {
	  getFilter (config) {
	    if (typeof config.filter === 'function') {
	      return config.filter
	    } else if (config.hasOwnProperty('filter')) {
	      log_1$1.error('Expected `filter` to be a function. Overriding filter property to default.');
	    }

	    const include = config.include || /.*/;
	    const exclude = config.exclude || [];

	    return uri => {
	      const included = applyFilter(include, uri);
	      const excluded = applyFilter(exclude, uri);
	      return included && !excluded
	    }

	    function applyFilter (filter, uri) {
	      if (typeof filter === 'function') {
	        return filter(uri)
	      } else if (filter instanceof RegExp) {
	        return filter.test(uri)
	      } else if (filter instanceof Array) {
	        return filter.some(filter => applyFilter(filter, uri))
	      }

	      return filter === uri
	    }
	  }
	};

	var urlfilter = urlFilter;

	var xregexp = /*@__PURE__*/getAugmentedNamespace(src);

	const FORMAT_HTTP_HEADERS = lib.FORMAT_HTTP_HEADERS;







	const idToHex = utils.idToHex;

	const HTTP = types.HTTP;
	const SERVER = kinds.SERVER;
	const RESOURCE_NAME = tags_1.RESOURCE_NAME;
	const SERVICE_NAME = tags_1.SERVICE_NAME;
	const SPAN_TYPE = tags_1.SPAN_TYPE;
	const SPAN_KIND$1 = tags_1.SPAN_KIND;
	const ERROR = tags_1.ERROR;
	const HTTP_METHOD = tags_1.HTTP_METHOD;
	const HTTP_URL = tags_1.HTTP_URL;
	const HTTP_STATUS_CODE$1 = tags_1.HTTP_STATUS_CODE;
	const HTTP_ROUTE = tags_1.HTTP_ROUTE;
	const HTTP_REQUEST_HEADERS$1 = tags_1.HTTP_REQUEST_HEADERS;
	const HTTP_RESPONSE_HEADERS$1 = tags_1.HTTP_RESPONSE_HEADERS;

	const web = {
	  // Ensure the configuration has the correct structure and defaults.
	  normalizeConfig (config) {
	    config = config.server || config;

	    const headers = getHeadersToRecord(config);
	    const validateStatus = getStatusValidator$1(config);
	    const hooks = getHooks$1(config);
	    const filter = urlfilter.getFilter(config);
	    const expandRouteParameters = getExpandRouteParameters(config);
	    const synthesizeRequestingContext = getSynthesizeRequestingContext(config);

	    return Object.assign({}, config, {
	      headers,
	      validateStatus,
	      hooks,
	      filter,
	      expandRouteParameters,
	      synthesizeRequestingContext
	    })
	  },

	  // Start a span and activate a scope for a request.
	  instrument (tracer, config, req, res, name, callback) {
	    this.patch(req);

	    const span = startSpan$4(tracer, config, req, res, name);

	    // TODO: replace this with a REFERENCE_NOOP after we split http/express/etc
	    if (!config.filter(req.url)) {
	      span.context()._sampling.drop = true;
	    }

	    if (config.service) {
	      span.setTag(SERVICE_NAME, config.service);
	    }

	    analytics_sampler.sample(span, config.analytics, true);

	    wrapEnd(req);
	    wrapEvents(req);

	    const enableServerTiming = process.env.SIGNALFX_SERVER_TIMING_CONTEXT;
	    if (enableServerTiming && enableServerTiming.trim().toLowerCase() === 'true') {
	      if (!res._sfx_serverTimingAdded) {
	        res.setHeader('Server-Timing', traceParentHeader(span.context()));
	        res.setHeader('Access-Control-Expose-Headers', 'Server-Timing');
	        Object.defineProperty(res, '_sfx_serverTimingAdded', { value: true });
	      }
	    }

	    return callback && tracer.scope().activate(span, () => callback(span))
	  },

	  // Reactivate the request scope in case it was changed by a middleware.
	  reactivate (req, fn) {
	    return reactivate(req, fn)
	  },

	  // Add a route segment that will be used for the resource name.
	  enterRoute (req, path) {
	    req._datadog.paths.push(path);
	  },

	  // Remove the current route segment.
	  exitRoute (req) {
	    req._datadog.paths.pop();
	  },

	  // Start a new middleware span and activate a new scope with the span.
	  wrapMiddleware (req, middleware, name, fn) {
	    if (!this.active(req)) return fn()

	    const tracer = req._datadog.tracer;
	    const childOf = this.active(req);
	    const span = tracer.startSpan(name, { childOf });

	    span.addTags({
	      [RESOURCE_NAME]: middleware._name || middleware.name || '<anonymous>'
	    });

	    analytics_sampler.sample(span, req._datadog.config.analytics);

	    req._datadog.middleware.push(span);

	    return tracer.scope().activate(span, fn)
	  },

	  // Finish the active middleware span.
	  finish (req, error) {
	    if (!this.active(req)) return

	    const span = req._datadog.middleware.pop();

	    if (span) {
	      if (error) {
	        span.addTags({
	          'sfx.error.kind': error.name,
	          'sfx.error.message': error.message,
	          'sfx.error.stack': error.stack
	        });
	      }

	      span.finish();
	    }
	  },

	  // Register a callback to run before res.end() is called.
	  beforeEnd (req, callback) {
	    req._datadog.beforeEnd.push(callback);
	  },

	  // Prepare the request for instrumentation.
	  patch (req) {
	    if (req._datadog) return

	    Object.defineProperty(req, '_datadog', {
	      value: {
	        span: null,
	        paths: [],
	        middleware: [],
	        beforeEnd: [],
	        childOfRequestingContext: false
	      }
	    });
	  },

	  // Return the request root span.
	  root (req) {
	    return req._datadog ? req._datadog.span : null
	  },

	  // Return the active span.
	  active (req) {
	    if (!req._datadog) return null
	    if (req._datadog.middleware.length === 0) return req._datadog.span || null

	    return req._datadog.middleware.slice(-1)[0]
	  }
	};

	function startSpan$4 (tracer, config, req, res, name) {
	  req._datadog.config = config;

	  if (req._datadog.span) {
	    req._datadog.span.context()._name = name;
	    return req._datadog.span
	  }

	  let childOf = tracer.extract(FORMAT_HTTP_HEADERS, req.headers);
	  if (!childOf) {
	    childOf = synthesizedSpanContext(req);
	  } else {
	    req._datadog.childOfRequestingContext = true;
	  }

	  const span = tracer.startSpan(name, { childOf });

	  req._datadog.tracer = tracer;
	  req._datadog.span = span;
	  req._datadog.res = res;

	  return span
	}

	function finish$5 (req, res) {
	  if (req._datadog.finished) return

	  addRequestTags(req);
	  addResponseTags(req);

	  req._datadog.config.hooks.request(req._datadog.span, req, res);

	  addResourceTag(req);
	  revertSynthesizedContext(req);

	  req._datadog.span.finish();
	  req._datadog.finished = true;
	}

	function finishMiddleware (req, res) {
	  if (req._datadog.finished) return

	  let span;

	  while ((span = req._datadog.middleware.pop())) {
	    span.finish();
	  }
	}

	function wrapEnd (req) {
	  const scope = req._datadog.tracer.scope();
	  const res = req._datadog.res;
	  const end = res.end;

	  if (end === req._datadog.end) return

	  let _end = req._datadog.end = res.end = function () {
	    req._datadog.beforeEnd.forEach(beforeEnd => beforeEnd());

	    finishMiddleware(req);

	    const returnValue = end.apply(this, arguments);

	    finish$5(req, res);

	    return returnValue
	  };

	  Object.defineProperty(res, 'end', {
	    configurable: true,
	    get () {
	      return _end
	    },
	    set (value) {
	      _end = scope.bind(value, req._datadog.span);
	    }
	  });
	}

	function wrapEvents (req) {
	  const scope = req._datadog.tracer.scope();
	  const res = req._datadog.res;
	  const on = res.on;

	  if (on === req._datadog.on) return

	  req._datadog.on = scope.bind(res, req._datadog.span).on;
	}

	function reactivate (req, fn) {
	  return req._datadog.tracer.scope().activate(req._datadog.span, fn)
	}

	function addRequestTags (req) {
	  const protocol = req.connection.encrypted ? 'https' : 'http';
	  const url = `${protocol}://${req.headers['host']}${req.originalUrl || req.url}`;
	  const span = req._datadog.span;

	  span.addTags({
	    [HTTP_URL]: url.split('?')[0],
	    [HTTP_METHOD]: req.method,
	    [SPAN_KIND$1]: SERVER,
	    [SPAN_TYPE]: HTTP
	  });

	  addHeaders(req);
	}

	function addResponseTags (req) {
	  const span = req._datadog.span;
	  const res = req._datadog.res;

	  if (req._datadog.paths.length > 0) {
	    span.setTag(HTTP_ROUTE, req._datadog.paths.join(''));
	  }

	  span.addTags({
	    [HTTP_STATUS_CODE$1]: res.statusCode
	  });

	  addStatusError(req);
	}

	function addResourceTag (req) {
	  const span = req._datadog.span;
	  const tags = span.context()._tags;

	  if (tags['resource.name']) return

	  const path = expandRouteParameters(tags[HTTP_ROUTE], req);
	  const resource = [].concat(path)
	    .filter(val => val)
	    .join(' ');

	  if (!resource) {
	    const componentName = tags.component ? tags.component : 'handle';
	    span.setTag(RESOURCE_NAME, `${componentName}.request`);
	  } else {
	    span.setTag(RESOURCE_NAME, resource);
	  }
	}

	// Allows :routeParameters to be expanded by their request path value
	function expandRouteParameters (httpRoute, req) {
	  let expandedPath = httpRoute; // default w/o expansion
	  const expansionRules = req._datadog.config.expandRouteParameters[httpRoute];
	  if (expansionRules === undefined) {
	    return expandedPath
	  }

	  const keys = [];
	  const re = pathToRegexp(httpRoute, keys);
	  // Account for routing-reduced paths
	  const path = req.originalUrl.substring(0, req.originalUrl.indexOf(req.path) + req.path.length);
	  const matches = re.exec(path);
	  if (matches === null) {
	    return expandedPath
	  }

	  const hits = matches.slice(1, keys.length + 1);
	  for (let i = 0; i < keys.length; i++) {
	    const key = keys[i];
	    if (expansionRules[key.name] === true) {
	      const replacePattern = `:${key.name}`;
	      const patternIndex = expandedPath.indexOf(replacePattern);
	      // get substrings before and after :key.name
	      const before = expandedPath.substring(0, patternIndex);
	      let after = expandedPath.substring(patternIndex + replacePattern.length);
	      // remove immediate capture group from after substring
	      let capGroupMatches;
	      try {
	        capGroupMatches = xregexp.matchRecursive(after, '\\(', '\\)');
	      } catch (err) { // will throw if unbalanced parens in data (nothing we can do)
	        capGroupMatches = [];
	      }
	      if (capGroupMatches.length >= 1) {
	        // replace stripped outer parens from recursive match and remove from after substring
	        const replacedGroup = `(${capGroupMatches[0]})`;
	        const replacedGroupIndex = after.indexOf(replacedGroup);
	        after = after.substring(replacedGroupIndex + replacedGroup.length);
	      }
	      // recreate expanded path with truncated substring
	      // set expandedPath to be replaced :key.name w/ value
	      expandedPath = before + hits[i] + after;
	    }
	  }

	  return expandedPath
	}

	// Creates a new span context and sets its ids as `req.sfx.traceId`
	// and `req.sfx.spanId` for user access.
	function synthesizedSpanContext (req) {
	  const traceId = platform$3.id();
	  const spanContext = new span_context({ traceId, spanId: traceId });
	  Object.defineProperty(spanContext, 'isSynthesized', { value: true });
	  const resId = idToHex(traceId);
	  Object.defineProperty(req, 'sfx', { value: { traceId: resId, spanId: resId } });
	  return spanContext
	}

	// Will remove the synthesized parent for any request without
	// `synthesizeRequestingContext` configured.  Since the router
	// instrumentation only determines paths by the end of the
	// lifecycle, this must affect all spans that aren't the actual
	// child of propagated context.
	function revertSynthesizedContext (req) {
	  if (req._datadog.childOfRequestingContext) {
	    return
	  }
	  const span = req._datadog.span;
	  const tags = span.context()._tags;
	  const path = tags[HTTP_ROUTE];

	  const synthesize = req._datadog.config.synthesizeRequestingContext[path];
	  if (synthesize) {
	    return
	  }
	  // "revert" synthesized context
	  span.context()._parentId = null;
	}

	function addHeaders (req) {
	  const span = req._datadog.span;

	  req._datadog.config.headers.forEach(key => {
	    const reqHeader = req.headers[key];
	    const resHeader = req._datadog.res.getHeader(key);

	    if (reqHeader) {
	      span.setTag(`${HTTP_REQUEST_HEADERS$1}.${key}`, reqHeader);
	    }

	    if (resHeader) {
	      span.setTag(`${HTTP_RESPONSE_HEADERS$1}.${key}`, resHeader);
	    }
	  });
	}

	function addStatusError (req) {
	  if (!req._datadog.config.validateStatus(req._datadog.res.statusCode)) {
	    req._datadog.span.setTag(ERROR, true);
	  }
	}

	function getHeadersToRecord (config) {
	  if (Array.isArray(config.headers)) {
	    try {
	      return config.headers.map(key => key.toLowerCase())
	    } catch (err) {
	      log_1$1.error(err);
	    }
	  } else if (config.hasOwnProperty('headers')) {
	    log_1$1.error('Expected `headers` to be an array of strings.');
	  }
	  return []
	}

	function getStatusValidator$1 (config) {
	  if (typeof config.validateStatus === 'function') {
	    return config.validateStatus
	  } else if (config.hasOwnProperty('validateStatus')) {
	    log_1$1.error('Expected `validateStatus` to be a function.');
	  }
	  return code => code < 500
	}

	function getHooks$1 (config) {
	  const noop = () => {};
	  const request = (config.hooks && config.hooks.request) || noop;

	  return { request }
	}

	function getExpandRouteParameters (config) {
	  if (typeof config.expandRouteParameters === 'object') {
	    return config.expandRouteParameters
	  } else if (config.hasOwnProperty('expandRouteParameters')) {
	    log_1$1.error('Expected `expandRouteParameters` to be an object of paths to expansion rules');
	  }
	  return {}
	}

	function getSynthesizeRequestingContext (config) {
	  if (typeof config.synthesizeRequestingContext === 'object') {
	    return config.synthesizeRequestingContext
	  } else if (config.hasOwnProperty('synthesizeRequestingContext')) {
	    log_1$1.error('Expected `synthesizeRequestingContext` to be an object of paths to booleans');
	  }
	  return {}
	}

	function padTo128 (hexId) {
	  const padded = '0000000000000000' + hexId;
	  return padded.slice(-32)
	}

	function traceParentHeader (spanContext) {
	  // https://www.w3.org/TR/server-timing/
	  // https://www.w3.org/TR/trace-context/#traceparent-header
	  return 'traceparent;desc="00-' + padTo128(idToHex(spanContext._traceId)) + '-' + idToHex(spanContext._spanId) + '-01"'
	}

	var web_1 = web;

	function createWrapMethod$2 (tracer, config) {
	  config = web_1.normalizeConfig(config);

	  return function wrapMethodRequest (handle) {
	    return function methodWithTrace (request, response) {
	      const route = this.Route.match(request.url, request.method, request.hostname);
	      return web_1.instrument(tracer, config, request, response, 'adonis.request', () => {
	        const span = web_1.active(request);
	        if (span) {
	          span.setTag('component', 'adonis');
	        }

	        web_1.exitRoute(request);
	        if (route && route.route) {
	          web_1.enterRoute(request, route.route._route);
	        } else {
	          web_1.enterRoute(request, '');
	        }
	        return handle.apply(this, arguments)
	      })
	    }
	  }
	}

	function createWrapResolve$1 (tracer, config) {
	  return function wrapResolve (_resolveMiddleware) {
	    return function resolveWithTrace (middleware, args) {
	      middleware._name = 'adonis.middleware';
	      if (typeof middleware.namespace === 'string') {
	        middleware._name = middleware.namespace.split('.')[0];
	      } else if (typeof middleware.namespace === 'function') {
	        if (middleware.params && typeof middleware.params[0] === 'string') {
	          middleware._name = middleware.params[0];
	        } else if (middleware.args && typeof middleware.args[0] === 'string') {
	          middleware._name = middleware.args[0];
	        }
	      }

	      const request = args[0].req;
	      return web_1.wrapMiddleware(request, middleware, 'adonis.middleware', () => {
	        const span = web_1.active(request);

	        if (span) {
	          span.setTag('component', 'adonis');
	        }

	        try {
	          const result = _resolveMiddleware.apply(this, arguments);
	          if (result && typeof result.then === 'function') {
	            result.then(
	              () => web_1.finish(request),
	              err => web_1.finish(request, err)
	            );
	          } else {
	            web_1.finish(request);
	          }
	          return result
	        } catch (error) {
	          web_1.finish(request, error);
	          throw error
	        }
	      })
	    }
	  }
	}

	var adonis = [
	  {
	    name: '@adonisjs/framework',
	    versions: ['>=4.0.0'],
	    file: 'src/Server/index.js',
	    patch (Server, tracer, config) {
	      this.wrap(Server.prototype, 'handle', createWrapMethod$2(tracer, config));
	    },
	    unpatch (Server) {
	      this.unwrap(Server.prototype, 'handle');
	    }
	  },
	  {
	    name: '@adonisjs/framework',
	    versions: ['<=5.0.4'],
	    file: 'src/Server/index.js',
	    patch (Server, tracer, config) {
	      this.wrap(Server.prototype, '_resolveMiddleware', createWrapResolve$1());
	    },
	    unpatch (Server) {
	      this.unwrap(Server.prototype, '_resolveMiddleware');
	    }
	  },
	  {
	    name: '@adonisjs/middleware-base',
	    versions: ['>=1'],
	    patch (MiddlewareBase, tracer, config) {
	      this.wrap(MiddlewareBase.prototype, '_resolveMiddleware', createWrapResolve$1());
	    },
	    unpatch (MiddlewareBase) {
	      this.unwrap(MiddlewareBase.prototype, '_resolveMiddleware');
	    }
	  }
	];

	var ipaddr = createCommonjsModule(function (module) {
	(function() {
	  var expandIPv6, ipaddr, ipv4Part, ipv4Regexes, ipv6Part, ipv6Regexes, matchCIDR, root, zoneIndex;

	  ipaddr = {};

	  root = this;

	  if ((module !== null) && module.exports) {
	    module.exports = ipaddr;
	  } else {
	    root['ipaddr'] = ipaddr;
	  }

	  matchCIDR = function(first, second, partSize, cidrBits) {
	    var part, shift;
	    if (first.length !== second.length) {
	      throw new Error("ipaddr: cannot match CIDR for objects with different lengths");
	    }
	    part = 0;
	    while (cidrBits > 0) {
	      shift = partSize - cidrBits;
	      if (shift < 0) {
	        shift = 0;
	      }
	      if (first[part] >> shift !== second[part] >> shift) {
	        return false;
	      }
	      cidrBits -= partSize;
	      part += 1;
	    }
	    return true;
	  };

	  ipaddr.subnetMatch = function(address, rangeList, defaultName) {
	    var k, len, rangeName, rangeSubnets, subnet;
	    if (defaultName == null) {
	      defaultName = 'unicast';
	    }
	    for (rangeName in rangeList) {
	      rangeSubnets = rangeList[rangeName];
	      if (rangeSubnets[0] && !(rangeSubnets[0] instanceof Array)) {
	        rangeSubnets = [rangeSubnets];
	      }
	      for (k = 0, len = rangeSubnets.length; k < len; k++) {
	        subnet = rangeSubnets[k];
	        if (address.kind() === subnet[0].kind()) {
	          if (address.match.apply(address, subnet)) {
	            return rangeName;
	          }
	        }
	      }
	    }
	    return defaultName;
	  };

	  ipaddr.IPv4 = (function() {
	    function IPv4(octets) {
	      var k, len, octet;
	      if (octets.length !== 4) {
	        throw new Error("ipaddr: ipv4 octet count should be 4");
	      }
	      for (k = 0, len = octets.length; k < len; k++) {
	        octet = octets[k];
	        if (!((0 <= octet && octet <= 255))) {
	          throw new Error("ipaddr: ipv4 octet should fit in 8 bits");
	        }
	      }
	      this.octets = octets;
	    }

	    IPv4.prototype.kind = function() {
	      return 'ipv4';
	    };

	    IPv4.prototype.toString = function() {
	      return this.octets.join(".");
	    };

	    IPv4.prototype.toNormalizedString = function() {
	      return this.toString();
	    };

	    IPv4.prototype.toByteArray = function() {
	      return this.octets.slice(0);
	    };

	    IPv4.prototype.match = function(other, cidrRange) {
	      var ref;
	      if (cidrRange === void 0) {
	        ref = other, other = ref[0], cidrRange = ref[1];
	      }
	      if (other.kind() !== 'ipv4') {
	        throw new Error("ipaddr: cannot match ipv4 address with non-ipv4 one");
	      }
	      return matchCIDR(this.octets, other.octets, 8, cidrRange);
	    };

	    IPv4.prototype.SpecialRanges = {
	      unspecified: [[new IPv4([0, 0, 0, 0]), 8]],
	      broadcast: [[new IPv4([255, 255, 255, 255]), 32]],
	      multicast: [[new IPv4([224, 0, 0, 0]), 4]],
	      linkLocal: [[new IPv4([169, 254, 0, 0]), 16]],
	      loopback: [[new IPv4([127, 0, 0, 0]), 8]],
	      carrierGradeNat: [[new IPv4([100, 64, 0, 0]), 10]],
	      "private": [[new IPv4([10, 0, 0, 0]), 8], [new IPv4([172, 16, 0, 0]), 12], [new IPv4([192, 168, 0, 0]), 16]],
	      reserved: [[new IPv4([192, 0, 0, 0]), 24], [new IPv4([192, 0, 2, 0]), 24], [new IPv4([192, 88, 99, 0]), 24], [new IPv4([198, 51, 100, 0]), 24], [new IPv4([203, 0, 113, 0]), 24], [new IPv4([240, 0, 0, 0]), 4]]
	    };

	    IPv4.prototype.range = function() {
	      return ipaddr.subnetMatch(this, this.SpecialRanges);
	    };

	    IPv4.prototype.toIPv4MappedAddress = function() {
	      return ipaddr.IPv6.parse("::ffff:" + (this.toString()));
	    };

	    IPv4.prototype.prefixLengthFromSubnetMask = function() {
	      var cidr, i, k, octet, stop, zeros, zerotable;
	      zerotable = {
	        0: 8,
	        128: 7,
	        192: 6,
	        224: 5,
	        240: 4,
	        248: 3,
	        252: 2,
	        254: 1,
	        255: 0
	      };
	      cidr = 0;
	      stop = false;
	      for (i = k = 3; k >= 0; i = k += -1) {
	        octet = this.octets[i];
	        if (octet in zerotable) {
	          zeros = zerotable[octet];
	          if (stop && zeros !== 0) {
	            return null;
	          }
	          if (zeros !== 8) {
	            stop = true;
	          }
	          cidr += zeros;
	        } else {
	          return null;
	        }
	      }
	      return 32 - cidr;
	    };

	    return IPv4;

	  })();

	  ipv4Part = "(0?\\d+|0x[a-f0-9]+)";

	  ipv4Regexes = {
	    fourOctet: new RegExp("^" + ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part + "$", 'i'),
	    longValue: new RegExp("^" + ipv4Part + "$", 'i')
	  };

	  ipaddr.IPv4.parser = function(string) {
	    var match, parseIntAuto, part, shift, value;
	    parseIntAuto = function(string) {
	      if (string[0] === "0" && string[1] !== "x") {
	        return parseInt(string, 8);
	      } else {
	        return parseInt(string);
	      }
	    };
	    if (match = string.match(ipv4Regexes.fourOctet)) {
	      return (function() {
	        var k, len, ref, results;
	        ref = match.slice(1, 6);
	        results = [];
	        for (k = 0, len = ref.length; k < len; k++) {
	          part = ref[k];
	          results.push(parseIntAuto(part));
	        }
	        return results;
	      })();
	    } else if (match = string.match(ipv4Regexes.longValue)) {
	      value = parseIntAuto(match[1]);
	      if (value > 0xffffffff || value < 0) {
	        throw new Error("ipaddr: address outside defined range");
	      }
	      return ((function() {
	        var k, results;
	        results = [];
	        for (shift = k = 0; k <= 24; shift = k += 8) {
	          results.push((value >> shift) & 0xff);
	        }
	        return results;
	      })()).reverse();
	    } else {
	      return null;
	    }
	  };

	  ipaddr.IPv6 = (function() {
	    function IPv6(parts, zoneId) {
	      var i, k, l, len, part, ref;
	      if (parts.length === 16) {
	        this.parts = [];
	        for (i = k = 0; k <= 14; i = k += 2) {
	          this.parts.push((parts[i] << 8) | parts[i + 1]);
	        }
	      } else if (parts.length === 8) {
	        this.parts = parts;
	      } else {
	        throw new Error("ipaddr: ipv6 part count should be 8 or 16");
	      }
	      ref = this.parts;
	      for (l = 0, len = ref.length; l < len; l++) {
	        part = ref[l];
	        if (!((0 <= part && part <= 0xffff))) {
	          throw new Error("ipaddr: ipv6 part should fit in 16 bits");
	        }
	      }
	      if (zoneId) {
	        this.zoneId = zoneId;
	      }
	    }

	    IPv6.prototype.kind = function() {
	      return 'ipv6';
	    };

	    IPv6.prototype.toString = function() {
	      return this.toNormalizedString().replace(/((^|:)(0(:|$))+)/, '::');
	    };

	    IPv6.prototype.toRFC5952String = function() {
	      var bestMatchIndex, bestMatchLength, match, regex, string;
	      regex = /((^|:)(0(:|$)){2,})/g;
	      string = this.toNormalizedString();
	      bestMatchIndex = 0;
	      bestMatchLength = -1;
	      while ((match = regex.exec(string))) {
	        if (match[0].length > bestMatchLength) {
	          bestMatchIndex = match.index;
	          bestMatchLength = match[0].length;
	        }
	      }
	      if (bestMatchLength < 0) {
	        return string;
	      }
	      return string.substring(0, bestMatchIndex) + '::' + string.substring(bestMatchIndex + bestMatchLength);
	    };

	    IPv6.prototype.toByteArray = function() {
	      var bytes, k, len, part, ref;
	      bytes = [];
	      ref = this.parts;
	      for (k = 0, len = ref.length; k < len; k++) {
	        part = ref[k];
	        bytes.push(part >> 8);
	        bytes.push(part & 0xff);
	      }
	      return bytes;
	    };

	    IPv6.prototype.toNormalizedString = function() {
	      var addr, part, suffix;
	      addr = ((function() {
	        var k, len, ref, results;
	        ref = this.parts;
	        results = [];
	        for (k = 0, len = ref.length; k < len; k++) {
	          part = ref[k];
	          results.push(part.toString(16));
	        }
	        return results;
	      }).call(this)).join(":");
	      suffix = '';
	      if (this.zoneId) {
	        suffix = '%' + this.zoneId;
	      }
	      return addr + suffix;
	    };

	    IPv6.prototype.toFixedLengthString = function() {
	      var addr, part, suffix;
	      addr = ((function() {
	        var k, len, ref, results;
	        ref = this.parts;
	        results = [];
	        for (k = 0, len = ref.length; k < len; k++) {
	          part = ref[k];
	          results.push(part.toString(16).padStart(4, '0'));
	        }
	        return results;
	      }).call(this)).join(":");
	      suffix = '';
	      if (this.zoneId) {
	        suffix = '%' + this.zoneId;
	      }
	      return addr + suffix;
	    };

	    IPv6.prototype.match = function(other, cidrRange) {
	      var ref;
	      if (cidrRange === void 0) {
	        ref = other, other = ref[0], cidrRange = ref[1];
	      }
	      if (other.kind() !== 'ipv6') {
	        throw new Error("ipaddr: cannot match ipv6 address with non-ipv6 one");
	      }
	      return matchCIDR(this.parts, other.parts, 16, cidrRange);
	    };

	    IPv6.prototype.SpecialRanges = {
	      unspecified: [new IPv6([0, 0, 0, 0, 0, 0, 0, 0]), 128],
	      linkLocal: [new IPv6([0xfe80, 0, 0, 0, 0, 0, 0, 0]), 10],
	      multicast: [new IPv6([0xff00, 0, 0, 0, 0, 0, 0, 0]), 8],
	      loopback: [new IPv6([0, 0, 0, 0, 0, 0, 0, 1]), 128],
	      uniqueLocal: [new IPv6([0xfc00, 0, 0, 0, 0, 0, 0, 0]), 7],
	      ipv4Mapped: [new IPv6([0, 0, 0, 0, 0, 0xffff, 0, 0]), 96],
	      rfc6145: [new IPv6([0, 0, 0, 0, 0xffff, 0, 0, 0]), 96],
	      rfc6052: [new IPv6([0x64, 0xff9b, 0, 0, 0, 0, 0, 0]), 96],
	      '6to4': [new IPv6([0x2002, 0, 0, 0, 0, 0, 0, 0]), 16],
	      teredo: [new IPv6([0x2001, 0, 0, 0, 0, 0, 0, 0]), 32],
	      reserved: [[new IPv6([0x2001, 0xdb8, 0, 0, 0, 0, 0, 0]), 32]]
	    };

	    IPv6.prototype.range = function() {
	      return ipaddr.subnetMatch(this, this.SpecialRanges);
	    };

	    IPv6.prototype.isIPv4MappedAddress = function() {
	      return this.range() === 'ipv4Mapped';
	    };

	    IPv6.prototype.toIPv4Address = function() {
	      var high, low, ref;
	      if (!this.isIPv4MappedAddress()) {
	        throw new Error("ipaddr: trying to convert a generic ipv6 address to ipv4");
	      }
	      ref = this.parts.slice(-2), high = ref[0], low = ref[1];
	      return new ipaddr.IPv4([high >> 8, high & 0xff, low >> 8, low & 0xff]);
	    };

	    IPv6.prototype.prefixLengthFromSubnetMask = function() {
	      var cidr, i, k, part, stop, zeros, zerotable;
	      zerotable = {
	        0: 16,
	        32768: 15,
	        49152: 14,
	        57344: 13,
	        61440: 12,
	        63488: 11,
	        64512: 10,
	        65024: 9,
	        65280: 8,
	        65408: 7,
	        65472: 6,
	        65504: 5,
	        65520: 4,
	        65528: 3,
	        65532: 2,
	        65534: 1,
	        65535: 0
	      };
	      cidr = 0;
	      stop = false;
	      for (i = k = 7; k >= 0; i = k += -1) {
	        part = this.parts[i];
	        if (part in zerotable) {
	          zeros = zerotable[part];
	          if (stop && zeros !== 0) {
	            return null;
	          }
	          if (zeros !== 16) {
	            stop = true;
	          }
	          cidr += zeros;
	        } else {
	          return null;
	        }
	      }
	      return 128 - cidr;
	    };

	    return IPv6;

	  })();

	  ipv6Part = "(?:[0-9a-f]+::?)+";

	  zoneIndex = "%[0-9a-z]{1,}";

	  ipv6Regexes = {
	    zoneIndex: new RegExp(zoneIndex, 'i'),
	    "native": new RegExp("^(::)?(" + ipv6Part + ")?([0-9a-f]+)?(::)?(" + zoneIndex + ")?$", 'i'),
	    transitional: new RegExp(("^((?:" + ipv6Part + ")|(?:::)(?:" + ipv6Part + ")?)") + (ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part) + ("(" + zoneIndex + ")?$"), 'i')
	  };

	  expandIPv6 = function(string, parts) {
	    var colonCount, lastColon, part, replacement, replacementCount, zoneId;
	    if (string.indexOf('::') !== string.lastIndexOf('::')) {
	      return null;
	    }
	    zoneId = (string.match(ipv6Regexes['zoneIndex']) || [])[0];
	    if (zoneId) {
	      zoneId = zoneId.substring(1);
	      string = string.replace(/%.+$/, '');
	    }
	    colonCount = 0;
	    lastColon = -1;
	    while ((lastColon = string.indexOf(':', lastColon + 1)) >= 0) {
	      colonCount++;
	    }
	    if (string.substr(0, 2) === '::') {
	      colonCount--;
	    }
	    if (string.substr(-2, 2) === '::') {
	      colonCount--;
	    }
	    if (colonCount > parts) {
	      return null;
	    }
	    replacementCount = parts - colonCount;
	    replacement = ':';
	    while (replacementCount--) {
	      replacement += '0:';
	    }
	    string = string.replace('::', replacement);
	    if (string[0] === ':') {
	      string = string.slice(1);
	    }
	    if (string[string.length - 1] === ':') {
	      string = string.slice(0, -1);
	    }
	    parts = (function() {
	      var k, len, ref, results;
	      ref = string.split(":");
	      results = [];
	      for (k = 0, len = ref.length; k < len; k++) {
	        part = ref[k];
	        results.push(parseInt(part, 16));
	      }
	      return results;
	    })();
	    return {
	      parts: parts,
	      zoneId: zoneId
	    };
	  };

	  ipaddr.IPv6.parser = function(string) {
	    var addr, k, len, match, octet, octets, zoneId;
	    if (ipv6Regexes['native'].test(string)) {
	      return expandIPv6(string, 8);
	    } else if (match = string.match(ipv6Regexes['transitional'])) {
	      zoneId = match[6] || '';
	      addr = expandIPv6(match[1].slice(0, -1) + zoneId, 6);
	      if (addr.parts) {
	        octets = [parseInt(match[2]), parseInt(match[3]), parseInt(match[4]), parseInt(match[5])];
	        for (k = 0, len = octets.length; k < len; k++) {
	          octet = octets[k];
	          if (!((0 <= octet && octet <= 255))) {
	            return null;
	          }
	        }
	        addr.parts.push(octets[0] << 8 | octets[1]);
	        addr.parts.push(octets[2] << 8 | octets[3]);
	        return {
	          parts: addr.parts,
	          zoneId: addr.zoneId
	        };
	      }
	    }
	    return null;
	  };

	  ipaddr.IPv4.isIPv4 = ipaddr.IPv6.isIPv6 = function(string) {
	    return this.parser(string) !== null;
	  };

	  ipaddr.IPv4.isValid = function(string) {
	    try {
	      new this(this.parser(string));
	      return true;
	    } catch (error1) {
	      return false;
	    }
	  };

	  ipaddr.IPv4.isValidFourPartDecimal = function(string) {
	    if (ipaddr.IPv4.isValid(string) && string.match(/^(0|[1-9]\d*)(\.(0|[1-9]\d*)){3}$/)) {
	      return true;
	    } else {
	      return false;
	    }
	  };

	  ipaddr.IPv6.isValid = function(string) {
	    var addr;
	    if (typeof string === "string" && string.indexOf(":") === -1) {
	      return false;
	    }
	    try {
	      addr = this.parser(string);
	      new this(addr.parts, addr.zoneId);
	      return true;
	    } catch (error1) {
	      return false;
	    }
	  };

	  ipaddr.IPv4.parse = function(string) {
	    var parts;
	    parts = this.parser(string);
	    if (parts === null) {
	      throw new Error("ipaddr: string is not formatted like ip address");
	    }
	    return new this(parts);
	  };

	  ipaddr.IPv6.parse = function(string) {
	    var addr;
	    addr = this.parser(string);
	    if (addr.parts === null) {
	      throw new Error("ipaddr: string is not formatted like ip address");
	    }
	    return new this(addr.parts, addr.zoneId);
	  };

	  ipaddr.IPv4.parseCIDR = function(string) {
	    var maskLength, match, parsed;
	    if (match = string.match(/^(.+)\/(\d+)$/)) {
	      maskLength = parseInt(match[2]);
	      if (maskLength >= 0 && maskLength <= 32) {
	        parsed = [this.parse(match[1]), maskLength];
	        Object.defineProperty(parsed, 'toString', {
	          value: function() {
	            return this.join('/');
	          }
	        });
	        return parsed;
	      }
	    }
	    throw new Error("ipaddr: string is not formatted like an IPv4 CIDR range");
	  };

	  ipaddr.IPv4.subnetMaskFromPrefixLength = function(prefix) {
	    var filledOctetCount, j, octets;
	    prefix = parseInt(prefix);
	    if (prefix < 0 || prefix > 32) {
	      throw new Error('ipaddr: invalid IPv4 prefix length');
	    }
	    octets = [0, 0, 0, 0];
	    j = 0;
	    filledOctetCount = Math.floor(prefix / 8);
	    while (j < filledOctetCount) {
	      octets[j] = 255;
	      j++;
	    }
	    if (filledOctetCount < 4) {
	      octets[filledOctetCount] = Math.pow(2, prefix % 8) - 1 << 8 - (prefix % 8);
	    }
	    return new this(octets);
	  };

	  ipaddr.IPv4.broadcastAddressFromCIDR = function(string) {
	    var cidr, i, ipInterfaceOctets, octets, subnetMaskOctets;
	    try {
	      cidr = this.parseCIDR(string);
	      ipInterfaceOctets = cidr[0].toByteArray();
	      subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();
	      octets = [];
	      i = 0;
	      while (i < 4) {
	        octets.push(parseInt(ipInterfaceOctets[i], 10) | parseInt(subnetMaskOctets[i], 10) ^ 255);
	        i++;
	      }
	      return new this(octets);
	    } catch (error1) {
	      throw new Error('ipaddr: the address does not have IPv4 CIDR format');
	    }
	  };

	  ipaddr.IPv4.networkAddressFromCIDR = function(string) {
	    var cidr, i, ipInterfaceOctets, octets, subnetMaskOctets;
	    try {
	      cidr = this.parseCIDR(string);
	      ipInterfaceOctets = cidr[0].toByteArray();
	      subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();
	      octets = [];
	      i = 0;
	      while (i < 4) {
	        octets.push(parseInt(ipInterfaceOctets[i], 10) & parseInt(subnetMaskOctets[i], 10));
	        i++;
	      }
	      return new this(octets);
	    } catch (error1) {
	      throw new Error('ipaddr: the address does not have IPv4 CIDR format');
	    }
	  };

	  ipaddr.IPv6.parseCIDR = function(string) {
	    var maskLength, match, parsed;
	    if (match = string.match(/^(.+)\/(\d+)$/)) {
	      maskLength = parseInt(match[2]);
	      if (maskLength >= 0 && maskLength <= 128) {
	        parsed = [this.parse(match[1]), maskLength];
	        Object.defineProperty(parsed, 'toString', {
	          value: function() {
	            return this.join('/');
	          }
	        });
	        return parsed;
	      }
	    }
	    throw new Error("ipaddr: string is not formatted like an IPv6 CIDR range");
	  };

	  ipaddr.isValid = function(string) {
	    return ipaddr.IPv6.isValid(string) || ipaddr.IPv4.isValid(string);
	  };

	  ipaddr.parse = function(string) {
	    if (ipaddr.IPv6.isValid(string)) {
	      return ipaddr.IPv6.parse(string);
	    } else if (ipaddr.IPv4.isValid(string)) {
	      return ipaddr.IPv4.parse(string);
	    } else {
	      throw new Error("ipaddr: the address has neither IPv6 nor IPv4 format");
	    }
	  };

	  ipaddr.parseCIDR = function(string) {
	    try {
	      return ipaddr.IPv6.parseCIDR(string);
	    } catch (error1) {
	      try {
	        return ipaddr.IPv4.parseCIDR(string);
	      } catch (error1) {
	        throw new Error("ipaddr: the address has neither IPv6 nor IPv4 CIDR format");
	      }
	    }
	  };

	  ipaddr.fromByteArray = function(bytes) {
	    var length;
	    length = bytes.length;
	    if (length === 4) {
	      return new ipaddr.IPv4(bytes);
	    } else if (length === 16) {
	      return new ipaddr.IPv6(bytes);
	    } else {
	      throw new Error("ipaddr: the binary input is neither an IPv6 nor IPv4 address");
	    }
	  };

	  ipaddr.process = function(string) {
	    var addr;
	    addr = this.parse(string);
	    if (addr.kind() === 'ipv6' && addr.isIPv4MappedAddress()) {
	      return addr.toIPv4Address();
	    } else {
	      return addr;
	    }
	  };

	}).call(commonjsGlobal);
	});

	const tx = {
	  // Set the outgoing host by its deduced kind
	  setHost (span, hostname, port) {
	    try {
	      const parsed = ipaddr.parse(hostname);
	      if (parsed.kind() === 'ipv4') {
	        span.setTag('peer.ipv4', hostname);
	      } else {
	        span.setTag('peer.ipv6', hostname);
	      }
	    } catch (e) {
	      hostname && span.setTag('peer.hostname', hostname);
	    }
	    port && span.setTag('peer.port', port);
	  },

	  // Wrap a promise or a callback to also finish the span.
	  wrap (span, done) {
	    if (typeof done === 'function' || !done) {
	      return wrapCallback$5(span, done)
	    } else if (isPromise(done)) {
	      return wrapPromise$1(span, done)
	    }
	  }
	};

	function wrapCallback$5 (span, callback) {
	  const scope = span.tracer().scope();
	  const previous = scope.active();

	  return function (err) {
	    finish$4(span, err);

	    if (callback) {
	      return scope.activate(previous, () => callback.apply(this, arguments))
	    }
	  }
	}

	function wrapPromise$1 (span, promise) {
	  promise.then(
	    () => finish$4(span),
	    err => finish$4(span, err)
	  );

	  return promise
	}

	function finish$4 (span, error) {
	  if (error) {
	    span.addTags({
	      'sfx.error.kind': error.name,
	      'sfx.error.message': error.message,
	      'sfx.error.stack': error.stack
	    });
	  }

	  span.finish();
	}

	function isPromise (obj) {
	  return isObject$1(obj) && typeof obj.then === 'function'
	}

	function isObject$1 (obj) {
	  return typeof obj === 'object' && obj !== null
	}

	var tx_1 = tx;

	function createWrapSend$1 (tracer, config) {
	  return function wrapSend (send) {
	    return function sendWithTrace (msg, options) {
	      const span = startSendSpan(tracer, config, this);

	      try {
	        const promise = tracer.scope().activate(span, () => {
	          return send.apply(this, arguments)
	        });

	        return wrapPromise(promise, span)
	      } catch (e) {
	        finish$3(span, e);
	        throw e
	      }
	    }
	  }
	}

	function createWrapMessageReceived (tracer, config) {
	  return function wrapMessageReceived (messageReceived) {
	    return function messageReceivedWithTrace (transferFrame) {
	      if (transferFrame.aborted || transferFrame.more) {
	        return messageReceived.apply(this, arguments)
	      }

	      const span = startReceiveSpan(tracer, config, this);

	      return tracer.scope().activate(span, () => {
	        messageReceived.apply(this, arguments);
	        span.finish();
	      })
	    }
	  }
	}

	function startSendSpan (tracer, config, link) {
	  const address = link.session.connection.address;
	  const target = getAddress$1(link);

	  const span = tracer.startSpan(`amqp.send`, {
	    tags: {
	      'resource.name': `send ${target}`,
	      'span.kind': 'producer',
	      'message_bus.destination': target,
	      'amqp.link.role': 'sender'
	    }
	  });
	  tx_1.setHost(span, address.host, address.port);

	  addTags$2(tracer, config, span, link);

	  analytics_sampler.sample(span, config.analytics);

	  return span
	}

	function startReceiveSpan (tracer, config, link) {
	  const source = getAddress$1(link);
	  const span = tracer.startSpan(`amqp.receive`, {
	    tags: {
	      'resource.name': `receive ${source}`,
	      'span.kind': 'consumer',
	      'message_bus.destination': source,
	      'amqp.link.role': 'receiver'
	    }
	  });

	  addTags$2(tracer, config, span, link);

	  analytics_sampler.sample(span, config.analytics, true);

	  return span
	}

	function addTags$2 (tracer, config, span, link) {
	  const address = link.session.connection.address;

	  span.addTags({
	    'service.name': config.service || `${tracer._service}-amqp`,
	    'component': 'amqp10',
	    'amqp.link.name': link.name,
	    'amqp.link.handle': link.handle,
	    'peer.hostname': address.host,
	    'peer.port': address.port
	  });

	  if (address.user) {
	    span.setTag('amqp.connection.user', address.user);
	  }

	  return span
	}

	function finish$3 (span, error) {
	  if (error) {
	    span.addTags({
	      'sfx.error.kind': error.name,
	      'sfx.error.message': error.message,
	      'sfx.error.stack': error.stack
	    });
	  }

	  span.finish();
	}

	function wrapPromise (promise, span) {
	  if (!promise) {
	    finish$3(span);
	    return promise
	  }

	  promise.then(() => finish$3(span), e => finish$3(span, e));

	  return promise
	}

	function getAddress$1 (link) {
	  return link.name.split('_').slice(0, -1).join('_')
	}

	var amqp10 = [
	  {
	    name: 'amqp10',
	    file: 'lib/sender_link.js',
	    versions: ['>=3'],
	    patch (SenderLink, tracer, config) {
	      this.wrap(SenderLink.prototype, 'send', createWrapSend$1(tracer, config));
	    },
	    unpatch (SenderLink) {
	      this.unwrap(SenderLink.prototype, 'send');
	    }
	  },
	  {
	    name: 'amqp10',
	    file: 'lib/receiver_link.js',
	    versions: ['>=3'],
	    patch (ReceiverLink, tracer, config) {
	      this.wrap(ReceiverLink.prototype, '_messageReceived', createWrapMessageReceived(tracer, config));
	    },
	    unpatch (ReceiverLink) {
	      this.unwrap(ReceiverLink.prototype, '_messageReceived');
	    }
	  }
	];

	/**
	 * lodash (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0;

	/** `Object#toString` result references. */
	var symbolTag = '[object Symbol]';

	/** Used to match words composed of alphanumeric characters. */
	var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

	/** Used to match Latin Unicode letters (excluding mathematical operators). */
	var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

	/** Used to compose unicode character classes. */
	var rsAstralRange = '\\ud800-\\udfff',
	    rsComboMarksRange = '\\u0300-\\u036f\\ufe20-\\ufe23',
	    rsComboSymbolsRange = '\\u20d0-\\u20f0',
	    rsDingbatRange = '\\u2700-\\u27bf',
	    rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
	    rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
	    rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
	    rsPunctuationRange = '\\u2000-\\u206f',
	    rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
	    rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
	    rsVarRange = '\\ufe0e\\ufe0f',
	    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

	/** Used to compose unicode capture groups. */
	var rsApos = "['\u2019]",
	    rsBreak = '[' + rsBreakRange + ']',
	    rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',
	    rsDigits = '\\d+',
	    rsDingbat = '[' + rsDingbatRange + ']',
	    rsLower = '[' + rsLowerRange + ']',
	    rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
	    rsFitz = '\\ud83c[\\udffb-\\udfff]',
	    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
	    rsNonAstral = '[^' + rsAstralRange + ']',
	    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
	    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
	    rsUpper = '[' + rsUpperRange + ']',
	    rsZWJ = '\\u200d';

	/** Used to compose unicode regexes. */
	var rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')',
	    rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')',
	    rsOptLowerContr = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
	    rsOptUpperContr = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
	    reOptMod = rsModifier + '?',
	    rsOptVar = '[' + rsVarRange + ']?',
	    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
	    rsSeq = rsOptVar + reOptMod + rsOptJoin,
	    rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq;

	/** Used to match apostrophes. */
	var reApos = RegExp(rsApos, 'g');

	/**
	 * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
	 * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
	 */
	var reComboMark = RegExp(rsCombo, 'g');

	/** Used to match complex or compound words. */
	var reUnicodeWord = RegExp([
	  rsUpper + '?' + rsLower + '+' + rsOptLowerContr + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
	  rsUpperMisc + '+' + rsOptUpperContr + '(?=' + [rsBreak, rsUpper + rsLowerMisc, '$'].join('|') + ')',
	  rsUpper + '?' + rsLowerMisc + '+' + rsOptLowerContr,
	  rsUpper + '+' + rsOptUpperContr,
	  rsDigits,
	  rsEmoji
	].join('|'), 'g');

	/** Used to detect strings that need a more robust regexp to match words. */
	var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

	/** Used to map Latin Unicode letters to basic Latin letters. */
	var deburredLetters = {
	  // Latin-1 Supplement block.
	  '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
	  '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
	  '\xc7': 'C',  '\xe7': 'c',
	  '\xd0': 'D',  '\xf0': 'd',
	  '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
	  '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
	  '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
	  '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
	  '\xd1': 'N',  '\xf1': 'n',
	  '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
	  '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
	  '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
	  '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
	  '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
	  '\xc6': 'Ae', '\xe6': 'ae',
	  '\xde': 'Th', '\xfe': 'th',
	  '\xdf': 'ss',
	  // Latin Extended-A block.
	  '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
	  '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
	  '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
	  '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
	  '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
	  '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
	  '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
	  '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
	  '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
	  '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
	  '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
	  '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
	  '\u0134': 'J',  '\u0135': 'j',
	  '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
	  '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
	  '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
	  '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
	  '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
	  '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
	  '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
	  '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
	  '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
	  '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
	  '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
	  '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
	  '\u0163': 't',  '\u0165': 't', '\u0167': 't',
	  '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
	  '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
	  '\u0174': 'W',  '\u0175': 'w',
	  '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
	  '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
	  '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
	  '\u0132': 'IJ', '\u0133': 'ij',
	  '\u0152': 'Oe', '\u0153': 'oe',
	  '\u0149': "'n", '\u017f': 'ss'
	};

	/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();

	/**
	 * A specialized version of `_.reduce` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {*} [accumulator] The initial value.
	 * @param {boolean} [initAccum] Specify using the first element of `array` as
	 *  the initial value.
	 * @returns {*} Returns the accumulated value.
	 */
	function arrayReduce(array, iteratee, accumulator, initAccum) {
	  var index = -1,
	      length = array ? array.length : 0;

	  if (initAccum && length) {
	    accumulator = array[++index];
	  }
	  while (++index < length) {
	    accumulator = iteratee(accumulator, array[index], index, array);
	  }
	  return accumulator;
	}

	/**
	 * Splits an ASCII `string` into an array of its words.
	 *
	 * @private
	 * @param {string} The string to inspect.
	 * @returns {Array} Returns the words of `string`.
	 */
	function asciiWords(string) {
	  return string.match(reAsciiWord) || [];
	}

	/**
	 * The base implementation of `_.propertyOf` without support for deep paths.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Function} Returns the new accessor function.
	 */
	function basePropertyOf(object) {
	  return function(key) {
	    return object == null ? undefined : object[key];
	  };
	}

	/**
	 * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
	 * letters to basic Latin letters.
	 *
	 * @private
	 * @param {string} letter The matched letter to deburr.
	 * @returns {string} Returns the deburred letter.
	 */
	var deburrLetter = basePropertyOf(deburredLetters);

	/**
	 * Checks if `string` contains a word composed of Unicode symbols.
	 *
	 * @private
	 * @param {string} string The string to inspect.
	 * @returns {boolean} Returns `true` if a word is found, else `false`.
	 */
	function hasUnicodeWord(string) {
	  return reHasUnicodeWord.test(string);
	}

	/**
	 * Splits a Unicode `string` into an array of its words.
	 *
	 * @private
	 * @param {string} The string to inspect.
	 * @returns {Array} Returns the words of `string`.
	 */
	function unicodeWords(string) {
	  return string.match(reUnicodeWord) || [];
	}

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/** Built-in value references. */
	var Symbol$1 = root.Symbol;

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = Symbol$1 ? Symbol$1.prototype : undefined,
	    symbolToString = symbolProto ? symbolProto.toString : undefined;

	/**
	 * The base implementation of `_.toString` which doesn't convert nullish
	 * values to empty strings.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 */
	function baseToString(value) {
	  // Exit early for strings to avoid a performance hit in some environments.
	  if (typeof value == 'string') {
	    return value;
	  }
	  if (isSymbol(value)) {
	    return symbolToString ? symbolToString.call(value) : '';
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	}

	/**
	 * Creates a function like `_.camelCase`.
	 *
	 * @private
	 * @param {Function} callback The function to combine each word.
	 * @returns {Function} Returns the new compounder function.
	 */
	function createCompounder(callback) {
	  return function(string) {
	    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
	  };
	}

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol(value) {
	  return typeof value == 'symbol' ||
	    (isObjectLike(value) && objectToString.call(value) == symbolTag);
	}

	/**
	 * Converts `value` to a string. An empty string is returned for `null`
	 * and `undefined` values. The sign of `-0` is preserved.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 * @example
	 *
	 * _.toString(null);
	 * // => ''
	 *
	 * _.toString(-0);
	 * // => '-0'
	 *
	 * _.toString([1, 2, 3]);
	 * // => '1,2,3'
	 */
	function toString$2(value) {
	  return value == null ? '' : baseToString(value);
	}

	/**
	 * Deburrs `string` by converting
	 * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
	 * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
	 * letters to basic Latin letters and removing
	 * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to deburr.
	 * @returns {string} Returns the deburred string.
	 * @example
	 *
	 * _.deburr('déjà vu');
	 * // => 'deja vu'
	 */
	function deburr(string) {
	  string = toString$2(string);
	  return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
	}

	/**
	 * Converts `string` to
	 * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to convert.
	 * @returns {string} Returns the kebab cased string.
	 * @example
	 *
	 * _.kebabCase('Foo Bar');
	 * // => 'foo-bar'
	 *
	 * _.kebabCase('fooBar');
	 * // => 'foo-bar'
	 *
	 * _.kebabCase('__FOO_BAR__');
	 * // => 'foo-bar'
	 */
	var kebabCase = createCompounder(function(result, word, index) {
	  return result + (index ? '-' : '') + word.toLowerCase();
	});

	/**
	 * Splits `string` into an array of its words.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to inspect.
	 * @param {RegExp|string} [pattern] The pattern to match words.
	 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	 * @returns {Array} Returns the words of `string`.
	 * @example
	 *
	 * _.words('fred, barney, & pebbles');
	 * // => ['fred', 'barney', 'pebbles']
	 *
	 * _.words('fred, barney, & pebbles', /[^, ]+/g);
	 * // => ['fred', 'barney', '&', 'pebbles']
	 */
	function words(string, pattern, guard) {
	  string = toString$2(string);
	  pattern = guard ? undefined : pattern;

	  if (pattern === undefined) {
	    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
	  }
	  return string.match(pattern) || [];
	}

	var lodash_kebabcase = kebabCase;

	let methods$2 = {};

	function createWrapSendImmediately (tracer, config) {
	  return function wrapSendImmediately (sendImmediately) {
	    return function sendImmediatelyWithTrace (method, fields) {
	      return sendWithTrace(sendImmediately, this, arguments, tracer, config, methods$2[method], fields)
	    }
	  }
	}

	function createWrapSendMessage (tracer, config) {
	  return function wrapSendMessage (sendMessage) {
	    return function sendMessageWithTrace (fields) {
	      return sendWithTrace(sendMessage, this, arguments, tracer, config, 'basic.publish', fields)
	    }
	  }
	}

	function createWrapDispatchMessage (tracer, config) {
	  return function wrapDispatchMessage (dispatchMessage) {
	    return function dispatchMessageWithTrace (fields, message) {
	      const span = tracer.startSpan('amqp.command');

	      addTags$1(this, tracer, config, span, 'basic.deliver', fields);

	      analytics_sampler.sample(span, config.analytics, true);

	      tracer.scope().activate(span, () => {
	        try {
	          dispatchMessage.apply(this, arguments);
	        } catch (e) {
	          throw addError$4(span, e)
	        } finally {
	          span.finish();
	        }
	      });
	    }
	  }
	}

	function sendWithTrace (send, channel, args, tracer, config, method, fields) {
	  const childOf = tracer.scope().active();
	  const span = tracer.startSpan('amqp.command', { childOf });

	  addTags$1(channel, tracer, config, span, method, fields);

	  analytics_sampler.sample(span, config.analytics);

	  return tracer.scope().activate(span, () => {
	    try {
	      return send.apply(channel, args)
	    } catch (e) {
	      throw addError$4(span, e)
	    } finally {
	      span.finish();
	    }
	  })
	}

	function isCamelCase (str) {
	  return /([A-Z][a-z0-9]+)+/.test(str)
	}

	function getResourceName (method, fields) {
	  return [
	    method,
	    fields.exchange,
	    fields.routingKey,
	    fields.queue,
	    fields.source,
	    fields.destination
	  ].filter(val => val).join(' ')
	}

	function addError$4 (span, error) {
	  span.addTags({
	    'sfx.error.kind': error.name,
	    'sfx.error.message': error.message,
	    'sfx.error.stack': error.stack
	  });

	  return error
	}

	function addTags$1 (channel, tracer, config, span, method, fields) {
	  const fieldNames = [
	    'queue',
	    'exchange',
	    'routingKey',
	    'consumerTag',
	    'source',
	    'destination'
	  ];
	  let destinationName = fields.exchange;

	  if (destinationName === undefined) {
	    destinationName = fields.queue;
	  }
	  if (destinationName) {
	    span.setTag('message_bus.destination', destinationName);
	  }

	  span.addTags({
	    'service.name': config.service || `${tracer._service}-amqp`,
	    'resource.name': getResourceName(method, fields),
	    'component': 'amqplib'
	  });

	  if (channel.connection && channel.connection.stream) {
	    tx_1.setHost(span, channel.connection.stream._host, channel.connection.stream.remotePort);
	  }

	  switch (method) {
	    case 'basic.publish':
	      span.setTag('span.kind', 'producer');
	      break
	    case 'basic.consume':
	    case 'basic.get':
	    case 'basic.deliver':
	      span.setTag('span.kind', 'consumer');
	      break
	  }

	  fieldNames.forEach(field => {
	    fields[field] !== undefined && span.setTag(`amqp.${field}`, fields[field]);
	  });
	}

	var amqplib = [
	  {
	    name: 'amqplib',
	    file: 'lib/defs.js',
	    versions: ['>=0.5'],
	    patch (defs, tracer, config) {
	      methods$2 = Object.keys(defs)
	        .filter(key => Number.isInteger(defs[key]))
	        .filter(key => isCamelCase(key))
	        .reduce((acc, key) => Object.assign(acc, { [defs[key]]: lodash_kebabcase(key).replace('-', '.') }), {});
	    },
	    unpatch (defs) {
	      methods$2 = {};
	    }
	  },
	  {
	    name: 'amqplib',
	    file: 'lib/channel.js',
	    versions: ['>=0.5'],
	    patch (channel, tracer, config) {
	      this.wrap(channel.Channel.prototype, 'sendImmediately', createWrapSendImmediately(tracer, config));
	      this.wrap(channel.Channel.prototype, 'sendMessage', createWrapSendMessage(tracer, config));
	      this.wrap(channel.BaseChannel.prototype, 'dispatchMessage', createWrapDispatchMessage(tracer, config));
	    },
	    unpatch (channel) {
	      this.unwrap(channel.Channel.prototype, 'sendImmediately');
	      this.unwrap(channel.Channel.prototype, 'sendMessage');
	      this.unwrap(channel.BaseChannel.prototype, 'dispatchMessage');
	    }
	  }
	];

	var promise = {
	  createWrapThen (tracer, config) {
	    return function wrapThen (then) {
	      return function thenWithTrace (onFulfilled, onRejected, onProgress) {
	        arguments[0] = wrapCallback$4(tracer, onFulfilled);
	        arguments[1] = wrapCallback$4(tracer, onRejected);

	        // not standard but sometimes supported
	        if (onProgress) {
	          arguments[2] = wrapCallback$4(tracer, onProgress);
	        }

	        return then.apply(this, arguments)
	      }
	    }
	  }
	};

	function wrapCallback$4 (tracer, callback) {
	  if (typeof callback !== 'function') return callback

	  const span = tracer.scope().active();

	  return function () {
	    return tracer.scope().activate(span, () => {
	      return callback.apply(this, arguments)
	    })
	  }
	}

	var bluebird = [
	  {
	    name: 'bluebird',
	    versions: ['>=2.0.2'], // 2.0.0 and 2.0.1 were removed from npm
	    patch (Promise, tracer, config) {
	      this.wrap(Promise.prototype, '_then', promise.createWrapThen(tracer, config));
	    },
	    unpatch (Promise) {
	      this.unwrap(Promise.prototype, '_then');
	    }
	  }
	];

	const log = {
	  // Add trace identifiers from the current scope to a log record.
	  correlate (tracer, record) {
	    const span = tracer.scope().active();

	    if (!span) return record

	    return Object.assign({}, record, {
	      signalfx: {
	        trace_id: span.context().toTraceIdHex(),
	        span_id: span.context().toSpanIdHex()
	      }
	    })
	  }
	};

	var log_1 = Object.assign({}, tx_1, log);

	function createWrapEmit$1 (tracer, config) {
	  return function wrapEmit (emit) {
	    return function emitWithTrace (rec, noemit) {
	      arguments[0] = log_1.correlate(tracer, rec);

	      return emit.apply(this, arguments)
	    }
	  }
	}

	var bunyan = {
	  name: 'bunyan',
	  versions: ['>=1'],
	  patch (Logger, tracer, config) {
	    if (!tracer._logInjection) return
	    this.wrap(Logger.prototype, '_emit', createWrapEmit$1(tracer));
	  },
	  unpatch (Logger) {
	    this.unwrap(Logger.prototype, '_emit');
	  }
	};

	function createWrapInnerExecute (tracer, config) {
	  const isValid = (args) => {
	    return args.length === 4 || typeof args[3] === 'function'
	  };
	  return function wrapInnerExecute (_innerExecute) {
	    return function _innerExecuteWithTrace (query, params, execOptions, callback) {
	      if (!isValid(arguments)) {
	        return _innerExecute.apply(this, arguments)
	      }
	      const scope = tracer.scope();
	      const childOf = scope.active();
	      const name = query.split(' ')[0];
	      const span = start(tracer, config, this, name, query);

	      callback = scope.bind(callback, childOf);

	      return scope.bind(_innerExecute, span).call(this, query, params, execOptions, function (err) {
	        finish$2(span, err);
	        return callback.apply(this, arguments)
	      })
	    }
	  }
	}

	function createWrapExecute$2 (tracer, config) {
	  return function wrapExecute (_execute) {
	    return function _executeWithTrace (query, params, execOptions, callback) {
	      const name = query.split(' ')[0];
	      const span = start(tracer, config, this, name, query);
	      const promise = tracer.scope().bind(_execute, span).apply(this, arguments);

	      return tx_1.wrap(span, promise)
	    }
	  }
	}

	function createWrapExecutionStart (tracer, config) {
	  return function wrapExecutionStart (start) {
	    return function startWithTrace (getHostCallback) {
	      const span = tracer.scope().active();
	      const execution = this;

	      if (!isRequestValid(this, arguments, 1, span)) {
	        return start.apply(this, arguments)
	      }

	      return start.call(this, function () {
	        addHost$2(span, execution._connection);
	        return getHostCallback.apply(this, arguments)
	      })
	    }
	  }
	}

	function createWrapSendOnConnection (tracer, config) {
	  return function wrapSendOnConnection (_sendOnConnection) {
	    return function _sendOnConnectionWithTrace () {
	      const span = tracer.scope().active();

	      addHost$2(span, this._connection);

	      return _sendOnConnection.apply(this, arguments)
	    }
	  }
	}

	function createWrapSend (tracer, config) {
	  return function wrapSend (send) {
	    return function sendWithTrace (request, options, callback) {
	      const span = tracer.scope().active();
	      const handler = this;

	      if (!isRequestValid(this, arguments, 3, span)) {
	        return send.apply(this, arguments)
	      }

	      return send.call(this, request, options, function () {
	        addHost$2(span, handler.connection);
	        return callback.apply(this, arguments)
	      })
	    }
	  }
	}

	function createWrapBatch (tracer, config) {
	  return function wrapBatch (batch) {
	    return function batchWithTrace (queries, options, callback) {
	      const name = batchName(queries);
	      const query = combine(queries);
	      const span = start(tracer, config, this, name, query);
	      const scope = tracer.scope();
	      const fn = scope.bind(batch, span);

	      callback = arguments[arguments.length - 1];

	      if (typeof callback === 'function') {
	        arguments[arguments.length - 1] = tx_1.wrap(span, callback);
	      }

	      try {
	        return tx_1.wrap(span, fn.apply(this, arguments))
	      } catch (e) {
	        finish$2(span, e);
	        throw e
	      }
	    }
	  }
	}

	function createWrapStream (tracer, config) {
	  return function wrapStream (stream) {
	    return function streamWithTrace (query, params, options, callback) {
	      return tracer.scope().bind(stream.apply(this, arguments))
	    }
	  }
	}

	function start (tracer, config, client = {}, name, query) {
	  const scope = tracer.scope();
	  const childOf = scope.active();
	  const span = tracer.startSpan('cassandra.query', {
	    childOf,
	    tags: {
	      'service.name': config.service || `${tracer._service}-cassandra`,
	      'resource.name': name,
	      'span.type': 'cassandra',
	      'span.kind': 'client',
	      'db.type': 'cassandra',
	      'db.statement': trim$1(query, 1024),
	      'cassandra.keyspace': client.keyspace
	    }
	  });

	  if (client.keyspace) {
	    addTag(span, 'db.instance', client.keyspace);
	  }

	  return span
	}

	function finish$2 (span, error) {
	  addError$3(span, error);

	  span.finish();

	  return error
	}

	function addTag (span, key, value) {
	  if (value) {
	    span.setTag(key, value);
	  }
	}

	function addHost$2 (span, connection) {
	  if (span && connection) {
	    tx_1.setHost(span, connection.address, connection.port);
	  }
	}

	function addError$3 (span, error) {
	  if (error && error instanceof Error) {
	    span.addTags({
	      'error': 'true',
	      'sfx.error.kind': error.name,
	      'sfx.error.message': error.message,
	      'sfx.error.stack': error.stack
	    });
	  }

	  return error
	}

	function batchName (queries) {
	  return 'Batch: ' + queries
	    .map(query => (query.query || query).split(' ')[0])
	    .join(';')
	}

	function isRequestValid (exec, args, length, span) {
	  if (!exec) return false
	  if (args.length !== length || typeof args[length - 1] !== 'function') return false
	  if (!span || span.context()._name !== 'cassandra.query') return false

	  return true
	}

	function combine (queries) {
	  if (!Array.isArray(queries)) return []

	  return queries
	    .map(query => (query.query || query).replace(/;?$/, ';'))
	    .join(' ')
	}

	function trim$1 (str, size) {
	  if (!str || str.length <= size) return str

	  return `${str.substr(0, size - 3)}...`
	}

	var cassandraDriver = [
	  {
	    name: 'cassandra-driver',
	    versions: ['>=3.0.0'],
	    patch (cassandra, tracer, config) {
	      this.wrap(cassandra.Client.prototype, 'batch', createWrapBatch(tracer, config));
	      this.wrap(cassandra.Client.prototype, 'stream', createWrapStream(tracer));
	    },
	    unpatch (cassandra) {
	      this.unwrap(cassandra.Client.prototype, 'batch');
	      this.unwrap(cassandra.Client.prototype, 'stream');
	    }
	  },
	  {
	    name: 'cassandra-driver',
	    versions: ['>=4.4'],
	    patch (cassandra, tracer, config) {
	      this.wrap(cassandra.Client.prototype, '_execute', createWrapExecute$2(tracer, config));
	    },
	    unpatch (cassandra) {
	      this.unwrap(cassandra.Client.prototype, '_execute');
	    }
	  },
	  {
	    name: 'cassandra-driver',
	    versions: ['3 - 4.3'],
	    patch (cassandra, tracer, config) {
	      this.wrap(cassandra.Client.prototype, '_innerExecute', createWrapInnerExecute(tracer, config));
	    },
	    unpatch (cassandra) {
	      this.unwrap(cassandra.Client.prototype, '_innerExecute');
	    }
	  },
	  {
	    name: 'cassandra-driver',
	    versions: ['>=3.3.0'],
	    file: 'lib/request-execution.js',
	    patch (RequestExecution, tracer, config) {
	      this.wrap(RequestExecution.prototype, '_sendOnConnection', createWrapSendOnConnection(tracer));
	    },
	    unpatch (RequestExecution) {
	      this.unwrap(RequestExecution.prototype, '_sendOnConnection');
	    }
	  },
	  {
	    name: 'cassandra-driver',
	    versions: ['3.3 - 4.3'],
	    file: 'lib/request-execution.js',
	    patch (RequestExecution, tracer, config) {
	      this.wrap(RequestExecution.prototype, 'start', createWrapExecutionStart(tracer));
	    },
	    unpatch (RequestExecution) {
	      this.unwrap(RequestExecution.prototype, 'start');
	    }
	  },
	  {
	    name: 'cassandra-driver',
	    versions: ['3 - 3.2'],
	    file: 'lib/request-handler.js',
	    patch (RequestHandler, tracer, config) {
	      this.wrap(RequestHandler.prototype, 'send', createWrapSend(tracer));
	    },
	    unpatch (RequestHandler) {
	      this.unwrap(RequestHandler.prototype, 'send');
	    }
	  }
	];

	const rrtypes = {
	  resolveAny: 'ANY',
	  resolve4: 'A',
	  resolve6: 'AAAA',
	  resolveCname: 'CNAME',
	  resolveMx: 'MX',
	  resolveNs: 'NS',
	  resolveTxt: 'TXT',
	  resolveSrv: 'SRV',
	  resolvePtr: 'PTR',
	  resolveNaptr: 'NAPTR',
	  resolveSoa: 'SOA'
	};

	function createWrapLookup (tracer, config) {
	  return function wrapLookup (lookup) {
	    return function lookupWithTrace (hostname, options, callback) {
	      const span = startSpan$3(tracer, config, 'dns.lookup', {
	        'resource.name': `dns.lookup: ${hostname}`,
	        'dns.hostname': hostname
	      });

	      wrapArgs(span, arguments, (e, address) => {
	        span.setTag('dns.address', address);
	      });

	      return tracer.scope().activate(span, () => lookup.apply(this, arguments))
	    }
	  }
	}

	function createWrapLookupService (tracer, config) {
	  return function wrapLookupService (lookupService) {
	    return function lookupServiceWithTrace (address, port, callback) {
	      const span = startSpan$3(tracer, config, 'dns.lookup_service', {
	        'resource.name': `dns.lookup_service ${address}:${port}`,
	        'dns.address': address,
	        'dns.port': port
	      });

	      wrapArgs(span, arguments);

	      return tracer.scope().activate(span, () => lookupService.apply(this, arguments))
	    }
	  }
	}

	function createWrapResolve (tracer, config) {
	  return function wrapResolve (resolve) {
	    return function resolveWithTrace (hostname, rrtype, callback) {
	      if (typeof rrtype !== 'string') {
	        rrtype = 'A';
	      }

	      const span = wrapResolver(tracer, config, rrtype, arguments);

	      return tracer.scope().activate(span, () => resolve.apply(this, arguments))
	    }
	  }
	}

	function createWrapResolver (tracer, config, rrtype) {
	  return function wrapResolve (resolve) {
	    return function resolveWithTrace (hostname, callback) {
	      const span = wrapResolver(tracer, config, rrtype, arguments);

	      return tracer.scope().activate(span, () => resolve.apply(this, arguments))
	    }
	  }
	}

	function createWrapReverse (tracer, config) {
	  return function wrapReverse (reverse) {
	    return function reverseWithTrace (ip, callback) {
	      const span = startSpan$3(tracer, config, 'dns.reverse', {
	        'resource.name': `dns.reverse: ${ip}`,
	        'dns.ip': ip
	      });

	      wrapArgs(span, arguments);

	      return tracer.scope().activate(span, () => reverse.apply(this, arguments))
	    }
	  }
	}

	function startSpan$3 (tracer, config, operation, tags) {
	  const childOf = tracer.scope().active();
	  const span = tracer.startSpan(operation, {
	    childOf,
	    tags: Object.assign({
	      'span.kind': 'client',
	      'service.name': config.service || `${tracer._service}-dns`
	    }, tags)
	  });

	  analytics_sampler.sample(span, config.analytics);

	  return span
	}

	function wrapArgs (span, args, callback) {
	  const original = args[args.length - 1];

	  args[args.length - 1] = function () {
	    callback && callback.apply(null, arguments);
	    return tx_1.wrap(span, original).apply(this, arguments)
	  };
	}

	function wrapResolver (tracer, config, rrtype, args) {
	  const hostname = args[0];
	  const span = startSpan$3(tracer, config, 'dns.resolve', {
	    'resource.name': `dns.resolve: ${rrtype} ${hostname}`,
	    'dns.hostname': hostname,
	    'dns.rrtype': rrtype
	  });

	  wrapArgs(span, args);

	  return span
	}

	var dns = [
	  {
	    name: 'dns',
	    patch (dns, tracer, config) {
	      this.wrap(dns, 'lookup', createWrapLookup(tracer, config));
	      this.wrap(dns, 'lookupService', createWrapLookupService(tracer, config));
	      this.wrap(dns, 'resolve', createWrapResolve(tracer, config));
	      this.wrap(dns, 'reverse', createWrapReverse(tracer, config));

	      Object.keys(rrtypes).forEach(method => {
	        this.wrap(dns, method, createWrapResolver(tracer, config, rrtypes[method]));
	      });

	      if (dns.Resolver) {
	        this.wrap(dns.Resolver.prototype, 'resolve', createWrapResolve(tracer, config));
	        this.wrap(dns.Resolver.prototype, 'reverse', createWrapReverse(tracer, config));

	        Object.keys(rrtypes).forEach(method => {
	          this.wrap(dns.Resolver.prototype, method, createWrapResolver(tracer, config, rrtypes[method]));
	        });
	      }
	    },
	    unpatch (dns) {
	      this.unwrap(dns, [
	        'lookup',
	        'lookupService',
	        'resolve',
	        'reverse'
	      ]);

	      Object.keys(rrtypes).forEach(method => {
	        this.unwrap(dns, method);
	      });

	      if (dns.Resolver) {
	        this.unwrap(dns.prototype.Resolver, [
	          'resolve',
	          'reverse'
	        ]);

	        Object.keys(rrtypes).forEach(method => {
	          this.unwrap(dns.prototype.Resolver, method);
	        });
	      }
	    }
	  }
	];

	const Tags$5 = lib.Tags;


	function createWrapRequest (tracer, config) {
	  return function wrapRequest (request) {
	    return function requestWithTrace (params, options, cb) {
	      const childOf = tracer.scope().active();
	      const span = tracer.startSpan('elasticsearch.query', {
	        childOf,
	        tags: {
	          [Tags$5.SPAN_KIND]: Tags$5.SPAN_KIND_RPC_CLIENT,
	          [Tags$5.DB_TYPE]: 'elasticsearch',
	          'service.name': config.service || `${tracer._service}-elasticsearch`,
	          'resource.name': `${params.method} ${quantizePath(params.path)}`,
	          'span.type': 'elasticsearch',
	          'elasticsearch.url': params.path,
	          'elasticsearch.method': params.method,
	          'elasticsearch.params': JSON.stringify(params.querystring || params.query)
	        }
	      });

	      const indexPath = JSON.stringify(params.path).split('/')[1];

	      if (indexPath.substring(0, 1) !== '_') {
	        span.setTag('elasticsearch.index', indexPath);
	      }
	      if (params.body) {
	        span.setTag('db.statement', JSON.stringify(params.body).substring(0, 1024));
	      }
	      span.setTag('db.instance', 'elasticsearch');

	      analytics_sampler.sample(span, config.analytics);

	      cb = request.length === 2 || typeof options === 'function'
	        ? tracer.scope().bind(options, childOf)
	        : tracer.scope().bind(cb, childOf);

	      return tracer.scope().activate(span, () => {
	        if (typeof cb === 'function') {
	          if (request.length === 2) {
	            return request.call(this, params, wrapCallback$3(tracer, span, cb))
	          } else {
	            return request.call(this, params, options, wrapCallback$3(tracer, span, cb))
	          }
	        } else {
	          const promise = request.apply(this, arguments);

	          promise.then(() => finish$1(span), e => finish$1(span, e));

	          return promise
	        }
	      })
	    }
	  }
	}

	function wrapCallback$3 (tracer, span, done) {
	  return function (err) {
	    finish$1(span, err);
	    done.apply(null, arguments);
	  }
	}

	function finish$1 (span, err) {
	  if (err) {
	    span.addTags({
	      'sfx.error.kind': err.name,
	      'sfx.error.message': err.message,
	      'sfx.error.stack': err.stack
	    });
	  }

	  span.finish();
	}

	function quantizePath (path) {
	  return path.replace(/[0-9]+/g, '?')
	}

	var elasticsearch = [
	  {
	    name: 'elasticsearch',
	    file: 'src/lib/transport.js',
	    versions: ['>=10'],
	    patch (Transport, tracer, config) {
	      this.wrap(Transport.prototype, 'request', createWrapRequest(tracer, config));
	    },
	    unpatch (Transport) {
	      this.unwrap(Transport.prototype, 'request');
	    }
	  },
	  {
	    name: '@elastic/elasticsearch',
	    file: 'lib/Transport.js',
	    versions: ['>=5.6.16', '>=7.6.0'], // initial version of this module
	    patch (Transport, tracer, config) {
	      this.wrap(Transport.prototype, 'request', createWrapRequest(tracer, config));
	    },
	    unpatch (Transport) {
	      this.unwrap(Transport.prototype, 'request');
	    }
	  }
	];

	/*!
	 * methods
	 * Copyright(c) 2013-2014 TJ Holowaychuk
	 * Copyright(c) 2015-2016 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	/**
	 * Module dependencies.
	 * @private
	 */



	/**
	 * Module exports.
	 * @public
	 */

	var methods$1 = getCurrentNodeMethods() || getBasicNodeMethods();

	/**
	 * Get the current Node.js methods.
	 * @private
	 */

	function getCurrentNodeMethods() {
	  return http__default['default'].METHODS && http__default['default'].METHODS.map(function lowerCaseMethod(method) {
	    return method.toLowerCase();
	  });
	}

	/**
	 * Get the "basic" Node.js methods, a snapshot from Node.js 0.10.
	 * @private
	 */

	function getBasicNodeMethods() {
	  return [
	    'get',
	    'post',
	    'put',
	    'head',
	    'delete',
	    'options',
	    'trace',
	    'copy',
	    'lock',
	    'mkcol',
	    'move',
	    'purge',
	    'propfind',
	    'proppatch',
	    'unlock',
	    'report',
	    'mkactivity',
	    'checkout',
	    'merge',
	    'm-search',
	    'notify',
	    'subscribe',
	    'unsubscribe',
	    'patch',
	    'search',
	    'connect'
	  ];
	}

	const METHODS$1 = methods$1.concat('all');



	function createWrapHandle (tracer, config) {
	  return function wrapHandle (handle) {
	    return function handleWithTracer (req, res, done) {
	      web_1.patch(req);

	      return handle.apply(this, arguments)
	    }
	  }
	}

	function createWrapProcessParams (tracer, config) {
	  return function wrapProcessParams (processParams) {
	    return function processParamsWithTrace (layer, called, req, res, done) {
	      const matchers = layer._datadog_matchers;

	      req = done ? req : called;

	      if (web_1.active(req) && matchers) {
	        // Try to guess which path actually matched
	        for (let i = 0; i < matchers.length; i++) {
	          if (matchers[i].test(layer)) {
	            web_1.enterRoute(req, matchers[i].path);

	            break
	          }
	        }
	      }

	      return processParams.apply(this, arguments)
	    }
	  }
	}

	function wrapRouterMethod (original) {
	  return function methodWithTrace (fn) {
	    const offset = this.stack ? [].concat(this.stack).length : 0;
	    const router = original.apply(this, arguments);

	    if (typeof this.stack === 'function') {
	      this.stack = [{ handle: this.stack }];
	    }

	    wrapStack(this.stack, offset, extractMatchers(fn));

	    return router
	  }
	}

	function wrapLayerHandle (layer, handle) {
	  if (handle.length === 4) {
	    return function (error, req, res, next) {
	      return callHandle(layer, handle, req, [error, req, res, wrapNext(layer, req, next)])
	    }
	  } else {
	    return function (req, res, next) {
	      return callHandle(layer, handle, req, [req, res, wrapNext(layer, req, next)])
	    }
	  }
	}

	function wrapStack (stack, offset, matchers) {
	  [].concat(stack).slice(offset).forEach(layer => {
	    if (layer.__handle) { // express-async-errors
	      layer.__handle = wrapLayerHandle(layer, layer.__handle);
	    } else {
	      layer.handle = wrapLayerHandle(layer, layer.handle);
	    }

	    layer._datadog_matchers = matchers;

	    if (layer.route) {
	      METHODS$1.forEach(method => {
	        if (typeof layer.route.stack === 'function') {
	          layer.route.stack = [{ handle: layer.route.stack }];
	        }

	        layer.route[method] = wrapRouterMethod(layer.route[method]);
	      });
	    }
	  });
	}

	function wrapNext (layer, req, next) {
	  if (!next || !web_1.active(req)) return next

	  const originalNext = next;

	  return function (error) {
	    if (!error && layer.path && !isFastStar(layer) && !isFastSlash(layer)) {
	      web_1.exitRoute(req);
	    }

	    web_1.finish(req, error);

	    originalNext.apply(null, arguments);
	  }
	}

	function callHandle (layer, handle, req, args) {
	  return web_1.wrapMiddleware(req, handle, 'express.middleware', () => {
	    const span = web_1.active(req);
	    if (span) {
	      span.setTag('component', 'express');
	    }
	    return handle.apply(layer, args)
	  })
	}

	function extractMatchers (fn) {
	  const arg = flatten([].concat(fn));

	  if (typeof arg[0] === 'function') {
	    return []
	  }

	  return arg.map(pattern => ({
	    path: pattern instanceof RegExp ? `(${pattern})` : pattern,
	    test: layer => !isFastStar(layer) && !isFastSlash(layer) && pathToRegexp(pattern).test(layer.path)
	  }))
	}

	function isFastStar (layer) {
	  if (layer.regexp.fast_star !== undefined) {
	    return layer.regexp.fast_star
	  }

	  return layer._datadog_matchers.some(matcher => matcher.path === '*')
	}

	function isFastSlash (layer) {
	  if (layer.regexp.fast_slash !== undefined) {
	    return layer.regexp.fast_slash
	  }

	  return layer._datadog_matchers.some(matcher => matcher.path === '/')
	}

	function flatten (arr) {
	  return arr.reduce((acc, val) => Array.isArray(val) ? acc.concat(flatten(val)) : acc.concat(val), [])
	}

	var router = {
	  name: 'router',
	  versions: ['>=1'],
	  patch (Router, tracer, config) {
	    this.wrap(Router.prototype, 'handle', createWrapHandle());
	    this.wrap(Router.prototype, 'process_params', createWrapProcessParams());
	    this.wrap(Router.prototype, 'use', wrapRouterMethod);
	    this.wrap(Router.prototype, 'route', wrapRouterMethod);
	  },
	  unpatch (Router) {
	    this.unwrap(Router.prototype, 'handle');
	    this.unwrap(Router.prototype, 'process_params');
	    this.unwrap(Router.prototype, 'use');
	    this.unwrap(Router.prototype, 'route');
	  }
	};

	const METHODS = methods$1.concat('use', 'route', 'param', 'all');



	function createWrapMethod$1 (tracer, config) {
	  config = web_1.normalizeConfig(config);

	  function expressTrace (req, res, next) {
	    web_1.instrument(tracer, config, req, res, 'express.request');
	    const span = web_1.active(req);
	    if (span) {
	      span.setTag('component', 'express');
	    }

	    next();
	  }

	  return function wrapMethod (original) {
	    return function methodWithTrace () {
	      if (!this._datadog_trace_patched && !this._router) {
	        this._datadog_trace_patched = true;
	        this.use(expressTrace);
	      }
	      return original.apply(this, arguments)
	    }
	  }
	}

	function patch$2 (express, tracer, config) {
	  this.wrap(express.application, METHODS, createWrapMethod$1(tracer, config));
	  router.patch.call(this, { prototype: express.Router }, tracer, config);
	}

	function unpatch$1 (express) {
	  this.unwrap(express.application, METHODS);
	  router.unpatch.call(this, { prototype: express.Router });
	}

	var express = {
	  name: 'express',
	  versions: ['>=4'],
	  patch: patch$2,
	  unpatch: unpatch$1
	};

	function createWrapAcquire (tracer, config) {
	  return function wrapAcquire (acquire) {
	    return function acquireWithTrace (callback, priority) {
	      return acquire.call(this, tracer.scope().bind(callback), priority)
	    }
	  }
	}

	function createWrapPool (tracer, config, instrumenter) {
	  return function wrapPool (Pool) {
	    return function PoolWithTrace (factory) {
	      const pool = Pool.apply(this, arguments);

	      instrumenter.wrap(pool, 'acquire', createWrapAcquire(tracer));

	      return pool
	    }
	  }
	}

	var genericPool = [
	  {
	    name: 'generic-pool',
	    versions: ['^2.4'],
	    patch (genericPool, tracer, config) {
	      this.wrap(genericPool.Pool.prototype, 'acquire', createWrapAcquire(tracer));
	    },
	    unpatch (genericPool) {
	      this.unwrap(genericPool.Pool.prototype, 'acquire');
	    }
	  },
	  {
	    name: 'generic-pool',
	    versions: ['2 - 2.3'],
	    patch (genericPool, tracer, config) {
	      this.wrap(genericPool, 'Pool', createWrapPool(tracer, config, this));
	    },
	    unpatch (genericPool) {
	      this.unwrap(genericPool, 'Pool');
	    }
	  }
	];

	/**
	 * lodash (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */

	var lodash_sortby = createCommonjsModule(function (module, exports) {
	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;

	/** Used as the `TypeError` message for "Functions" methods. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/** Used to compose bitmasks for comparison styles. */
	var UNORDERED_COMPARE_FLAG = 1,
	    PARTIAL_COMPARE_FLAG = 2;

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0,
	    MAX_SAFE_INTEGER = 9007199254740991;

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    promiseTag = '[object Promise]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    symbolTag = '[object Symbol]',
	    weakMapTag = '[object WeakMap]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/** Used to match property names within property paths. */
	var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
	    reIsPlainProp = /^\w*$/,
	    reLeadingDot = /^\./,
	    rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	 */
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

	/** Used to match backslashes in property paths. */
	var reEscapeChar = /\\(\\)?/g;

	/** Used to detect host constructors (Safari). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;

	/** Used to identify `toStringTag` values of typed arrays. */
	var typedArrayTags = {};
	typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	typedArrayTags[uint32Tag] = true;
	typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
	typedArrayTags[errorTag] = typedArrayTags[funcTag] =
	typedArrayTags[mapTag] = typedArrayTags[numberTag] =
	typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
	typedArrayTags[setTag] = typedArrayTags[stringTag] =
	typedArrayTags[weakMapTag] = false;

	/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();

	/** Detect free variable `exports`. */
	var freeExports = exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/** Detect free variable `process` from Node.js. */
	var freeProcess = moduleExports && freeGlobal.process;

	/** Used to access faster Node.js helpers. */
	var nodeUtil = (function() {
	  try {
	    return freeProcess && freeProcess.binding('util');
	  } catch (e) {}
	}());

	/* Node.js helper references. */
	var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

	/**
	 * A faster alternative to `Function#apply`, this function invokes `func`
	 * with the `this` binding of `thisArg` and the arguments of `args`.
	 *
	 * @private
	 * @param {Function} func The function to invoke.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {Array} args The arguments to invoke `func` with.
	 * @returns {*} Returns the result of `func`.
	 */
	function apply(func, thisArg, args) {
	  switch (args.length) {
	    case 0: return func.call(thisArg);
	    case 1: return func.call(thisArg, args[0]);
	    case 2: return func.call(thisArg, args[0], args[1]);
	    case 3: return func.call(thisArg, args[0], args[1], args[2]);
	  }
	  return func.apply(thisArg, args);
	}

	/**
	 * A specialized version of `_.map` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	function arrayMap(array, iteratee) {
	  var index = -1,
	      length = array ? array.length : 0,
	      result = Array(length);

	  while (++index < length) {
	    result[index] = iteratee(array[index], index, array);
	  }
	  return result;
	}

	/**
	 * Appends the elements of `values` to `array`.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {Array} values The values to append.
	 * @returns {Array} Returns `array`.
	 */
	function arrayPush(array, values) {
	  var index = -1,
	      length = values.length,
	      offset = array.length;

	  while (++index < length) {
	    array[offset + index] = values[index];
	  }
	  return array;
	}

	/**
	 * A specialized version of `_.some` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if any element passes the predicate check,
	 *  else `false`.
	 */
	function arraySome(array, predicate) {
	  var index = -1,
	      length = array ? array.length : 0;

	  while (++index < length) {
	    if (predicate(array[index], index, array)) {
	      return true;
	    }
	  }
	  return false;
	}

	/**
	 * The base implementation of `_.property` without support for deep paths.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 */
	function baseProperty(key) {
	  return function(object) {
	    return object == null ? undefined : object[key];
	  };
	}

	/**
	 * The base implementation of `_.sortBy` which uses `comparer` to define the
	 * sort order of `array` and replaces criteria objects with their corresponding
	 * values.
	 *
	 * @private
	 * @param {Array} array The array to sort.
	 * @param {Function} comparer The function to define sort order.
	 * @returns {Array} Returns `array`.
	 */
	function baseSortBy(array, comparer) {
	  var length = array.length;

	  array.sort(comparer);
	  while (length--) {
	    array[length] = array[length].value;
	  }
	  return array;
	}

	/**
	 * The base implementation of `_.times` without support for iteratee shorthands
	 * or max array length checks.
	 *
	 * @private
	 * @param {number} n The number of times to invoke `iteratee`.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the array of results.
	 */
	function baseTimes(n, iteratee) {
	  var index = -1,
	      result = Array(n);

	  while (++index < n) {
	    result[index] = iteratee(index);
	  }
	  return result;
	}

	/**
	 * The base implementation of `_.unary` without support for storing metadata.
	 *
	 * @private
	 * @param {Function} func The function to cap arguments for.
	 * @returns {Function} Returns the new capped function.
	 */
	function baseUnary(func) {
	  return function(value) {
	    return func(value);
	  };
	}

	/**
	 * Gets the value at `key` of `object`.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {string} key The key of the property to get.
	 * @returns {*} Returns the property value.
	 */
	function getValue(object, key) {
	  return object == null ? undefined : object[key];
	}

	/**
	 * Checks if `value` is a host object in IE < 9.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
	 */
	function isHostObject(value) {
	  // Many host objects are `Object` objects that can coerce to strings
	  // despite having improperly defined `toString` methods.
	  var result = false;
	  if (value != null && typeof value.toString != 'function') {
	    try {
	      result = !!(value + '');
	    } catch (e) {}
	  }
	  return result;
	}

	/**
	 * Converts `map` to its key-value pairs.
	 *
	 * @private
	 * @param {Object} map The map to convert.
	 * @returns {Array} Returns the key-value pairs.
	 */
	function mapToArray(map) {
	  var index = -1,
	      result = Array(map.size);

	  map.forEach(function(value, key) {
	    result[++index] = [key, value];
	  });
	  return result;
	}

	/**
	 * Creates a unary function that invokes `func` with its argument transformed.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} transform The argument transform.
	 * @returns {Function} Returns the new function.
	 */
	function overArg(func, transform) {
	  return function(arg) {
	    return func(transform(arg));
	  };
	}

	/**
	 * Converts `set` to an array of its values.
	 *
	 * @private
	 * @param {Object} set The set to convert.
	 * @returns {Array} Returns the values.
	 */
	function setToArray(set) {
	  var index = -1,
	      result = Array(set.size);

	  set.forEach(function(value) {
	    result[++index] = value;
	  });
	  return result;
	}

	/** Used for built-in method references. */
	var arrayProto = Array.prototype,
	    funcProto = Function.prototype,
	    objectProto = Object.prototype;

	/** Used to detect overreaching core-js shims. */
	var coreJsData = root['__core-js_shared__'];

	/** Used to detect methods masquerading as native. */
	var maskSrcKey = (function() {
	  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	  return uid ? ('Symbol(src)_1.' + uid) : '';
	}());

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/** Built-in value references. */
	var Symbol = root.Symbol,
	    Uint8Array = root.Uint8Array,
	    propertyIsEnumerable = objectProto.propertyIsEnumerable,
	    splice = arrayProto.splice,
	    spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeKeys = overArg(Object.keys, Object),
	    nativeMax = Math.max;

	/* Built-in method references that are verified to be native. */
	var DataView = getNative(root, 'DataView'),
	    Map = getNative(root, 'Map'),
	    Promise = getNative(root, 'Promise'),
	    Set = getNative(root, 'Set'),
	    WeakMap = getNative(root, 'WeakMap'),
	    nativeCreate = getNative(Object, 'create');

	/** Used to detect maps, sets, and weakmaps. */
	var dataViewCtorString = toSource(DataView),
	    mapCtorString = toSource(Map),
	    promiseCtorString = toSource(Promise),
	    setCtorString = toSource(Set),
	    weakMapCtorString = toSource(WeakMap);

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = Symbol ? Symbol.prototype : undefined,
	    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
	    symbolToString = symbolProto ? symbolProto.toString : undefined;

	/**
	 * Creates a hash object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Hash(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	/**
	 * Removes all key-value entries from the hash.
	 *
	 * @private
	 * @name clear
	 * @memberOf Hash
	 */
	function hashClear() {
	  this.__data__ = nativeCreate ? nativeCreate(null) : {};
	}

	/**
	 * Removes `key` and its value from the hash.
	 *
	 * @private
	 * @name delete
	 * @memberOf Hash
	 * @param {Object} hash The hash to modify.
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function hashDelete(key) {
	  return this.has(key) && delete this.__data__[key];
	}

	/**
	 * Gets the hash value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Hash
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function hashGet(key) {
	  var data = this.__data__;
	  if (nativeCreate) {
	    var result = data[key];
	    return result === HASH_UNDEFINED ? undefined : result;
	  }
	  return hasOwnProperty.call(data, key) ? data[key] : undefined;
	}

	/**
	 * Checks if a hash value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Hash
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function hashHas(key) {
	  var data = this.__data__;
	  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
	}

	/**
	 * Sets the hash `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Hash
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the hash instance.
	 */
	function hashSet(key, value) {
	  var data = this.__data__;
	  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
	  return this;
	}

	// Add methods to `Hash`.
	Hash.prototype.clear = hashClear;
	Hash.prototype['delete'] = hashDelete;
	Hash.prototype.get = hashGet;
	Hash.prototype.has = hashHas;
	Hash.prototype.set = hashSet;

	/**
	 * Creates an list cache object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function ListCache(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	/**
	 * Removes all key-value entries from the list cache.
	 *
	 * @private
	 * @name clear
	 * @memberOf ListCache
	 */
	function listCacheClear() {
	  this.__data__ = [];
	}

	/**
	 * Removes `key` and its value from the list cache.
	 *
	 * @private
	 * @name delete
	 * @memberOf ListCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function listCacheDelete(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  if (index < 0) {
	    return false;
	  }
	  var lastIndex = data.length - 1;
	  if (index == lastIndex) {
	    data.pop();
	  } else {
	    splice.call(data, index, 1);
	  }
	  return true;
	}

	/**
	 * Gets the list cache value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf ListCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function listCacheGet(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  return index < 0 ? undefined : data[index][1];
	}

	/**
	 * Checks if a list cache value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf ListCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function listCacheHas(key) {
	  return assocIndexOf(this.__data__, key) > -1;
	}

	/**
	 * Sets the list cache `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf ListCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the list cache instance.
	 */
	function listCacheSet(key, value) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  if (index < 0) {
	    data.push([key, value]);
	  } else {
	    data[index][1] = value;
	  }
	  return this;
	}

	// Add methods to `ListCache`.
	ListCache.prototype.clear = listCacheClear;
	ListCache.prototype['delete'] = listCacheDelete;
	ListCache.prototype.get = listCacheGet;
	ListCache.prototype.has = listCacheHas;
	ListCache.prototype.set = listCacheSet;

	/**
	 * Creates a map cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function MapCache(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	/**
	 * Removes all key-value entries from the map.
	 *
	 * @private
	 * @name clear
	 * @memberOf MapCache
	 */
	function mapCacheClear() {
	  this.__data__ = {
	    'hash': new Hash,
	    'map': new (Map || ListCache),
	    'string': new Hash
	  };
	}

	/**
	 * Removes `key` and its value from the map.
	 *
	 * @private
	 * @name delete
	 * @memberOf MapCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function mapCacheDelete(key) {
	  return getMapData(this, key)['delete'](key);
	}

	/**
	 * Gets the map value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf MapCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function mapCacheGet(key) {
	  return getMapData(this, key).get(key);
	}

	/**
	 * Checks if a map value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf MapCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function mapCacheHas(key) {
	  return getMapData(this, key).has(key);
	}

	/**
	 * Sets the map `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf MapCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the map cache instance.
	 */
	function mapCacheSet(key, value) {
	  getMapData(this, key).set(key, value);
	  return this;
	}

	// Add methods to `MapCache`.
	MapCache.prototype.clear = mapCacheClear;
	MapCache.prototype['delete'] = mapCacheDelete;
	MapCache.prototype.get = mapCacheGet;
	MapCache.prototype.has = mapCacheHas;
	MapCache.prototype.set = mapCacheSet;

	/**
	 *
	 * Creates an array cache object to store unique values.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [values] The values to cache.
	 */
	function SetCache(values) {
	  var index = -1,
	      length = values ? values.length : 0;

	  this.__data__ = new MapCache;
	  while (++index < length) {
	    this.add(values[index]);
	  }
	}

	/**
	 * Adds `value` to the array cache.
	 *
	 * @private
	 * @name add
	 * @memberOf SetCache
	 * @alias push
	 * @param {*} value The value to cache.
	 * @returns {Object} Returns the cache instance.
	 */
	function setCacheAdd(value) {
	  this.__data__.set(value, HASH_UNDEFINED);
	  return this;
	}

	/**
	 * Checks if `value` is in the array cache.
	 *
	 * @private
	 * @name has
	 * @memberOf SetCache
	 * @param {*} value The value to search for.
	 * @returns {number} Returns `true` if `value` is found, else `false`.
	 */
	function setCacheHas(value) {
	  return this.__data__.has(value);
	}

	// Add methods to `SetCache`.
	SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
	SetCache.prototype.has = setCacheHas;

	/**
	 * Creates a stack cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Stack(entries) {
	  this.__data__ = new ListCache(entries);
	}

	/**
	 * Removes all key-value entries from the stack.
	 *
	 * @private
	 * @name clear
	 * @memberOf Stack
	 */
	function stackClear() {
	  this.__data__ = new ListCache;
	}

	/**
	 * Removes `key` and its value from the stack.
	 *
	 * @private
	 * @name delete
	 * @memberOf Stack
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function stackDelete(key) {
	  return this.__data__['delete'](key);
	}

	/**
	 * Gets the stack value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Stack
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function stackGet(key) {
	  return this.__data__.get(key);
	}

	/**
	 * Checks if a stack value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Stack
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function stackHas(key) {
	  return this.__data__.has(key);
	}

	/**
	 * Sets the stack `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Stack
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the stack cache instance.
	 */
	function stackSet(key, value) {
	  var cache = this.__data__;
	  if (cache instanceof ListCache) {
	    var pairs = cache.__data__;
	    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
	      pairs.push([key, value]);
	      return this;
	    }
	    cache = this.__data__ = new MapCache(pairs);
	  }
	  cache.set(key, value);
	  return this;
	}

	// Add methods to `Stack`.
	Stack.prototype.clear = stackClear;
	Stack.prototype['delete'] = stackDelete;
	Stack.prototype.get = stackGet;
	Stack.prototype.has = stackHas;
	Stack.prototype.set = stackSet;

	/**
	 * Creates an array of the enumerable property names of the array-like `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @param {boolean} inherited Specify returning inherited property names.
	 * @returns {Array} Returns the array of property names.
	 */
	function arrayLikeKeys(value, inherited) {
	  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
	  // Safari 9 makes `arguments.length` enumerable in strict mode.
	  var result = (isArray(value) || isArguments(value))
	    ? baseTimes(value.length, String)
	    : [];

	  var length = result.length,
	      skipIndexes = !!length;

	  for (var key in value) {
	    if ((inherited || hasOwnProperty.call(value, key)) &&
	        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	/**
	 * Gets the index at which the `key` is found in `array` of key-value pairs.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} key The key to search for.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function assocIndexOf(array, key) {
	  var length = array.length;
	  while (length--) {
	    if (eq(array[length][0], key)) {
	      return length;
	    }
	  }
	  return -1;
	}

	/**
	 * The base implementation of `_.forEach` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array|Object} Returns `collection`.
	 */
	var baseEach = createBaseEach(baseForOwn);

	/**
	 * The base implementation of `_.flatten` with support for restricting flattening.
	 *
	 * @private
	 * @param {Array} array The array to flatten.
	 * @param {number} depth The maximum recursion depth.
	 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
	 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
	 * @param {Array} [result=[]] The initial result value.
	 * @returns {Array} Returns the new flattened array.
	 */
	function baseFlatten(array, depth, predicate, isStrict, result) {
	  var index = -1,
	      length = array.length;

	  predicate || (predicate = isFlattenable);
	  result || (result = []);

	  while (++index < length) {
	    var value = array[index];
	    if (depth > 0 && predicate(value)) {
	      if (depth > 1) {
	        // Recursively flatten arrays (susceptible to call stack limits).
	        baseFlatten(value, depth - 1, predicate, isStrict, result);
	      } else {
	        arrayPush(result, value);
	      }
	    } else if (!isStrict) {
	      result[result.length] = value;
	    }
	  }
	  return result;
	}

	/**
	 * The base implementation of `baseForOwn` which iterates over `object`
	 * properties returned by `keysFunc` and invokes `iteratee` for each property.
	 * Iteratee functions may exit iteration early by explicitly returning `false`.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @returns {Object} Returns `object`.
	 */
	var baseFor = createBaseFor();

	/**
	 * The base implementation of `_.forOwn` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 */
	function baseForOwn(object, iteratee) {
	  return object && baseFor(object, iteratee, keys);
	}

	/**
	 * The base implementation of `_.get` without support for default values.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @returns {*} Returns the resolved value.
	 */
	function baseGet(object, path) {
	  path = isKey(path, object) ? [path] : castPath(path);

	  var index = 0,
	      length = path.length;

	  while (object != null && index < length) {
	    object = object[toKey(path[index++])];
	  }
	  return (index && index == length) ? object : undefined;
	}

	/**
	 * The base implementation of `getTag`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag(value) {
	  return objectToString.call(value);
	}

	/**
	 * The base implementation of `_.hasIn` without support for deep paths.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {Array|string} key The key to check.
	 * @returns {boolean} Returns `true` if `key` exists, else `false`.
	 */
	function baseHasIn(object, key) {
	  return object != null && key in Object(object);
	}

	/**
	 * The base implementation of `_.isEqual` which supports partial comparisons
	 * and tracks traversed objects.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @param {boolean} [bitmask] The bitmask of comparison flags.
	 *  The bitmask may be composed of the following flags:
	 *     1 - Unordered comparison
	 *     2 - Partial comparison
	 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 */
	function baseIsEqual(value, other, customizer, bitmask, stack) {
	  if (value === other) {
	    return true;
	  }
	  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
	    return value !== value && other !== other;
	  }
	  return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
	}

	/**
	 * A specialized version of `baseIsEqual` for arrays and objects which performs
	 * deep comparisons and tracks traversed objects enabling objects with circular
	 * references to be compared.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`
	 *  for more details.
	 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
	  var objIsArr = isArray(object),
	      othIsArr = isArray(other),
	      objTag = arrayTag,
	      othTag = arrayTag;

	  if (!objIsArr) {
	    objTag = getTag(object);
	    objTag = objTag == argsTag ? objectTag : objTag;
	  }
	  if (!othIsArr) {
	    othTag = getTag(other);
	    othTag = othTag == argsTag ? objectTag : othTag;
	  }
	  var objIsObj = objTag == objectTag && !isHostObject(object),
	      othIsObj = othTag == objectTag && !isHostObject(other),
	      isSameTag = objTag == othTag;

	  if (isSameTag && !objIsObj) {
	    stack || (stack = new Stack);
	    return (objIsArr || isTypedArray(object))
	      ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)
	      : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
	  }
	  if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
	    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

	    if (objIsWrapped || othIsWrapped) {
	      var objUnwrapped = objIsWrapped ? object.value() : object,
	          othUnwrapped = othIsWrapped ? other.value() : other;

	      stack || (stack = new Stack);
	      return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
	    }
	  }
	  if (!isSameTag) {
	    return false;
	  }
	  stack || (stack = new Stack);
	  return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
	}

	/**
	 * The base implementation of `_.isMatch` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The object to inspect.
	 * @param {Object} source The object of property values to match.
	 * @param {Array} matchData The property names, values, and compare flags to match.
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	 */
	function baseIsMatch(object, source, matchData, customizer) {
	  var index = matchData.length,
	      length = index,
	      noCustomizer = !customizer;

	  if (object == null) {
	    return !length;
	  }
	  object = Object(object);
	  while (index--) {
	    var data = matchData[index];
	    if ((noCustomizer && data[2])
	          ? data[1] !== object[data[0]]
	          : !(data[0] in object)
	        ) {
	      return false;
	    }
	  }
	  while (++index < length) {
	    data = matchData[index];
	    var key = data[0],
	        objValue = object[key],
	        srcValue = data[1];

	    if (noCustomizer && data[2]) {
	      if (objValue === undefined && !(key in object)) {
	        return false;
	      }
	    } else {
	      var stack = new Stack;
	      if (customizer) {
	        var result = customizer(objValue, srcValue, key, object, source, stack);
	      }
	      if (!(result === undefined
	            ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)
	            : result
	          )) {
	        return false;
	      }
	    }
	  }
	  return true;
	}

	/**
	 * The base implementation of `_.isNative` without bad shim checks.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function,
	 *  else `false`.
	 */
	function baseIsNative(value) {
	  if (!isObject(value) || isMasked(value)) {
	    return false;
	  }
	  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
	  return pattern.test(toSource(value));
	}

	/**
	 * The base implementation of `_.isTypedArray` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 */
	function baseIsTypedArray(value) {
	  return isObjectLike(value) &&
	    isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
	}

	/**
	 * The base implementation of `_.iteratee`.
	 *
	 * @private
	 * @param {*} [value=_.identity] The value to convert to an iteratee.
	 * @returns {Function} Returns the iteratee.
	 */
	function baseIteratee(value) {
	  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
	  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
	  if (typeof value == 'function') {
	    return value;
	  }
	  if (value == null) {
	    return identity;
	  }
	  if (typeof value == 'object') {
	    return isArray(value)
	      ? baseMatchesProperty(value[0], value[1])
	      : baseMatches(value);
	  }
	  return property(value);
	}

	/**
	 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeys(object) {
	  if (!isPrototype(object)) {
	    return nativeKeys(object);
	  }
	  var result = [];
	  for (var key in Object(object)) {
	    if (hasOwnProperty.call(object, key) && key != 'constructor') {
	      result.push(key);
	    }
	  }
	  return result;
	}

	/**
	 * The base implementation of `_.map` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	function baseMap(collection, iteratee) {
	  var index = -1,
	      result = isArrayLike(collection) ? Array(collection.length) : [];

	  baseEach(collection, function(value, key, collection) {
	    result[++index] = iteratee(value, key, collection);
	  });
	  return result;
	}

	/**
	 * The base implementation of `_.matches` which doesn't clone `source`.
	 *
	 * @private
	 * @param {Object} source The object of property values to match.
	 * @returns {Function} Returns the new spec function.
	 */
	function baseMatches(source) {
	  var matchData = getMatchData(source);
	  if (matchData.length == 1 && matchData[0][2]) {
	    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
	  }
	  return function(object) {
	    return object === source || baseIsMatch(object, source, matchData);
	  };
	}

	/**
	 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
	 *
	 * @private
	 * @param {string} path The path of the property to get.
	 * @param {*} srcValue The value to match.
	 * @returns {Function} Returns the new spec function.
	 */
	function baseMatchesProperty(path, srcValue) {
	  if (isKey(path) && isStrictComparable(srcValue)) {
	    return matchesStrictComparable(toKey(path), srcValue);
	  }
	  return function(object) {
	    var objValue = get(object, path);
	    return (objValue === undefined && objValue === srcValue)
	      ? hasIn(object, path)
	      : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
	  };
	}

	/**
	 * The base implementation of `_.orderBy` without param guards.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	 * @param {string[]} orders The sort orders of `iteratees`.
	 * @returns {Array} Returns the new sorted array.
	 */
	function baseOrderBy(collection, iteratees, orders) {
	  var index = -1;
	  iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(baseIteratee));

	  var result = baseMap(collection, function(value, key, collection) {
	    var criteria = arrayMap(iteratees, function(iteratee) {
	      return iteratee(value);
	    });
	    return { 'criteria': criteria, 'index': ++index, 'value': value };
	  });

	  return baseSortBy(result, function(object, other) {
	    return compareMultiple(object, other, orders);
	  });
	}

	/**
	 * A specialized version of `baseProperty` which supports deep paths.
	 *
	 * @private
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 */
	function basePropertyDeep(path) {
	  return function(object) {
	    return baseGet(object, path);
	  };
	}

	/**
	 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @returns {Function} Returns the new function.
	 */
	function baseRest(func, start) {
	  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
	  return function() {
	    var args = arguments,
	        index = -1,
	        length = nativeMax(args.length - start, 0),
	        array = Array(length);

	    while (++index < length) {
	      array[index] = args[start + index];
	    }
	    index = -1;
	    var otherArgs = Array(start + 1);
	    while (++index < start) {
	      otherArgs[index] = args[index];
	    }
	    otherArgs[start] = array;
	    return apply(func, this, otherArgs);
	  };
	}

	/**
	 * The base implementation of `_.toString` which doesn't convert nullish
	 * values to empty strings.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 */
	function baseToString(value) {
	  // Exit early for strings to avoid a performance hit in some environments.
	  if (typeof value == 'string') {
	    return value;
	  }
	  if (isSymbol(value)) {
	    return symbolToString ? symbolToString.call(value) : '';
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	}

	/**
	 * Casts `value` to a path array if it's not one.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @returns {Array} Returns the cast property path array.
	 */
	function castPath(value) {
	  return isArray(value) ? value : stringToPath(value);
	}

	/**
	 * Compares values to sort them in ascending order.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {number} Returns the sort order indicator for `value`.
	 */
	function compareAscending(value, other) {
	  if (value !== other) {
	    var valIsDefined = value !== undefined,
	        valIsNull = value === null,
	        valIsReflexive = value === value,
	        valIsSymbol = isSymbol(value);

	    var othIsDefined = other !== undefined,
	        othIsNull = other === null,
	        othIsReflexive = other === other,
	        othIsSymbol = isSymbol(other);

	    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
	        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
	        (valIsNull && othIsDefined && othIsReflexive) ||
	        (!valIsDefined && othIsReflexive) ||
	        !valIsReflexive) {
	      return 1;
	    }
	    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
	        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
	        (othIsNull && valIsDefined && valIsReflexive) ||
	        (!othIsDefined && valIsReflexive) ||
	        !othIsReflexive) {
	      return -1;
	    }
	  }
	  return 0;
	}

	/**
	 * Used by `_.orderBy` to compare multiple properties of a value to another
	 * and stable sort them.
	 *
	 * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
	 * specify an order of "desc" for descending or "asc" for ascending sort order
	 * of corresponding values.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {boolean[]|string[]} orders The order to sort by for each property.
	 * @returns {number} Returns the sort order indicator for `object`.
	 */
	function compareMultiple(object, other, orders) {
	  var index = -1,
	      objCriteria = object.criteria,
	      othCriteria = other.criteria,
	      length = objCriteria.length,
	      ordersLength = orders.length;

	  while (++index < length) {
	    var result = compareAscending(objCriteria[index], othCriteria[index]);
	    if (result) {
	      if (index >= ordersLength) {
	        return result;
	      }
	      var order = orders[index];
	      return result * (order == 'desc' ? -1 : 1);
	    }
	  }
	  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
	  // that causes it, under certain circumstances, to provide the same value for
	  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
	  // for more details.
	  //
	  // This also ensures a stable sort in V8 and other engines.
	  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
	  return object.index - other.index;
	}

	/**
	 * Creates a `baseEach` or `baseEachRight` function.
	 *
	 * @private
	 * @param {Function} eachFunc The function to iterate over a collection.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseEach(eachFunc, fromRight) {
	  return function(collection, iteratee) {
	    if (collection == null) {
	      return collection;
	    }
	    if (!isArrayLike(collection)) {
	      return eachFunc(collection, iteratee);
	    }
	    var length = collection.length,
	        index = fromRight ? length : -1,
	        iterable = Object(collection);

	    while ((fromRight ? index-- : ++index < length)) {
	      if (iteratee(iterable[index], index, iterable) === false) {
	        break;
	      }
	    }
	    return collection;
	  };
	}

	/**
	 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
	 *
	 * @private
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseFor(fromRight) {
	  return function(object, iteratee, keysFunc) {
	    var index = -1,
	        iterable = Object(object),
	        props = keysFunc(object),
	        length = props.length;

	    while (length--) {
	      var key = props[fromRight ? length : ++index];
	      if (iteratee(iterable[key], key, iterable) === false) {
	        break;
	      }
	    }
	    return object;
	  };
	}

	/**
	 * A specialized version of `baseIsEqualDeep` for arrays with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Array} array The array to compare.
	 * @param {Array} other The other array to compare.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
	 *  for more details.
	 * @param {Object} stack Tracks traversed `array` and `other` objects.
	 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	 */
	function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
	  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
	      arrLength = array.length,
	      othLength = other.length;

	  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
	    return false;
	  }
	  // Assume cyclic values are equal.
	  var stacked = stack.get(array);
	  if (stacked && stack.get(other)) {
	    return stacked == other;
	  }
	  var index = -1,
	      result = true,
	      seen = (bitmask & UNORDERED_COMPARE_FLAG) ? new SetCache : undefined;

	  stack.set(array, other);
	  stack.set(other, array);

	  // Ignore non-index properties.
	  while (++index < arrLength) {
	    var arrValue = array[index],
	        othValue = other[index];

	    if (customizer) {
	      var compared = isPartial
	        ? customizer(othValue, arrValue, index, other, array, stack)
	        : customizer(arrValue, othValue, index, array, other, stack);
	    }
	    if (compared !== undefined) {
	      if (compared) {
	        continue;
	      }
	      result = false;
	      break;
	    }
	    // Recursively compare arrays (susceptible to call stack limits).
	    if (seen) {
	      if (!arraySome(other, function(othValue, othIndex) {
	            if (!seen.has(othIndex) &&
	                (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
	              return seen.add(othIndex);
	            }
	          })) {
	        result = false;
	        break;
	      }
	    } else if (!(
	          arrValue === othValue ||
	            equalFunc(arrValue, othValue, customizer, bitmask, stack)
	        )) {
	      result = false;
	      break;
	    }
	  }
	  stack['delete'](array);
	  stack['delete'](other);
	  return result;
	}

	/**
	 * A specialized version of `baseIsEqualDeep` for comparing objects of
	 * the same `toStringTag`.
	 *
	 * **Note:** This function only supports comparing values with tags of
	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {string} tag The `toStringTag` of the objects to compare.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
	 *  for more details.
	 * @param {Object} stack Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
	  switch (tag) {
	    case dataViewTag:
	      if ((object.byteLength != other.byteLength) ||
	          (object.byteOffset != other.byteOffset)) {
	        return false;
	      }
	      object = object.buffer;
	      other = other.buffer;

	    case arrayBufferTag:
	      if ((object.byteLength != other.byteLength) ||
	          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
	        return false;
	      }
	      return true;

	    case boolTag:
	    case dateTag:
	    case numberTag:
	      // Coerce booleans to `1` or `0` and dates to milliseconds.
	      // Invalid dates are coerced to `NaN`.
	      return eq(+object, +other);

	    case errorTag:
	      return object.name == other.name && object.message == other.message;

	    case regexpTag:
	    case stringTag:
	      // Coerce regexes to strings and treat strings, primitives and objects,
	      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
	      // for more details.
	      return object == (other + '');

	    case mapTag:
	      var convert = mapToArray;

	    case setTag:
	      var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
	      convert || (convert = setToArray);

	      if (object.size != other.size && !isPartial) {
	        return false;
	      }
	      // Assume cyclic values are equal.
	      var stacked = stack.get(object);
	      if (stacked) {
	        return stacked == other;
	      }
	      bitmask |= UNORDERED_COMPARE_FLAG;

	      // Recursively compare objects (susceptible to call stack limits).
	      stack.set(object, other);
	      var result = equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);
	      stack['delete'](object);
	      return result;

	    case symbolTag:
	      if (symbolValueOf) {
	        return symbolValueOf.call(object) == symbolValueOf.call(other);
	      }
	  }
	  return false;
	}

	/**
	 * A specialized version of `baseIsEqualDeep` for objects with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
	 *  for more details.
	 * @param {Object} stack Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
	  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
	      objProps = keys(object),
	      objLength = objProps.length,
	      othProps = keys(other),
	      othLength = othProps.length;

	  if (objLength != othLength && !isPartial) {
	    return false;
	  }
	  var index = objLength;
	  while (index--) {
	    var key = objProps[index];
	    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
	      return false;
	    }
	  }
	  // Assume cyclic values are equal.
	  var stacked = stack.get(object);
	  if (stacked && stack.get(other)) {
	    return stacked == other;
	  }
	  var result = true;
	  stack.set(object, other);
	  stack.set(other, object);

	  var skipCtor = isPartial;
	  while (++index < objLength) {
	    key = objProps[index];
	    var objValue = object[key],
	        othValue = other[key];

	    if (customizer) {
	      var compared = isPartial
	        ? customizer(othValue, objValue, key, other, object, stack)
	        : customizer(objValue, othValue, key, object, other, stack);
	    }
	    // Recursively compare objects (susceptible to call stack limits).
	    if (!(compared === undefined
	          ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))
	          : compared
	        )) {
	      result = false;
	      break;
	    }
	    skipCtor || (skipCtor = key == 'constructor');
	  }
	  if (result && !skipCtor) {
	    var objCtor = object.constructor,
	        othCtor = other.constructor;

	    // Non `Object` object instances with different constructors are not equal.
	    if (objCtor != othCtor &&
	        ('constructor' in object && 'constructor' in other) &&
	        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	      result = false;
	    }
	  }
	  stack['delete'](object);
	  stack['delete'](other);
	  return result;
	}

	/**
	 * Gets the data for `map`.
	 *
	 * @private
	 * @param {Object} map The map to query.
	 * @param {string} key The reference key.
	 * @returns {*} Returns the map data.
	 */
	function getMapData(map, key) {
	  var data = map.__data__;
	  return isKeyable(key)
	    ? data[typeof key == 'string' ? 'string' : 'hash']
	    : data.map;
	}

	/**
	 * Gets the property names, values, and compare flags of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the match data of `object`.
	 */
	function getMatchData(object) {
	  var result = keys(object),
	      length = result.length;

	  while (length--) {
	    var key = result[length],
	        value = object[key];

	    result[length] = [key, value, isStrictComparable(value)];
	  }
	  return result;
	}

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = getValue(object, key);
	  return baseIsNative(value) ? value : undefined;
	}

	/**
	 * Gets the `toStringTag` of `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	var getTag = baseGetTag;

	// Fallback for data views, maps, sets, and weak maps in IE 11,
	// for data views in Edge < 14, and promises in Node.js.
	if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
	    (Map && getTag(new Map) != mapTag) ||
	    (Promise && getTag(Promise.resolve()) != promiseTag) ||
	    (Set && getTag(new Set) != setTag) ||
	    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
	  getTag = function(value) {
	    var result = objectToString.call(value),
	        Ctor = result == objectTag ? value.constructor : undefined,
	        ctorString = Ctor ? toSource(Ctor) : undefined;

	    if (ctorString) {
	      switch (ctorString) {
	        case dataViewCtorString: return dataViewTag;
	        case mapCtorString: return mapTag;
	        case promiseCtorString: return promiseTag;
	        case setCtorString: return setTag;
	        case weakMapCtorString: return weakMapTag;
	      }
	    }
	    return result;
	  };
	}

	/**
	 * Checks if `path` exists on `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path to check.
	 * @param {Function} hasFunc The function to check properties.
	 * @returns {boolean} Returns `true` if `path` exists, else `false`.
	 */
	function hasPath(object, path, hasFunc) {
	  path = isKey(path, object) ? [path] : castPath(path);

	  var result,
	      index = -1,
	      length = path.length;

	  while (++index < length) {
	    var key = toKey(path[index]);
	    if (!(result = object != null && hasFunc(object, key))) {
	      break;
	    }
	    object = object[key];
	  }
	  if (result) {
	    return result;
	  }
	  var length = object ? object.length : 0;
	  return !!length && isLength(length) && isIndex(key, length) &&
	    (isArray(object) || isArguments(object));
	}

	/**
	 * Checks if `value` is a flattenable `arguments` object or array.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
	 */
	function isFlattenable(value) {
	  return isArray(value) || isArguments(value) ||
	    !!(spreadableSymbol && value && value[spreadableSymbol]);
	}

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return !!length &&
	    (typeof value == 'number' || reIsUint.test(value)) &&
	    (value > -1 && value % 1 == 0 && value < length);
	}

	/**
	 * Checks if the given arguments are from an iteratee call.
	 *
	 * @private
	 * @param {*} value The potential iteratee value argument.
	 * @param {*} index The potential iteratee index or key argument.
	 * @param {*} object The potential iteratee object argument.
	 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
	 *  else `false`.
	 */
	function isIterateeCall(value, index, object) {
	  if (!isObject(object)) {
	    return false;
	  }
	  var type = typeof index;
	  if (type == 'number'
	        ? (isArrayLike(object) && isIndex(index, object.length))
	        : (type == 'string' && index in object)
	      ) {
	    return eq(object[index], value);
	  }
	  return false;
	}

	/**
	 * Checks if `value` is a property name and not a property path.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	 */
	function isKey(value, object) {
	  if (isArray(value)) {
	    return false;
	  }
	  var type = typeof value;
	  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
	      value == null || isSymbol(value)) {
	    return true;
	  }
	  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
	    (object != null && value in Object(object));
	}

	/**
	 * Checks if `value` is suitable for use as unique object key.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	 */
	function isKeyable(value) {
	  var type = typeof value;
	  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
	    ? (value !== '__proto__')
	    : (value === null);
	}

	/**
	 * Checks if `func` has its source masked.
	 *
	 * @private
	 * @param {Function} func The function to check.
	 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	 */
	function isMasked(func) {
	  return !!maskSrcKey && (maskSrcKey in func);
	}

	/**
	 * Checks if `value` is likely a prototype object.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	 */
	function isPrototype(value) {
	  var Ctor = value && value.constructor,
	      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

	  return value === proto;
	}

	/**
	 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` if suitable for strict
	 *  equality comparisons, else `false`.
	 */
	function isStrictComparable(value) {
	  return value === value && !isObject(value);
	}

	/**
	 * A specialized version of `matchesProperty` for source values suitable
	 * for strict equality comparisons, i.e. `===`.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @param {*} srcValue The value to match.
	 * @returns {Function} Returns the new spec function.
	 */
	function matchesStrictComparable(key, srcValue) {
	  return function(object) {
	    if (object == null) {
	      return false;
	    }
	    return object[key] === srcValue &&
	      (srcValue !== undefined || (key in Object(object)));
	  };
	}

	/**
	 * Converts `string` to a property path array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the property path array.
	 */
	var stringToPath = memoize(function(string) {
	  string = toString(string);

	  var result = [];
	  if (reLeadingDot.test(string)) {
	    result.push('');
	  }
	  string.replace(rePropName, function(match, number, quote, string) {
	    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
	  });
	  return result;
	});

	/**
	 * Converts `value` to a string key if it's not a string or symbol.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @returns {string|symbol} Returns the key.
	 */
	function toKey(value) {
	  if (typeof value == 'string' || isSymbol(value)) {
	    return value;
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	}

	/**
	 * Converts `func` to its source code.
	 *
	 * @private
	 * @param {Function} func The function to process.
	 * @returns {string} Returns the source code.
	 */
	function toSource(func) {
	  if (func != null) {
	    try {
	      return funcToString.call(func);
	    } catch (e) {}
	    try {
	      return (func + '');
	    } catch (e) {}
	  }
	  return '';
	}

	/**
	 * Creates an array of elements, sorted in ascending order by the results of
	 * running each element in a collection thru each iteratee. This method
	 * performs a stable sort, that is, it preserves the original sort order of
	 * equal elements. The iteratees are invoked with one argument: (value).
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {...(Function|Function[])} [iteratees=[_.identity]]
	 *  The iteratees to sort by.
	 * @returns {Array} Returns the new sorted array.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'fred',   'age': 48 },
	 *   { 'user': 'barney', 'age': 36 },
	 *   { 'user': 'fred',   'age': 40 },
	 *   { 'user': 'barney', 'age': 34 }
	 * ];
	 *
	 * _.sortBy(users, function(o) { return o.user; });
	 * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
	 *
	 * _.sortBy(users, ['user', 'age']);
	 * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
	 *
	 * _.sortBy(users, 'user', function(o) {
	 *   return Math.floor(o.age / 10);
	 * });
	 * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
	 */
	var sortBy = baseRest(function(collection, iteratees) {
	  if (collection == null) {
	    return [];
	  }
	  var length = iteratees.length;
	  if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
	    iteratees = [];
	  } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
	    iteratees = [iteratees[0]];
	  }
	  return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
	});

	/**
	 * Creates a function that memoizes the result of `func`. If `resolver` is
	 * provided, it determines the cache key for storing the result based on the
	 * arguments provided to the memoized function. By default, the first argument
	 * provided to the memoized function is used as the map cache key. The `func`
	 * is invoked with the `this` binding of the memoized function.
	 *
	 * **Note:** The cache is exposed as the `cache` property on the memoized
	 * function. Its creation may be customized by replacing the `_.memoize.Cache`
	 * constructor with one whose instances implement the
	 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
	 * method interface of `delete`, `get`, `has`, and `set`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to have its output memoized.
	 * @param {Function} [resolver] The function to resolve the cache key.
	 * @returns {Function} Returns the new memoized function.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': 2 };
	 * var other = { 'c': 3, 'd': 4 };
	 *
	 * var values = _.memoize(_.values);
	 * values(object);
	 * // => [1, 2]
	 *
	 * values(other);
	 * // => [3, 4]
	 *
	 * object.a = 2;
	 * values(object);
	 * // => [1, 2]
	 *
	 * // Modify the result cache.
	 * values.cache.set(object, ['a', 'b']);
	 * values(object);
	 * // => ['a', 'b']
	 *
	 * // Replace `_.memoize.Cache`.
	 * _.memoize.Cache = WeakMap;
	 */
	function memoize(func, resolver) {
	  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  var memoized = function() {
	    var args = arguments,
	        key = resolver ? resolver.apply(this, args) : args[0],
	        cache = memoized.cache;

	    if (cache.has(key)) {
	      return cache.get(key);
	    }
	    var result = func.apply(this, args);
	    memoized.cache = cache.set(key, result);
	    return result;
	  };
	  memoized.cache = new (memoize.Cache || MapCache);
	  return memoized;
	}

	// Assign cache to `_.memoize`.
	memoize.Cache = MapCache;

	/**
	 * Performs a
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * comparison between two values to determine if they are equivalent.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.eq(object, object);
	 * // => true
	 *
	 * _.eq(object, other);
	 * // => false
	 *
	 * _.eq('a', 'a');
	 * // => true
	 *
	 * _.eq('a', Object('a'));
	 * // => false
	 *
	 * _.eq(NaN, NaN);
	 * // => true
	 */
	function eq(value, other) {
	  return value === other || (value !== value && other !== other);
	}

	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	function isArguments(value) {
	  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
	  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
	    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
	}

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray = Array.isArray;

	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null && isLength(value.length) && !isFunction(value);
	}

	/**
	 * This method is like `_.isArrayLike` except that it also checks if `value`
	 * is an object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array-like object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArrayLikeObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLikeObject(document.body.children);
	 * // => true
	 *
	 * _.isArrayLikeObject('abc');
	 * // => false
	 *
	 * _.isArrayLikeObject(_.noop);
	 * // => false
	 */
	function isArrayLikeObject(value) {
	  return isObjectLike(value) && isArrayLike(value);
	}

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 8-9 which returns 'object' for typed array and other constructors.
	  var tag = isObject(value) ? objectToString.call(value) : '';
	  return tag == funcTag || tag == genTag;
	}

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' &&
	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol(value) {
	  return typeof value == 'symbol' ||
	    (isObjectLike(value) && objectToString.call(value) == symbolTag);
	}

	/**
	 * Checks if `value` is classified as a typed array.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 * @example
	 *
	 * _.isTypedArray(new Uint8Array);
	 * // => true
	 *
	 * _.isTypedArray([]);
	 * // => false
	 */
	var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

	/**
	 * Converts `value` to a string. An empty string is returned for `null`
	 * and `undefined` values. The sign of `-0` is preserved.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 * @example
	 *
	 * _.toString(null);
	 * // => ''
	 *
	 * _.toString(-0);
	 * // => '-0'
	 *
	 * _.toString([1, 2, 3]);
	 * // => '1,2,3'
	 */
	function toString(value) {
	  return value == null ? '' : baseToString(value);
	}

	/**
	 * Gets the value at `path` of `object`. If the resolved value is
	 * `undefined`, the `defaultValue` is returned in its place.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.7.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	 * @returns {*} Returns the resolved value.
	 * @example
	 *
	 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	 *
	 * _.get(object, 'a[0].b.c');
	 * // => 3
	 *
	 * _.get(object, ['a', '0', 'b', 'c']);
	 * // => 3
	 *
	 * _.get(object, 'a.b.c', 'default');
	 * // => 'default'
	 */
	function get(object, path, defaultValue) {
	  var result = object == null ? undefined : baseGet(object, path);
	  return result === undefined ? defaultValue : result;
	}

	/**
	 * Checks if `path` is a direct or inherited property of `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path to check.
	 * @returns {boolean} Returns `true` if `path` exists, else `false`.
	 * @example
	 *
	 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
	 *
	 * _.hasIn(object, 'a');
	 * // => true
	 *
	 * _.hasIn(object, 'a.b');
	 * // => true
	 *
	 * _.hasIn(object, ['a', 'b']);
	 * // => true
	 *
	 * _.hasIn(object, 'b');
	 * // => false
	 */
	function hasIn(object, path) {
	  return object != null && hasPath(object, path, baseHasIn);
	}

	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	function keys(object) {
	  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
	}

	/**
	 * This method returns the first argument it receives.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Util
	 * @param {*} value Any value.
	 * @returns {*} Returns `value`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 *
	 * console.log(_.identity(object) === object);
	 * // => true
	 */
	function identity(value) {
	  return value;
	}

	/**
	 * Creates a function that returns the value at `path` of a given object.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Util
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 * @example
	 *
	 * var objects = [
	 *   { 'a': { 'b': 2 } },
	 *   { 'a': { 'b': 1 } }
	 * ];
	 *
	 * _.map(objects, _.property('a.b'));
	 * // => [2, 1]
	 *
	 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
	 * // => [1, 2]
	 */
	function property(path) {
	  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
	}

	module.exports = sortBy;
	});

	/* eslint-disable */
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};




	const lodash_sortby_1 = __importDefault(lodash_sortby);
	function hideLiterals(ast) {
	    return visitor_1__default['default'].visit(ast, {
	        IntValue(node) {
	            return Object.assign({}, node, { value: "0" });
	        },
	        FloatValue(node) {
	            return Object.assign({}, node, { value: "0" });
	        },
	        StringValue(node) {
	            return Object.assign({}, node, { value: "", block: false });
	        },
	        ListValue(node) {
	            return Object.assign({}, node, { values: [] });
	        },
	        ObjectValue(node) {
	            return Object.assign({}, node, { fields: [] });
	        }
	    });
	}
	var hideLiterals_1 = hideLiterals;
	function hideStringAndNumericLiterals(ast) {
	    return visitor_1__default['default'].visit(ast, {
	        IntValue(node) {
	            return Object.assign({}, node, { value: "0" });
	        },
	        FloatValue(node) {
	            return Object.assign({}, node, { value: "0" });
	        },
	        StringValue(node) {
	            return Object.assign({}, node, { value: "", block: false });
	        }
	    });
	}
	var hideStringAndNumericLiterals_1 = hideStringAndNumericLiterals;
	function dropUnusedDefinitions(ast, operationName) {
	    const separated = utilities_1__default['default'].separateOperations(ast)[operationName];
	    if (!separated) {
	        return ast;
	    }
	    return separated;
	}
	var dropUnusedDefinitions_1 = dropUnusedDefinitions;
	function sorted(items) {
	    if (items) {
	        return lodash_sortby_1.default.apply(null, arguments);
	    }
	    return undefined;
	}
	function sortAST(ast) {
	    return visitor_1__default['default'].visit(ast, {
	        OperationDefinition(node) {
	            return Object.assign({}, node, { variableDefinitions: sorted(node.variableDefinitions, "variable.name.value") });
	        },
	        SelectionSet(node) {
	            return Object.assign({}, node, { selections: lodash_sortby_1.default(node.selections, "kind", "name.value") });
	        },
	        Field(node) {
	            return Object.assign({}, node, { arguments: sorted(node.arguments, "name.value") });
	        },
	        FragmentSpread(node) {
	            return Object.assign({}, node, { directives: sorted(node.directives, "name.value") });
	        },
	        InlineFragment(node) {
	            return Object.assign({}, node, { directives: sorted(node.directives, "name.value") });
	        },
	        FragmentDefinition(node) {
	            return Object.assign({}, node, { directives: sorted(node.directives, "name.value"), variableDefinitions: sorted(node.variableDefinitions, "variable.name.value") });
	        },
	        Directive(node) {
	            return Object.assign({}, node, { arguments: sorted(node.arguments, "name.value") });
	        }
	    });
	}
	var sortAST_1 = sortAST;
	function removeAliases(ast) {
	    return visitor_1__default['default'].visit(ast, {
	        Field(node) {
	            return Object.assign({}, node, { alias: undefined });
	        }
	    });
	}
	var removeAliases_1 = removeAliases;
	function printWithReducedWhitespace(ast) {
	    const sanitizedAST = visitor_1__default['default'].visit(ast, {
	        StringValue(node) {
	            return Object.assign({}, node, { value: Buffer.from(node.value, "utf8").toString("hex"), block: false });
	        }
	    });
	    const withWhitespace = printer_1__default['default'].print(sanitizedAST);
	    const minimizedButStillHex = withWhitespace
	        .replace(/\s+/g, " ")
	        .replace(/([^_a-zA-Z0-9]) /g, (_, c) => c)
	        .replace(/ ([^_a-zA-Z0-9])/g, (_, c) => c);
	    return minimizedButStillHex.replace(/"([a-f0-9]+)"/g, (_, hex) => JSON.stringify(Buffer.from(hex, "hex").toString("utf8")));
	}
	var printWithReducedWhitespace_1 = printWithReducedWhitespace;

	var transforms = /*#__PURE__*/Object.defineProperty({
		hideLiterals: hideLiterals_1,
		hideStringAndNumericLiterals: hideStringAndNumericLiterals_1,
		dropUnusedDefinitions: dropUnusedDefinitions_1,
		sortAST: sortAST_1,
		removeAliases: removeAliases_1,
		printWithReducedWhitespace: printWithReducedWhitespace_1
	}, '__esModule', {value: true});

	/* eslint-disable */


	function defaultEngineReportingSignature$1(ast, operationName) {
	    return transforms.printWithReducedWhitespace(transforms.sortAST(transforms.removeAliases(transforms.hideLiterals(transforms.dropUnusedDefinitions(ast, operationName)))));
	}
	var defaultEngineReportingSignature_1 = defaultEngineReportingSignature$1;

	var signature = /*#__PURE__*/Object.defineProperty({
		defaultEngineReportingSignature: defaultEngineReportingSignature_1
	}, '__esModule', {value: true});

	/* eslint-disable */


	var defaultEngineReportingSignature = signature.defaultEngineReportingSignature;

	var tools$1 = /*#__PURE__*/Object.defineProperty({
		defaultEngineReportingSignature: defaultEngineReportingSignature
	}, '__esModule', {value: true});

	let tools;

	function createWrapExecute$1 (tracer, config, defaultFieldResolver) {
	  return function wrapExecute (execute) {
	    return function executeWithTrace () {
	      const args = normalizeArgs(arguments);
	      const schema = args.schema;
	      const document = args.document;
	      const source = document && document._datadog_source;
	      const fieldResolver = args.fieldResolver || defaultFieldResolver;
	      const contextValue = args.contextValue = args.contextValue || {};
	      const operation = getOperation(document, args.operationName);

	      if (contextValue._datadog_graphql) {
	        return execute.apply(this, arguments)
	      }

	      args.fieldResolver = wrapResolve(fieldResolver, tracer, config);

	      if (schema) {
	        wrapFields(schema._queryType, tracer, config);
	        wrapFields(schema._mutationType, tracer, config);
	      }

	      const span = startExecutionSpan(tracer, config, operation, args);

	      Object.defineProperty(contextValue, '_datadog_graphql', {
	        value: { source, span, fields: {} }
	      });

	      return call(execute, span, this, [args], (err, res) => {
	        finishResolvers(contextValue);
	        finish(err || (res && res.errors && res.errors[0]), span);
	      })
	    }
	  }
	}

	function createWrapParse (tracer, config) {
	  return function wrapParse (parse) {
	    return function parseWithTrace (source) {
	      const span = startSpan$2(tracer, config, 'parse');

	      analytics_sampler.sample(span, config.analytics);

	      try {
	        const document = parse.apply(this, arguments);
	        const operation = getOperation(document);

	        if (!operation) return document // skip schema parsing

	        if (operation.operation) {
	          let operationValue = `${operation.operation}`;
	          if (operation.name && operation.name.value) {
	            operationValue = `.${operationValue}.${operation.name.value}`;
	          } else if (operation.selectionSet && operation.selectionSet.selections) {
	            if (operation.selectionSet.selections.length > 0) {
	              if (operation.selectionSet.selections[0].name && operation.selectionSet.selections[0].name.value) {
	                operationValue = `.${operationValue}.${operation.selectionSet.selections[0].name.value}`;
	              }
	            }
	          }
	          span.setOperationName(`graphql.parse${operationValue}`);
	        }
	        Object.defineProperties(document, {
	          _datadog_source: {
	            value: source.body || source
	          }
	        });

	        addDocumentTags(span, document);

	        finish(null, span);

	        return document
	      } catch (e) {
	        finish(e, span);
	        throw e
	      }
	    }
	  }
	}

	function createWrapValidate (tracer, config) {
	  return function wrapValidate (validate) {
	    return function validateWithTrace (schema, document, rules, typeInfo) {
	      const startTime = platform$3.now();

	      let error;

	      try {
	        const errors = validate.apply(this, arguments);

	        error = errors[0];

	        return errors
	      } catch (e) {
	        throw error = e
	      } finally {
	        // skip schema stitching nested validation
	        if (error || document.loc) {
	          const span = startSpan$2(tracer, config, 'validate', { startTime });

	          if (document) {
	            if (document.definitions[0]) {
	              const docs = document.definitions[0];
	              if (docs.operation) {
	                let operationValue = `.${docs.operation}`;
	                if (docs.name && docs.name.value) {
	                  operationValue = `${operationValue}.${docs.name.value}`;
	                } else if (docs.selectionSet && docs.selectionSet.selections) {
	                  if (docs.selectionSet.selections.length > 1) {
	                    if (docs.selectionSet.selections[0].name && docs.selectionSet.selections[0].name.value) {
	                      operationValue = `${operationValue}.${docs.selectionSet.selections[0].name.value}`;
	                    }
	                  }
	                }
	                span.setOperationName(`graphql.validate${operationValue}`);
	              }
	            }
	          }

	          addDocumentTags(span, document);
	          analytics_sampler.sample(span, config.analytics);
	          finish(error, span);
	        }
	      }
	    }
	  }
	}

	function wrapFields (type, tracer, config) {
	  if (!type || !type._fields || type._datadog_patched) {
	    return
	  }

	  type._datadog_patched = true;

	  Object.keys(type._fields).forEach(key => {
	    const field = type._fields[key];

	    if (typeof field.resolve === 'function') {
	      field.resolve = wrapResolve(field.resolve, tracer, config);
	    }

	    let unwrappedType = field.type;

	    while (unwrappedType.ofType) {
	      unwrappedType = unwrappedType.ofType;
	    }

	    wrapFields(unwrappedType, tracer, config);
	  });
	}

	function wrapResolve (resolve, tracer, config) {
	  if (resolve._datadog_patched || typeof resolve !== 'function') return resolve

	  const responsePathAsArray = config.collapse
	    ? withCollapse(pathToArray)
	    : pathToArray;

	  function resolveWithTrace (source, args, contextValue, info) {
	    const path = responsePathAsArray(info.path);
	    const depth = path.filter(item => typeof item === 'string').length;

	    if (config.depth >= 0 && config.depth < depth) {
	      const parent = getParentField(tracer, contextValue, path);

	      return call(resolve, parent.span, this, arguments)
	    }

	    const field = assertField(tracer, config, contextValue, info, path);

	    return call(resolve, field.span, this, arguments, err => updateField(field, err))
	  }

	  resolveWithTrace._datadog_patched = true;

	  return resolveWithTrace
	}

	function call (fn, span, thisArg, args, callback) {
	  const scope = span.tracer().scope();

	  callback = callback || (() => {});

	  try {
	    const result = scope.activate(span, () => fn.apply(thisArg, args));

	    if (result && typeof result.then === 'function') {
	      result.then(
	        res => callback(null, res),
	        err => callback(err)
	      );
	    } else {
	      callback(null, result);
	    }

	    return result
	  } catch (e) {
	    callback(e);
	    throw e
	  }
	}

	function getParentField (tracer, contextValue, path) {
	  for (let i = path.length - 1; i > 0; i--) {
	    const field = getField(contextValue, path.slice(0, i));

	    if (field) {
	      return field
	    }
	  }

	  return {
	    span: contextValue._datadog_graphql.span
	  }
	}

	function getField (contextValue, path) {
	  return contextValue._datadog_graphql.fields[path.join('.')]
	}

	function normalizeArgs (args) {
	  if (args.length === 1) {
	    return args[0]
	  }

	  return {
	    schema: args[0],
	    document: args[1],
	    rootValue: args[2],
	    contextValue: args[3],
	    variableValues: args[4],
	    operationName: args[5],
	    fieldResolver: args[6]
	  }
	}

	function startExecutionSpan (tracer, config, operation, args) {
	  const span = startSpan$2(tracer, config, 'execute');
	  let operationValue = '';
	  if (operation && operation.name) {
	    operationValue = `.${operation.operation}.${operation.name.value}`;
	  }

	  span.setOperationName(`graphql.execute${operationValue}`);

	  addExecutionTags(span, config, operation, args.document, args.operationName);
	  addDocumentTags(span, args.document);
	  addVariableTags(tracer, config, span, args.variableValues);

	  analytics_sampler.sample(span, config.analytics, true);

	  return span
	}

	function addExecutionTags (span, config, operation, document, operationName) {
	  const type = operation && operation.operation;
	  const name = operation && operation.name && operation.name.value;
	  const tags = {
	    'resource.name': `${span.context()._name}`,
	    'graphql.operation.signature': getSignature(document, name, type, config.signature)
	  };

	  if (type) {
	    tags['graphql.operation.type'] = type;
	  }

	  if (name) {
	    tags['graphql.operation.name'] = name;
	  }

	  span.addTags(tags);
	}

	function addDocumentTags (span, document) {
	  const tags = {};

	  if (document && document._datadog_source) {
	    tags['graphql.source'] = document._datadog_source;
	  }

	  span.addTags(tags);
	}

	function addVariableTags (tracer, config, span, variableValues) {
	  const tags = {};

	  if (variableValues && config.variables) {
	    const variables = config.variables(variableValues);
	    for (const param in variables) {
	      tags[`graphql.variables.${param}`] = variables[param];
	    }
	  }

	  span.addTags(tags);
	}

	function startSpan$2 (tracer, config, name, options) {
	  options = options || {};

	  return tracer.startSpan(`graphql.${name}`, {
	    childOf: options.childOf || tracer.scope().active(),
	    startTime: options.startTime,
	    tags: {
	      'service.name': getService(tracer, config),
	      'component': 'graphql'
	    }
	  })
	}

	function startResolveSpan (tracer, config, childOf, path, info, contextValue) {
	  const span = startSpan$2(tracer, config, 'resolve', { childOf });
	  const document = contextValue._datadog_graphql.source;
	  const fieldNode = info.fieldNodes.find(fieldNode => fieldNode.kind === 'Field');

	  span.addTags({
	    'resource.name': `${span.context()._name}`,
	    'graphql.field.info': `${info.fieldName}:${info.returnType}`,
	    'graphql.field.name': info.fieldName,
	    'graphql.field.path': path.join('.'),
	    'graphql.field.type': info.returnType.name
	  });

	  if (fieldNode) {
	    if (document) {
	      span.setTag('graphql.source', document.substring(fieldNode.loc.start, fieldNode.loc.end));
	    }

	    if (config.variables) {
	      const variables = config.variables(info.variableValues);

	      fieldNode.arguments
	        .filter(arg => arg.value && arg.value.kind === 'Variable')
	        .filter(arg => arg.value.name && variables[arg.value.name.value])
	        .map(arg => arg.value.name.value)
	        .forEach(name => {
	          span.setTag(`graphql.variables.${name}`, variables[name]);
	        });
	    }
	  }

	  analytics_sampler.sample(span, config.analytics);

	  return span
	}

	function finish (error, span, finishTime) {
	  if (error) {
	    span.addTags({
	      'sfx.error.kind': error.name,
	      'sfx.error.message': error.message,
	      'sfx.error.stack': error.stack
	    });
	  }

	  span.finish(finishTime);
	}

	function finishResolvers (contextValue) {
	  const fields = contextValue._datadog_graphql.fields;

	  Object.keys(fields).reverse().forEach(key => {
	    const field = fields[key];

	    finish(field.error, field.span, field.finishTime);
	  });
	}

	function updateField (field, error) {
	  field.finishTime = platform$3.now();
	  field.error = field.error || error;
	}

	function withCollapse (responsePathAsArray) {
	  return function () {
	    return responsePathAsArray.apply(this, arguments)
	      .map(segment => typeof segment === 'number' ? '*' : segment)
	  }
	}

	function assertField (tracer, config, contextValue, info, path) {
	  const pathString = path.join('.');
	  const fields = contextValue._datadog_graphql.fields;

	  let field = fields[pathString];

	  if (!field) {
	    const parent = getParentField(tracer, contextValue, path);

	    field = fields[pathString] = {
	      parent,
	      span: startResolveSpan(tracer, config, parent.span, path, info, contextValue),
	      error: null
	    };
	  }

	  return field
	}

	function getService (tracer, config) {
	  return config.service || `${tracer._service}-graphql`
	}

	function getOperation (document, operationName) {
	  if (!document || !Array.isArray(document.definitions)) {
	    return
	  }

	  const types = ['query', 'mutation', 'subscription'];

	  if (operationName) {
	    return document.definitions
	      .filter(def => types.indexOf(def.operation) !== -1)
	      .find(def => operationName === (def.name && def.name.value))
	  } else {
	    return document.definitions.find(def => types.indexOf(def.operation) !== -1)
	  }
	}

	function validateConfig (config) {
	  return Object.assign({}, config, {
	    depth: getDepth(config),
	    variables: getVariablesFilter(config),
	    collapse: config.collapse === undefined || !!config.collapse
	  })
	}

	function getDepth (config) {
	  if (typeof config.depth === 'number') {
	    return config.depth
	  } else if (config.hasOwnProperty('depth')) {
	    log_1$1.error('Expected `depth` to be an integer.');
	  }
	  return -1
	}

	function getVariablesFilter (config) {
	  if (typeof config.variables === 'function') {
	    return config.variables
	  } else if (config.variables instanceof Array) {
	    return variables => lodash_pick(variables, config.variables)
	  } else if (config.hasOwnProperty('variables')) {
	    log_1$1.error('Expected `variables` to be an array or function.');
	  }
	  return null
	}

	function getSignature (document, operationName, operationType, calculate) {
	  if (calculate !== false && tools !== false) {
	    try {
	      try {
	        tools = tools || tools$1;
	      } catch (e) {
	        tools = false;
	        throw e
	      }

	      return tools.defaultEngineReportingSignature(document, operationName)
	    } catch (e) {
	      // safety net
	    }
	  }

	  return [operationType, operationName].filter(val => val).join(' ')
	}

	function pathToArray (path) {
	  const flattened = [];
	  let curr = path;
	  while (curr) {
	    flattened.push(curr.key);
	    curr = curr.prev;
	  }
	  return flattened.reverse()
	}

	const versions = semver$1.intersects('<10', process.version)
	  ? ['>=0.10 <15']
	  : ['>=0.10'];

	var graphql = [
	  {
	    name: 'graphql',
	    file: 'execution/execute.js',
	    versions: versions,
	    patch (execute, tracer, config) {
	      this.wrap(execute, 'execute', createWrapExecute$1(
	        tracer,
	        validateConfig(config),
	        execute.defaultFieldResolver
	      ));
	    },
	    unpatch (execute) {
	      this.unwrap(execute, 'execute');
	    }
	  },
	  {
	    name: 'graphql',
	    file: 'language/parser.js',
	    versions: versions,
	    patch (parser, tracer, config) {
	      this.wrap(parser, 'parse', createWrapParse(tracer, validateConfig(config)));
	    },
	    unpatch (parser) {
	      this.unwrap(parser, 'parse');
	    }
	  },
	  {
	    name: 'graphql',
	    file: 'validation/validate.js',
	    versions: versions,
	    patch (validate, tracer, config) {
	      this.wrap(validate, 'validate', createWrapValidate(tracer, validateConfig(config)));
	    },
	    unpatch (validate) {
	      this.unwrap(validate, 'validate');
	    }
	  }
	];

	function createWrapGenerate (tracer, config) {
	  return function wrapGenerate (generate) {
	    return function generateWithTrace (server, req, res, options) {
	      const request = generate.apply(this, arguments);

	      web_1.beforeEnd(req, () => {
	        const span = web_1.active(req);
	        if (span) {
	          span.setTag('component', 'hapi');
	        }
	        web_1.enterRoute(req, request.route.path);
	      });

	      return request
	    }
	  }
	}

	function createWrapExecute (tracer, config) {
	  config = web_1.normalizeConfig(config);

	  return function wrapExecute (execute) {
	    return function executeWithTrace () {
	      const req = this.raw.req;

	      web_1.beforeEnd(req, () => {
	        web_1.enterRoute(req, this.route.path);
	      });

	      return execute.apply(this, arguments)
	    }
	  }
	}

	function createWrapDispatch (tracer, config) {
	  config = web_1.normalizeConfig(config);

	  return function wrapDispatch (dispatch) {
	    return function dispatchWithTrace (options) {
	      const handler = dispatch.apply(this, arguments);

	      return function (req, res) {
	        return web_1.instrument(tracer, config, req, res, 'hapi.request', () => {
	          const span = web_1.active(req);
	          if (span) {
	            span.setTag('component', 'hapi');
	          }
	          return handler.apply(this, arguments)
	        })
	      }
	    }
	  }
	}

	function patch$1 (name, versions, file, property, method, notPrototypical) {
	  return {
	    name: name,
	    versions: versions,
	    file: file,
	    patch (Obj, tracer, config) {
	      const target = notPrototypical ? Obj : Obj.prototype;
	      this.wrap(target, property, method(tracer, config));
	    },
	    unpatch (Obj) {
	      const target = notPrototypical ? Obj : Obj.prototype;
	      this.unwrap(target, property);
	    }
	  }
	}

	let patches = [
	  patch$1('@hapi/hapi', ['>=17.9 <19.0'], 'lib/request.js', 'generate', createWrapGenerate, true),
	  patch$1('hapi', ['>=17.1'], 'lib/request.js', 'generate', createWrapGenerate, true),
	  patch$1('hapi', ['8.5 - 17.0'], 'lib/request.js', 'request', createWrapGenerate),
	  patch$1('hapi', ['2 - 8.4'], 'lib/request.js', '_execute', createWrapExecute),
	  patch$1('hapi', ['7.2 - 16'], 'lib/connection.js', '_dispatch', createWrapDispatch),
	  patch$1('@hapi/hapi', ['>=17.9 <19.0'], 'lib/core.js', '_dispatch', createWrapDispatch),
	  patch$1('hapi', ['>=17'], 'lib/core.js', '_dispatch', createWrapDispatch),
	  patch$1('hapi', ['2 - 7.1'], 'lib/server.js', '_dispatch', createWrapDispatch)
	];

	if (semver$1.gte(process.version, '12.0.0')) {
	  patches = patches.concat([
	    patch$1('@hapi/hapi', ['>=19.0'], 'lib/request.js', 'generate', createWrapGenerate, true),
	    patch$1('@hapi/hapi', ['>=19.0'], 'lib/core.js', '_dispatch', createWrapDispatch)
	  ]);
	}

	var hapi = patches;

	const Reference$1 = lib.Reference;

	const HTTP_HEADERS = formats.HTTP_HEADERS;
	const HTTP_STATUS_CODE = tags_1.HTTP_STATUS_CODE;
	const HTTP_REQUEST_HEADERS = tags_1.HTTP_REQUEST_HEADERS;
	const HTTP_RESPONSE_HEADERS = tags_1.HTTP_RESPONSE_HEADERS;
	const SPAN_KIND = tags_1.SPAN_KIND;
	const CLIENT = kinds.CLIENT;
	const REFERENCE_CHILD_OF$1 = lib.REFERENCE_CHILD_OF;
	const REFERENCE_NOOP$1 = constants$3.REFERENCE_NOOP;

	function patch (http, methodName, tracer, config) {
	  config = normalizeConfig(tracer, config);
	  this.wrap(http, methodName, fn => makeRequestTrace(fn));

	  function makeRequestTrace (request) {
	    return function requestTrace () {
	      const args = normalizeArgs.apply(null, arguments);
	      const uri = args.uri;
	      const options = args.options;

	      let callback = args.callback;

	      const method = (options.method || 'GET').toUpperCase();

	      const scope = tracer.scope();
	      const childOf = scope.active();

	      let references;
	      if (config.filter(uri)) {
	        references = (childOf !== null) ? [ new Reference$1(REFERENCE_CHILD_OF$1, childOf) ] : [];
	      } else {
	        references = [ new Reference$1(REFERENCE_NOOP$1, childOf) ];
	      }

	      const span = tracer.startSpan('http.request', {
	        references,
	        tags: {
	          [SPAN_KIND]: CLIENT,
	          'service.name': getServiceName(tracer, config, options),
	          'resource.name': method,
	          'span.type': 'http',
	          'http.method': method,
	          'http.url': uri
	        }
	      });

	      if (!hasAmazonSignature(options)) {
	        tracer.inject(span, HTTP_HEADERS, options.headers);
	      }

	      analytics_sampler.sample(span, config.analytics);

	      callback = scope.bind(callback, childOf);

	      const req = scope.bind(request, span).call(this, options, callback);
	      const emit = req.emit;

	      req.emit = function (eventName, arg) {
	        switch (eventName) {
	          case 'response': {
	            const res = arg;

	            scope.bind(res);

	            span.setTag(HTTP_STATUS_CODE, res.statusCode);

	            addResponseHeaders(res, span, config);

	            if (!config.validateStatus(res.statusCode)) {
	              span.setTag('error', 'true');
	            }

	            res.on('end', () => finish(req, res, span, config));

	            break
	          }
	          case 'error':
	            addError(span, arg);
	          case 'abort': // eslint-disable-line no-fallthrough
	          case 'close': // eslint-disable-line no-fallthrough
	            finish(req, null, span, config);
	        }

	        return emit.apply(this, arguments)
	      };

	      scope.bind(req);

	      return req
	    }
	  }

	  function finish (req, res, span, config) {
	    addRequestHeaders(req, span, config);

	    config.hooks.request(span, req, res);

	    span.finish();
	  }

	  function addError (span, error) {
	    span.addTags({
	      'sfx.error.kind': error.name,
	      'sfx.error.message': error.message,
	      'sfx.error.stack': error.stack
	    });

	    return error
	  }

	  function addRequestHeaders (req, span, config) {
	    config.headers.forEach(key => {
	      const value = req.getHeader(key);

	      if (value) {
	        span.setTag(`${HTTP_REQUEST_HEADERS}.${key}`, value);
	      }
	    });
	  }

	  function addResponseHeaders (res, span, config) {
	    config.headers.forEach(key => {
	      const value = res.headers[key];

	      if (value) {
	        span.setTag(`${HTTP_RESPONSE_HEADERS}.${key}`, value);
	      }
	    });
	  }

	  function extractUrl (options) {
	    const uri = options;
	    const agent = options.agent || http.globalAgent;

	    return typeof uri === 'string' ? uri : url__default['default'].format({
	      protocol: options.protocol || agent.protocol,
	      hostname: options.hostname || options.host || 'localhost',
	      port: options.port,
	      pathname: options.path || options.pathname || '/'
	    })
	  }

	  function normalizeArgs (inputURL, inputOptions, callback) {
	    let options = typeof inputURL === 'string' ? url__default['default'].parse(inputURL) : Object.assign({}, inputURL);
	    options.headers = options.headers || {};
	    if (typeof inputOptions === 'function') {
	      callback = inputOptions;
	    } else if (typeof inputOptions === 'object') {
	      options = Object.assign(options, inputOptions);
	    }
	    const uri = extractUrl(options);
	    return { uri, options, callback }
	  }
	}

	function getHost (options) {
	  if (typeof options === 'string') {
	    return url__default['default'].parse(options).host
	  }

	  const hostname = options.hostname || options.host || 'localhost';
	  const port = options.port;

	  return [hostname, port].filter(val => val).join(':')
	}

	function getServiceName (tracer, config, options) {
	  if (config.splitByDomain) {
	    return getHost(options)
	  } else if (config.service) {
	    return config.service
	  }

	  return `${tracer._service}-http-client`
	}

	function hasAmazonSignature (options) {
	  if (!options) {
	    return false
	  }

	  if (options.headers) {
	    const headers = Object.keys(options.headers)
	      .reduce((prev, next) => Object.assign(prev, {
	        [next.toLowerCase()]: options.headers[next]
	      }), {});

	    if (headers['x-amz-signature']) {
	      return true
	    }

	    if ([].concat(headers['authorization']).some(startsWith('AWS4-HMAC-SHA256'))) {
	      return true
	    }
	  }

	  return options.path && options.path.toLowerCase().indexOf('x-amz-signature=') !== -1
	}

	function startsWith (searchString) {
	  return value => String(value).startsWith(searchString)
	}

	function unpatch (http) {
	  this.unwrap(http, 'request');
	  this.unwrap(http, 'get');
	}

	function getStatusValidator (config) {
	  if (typeof config.validateStatus === 'function') {
	    return config.validateStatus
	  } else if (config.hasOwnProperty('validateStatus')) {
	    log_1$1.error('Expected `validateStatus` to be a function.');
	  }
	  return code => code < 500 || code >= 600
	}

	function getFilter (tracer, config) {
	  config = Object.assign({}, config, {
	    exclude: [`${tracer._url.href}`].concat(config.exclude || [])
	  });

	  return urlfilter.getFilter(config)
	}

	function normalizeConfig (tracer, config) {
	  config = config.client || config;

	  const validateStatus = getStatusValidator(config);
	  const filter = getFilter(tracer, config);
	  const headers = getHeaders(config);
	  const hooks = getHooks(config);

	  return Object.assign({}, config, {
	    validateStatus,
	    filter,
	    headers,
	    hooks
	  })
	}

	function getHeaders (config) {
	  if (!Array.isArray(config.headers)) return []

	  return config.headers
	    .filter(key => typeof key === 'string')
	    .map(key => key.toLowerCase())
	}

	function getHooks (config) {
	  const noop = () => {};
	  const request = (config.hooks && config.hooks.request) || noop;

	  return { request }
	}

	var client = [
	  {
	    name: 'http',
	    patch: function (http, tracer, config) {
	      if (config.client === false) return

	      patch.call(this, http, 'request', tracer, config);
	      if (semver$1.satisfies(process.version, '>=8')) {
	        /**
	         * In newer Node versions references internal to modules, such as `http(s).get` calling `http(s).request`, do
	         * not use externally patched versions, which is why we need to also patch `get` here separately.
	         */
	        patch.call(this, http, 'get', tracer, config);
	      }
	    },
	    unpatch
	  },
	  {
	    name: 'https',
	    patch: function (http, tracer, config) {
	      if (config.client === false) return

	      if (semver$1.satisfies(process.version, '>=9')) {
	        patch.call(this, http, 'request', tracer, config);
	        patch.call(this, http, 'get', tracer, config);
	      }
	    },
	    unpatch
	  }
	];

	function createWrapEmit (tracer, config) {
	  config = web_1.normalizeConfig(config);

	  return function wrapEmit (emit) {
	    return function emitWithTrace (eventName, req, res) {
	      if (eventName === 'request') {
	        return web_1.instrument(tracer, config, req, res, 'http.request', () => {
	          return emit.apply(this, arguments)
	        })
	      }

	      return emit.apply(this, arguments)
	    }
	  }
	}

	function plugin (name) {
	  return {
	    name,
	    patch (http, tracer, config) {
	      if (config.server === false) return

	      this.wrap(http.Server.prototype, 'emit', createWrapEmit(tracer, config));
	    },
	    unpatch (http) {
	      this.unwrap(http.Server.prototype, 'emit');
	    }
	  }
	}

	var server = [
	  plugin('http'),
	  plugin('https')
	];

	var http = [].concat(client, server);

	const redis$1 = {
	  // Start a span for a Redis command.
	  instrument (tracer, config, db, command, args) {
	    const childOf = tracer.scope().active();
	    const span = tracer.startSpan('redis.command', {
	      childOf,
	      tags: {
	        'span.kind': 'client',
	        'resource.name': command,
	        'component': 'redis',
	        'db.type': 'redis',
	        'db.instance': db || '0',
	        'db.statement': formatCommand(command, args)
	      }
	    });

	    span.setTag('service.name', config.service || `${span.context()._tags['service.name']}-redis`);

	    analytics_sampler.sample(span, config.analytics);

	    return span
	  }
	};

	function formatCommand (command, args) {
	  command = command.toUpperCase();

	  if (!args) return command

	  for (let i = 0, l = args.length; i < l; i++) {
	    if (typeof args[i] === 'function') continue

	    command = `${command} ${formatArg(args[i])}`;

	    if (command.length > 1000) return trim(command, 1000)
	  }

	  return command
	}

	function formatArg (arg) {
	  switch (typeof arg) {
	    case 'string':
	    case 'number':
	      return trim(String(arg), 100)
	    default:
	      return '?'
	  }
	}

	function trim (str, maxlen) {
	  if (str.length > maxlen) {
	    str = str.substr(0, maxlen - 3) + '...';
	  }

	  return str
	}

	var redis_1 = Object.assign({}, tx_1, redis$1);

	function createWrapSendCommand$1 (tracer, config) {
	  return function wrapSendCommand (sendCommand) {
	    return function sendCommandWithTrace (command, stream) {
	      const db = this.options.db;
	      const span = redis_1.instrument(tracer, config, db, command.name, command.args);

	      redis_1.setHost(span, this.options.host, this.options.port);
	      redis_1.wrap(span, command.promise);

	      return tracer.scope().bind(sendCommand, span).apply(this, arguments)
	    }
	  }
	}

	var ioredis = {
	  name: 'ioredis',
	  versions: ['>=2'],
	  patch (Redis, tracer, config) {
	    this.wrap(Redis.prototype, 'sendCommand', createWrapSendCommand$1(tracer, config));
	  },
	  unpatch (Redis) {
	    this.unwrap(Redis.prototype, 'sendCommand');
	  }
	};

	const spanSymbol = '_sfxSpan';
	const maxQueryLength = 1024;

	function createWrapBuilder (tracer, config) {
	  return function wrapQueryBuilder (original) {
	    return function queryBuilderWithTrace () {
	      const scope = tracer.scope();
	      const span = scope.active();
	      const builder = original.apply(this, arguments);
	      return Object.defineProperty(builder, spanSymbol, { value: span })
	    }
	  }
	}

	function createWrapRunner (wrapper, tracer, config) {
	  return function wrapRunner (original) {
	    return function runnerWithTrace () {
	      const runner = original.apply(this, arguments);
	      let formatter;
	      if (runner.client && runner.client._formatQuery) {
	        formatter = runner.client._formatQuery.bind(runner.client);
	      } else if (runner.client.SqlString) {
	        formatter = runner.client.SqlString.format.bind(runner.client.SqlString);
	      }
	      wrapper.wrap(runner, 'query', createWrapRunnerQuery(tracer, config, formatter));
	      return runner
	    }
	  }
	}

	function createWrapRunnerQuery (tracer, config, formatter) {
	  return function wrapQuery (original) {
	    return function queryWithTrace (q) {
	      const scope = tracer.scope();
	      const childOf = this.builder[spanSymbol];

	      const tags = {
	        'component': 'knex',
	        'db.statement': q.sql.substr(0, maxQueryLength)
	      };
	      if (q.timeout !== undefined) {
	        tags.timeout = q.timeout;
	      }

	      let spanName = 'knex.client.runner';
	      if (q.method !== undefined) {
	        spanName = `knex.client.runner.${q.method}`;
	      }
	      const span = tracer.startSpan(spanName, {
	        childOf,
	        tags
	      });
	      setDBTags(this, span);

	      return scope.activate(span, () => {
	        return new Promise((resolve, reject) => {
	          // we can't use then.catch.finally because finally is not supported
	          // on node 8 which knex still supports.
	          const that = this;
	          const query = arguments[0];
	          let formattedQuery = '';
	          if (formatter && query && query.sql) {
	            formattedQuery = formatter(query.sql, query.bindings || []);
	          }

	          original.apply(this, arguments)
	            .then(function () {
	              resolve.apply(that, arguments);
	              span.finish();
	            })
	            .catch(function (e) {
	              addError$2(span, e, formattedQuery);
	              reject.apply(that, arguments);
	              span.finish();
	            });
	        })
	      })
	    }
	  }
	}

	function addError$2 (span, error, formattedQuery) {
	  span.addTags({
	    'error': true,
	    'sfx.error.kind': error.name,
	    'sfx.error.message': error.message.replace(formattedQuery + ' - ', ''),
	    'sfx.error.stack': error.stack
	  });
	  return error
	}

	function setDBTags (obj, span) {
	  if (obj.client && obj.client.config) {
	    const config = obj.client.config;
	    if (config.client) {
	      span.setTag('db.type', config.client);
	    }
	    if (config.connection) {
	      if (config.connection.user) {
	        span.setTag('db.user', config.connection.user);
	      }
	      const instance = config.connection.filename || config.connection.database;
	      if (instance) {
	        span.setTag('db.instance', instance);
	      }
	    }
	  }
	}

	function patchKnex (version, basePath) {
	  return [
	    {
	      name: 'knex',
	      versions: version,
	      file: `${basePath}/client.js`,
	      patch (Client, tracer, config) {
	        this.wrap(Client.prototype, 'queryBuilder', createWrapBuilder(tracer));
	        this.wrap(Client.prototype, 'schemaBuilder', createWrapBuilder(tracer));
	        this.wrap(Client.prototype, 'raw', createWrapBuilder(tracer));
	        this.wrap(Client.prototype, 'runner', createWrapRunner(this, tracer, config));
	      },
	      unpatch (Client) {
	        this.unwrap(Client.prototype, 'runner');
	        this.unwrap(Client.prototype, 'raw');
	        this.unwrap(Client.prototype, 'schemaBuilder');
	        this.unwrap(Client.prototype, 'queryBuilder');
	      }
	    }
	  ]
	}

	var knex = patchKnex(['>=0.10.0 <0.18.0', '>=0.19.0 <=0.20.10', '>=0.20.11 <0.21.0'], 'lib')
	  .concat(patchKnex(['>=0.18.0 <0.19.0'], 'src'));

	function createWrapUse (tracer, config) {
	  config = web_1.normalizeConfig(config);

	  function koaTrace (ctx, next) {
	    web_1.instrument(tracer, config, ctx.req, ctx.res, 'koa.request');
	    const span = web_1.active(ctx.req);
	    if (span) {
	      span.setTag('component', 'koa');
	    }

	    return next()
	  }

	  return function wrapUse (use) {
	    return function useWithTrace () {
	      if (!this._datadog_trace_patched) {
	        this._datadog_trace_patched = true;
	        use.call(this, koaTrace);
	      }

	      const result = use.apply(this, arguments);
	      const fn = this.middleware.pop();

	      this.middleware.push(wrapMiddleware$1(fn));

	      return result
	    }
	  }
	}

	function createWrapRegister (tracer, config) {
	  return function wrapRegister (register) {
	    return function registerWithTrace (path, methods, middleware, opts) {
	      const route = register.apply(this, arguments);

	      if (Array.isArray(path)) return route

	      route.stack = route.stack.map(middleware => {
	        return function (ctx, next) {
	          if (!web_1.active(ctx.req)) return middleware.apply(this, arguments)

	          web_1.exitRoute(ctx.req);
	          web_1.enterRoute(ctx.req, route.path);

	          return wrapMiddleware$1(middleware).apply(this, arguments)
	        }
	      });

	      return route
	    }
	  }
	}

	function wrapMiddleware$1 (fn) {
	  return function (ctx, next) {
	    return web_1.wrapMiddleware(ctx.req, fn, 'koa.middleware', () => {
	      const span = web_1.active(ctx.req);
	      if (span) {
	        span.setTag('component', 'koa');
	      }
	      try {
	        const result = fn.apply(this, arguments);

	        if (result && typeof result.then === 'function') {
	          result.then(
	            () => web_1.finish(ctx.req),
	            err => web_1.finish(ctx.req, err)
	          );
	        } else {
	          web_1.finish(ctx.req);
	        }

	        return result
	      } catch (e) {
	        web_1.finish(ctx.req, e);
	        throw e
	      }
	    })
	  }
	}

	var koa = [
	  {
	    name: 'koa',
	    versions: ['>=2'],
	    patch (Koa, tracer, config) {
	      this.wrap(Koa.prototype, 'use', createWrapUse(tracer, config));
	    },
	    unpatch (Koa) {
	      this.unwrap(Koa.prototype, 'use');
	    }
	  },
	  {
	    name: 'koa-router',
	    versions: ['>=7 <8'],
	    patch (Router, tracer, config) {
	      this.wrap(Router.prototype, 'register', createWrapRegister());
	    },
	    unpatch (Router) {
	      this.unwrap(Router.prototype, 'register');
	    }
	  }
	];

	function createWrapCommand (tracer, config) {
	  return function wrapCommand (command) {
	    return function commandWithTrace (queryCompiler, server) {
	      const scope = tracer.scope();
	      const childOf = scope.active();
	      const span = tracer.startSpan('memcached.command', {
	        childOf,
	        tags: {
	          'span.kind': 'client',
	          'span.type': 'memcached',
	          'service.name': config.service || `${tracer._service}-memcached`
	        }
	      });

	      analytics_sampler.sample(span, config.analytics);

	      queryCompiler = wrapQueryCompiler(queryCompiler, this, server, scope, span);

	      return scope.bind(command, span).call(this, queryCompiler, server)
	    }
	  }
	}

	function wrapQueryCompiler (original, client, server, scope, span) {
	  const parent = scope.active();

	  return function () {
	    const query = original.apply(this, arguments);
	    const callback = query.callback;

	    span.addTags({
	      'resource.name': query.type,
	      'db.statement': query.command,
	      'db.type': 'memcached'
	    });

	    addHost$1(span, client, server, query);

	    query.callback = scope.bind(function (err) {
	      addError$1(span, err);

	      span.finish();

	      return callback.apply(this, arguments)
	    }, parent);

	    return query
	  }
	}

	function addHost$1 (span, client, server, query) {
	  const address = getAddress(client, server, query);

	  if (address) {
	    tx_1.setHost(span, address[0], address[1]);
	  }
	}

	function addError$1 (span, error) {
	  if (error) {
	    span.addTags({
	      'sfx.error.kind': error.name,
	      'sfx.error.message': error.message,
	      'sfx.error.stack': error.stack
	    });
	  }

	  return error
	}

	function getAddress (client, server, query) {
	  if (!server) {
	    if (client.servers.length === 1) {
	      server = client.servers[0];
	    } else {
	      let redundancy = client.redundancy && client.redundancy < client.servers.length;
	      const queryRedundancy = query.redundancyEnabled;

	      if (redundancy && queryRedundancy) {
	        redundancy = client.HashRing.range(query.key, (client.redundancy + 1), true);
	        server = redundancy.shift();
	      } else {
	        server = client.HashRing.get(query.key);
	      }
	    }
	  }

	  return server && server.split(':')
	}

	var memcached = {
	  name: 'memcached',
	  versions: ['>=2.2'],
	  patch (Memcached, tracer, config) {
	    this.wrap(Memcached.prototype, 'command', createWrapCommand(tracer, config));
	  },
	  unpatch (Memcached) {
	    this.unwrap(Memcached.prototype, 'command');
	  }
	};

	const Buffer$1 = safeBuffer.Buffer;



	function createWrapOperation (tracer, config, operationName) {
	  return function wrapOperation (operation) {
	    return function operationWithTrace (ns, ops, options, callback) {
	      const scope = tracer.scope();
	      const childOf = scope.active();
	      const span = tracer.startSpan('mongodb.query', { childOf });

	      addTags(span, tracer, config, ns, ops, this, operationName);

	      analytics_sampler.sample(span, config.analytics);

	      if (typeof options === 'function') {
	        return scope
	          .bind(operation, span)
	          .call(this, ns, ops, wrapCallback$2(tracer, span, options))
	      } else {
	        return scope
	          .bind(operation, span)
	          .call(this, ns, ops, options, wrapCallback$2(tracer, span, callback))
	      }
	    }
	  }
	}

	function createWrapNext (tracer, config) {
	  return function wrapNext (next) {
	    return function nextWithTrace (cb) {
	      const scope = tracer.scope();
	      const childOf = scope.active();
	      const span = tracer.startSpan('mongodb.query', { childOf });

	      addTags(span, tracer, config, this.ns, this.cmd, this.topology);

	      if (this.cursorState) {
	        span.addTags({
	          'mongodb.cursor.index': this.cursorState.cursorIndex
	        });
	      }

	      scope.bind(next, span).call(this, wrapCallback$2(tracer, span, cb, this));
	    }
	  }
	}

	function addTags (span, tracer, config, ns, cmd, topology, operationName) {
	  if (!operationName) {
	    operationName = Object.keys(cmd)[0];
	  }
	  span.setOperationName(`mongo.${operationName}`);

	  const query = getQuery(cmd);
	  const resource = getResource(ns, cmd, query, operationName);
	  span.addTags({
	    'service.name': config.service || `${tracer._service}-mongodb`,
	    'span.type': 'mongodb',
	    'db.name': ns,
	    'db.statement': resource,
	    'db.type': 'mongo',
	    'db.instance': ns.split('.')[0]
	  });

	  addHost(span, topology);
	}

	function addHost (span, topology) {
	  const options = topology && topology.s && topology.s.options;

	  if (options && options.host && options.port) {
	    tx_1.setHost(span, topology.s.options.host, topology.s.options.port);
	  }
	}

	function wrapCallback$2 (tracer, span, done, cursor) {
	  return tracer.scope().bind((err, res) => {
	    if (err) {
	      span.addTags({
	        'sfx.error.kind': err.name,
	        'sfx.error.message': err.message,
	        'sfx.error.stack': err.stack
	      });
	    }

	    if (cursor) {
	      addHost(span, cursor.server);
	    }

	    span.finish();

	    if (done) {
	      done(err, res);
	    }
	  })
	}

	function getQuery (cmd) {
	  return cmd.query && JSON.stringify(sanitize$1(cmd.query))
	}

	function getResource (ns, cmd, query, operationName) {
	  const parts = [operationName, ns];

	  if (query) {
	    parts.push(query);
	  }

	  return parts.join(' ')
	}

	function sanitize$1 (input) {
	  const output = {};

	  if (!isObject(input) || Buffer$1.isBuffer(input) || isBSON(input)) return '?'

	  for (const key in input) {
	    if (typeof input[key] === 'function') continue

	    output[key] = sanitize$1(input[key]);
	  }

	  return output
	}

	function isObject (val) {
	  return typeof val === 'object' && val !== null && !(val instanceof Array)
	}

	function isBSON (val) {
	  return val && val._bsontype
	}

	var mongodbCore = [
	  {
	    name: 'mongodb-core',
	    versions: ['>=2'],
	    patch (mongo, tracer, config) {
	      this.wrap(mongo.Server.prototype, 'command', createWrapOperation(tracer, config));
	      this.wrap(mongo.Server.prototype, 'insert', createWrapOperation(tracer, config, 'insert'));
	      this.wrap(mongo.Server.prototype, 'update', createWrapOperation(tracer, config, 'update'));
	      this.wrap(mongo.Server.prototype, 'remove', createWrapOperation(tracer, config, 'remove'));
	      this.wrap(mongo.Cursor.prototype, 'next', createWrapNext(tracer, config));
	    },
	    unpatch (mongo) {
	      this.unwrap(mongo.Server.prototype, 'command');
	      this.unwrap(mongo.Server.prototype, 'insert');
	      this.unwrap(mongo.Server.prototype, 'update');
	      this.unwrap(mongo.Server.prototype, 'remove');
	      this.unwrap(mongo.Cursor.prototype, 'next');
	    }
	  }
	];

	const Tags$4 = lib.Tags;



	function createWrapQuery$2 (tracer, config) {
	  return function wrapQuery (query) {
	    return function queryWithTrace (sql, values, cb) {
	      const scope = tracer.scope();
	      const childOf = scope.active();
	      const span = tracer.startSpan('mysql.query', {
	        childOf,
	        tags: {
	          [Tags$4.SPAN_KIND]: Tags$4.SPAN_KIND_RPC_CLIENT,
	          'service.name': config.service || `${tracer._service}-mysql`,
	          'span.type': 'mysql',
	          'db.type': 'mysql',
	          'db.user': this.config.user
	        }
	      });

	      tx_1.setHost(span, this.config.host, this.config.port);
	      span.setTag('db.instance', this.config.database || 'sql');

	      analytics_sampler.sample(span, config.analytics);

	      const sequence = scope.bind(query, span).call(this, sql, values, cb);

	      span.setTag('resource.name', sequence.sql.split(' ')[0]);
	      span.setTag('db.statement', sequence.sql);

	      if (sequence._callback) {
	        sequence._callback = wrapCallback$1(tracer, span, childOf, sequence._callback);
	      } else {
	        sequence.on('end', () => {
	          span.finish();
	        });
	      }

	      return sequence
	    }
	  }
	}

	function createWrapGetConnection (tracer, config) {
	  return function wrapGetConnection (getConnection) {
	    return function getConnectionWithTrace (cb) {
	      const scope = tracer.scope();
	      return scope.bind(getConnection).call(this, scope.bind(cb))
	    }
	  }
	}

	function wrapCallback$1 (tracer, span, parent, done) {
	  return tracer.scope().bind((err, res) => {
	    if (err) {
	      span.addTags({
	        'sfx.error.kind': err.name,
	        'sfx.error.message': err.message,
	        'sfx.error.stack': err.stack
	      });
	    }

	    span.finish();

	    done(err, res);
	  }, parent)
	}

	function patchConnection$1 (Connection, tracer, config) {
	  this.wrap(Connection.prototype, 'query', createWrapQuery$2(tracer, config));
	}

	function unpatchConnection$1 (Connection) {
	  this.unwrap(Connection.prototype, 'query');
	}

	function patchPool (Pool, tracer, config) {
	  this.wrap(Pool.prototype, 'getConnection', createWrapGetConnection(tracer));
	}

	function unpatchPool (Pool) {
	  this.unwrap(Pool.prototype, 'getConnection');
	}

	var mysql = [
	  {
	    name: 'mysql',
	    file: 'lib/Connection.js',
	    versions: ['>=2'],
	    patch: patchConnection$1,
	    unpatch: unpatchConnection$1
	  },
	  {
	    name: 'mysql',
	    file: 'lib/Pool.js',
	    versions: ['>=2'],
	    patch: patchPool,
	    unpatch: unpatchPool
	  }
	];

	const Tags$3 = lib.Tags;



	function createWrapQuery$1 (tracer, config) {
	  return function wrapQuery (query) {
	    return function queryWithTrace (sql, values, cb) {
	      const scope = tracer.scope();
	      const childOf = scope.active();
	      const span = tracer.startSpan('mysql.query', {
	        childOf,
	        tags: {
	          [Tags$3.SPAN_KIND]: Tags$3.SPAN_KIND_RPC_CLIENT,
	          'service.name': config.service || `${tracer._service}-mysql`,
	          'component': 'mysql2',
	          'db.type': 'mysql',
	          'db.user': this.config.user
	        }
	      });

	      tx_1.setHost(span, this.config.host, this.config.port);
	      span.setTag('db.instance', this.config.database || 'sql');

	      analytics_sampler.sample(span, config.analytics);

	      const sequence = scope.bind(query, span).call(this, sql, values, cb);

	      span.setTag('resource.name', sequence.sql.split(' ')[0]);
	      span.setTag('db.statement', sequence.sql);

	      if (sequence.onResult) {
	        sequence.onResult = wrapCallback(tracer, span, childOf, sequence.onResult);
	      } else {
	        sequence.on('end', () => {
	          span.finish();
	        });
	      }

	      return sequence
	    }
	  }
	}

	function wrapCallback (tracer, span, parent, done) {
	  return tracer.scope().bind((err, res) => {
	    if (err) {
	      span.addTags({
	        'sfx.error.kind': err.name,
	        'sfx.error.message': err.message,
	        'sfx.error.stack': err.stack
	      });
	    }

	    span.finish();

	    done(err, res);
	  }, parent)
	}

	function patchConnection (Connection, tracer, config) {
	  this.wrap(Connection.prototype, 'query', createWrapQuery$1(tracer, config));
	}

	function unpatchConnection (Connection) {
	  this.unwrap(Connection.prototype, 'query');
	}

	var mysql2 = [
	  {
	    name: 'mysql2',
	    file: 'lib/connection.js',
	    versions: ['>=1'],
	    patch: patchConnection,
	    unpatch: unpatchConnection
	  }
	];

	function createWrapNestFactoryCreate (tracer, config) {
	  return function wrapCreate (create) {
	    return function createWithTrace (nestModule, serverOrOptions, options) {
	      const scope = tracer.scope();
	      const childOf = scope.active();
	      const span = tracer.startSpan('nest.factory.create', {
	        childOf,
	        tags: {
	          'component': 'nest',
	          'nest.module': nestModule.name
	        }
	      });

	      return scope.activate(span, () => {
	        try {
	          return create.apply(this, arguments)
	        } catch (e) {
	          throw addError(span, e)
	        } finally {
	          span.finish();
	        }
	      })
	    }
	  }
	}

	function createWrapCreateHandler (tracer, config) {
	  return function wrapCreateHandler (create) {
	    return function createHandlerWithTrace (instance, callback) {
	      arguments[1] = createWrapHandler$1(tracer, callback);
	      const handler = create.apply(this, arguments);
	      return function (req, res, next) {
	        let opName = 'nest.request';
	        if (instance.constructor && instance.constructor.name) {
	          opName = instance.constructor.name;
	        }
	        const scope = tracer.scope();
	        const childOf = scope.active();
	        const span = tracer.startSpan(opName, {
	          childOf,
	          tags: {
	            'component': 'nest',
	            'http.method': req.method,
	            'http.url': req.originalUrl,
	            'nest.route.path': req.route.path
	          }
	        });

	        if (callback.name) {
	          opName = `${opName}(${callback.name})`;
	          span.setOperationName(opName);
	          span.setTag('nest.callback', callback.name);
	        }

	        return scope.activate(span, () => {
	          try {
	            return handler.apply(this, arguments)
	          } catch (e) {
	            throw addError(span, e)
	          } finally {
	            span.finish();
	          }
	        })
	      }
	    }
	  }
	}

	function createWrapHandler$1 (tracer, handler) {
	  let name = 'nestHandler';
	  if (handler.name) {
	    name = handler.name;
	  }
	  const wrappedHandler = function () {
	    const scope = tracer.scope();
	    const childOf = scope.active();
	    const tags = { 'component': 'nest' };
	    if (name) {
	      tags['nest.callback'] = name;
	    }
	    const span = tracer.startSpan(name, { childOf, tags });
	    return scope.activate(span, () => {
	      try {
	        return handler.apply(this, arguments)
	      } catch (e) {
	        throw addError(span, e)
	      } finally {
	        span.finish();
	      }
	    })
	  };

	  if (name) {
	    Object.defineProperty(wrappedHandler, 'name', { value: name });
	  }
	  return wrappedHandler
	}

	function createWrapCreateGuardsFn (tracer, config) {
	  return function wrapCreateGuardsFn (createGuardsFn) {
	    return function createGuardsFn (guards, instance, callback, contextType) {
	      function wrappedCanActivateFn (canActivateFn) {
	        return (args) => {
	          if (typeof canActivateFn !== 'function') {
	            return canActivateFn
	          }
	          createGuardsTrace(tracer, args, guards, instance, callback, canActivateFn);
	        }
	      }
	      return wrappedCanActivateFn(createGuardsFn)
	    }
	  }
	}

	function createWrapTryActivate (tracer, config) {
	  return function wrapTryActivate (tryActivate) {
	    return function tryActivateWithTrace (guards, args, instance, callback) {
	      createGuardsTrace(tracer, args, guards, instance, callback, tryActivate);
	    }
	  }
	}

	function createWrapIntercept (tracer, config) {
	  return function wrapIntercept (intercept) {
	    return function interceptWithTrace (interceptors, args, instance, callback, next, type) {
	      const opName = 'nest.interceptor.intercept';
	      const scope = tracer.scope();
	      const childOf = scope.active();
	      const span = tracer.startSpan(opName, {
	        childOf,
	        tags: {
	          'component': 'nest'
	        }
	      });
	      if (callback.name) {
	        span.setTag('nest.callback', callback.name);
	      }

	      const request = args.length > 1 ? args[0] : args;
	      span.setTag('http.method', request.method);
	      span.setTag('http.url', request.originalUrl);
	      span.setTag('nest.route.path', request.route.path);

	      if (interceptors.length > 0) {
	        const interceptorNames = [];
	        interceptors.forEach(interceptor => {
	          interceptorNames.push(interceptor.constructor.name);
	        });
	        span.setTag('nest.interceptors', interceptorNames);
	      }

	      if (instance.constructor && instance.constructor.name) {
	        span.setTag('nest.controller.instance', instance.constructor.name);
	      }

	      return scope.activate(span, () => {
	        try {
	          return intercept.apply(this, arguments)
	        } catch (e) {
	          throw addError(span, e)
	        } finally {
	          span.finish();
	        }
	      })
	    }
	  }
	}

	function createWrapCreatePipesFn (tracer, config) {
	  return function wrapCreatePipesFn (createPipesFn) {
	    return function createPipesFnWithTrace (pipes, paramsOptions) {
	      function wrappedPipesFn (pipesFn) {
	        return (args, req, res, next) => {
	          if (typeof pipesFn !== 'function') {
	            return pipesFn
	          }

	          let opName = 'nest.pipe.pipesFn';
	          if (pipes.length > 0) {
	            if (pipes[0].constructor && pipes[0].constructor.name) {
	              opName = `${pipes[0].constructor.name}.pipeFn`;
	            }
	          }
	          const scope = tracer.scope();
	          const childOf = scope.active();
	          const span = tracer.startSpan(opName, {
	            childOf,
	            tags: {
	              'component': 'nest'
	            }
	          });
	          if (paramsOptions && paramsOptions[0]) {
	            const pipes = [];
	            const pipeOptions = paramsOptions[0].pipes;
	            pipeOptions.forEach((param) => {
	              if (param.constructor && param.constructor.name) {
	                pipes.push(param.constructor.name);
	              }
	            });
	            if (pipes.length > 0) {
	              span.setTag('nest.pipes', pipes);
	            }
	          }

	          return scope.activate(span, () => {
	            try {
	              return pipesFn.apply(this, [args, req, res, next])
	            } catch (e) {
	              throw addError(span, e)
	            } finally {
	              span.finish();
	            }
	          })
	        }
	      }
	      return wrappedPipesFn(createPipesFn.apply(this, arguments))
	    }
	  }
	}

	function createGuardsTrace (tracer, args, guards, instance, callback, fn) {
	  let opName = 'nest.guard.canActivate';
	  const request = args.length > 1 ? args[0] : args;
	  const scope = tracer.scope();
	  const childOf = scope.active();
	  const span = tracer.startSpan(opName, {
	    childOf,
	    tags: {
	      'component': 'nest',
	      'http.method': request.method,
	      'http.url': request.originalUrl,
	      'nest.route.path': request.route.path
	    }
	  });

	  const guardNames = [];
	  guards.forEach(guardName => {
	    guardNames.push(guardName.constructor.name);
	  });
	  if (guardNames.length > 0) {
	    if (guardNames[0].constructor && guardNames[0].constructor.name) {
	      opName = `${guardNames[0]}.tryActivate`;
	    }
	    span.setTag('nest.guards', guardNames);
	  }
	  if (instance.constructor && instance.constructor.name) {
	    opName = `${opName}.${instance.constructor.name}`;
	    span.setTag('nest.controller.instance', instance.constructor.name);
	  }
	  if (callback.name) {
	    opName = `${opName}(${callback.name})`;
	    span.setTag('nest.callback', callback.name);
	  }

	  span.setOperationName(opName);

	  return scope.activate(span, () => {
	    try {
	      return fn.apply(this, args)
	    } catch (e) {
	      throw addError(span, e)
	    } finally {
	      span.finish();
	    }
	  })
	}

	function addError (span, error) {
	  span.addTags({
	    'sfx.error.kind': error.name,
	    'sfx.error.message': error.message,
	    'sfx.error.stack': error.stack
	  });
	  return error
	}

	function patchNestFactory (versions) {
	  return {
	    name: '@nestjs/core',
	    versions: versions,
	    file: 'nest-factory.js',
	    patch (NestFactoryStatic, tracer, config) {
	      this.wrap(NestFactoryStatic.NestFactoryStatic.prototype,
	        'create',
	        createWrapNestFactoryCreate(tracer));
	    },
	    unpatch (NestFactoryStatic) {
	      this.unwrap(NestFactoryStatic.NestFactoryStatic.prototype, 'create');
	    }
	  }
	}

	function patchRouterExecutionContext (versions) {
	  return {
	    versions,
	    name: '@nestjs/core',
	    file: 'router/router-execution-context.js',
	    patch (RouterExecutionContext, tracer, config) {
	      this.wrap(RouterExecutionContext.RouterExecutionContext.prototype,
	        'create',
	        createWrapCreateHandler(tracer));
	    },
	    unpatch (RouterExecutionContext) {
	      this.unwrap(RouterExecutionContext.RouterExecutionContext.prototype, 'create');
	    }
	  }
	}

	function patchGuardsConsumer (versions) {
	  return {
	    versions,
	    name: '@nestjs/core',
	    file: 'guards/guards-consumer.js',
	    patch (GuardsConsumer, tracer, config) {
	      this.wrap(GuardsConsumer.GuardsConsumer.prototype,
	        'tryActivate',
	        createWrapTryActivate(tracer));
	    },
	    unpatch (GuardsConsumer) {
	      this.unwrap(GuardsConsumer.GuardsConsumer.prototype, 'tryActivate');
	    }
	  }
	}

	function patchRouterExecutionContextGuard (versions) {
	  return {
	    versions,
	    name: '@nestjs/core',
	    file: 'router/router-execution-context.js',
	    patch (RouterExecutionContext, tracer, config) {
	      this.wrap(RouterExecutionContext.RouterExecutionContext.prototype,
	        'createGuardsFn',
	        createWrapCreateGuardsFn(tracer));
	    },
	    unpatch (RouterExecutionContext) {
	      this.unwrap(RouterExecutionContext.RouterExecutionContext.prototype, 'createGuardsFn');
	    }
	  }
	}

	function patchInterceptors (versions) {
	  return {
	    versions,
	    name: '@nestjs/core',
	    file: 'interceptors/interceptors-consumer.js',
	    patch (InterceptorsConsumer, tracer, config) {
	      this.wrap(InterceptorsConsumer.InterceptorsConsumer.prototype,
	        'intercept',
	        createWrapIntercept(tracer));
	    },
	    unpatch (InterceptorsConsumer) {
	      this.unwrap(InterceptorsConsumer.InterceptorsConsumer.prototype, 'intercept');
	    }
	  }
	}

	function patchRouterExecutionContextPipes (versions) {
	  return {
	    versions,
	    name: '@nestjs/core',
	    file: 'router/router-execution-context.js',
	    patch (RouterExecutionContext, tracer, config) {
	      this.wrap(RouterExecutionContext.RouterExecutionContext.prototype,
	        'createPipesFn',
	        createWrapCreatePipesFn(tracer));
	    },
	    unpatch (RouterExecutionContext) {
	      this.unwrap(RouterExecutionContext.RouterExecutionContext.prototype, 'createPipesFn');
	    }
	  }
	}

	var nest = [
	  patchGuardsConsumer(['>=4.0.0 <=4.5.1']),

	  patchNestFactory(['>=4.0.0 <5.0.0']),
	  patchRouterExecutionContext(['>=4.0.0 <5.0.0']),
	  patchInterceptors(['>=4.0.0 <5.0.0']),
	  patchRouterExecutionContextGuard(['>=4.5.2 <5.0.0']),
	  patchRouterExecutionContextPipes(['>=4.5.2 <5.0.0']),

	  patchNestFactory(['>=5.0.0 <6.0.0']),
	  patchRouterExecutionContext(['>=5.0.0 <6.0.0']),
	  patchInterceptors(['>=5.0.0 <6.0.0']),
	  patchRouterExecutionContextGuard(['>=5.0.0 <6.0.0']),
	  patchRouterExecutionContextPipes(['>=5.0.0 <6.0.0']),

	  patchNestFactory(['>=6.0.0 <7.0.0']),
	  patchRouterExecutionContext(['>=6.0.0 <7.0.0']),
	  patchInterceptors(['>=6.0.0 <7.0.0']),
	  patchRouterExecutionContextGuard(['>=6.0.0 <7.0.0']),
	  patchRouterExecutionContextPipes(['>=6.0.0 <7.0.0'])
	];

	const Reference = lib.Reference;
	const REFERENCE_CHILD_OF = lib.REFERENCE_CHILD_OF;
	const REFERENCE_NOOP = constants$3.REFERENCE_NOOP;

	function createWrapConnect (tracer, config) {
	  return function wrapConnect (connect) {
	    return function connectWithTrace () {
	      const scope = tracer.scope();
	      const options = getOptions(arguments);

	      if (!options) return connect.apply(this, arguments)

	      const span = options.path
	        ? wrapIpc(tracer, config, this, options)
	        : wrapTcp(tracer, config, this, options);

	      analytics_sampler.sample(span, config.analytics);

	      return scope.bind(connect, span).apply(this, arguments)
	    }
	  }
	}

	function wrapTcp (tracer, config, socket, options) {
	  const host = options.host || 'localhost';
	  const port = options.port || 0;
	  const family = options.family || 4;

	  const span = startSpan$1(tracer, config, 'tcp', {
	    'resource.name': [host, port].filter(val => val).join(':'),
	    'tcp.remote.host': host,
	    'tcp.remote.port': port,
	    'tcp.family': `IPv${family}`
	  });

	  tx_1.setHost(span, host, port);

	  setupListeners(socket, span, 'tcp');

	  return span
	}

	function wrapIpc (tracer, config, socket, options) {
	  const span = startSpan$1(tracer, config, 'ipc', {
	    'resource.name': options.path,
	    'ipc.path': options.path
	  });

	  setupListeners(socket, span, 'ipc');

	  return span
	}

	function startSpan$1 (tracer, config, protocol, tags) {
	  const childOf = tracer.scope().active();
	  const type = (childOf !== null) ? REFERENCE_CHILD_OF : REFERENCE_NOOP;
	  const references = [ new Reference(type, childOf) ];

	  let operationName = `${protocol}.connect`;
	  const resourceName = tags['resource.name'];
	  if (resourceName) {
	    delete tags['resource.name'];
	    operationName = `${operationName}: ${resourceName}`;
	  }

	  const span = tracer.startSpan(operationName, {
	    references,
	    tags: Object.assign({
	      'span.kind': 'client',
	      'service.name': config.service || `${tracer._service}-${protocol}`
	    }, tags)
	  });

	  return span
	}

	function getOptions (args) {
	  if (!args[0]) return

	  switch (typeof args[0]) {
	    case 'object':
	      if (Array.isArray(args[0])) return getOptions(args[0])
	      return args[0]
	    case 'string':
	      if (isNaN(parseFloat(args[0]))) {
	        return {
	          path: args[0]
	        }
	      }
	    case 'number': // eslint-disable-line no-fallthrough
	      return {
	        port: args[0],
	        host: typeof args[1] === 'string' ? args[1] : 'localhost'
	      }
	  }
	}

	function setupListeners (socket, span, protocol) {
	  const events = ['connect', 'error', 'close', 'timeout'];

	  const wrapListener = tx_1.wrap(span);

	  const localListener = () => {
	    span.addTags({
	      'tcp.local.address': socket.localAddress,
	      'tcp.local.port': socket.localPort
	    });
	  };

	  const cleanupListener = () => {
	    socket.removeListener('connect', localListener);

	    events.forEach(event => {
	      socket.removeListener(event, wrapListener);
	      socket.removeListener(event, cleanupListener);
	    });
	  };

	  if (protocol === 'tcp') {
	    socket.once('connect', localListener);
	  }

	  events.forEach(event => {
	    socket.once(event, wrapListener);
	    socket.once(event, cleanupListener);
	  });
	}

	var net = {
	  name: 'net',
	  patch (net, tracer, config) {
	     // net will otherwise get an unpatched version for DNS lookups

	    this.wrap(net.Socket.prototype, 'connect', createWrapConnect(tracer, config));
	  },
	  unpatch (net) {
	    this.unwrap(net.Socket.prototype, 'connect');
	  }
	};

	const Tags$2 = lib.Tags;



	const OPERATION_NAME = 'pg.query';

	function createWrapQuery (tracer, config) {
	  return function wrapQuery (query) {
	    return function queryWithTrace () {
	      const scope = tracer.scope();
	      const childOf = scope.active();
	      const span = tracer.startSpan(OPERATION_NAME, {
	        childOf,
	        tags: {
	          [Tags$2.SPAN_KIND]: Tags$2.SPAN_KIND_RPC_CLIENT,
	          'service.name': config.service || `${tracer._service}-postgres`,
	          'component': 'pg',
	          'db.type': 'postgres'
	        }
	      });

	      analytics_sampler.sample(span, config.analytics);

	      const retval = scope.bind(query, span).apply(this, arguments);
	      const queryQueue = this.queryQueue || this._queryQueue;
	      const activeQuery = this.activeQuery || this._activeQuery;
	      const pgQuery = queryQueue[queryQueue.length - 1] || activeQuery;

	      if (!pgQuery) {
	        return retval
	      }

	      const originalCallback = pgQuery.callback;
	      const statement = pgQuery.text;
	      const params = this.connectionParameters;

	      span.setTag('resource.name', statement.split(' ')[0]);
	      span.setTag('db.statement', statement);

	      if (params) {
	        span.addTags({
	          'db.instance': params.database,
	          'db.user': params.user
	        });
	        tx_1.setHost(span, params.host, params.port);
	      }

	      pgQuery.callback = scope.bind((err, res) => {
	        if (err) {
	          span.addTags({
	            'sfx.error.kind': err.name,
	            'sfx.error.message': err.message,
	            'sfx.error.stack': err.stack
	          });
	        }

	        span.finish();

	        if (originalCallback) {
	          originalCallback(err, res);
	        }
	      }, childOf);

	      return retval
	    }
	  }
	}

	var pg = [
	  {
	    name: 'pg',
	    versions: ['>=4'],
	    patch (pg, tracer, config) {
	      this.wrap(pg.Client.prototype, 'query', createWrapQuery(tracer, config));
	    },
	    unpatch (pg) {
	      this.unwrap(pg.Client.prototype, 'query');
	    }
	  },
	  {
	    name: 'pg',
	    versions: ['>=4'],
	    file: 'lib/native/index.js',
	    patch (Client, tracer, config) {
	      this.wrap(Client.prototype, 'query', createWrapQuery(tracer, config));
	    },
	    unpatch (Client) {
	      this.unwrap(Client.prototype, 'query');
	    }
	  }
	];

	function createWrapWrite$1 (tracer, config) {
	  return function wrapWrite (write) {
	    return function writeWithTrace (obj, msg, num) {
	      arguments[0] = log_1.correlate(tracer, obj);

	      return write.apply(this, arguments)
	    }
	  }
	}

	function createWrapGenLog (tracer, config) {
	  return function wrapGenLog (genLog) {
	    return function genLogWithTrace (z) {
	      const log = genLog(z);

	      return function logWithTrace (a, b, c, d, e, f, g, h, i, j, k) {
	        const args = [a, b, c, d, e, f, g, h, i, j, k];

	        if (!a) {
	          args[0] = {};
	        } else if (typeof a !== 'object') {
	          args.unshift({});
	        }

	        args[0] = log_1.correlate(tracer, args[0]);

	        return log.apply(this, args)
	      }
	    }
	  }
	}

	var pino = [
	  {
	    name: 'pino',
	    versions: ['>=5'],
	    patch (pino, tracer, config) {
	      if (!tracer._logInjection) return
	      this.wrap(Object.getPrototypeOf(pino()), pino.symbols.writeSym, createWrapWrite$1(tracer));
	    },
	    unpatch (pino) {
	      this.unwrap(Object.getPrototypeOf(pino()), pino.symbols.writeSym);
	    }
	  },
	  {
	    name: 'pino',
	    versions: ['4'],
	    file: 'lib/tools.js',
	    patch (tools, tracer, config) {
	      if (!tracer._logInjection) return
	      this.wrap(tools, 'genLog', createWrapGenLog(tracer));
	    },
	    unpatch (tools) {
	      this.unwrap(tools, 'genLog');
	    }
	  },
	  {
	    name: 'pino',
	    versions: ['2 - 3'],
	    patch (pino, tracer, config) {
	      if (!tracer._logInjection) return
	      this.wrap(Object.getPrototypeOf(pino()), 'asJson', createWrapWrite$1(tracer));
	    },
	    unpatch (pino) {
	      this.unwrap(Object.getPrototypeOf(pino()), 'asJson');
	    }
	  }
	];

	var q$2 = [
	  {
	    name: 'q',
	    versions: ['>=1'],
	    patch (Q, tracer, config) {
	      this.wrap(Q.makePromise.prototype, 'then', promise.createWrapThen(tracer, config));
	    },
	    unpatch (Q) {
	      this.unwrap(Q.makePromise.prototype, 'then');
	    }
	  }
	];

	function createWrapInternalSendCommand (tracer, config) {
	  return function wrapInternalSendCommand (internalSendCommand) {
	    return function internalSendCommandWithTrace (options) {
	      const scope = tracer.scope();
	      const span = startSpan(tracer, config, this, options.command, options.args);

	      options.callback = scope.bind(redis_1.wrap(span, options.callback));

	      return scope.bind(internalSendCommand, span).call(this, options)
	    }
	  }
	}

	function createWrapSendCommand (tracer, config) {
	  return function wrapSendCommand (sendCommand) {
	    return function sendCommandWithTrace (command, args, callback) {
	      const scope = tracer.scope();
	      const span = startSpan(tracer, config, this, command, args);

	      if (typeof callback === 'function') {
	        callback = scope.bind(redis_1.wrap(span, callback));
	      } else if (Array.isArray(args) && typeof args[args.length - 1] === 'function') {
	        args[args.length - 1] = scope.bind(redis_1.wrap(span, args[args.length - 1]));
	      } else {
	        callback = redis_1.wrap(span);
	      }

	      return scope.bind(sendCommand, span).call(this, command, args, callback)
	    }
	  }
	}

	function startSpan (tracer, config, client, command, args) {
	  const db = client.selected_db;
	  const connectionOptions = client.connection_options || client.connection_option || {};
	  const span = redis_1.instrument(tracer, config, db, command, args);

	  redis_1.setHost(span, connectionOptions.host, connectionOptions.port);

	  return span
	}

	var redis = [
	  {
	    name: 'redis',
	    versions: ['>=2.6'],
	    patch (redis, tracer, config) {
	      this.wrap(redis.RedisClient.prototype, 'internal_send_command', createWrapInternalSendCommand(tracer, config));
	    },
	    unpatch (redis) {
	      this.unwrap(redis.RedisClient.prototype, 'internal_send_command');
	    }
	  },
	  {
	    name: 'redis',
	    versions: ['>=0.12 <2.6'],
	    patch (redis, tracer, config) {
	      this.wrap(redis.RedisClient.prototype, 'send_command', createWrapSendCommand(tracer, config));
	    },
	    unpatch (redis) {
	      this.unwrap(redis.RedisClient.prototype, 'send_command');
	    }
	  }
	];

	const handlers = ['use', 'pre'];
	const methods = ['del', 'get', 'head', 'opts', 'post', 'put', 'patch'];

	function createWrapSetupRequest (tracer, config) {
	  config = web_1.normalizeConfig(config);

	  return function wrapSetupRequest (setupRequest) {
	    return function setupRequestWithTrace (req, res) {
	      return web_1.instrument(tracer, config, req, res, 'restify.request', () => {
	        const span = web_1.active(req);
	        if (span) {
	          span.setTag('component', 'restify');
	        }

	        web_1.beforeEnd(req, () => {
	          if (req.route) {
	            web_1.enterRoute(req, req.route.path);
	          }
	        });

	        return setupRequest.apply(this, arguments)
	      })
	    }
	  }
	}

	function createWrapMethod (tracer, config) {
	  return function wrapMethod (method) {
	    return function methodWithTrace (path) {
	      const middleware = wrapMiddleware(Array.prototype.slice.call(arguments, 1));

	      return method.apply(this, [path].concat(middleware))
	    }
	  }
	}

	function createWrapHandler (tracer, config) {
	  return function wrapMethod (method) {
	    return function methodWithTrace () {
	      return method.apply(this, wrapMiddleware(arguments))
	    }
	  }
	}

	function wrapMiddleware (middleware) {
	  return Array.prototype.map.call(middleware, wrapFn)
	}

	function wrapFn (fn) {
	  if (Array.isArray(fn)) return wrapMiddleware(fn)

	  return function (req, res, next) {
	    return web_1.reactivate(req, () => fn.apply(this, arguments))
	  }
	}

	var restify = [
	  {
	    name: 'restify',
	    versions: ['>=3'],
	    file: 'lib/server.js',
	    patch (Server, tracer, config) {
	      this.wrap(Server.prototype, '_setupRequest', createWrapSetupRequest(tracer, config));
	      this.wrap(Server.prototype, handlers, createWrapHandler());
	      this.wrap(Server.prototype, methods, createWrapMethod());
	    },
	    unpatch (Server) {
	      this.unwrap(Server.prototype, '_setupRequest');
	      this.unwrap(Server.prototype, handlers);
	      this.unwrap(Server.prototype, methods);
	    }
	  }
	];

	const Tags$1 = lib.Tags;

	function wrapActionFunction (tracer, actionFn, identity) {
	  function actionWithTracing (req, res, next) {
	    const scope = tracer.scope();
	    const childOf = scope.active();
	    const span = tracer.startSpan(
	      actionFn.identity || 'action ' + identity,
	      {
	        childOf,
	        tags: {
	          [Tags$1.SPAN_KIND]: Tags$1.SPAN_KIND_RPC_SERVER,
	          'component': 'Sails.js'
	        }
	      }
	    );

	    try {
	      return scope.bind(actionFn, span).apply(this, arguments)
	    } catch (e) {
	      if (span) {
	        span.addTags({
	          'error': true,
	          'sfx.error.kind': e.name,
	          'sfx.error.message': e.message,
	          'sfx.error.stack': e.stack
	        });
	      }

	      throw e
	    } finally {
	      span.finish();
	    }
	  }

	  // copy over any additional members before returning, as by this point it's
	  // potentially a processed machine
	  return Object.assign(actionWithTracing, actionFn)
	}

	function wrapAction (tracer, action, identity) {
	  if (typeof action.fn === 'function') {
	    // actions2
	    action.fn = wrapActionFunction(tracer, action.fn, action.identity || identity);
	  } else {
	    // classic action
	    action = wrapActionFunction(tracer, action, identity);
	  }

	  return action
	}

	function wrapActionMiddleware (tracer, middleware, actionsGlobKey) {
	  if (typeof middleware === 'function') {
	    return wrapActionFunction(tracer, middleware, actionsGlobKey)
	  }

	  return middleware.map((fn) => {
	    return wrapActionFunction(tracer, fn, actionsGlobKey)
	  })
	}

	function createWrapRegisterAction (tracer, config) {
	  return function wrapRegisterAction (registerAction) {
	    return function registerActionWithTracing (action, identity, force) {
	      registerAction.call(this, wrapAction(tracer, action, identity), identity, force);
	    }
	  }
	}

	function createWrapRegisterActionMiddleware (tracer, config) {
	  return function wrapRegisterActionMiddleware (registerActionMiddleware) {
	    return function registerActionMiddlewareWithTracing (middleware, actionsGlobKey) {
	      registerActionMiddleware.call(this, wrapActionMiddleware(tracer, middleware, actionsGlobKey), actionsGlobKey);
	    }
	  }
	}

	function patchSails (sails, tracer, config) {
	  this.wrap(sails.prototype, 'registerAction', createWrapRegisterAction(tracer));
	  this.wrap(sails.prototype, 'registerActionMiddleware', createWrapRegisterActionMiddleware(tracer));
	}

	function unpatchSails (sails) {
	  this.unwrap(sails.prototype, 'registerAction');
	  this.unwrap(sails.prototype, 'registerActionMiddleware');
	}

	var sails = [
	  {
	    name: 'sails',
	    file: 'lib/app/Sails.js',
	    versions: ['>=1'],
	    patch: patchSails,
	    unpatch: unpatchSails
	  }
	];

	const Tags = lib.Tags;

	const reservedEvents = [
	  'error',
	  'connect',
	  'disconnect',
	  'disconnecting',
	  'newListener',
	  'removeListener',
	  'ping',
	  'pong'
	];

	function createPatchEmit (tracer, config) {
	  return function wrapEmit (emit) {
	    return function emitWithTrace (eventName, callback) {
	      if ((config.omitReserved && reservedEvents.includes(eventName)) ||
	          (config.omitEvents && config.omitEvents.includes(eventName))) {
	        return emit.apply(this, arguments)
	      }

	      const scope = tracer.scope();
	      const childOf = scope.active();

	      const tags = {
	        [Tags.SPAN_KIND]: Tags.SPAN_KIND_RPC_CLIENT,
	        'component': 'socket.io',
	        'namespace': this.name,
	        'path': this.server._path,
	        'clients.count': this.server.eio.clientsCount,
	        'events.count': this._eventsCount
	      };

	      const span = tracer.startSpan('emit ' + eventName, { childOf, tags: tags });

	      try {
	        return scope.bind(emit, span).call(this, eventName, callback)
	      } catch (e) {
	        if (span) {
	          span.addTags({
	            'error': true,
	            'message': e.message,
	            'stack': e.stack,
	            'error.kind': e.name
	          });

	          throw e
	        }
	      } finally {
	        span.finish();
	      }
	    }
	  }
	}

	function patchSocket (socketio, tracer, config) {
	  this.wrap(socketio.prototype, 'emit', createPatchEmit(tracer, config));
	}

	function unpatchSocket (socketio) {
	  this.unwrap(socketio.prototype, 'emit');
	}

	var socket_io = [
	  {
	    name: 'socket.io',
	    versions: ['>=1.2.0'],
	    patch: patchSocket,
	    unpatch: unpatchSocket
	  },
	  {
	    name: 'socket.io',
	    file: 'lib/namespace.js',
	    versions: ['>=1.2.0'],
	    patch: patchSocket,
	    unpatch: unpatchSocket
	  }
	];

	var when = [
	  {
	    name: 'when',
	    file: 'lib/Promise.js',
	    versions: ['>=3'],
	    patch (Promise, tracer, config) {
	      this.wrap(Promise.prototype, 'then', promise.createWrapThen(tracer, config));
	    },
	    unpatch (Promise) {
	      this.unwrap(Promise.prototype, 'then');
	    }
	  }
	];

	function createWrapWrite (tracer, config) {
	  return function wrapWrite (write) {
	    return function writeWithTrace (chunk, encoding, callback) {
	      arguments[0] = log_1.correlate(tracer, chunk);

	      return write.apply(this, arguments)
	    }
	  }
	}

	function createWrapLog (tracer, config) {
	  return function wrapLog (log) {
	    return function logWithTrace (level, msg, meta, callback) {
	      const scope = tracer.scope().active();

	      if (!scope || arguments.length < 1) return log.apply(this, arguments)

	      for (let i = 0, l = arguments.length; i < l; i++) {
	        if (typeof arguments[i] !== 'object') continue

	        arguments[i] = log_1.correlate(tracer, arguments[i]);

	        return log.apply(this, arguments)
	      }

	      meta = log_1.correlate(tracer);
	      callback = arguments[arguments.length - 1];

	      const index = typeof callback === 'function'
	        ? arguments.length - 1
	        : arguments.length;

	      Array.prototype.splice.call(arguments, index, 0, meta);

	      return log.apply(this, arguments)
	    }
	  }
	}

	var winston = [
	  {
	    name: 'winston',
	    file: 'lib/winston/logger.js',
	    versions: ['>=3'],
	    patch (Logger, tracer, config) {
	      if (!tracer._logInjection) return
	      this.wrap(Logger.prototype, 'write', createWrapWrite(tracer));
	    },
	    unpatch (Logger) {
	      this.unwrap(Logger.prototype, 'write');
	    }
	  },
	  {
	    name: 'winston',
	    file: 'lib/winston/logger.js',
	    versions: ['1 - 2'],
	    patch (logger, tracer, config) {
	      if (!tracer._logInjection) return
	      this.wrap(logger.Logger.prototype, 'log', createWrapLog(tracer));
	    },
	    unpatch (logger) {
	      this.unwrap(logger.Logger.prototype, 'log');
	    }
	  }
	];

	var plugins = {
	  'adonis': adonis,
	  'amqp10': amqp10,
	  'amqplib': amqplib,
	  'bluebird': bluebird,
	  'bunyan': bunyan,
	  'cassandra-driver': cassandraDriver,
	  'dns': dns,
	  'elasticsearch': elasticsearch,
	  'express': express,
	  'generic-pool': genericPool,
	  'graphql': graphql,
	  'hapi': hapi,
	  'http': http,
	  'ioredis': ioredis,
	  'knex': knex,
	  'koa': koa,
	  'memcached': memcached,
	  'mongodb-core': mongodbCore,
	  'mysql': mysql,
	  'mysql2': mysql2,
	  'nest': nest,
	  'net': net,
	  'pg': pg,
	  'pino': pino,
	  'q': q$2,
	  'redis': redis,
	  'restify': restify,
	  'sails': sails,
	  'socket.io': socket_io,
	  'when': when,
	  'winston': winston
	};

	const pathSepExpr = new RegExp(`\\${path__default['default'].sep}`, 'g');

	shimmer_1({ logger: () => {} });

	class Instrumenter {
	  constructor (tracer) {
	    this._tracer = tracer;
	    this._enabled = false;
	    this._names = new Set();
	    this._plugins = new Map();
	    this._instrumented = new Map();
	  }

	  use (name, config) {
	    if (typeof config === 'boolean') {
	      config = { enabled: config };
	    }

	    config = config || {};

	    try {
	      this._set(commonjsRequire(`./plugins/${name}`), { name, config });
	    } catch (e) {
	      log_1$1.debug(`Could not find a plugin named "${name}".`);
	    }

	    this.reload();
	  }

	  patch (config) {
	    config = config || {};

	    if (config.plugins !== false) {
	      const plugins$1 = plugins;

	      Object.keys(plugins$1)
	        .forEach(name => {
	          this._plugins.has(plugins$1[name]) || this._set(plugins$1[name], { name, config: {} });
	        });
	    }

	    this.reload();
	  }

	  unpatch () {
	    this._instrumented.forEach((moduleExports, instrumentation) => {
	      this._unpatch(instrumentation);
	    });

	    this._plugins.clear();
	  }

	  reload () {
	    if (!this._enabled) return

	    const instrumentations = Array.from(this._plugins.keys())
	      .reduce((prev, current) => prev.concat(current), []);

	    const instrumentedModules = lodash_uniq(instrumentations
	      .map(instrumentation => instrumentation.name));

	    this._names = new Set(instrumentations
	      .map(instrumentation => filename(instrumentation)));

	    requireInTheMiddle(instrumentedModules, { internals: true }, this.hookModule.bind(this));
	  }

	  wrap (nodules, names, wrapper) {
	    nodules = [].concat(nodules);
	    names = [].concat(names);

	    nodules.forEach(nodule => {
	      names.forEach(name => {
	        if (typeof nodule[name] !== 'function') {
	          throw new Error(`Expected object ${nodule} to contain method ${name}.`)
	        }

	        Object.defineProperty(nodule[name], '_datadog_patched', {
	          value: true,
	          configurable: true
	        });
	      });
	    });

	    shimmer_1.massWrap.call(this, nodules, names, wrapper);
	  }

	  unwrap (nodules, names, wrapper) {
	    nodules = [].concat(nodules);
	    names = [].concat(names);

	    shimmer_1.massUnwrap.call(this, nodules, names, wrapper);

	    nodules.forEach(nodule => {
	      names.forEach(name => {
	        nodule[name] && delete nodule[name]._datadog_patched;
	      });
	    });
	  }

	  hookModule (moduleExports, moduleName, moduleBaseDir) {
	    moduleName = moduleName.replace(pathSepExpr, '/');

	    if (!this._names.has(moduleName)) {
	      return moduleExports
	    }

	    if (moduleBaseDir) {
	      moduleBaseDir = moduleBaseDir.replace(pathSepExpr, '/');
	    }

	    const moduleVersion = getVersion(moduleBaseDir);

	    Array.from(this._plugins.keys())
	      .filter(plugin => [].concat(plugin).some(instrumentation =>
	        filename(instrumentation) === moduleName && matchVersion(moduleVersion, instrumentation.versions)
	      ))
	      .forEach(plugin => this._validate(plugin, moduleName, moduleBaseDir, moduleVersion));

	    this._plugins
	      .forEach((meta, plugin) => {
	        try {
	          [].concat(plugin)
	            .filter(instrumentation => moduleName === filename(instrumentation))
	            .filter(instrumentation => matchVersion(moduleVersion, instrumentation.versions))
	            .forEach(instrumentation => {
	              const config = this._plugins.get(plugin).config;

	              if (config.enabled !== false) {
	                this._patch(instrumentation, moduleExports, config);
	              }
	            });
	        } catch (e) {
	          log_1$1.error(e);
	          this._fail(plugin);
	          log_1$1.debug(`Error while trying to patch ${meta.name}. The plugin has been disabled.`);
	        }
	      });

	    return moduleExports
	  }

	  enable () {
	    this._enabled = true;
	  }

	  _set (plugin, meta) {
	    const analytics = {};

	    if (typeof this._tracer._tracer._analytics === 'boolean') {
	      analytics.enabled = this._tracer._tracer._analytics;
	    }

	    meta.config.analytics = Object.assign(analytics, normalizeAnalyticsConfig(meta.config.analytics));

	    this._plugins.set(plugin, meta);
	    this._load(plugin, meta);
	  }

	  _validate (plugin, moduleName, moduleBaseDir, moduleVersion) {
	    const meta = this._plugins.get(plugin);
	    const instrumentations = [].concat(plugin);

	    for (let i = 0; i < instrumentations.length; i++) {
	      if (moduleName.indexOf(instrumentations[i].name) !== 0) continue
	      if (instrumentations[i].versions && !matchVersion(moduleVersion, instrumentations[i].versions)) continue
	      if (instrumentations[i].file && !exists(moduleBaseDir, instrumentations[i].file)) {
	        this._fail(plugin);
	        log_1$1.debug([
	          `Plugin "${meta.name}" requires "${instrumentations[i].file}" which was not found.`,
	          `The plugin was disabled.`
	        ].join(' '));
	        break
	      }
	    }
	  }

	  _fail (plugin) {
	    [].concat(plugin)
	      .forEach(instrumentation => {
	        this._unpatch(instrumentation);
	        this._instrumented.delete(instrumentation);
	      });

	    this._plugins.delete(plugin);
	  }

	  _patch (instrumentation, moduleExports, config) {
	    let instrumented = this._instrumented.get(instrumentation);

	    if (!instrumented) {
	      this._instrumented.set(instrumentation, instrumented = new Set());
	    }

	    if (!instrumented.has(moduleExports)) {
	      instrumented.add(moduleExports);
	      instrumentation.patch.call(this, moduleExports, this._tracer._tracer, config);
	    }
	  }

	  _unpatch (instrumentation) {
	    const instrumented = this._instrumented.get(instrumentation);

	    if (instrumented) {
	      instrumented.forEach(moduleExports => {
	        try {
	          instrumentation.unpatch.call(this, moduleExports);
	        } catch (e) {
	          log_1$1.error(e);
	        }
	      });
	    }
	  }

	  _load (plugin, meta) {
	    if (this._enabled) {
	      const instrumentations = [].concat(plugin);

	      try {
	        instrumentations
	          .forEach(instrumentation => {
	            getModules(instrumentation).forEach(nodule => {
	              this._patch(instrumentation, nodule, meta.config);
	            });
	          });
	      } catch (e) {
	        log_1$1.error(e);
	        this._fail(plugin);
	        log_1$1.debug(`Error while trying to patch ${meta.name}. The plugin has been disabled.`);
	      }
	    }
	  }
	}

	function normalizeAnalyticsConfig (config) {
	  switch (typeof config) {
	    case 'boolean':
	      return { enabled: config }
	    case 'object':
	      if (config) return config
	    default: // eslint-disable-line no-fallthrough
	      return {}
	  }
	}

	function getModules (instrumentation) {
	  const modules = [];
	  const ids = Object.keys(require.cache);

	  let pkg;

	  for (let i = 0, l = ids.length; i < l; i++) {
	    const id = ids[i].replace(pathSepExpr, '/');

	    if (!id.includes(`/node_modules/${instrumentation.name}/`)) continue

	    if (instrumentation.file) {
	      if (!id.endsWith(`/node_modules/${filename(instrumentation)}`)) continue

	      const basedir = getBasedir(ids[i]);

	      pkg = commonjsRequire(`${basedir}/package.json`);
	    } else {
	      const basedir = getBasedir(ids[i]);

	      pkg = commonjsRequire(`${basedir}/package.json`);

	      if (!id.endsWith(`/node_modules/${instrumentation.name}/${pkg.main}`)) continue
	    }

	    if (!matchVersion(pkg.version, instrumentation.versions)) continue

	    modules.push(require.cache[ids[i]].exports);
	  }

	  return modules
	}

	function getBasedir (id) {
	  return moduleDetailsFromPath(id).basedir.replace(pathSepExpr, '/')
	}

	function matchVersion (version, ranges) {
	  return !version || (ranges && ranges.some(range => semver$1.satisfies(version, range)))
	}

	function getVersion (moduleBaseDir) {
	  if (moduleBaseDir) {
	    const packageJSON = `${moduleBaseDir}/package.json`;
	    return commonjsRequire(packageJSON).version
	  }
	}

	function filename (plugin) {
	  return [plugin.name, plugin.file].filter(val => val).join('/')
	}

	function exists (basedir, file) {
	  try {
	    require.resolve(`${basedir}/${file}`);
	    return true
	  } catch (e) {
	    return false
	  }
	}

	var instrumenter = Instrumenter;

	const BaseTracer = lib.Tracer;







	const noop$1 = new tracer$2();

	class Tracer extends BaseTracer {
	  constructor () {
	    super();
	    this._tracer = noop$1;
	    this._instrumenter = new instrumenter(this);
	    this._deprecate = method => log_1$1.deprecate(`tracer.${method}`, [
	      `tracer.${method}() is deprecated.`,
	      'Please use tracer.startSpan() and tracer.scope() instead.',
	      'See: https://github.com/signalfx/signalfx-nodejs-tracing/blob/master/docs/API.md#manual-instrumentation.'

	    ].join(' '));
	  }

	  /**
	   * Initializes the tracer. This should be called before importing other libraries.
	   *
	   * @param {Object} [options] Configuration options.
	   * @param {boolean} [options.enabled=true] Whether to enable the tracer.
	   * @param {boolean} [options.debug=false] Enable debug logging in the tracer.
	   * @param {string} [options.service] The service name to be used for this program.
	   * @param {string} [options.url='http://localhost:9080/v1/trace'] The url to the trace agent that the tracer will
	   * submit to. Takes precedence over hostname and port, if set.
	   * @param {string} [options.hostname=localhost] The address of the trace agent that the tracer will submit to.
	   * @param {number|string} [options.port=9080] The port of the trace agent that the tracer will submit to.
	   * @param {boolean} [options.zipkin=true] Enable Zipkin v2 JSON writer instead of trace agent writer
	   * @param {string} [options.path=''] The endpoint for Zipkin collector that the tracer will submit to.
	   * Used with options.hostname/port.
	   * @param {string} [options.accessToken] The optional organization access token for SignalFx trace submissions.
	   * @param {Object} [options.headers={}] Any headers to provide to ZipkinV2Writer POST requests
	   * @param {number} [options.sampleRate=1] Percentage of spans to sample as a float between 0 and 1.
	   * @param {number} [options.flushInterval=2000] Interval in milliseconds at which the tracer
	   * will submit traces to the agent.
	   * @param {Object|boolean} [options.experimental={}] Experimental features can be enabled all at once
	   * using boolean `true` or individually using key/value pairs.
	   * @param {boolean} [options.plugins=true] Whether to load all built-in plugins.
	   * @returns {Tracer} Self
	   */
	  init (options) {
	    if (this._tracer === noop$1) {
	      try {
	        const service = platform$3.service();
	        const config$1 = new config(service, options);

	        if (config$1.enabled) {
	          platform$3.validate();
	          platform$3.configure(config$1);

	          if (config$1.runtimeMetrics) {
	            platform$3.metrics().start();
	          }

	          this._tracer = new tracer(config$1);
	          this._instrumenter.enable();
	          this._instrumenter.patch(config$1);
	        }
	      } catch (e) {
	        log_1$1.error(e);
	      }
	    }

	    return this
	  }

	  withNonReportingScope (callback) {
	    return this._tracer.withNonReportingScope(callback)
	  }

	  use () {
	    this._instrumenter.use.apply(this._instrumenter, arguments);
	    return this
	  }

	  trace (name, options, fn) {
	    if (!fn) {
	      fn = options;
	      options = {};
	    }

	    if (typeof fn !== 'function') return

	    options = options || {};

	    return this._tracer.trace(name, options, fn)
	  }

	  wrap (name, options, fn) {
	    if (!fn) {
	      fn = options;
	      options = {};
	    }

	    if (typeof fn !== 'function') return fn

	    options = options || {};

	    return this._tracer.wrap(name, options, fn)
	  }

	  startSpan () {
	    return this._tracer.startSpan.apply(this._tracer, arguments)
	  }

	  inject () {
	    return this._tracer.inject.apply(this._tracer, arguments)
	  }

	  extract () {
	    return this._tracer.extract.apply(this._tracer, arguments)
	  }

	  scopeManager () {
	    this._deprecate('scopeManager');
	    return this._tracer.scopeManager.apply(this._tracer, arguments)
	  }

	  scope () {
	    return this._tracer.scope.apply(this._tracer, arguments)
	  }

	  currentSpan () {
	    this._deprecate('currentSpan');
	    return this._tracer.currentSpan.apply(this._tracer, arguments)
	  }

	  bind (callback) {
	    this._deprecate('bind');
	    return callback
	  }

	  bindEmitter () {
	    this._deprecate('bindEmitter');
	  }

	  flush () {
	    return this._tracer.flush.apply(this._tracer, arguments)
	  }
	}

	var proxy = Tracer;

	var signalfxTracing = createCommonjsModule(function (module) {





	platform$3.use(node);

	module.exports = new proxy();
	module.exports.default = module.exports;
	module.exports.tracer = module.exports;
	});

	// Copyright (C) 2020 SignalFx, Inc. All rights reserved.

	var tracing;


	try {
	  tracing = signalfxTracing;
	  logger_1.info('found signalfx-tracing library. Protecting metrics code from being traced.');
	} catch (err) {
	  tracing = {};
	}

	if (tracing.withNonReportingScope === undefined) {
	  logger_1.info('signalfx-tracing not found or was an older version than 0.9.0.');
	  tracing.withNonReportingScope = function (callback) {
	    return callback();
	  };
	}

	var tracing_1$1 = tracing;

	var name$2 = "signalfx";
	var version$2 = "7.2.2";
	var description$1 = "Node.js client library for SignalFx";
	var homepage$1 = "https://signalfx.com";
	var repository$1 = "https://github.com/signalfx/signalfx-nodejs";
	var author$1 = {
		name: "SignalFx, Inc",
		email: "info@signalfx.com",
		url: "https://signalfx.com"
	};
	var files$1 = [
		"lib"
	];
	var main$1 = "lib/signalfx.js";
	var keywords = [
		"signalfx",
		"nodejs"
	];
	var devDependencies$1 = {
		browserify: "^13.0.1",
		chai: "^3.2.0",
		gulp: "^3.6.0",
		"gulp-eslint": "^0.15.0",
		"gulp-exclude-gitignore": "^1.0.0",
		"gulp-istanbul": "^0.9.0",
		"gulp-mocha": "^2.0.0",
		"gulp-nsp": "^0.4.5",
		"gulp-plumber": "^1.0.0",
		mockery: "^1.4.0",
		sinon: "^1.16.1",
		"vinyl-source-stream": "^1.1.0"
	};
	var dependencies$1 = {
		"base64-js": "^1.1.2",
		"bignumber.js": "^2.3.0",
		pako: "^1.0.4",
		promise: "^7.0.4",
		protobufjs: "^6.0.0",
		request: "^2.61.0",
		"sse.js": "^0.4.1",
		"text-encoding": "^0.6.4",
		winston: "^3.3.3",
		ws: "^7.1.2"
	};
	var scripts$1 = {
		prepublish: "gulp prepublish",
		test: "gulp",
		genprotobuf: "pbjs -t static-module -w commonjs proto/signal_fx_protocol_buffers.proto > lib/proto/signal_fx_protocol_buffers_pb2.js"
	};
	var engines = {
		npm: ">=8.0.0"
	};
	var license$1 = "Apache-2.0";
	var require$$0 = {
		name: name$2,
		version: version$2,
		description: description$1,
		homepage: homepage$1,
		repository: repository$1,
		author: author$1,
		files: files$1,
		main: main$1,
		keywords: keywords,
		devDependencies: devDependencies$1,
		dependencies: dependencies$1,
		scripts: scripts$1,
		engines: engines,
		license: license$1
	};

	// Copyright (C) 2015 SignalFx, Inc. All rights reserved.

	 // Use for create post request
	 // Logging library





	// Application version and name for User-Agent
	var name$1 = 'signalfx-nodejs-client';
	var version$1 = require$$0.version;

	/**
	 * SignalFx API client.
	 * This class presents a programmatic interface to SignalFx's metadata and
	 * ingest APIs. At the time being, only ingest is supported; more will come
	 * later.
	 *
	 * @constructor
	 * @param apiToken
	 * @param options - {
	 *                    enableAmazonUniqueId: boolean, // "false by default"
	 *                    dimensions:"object", // dimensions for each datapoint and event
	 *                    ingestEndpoint:"string",
	 *                    timeout:"number",
	 *                    batchSize:"number",
	 *                    userAgents:"array",
	 *                    proxy:"string" //http://<USER>:<PASSWORD>@<HOST>:<PORT>
	 *                  }
	 */
	function SignalFxClient$2(apiToken, options) {
	  var _this = this;

	  this.apiToken = apiToken;
	  var params = options || {};

	  this.ingestEndpoint = params.ingestEndpoint || conf.DEFAULT_INGEST_ENDPOINT;
	  this.timeout = params.timeout || conf.DEFAULT_TIMEOUT;
	  this.batchSize = Math.max(1, (params.batchSize ? params.batchSize : conf.DEFAULT_BATCH_SIZE));
	  this.userAgents = params.userAgents || null;
	  this.globalDimensions = params.dimensions || {};
	  this.enableAmazonUniqueId = params.enableAmazonUniqueId || false;
	  this.proxy = params.proxy || null;

	  this.rawData = [];
	  this.rawEvents = [];
	  this.queue = [];

	  this.loadAWSUniqueId = new promise$2(function (resolve) {
	    if (!_this.enableAmazonUniqueId) {
	      resolve();
	      return;
	    } else {
	      if (_this.AWSUniqueId !== undefined && _this.AWSUniqueId !== '') {
	        resolve();
	        return;
	      }
	    }

	    _this._retrieveAWSUniqueId(function (isSuccess, AWSUniqueId) {
	      if (isSuccess) {
	        _this.AWSUniqueId = AWSUniqueId;
	        _this.globalDimensions[_this.AWSUniqueId_DIMENTION_NAME] = AWSUniqueId;
	      } else {
	        _this.enableAmazonUniqueId = false;
	        _this.AWSUniqueId = '';
	        delete _this.globalDimensions[_this.AWSUniqueId_DIMENTION_NAME];
	      }
	      resolve();
	    });
	  });
	}

	SignalFxClient$2.prototype.AWSUniqueId_DIMENTION_NAME = 'AWSUniqueId';
	SignalFxClient$2.prototype.HEADER_API_TOKEN_KEY = 'X-SF-Token';
	SignalFxClient$2.prototype.HEADER_USER_AGENT_KEY = 'User-Agent';
	SignalFxClient$2.prototype.HEADER_CONTENT_TYPE = 'Content-Type';
	SignalFxClient$2.prototype.INGEST_ENDPOINT_SUFFIX = 'v2/datapoint';
	SignalFxClient$2.prototype.EVENT_ENDPOINT_SUFFIX = 'v2/event';

	SignalFxClient$2.prototype.EVENT_CATEGORIES = {
	  USER_DEFINED: 'USER_DEFINED',
	  ALERT: 'ALERT',
	  AUDIT: 'AUDIT',
	  JOB: 'JOB',
	  COLLECTD: 'COLLECTD',
	  SERVICE_DISCOVERY: 'SERVICE_DISCOVERY',
	  EXCEPTION: 'EXCEPTION'
	};

	/**
	 * Send the given metrics to SignalFx.
	 *
	 * @param data - param object with following fields:
	 *    'cumulative_counters' (list): a list of dictionaries representing the cumulative counters to report.
	 *    'gauges' (list): a list of dictionaries representing the gauges to report.
	 *    'counters' (list): a list of dictionaries representing the counters to report.
	 */
	SignalFxClient$2.prototype.send = function (data) {
	  var _this = this;
	  this.rawData.push(data);
	  return this.loadAWSUniqueId
	    .then(function () {
	      _this.processingData();
	      return _this.startAsyncSend();
	    });
	};

	SignalFxClient$2.prototype.processingData = function () {
	  var _this = this;

	  function processDataPoints(metricType, dataPoints) {
	    if (!dataPoints) {
	      return;
	    }

	    if (!Array.isArray(dataPoints)) {
	      throw new TypeError('DataPoints not of type list: ' + dataPoints);
	    }

	    dataPoints.forEach(function (dp) {
	      var datapoint = dp;
	      if (!datapoint.dimensions) {
	        datapoint.dimensions = {};
	      }
	      for (var key in _this.globalDimensions) {
	        if (_this.globalDimensions.hasOwnProperty(key)) {
	          datapoint.dimensions[key] = _this.globalDimensions[key];
	        }
	      }

	      _this._addToQueue(metricType, datapoint);
	    });
	  }

	  while (this.rawData.length) {
	    var data = this.rawData.pop();
	    if (data) {
	      processDataPoints('cumulative_counter', data.cumulative_counters);
	      processDataPoints('gauge', data.gauges);
	      processDataPoints('counter', data.counters);
	    }
	  }
	};

	SignalFxClient$2.prototype._addToQueue = function (metricType, datapoint) {
	  throw new Error('Subclasses should implement this!');
	};

	SignalFxClient$2.prototype._batchData = function (datapointsList) {
	  throw new Error('Subclasses should implement this!');
	};

	/**
	 * Send an event to SignalFx
	 *
	 * @param event - param object with following fields:
	 *    category (string) - the category of event. Choose one from EVENT_CATEGORIES list
	 *    eventType (string) - the event type (name of the event time series).
	 *    dimensions  (dict) - a map of event dimensions, empty dictionary by default
	 *    properties  (dict) - a map of extra properties on that event, empty dictionary by default
	 *    timestamp (int64) - a timestamp, by default is current time
	 *
	 * Only eventType field is required
	 */
	SignalFxClient$2.prototype.sendEvent = function (event) {
	  var _this = this;
	  if (!event || !event.eventType) {
	    throw new Error('Type of event should not be empty!');
	  }
	  // Check than passed event category is supported
	  if (!this.EVENT_CATEGORIES[event.category]) {
	    throw new Error('Unsupported event category: ' + event.category);
	  }

	  var data = {
	    category: event.category || _this.EVENT_CATEGORIES.USER_DEFINED,
	    eventType: event.eventType,
	    dimensions: event.dimensions || {},
	    properties: event.properties || {},
	    timestamp: event.timestamp || (new Date()).getTime()
	  };

	  this.rawEvents.push(data);
	  return this.loadAWSUniqueId.then(function () {
	    return _this.startAsyncEventSend();
	  });
	};


	SignalFxClient$2.prototype._retrieveAWSUniqueId = function (callback) {
	  var getOptions = {
	    url: conf.AWS_UNIQUE_ID_URL,
	    timeout: 1000,
	    method: 'GET',
	    proxy: this.proxy
	  };

	  tracing_1$1.withNonReportingScope(function () {
	    request_1$1(getOptions, function (error, response, body) {
	      if (error || response.statusCode !== 200) {
	        callback(false, '');
	        logger_1.error('Failed to retrieve AWS unique ID: %s %s', response ? response.statusCode : '', body);
	      } else {
	        try {
	          var jsonBody = JSON.parse(body);
	          if (jsonBody && jsonBody.instanceId && jsonBody.region && jsonBody.accountId) {
	            var AWSUniqueId = jsonBody.instanceId + '_' + jsonBody.region + '_' + jsonBody.accountId;
	            callback(true, AWSUniqueId);
	          } else {
	            callback(false, '');
	          }
	        } catch (e) {
	          callback(false, '');
	        }
	      }
	    });
	  });
	};

	SignalFxClient$2.prototype.getHeaderContentType = function () {
	  throw new Error('Subclasses should implement this!');
	};

	SignalFxClient$2.prototype._buildEvent = function (event) {
	  throw new Error('Subclasses should implement this!');
	};

	SignalFxClient$2.prototype._encodeEvent = function (event) {
	  throw new Error('Subclasses should implement this!');
	};

	SignalFxClient$2.prototype.startAsyncSend = function () {
	  var _this = this;
	  // Send post request in separate thread
	  var datapointsList = [];
	  while (_this.queue.length !== 0 && datapointsList.length < _this.batchSize) {
	    datapointsList.push(_this.queue.shift());
	  }

	  if (datapointsList.length > 0) {
	    var dataToSend = _this._batchData(datapointsList);
	    if (dataToSend && dataToSend.length > 0) {
	      var url = _this.ingestEndpoint + '/' + _this.INGEST_ENDPOINT_SUFFIX;
	      return _this.post(dataToSend, url, _this.getHeaderContentType());
	    }
	  }
	  return new promise$2(function (resolve) {
	    resolve(null);
	  });
	};

	SignalFxClient$2.prototype.startAsyncEventSend = function () {
	  var _this = this;
	  while (this.rawEvents.length) {
	    var data = this.rawEvents.pop();
	    for (var key in this.globalDimensions) {
	      if (this.globalDimensions.hasOwnProperty(key)) {
	        data.dimensions[key] = this.globalDimensions[key];
	      }
	    }

	    try {
	      var eventToSend = _this._buildEvent(data);
	      if (eventToSend) {
	        var url = this.ingestEndpoint + '/' + this.EVENT_ENDPOINT_SUFFIX;
	        return this.post(_this._encodeEvent(eventToSend), url, _this.getHeaderContentType());
	      }
	    } catch (error) {
	      logger_1.error('Can\'t process event: %s', error);
	    }
	  }
	};

	SignalFxClient$2.prototype.post = function (data, postUrl, contentType) {
	  var _this = this;

	  var headers = {};
	  headers[_this.HEADER_USER_AGENT_KEY] = name$1 + '/' + version$1;
	  //Adding custom user agents passed by client modules
	  if (_this.userAgents) {
	    headers[_this.HEADER_USER_AGENT_KEY] += ',' + _this.userAgents;
	  }
	  headers[_this.HEADER_API_TOKEN_KEY] = _this.apiToken;
	  headers[_this.HEADER_CONTENT_TYPE] = contentType;

	  // An object of options to indicate where to post to
	  var postOptions = {
	    url: postUrl,
	    timeout: _this.timeout,
	    headers: headers,
	    body: data,
	    method: 'POST',
	    proxy: _this.proxy
	  };

	  return tracing_1$1.withNonReportingScope(function () {
	    return new promise$2(function (resolve, reject) {
	      request_1$1(postOptions, function (error, response, body) {
	        if (error || response.statusCode !== 200) {
	          logger_1.error('Failed to send datapoint: %s %s %s', response ? response.statusCode : '', body, error ? error : '');
	          reject(error);
	        }
	        resolve(body);
	      });
	    });
	  });
	};

	var SignalFxClient_1 = SignalFxClient$2;

	var signal_fx_client = {
		SignalFxClient: SignalFxClient_1
	};

	var aspromise = asPromise;

	/**
	 * Callback as used by {@link util.asPromise}.
	 * @typedef asPromiseCallback
	 * @type {function}
	 * @param {Error|null} error Error, if any
	 * @param {...*} params Additional arguments
	 * @returns {undefined}
	 */

	/**
	 * Returns a promise from a node-style callback function.
	 * @memberof util
	 * @param {asPromiseCallback} fn Function to call
	 * @param {*} ctx Function context
	 * @param {...*} params Function arguments
	 * @returns {Promise<*>} Promisified function
	 */
	function asPromise(fn, ctx/*, varargs */) {
	    var params  = new Array(arguments.length - 1),
	        offset  = 0,
	        index   = 2,
	        pending = true;
	    while (index < arguments.length)
	        params[offset++] = arguments[index++];
	    return new Promise(function executor(resolve, reject) {
	        params[offset] = function callback(err/*, varargs */) {
	            if (pending) {
	                pending = false;
	                if (err)
	                    reject(err);
	                else {
	                    var params = new Array(arguments.length - 1),
	                        offset = 0;
	                    while (offset < params.length)
	                        params[offset++] = arguments[offset];
	                    resolve.apply(null, params);
	                }
	            }
	        };
	        try {
	            fn.apply(ctx || null, params);
	        } catch (err) {
	            if (pending) {
	                pending = false;
	                reject(err);
	            }
	        }
	    });
	}

	var base64_1 = createCommonjsModule(function (module, exports) {

	/**
	 * A minimal base64 implementation for number arrays.
	 * @memberof util
	 * @namespace
	 */
	var base64 = exports;

	/**
	 * Calculates the byte length of a base64 encoded string.
	 * @param {string} string Base64 encoded string
	 * @returns {number} Byte length
	 */
	base64.length = function length(string) {
	    var p = string.length;
	    if (!p)
	        return 0;
	    var n = 0;
	    while (--p % 4 > 1 && string.charAt(p) === "=")
	        ++n;
	    return Math.ceil(string.length * 3) / 4 - n;
	};

	// Base64 encoding table
	var b64 = new Array(64);

	// Base64 decoding table
	var s64 = new Array(123);

	// 65..90, 97..122, 48..57, 43, 47
	for (var i = 0; i < 64;)
	    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;

	/**
	 * Encodes a buffer to a base64 encoded string.
	 * @param {Uint8Array} buffer Source buffer
	 * @param {number} start Source start
	 * @param {number} end Source end
	 * @returns {string} Base64 encoded string
	 */
	base64.encode = function encode(buffer, start, end) {
	    var parts = null,
	        chunk = [];
	    var i = 0, // output index
	        j = 0, // goto index
	        t;     // temporary
	    while (start < end) {
	        var b = buffer[start++];
	        switch (j) {
	            case 0:
	                chunk[i++] = b64[b >> 2];
	                t = (b & 3) << 4;
	                j = 1;
	                break;
	            case 1:
	                chunk[i++] = b64[t | b >> 4];
	                t = (b & 15) << 2;
	                j = 2;
	                break;
	            case 2:
	                chunk[i++] = b64[t | b >> 6];
	                chunk[i++] = b64[b & 63];
	                j = 0;
	                break;
	        }
	        if (i > 8191) {
	            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
	            i = 0;
	        }
	    }
	    if (j) {
	        chunk[i++] = b64[t];
	        chunk[i++] = 61;
	        if (j === 1)
	            chunk[i++] = 61;
	    }
	    if (parts) {
	        if (i)
	            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
	        return parts.join("");
	    }
	    return String.fromCharCode.apply(String, chunk.slice(0, i));
	};

	var invalidEncoding = "invalid encoding";

	/**
	 * Decodes a base64 encoded string to a buffer.
	 * @param {string} string Source string
	 * @param {Uint8Array} buffer Destination buffer
	 * @param {number} offset Destination offset
	 * @returns {number} Number of bytes written
	 * @throws {Error} If encoding is invalid
	 */
	base64.decode = function decode(string, buffer, offset) {
	    var start = offset;
	    var j = 0, // goto index
	        t;     // temporary
	    for (var i = 0; i < string.length;) {
	        var c = string.charCodeAt(i++);
	        if (c === 61 && j > 1)
	            break;
	        if ((c = s64[c]) === undefined)
	            throw Error(invalidEncoding);
	        switch (j) {
	            case 0:
	                t = c;
	                j = 1;
	                break;
	            case 1:
	                buffer[offset++] = t << 2 | (c & 48) >> 4;
	                t = c;
	                j = 2;
	                break;
	            case 2:
	                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;
	                t = c;
	                j = 3;
	                break;
	            case 3:
	                buffer[offset++] = (t & 3) << 6 | c;
	                j = 0;
	                break;
	        }
	    }
	    if (j === 1)
	        throw Error(invalidEncoding);
	    return offset - start;
	};

	/**
	 * Tests if the specified string appears to be base64 encoded.
	 * @param {string} string String to test
	 * @returns {boolean} `true` if probably base64 encoded, otherwise false
	 */
	base64.test = function test(string) {
	    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);
	};
	});

	var eventemitter = EventEmitter;

	/**
	 * Constructs a new event emitter instance.
	 * @classdesc A minimal event emitter.
	 * @memberof util
	 * @constructor
	 */
	function EventEmitter() {

	    /**
	     * Registered listeners.
	     * @type {Object.<string,*>}
	     * @private
	     */
	    this._listeners = {};
	}

	/**
	 * Registers an event listener.
	 * @param {string} evt Event name
	 * @param {function} fn Listener
	 * @param {*} [ctx] Listener context
	 * @returns {util.EventEmitter} `this`
	 */
	EventEmitter.prototype.on = function on(evt, fn, ctx) {
	    (this._listeners[evt] || (this._listeners[evt] = [])).push({
	        fn  : fn,
	        ctx : ctx || this
	    });
	    return this;
	};

	/**
	 * Removes an event listener or any matching listeners if arguments are omitted.
	 * @param {string} [evt] Event name. Removes all listeners if omitted.
	 * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.
	 * @returns {util.EventEmitter} `this`
	 */
	EventEmitter.prototype.off = function off(evt, fn) {
	    if (evt === undefined)
	        this._listeners = {};
	    else {
	        if (fn === undefined)
	            this._listeners[evt] = [];
	        else {
	            var listeners = this._listeners[evt];
	            for (var i = 0; i < listeners.length;)
	                if (listeners[i].fn === fn)
	                    listeners.splice(i, 1);
	                else
	                    ++i;
	        }
	    }
	    return this;
	};

	/**
	 * Emits an event by calling its listeners with the specified arguments.
	 * @param {string} evt Event name
	 * @param {...*} args Arguments
	 * @returns {util.EventEmitter} `this`
	 */
	EventEmitter.prototype.emit = function emit(evt) {
	    var listeners = this._listeners[evt];
	    if (listeners) {
	        var args = [],
	            i = 1;
	        for (; i < arguments.length;)
	            args.push(arguments[i++]);
	        for (i = 0; i < listeners.length;)
	            listeners[i].fn.apply(listeners[i++].ctx, args);
	    }
	    return this;
	};

	var float = factory(factory);

	/**
	 * Reads / writes floats / doubles from / to buffers.
	 * @name util.float
	 * @namespace
	 */

	/**
	 * Writes a 32 bit float to a buffer using little endian byte order.
	 * @name util.float.writeFloatLE
	 * @function
	 * @param {number} val Value to write
	 * @param {Uint8Array} buf Target buffer
	 * @param {number} pos Target buffer offset
	 * @returns {undefined}
	 */

	/**
	 * Writes a 32 bit float to a buffer using big endian byte order.
	 * @name util.float.writeFloatBE
	 * @function
	 * @param {number} val Value to write
	 * @param {Uint8Array} buf Target buffer
	 * @param {number} pos Target buffer offset
	 * @returns {undefined}
	 */

	/**
	 * Reads a 32 bit float from a buffer using little endian byte order.
	 * @name util.float.readFloatLE
	 * @function
	 * @param {Uint8Array} buf Source buffer
	 * @param {number} pos Source buffer offset
	 * @returns {number} Value read
	 */

	/**
	 * Reads a 32 bit float from a buffer using big endian byte order.
	 * @name util.float.readFloatBE
	 * @function
	 * @param {Uint8Array} buf Source buffer
	 * @param {number} pos Source buffer offset
	 * @returns {number} Value read
	 */

	/**
	 * Writes a 64 bit double to a buffer using little endian byte order.
	 * @name util.float.writeDoubleLE
	 * @function
	 * @param {number} val Value to write
	 * @param {Uint8Array} buf Target buffer
	 * @param {number} pos Target buffer offset
	 * @returns {undefined}
	 */

	/**
	 * Writes a 64 bit double to a buffer using big endian byte order.
	 * @name util.float.writeDoubleBE
	 * @function
	 * @param {number} val Value to write
	 * @param {Uint8Array} buf Target buffer
	 * @param {number} pos Target buffer offset
	 * @returns {undefined}
	 */

	/**
	 * Reads a 64 bit double from a buffer using little endian byte order.
	 * @name util.float.readDoubleLE
	 * @function
	 * @param {Uint8Array} buf Source buffer
	 * @param {number} pos Source buffer offset
	 * @returns {number} Value read
	 */

	/**
	 * Reads a 64 bit double from a buffer using big endian byte order.
	 * @name util.float.readDoubleBE
	 * @function
	 * @param {Uint8Array} buf Source buffer
	 * @param {number} pos Source buffer offset
	 * @returns {number} Value read
	 */

	// Factory function for the purpose of node-based testing in modified global environments
	function factory(exports) {

	    // float: typed array
	    if (typeof Float32Array !== "undefined") (function() {

	        var f32 = new Float32Array([ -0 ]),
	            f8b = new Uint8Array(f32.buffer),
	            le  = f8b[3] === 128;

	        function writeFloat_f32_cpy(val, buf, pos) {
	            f32[0] = val;
	            buf[pos    ] = f8b[0];
	            buf[pos + 1] = f8b[1];
	            buf[pos + 2] = f8b[2];
	            buf[pos + 3] = f8b[3];
	        }

	        function writeFloat_f32_rev(val, buf, pos) {
	            f32[0] = val;
	            buf[pos    ] = f8b[3];
	            buf[pos + 1] = f8b[2];
	            buf[pos + 2] = f8b[1];
	            buf[pos + 3] = f8b[0];
	        }

	        /* istanbul ignore next */
	        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;
	        /* istanbul ignore next */
	        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;

	        function readFloat_f32_cpy(buf, pos) {
	            f8b[0] = buf[pos    ];
	            f8b[1] = buf[pos + 1];
	            f8b[2] = buf[pos + 2];
	            f8b[3] = buf[pos + 3];
	            return f32[0];
	        }

	        function readFloat_f32_rev(buf, pos) {
	            f8b[3] = buf[pos    ];
	            f8b[2] = buf[pos + 1];
	            f8b[1] = buf[pos + 2];
	            f8b[0] = buf[pos + 3];
	            return f32[0];
	        }

	        /* istanbul ignore next */
	        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;
	        /* istanbul ignore next */
	        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;

	    // float: ieee754
	    })(); else (function() {

	        function writeFloat_ieee754(writeUint, val, buf, pos) {
	            var sign = val < 0 ? 1 : 0;
	            if (sign)
	                val = -val;
	            if (val === 0)
	                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);
	            else if (isNaN(val))
	                writeUint(2143289344, buf, pos);
	            else if (val > 3.4028234663852886e+38) // +-Infinity
	                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);
	            else if (val < 1.1754943508222875e-38) // denormal
	                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);
	            else {
	                var exponent = Math.floor(Math.log(val) / Math.LN2),
	                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;
	                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);
	            }
	        }

	        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);
	        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);

	        function readFloat_ieee754(readUint, buf, pos) {
	            var uint = readUint(buf, pos),
	                sign = (uint >> 31) * 2 + 1,
	                exponent = uint >>> 23 & 255,
	                mantissa = uint & 8388607;
	            return exponent === 255
	                ? mantissa
	                ? NaN
	                : sign * Infinity
	                : exponent === 0 // denormal
	                ? sign * 1.401298464324817e-45 * mantissa
	                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);
	        }

	        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);
	        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);

	    })();

	    // double: typed array
	    if (typeof Float64Array !== "undefined") (function() {

	        var f64 = new Float64Array([-0]),
	            f8b = new Uint8Array(f64.buffer),
	            le  = f8b[7] === 128;

	        function writeDouble_f64_cpy(val, buf, pos) {
	            f64[0] = val;
	            buf[pos    ] = f8b[0];
	            buf[pos + 1] = f8b[1];
	            buf[pos + 2] = f8b[2];
	            buf[pos + 3] = f8b[3];
	            buf[pos + 4] = f8b[4];
	            buf[pos + 5] = f8b[5];
	            buf[pos + 6] = f8b[6];
	            buf[pos + 7] = f8b[7];
	        }

	        function writeDouble_f64_rev(val, buf, pos) {
	            f64[0] = val;
	            buf[pos    ] = f8b[7];
	            buf[pos + 1] = f8b[6];
	            buf[pos + 2] = f8b[5];
	            buf[pos + 3] = f8b[4];
	            buf[pos + 4] = f8b[3];
	            buf[pos + 5] = f8b[2];
	            buf[pos + 6] = f8b[1];
	            buf[pos + 7] = f8b[0];
	        }

	        /* istanbul ignore next */
	        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;
	        /* istanbul ignore next */
	        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;

	        function readDouble_f64_cpy(buf, pos) {
	            f8b[0] = buf[pos    ];
	            f8b[1] = buf[pos + 1];
	            f8b[2] = buf[pos + 2];
	            f8b[3] = buf[pos + 3];
	            f8b[4] = buf[pos + 4];
	            f8b[5] = buf[pos + 5];
	            f8b[6] = buf[pos + 6];
	            f8b[7] = buf[pos + 7];
	            return f64[0];
	        }

	        function readDouble_f64_rev(buf, pos) {
	            f8b[7] = buf[pos    ];
	            f8b[6] = buf[pos + 1];
	            f8b[5] = buf[pos + 2];
	            f8b[4] = buf[pos + 3];
	            f8b[3] = buf[pos + 4];
	            f8b[2] = buf[pos + 5];
	            f8b[1] = buf[pos + 6];
	            f8b[0] = buf[pos + 7];
	            return f64[0];
	        }

	        /* istanbul ignore next */
	        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;
	        /* istanbul ignore next */
	        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;

	    // double: ieee754
	    })(); else (function() {

	        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {
	            var sign = val < 0 ? 1 : 0;
	            if (sign)
	                val = -val;
	            if (val === 0) {
	                writeUint(0, buf, pos + off0);
	                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);
	            } else if (isNaN(val)) {
	                writeUint(0, buf, pos + off0);
	                writeUint(2146959360, buf, pos + off1);
	            } else if (val > 1.7976931348623157e+308) { // +-Infinity
	                writeUint(0, buf, pos + off0);
	                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);
	            } else {
	                var mantissa;
	                if (val < 2.2250738585072014e-308) { // denormal
	                    mantissa = val / 5e-324;
	                    writeUint(mantissa >>> 0, buf, pos + off0);
	                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);
	                } else {
	                    var exponent = Math.floor(Math.log(val) / Math.LN2);
	                    if (exponent === 1024)
	                        exponent = 1023;
	                    mantissa = val * Math.pow(2, -exponent);
	                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);
	                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);
	                }
	            }
	        }

	        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);
	        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);

	        function readDouble_ieee754(readUint, off0, off1, buf, pos) {
	            var lo = readUint(buf, pos + off0),
	                hi = readUint(buf, pos + off1);
	            var sign = (hi >> 31) * 2 + 1,
	                exponent = hi >>> 20 & 2047,
	                mantissa = 4294967296 * (hi & 1048575) + lo;
	            return exponent === 2047
	                ? mantissa
	                ? NaN
	                : sign * Infinity
	                : exponent === 0 // denormal
	                ? sign * 5e-324 * mantissa
	                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);
	        }

	        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);
	        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);

	    })();

	    return exports;
	}

	// uint helpers

	function writeUintLE(val, buf, pos) {
	    buf[pos    ] =  val        & 255;
	    buf[pos + 1] =  val >>> 8  & 255;
	    buf[pos + 2] =  val >>> 16 & 255;
	    buf[pos + 3] =  val >>> 24;
	}

	function writeUintBE(val, buf, pos) {
	    buf[pos    ] =  val >>> 24;
	    buf[pos + 1] =  val >>> 16 & 255;
	    buf[pos + 2] =  val >>> 8  & 255;
	    buf[pos + 3] =  val        & 255;
	}

	function readUintLE(buf, pos) {
	    return (buf[pos    ]
	          | buf[pos + 1] << 8
	          | buf[pos + 2] << 16
	          | buf[pos + 3] << 24) >>> 0;
	}

	function readUintBE(buf, pos) {
	    return (buf[pos    ] << 24
	          | buf[pos + 1] << 16
	          | buf[pos + 2] << 8
	          | buf[pos + 3]) >>> 0;
	}

	var inquire_1 = inquire;

	/**
	 * Requires a module only if available.
	 * @memberof util
	 * @param {string} moduleName Module to require
	 * @returns {?Object} Required module if available and not empty, otherwise `null`
	 */
	function inquire(moduleName) {
	    try {
	        var mod = eval("quire".replace(/^/,"re"))(moduleName); // eslint-disable-line no-eval
	        if (mod && (mod.length || Object.keys(mod).length))
	            return mod;
	    } catch (e) {} // eslint-disable-line no-empty
	    return null;
	}

	var utf8_1 = createCommonjsModule(function (module, exports) {

	/**
	 * A minimal UTF8 implementation for number arrays.
	 * @memberof util
	 * @namespace
	 */
	var utf8 = exports;

	/**
	 * Calculates the UTF8 byte length of a string.
	 * @param {string} string String
	 * @returns {number} Byte length
	 */
	utf8.length = function utf8_length(string) {
	    var len = 0,
	        c = 0;
	    for (var i = 0; i < string.length; ++i) {
	        c = string.charCodeAt(i);
	        if (c < 128)
	            len += 1;
	        else if (c < 2048)
	            len += 2;
	        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {
	            ++i;
	            len += 4;
	        } else
	            len += 3;
	    }
	    return len;
	};

	/**
	 * Reads UTF8 bytes as a string.
	 * @param {Uint8Array} buffer Source buffer
	 * @param {number} start Source start
	 * @param {number} end Source end
	 * @returns {string} String read
	 */
	utf8.read = function utf8_read(buffer, start, end) {
	    var len = end - start;
	    if (len < 1)
	        return "";
	    var parts = null,
	        chunk = [],
	        i = 0, // char offset
	        t;     // temporary
	    while (start < end) {
	        t = buffer[start++];
	        if (t < 128)
	            chunk[i++] = t;
	        else if (t > 191 && t < 224)
	            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;
	        else if (t > 239 && t < 365) {
	            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;
	            chunk[i++] = 0xD800 + (t >> 10);
	            chunk[i++] = 0xDC00 + (t & 1023);
	        } else
	            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;
	        if (i > 8191) {
	            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
	            i = 0;
	        }
	    }
	    if (parts) {
	        if (i)
	            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
	        return parts.join("");
	    }
	    return String.fromCharCode.apply(String, chunk.slice(0, i));
	};

	/**
	 * Writes a string as UTF8 bytes.
	 * @param {string} string Source string
	 * @param {Uint8Array} buffer Destination buffer
	 * @param {number} offset Destination offset
	 * @returns {number} Bytes written
	 */
	utf8.write = function utf8_write(string, buffer, offset) {
	    var start = offset,
	        c1, // character 1
	        c2; // character 2
	    for (var i = 0; i < string.length; ++i) {
	        c1 = string.charCodeAt(i);
	        if (c1 < 128) {
	            buffer[offset++] = c1;
	        } else if (c1 < 2048) {
	            buffer[offset++] = c1 >> 6       | 192;
	            buffer[offset++] = c1       & 63 | 128;
	        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {
	            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);
	            ++i;
	            buffer[offset++] = c1 >> 18      | 240;
	            buffer[offset++] = c1 >> 12 & 63 | 128;
	            buffer[offset++] = c1 >> 6  & 63 | 128;
	            buffer[offset++] = c1       & 63 | 128;
	        } else {
	            buffer[offset++] = c1 >> 12      | 224;
	            buffer[offset++] = c1 >> 6  & 63 | 128;
	            buffer[offset++] = c1       & 63 | 128;
	        }
	    }
	    return offset - start;
	};
	});

	var pool_1 = pool;

	/**
	 * An allocator as used by {@link util.pool}.
	 * @typedef PoolAllocator
	 * @type {function}
	 * @param {number} size Buffer size
	 * @returns {Uint8Array} Buffer
	 */

	/**
	 * A slicer as used by {@link util.pool}.
	 * @typedef PoolSlicer
	 * @type {function}
	 * @param {number} start Start offset
	 * @param {number} end End offset
	 * @returns {Uint8Array} Buffer slice
	 * @this {Uint8Array}
	 */

	/**
	 * A general purpose buffer pool.
	 * @memberof util
	 * @function
	 * @param {PoolAllocator} alloc Allocator
	 * @param {PoolSlicer} slice Slicer
	 * @param {number} [size=8192] Slab size
	 * @returns {PoolAllocator} Pooled allocator
	 */
	function pool(alloc, slice, size) {
	    var SIZE   = size || 8192;
	    var MAX    = SIZE >>> 1;
	    var slab   = null;
	    var offset = SIZE;
	    return function pool_alloc(size) {
	        if (size < 1 || size > MAX)
	            return alloc(size);
	        if (offset + size > SIZE) {
	            slab = alloc(SIZE);
	            offset = 0;
	        }
	        var buf = slice.call(slab, offset, offset += size);
	        if (offset & 7) // align to 32 bit
	            offset = (offset | 7) + 1;
	        return buf;
	    };
	}

	var longbits = LongBits$2;



	/**
	 * Constructs new long bits.
	 * @classdesc Helper class for working with the low and high bits of a 64 bit value.
	 * @memberof util
	 * @constructor
	 * @param {number} lo Low 32 bits, unsigned
	 * @param {number} hi High 32 bits, unsigned
	 */
	function LongBits$2(lo, hi) {

	    // note that the casts below are theoretically unnecessary as of today, but older statically
	    // generated converter code might still call the ctor with signed 32bits. kept for compat.

	    /**
	     * Low bits.
	     * @type {number}
	     */
	    this.lo = lo >>> 0;

	    /**
	     * High bits.
	     * @type {number}
	     */
	    this.hi = hi >>> 0;
	}

	/**
	 * Zero bits.
	 * @memberof util.LongBits
	 * @type {util.LongBits}
	 */
	var zero$2 = LongBits$2.zero = new LongBits$2(0, 0);

	zero$2.toNumber = function() { return 0; };
	zero$2.zzEncode = zero$2.zzDecode = function() { return this; };
	zero$2.length = function() { return 1; };

	/**
	 * Zero hash.
	 * @memberof util.LongBits
	 * @type {string}
	 */
	var zeroHash = LongBits$2.zeroHash = "\0\0\0\0\0\0\0\0";

	/**
	 * Constructs new long bits from the specified number.
	 * @param {number} value Value
	 * @returns {util.LongBits} Instance
	 */
	LongBits$2.fromNumber = function fromNumber(value) {
	    if (value === 0)
	        return zero$2;
	    var sign = value < 0;
	    if (sign)
	        value = -value;
	    var lo = value >>> 0,
	        hi = (value - lo) / 4294967296 >>> 0;
	    if (sign) {
	        hi = ~hi >>> 0;
	        lo = ~lo >>> 0;
	        if (++lo > 4294967295) {
	            lo = 0;
	            if (++hi > 4294967295)
	                hi = 0;
	        }
	    }
	    return new LongBits$2(lo, hi);
	};

	/**
	 * Constructs new long bits from a number, long or string.
	 * @param {Long|number|string} value Value
	 * @returns {util.LongBits} Instance
	 */
	LongBits$2.from = function from(value) {
	    if (typeof value === "number")
	        return LongBits$2.fromNumber(value);
	    if (minimal$1.isString(value)) {
	        /* istanbul ignore else */
	        if (minimal$1.Long)
	            value = minimal$1.Long.fromString(value);
	        else
	            return LongBits$2.fromNumber(parseInt(value, 10));
	    }
	    return value.low || value.high ? new LongBits$2(value.low >>> 0, value.high >>> 0) : zero$2;
	};

	/**
	 * Converts this long bits to a possibly unsafe JavaScript number.
	 * @param {boolean} [unsigned=false] Whether unsigned or not
	 * @returns {number} Possibly unsafe number
	 */
	LongBits$2.prototype.toNumber = function toNumber(unsigned) {
	    if (!unsigned && this.hi >>> 31) {
	        var lo = ~this.lo + 1 >>> 0,
	            hi = ~this.hi     >>> 0;
	        if (!lo)
	            hi = hi + 1 >>> 0;
	        return -(lo + hi * 4294967296);
	    }
	    return this.lo + this.hi * 4294967296;
	};

	/**
	 * Converts this long bits to a long.
	 * @param {boolean} [unsigned=false] Whether unsigned or not
	 * @returns {Long} Long
	 */
	LongBits$2.prototype.toLong = function toLong(unsigned) {
	    return minimal$1.Long
	        ? new minimal$1.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))
	        /* istanbul ignore next */
	        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };
	};

	var charCodeAt = String.prototype.charCodeAt;

	/**
	 * Constructs new long bits from the specified 8 characters long hash.
	 * @param {string} hash Hash
	 * @returns {util.LongBits} Bits
	 */
	LongBits$2.fromHash = function fromHash(hash) {
	    if (hash === zeroHash)
	        return zero$2;
	    return new LongBits$2(
	        ( charCodeAt.call(hash, 0)
	        | charCodeAt.call(hash, 1) << 8
	        | charCodeAt.call(hash, 2) << 16
	        | charCodeAt.call(hash, 3) << 24) >>> 0
	    ,
	        ( charCodeAt.call(hash, 4)
	        | charCodeAt.call(hash, 5) << 8
	        | charCodeAt.call(hash, 6) << 16
	        | charCodeAt.call(hash, 7) << 24) >>> 0
	    );
	};

	/**
	 * Converts this long bits to a 8 characters long hash.
	 * @returns {string} Hash
	 */
	LongBits$2.prototype.toHash = function toHash() {
	    return String.fromCharCode(
	        this.lo        & 255,
	        this.lo >>> 8  & 255,
	        this.lo >>> 16 & 255,
	        this.lo >>> 24      ,
	        this.hi        & 255,
	        this.hi >>> 8  & 255,
	        this.hi >>> 16 & 255,
	        this.hi >>> 24
	    );
	};

	/**
	 * Zig-zag encodes this long bits.
	 * @returns {util.LongBits} `this`
	 */
	LongBits$2.prototype.zzEncode = function zzEncode() {
	    var mask =   this.hi >> 31;
	    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;
	    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;
	    return this;
	};

	/**
	 * Zig-zag decodes this long bits.
	 * @returns {util.LongBits} `this`
	 */
	LongBits$2.prototype.zzDecode = function zzDecode() {
	    var mask = -(this.lo & 1);
	    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;
	    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;
	    return this;
	};

	/**
	 * Calculates the length of this longbits when encoded as a varint.
	 * @returns {number} Length
	 */
	LongBits$2.prototype.length = function length() {
	    var part0 =  this.lo,
	        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,
	        part2 =  this.hi >>> 24;
	    return part2 === 0
	         ? part1 === 0
	           ? part0 < 16384
	             ? part0 < 128 ? 1 : 2
	             : part0 < 2097152 ? 3 : 4
	           : part1 < 16384
	             ? part1 < 128 ? 5 : 6
	             : part1 < 2097152 ? 7 : 8
	         : part2 < 128 ? 9 : 10;
	};

	var minimal$1 = createCommonjsModule(function (module, exports) {
	var util = exports;

	// used to return a Promise where callback is omitted
	util.asPromise = aspromise;

	// converts to / from base64 encoded strings
	util.base64 = base64_1;

	// base class of rpc.Service
	util.EventEmitter = eventemitter;

	// float handling accross browsers
	util.float = float;

	// requires modules optionally and hides the call from bundlers
	util.inquire = inquire_1;

	// converts to / from utf8 encoded strings
	util.utf8 = utf8_1;

	// provides a node-like buffer pool in the browser
	util.pool = pool_1;

	// utility to work with the low and high bits of a 64 bit value
	util.LongBits = longbits;

	/**
	 * Whether running within node or not.
	 * @memberof util
	 * @type {boolean}
	 */
	util.isNode = Boolean(typeof commonjsGlobal !== "undefined"
	                   && commonjsGlobal
	                   && commonjsGlobal.process
	                   && commonjsGlobal.process.versions
	                   && commonjsGlobal.process.versions.node);

	/**
	 * Global object reference.
	 * @memberof util
	 * @type {Object}
	 */
	util.global = util.isNode && commonjsGlobal
	           || typeof window !== "undefined" && window
	           || typeof self   !== "undefined" && self
	           || commonjsGlobal; // eslint-disable-line no-invalid-this

	/**
	 * An immuable empty array.
	 * @memberof util
	 * @type {Array.<*>}
	 * @const
	 */
	util.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes

	/**
	 * An immutable empty object.
	 * @type {Object}
	 * @const
	 */
	util.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes

	/**
	 * Tests if the specified value is an integer.
	 * @function
	 * @param {*} value Value to test
	 * @returns {boolean} `true` if the value is an integer
	 */
	util.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {
	    return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
	};

	/**
	 * Tests if the specified value is a string.
	 * @param {*} value Value to test
	 * @returns {boolean} `true` if the value is a string
	 */
	util.isString = function isString(value) {
	    return typeof value === "string" || value instanceof String;
	};

	/**
	 * Tests if the specified value is a non-null object.
	 * @param {*} value Value to test
	 * @returns {boolean} `true` if the value is a non-null object
	 */
	util.isObject = function isObject(value) {
	    return value && typeof value === "object";
	};

	/**
	 * Checks if a property on a message is considered to be present.
	 * This is an alias of {@link util.isSet}.
	 * @function
	 * @param {Object} obj Plain object or message instance
	 * @param {string} prop Property name
	 * @returns {boolean} `true` if considered to be present, otherwise `false`
	 */
	util.isset =

	/**
	 * Checks if a property on a message is considered to be present.
	 * @param {Object} obj Plain object or message instance
	 * @param {string} prop Property name
	 * @returns {boolean} `true` if considered to be present, otherwise `false`
	 */
	util.isSet = function isSet(obj, prop) {
	    var value = obj[prop];
	    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins
	        return typeof value !== "object" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;
	    return false;
	};

	/**
	 * Any compatible Buffer instance.
	 * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.
	 * @interface Buffer
	 * @extends Uint8Array
	 */

	/**
	 * Node's Buffer class if available.
	 * @type {Constructor<Buffer>}
	 */
	util.Buffer = (function() {
	    try {
	        var Buffer = util.inquire("buffer").Buffer;
	        // refuse to use non-node buffers if not explicitly assigned (perf reasons):
	        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;
	    } catch (e) {
	        /* istanbul ignore next */
	        return null;
	    }
	})();

	// Internal alias of or polyfull for Buffer.from.
	util._Buffer_from = null;

	// Internal alias of or polyfill for Buffer.allocUnsafe.
	util._Buffer_allocUnsafe = null;

	/**
	 * Creates a new buffer of whatever type supported by the environment.
	 * @param {number|number[]} [sizeOrArray=0] Buffer size or number array
	 * @returns {Uint8Array|Buffer} Buffer
	 */
	util.newBuffer = function newBuffer(sizeOrArray) {
	    /* istanbul ignore next */
	    return typeof sizeOrArray === "number"
	        ? util.Buffer
	            ? util._Buffer_allocUnsafe(sizeOrArray)
	            : new util.Array(sizeOrArray)
	        : util.Buffer
	            ? util._Buffer_from(sizeOrArray)
	            : typeof Uint8Array === "undefined"
	                ? sizeOrArray
	                : new Uint8Array(sizeOrArray);
	};

	/**
	 * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.
	 * @type {Constructor<Uint8Array>}
	 */
	util.Array = typeof Uint8Array !== "undefined" ? Uint8Array /* istanbul ignore next */ : Array;

	/**
	 * Any compatible Long instance.
	 * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.
	 * @interface Long
	 * @property {number} low Low bits
	 * @property {number} high High bits
	 * @property {boolean} unsigned Whether unsigned or not
	 */

	/**
	 * Long.js's Long class if available.
	 * @type {Constructor<Long>}
	 */
	util.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long
	         || /* istanbul ignore next */ util.global.Long
	         || util.inquire("long");

	/**
	 * Regular expression used to verify 2 bit (`bool`) map keys.
	 * @type {RegExp}
	 * @const
	 */
	util.key2Re = /^true|false|0|1$/;

	/**
	 * Regular expression used to verify 32 bit (`int32` etc.) map keys.
	 * @type {RegExp}
	 * @const
	 */
	util.key32Re = /^-?(?:0|[1-9][0-9]*)$/;

	/**
	 * Regular expression used to verify 64 bit (`int64` etc.) map keys.
	 * @type {RegExp}
	 * @const
	 */
	util.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;

	/**
	 * Converts a number or long to an 8 characters long hash string.
	 * @param {Long|number} value Value to convert
	 * @returns {string} Hash
	 */
	util.longToHash = function longToHash(value) {
	    return value
	        ? util.LongBits.from(value).toHash()
	        : util.LongBits.zeroHash;
	};

	/**
	 * Converts an 8 characters long hash string to a long or number.
	 * @param {string} hash Hash
	 * @param {boolean} [unsigned=false] Whether unsigned or not
	 * @returns {Long|number} Original value
	 */
	util.longFromHash = function longFromHash(hash, unsigned) {
	    var bits = util.LongBits.fromHash(hash);
	    if (util.Long)
	        return util.Long.fromBits(bits.lo, bits.hi, unsigned);
	    return bits.toNumber(Boolean(unsigned));
	};

	/**
	 * Merges the properties of the source object into the destination object.
	 * @memberof util
	 * @param {Object.<string,*>} dst Destination object
	 * @param {Object.<string,*>} src Source object
	 * @param {boolean} [ifNotSet=false] Merges only if the key is not already set
	 * @returns {Object.<string,*>} Destination object
	 */
	function merge(dst, src, ifNotSet) { // used by converters
	    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)
	        if (dst[keys[i]] === undefined || !ifNotSet)
	            dst[keys[i]] = src[keys[i]];
	    return dst;
	}

	util.merge = merge;

	/**
	 * Converts the first character of a string to lower case.
	 * @param {string} str String to convert
	 * @returns {string} Converted string
	 */
	util.lcFirst = function lcFirst(str) {
	    return str.charAt(0).toLowerCase() + str.substring(1);
	};

	/**
	 * Creates a custom error constructor.
	 * @memberof util
	 * @param {string} name Error name
	 * @returns {Constructor<Error>} Custom error constructor
	 */
	function newError(name) {

	    function CustomError(message, properties) {

	        if (!(this instanceof CustomError))
	            return new CustomError(message, properties);

	        // Error.call(this, message);
	        // ^ just returns a new error instance because the ctor can be called as a function

	        Object.defineProperty(this, "message", { get: function() { return message; } });

	        /* istanbul ignore next */
	        if (Error.captureStackTrace) // node
	            Error.captureStackTrace(this, CustomError);
	        else
	            Object.defineProperty(this, "stack", { value: new Error().stack || "" });

	        if (properties)
	            merge(this, properties);
	    }

	    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;

	    Object.defineProperty(CustomError.prototype, "name", { get: function() { return name; } });

	    CustomError.prototype.toString = function toString() {
	        return this.name + ": " + this.message;
	    };

	    return CustomError;
	}

	util.newError = newError;

	/**
	 * Constructs a new protocol error.
	 * @classdesc Error subclass indicating a protocol specifc error.
	 * @memberof util
	 * @extends Error
	 * @template T extends Message<T>
	 * @constructor
	 * @param {string} message Error message
	 * @param {Object.<string,*>} [properties] Additional properties
	 * @example
	 * try {
	 *     MyMessage.decode(someBuffer); // throws if required fields are missing
	 * } catch (e) {
	 *     if (e instanceof ProtocolError && e.instance)
	 *         console.log("decoded so far: " + JSON.stringify(e.instance));
	 * }
	 */
	util.ProtocolError = newError("ProtocolError");

	/**
	 * So far decoded message instance.
	 * @name util.ProtocolError#instance
	 * @type {Message<T>}
	 */

	/**
	 * A OneOf getter as returned by {@link util.oneOfGetter}.
	 * @typedef OneOfGetter
	 * @type {function}
	 * @returns {string|undefined} Set field name, if any
	 */

	/**
	 * Builds a getter for a oneof's present field name.
	 * @param {string[]} fieldNames Field names
	 * @returns {OneOfGetter} Unbound getter
	 */
	util.oneOfGetter = function getOneOf(fieldNames) {
	    var fieldMap = {};
	    for (var i = 0; i < fieldNames.length; ++i)
	        fieldMap[fieldNames[i]] = 1;

	    /**
	     * @returns {string|undefined} Set field name, if any
	     * @this Object
	     * @ignore
	     */
	    return function() { // eslint-disable-line consistent-return
	        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)
	            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)
	                return keys[i];
	    };
	};

	/**
	 * A OneOf setter as returned by {@link util.oneOfSetter}.
	 * @typedef OneOfSetter
	 * @type {function}
	 * @param {string|undefined} value Field name
	 * @returns {undefined}
	 */

	/**
	 * Builds a setter for a oneof's present field name.
	 * @param {string[]} fieldNames Field names
	 * @returns {OneOfSetter} Unbound setter
	 */
	util.oneOfSetter = function setOneOf(fieldNames) {

	    /**
	     * @param {string} name Field name
	     * @returns {undefined}
	     * @this Object
	     * @ignore
	     */
	    return function(name) {
	        for (var i = 0; i < fieldNames.length; ++i)
	            if (fieldNames[i] !== name)
	                delete this[fieldNames[i]];
	    };
	};

	/**
	 * Default conversion options used for {@link Message#toJSON} implementations.
	 *
	 * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:
	 *
	 * - Longs become strings
	 * - Enums become string keys
	 * - Bytes become base64 encoded strings
	 * - (Sub-)Messages become plain objects
	 * - Maps become plain objects with all string keys
	 * - Repeated fields become arrays
	 * - NaN and Infinity for float and double fields become strings
	 *
	 * @type {IConversionOptions}
	 * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json
	 */
	util.toJSONOptions = {
	    longs: String,
	    enums: String,
	    bytes: String,
	    json: true
	};

	// Sets up buffer utility according to the environment (called in index-minimal)
	util._configure = function() {
	    var Buffer = util.Buffer;
	    /* istanbul ignore if */
	    if (!Buffer) {
	        util._Buffer_from = util._Buffer_allocUnsafe = null;
	        return;
	    }
	    // because node 4.x buffers are incompatible & immutable
	    // see: https://github.com/dcodeIO/protobuf.js/pull/665
	    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||
	        /* istanbul ignore next */
	        function Buffer_from(value, encoding) {
	            return new Buffer(value, encoding);
	        };
	    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||
	        /* istanbul ignore next */
	        function Buffer_allocUnsafe(size) {
	            return new Buffer(size);
	        };
	};
	});

	var writer = Writer;



	var BufferWriter$1; // cyclic

	var LongBits$1  = minimal$1.LongBits,
	    base64    = minimal$1.base64,
	    utf8$1      = minimal$1.utf8;

	/**
	 * Constructs a new writer operation instance.
	 * @classdesc Scheduled writer operation.
	 * @constructor
	 * @param {function(*, Uint8Array, number)} fn Function to call
	 * @param {number} len Value byte length
	 * @param {*} val Value to write
	 * @ignore
	 */
	function Op(fn, len, val) {

	    /**
	     * Function to call.
	     * @type {function(Uint8Array, number, *)}
	     */
	    this.fn = fn;

	    /**
	     * Value byte length.
	     * @type {number}
	     */
	    this.len = len;

	    /**
	     * Next operation.
	     * @type {Writer.Op|undefined}
	     */
	    this.next = undefined;

	    /**
	     * Value to write.
	     * @type {*}
	     */
	    this.val = val; // type varies
	}

	/* istanbul ignore next */
	function noop() {} // eslint-disable-line no-empty-function

	/**
	 * Constructs a new writer state instance.
	 * @classdesc Copied writer state.
	 * @memberof Writer
	 * @constructor
	 * @param {Writer} writer Writer to copy state from
	 * @ignore
	 */
	function State(writer) {

	    /**
	     * Current head.
	     * @type {Writer.Op}
	     */
	    this.head = writer.head;

	    /**
	     * Current tail.
	     * @type {Writer.Op}
	     */
	    this.tail = writer.tail;

	    /**
	     * Current buffer length.
	     * @type {number}
	     */
	    this.len = writer.len;

	    /**
	     * Next state.
	     * @type {State|null}
	     */
	    this.next = writer.states;
	}

	/**
	 * Constructs a new writer instance.
	 * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.
	 * @constructor
	 */
	function Writer() {

	    /**
	     * Current length.
	     * @type {number}
	     */
	    this.len = 0;

	    /**
	     * Operations head.
	     * @type {Object}
	     */
	    this.head = new Op(noop, 0, 0);

	    /**
	     * Operations tail
	     * @type {Object}
	     */
	    this.tail = this.head;

	    /**
	     * Linked forked states.
	     * @type {Object|null}
	     */
	    this.states = null;

	    // When a value is written, the writer calculates its byte length and puts it into a linked
	    // list of operations to perform when finish() is called. This both allows us to allocate
	    // buffers of the exact required size and reduces the amount of work we have to do compared
	    // to first calculating over objects and then encoding over objects. In our case, the encoding
	    // part is just a linked list walk calling operations with already prepared values.
	}

	var create$1 = function create() {
	    return minimal$1.Buffer
	        ? function create_buffer_setup() {
	            return (Writer.create = function create_buffer() {
	                return new BufferWriter$1();
	            })();
	        }
	        /* istanbul ignore next */
	        : function create_array() {
	            return new Writer();
	        };
	};

	/**
	 * Creates a new writer.
	 * @function
	 * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}
	 */
	Writer.create = create$1();

	/**
	 * Allocates a buffer of the specified size.
	 * @param {number} size Buffer size
	 * @returns {Uint8Array} Buffer
	 */
	Writer.alloc = function alloc(size) {
	    return new minimal$1.Array(size);
	};

	// Use Uint8Array buffer pool in the browser, just like node does with buffers
	/* istanbul ignore else */
	if (minimal$1.Array !== Array)
	    Writer.alloc = minimal$1.pool(Writer.alloc, minimal$1.Array.prototype.subarray);

	/**
	 * Pushes a new operation to the queue.
	 * @param {function(Uint8Array, number, *)} fn Function to call
	 * @param {number} len Value byte length
	 * @param {number} val Value to write
	 * @returns {Writer} `this`
	 * @private
	 */
	Writer.prototype._push = function push(fn, len, val) {
	    this.tail = this.tail.next = new Op(fn, len, val);
	    this.len += len;
	    return this;
	};

	function writeByte(val, buf, pos) {
	    buf[pos] = val & 255;
	}

	function writeVarint32(val, buf, pos) {
	    while (val > 127) {
	        buf[pos++] = val & 127 | 128;
	        val >>>= 7;
	    }
	    buf[pos] = val;
	}

	/**
	 * Constructs a new varint writer operation instance.
	 * @classdesc Scheduled varint writer operation.
	 * @extends Op
	 * @constructor
	 * @param {number} len Value byte length
	 * @param {number} val Value to write
	 * @ignore
	 */
	function VarintOp(len, val) {
	    this.len = len;
	    this.next = undefined;
	    this.val = val;
	}

	VarintOp.prototype = Object.create(Op.prototype);
	VarintOp.prototype.fn = writeVarint32;

	/**
	 * Writes an unsigned 32 bit value as a varint.
	 * @param {number} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer.prototype.uint32 = function write_uint32(value) {
	    // here, the call to this.push has been inlined and a varint specific Op subclass is used.
	    // uint32 is by far the most frequently used operation and benefits significantly from this.
	    this.len += (this.tail = this.tail.next = new VarintOp(
	        (value = value >>> 0)
	                < 128       ? 1
	        : value < 16384     ? 2
	        : value < 2097152   ? 3
	        : value < 268435456 ? 4
	        :                     5,
	    value)).len;
	    return this;
	};

	/**
	 * Writes a signed 32 bit value as a varint.
	 * @function
	 * @param {number} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer.prototype.int32 = function write_int32(value) {
	    return value < 0
	        ? this._push(writeVarint64, 10, LongBits$1.fromNumber(value)) // 10 bytes per spec
	        : this.uint32(value);
	};

	/**
	 * Writes a 32 bit value as a varint, zig-zag encoded.
	 * @param {number} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer.prototype.sint32 = function write_sint32(value) {
	    return this.uint32((value << 1 ^ value >> 31) >>> 0);
	};

	function writeVarint64(val, buf, pos) {
	    while (val.hi) {
	        buf[pos++] = val.lo & 127 | 128;
	        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;
	        val.hi >>>= 7;
	    }
	    while (val.lo > 127) {
	        buf[pos++] = val.lo & 127 | 128;
	        val.lo = val.lo >>> 7;
	    }
	    buf[pos++] = val.lo;
	}

	/**
	 * Writes an unsigned 64 bit value as a varint.
	 * @param {Long|number|string} value Value to write
	 * @returns {Writer} `this`
	 * @throws {TypeError} If `value` is a string and no long library is present.
	 */
	Writer.prototype.uint64 = function write_uint64(value) {
	    var bits = LongBits$1.from(value);
	    return this._push(writeVarint64, bits.length(), bits);
	};

	/**
	 * Writes a signed 64 bit value as a varint.
	 * @function
	 * @param {Long|number|string} value Value to write
	 * @returns {Writer} `this`
	 * @throws {TypeError} If `value` is a string and no long library is present.
	 */
	Writer.prototype.int64 = Writer.prototype.uint64;

	/**
	 * Writes a signed 64 bit value as a varint, zig-zag encoded.
	 * @param {Long|number|string} value Value to write
	 * @returns {Writer} `this`
	 * @throws {TypeError} If `value` is a string and no long library is present.
	 */
	Writer.prototype.sint64 = function write_sint64(value) {
	    var bits = LongBits$1.from(value).zzEncode();
	    return this._push(writeVarint64, bits.length(), bits);
	};

	/**
	 * Writes a boolish value as a varint.
	 * @param {boolean} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer.prototype.bool = function write_bool(value) {
	    return this._push(writeByte, 1, value ? 1 : 0);
	};

	function writeFixed32(val, buf, pos) {
	    buf[pos    ] =  val         & 255;
	    buf[pos + 1] =  val >>> 8   & 255;
	    buf[pos + 2] =  val >>> 16  & 255;
	    buf[pos + 3] =  val >>> 24;
	}

	/**
	 * Writes an unsigned 32 bit value as fixed 32 bits.
	 * @param {number} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer.prototype.fixed32 = function write_fixed32(value) {
	    return this._push(writeFixed32, 4, value >>> 0);
	};

	/**
	 * Writes a signed 32 bit value as fixed 32 bits.
	 * @function
	 * @param {number} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer.prototype.sfixed32 = Writer.prototype.fixed32;

	/**
	 * Writes an unsigned 64 bit value as fixed 64 bits.
	 * @param {Long|number|string} value Value to write
	 * @returns {Writer} `this`
	 * @throws {TypeError} If `value` is a string and no long library is present.
	 */
	Writer.prototype.fixed64 = function write_fixed64(value) {
	    var bits = LongBits$1.from(value);
	    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);
	};

	/**
	 * Writes a signed 64 bit value as fixed 64 bits.
	 * @function
	 * @param {Long|number|string} value Value to write
	 * @returns {Writer} `this`
	 * @throws {TypeError} If `value` is a string and no long library is present.
	 */
	Writer.prototype.sfixed64 = Writer.prototype.fixed64;

	/**
	 * Writes a float (32 bit).
	 * @function
	 * @param {number} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer.prototype.float = function write_float(value) {
	    return this._push(minimal$1.float.writeFloatLE, 4, value);
	};

	/**
	 * Writes a double (64 bit float).
	 * @function
	 * @param {number} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer.prototype.double = function write_double(value) {
	    return this._push(minimal$1.float.writeDoubleLE, 8, value);
	};

	var writeBytes = minimal$1.Array.prototype.set
	    ? function writeBytes_set(val, buf, pos) {
	        buf.set(val, pos); // also works for plain array values
	    }
	    /* istanbul ignore next */
	    : function writeBytes_for(val, buf, pos) {
	        for (var i = 0; i < val.length; ++i)
	            buf[pos + i] = val[i];
	    };

	/**
	 * Writes a sequence of bytes.
	 * @param {Uint8Array|string} value Buffer or base64 encoded string to write
	 * @returns {Writer} `this`
	 */
	Writer.prototype.bytes = function write_bytes(value) {
	    var len = value.length >>> 0;
	    if (!len)
	        return this._push(writeByte, 1, 0);
	    if (minimal$1.isString(value)) {
	        var buf = Writer.alloc(len = base64.length(value));
	        base64.decode(value, buf, 0);
	        value = buf;
	    }
	    return this.uint32(len)._push(writeBytes, len, value);
	};

	/**
	 * Writes a string.
	 * @param {string} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer.prototype.string = function write_string(value) {
	    var len = utf8$1.length(value);
	    return len
	        ? this.uint32(len)._push(utf8$1.write, len, value)
	        : this._push(writeByte, 1, 0);
	};

	/**
	 * Forks this writer's state by pushing it to a stack.
	 * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.
	 * @returns {Writer} `this`
	 */
	Writer.prototype.fork = function fork() {
	    this.states = new State(this);
	    this.head = this.tail = new Op(noop, 0, 0);
	    this.len = 0;
	    return this;
	};

	/**
	 * Resets this instance to the last state.
	 * @returns {Writer} `this`
	 */
	Writer.prototype.reset = function reset() {
	    if (this.states) {
	        this.head   = this.states.head;
	        this.tail   = this.states.tail;
	        this.len    = this.states.len;
	        this.states = this.states.next;
	    } else {
	        this.head = this.tail = new Op(noop, 0, 0);
	        this.len  = 0;
	    }
	    return this;
	};

	/**
	 * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.
	 * @returns {Writer} `this`
	 */
	Writer.prototype.ldelim = function ldelim() {
	    var head = this.head,
	        tail = this.tail,
	        len  = this.len;
	    this.reset().uint32(len);
	    if (len) {
	        this.tail.next = head.next; // skip noop
	        this.tail = tail;
	        this.len += len;
	    }
	    return this;
	};

	/**
	 * Finishes the write operation.
	 * @returns {Uint8Array} Finished buffer
	 */
	Writer.prototype.finish = function finish() {
	    var head = this.head.next, // skip noop
	        buf  = this.constructor.alloc(this.len),
	        pos  = 0;
	    while (head) {
	        head.fn(head.val, buf, pos);
	        pos += head.len;
	        head = head.next;
	    }
	    // this.head = this.tail = null;
	    return buf;
	};

	Writer._configure = function(BufferWriter_) {
	    BufferWriter$1 = BufferWriter_;
	    Writer.create = create$1();
	    BufferWriter$1._configure();
	};

	var writer_buffer = BufferWriter;

	// extends Writer

	(BufferWriter.prototype = Object.create(writer.prototype)).constructor = BufferWriter;



	/**
	 * Constructs a new buffer writer instance.
	 * @classdesc Wire format writer using node buffers.
	 * @extends Writer
	 * @constructor
	 */
	function BufferWriter() {
	    writer.call(this);
	}

	BufferWriter._configure = function () {
	    /**
	     * Allocates a buffer of the specified size.
	     * @function
	     * @param {number} size Buffer size
	     * @returns {Buffer} Buffer
	     */
	    BufferWriter.alloc = minimal$1._Buffer_allocUnsafe;

	    BufferWriter.writeBytesBuffer = minimal$1.Buffer && minimal$1.Buffer.prototype instanceof Uint8Array && minimal$1.Buffer.prototype.set.name === "set"
	        ? function writeBytesBuffer_set(val, buf, pos) {
	          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)
	          // also works for plain array values
	        }
	        /* istanbul ignore next */
	        : function writeBytesBuffer_copy(val, buf, pos) {
	          if (val.copy) // Buffer values
	            val.copy(buf, pos, 0, val.length);
	          else for (var i = 0; i < val.length;) // plain array values
	            buf[pos++] = val[i++];
	        };
	};


	/**
	 * @override
	 */
	BufferWriter.prototype.bytes = function write_bytes_buffer(value) {
	    if (minimal$1.isString(value))
	        value = minimal$1._Buffer_from(value, "base64");
	    var len = value.length >>> 0;
	    this.uint32(len);
	    if (len)
	        this._push(BufferWriter.writeBytesBuffer, len, value);
	    return this;
	};

	function writeStringBuffer(val, buf, pos) {
	    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)
	        minimal$1.utf8.write(val, buf, pos);
	    else if (buf.utf8Write)
	        buf.utf8Write(val, pos);
	    else
	        buf.write(val, pos);
	}

	/**
	 * @override
	 */
	BufferWriter.prototype.string = function write_string_buffer(value) {
	    var len = minimal$1.Buffer.byteLength(value);
	    this.uint32(len);
	    if (len)
	        this._push(writeStringBuffer, len, value);
	    return this;
	};


	/**
	 * Finishes the write operation.
	 * @name BufferWriter#finish
	 * @function
	 * @returns {Buffer} Finished buffer
	 */

	BufferWriter._configure();

	var reader = Reader;



	var BufferReader$1; // cyclic

	var LongBits  = minimal$1.LongBits,
	    utf8      = minimal$1.utf8;

	/* istanbul ignore next */
	function indexOutOfRange(reader, writeLength) {
	    return RangeError("index out of range: " + reader.pos + " + " + (writeLength || 1) + " > " + reader.len);
	}

	/**
	 * Constructs a new reader instance using the specified buffer.
	 * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.
	 * @constructor
	 * @param {Uint8Array} buffer Buffer to read from
	 */
	function Reader(buffer) {

	    /**
	     * Read buffer.
	     * @type {Uint8Array}
	     */
	    this.buf = buffer;

	    /**
	     * Read buffer position.
	     * @type {number}
	     */
	    this.pos = 0;

	    /**
	     * Read buffer length.
	     * @type {number}
	     */
	    this.len = buffer.length;
	}

	var create_array = typeof Uint8Array !== "undefined"
	    ? function create_typed_array(buffer) {
	        if (buffer instanceof Uint8Array || Array.isArray(buffer))
	            return new Reader(buffer);
	        throw Error("illegal buffer");
	    }
	    /* istanbul ignore next */
	    : function create_array(buffer) {
	        if (Array.isArray(buffer))
	            return new Reader(buffer);
	        throw Error("illegal buffer");
	    };

	var create = function create() {
	    return minimal$1.Buffer
	        ? function create_buffer_setup(buffer) {
	            return (Reader.create = function create_buffer(buffer) {
	                return minimal$1.Buffer.isBuffer(buffer)
	                    ? new BufferReader$1(buffer)
	                    /* istanbul ignore next */
	                    : create_array(buffer);
	            })(buffer);
	        }
	        /* istanbul ignore next */
	        : create_array;
	};

	/**
	 * Creates a new reader using the specified buffer.
	 * @function
	 * @param {Uint8Array|Buffer} buffer Buffer to read from
	 * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}
	 * @throws {Error} If `buffer` is not a valid buffer
	 */
	Reader.create = create();

	Reader.prototype._slice = minimal$1.Array.prototype.subarray || /* istanbul ignore next */ minimal$1.Array.prototype.slice;

	/**
	 * Reads a varint as an unsigned 32 bit value.
	 * @function
	 * @returns {number} Value read
	 */
	Reader.prototype.uint32 = (function read_uint32_setup() {
	    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)
	    return function read_uint32() {
	        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;
	        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;
	        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;
	        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;
	        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;

	        /* istanbul ignore if */
	        if ((this.pos += 5) > this.len) {
	            this.pos = this.len;
	            throw indexOutOfRange(this, 10);
	        }
	        return value;
	    };
	})();

	/**
	 * Reads a varint as a signed 32 bit value.
	 * @returns {number} Value read
	 */
	Reader.prototype.int32 = function read_int32() {
	    return this.uint32() | 0;
	};

	/**
	 * Reads a zig-zag encoded varint as a signed 32 bit value.
	 * @returns {number} Value read
	 */
	Reader.prototype.sint32 = function read_sint32() {
	    var value = this.uint32();
	    return value >>> 1 ^ -(value & 1) | 0;
	};

	/* eslint-disable no-invalid-this */

	function readLongVarint() {
	    // tends to deopt with local vars for octet etc.
	    var bits = new LongBits(0, 0);
	    var i = 0;
	    if (this.len - this.pos > 4) { // fast route (lo)
	        for (; i < 4; ++i) {
	            // 1st..4th
	            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
	            if (this.buf[this.pos++] < 128)
	                return bits;
	        }
	        // 5th
	        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;
	        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;
	        if (this.buf[this.pos++] < 128)
	            return bits;
	        i = 0;
	    } else {
	        for (; i < 3; ++i) {
	            /* istanbul ignore if */
	            if (this.pos >= this.len)
	                throw indexOutOfRange(this);
	            // 1st..3th
	            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
	            if (this.buf[this.pos++] < 128)
	                return bits;
	        }
	        // 4th
	        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;
	        return bits;
	    }
	    if (this.len - this.pos > 4) { // fast route (hi)
	        for (; i < 5; ++i) {
	            // 6th..10th
	            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
	            if (this.buf[this.pos++] < 128)
	                return bits;
	        }
	    } else {
	        for (; i < 5; ++i) {
	            /* istanbul ignore if */
	            if (this.pos >= this.len)
	                throw indexOutOfRange(this);
	            // 6th..10th
	            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
	            if (this.buf[this.pos++] < 128)
	                return bits;
	        }
	    }
	    /* istanbul ignore next */
	    throw Error("invalid varint encoding");
	}

	/* eslint-enable no-invalid-this */

	/**
	 * Reads a varint as a signed 64 bit value.
	 * @name Reader#int64
	 * @function
	 * @returns {Long} Value read
	 */

	/**
	 * Reads a varint as an unsigned 64 bit value.
	 * @name Reader#uint64
	 * @function
	 * @returns {Long} Value read
	 */

	/**
	 * Reads a zig-zag encoded varint as a signed 64 bit value.
	 * @name Reader#sint64
	 * @function
	 * @returns {Long} Value read
	 */

	/**
	 * Reads a varint as a boolean.
	 * @returns {boolean} Value read
	 */
	Reader.prototype.bool = function read_bool() {
	    return this.uint32() !== 0;
	};

	function readFixed32_end(buf, end) { // note that this uses `end`, not `pos`
	    return (buf[end - 4]
	          | buf[end - 3] << 8
	          | buf[end - 2] << 16
	          | buf[end - 1] << 24) >>> 0;
	}

	/**
	 * Reads fixed 32 bits as an unsigned 32 bit integer.
	 * @returns {number} Value read
	 */
	Reader.prototype.fixed32 = function read_fixed32() {

	    /* istanbul ignore if */
	    if (this.pos + 4 > this.len)
	        throw indexOutOfRange(this, 4);

	    return readFixed32_end(this.buf, this.pos += 4);
	};

	/**
	 * Reads fixed 32 bits as a signed 32 bit integer.
	 * @returns {number} Value read
	 */
	Reader.prototype.sfixed32 = function read_sfixed32() {

	    /* istanbul ignore if */
	    if (this.pos + 4 > this.len)
	        throw indexOutOfRange(this, 4);

	    return readFixed32_end(this.buf, this.pos += 4) | 0;
	};

	/* eslint-disable no-invalid-this */

	function readFixed64(/* this: Reader */) {

	    /* istanbul ignore if */
	    if (this.pos + 8 > this.len)
	        throw indexOutOfRange(this, 8);

	    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));
	}

	/* eslint-enable no-invalid-this */

	/**
	 * Reads fixed 64 bits.
	 * @name Reader#fixed64
	 * @function
	 * @returns {Long} Value read
	 */

	/**
	 * Reads zig-zag encoded fixed 64 bits.
	 * @name Reader#sfixed64
	 * @function
	 * @returns {Long} Value read
	 */

	/**
	 * Reads a float (32 bit) as a number.
	 * @function
	 * @returns {number} Value read
	 */
	Reader.prototype.float = function read_float() {

	    /* istanbul ignore if */
	    if (this.pos + 4 > this.len)
	        throw indexOutOfRange(this, 4);

	    var value = minimal$1.float.readFloatLE(this.buf, this.pos);
	    this.pos += 4;
	    return value;
	};

	/**
	 * Reads a double (64 bit float) as a number.
	 * @function
	 * @returns {number} Value read
	 */
	Reader.prototype.double = function read_double() {

	    /* istanbul ignore if */
	    if (this.pos + 8 > this.len)
	        throw indexOutOfRange(this, 4);

	    var value = minimal$1.float.readDoubleLE(this.buf, this.pos);
	    this.pos += 8;
	    return value;
	};

	/**
	 * Reads a sequence of bytes preceeded by its length as a varint.
	 * @returns {Uint8Array} Value read
	 */
	Reader.prototype.bytes = function read_bytes() {
	    var length = this.uint32(),
	        start  = this.pos,
	        end    = this.pos + length;

	    /* istanbul ignore if */
	    if (end > this.len)
	        throw indexOutOfRange(this, length);

	    this.pos += length;
	    if (Array.isArray(this.buf)) // plain array
	        return this.buf.slice(start, end);
	    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1
	        ? new this.buf.constructor(0)
	        : this._slice.call(this.buf, start, end);
	};

	/**
	 * Reads a string preceeded by its byte length as a varint.
	 * @returns {string} Value read
	 */
	Reader.prototype.string = function read_string() {
	    var bytes = this.bytes();
	    return utf8.read(bytes, 0, bytes.length);
	};

	/**
	 * Skips the specified number of bytes if specified, otherwise skips a varint.
	 * @param {number} [length] Length if known, otherwise a varint is assumed
	 * @returns {Reader} `this`
	 */
	Reader.prototype.skip = function skip(length) {
	    if (typeof length === "number") {
	        /* istanbul ignore if */
	        if (this.pos + length > this.len)
	            throw indexOutOfRange(this, length);
	        this.pos += length;
	    } else {
	        do {
	            /* istanbul ignore if */
	            if (this.pos >= this.len)
	                throw indexOutOfRange(this);
	        } while (this.buf[this.pos++] & 128);
	    }
	    return this;
	};

	/**
	 * Skips the next element of the specified wire type.
	 * @param {number} wireType Wire type received
	 * @returns {Reader} `this`
	 */
	Reader.prototype.skipType = function(wireType) {
	    switch (wireType) {
	        case 0:
	            this.skip();
	            break;
	        case 1:
	            this.skip(8);
	            break;
	        case 2:
	            this.skip(this.uint32());
	            break;
	        case 3:
	            while ((wireType = this.uint32() & 7) !== 4) {
	                this.skipType(wireType);
	            }
	            break;
	        case 5:
	            this.skip(4);
	            break;

	        /* istanbul ignore next */
	        default:
	            throw Error("invalid wire type " + wireType + " at offset " + this.pos);
	    }
	    return this;
	};

	Reader._configure = function(BufferReader_) {
	    BufferReader$1 = BufferReader_;
	    Reader.create = create();
	    BufferReader$1._configure();

	    var fn = minimal$1.Long ? "toLong" : /* istanbul ignore next */ "toNumber";
	    minimal$1.merge(Reader.prototype, {

	        int64: function read_int64() {
	            return readLongVarint.call(this)[fn](false);
	        },

	        uint64: function read_uint64() {
	            return readLongVarint.call(this)[fn](true);
	        },

	        sint64: function read_sint64() {
	            return readLongVarint.call(this).zzDecode()[fn](false);
	        },

	        fixed64: function read_fixed64() {
	            return readFixed64.call(this)[fn](true);
	        },

	        sfixed64: function read_sfixed64() {
	            return readFixed64.call(this)[fn](false);
	        }

	    });
	};

	var reader_buffer = BufferReader;

	// extends Reader

	(BufferReader.prototype = Object.create(reader.prototype)).constructor = BufferReader;



	/**
	 * Constructs a new buffer reader instance.
	 * @classdesc Wire format reader using node buffers.
	 * @extends Reader
	 * @constructor
	 * @param {Buffer} buffer Buffer to read from
	 */
	function BufferReader(buffer) {
	    reader.call(this, buffer);

	    /**
	     * Read buffer.
	     * @name BufferReader#buf
	     * @type {Buffer}
	     */
	}

	BufferReader._configure = function () {
	    /* istanbul ignore else */
	    if (minimal$1.Buffer)
	        BufferReader.prototype._slice = minimal$1.Buffer.prototype.slice;
	};


	/**
	 * @override
	 */
	BufferReader.prototype.string = function read_string_buffer() {
	    var len = this.uint32(); // modifies pos
	    return this.buf.utf8Slice
	        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))
	        : this.buf.toString("utf-8", this.pos, this.pos = Math.min(this.pos + len, this.len));
	};

	/**
	 * Reads a sequence of bytes preceeded by its length as a varint.
	 * @name BufferReader#bytes
	 * @function
	 * @returns {Buffer} Value read
	 */

	BufferReader._configure();

	var service = Service;



	// Extends EventEmitter
	(Service.prototype = Object.create(minimal$1.EventEmitter.prototype)).constructor = Service;

	/**
	 * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.
	 *
	 * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.
	 * @typedef rpc.ServiceMethodCallback
	 * @template TRes extends Message<TRes>
	 * @type {function}
	 * @param {Error|null} error Error, if any
	 * @param {TRes} [response] Response message
	 * @returns {undefined}
	 */

	/**
	 * A service method part of a {@link rpc.Service} as created by {@link Service.create}.
	 * @typedef rpc.ServiceMethod
	 * @template TReq extends Message<TReq>
	 * @template TRes extends Message<TRes>
	 * @type {function}
	 * @param {TReq|Properties<TReq>} request Request message or plain object
	 * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message
	 * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`
	 */

	/**
	 * Constructs a new RPC service instance.
	 * @classdesc An RPC service as returned by {@link Service#create}.
	 * @exports rpc.Service
	 * @extends util.EventEmitter
	 * @constructor
	 * @param {RPCImpl} rpcImpl RPC implementation
	 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
	 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
	 */
	function Service(rpcImpl, requestDelimited, responseDelimited) {

	    if (typeof rpcImpl !== "function")
	        throw TypeError("rpcImpl must be a function");

	    minimal$1.EventEmitter.call(this);

	    /**
	     * RPC implementation. Becomes `null` once the service is ended.
	     * @type {RPCImpl|null}
	     */
	    this.rpcImpl = rpcImpl;

	    /**
	     * Whether requests are length-delimited.
	     * @type {boolean}
	     */
	    this.requestDelimited = Boolean(requestDelimited);

	    /**
	     * Whether responses are length-delimited.
	     * @type {boolean}
	     */
	    this.responseDelimited = Boolean(responseDelimited);
	}

	/**
	 * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.
	 * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method
	 * @param {Constructor<TReq>} requestCtor Request constructor
	 * @param {Constructor<TRes>} responseCtor Response constructor
	 * @param {TReq|Properties<TReq>} request Request message or plain object
	 * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback
	 * @returns {undefined}
	 * @template TReq extends Message<TReq>
	 * @template TRes extends Message<TRes>
	 */
	Service.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {

	    if (!request)
	        throw TypeError("request must be specified");

	    var self = this;
	    if (!callback)
	        return minimal$1.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);

	    if (!self.rpcImpl) {
	        setTimeout(function() { callback(Error("already ended")); }, 0);
	        return undefined;
	    }

	    try {
	        return self.rpcImpl(
	            method,
	            requestCtor[self.requestDelimited ? "encodeDelimited" : "encode"](request).finish(),
	            function rpcCallback(err, response) {

	                if (err) {
	                    self.emit("error", err, method);
	                    return callback(err);
	                }

	                if (response === null) {
	                    self.end(/* endedByRPC */ true);
	                    return undefined;
	                }

	                if (!(response instanceof responseCtor)) {
	                    try {
	                        response = responseCtor[self.responseDelimited ? "decodeDelimited" : "decode"](response);
	                    } catch (err) {
	                        self.emit("error", err, method);
	                        return callback(err);
	                    }
	                }

	                self.emit("data", response, method);
	                return callback(null, response);
	            }
	        );
	    } catch (err) {
	        self.emit("error", err, method);
	        setTimeout(function() { callback(err); }, 0);
	        return undefined;
	    }
	};

	/**
	 * Ends this service and emits the `end` event.
	 * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.
	 * @returns {rpc.Service} `this`
	 */
	Service.prototype.end = function end(endedByRPC) {
	    if (this.rpcImpl) {
	        if (!endedByRPC) // signal end to rpcImpl
	            this.rpcImpl(null, null, null);
	        this.rpcImpl = null;
	        this.emit("end").off();
	    }
	    return this;
	};

	var rpc_1 = createCommonjsModule(function (module, exports) {

	/**
	 * Streaming RPC helpers.
	 * @namespace
	 */
	var rpc = exports;

	/**
	 * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.
	 * @typedef RPCImpl
	 * @type {function}
	 * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called
	 * @param {Uint8Array} requestData Request data
	 * @param {RPCImplCallback} callback Callback function
	 * @returns {undefined}
	 * @example
	 * function rpcImpl(method, requestData, callback) {
	 *     if (protobuf.util.lcFirst(method.name) !== "myMethod") // compatible with static code
	 *         throw Error("no such method");
	 *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {
	 *         callback(err, responseData);
	 *     });
	 * }
	 */

	/**
	 * Node-style callback as used by {@link RPCImpl}.
	 * @typedef RPCImplCallback
	 * @type {function}
	 * @param {Error|null} error Error, if any, otherwise `null`
	 * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error
	 * @returns {undefined}
	 */

	rpc.Service = service;
	});

	var roots = {};

	var indexMinimal = createCommonjsModule(function (module, exports) {
	var protobuf = exports;

	/**
	 * Build type, one of `"full"`, `"light"` or `"minimal"`.
	 * @name build
	 * @type {string}
	 * @const
	 */
	protobuf.build = "minimal";

	// Serialization
	protobuf.Writer       = writer;
	protobuf.BufferWriter = writer_buffer;
	protobuf.Reader       = reader;
	protobuf.BufferReader = reader_buffer;

	// Utility
	protobuf.util         = minimal$1;
	protobuf.rpc          = rpc_1;
	protobuf.roots        = roots;
	protobuf.configure    = configure;

	/* istanbul ignore next */
	/**
	 * Reconfigures the library according to the environment.
	 * @returns {undefined}
	 */
	function configure() {
	    protobuf.util._configure();
	    protobuf.Writer._configure(protobuf.BufferWriter);
	    protobuf.Reader._configure(protobuf.BufferReader);
	}

	// Set up buffer utility according to the environment
	configure();
	});

	var minimal = indexMinimal;

	/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/



	// Common aliases
	var $Reader = minimal.Reader, $Writer = minimal.Writer, $util = minimal.util;

	// Exported root namespace
	var $root = minimal.roots["default"] || (minimal.roots["default"] = {});

	$root.com = (function() {

	    /**
	     * Namespace com.
	     * @exports com
	     * @namespace
	     */
	    var com = {};

	    com.signalfx = (function() {

	        /**
	         * Namespace signalfx.
	         * @memberof com
	         * @namespace
	         */
	        var signalfx = {};

	        signalfx.metrics = (function() {

	            /**
	             * Namespace metrics.
	             * @memberof com.signalfx
	             * @namespace
	             */
	            var metrics = {};

	            metrics.protobuf = (function() {

	                /**
	                 * Namespace protobuf.
	                 * @memberof com.signalfx.metrics
	                 * @namespace
	                 */
	                var protobuf = {};

	                /**
	                 * MetricType enum.
	                 * @name com.signalfx.metrics.protobuf.MetricType
	                 * @enum {string}
	                 * @property {number} GAUGE=0 Numerical: Periodic, instantaneous measurement of some state.
	                 * @property {number} COUNTER=1 Numerical: Count of occurrences. Generally non-negative integers.
	                 * @property {number} ENUM=2 String: Used for non-continuous quantities (that is, measurements where there is a fixed
	                 * set of meaningful values). This is essentially a special case of gauge.
	                 * @property {number} CUMULATIVE_COUNTER=3 Tracks a value that increases over time, where only the difference is important.
	                 */
	                protobuf.MetricType = (function() {
	                    var valuesById = {}, values = Object.create(valuesById);
	                    values[valuesById[0] = "GAUGE"] = 0;
	                    values[valuesById[1] = "COUNTER"] = 1;
	                    values[valuesById[2] = "ENUM"] = 2;
	                    values[valuesById[3] = "CUMULATIVE_COUNTER"] = 3;
	                    return values;
	                })();

	                protobuf.Datum = (function() {

	                    /**
	                     * Properties of a Datum.
	                     * @memberof com.signalfx.metrics.protobuf
	                     * @interface IDatum
	                     * @property {string|null} [strValue] Datum strValue
	                     * @property {number|null} [doubleValue] Datum doubleValue
	                     * @property {number|Long|null} [intValue] Datum intValue
	                     */

	                    /**
	                     * Constructs a new Datum.
	                     * @memberof com.signalfx.metrics.protobuf
	                     * @classdesc Represents a Datum.
	                     * @implements IDatum
	                     * @constructor
	                     * @param {com.signalfx.metrics.protobuf.IDatum=} [properties] Properties to set
	                     */
	                    function Datum(properties) {
	                        if (properties)
	                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
	                                if (properties[keys[i]] != null)
	                                    this[keys[i]] = properties[keys[i]];
	                    }

	                    /**
	                     * Datum strValue.
	                     * @member {string} strValue
	                     * @memberof com.signalfx.metrics.protobuf.Datum
	                     * @instance
	                     */
	                    Datum.prototype.strValue = "";

	                    /**
	                     * Datum doubleValue.
	                     * @member {number} doubleValue
	                     * @memberof com.signalfx.metrics.protobuf.Datum
	                     * @instance
	                     */
	                    Datum.prototype.doubleValue = 0;

	                    /**
	                     * Datum intValue.
	                     * @member {number|Long} intValue
	                     * @memberof com.signalfx.metrics.protobuf.Datum
	                     * @instance
	                     */
	                    Datum.prototype.intValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

	                    /**
	                     * Creates a new Datum instance using the specified properties.
	                     * @function create
	                     * @memberof com.signalfx.metrics.protobuf.Datum
	                     * @static
	                     * @param {com.signalfx.metrics.protobuf.IDatum=} [properties] Properties to set
	                     * @returns {com.signalfx.metrics.protobuf.Datum} Datum instance
	                     */
	                    Datum.create = function create(properties) {
	                        return new Datum(properties);
	                    };

	                    /**
	                     * Encodes the specified Datum message. Does not implicitly {@link com.signalfx.metrics.protobuf.Datum.verify|verify} messages.
	                     * @function encode
	                     * @memberof com.signalfx.metrics.protobuf.Datum
	                     * @static
	                     * @param {com.signalfx.metrics.protobuf.IDatum} message Datum message or plain object to encode
	                     * @param {$protobuf.Writer} [writer] Writer to encode to
	                     * @returns {$protobuf.Writer} Writer
	                     */
	                    Datum.encode = function encode(message, writer) {
	                        if (!writer)
	                            writer = $Writer.create();
	                        if (message.strValue != null && message.hasOwnProperty("strValue"))
	                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.strValue);
	                        if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
	                            writer.uint32(/* id 2, wireType 1 =*/17).double(message.doubleValue);
	                        if (message.intValue != null && message.hasOwnProperty("intValue"))
	                            writer.uint32(/* id 3, wireType 0 =*/24).int64(message.intValue);
	                        return writer;
	                    };

	                    /**
	                     * Encodes the specified Datum message, length delimited. Does not implicitly {@link com.signalfx.metrics.protobuf.Datum.verify|verify} messages.
	                     * @function encodeDelimited
	                     * @memberof com.signalfx.metrics.protobuf.Datum
	                     * @static
	                     * @param {com.signalfx.metrics.protobuf.IDatum} message Datum message or plain object to encode
	                     * @param {$protobuf.Writer} [writer] Writer to encode to
	                     * @returns {$protobuf.Writer} Writer
	                     */
	                    Datum.encodeDelimited = function encodeDelimited(message, writer) {
	                        return this.encode(message, writer).ldelim();
	                    };

	                    /**
	                     * Decodes a Datum message from the specified reader or buffer.
	                     * @function decode
	                     * @memberof com.signalfx.metrics.protobuf.Datum
	                     * @static
	                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
	                     * @param {number} [length] Message length if known beforehand
	                     * @returns {com.signalfx.metrics.protobuf.Datum} Datum
	                     * @throws {Error} If the payload is not a reader or valid buffer
	                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                     */
	                    Datum.decode = function decode(reader, length) {
	                        if (!(reader instanceof $Reader))
	                            reader = $Reader.create(reader);
	                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.signalfx.metrics.protobuf.Datum();
	                        while (reader.pos < end) {
	                            var tag = reader.uint32();
	                            switch (tag >>> 3) {
	                            case 1:
	                                message.strValue = reader.string();
	                                break;
	                            case 2:
	                                message.doubleValue = reader.double();
	                                break;
	                            case 3:
	                                message.intValue = reader.int64();
	                                break;
	                            default:
	                                reader.skipType(tag & 7);
	                                break;
	                            }
	                        }
	                        return message;
	                    };

	                    /**
	                     * Decodes a Datum message from the specified reader or buffer, length delimited.
	                     * @function decodeDelimited
	                     * @memberof com.signalfx.metrics.protobuf.Datum
	                     * @static
	                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
	                     * @returns {com.signalfx.metrics.protobuf.Datum} Datum
	                     * @throws {Error} If the payload is not a reader or valid buffer
	                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                     */
	                    Datum.decodeDelimited = function decodeDelimited(reader) {
	                        if (!(reader instanceof $Reader))
	                            reader = new $Reader(reader);
	                        return this.decode(reader, reader.uint32());
	                    };

	                    /**
	                     * Verifies a Datum message.
	                     * @function verify
	                     * @memberof com.signalfx.metrics.protobuf.Datum
	                     * @static
	                     * @param {Object.<string,*>} message Plain object to verify
	                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
	                     */
	                    Datum.verify = function verify(message) {
	                        if (typeof message !== "object" || message === null)
	                            return "object expected";
	                        if (message.strValue != null && message.hasOwnProperty("strValue"))
	                            if (!$util.isString(message.strValue))
	                                return "strValue: string expected";
	                        if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
	                            if (typeof message.doubleValue !== "number")
	                                return "doubleValue: number expected";
	                        if (message.intValue != null && message.hasOwnProperty("intValue"))
	                            if (!$util.isInteger(message.intValue) && !(message.intValue && $util.isInteger(message.intValue.low) && $util.isInteger(message.intValue.high)))
	                                return "intValue: integer|Long expected";
	                        return null;
	                    };

	                    /**
	                     * Creates a Datum message from a plain object. Also converts values to their respective internal types.
	                     * @function fromObject
	                     * @memberof com.signalfx.metrics.protobuf.Datum
	                     * @static
	                     * @param {Object.<string,*>} object Plain object
	                     * @returns {com.signalfx.metrics.protobuf.Datum} Datum
	                     */
	                    Datum.fromObject = function fromObject(object) {
	                        if (object instanceof $root.com.signalfx.metrics.protobuf.Datum)
	                            return object;
	                        var message = new $root.com.signalfx.metrics.protobuf.Datum();
	                        if (object.strValue != null)
	                            message.strValue = String(object.strValue);
	                        if (object.doubleValue != null)
	                            message.doubleValue = Number(object.doubleValue);
	                        if (object.intValue != null)
	                            if ($util.Long)
	                                (message.intValue = $util.Long.fromValue(object.intValue)).unsigned = false;
	                            else if (typeof object.intValue === "string")
	                                message.intValue = parseInt(object.intValue, 10);
	                            else if (typeof object.intValue === "number")
	                                message.intValue = object.intValue;
	                            else if (typeof object.intValue === "object")
	                                message.intValue = new $util.LongBits(object.intValue.low >>> 0, object.intValue.high >>> 0).toNumber();
	                        return message;
	                    };

	                    /**
	                     * Creates a plain object from a Datum message. Also converts values to other types if specified.
	                     * @function toObject
	                     * @memberof com.signalfx.metrics.protobuf.Datum
	                     * @static
	                     * @param {com.signalfx.metrics.protobuf.Datum} message Datum
	                     * @param {$protobuf.IConversionOptions} [options] Conversion options
	                     * @returns {Object.<string,*>} Plain object
	                     */
	                    Datum.toObject = function toObject(message, options) {
	                        if (!options)
	                            options = {};
	                        var object = {};
	                        if (options.defaults) {
	                            object.strValue = "";
	                            object.doubleValue = 0;
	                            if ($util.Long) {
	                                var long = new $util.Long(0, 0, false);
	                                object.intValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
	                            } else
	                                object.intValue = options.longs === String ? "0" : 0;
	                        }
	                        if (message.strValue != null && message.hasOwnProperty("strValue"))
	                            object.strValue = message.strValue;
	                        if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
	                            object.doubleValue = options.json && !isFinite(message.doubleValue) ? String(message.doubleValue) : message.doubleValue;
	                        if (message.intValue != null && message.hasOwnProperty("intValue"))
	                            if (typeof message.intValue === "number")
	                                object.intValue = options.longs === String ? String(message.intValue) : message.intValue;
	                            else
	                                object.intValue = options.longs === String ? $util.Long.prototype.toString.call(message.intValue) : options.longs === Number ? new $util.LongBits(message.intValue.low >>> 0, message.intValue.high >>> 0).toNumber() : message.intValue;
	                        return object;
	                    };

	                    /**
	                     * Converts this Datum to JSON.
	                     * @function toJSON
	                     * @memberof com.signalfx.metrics.protobuf.Datum
	                     * @instance
	                     * @returns {Object.<string,*>} JSON object
	                     */
	                    Datum.prototype.toJSON = function toJSON() {
	                        return this.constructor.toObject(this, minimal.util.toJSONOptions);
	                    };

	                    return Datum;
	                })();

	                protobuf.Dimension = (function() {

	                    /**
	                     * Properties of a Dimension.
	                     * @memberof com.signalfx.metrics.protobuf
	                     * @interface IDimension
	                     * @property {string|null} [key] Dimension key
	                     * @property {string|null} [value] Dimension value
	                     */

	                    /**
	                     * Constructs a new Dimension.
	                     * @memberof com.signalfx.metrics.protobuf
	                     * @classdesc Represents a Dimension.
	                     * @implements IDimension
	                     * @constructor
	                     * @param {com.signalfx.metrics.protobuf.IDimension=} [properties] Properties to set
	                     */
	                    function Dimension(properties) {
	                        if (properties)
	                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
	                                if (properties[keys[i]] != null)
	                                    this[keys[i]] = properties[keys[i]];
	                    }

	                    /**
	                     * Dimension key.
	                     * @member {string} key
	                     * @memberof com.signalfx.metrics.protobuf.Dimension
	                     * @instance
	                     */
	                    Dimension.prototype.key = "";

	                    /**
	                     * Dimension value.
	                     * @member {string} value
	                     * @memberof com.signalfx.metrics.protobuf.Dimension
	                     * @instance
	                     */
	                    Dimension.prototype.value = "";

	                    /**
	                     * Creates a new Dimension instance using the specified properties.
	                     * @function create
	                     * @memberof com.signalfx.metrics.protobuf.Dimension
	                     * @static
	                     * @param {com.signalfx.metrics.protobuf.IDimension=} [properties] Properties to set
	                     * @returns {com.signalfx.metrics.protobuf.Dimension} Dimension instance
	                     */
	                    Dimension.create = function create(properties) {
	                        return new Dimension(properties);
	                    };

	                    /**
	                     * Encodes the specified Dimension message. Does not implicitly {@link com.signalfx.metrics.protobuf.Dimension.verify|verify} messages.
	                     * @function encode
	                     * @memberof com.signalfx.metrics.protobuf.Dimension
	                     * @static
	                     * @param {com.signalfx.metrics.protobuf.IDimension} message Dimension message or plain object to encode
	                     * @param {$protobuf.Writer} [writer] Writer to encode to
	                     * @returns {$protobuf.Writer} Writer
	                     */
	                    Dimension.encode = function encode(message, writer) {
	                        if (!writer)
	                            writer = $Writer.create();
	                        if (message.key != null && message.hasOwnProperty("key"))
	                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);
	                        if (message.value != null && message.hasOwnProperty("value"))
	                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);
	                        return writer;
	                    };

	                    /**
	                     * Encodes the specified Dimension message, length delimited. Does not implicitly {@link com.signalfx.metrics.protobuf.Dimension.verify|verify} messages.
	                     * @function encodeDelimited
	                     * @memberof com.signalfx.metrics.protobuf.Dimension
	                     * @static
	                     * @param {com.signalfx.metrics.protobuf.IDimension} message Dimension message or plain object to encode
	                     * @param {$protobuf.Writer} [writer] Writer to encode to
	                     * @returns {$protobuf.Writer} Writer
	                     */
	                    Dimension.encodeDelimited = function encodeDelimited(message, writer) {
	                        return this.encode(message, writer).ldelim();
	                    };

	                    /**
	                     * Decodes a Dimension message from the specified reader or buffer.
	                     * @function decode
	                     * @memberof com.signalfx.metrics.protobuf.Dimension
	                     * @static
	                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
	                     * @param {number} [length] Message length if known beforehand
	                     * @returns {com.signalfx.metrics.protobuf.Dimension} Dimension
	                     * @throws {Error} If the payload is not a reader or valid buffer
	                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                     */
	                    Dimension.decode = function decode(reader, length) {
	                        if (!(reader instanceof $Reader))
	                            reader = $Reader.create(reader);
	                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.signalfx.metrics.protobuf.Dimension();
	                        while (reader.pos < end) {
	                            var tag = reader.uint32();
	                            switch (tag >>> 3) {
	                            case 1:
	                                message.key = reader.string();
	                                break;
	                            case 2:
	                                message.value = reader.string();
	                                break;
	                            default:
	                                reader.skipType(tag & 7);
	                                break;
	                            }
	                        }
	                        return message;
	                    };

	                    /**
	                     * Decodes a Dimension message from the specified reader or buffer, length delimited.
	                     * @function decodeDelimited
	                     * @memberof com.signalfx.metrics.protobuf.Dimension
	                     * @static
	                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
	                     * @returns {com.signalfx.metrics.protobuf.Dimension} Dimension
	                     * @throws {Error} If the payload is not a reader or valid buffer
	                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                     */
	                    Dimension.decodeDelimited = function decodeDelimited(reader) {
	                        if (!(reader instanceof $Reader))
	                            reader = new $Reader(reader);
	                        return this.decode(reader, reader.uint32());
	                    };

	                    /**
	                     * Verifies a Dimension message.
	                     * @function verify
	                     * @memberof com.signalfx.metrics.protobuf.Dimension
	                     * @static
	                     * @param {Object.<string,*>} message Plain object to verify
	                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
	                     */
	                    Dimension.verify = function verify(message) {
	                        if (typeof message !== "object" || message === null)
	                            return "object expected";
	                        if (message.key != null && message.hasOwnProperty("key"))
	                            if (!$util.isString(message.key))
	                                return "key: string expected";
	                        if (message.value != null && message.hasOwnProperty("value"))
	                            if (!$util.isString(message.value))
	                                return "value: string expected";
	                        return null;
	                    };

	                    /**
	                     * Creates a Dimension message from a plain object. Also converts values to their respective internal types.
	                     * @function fromObject
	                     * @memberof com.signalfx.metrics.protobuf.Dimension
	                     * @static
	                     * @param {Object.<string,*>} object Plain object
	                     * @returns {com.signalfx.metrics.protobuf.Dimension} Dimension
	                     */
	                    Dimension.fromObject = function fromObject(object) {
	                        if (object instanceof $root.com.signalfx.metrics.protobuf.Dimension)
	                            return object;
	                        var message = new $root.com.signalfx.metrics.protobuf.Dimension();
	                        if (object.key != null)
	                            message.key = String(object.key);
	                        if (object.value != null)
	                            message.value = String(object.value);
	                        return message;
	                    };

	                    /**
	                     * Creates a plain object from a Dimension message. Also converts values to other types if specified.
	                     * @function toObject
	                     * @memberof com.signalfx.metrics.protobuf.Dimension
	                     * @static
	                     * @param {com.signalfx.metrics.protobuf.Dimension} message Dimension
	                     * @param {$protobuf.IConversionOptions} [options] Conversion options
	                     * @returns {Object.<string,*>} Plain object
	                     */
	                    Dimension.toObject = function toObject(message, options) {
	                        if (!options)
	                            options = {};
	                        var object = {};
	                        if (options.defaults) {
	                            object.key = "";
	                            object.value = "";
	                        }
	                        if (message.key != null && message.hasOwnProperty("key"))
	                            object.key = message.key;
	                        if (message.value != null && message.hasOwnProperty("value"))
	                            object.value = message.value;
	                        return object;
	                    };

	                    /**
	                     * Converts this Dimension to JSON.
	                     * @function toJSON
	                     * @memberof com.signalfx.metrics.protobuf.Dimension
	                     * @instance
	                     * @returns {Object.<string,*>} JSON object
	                     */
	                    Dimension.prototype.toJSON = function toJSON() {
	                        return this.constructor.toObject(this, minimal.util.toJSONOptions);
	                    };

	                    return Dimension;
	                })();

	                protobuf.DataPoint = (function() {

	                    /**
	                     * Properties of a DataPoint.
	                     * @memberof com.signalfx.metrics.protobuf
	                     * @interface IDataPoint
	                     * @property {string|null} [source] DataPoint source
	                     * @property {string|null} [metric] DataPoint metric
	                     * @property {number|Long|null} [timestamp] DataPoint timestamp
	                     * @property {com.signalfx.metrics.protobuf.IDatum|null} [value] DataPoint value
	                     * @property {com.signalfx.metrics.protobuf.MetricType|null} [metricType] DataPoint metricType
	                     * @property {Array.<com.signalfx.metrics.protobuf.IDimension>|null} [dimensions] DataPoint dimensions
	                     */

	                    /**
	                     * Constructs a new DataPoint.
	                     * @memberof com.signalfx.metrics.protobuf
	                     * @classdesc Represents a DataPoint.
	                     * @implements IDataPoint
	                     * @constructor
	                     * @param {com.signalfx.metrics.protobuf.IDataPoint=} [properties] Properties to set
	                     */
	                    function DataPoint(properties) {
	                        this.dimensions = [];
	                        if (properties)
	                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
	                                if (properties[keys[i]] != null)
	                                    this[keys[i]] = properties[keys[i]];
	                    }

	                    /**
	                     * DataPoint source.
	                     * @member {string} source
	                     * @memberof com.signalfx.metrics.protobuf.DataPoint
	                     * @instance
	                     */
	                    DataPoint.prototype.source = "";

	                    /**
	                     * DataPoint metric.
	                     * @member {string} metric
	                     * @memberof com.signalfx.metrics.protobuf.DataPoint
	                     * @instance
	                     */
	                    DataPoint.prototype.metric = "";

	                    /**
	                     * DataPoint timestamp.
	                     * @member {number|Long} timestamp
	                     * @memberof com.signalfx.metrics.protobuf.DataPoint
	                     * @instance
	                     */
	                    DataPoint.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

	                    /**
	                     * DataPoint value.
	                     * @member {com.signalfx.metrics.protobuf.IDatum|null|undefined} value
	                     * @memberof com.signalfx.metrics.protobuf.DataPoint
	                     * @instance
	                     */
	                    DataPoint.prototype.value = null;

	                    /**
	                     * DataPoint metricType.
	                     * @member {com.signalfx.metrics.protobuf.MetricType} metricType
	                     * @memberof com.signalfx.metrics.protobuf.DataPoint
	                     * @instance
	                     */
	                    DataPoint.prototype.metricType = 0;

	                    /**
	                     * DataPoint dimensions.
	                     * @member {Array.<com.signalfx.metrics.protobuf.IDimension>} dimensions
	                     * @memberof com.signalfx.metrics.protobuf.DataPoint
	                     * @instance
	                     */
	                    DataPoint.prototype.dimensions = $util.emptyArray;

	                    /**
	                     * Creates a new DataPoint instance using the specified properties.
	                     * @function create
	                     * @memberof com.signalfx.metrics.protobuf.DataPoint
	                     * @static
	                     * @param {com.signalfx.metrics.protobuf.IDataPoint=} [properties] Properties to set
	                     * @returns {com.signalfx.metrics.protobuf.DataPoint} DataPoint instance
	                     */
	                    DataPoint.create = function create(properties) {
	                        return new DataPoint(properties);
	                    };

	                    /**
	                     * Encodes the specified DataPoint message. Does not implicitly {@link com.signalfx.metrics.protobuf.DataPoint.verify|verify} messages.
	                     * @function encode
	                     * @memberof com.signalfx.metrics.protobuf.DataPoint
	                     * @static
	                     * @param {com.signalfx.metrics.protobuf.IDataPoint} message DataPoint message or plain object to encode
	                     * @param {$protobuf.Writer} [writer] Writer to encode to
	                     * @returns {$protobuf.Writer} Writer
	                     */
	                    DataPoint.encode = function encode(message, writer) {
	                        if (!writer)
	                            writer = $Writer.create();
	                        if (message.source != null && message.hasOwnProperty("source"))
	                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.source);
	                        if (message.metric != null && message.hasOwnProperty("metric"))
	                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.metric);
	                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
	                            writer.uint32(/* id 3, wireType 0 =*/24).int64(message.timestamp);
	                        if (message.value != null && message.hasOwnProperty("value"))
	                            $root.com.signalfx.metrics.protobuf.Datum.encode(message.value, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
	                        if (message.metricType != null && message.hasOwnProperty("metricType"))
	                            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.metricType);
	                        if (message.dimensions != null && message.dimensions.length)
	                            for (var i = 0; i < message.dimensions.length; ++i)
	                                $root.com.signalfx.metrics.protobuf.Dimension.encode(message.dimensions[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
	                        return writer;
	                    };

	                    /**
	                     * Encodes the specified DataPoint message, length delimited. Does not implicitly {@link com.signalfx.metrics.protobuf.DataPoint.verify|verify} messages.
	                     * @function encodeDelimited
	                     * @memberof com.signalfx.metrics.protobuf.DataPoint
	                     * @static
	                     * @param {com.signalfx.metrics.protobuf.IDataPoint} message DataPoint message or plain object to encode
	                     * @param {$protobuf.Writer} [writer] Writer to encode to
	                     * @returns {$protobuf.Writer} Writer
	                     */
	                    DataPoint.encodeDelimited = function encodeDelimited(message, writer) {
	                        return this.encode(message, writer).ldelim();
	                    };

	                    /**
	                     * Decodes a DataPoint message from the specified reader or buffer.
	                     * @function decode
	                     * @memberof com.signalfx.metrics.protobuf.DataPoint
	                     * @static
	                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
	                     * @param {number} [length] Message length if known beforehand
	                     * @returns {com.signalfx.metrics.protobuf.DataPoint} DataPoint
	                     * @throws {Error} If the payload is not a reader or valid buffer
	                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                     */
	                    DataPoint.decode = function decode(reader, length) {
	                        if (!(reader instanceof $Reader))
	                            reader = $Reader.create(reader);
	                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.signalfx.metrics.protobuf.DataPoint();
	                        while (reader.pos < end) {
	                            var tag = reader.uint32();
	                            switch (tag >>> 3) {
	                            case 1:
	                                message.source = reader.string();
	                                break;
	                            case 2:
	                                message.metric = reader.string();
	                                break;
	                            case 3:
	                                message.timestamp = reader.int64();
	                                break;
	                            case 4:
	                                message.value = $root.com.signalfx.metrics.protobuf.Datum.decode(reader, reader.uint32());
	                                break;
	                            case 5:
	                                message.metricType = reader.int32();
	                                break;
	                            case 6:
	                                if (!(message.dimensions && message.dimensions.length))
	                                    message.dimensions = [];
	                                message.dimensions.push($root.com.signalfx.metrics.protobuf.Dimension.decode(reader, reader.uint32()));
	                                break;
	                            default:
	                                reader.skipType(tag & 7);
	                                break;
	                            }
	                        }
	                        return message;
	                    };

	                    /**
	                     * Decodes a DataPoint message from the specified reader or buffer, length delimited.
	                     * @function decodeDelimited
	                     * @memberof com.signalfx.metrics.protobuf.DataPoint
	                     * @static
	                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
	                     * @returns {com.signalfx.metrics.protobuf.DataPoint} DataPoint
	                     * @throws {Error} If the payload is not a reader or valid buffer
	                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                     */
	                    DataPoint.decodeDelimited = function decodeDelimited(reader) {
	                        if (!(reader instanceof $Reader))
	                            reader = new $Reader(reader);
	                        return this.decode(reader, reader.uint32());
	                    };

	                    /**
	                     * Verifies a DataPoint message.
	                     * @function verify
	                     * @memberof com.signalfx.metrics.protobuf.DataPoint
	                     * @static
	                     * @param {Object.<string,*>} message Plain object to verify
	                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
	                     */
	                    DataPoint.verify = function verify(message) {
	                        if (typeof message !== "object" || message === null)
	                            return "object expected";
	                        if (message.source != null && message.hasOwnProperty("source"))
	                            if (!$util.isString(message.source))
	                                return "source: string expected";
	                        if (message.metric != null && message.hasOwnProperty("metric"))
	                            if (!$util.isString(message.metric))
	                                return "metric: string expected";
	                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
	                            if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))
	                                return "timestamp: integer|Long expected";
	                        if (message.value != null && message.hasOwnProperty("value")) {
	                            var error = $root.com.signalfx.metrics.protobuf.Datum.verify(message.value);
	                            if (error)
	                                return "value." + error;
	                        }
	                        if (message.metricType != null && message.hasOwnProperty("metricType"))
	                            switch (message.metricType) {
	                            default:
	                                return "metricType: enum value expected";
	                            case 0:
	                            case 1:
	                            case 2:
	                            case 3:
	                                break;
	                            }
	                        if (message.dimensions != null && message.hasOwnProperty("dimensions")) {
	                            if (!Array.isArray(message.dimensions))
	                                return "dimensions: array expected";
	                            for (var i = 0; i < message.dimensions.length; ++i) {
	                                var error = $root.com.signalfx.metrics.protobuf.Dimension.verify(message.dimensions[i]);
	                                if (error)
	                                    return "dimensions." + error;
	                            }
	                        }
	                        return null;
	                    };

	                    /**
	                     * Creates a DataPoint message from a plain object. Also converts values to their respective internal types.
	                     * @function fromObject
	                     * @memberof com.signalfx.metrics.protobuf.DataPoint
	                     * @static
	                     * @param {Object.<string,*>} object Plain object
	                     * @returns {com.signalfx.metrics.protobuf.DataPoint} DataPoint
	                     */
	                    DataPoint.fromObject = function fromObject(object) {
	                        if (object instanceof $root.com.signalfx.metrics.protobuf.DataPoint)
	                            return object;
	                        var message = new $root.com.signalfx.metrics.protobuf.DataPoint();
	                        if (object.source != null)
	                            message.source = String(object.source);
	                        if (object.metric != null)
	                            message.metric = String(object.metric);
	                        if (object.timestamp != null)
	                            if ($util.Long)
	                                (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = false;
	                            else if (typeof object.timestamp === "string")
	                                message.timestamp = parseInt(object.timestamp, 10);
	                            else if (typeof object.timestamp === "number")
	                                message.timestamp = object.timestamp;
	                            else if (typeof object.timestamp === "object")
	                                message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber();
	                        if (object.value != null) {
	                            if (typeof object.value !== "object")
	                                throw TypeError(".com.signalfx.metrics.protobuf.DataPoint.value: object expected");
	                            message.value = $root.com.signalfx.metrics.protobuf.Datum.fromObject(object.value);
	                        }
	                        switch (object.metricType) {
	                        case "GAUGE":
	                        case 0:
	                            message.metricType = 0;
	                            break;
	                        case "COUNTER":
	                        case 1:
	                            message.metricType = 1;
	                            break;
	                        case "ENUM":
	                        case 2:
	                            message.metricType = 2;
	                            break;
	                        case "CUMULATIVE_COUNTER":
	                        case 3:
	                            message.metricType = 3;
	                            break;
	                        }
	                        if (object.dimensions) {
	                            if (!Array.isArray(object.dimensions))
	                                throw TypeError(".com.signalfx.metrics.protobuf.DataPoint.dimensions: array expected");
	                            message.dimensions = [];
	                            for (var i = 0; i < object.dimensions.length; ++i) {
	                                if (typeof object.dimensions[i] !== "object")
	                                    throw TypeError(".com.signalfx.metrics.protobuf.DataPoint.dimensions: object expected");
	                                message.dimensions[i] = $root.com.signalfx.metrics.protobuf.Dimension.fromObject(object.dimensions[i]);
	                            }
	                        }
	                        return message;
	                    };

	                    /**
	                     * Creates a plain object from a DataPoint message. Also converts values to other types if specified.
	                     * @function toObject
	                     * @memberof com.signalfx.metrics.protobuf.DataPoint
	                     * @static
	                     * @param {com.signalfx.metrics.protobuf.DataPoint} message DataPoint
	                     * @param {$protobuf.IConversionOptions} [options] Conversion options
	                     * @returns {Object.<string,*>} Plain object
	                     */
	                    DataPoint.toObject = function toObject(message, options) {
	                        if (!options)
	                            options = {};
	                        var object = {};
	                        if (options.arrays || options.defaults)
	                            object.dimensions = [];
	                        if (options.defaults) {
	                            object.source = "";
	                            object.metric = "";
	                            if ($util.Long) {
	                                var long = new $util.Long(0, 0, false);
	                                object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
	                            } else
	                                object.timestamp = options.longs === String ? "0" : 0;
	                            object.value = null;
	                            object.metricType = options.enums === String ? "GAUGE" : 0;
	                        }
	                        if (message.source != null && message.hasOwnProperty("source"))
	                            object.source = message.source;
	                        if (message.metric != null && message.hasOwnProperty("metric"))
	                            object.metric = message.metric;
	                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
	                            if (typeof message.timestamp === "number")
	                                object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;
	                            else
	                                object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber() : message.timestamp;
	                        if (message.value != null && message.hasOwnProperty("value"))
	                            object.value = $root.com.signalfx.metrics.protobuf.Datum.toObject(message.value, options);
	                        if (message.metricType != null && message.hasOwnProperty("metricType"))
	                            object.metricType = options.enums === String ? $root.com.signalfx.metrics.protobuf.MetricType[message.metricType] : message.metricType;
	                        if (message.dimensions && message.dimensions.length) {
	                            object.dimensions = [];
	                            for (var j = 0; j < message.dimensions.length; ++j)
	                                object.dimensions[j] = $root.com.signalfx.metrics.protobuf.Dimension.toObject(message.dimensions[j], options);
	                        }
	                        return object;
	                    };

	                    /**
	                     * Converts this DataPoint to JSON.
	                     * @function toJSON
	                     * @memberof com.signalfx.metrics.protobuf.DataPoint
	                     * @instance
	                     * @returns {Object.<string,*>} JSON object
	                     */
	                    DataPoint.prototype.toJSON = function toJSON() {
	                        return this.constructor.toObject(this, minimal.util.toJSONOptions);
	                    };

	                    return DataPoint;
	                })();

	                protobuf.DataPointUploadMessage = (function() {

	                    /**
	                     * Properties of a DataPointUploadMessage.
	                     * @memberof com.signalfx.metrics.protobuf
	                     * @interface IDataPointUploadMessage
	                     * @property {Array.<com.signalfx.metrics.protobuf.IDataPoint>|null} [datapoints] DataPointUploadMessage datapoints
	                     */

	                    /**
	                     * Constructs a new DataPointUploadMessage.
	                     * @memberof com.signalfx.metrics.protobuf
	                     * @classdesc Represents a DataPointUploadMessage.
	                     * @implements IDataPointUploadMessage
	                     * @constructor
	                     * @param {com.signalfx.metrics.protobuf.IDataPointUploadMessage=} [properties] Properties to set
	                     */
	                    function DataPointUploadMessage(properties) {
	                        this.datapoints = [];
	                        if (properties)
	                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
	                                if (properties[keys[i]] != null)
	                                    this[keys[i]] = properties[keys[i]];
	                    }

	                    /**
	                     * DataPointUploadMessage datapoints.
	                     * @member {Array.<com.signalfx.metrics.protobuf.IDataPoint>} datapoints
	                     * @memberof com.signalfx.metrics.protobuf.DataPointUploadMessage
	                     * @instance
	                     */
	                    DataPointUploadMessage.prototype.datapoints = $util.emptyArray;

	                    /**
	                     * Creates a new DataPointUploadMessage instance using the specified properties.
	                     * @function create
	                     * @memberof com.signalfx.metrics.protobuf.DataPointUploadMessage
	                     * @static
	                     * @param {com.signalfx.metrics.protobuf.IDataPointUploadMessage=} [properties] Properties to set
	                     * @returns {com.signalfx.metrics.protobuf.DataPointUploadMessage} DataPointUploadMessage instance
	                     */
	                    DataPointUploadMessage.create = function create(properties) {
	                        return new DataPointUploadMessage(properties);
	                    };

	                    /**
	                     * Encodes the specified DataPointUploadMessage message. Does not implicitly {@link com.signalfx.metrics.protobuf.DataPointUploadMessage.verify|verify} messages.
	                     * @function encode
	                     * @memberof com.signalfx.metrics.protobuf.DataPointUploadMessage
	                     * @static
	                     * @param {com.signalfx.metrics.protobuf.IDataPointUploadMessage} message DataPointUploadMessage message or plain object to encode
	                     * @param {$protobuf.Writer} [writer] Writer to encode to
	                     * @returns {$protobuf.Writer} Writer
	                     */
	                    DataPointUploadMessage.encode = function encode(message, writer) {
	                        if (!writer)
	                            writer = $Writer.create();
	                        if (message.datapoints != null && message.datapoints.length)
	                            for (var i = 0; i < message.datapoints.length; ++i)
	                                $root.com.signalfx.metrics.protobuf.DataPoint.encode(message.datapoints[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
	                        return writer;
	                    };

	                    /**
	                     * Encodes the specified DataPointUploadMessage message, length delimited. Does not implicitly {@link com.signalfx.metrics.protobuf.DataPointUploadMessage.verify|verify} messages.
	                     * @function encodeDelimited
	                     * @memberof com.signalfx.metrics.protobuf.DataPointUploadMessage
	                     * @static
	                     * @param {com.signalfx.metrics.protobuf.IDataPointUploadMessage} message DataPointUploadMessage message or plain object to encode
	                     * @param {$protobuf.Writer} [writer] Writer to encode to
	                     * @returns {$protobuf.Writer} Writer
	                     */
	                    DataPointUploadMessage.encodeDelimited = function encodeDelimited(message, writer) {
	                        return this.encode(message, writer).ldelim();
	                    };

	                    /**
	                     * Decodes a DataPointUploadMessage message from the specified reader or buffer.
	                     * @function decode
	                     * @memberof com.signalfx.metrics.protobuf.DataPointUploadMessage
	                     * @static
	                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
	                     * @param {number} [length] Message length if known beforehand
	                     * @returns {com.signalfx.metrics.protobuf.DataPointUploadMessage} DataPointUploadMessage
	                     * @throws {Error} If the payload is not a reader or valid buffer
	                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                     */
	                    DataPointUploadMessage.decode = function decode(reader, length) {
	                        if (!(reader instanceof $Reader))
	                            reader = $Reader.create(reader);
	                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.signalfx.metrics.protobuf.DataPointUploadMessage();
	                        while (reader.pos < end) {
	                            var tag = reader.uint32();
	                            switch (tag >>> 3) {
	                            case 1:
	                                if (!(message.datapoints && message.datapoints.length))
	                                    message.datapoints = [];
	                                message.datapoints.push($root.com.signalfx.metrics.protobuf.DataPoint.decode(reader, reader.uint32()));
	                                break;
	                            default:
	                                reader.skipType(tag & 7);
	                                break;
	                            }
	                        }
	                        return message;
	                    };

	                    /**
	                     * Decodes a DataPointUploadMessage message from the specified reader or buffer, length delimited.
	                     * @function decodeDelimited
	                     * @memberof com.signalfx.metrics.protobuf.DataPointUploadMessage
	                     * @static
	                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
	                     * @returns {com.signalfx.metrics.protobuf.DataPointUploadMessage} DataPointUploadMessage
	                     * @throws {Error} If the payload is not a reader or valid buffer
	                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                     */
	                    DataPointUploadMessage.decodeDelimited = function decodeDelimited(reader) {
	                        if (!(reader instanceof $Reader))
	                            reader = new $Reader(reader);
	                        return this.decode(reader, reader.uint32());
	                    };

	                    /**
	                     * Verifies a DataPointUploadMessage message.
	                     * @function verify
	                     * @memberof com.signalfx.metrics.protobuf.DataPointUploadMessage
	                     * @static
	                     * @param {Object.<string,*>} message Plain object to verify
	                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
	                     */
	                    DataPointUploadMessage.verify = function verify(message) {
	                        if (typeof message !== "object" || message === null)
	                            return "object expected";
	                        if (message.datapoints != null && message.hasOwnProperty("datapoints")) {
	                            if (!Array.isArray(message.datapoints))
	                                return "datapoints: array expected";
	                            for (var i = 0; i < message.datapoints.length; ++i) {
	                                var error = $root.com.signalfx.metrics.protobuf.DataPoint.verify(message.datapoints[i]);
	                                if (error)
	                                    return "datapoints." + error;
	                            }
	                        }
	                        return null;
	                    };

	                    /**
	                     * Creates a DataPointUploadMessage message from a plain object. Also converts values to their respective internal types.
	                     * @function fromObject
	                     * @memberof com.signalfx.metrics.protobuf.DataPointUploadMessage
	                     * @static
	                     * @param {Object.<string,*>} object Plain object
	                     * @returns {com.signalfx.metrics.protobuf.DataPointUploadMessage} DataPointUploadMessage
	                     */
	                    DataPointUploadMessage.fromObject = function fromObject(object) {
	                        if (object instanceof $root.com.signalfx.metrics.protobuf.DataPointUploadMessage)
	                            return object;
	                        var message = new $root.com.signalfx.metrics.protobuf.DataPointUploadMessage();
	                        if (object.datapoints) {
	                            if (!Array.isArray(object.datapoints))
	                                throw TypeError(".com.signalfx.metrics.protobuf.DataPointUploadMessage.datapoints: array expected");
	                            message.datapoints = [];
	                            for (var i = 0; i < object.datapoints.length; ++i) {
	                                if (typeof object.datapoints[i] !== "object")
	                                    throw TypeError(".com.signalfx.metrics.protobuf.DataPointUploadMessage.datapoints: object expected");
	                                message.datapoints[i] = $root.com.signalfx.metrics.protobuf.DataPoint.fromObject(object.datapoints[i]);
	                            }
	                        }
	                        return message;
	                    };

	                    /**
	                     * Creates a plain object from a DataPointUploadMessage message. Also converts values to other types if specified.
	                     * @function toObject
	                     * @memberof com.signalfx.metrics.protobuf.DataPointUploadMessage
	                     * @static
	                     * @param {com.signalfx.metrics.protobuf.DataPointUploadMessage} message DataPointUploadMessage
	                     * @param {$protobuf.IConversionOptions} [options] Conversion options
	                     * @returns {Object.<string,*>} Plain object
	                     */
	                    DataPointUploadMessage.toObject = function toObject(message, options) {
	                        if (!options)
	                            options = {};
	                        var object = {};
	                        if (options.arrays || options.defaults)
	                            object.datapoints = [];
	                        if (message.datapoints && message.datapoints.length) {
	                            object.datapoints = [];
	                            for (var j = 0; j < message.datapoints.length; ++j)
	                                object.datapoints[j] = $root.com.signalfx.metrics.protobuf.DataPoint.toObject(message.datapoints[j], options);
	                        }
	                        return object;
	                    };

	                    /**
	                     * Converts this DataPointUploadMessage to JSON.
	                     * @function toJSON
	                     * @memberof com.signalfx.metrics.protobuf.DataPointUploadMessage
	                     * @instance
	                     * @returns {Object.<string,*>} JSON object
	                     */
	                    DataPointUploadMessage.prototype.toJSON = function toJSON() {
	                        return this.constructor.toObject(this, minimal.util.toJSONOptions);
	                    };

	                    return DataPointUploadMessage;
	                })();

	                protobuf.PointValue = (function() {

	                    /**
	                     * Properties of a PointValue.
	                     * @memberof com.signalfx.metrics.protobuf
	                     * @interface IPointValue
	                     * @property {number|Long|null} [timestamp] PointValue timestamp
	                     * @property {com.signalfx.metrics.protobuf.IDatum|null} [value] PointValue value
	                     */

	                    /**
	                     * Constructs a new PointValue.
	                     * @memberof com.signalfx.metrics.protobuf
	                     * @classdesc Represents a PointValue.
	                     * @implements IPointValue
	                     * @constructor
	                     * @param {com.signalfx.metrics.protobuf.IPointValue=} [properties] Properties to set
	                     */
	                    function PointValue(properties) {
	                        if (properties)
	                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
	                                if (properties[keys[i]] != null)
	                                    this[keys[i]] = properties[keys[i]];
	                    }

	                    /**
	                     * PointValue timestamp.
	                     * @member {number|Long} timestamp
	                     * @memberof com.signalfx.metrics.protobuf.PointValue
	                     * @instance
	                     */
	                    PointValue.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

	                    /**
	                     * PointValue value.
	                     * @member {com.signalfx.metrics.protobuf.IDatum|null|undefined} value
	                     * @memberof com.signalfx.metrics.protobuf.PointValue
	                     * @instance
	                     */
	                    PointValue.prototype.value = null;

	                    /**
	                     * Creates a new PointValue instance using the specified properties.
	                     * @function create
	                     * @memberof com.signalfx.metrics.protobuf.PointValue
	                     * @static
	                     * @param {com.signalfx.metrics.protobuf.IPointValue=} [properties] Properties to set
	                     * @returns {com.signalfx.metrics.protobuf.PointValue} PointValue instance
	                     */
	                    PointValue.create = function create(properties) {
	                        return new PointValue(properties);
	                    };

	                    /**
	                     * Encodes the specified PointValue message. Does not implicitly {@link com.signalfx.metrics.protobuf.PointValue.verify|verify} messages.
	                     * @function encode
	                     * @memberof com.signalfx.metrics.protobuf.PointValue
	                     * @static
	                     * @param {com.signalfx.metrics.protobuf.IPointValue} message PointValue message or plain object to encode
	                     * @param {$protobuf.Writer} [writer] Writer to encode to
	                     * @returns {$protobuf.Writer} Writer
	                     */
	                    PointValue.encode = function encode(message, writer) {
	                        if (!writer)
	                            writer = $Writer.create();
	                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
	                            writer.uint32(/* id 3, wireType 0 =*/24).int64(message.timestamp);
	                        if (message.value != null && message.hasOwnProperty("value"))
	                            $root.com.signalfx.metrics.protobuf.Datum.encode(message.value, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
	                        return writer;
	                    };

	                    /**
	                     * Encodes the specified PointValue message, length delimited. Does not implicitly {@link com.signalfx.metrics.protobuf.PointValue.verify|verify} messages.
	                     * @function encodeDelimited
	                     * @memberof com.signalfx.metrics.protobuf.PointValue
	                     * @static
	                     * @param {com.signalfx.metrics.protobuf.IPointValue} message PointValue message or plain object to encode
	                     * @param {$protobuf.Writer} [writer] Writer to encode to
	                     * @returns {$protobuf.Writer} Writer
	                     */
	                    PointValue.encodeDelimited = function encodeDelimited(message, writer) {
	                        return this.encode(message, writer).ldelim();
	                    };

	                    /**
	                     * Decodes a PointValue message from the specified reader or buffer.
	                     * @function decode
	                     * @memberof com.signalfx.metrics.protobuf.PointValue
	                     * @static
	                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
	                     * @param {number} [length] Message length if known beforehand
	                     * @returns {com.signalfx.metrics.protobuf.PointValue} PointValue
	                     * @throws {Error} If the payload is not a reader or valid buffer
	                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                     */
	                    PointValue.decode = function decode(reader, length) {
	                        if (!(reader instanceof $Reader))
	                            reader = $Reader.create(reader);
	                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.signalfx.metrics.protobuf.PointValue();
	                        while (reader.pos < end) {
	                            var tag = reader.uint32();
	                            switch (tag >>> 3) {
	                            case 3:
	                                message.timestamp = reader.int64();
	                                break;
	                            case 4:
	                                message.value = $root.com.signalfx.metrics.protobuf.Datum.decode(reader, reader.uint32());
	                                break;
	                            default:
	                                reader.skipType(tag & 7);
	                                break;
	                            }
	                        }
	                        return message;
	                    };

	                    /**
	                     * Decodes a PointValue message from the specified reader or buffer, length delimited.
	                     * @function decodeDelimited
	                     * @memberof com.signalfx.metrics.protobuf.PointValue
	                     * @static
	                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
	                     * @returns {com.signalfx.metrics.protobuf.PointValue} PointValue
	                     * @throws {Error} If the payload is not a reader or valid buffer
	                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                     */
	                    PointValue.decodeDelimited = function decodeDelimited(reader) {
	                        if (!(reader instanceof $Reader))
	                            reader = new $Reader(reader);
	                        return this.decode(reader, reader.uint32());
	                    };

	                    /**
	                     * Verifies a PointValue message.
	                     * @function verify
	                     * @memberof com.signalfx.metrics.protobuf.PointValue
	                     * @static
	                     * @param {Object.<string,*>} message Plain object to verify
	                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
	                     */
	                    PointValue.verify = function verify(message) {
	                        if (typeof message !== "object" || message === null)
	                            return "object expected";
	                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
	                            if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))
	                                return "timestamp: integer|Long expected";
	                        if (message.value != null && message.hasOwnProperty("value")) {
	                            var error = $root.com.signalfx.metrics.protobuf.Datum.verify(message.value);
	                            if (error)
	                                return "value." + error;
	                        }
	                        return null;
	                    };

	                    /**
	                     * Creates a PointValue message from a plain object. Also converts values to their respective internal types.
	                     * @function fromObject
	                     * @memberof com.signalfx.metrics.protobuf.PointValue
	                     * @static
	                     * @param {Object.<string,*>} object Plain object
	                     * @returns {com.signalfx.metrics.protobuf.PointValue} PointValue
	                     */
	                    PointValue.fromObject = function fromObject(object) {
	                        if (object instanceof $root.com.signalfx.metrics.protobuf.PointValue)
	                            return object;
	                        var message = new $root.com.signalfx.metrics.protobuf.PointValue();
	                        if (object.timestamp != null)
	                            if ($util.Long)
	                                (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = false;
	                            else if (typeof object.timestamp === "string")
	                                message.timestamp = parseInt(object.timestamp, 10);
	                            else if (typeof object.timestamp === "number")
	                                message.timestamp = object.timestamp;
	                            else if (typeof object.timestamp === "object")
	                                message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber();
	                        if (object.value != null) {
	                            if (typeof object.value !== "object")
	                                throw TypeError(".com.signalfx.metrics.protobuf.PointValue.value: object expected");
	                            message.value = $root.com.signalfx.metrics.protobuf.Datum.fromObject(object.value);
	                        }
	                        return message;
	                    };

	                    /**
	                     * Creates a plain object from a PointValue message. Also converts values to other types if specified.
	                     * @function toObject
	                     * @memberof com.signalfx.metrics.protobuf.PointValue
	                     * @static
	                     * @param {com.signalfx.metrics.protobuf.PointValue} message PointValue
	                     * @param {$protobuf.IConversionOptions} [options] Conversion options
	                     * @returns {Object.<string,*>} Plain object
	                     */
	                    PointValue.toObject = function toObject(message, options) {
	                        if (!options)
	                            options = {};
	                        var object = {};
	                        if (options.defaults) {
	                            if ($util.Long) {
	                                var long = new $util.Long(0, 0, false);
	                                object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
	                            } else
	                                object.timestamp = options.longs === String ? "0" : 0;
	                            object.value = null;
	                        }
	                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
	                            if (typeof message.timestamp === "number")
	                                object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;
	                            else
	                                object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber() : message.timestamp;
	                        if (message.value != null && message.hasOwnProperty("value"))
	                            object.value = $root.com.signalfx.metrics.protobuf.Datum.toObject(message.value, options);
	                        return object;
	                    };

	                    /**
	                     * Converts this PointValue to JSON.
	                     * @function toJSON
	                     * @memberof com.signalfx.metrics.protobuf.PointValue
	                     * @instance
	                     * @returns {Object.<string,*>} JSON object
	                     */
	                    PointValue.prototype.toJSON = function toJSON() {
	                        return this.constructor.toObject(this, minimal.util.toJSONOptions);
	                    };

	                    return PointValue;
	                })();

	                /**
	                 * Different categories of events supported
	                 * @name com.signalfx.metrics.protobuf.EventCategory
	                 * @enum {string}
	                 * @property {number} USER_DEFINED=1000000 Created by user via UI or API, e.g. a deployment event
	                 * @property {number} ALERT=100000 Output by anomaly detectors
	                 * @property {number} AUDIT=200000 Audit trail events
	                 * @property {number} JOB=300000 Generated by analytics server
	                 * @property {number} COLLECTD=400000 Event originated within collectd
	                 * @property {number} SERVICE_DISCOVERY=500000 Service discovery event
	                 * @property {number} EXCEPTION=700000 Created by exception appenders to denote exceptional events
	                 */
	                protobuf.EventCategory = (function() {
	                    var valuesById = {}, values = Object.create(valuesById);
	                    values[valuesById[1000000] = "USER_DEFINED"] = 1000000;
	                    values[valuesById[100000] = "ALERT"] = 100000;
	                    values[valuesById[200000] = "AUDIT"] = 200000;
	                    values[valuesById[300000] = "JOB"] = 300000;
	                    values[valuesById[400000] = "COLLECTD"] = 400000;
	                    values[valuesById[500000] = "SERVICE_DISCOVERY"] = 500000;
	                    values[valuesById[700000] = "EXCEPTION"] = 700000;
	                    return values;
	                })();

	                protobuf.Property = (function() {

	                    /**
	                     * Properties of a Property.
	                     * @memberof com.signalfx.metrics.protobuf
	                     * @interface IProperty
	                     * @property {string|null} [key] Property key
	                     * @property {com.signalfx.metrics.protobuf.IPropertyValue|null} [value] Property value
	                     */

	                    /**
	                     * Constructs a new Property.
	                     * @memberof com.signalfx.metrics.protobuf
	                     * @classdesc Represents a Property.
	                     * @implements IProperty
	                     * @constructor
	                     * @param {com.signalfx.metrics.protobuf.IProperty=} [properties] Properties to set
	                     */
	                    function Property(properties) {
	                        if (properties)
	                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
	                                if (properties[keys[i]] != null)
	                                    this[keys[i]] = properties[keys[i]];
	                    }

	                    /**
	                     * Property key.
	                     * @member {string} key
	                     * @memberof com.signalfx.metrics.protobuf.Property
	                     * @instance
	                     */
	                    Property.prototype.key = "";

	                    /**
	                     * Property value.
	                     * @member {com.signalfx.metrics.protobuf.IPropertyValue|null|undefined} value
	                     * @memberof com.signalfx.metrics.protobuf.Property
	                     * @instance
	                     */
	                    Property.prototype.value = null;

	                    /**
	                     * Creates a new Property instance using the specified properties.
	                     * @function create
	                     * @memberof com.signalfx.metrics.protobuf.Property
	                     * @static
	                     * @param {com.signalfx.metrics.protobuf.IProperty=} [properties] Properties to set
	                     * @returns {com.signalfx.metrics.protobuf.Property} Property instance
	                     */
	                    Property.create = function create(properties) {
	                        return new Property(properties);
	                    };

	                    /**
	                     * Encodes the specified Property message. Does not implicitly {@link com.signalfx.metrics.protobuf.Property.verify|verify} messages.
	                     * @function encode
	                     * @memberof com.signalfx.metrics.protobuf.Property
	                     * @static
	                     * @param {com.signalfx.metrics.protobuf.IProperty} message Property message or plain object to encode
	                     * @param {$protobuf.Writer} [writer] Writer to encode to
	                     * @returns {$protobuf.Writer} Writer
	                     */
	                    Property.encode = function encode(message, writer) {
	                        if (!writer)
	                            writer = $Writer.create();
	                        if (message.key != null && message.hasOwnProperty("key"))
	                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);
	                        if (message.value != null && message.hasOwnProperty("value"))
	                            $root.com.signalfx.metrics.protobuf.PropertyValue.encode(message.value, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
	                        return writer;
	                    };

	                    /**
	                     * Encodes the specified Property message, length delimited. Does not implicitly {@link com.signalfx.metrics.protobuf.Property.verify|verify} messages.
	                     * @function encodeDelimited
	                     * @memberof com.signalfx.metrics.protobuf.Property
	                     * @static
	                     * @param {com.signalfx.metrics.protobuf.IProperty} message Property message or plain object to encode
	                     * @param {$protobuf.Writer} [writer] Writer to encode to
	                     * @returns {$protobuf.Writer} Writer
	                     */
	                    Property.encodeDelimited = function encodeDelimited(message, writer) {
	                        return this.encode(message, writer).ldelim();
	                    };

	                    /**
	                     * Decodes a Property message from the specified reader or buffer.
	                     * @function decode
	                     * @memberof com.signalfx.metrics.protobuf.Property
	                     * @static
	                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
	                     * @param {number} [length] Message length if known beforehand
	                     * @returns {com.signalfx.metrics.protobuf.Property} Property
	                     * @throws {Error} If the payload is not a reader or valid buffer
	                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                     */
	                    Property.decode = function decode(reader, length) {
	                        if (!(reader instanceof $Reader))
	                            reader = $Reader.create(reader);
	                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.signalfx.metrics.protobuf.Property();
	                        while (reader.pos < end) {
	                            var tag = reader.uint32();
	                            switch (tag >>> 3) {
	                            case 1:
	                                message.key = reader.string();
	                                break;
	                            case 2:
	                                message.value = $root.com.signalfx.metrics.protobuf.PropertyValue.decode(reader, reader.uint32());
	                                break;
	                            default:
	                                reader.skipType(tag & 7);
	                                break;
	                            }
	                        }
	                        return message;
	                    };

	                    /**
	                     * Decodes a Property message from the specified reader or buffer, length delimited.
	                     * @function decodeDelimited
	                     * @memberof com.signalfx.metrics.protobuf.Property
	                     * @static
	                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
	                     * @returns {com.signalfx.metrics.protobuf.Property} Property
	                     * @throws {Error} If the payload is not a reader or valid buffer
	                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                     */
	                    Property.decodeDelimited = function decodeDelimited(reader) {
	                        if (!(reader instanceof $Reader))
	                            reader = new $Reader(reader);
	                        return this.decode(reader, reader.uint32());
	                    };

	                    /**
	                     * Verifies a Property message.
	                     * @function verify
	                     * @memberof com.signalfx.metrics.protobuf.Property
	                     * @static
	                     * @param {Object.<string,*>} message Plain object to verify
	                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
	                     */
	                    Property.verify = function verify(message) {
	                        if (typeof message !== "object" || message === null)
	                            return "object expected";
	                        if (message.key != null && message.hasOwnProperty("key"))
	                            if (!$util.isString(message.key))
	                                return "key: string expected";
	                        if (message.value != null && message.hasOwnProperty("value")) {
	                            var error = $root.com.signalfx.metrics.protobuf.PropertyValue.verify(message.value);
	                            if (error)
	                                return "value." + error;
	                        }
	                        return null;
	                    };

	                    /**
	                     * Creates a Property message from a plain object. Also converts values to their respective internal types.
	                     * @function fromObject
	                     * @memberof com.signalfx.metrics.protobuf.Property
	                     * @static
	                     * @param {Object.<string,*>} object Plain object
	                     * @returns {com.signalfx.metrics.protobuf.Property} Property
	                     */
	                    Property.fromObject = function fromObject(object) {
	                        if (object instanceof $root.com.signalfx.metrics.protobuf.Property)
	                            return object;
	                        var message = new $root.com.signalfx.metrics.protobuf.Property();
	                        if (object.key != null)
	                            message.key = String(object.key);
	                        if (object.value != null) {
	                            if (typeof object.value !== "object")
	                                throw TypeError(".com.signalfx.metrics.protobuf.Property.value: object expected");
	                            message.value = $root.com.signalfx.metrics.protobuf.PropertyValue.fromObject(object.value);
	                        }
	                        return message;
	                    };

	                    /**
	                     * Creates a plain object from a Property message. Also converts values to other types if specified.
	                     * @function toObject
	                     * @memberof com.signalfx.metrics.protobuf.Property
	                     * @static
	                     * @param {com.signalfx.metrics.protobuf.Property} message Property
	                     * @param {$protobuf.IConversionOptions} [options] Conversion options
	                     * @returns {Object.<string,*>} Plain object
	                     */
	                    Property.toObject = function toObject(message, options) {
	                        if (!options)
	                            options = {};
	                        var object = {};
	                        if (options.defaults) {
	                            object.key = "";
	                            object.value = null;
	                        }
	                        if (message.key != null && message.hasOwnProperty("key"))
	                            object.key = message.key;
	                        if (message.value != null && message.hasOwnProperty("value"))
	                            object.value = $root.com.signalfx.metrics.protobuf.PropertyValue.toObject(message.value, options);
	                        return object;
	                    };

	                    /**
	                     * Converts this Property to JSON.
	                     * @function toJSON
	                     * @memberof com.signalfx.metrics.protobuf.Property
	                     * @instance
	                     * @returns {Object.<string,*>} JSON object
	                     */
	                    Property.prototype.toJSON = function toJSON() {
	                        return this.constructor.toObject(this, minimal.util.toJSONOptions);
	                    };

	                    return Property;
	                })();

	                protobuf.PropertyValue = (function() {

	                    /**
	                     * Properties of a PropertyValue.
	                     * @memberof com.signalfx.metrics.protobuf
	                     * @interface IPropertyValue
	                     * @property {string|null} [strValue] PropertyValue strValue
	                     * @property {number|null} [doubleValue] PropertyValue doubleValue
	                     * @property {number|Long|null} [intValue] PropertyValue intValue
	                     * @property {boolean|null} [boolValue] PropertyValue boolValue
	                     */

	                    /**
	                     * Constructs a new PropertyValue.
	                     * @memberof com.signalfx.metrics.protobuf
	                     * @classdesc Represents a PropertyValue.
	                     * @implements IPropertyValue
	                     * @constructor
	                     * @param {com.signalfx.metrics.protobuf.IPropertyValue=} [properties] Properties to set
	                     */
	                    function PropertyValue(properties) {
	                        if (properties)
	                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
	                                if (properties[keys[i]] != null)
	                                    this[keys[i]] = properties[keys[i]];
	                    }

	                    /**
	                     * PropertyValue strValue.
	                     * @member {string} strValue
	                     * @memberof com.signalfx.metrics.protobuf.PropertyValue
	                     * @instance
	                     */
	                    PropertyValue.prototype.strValue = "";

	                    /**
	                     * PropertyValue doubleValue.
	                     * @member {number} doubleValue
	                     * @memberof com.signalfx.metrics.protobuf.PropertyValue
	                     * @instance
	                     */
	                    PropertyValue.prototype.doubleValue = 0;

	                    /**
	                     * PropertyValue intValue.
	                     * @member {number|Long} intValue
	                     * @memberof com.signalfx.metrics.protobuf.PropertyValue
	                     * @instance
	                     */
	                    PropertyValue.prototype.intValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

	                    /**
	                     * PropertyValue boolValue.
	                     * @member {boolean} boolValue
	                     * @memberof com.signalfx.metrics.protobuf.PropertyValue
	                     * @instance
	                     */
	                    PropertyValue.prototype.boolValue = false;

	                    /**
	                     * Creates a new PropertyValue instance using the specified properties.
	                     * @function create
	                     * @memberof com.signalfx.metrics.protobuf.PropertyValue
	                     * @static
	                     * @param {com.signalfx.metrics.protobuf.IPropertyValue=} [properties] Properties to set
	                     * @returns {com.signalfx.metrics.protobuf.PropertyValue} PropertyValue instance
	                     */
	                    PropertyValue.create = function create(properties) {
	                        return new PropertyValue(properties);
	                    };

	                    /**
	                     * Encodes the specified PropertyValue message. Does not implicitly {@link com.signalfx.metrics.protobuf.PropertyValue.verify|verify} messages.
	                     * @function encode
	                     * @memberof com.signalfx.metrics.protobuf.PropertyValue
	                     * @static
	                     * @param {com.signalfx.metrics.protobuf.IPropertyValue} message PropertyValue message or plain object to encode
	                     * @param {$protobuf.Writer} [writer] Writer to encode to
	                     * @returns {$protobuf.Writer} Writer
	                     */
	                    PropertyValue.encode = function encode(message, writer) {
	                        if (!writer)
	                            writer = $Writer.create();
	                        if (message.strValue != null && message.hasOwnProperty("strValue"))
	                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.strValue);
	                        if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
	                            writer.uint32(/* id 2, wireType 1 =*/17).double(message.doubleValue);
	                        if (message.intValue != null && message.hasOwnProperty("intValue"))
	                            writer.uint32(/* id 3, wireType 0 =*/24).int64(message.intValue);
	                        if (message.boolValue != null && message.hasOwnProperty("boolValue"))
	                            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.boolValue);
	                        return writer;
	                    };

	                    /**
	                     * Encodes the specified PropertyValue message, length delimited. Does not implicitly {@link com.signalfx.metrics.protobuf.PropertyValue.verify|verify} messages.
	                     * @function encodeDelimited
	                     * @memberof com.signalfx.metrics.protobuf.PropertyValue
	                     * @static
	                     * @param {com.signalfx.metrics.protobuf.IPropertyValue} message PropertyValue message or plain object to encode
	                     * @param {$protobuf.Writer} [writer] Writer to encode to
	                     * @returns {$protobuf.Writer} Writer
	                     */
	                    PropertyValue.encodeDelimited = function encodeDelimited(message, writer) {
	                        return this.encode(message, writer).ldelim();
	                    };

	                    /**
	                     * Decodes a PropertyValue message from the specified reader or buffer.
	                     * @function decode
	                     * @memberof com.signalfx.metrics.protobuf.PropertyValue
	                     * @static
	                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
	                     * @param {number} [length] Message length if known beforehand
	                     * @returns {com.signalfx.metrics.protobuf.PropertyValue} PropertyValue
	                     * @throws {Error} If the payload is not a reader or valid buffer
	                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                     */
	                    PropertyValue.decode = function decode(reader, length) {
	                        if (!(reader instanceof $Reader))
	                            reader = $Reader.create(reader);
	                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.signalfx.metrics.protobuf.PropertyValue();
	                        while (reader.pos < end) {
	                            var tag = reader.uint32();
	                            switch (tag >>> 3) {
	                            case 1:
	                                message.strValue = reader.string();
	                                break;
	                            case 2:
	                                message.doubleValue = reader.double();
	                                break;
	                            case 3:
	                                message.intValue = reader.int64();
	                                break;
	                            case 4:
	                                message.boolValue = reader.bool();
	                                break;
	                            default:
	                                reader.skipType(tag & 7);
	                                break;
	                            }
	                        }
	                        return message;
	                    };

	                    /**
	                     * Decodes a PropertyValue message from the specified reader or buffer, length delimited.
	                     * @function decodeDelimited
	                     * @memberof com.signalfx.metrics.protobuf.PropertyValue
	                     * @static
	                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
	                     * @returns {com.signalfx.metrics.protobuf.PropertyValue} PropertyValue
	                     * @throws {Error} If the payload is not a reader or valid buffer
	                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                     */
	                    PropertyValue.decodeDelimited = function decodeDelimited(reader) {
	                        if (!(reader instanceof $Reader))
	                            reader = new $Reader(reader);
	                        return this.decode(reader, reader.uint32());
	                    };

	                    /**
	                     * Verifies a PropertyValue message.
	                     * @function verify
	                     * @memberof com.signalfx.metrics.protobuf.PropertyValue
	                     * @static
	                     * @param {Object.<string,*>} message Plain object to verify
	                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
	                     */
	                    PropertyValue.verify = function verify(message) {
	                        if (typeof message !== "object" || message === null)
	                            return "object expected";
	                        if (message.strValue != null && message.hasOwnProperty("strValue"))
	                            if (!$util.isString(message.strValue))
	                                return "strValue: string expected";
	                        if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
	                            if (typeof message.doubleValue !== "number")
	                                return "doubleValue: number expected";
	                        if (message.intValue != null && message.hasOwnProperty("intValue"))
	                            if (!$util.isInteger(message.intValue) && !(message.intValue && $util.isInteger(message.intValue.low) && $util.isInteger(message.intValue.high)))
	                                return "intValue: integer|Long expected";
	                        if (message.boolValue != null && message.hasOwnProperty("boolValue"))
	                            if (typeof message.boolValue !== "boolean")
	                                return "boolValue: boolean expected";
	                        return null;
	                    };

	                    /**
	                     * Creates a PropertyValue message from a plain object. Also converts values to their respective internal types.
	                     * @function fromObject
	                     * @memberof com.signalfx.metrics.protobuf.PropertyValue
	                     * @static
	                     * @param {Object.<string,*>} object Plain object
	                     * @returns {com.signalfx.metrics.protobuf.PropertyValue} PropertyValue
	                     */
	                    PropertyValue.fromObject = function fromObject(object) {
	                        if (object instanceof $root.com.signalfx.metrics.protobuf.PropertyValue)
	                            return object;
	                        var message = new $root.com.signalfx.metrics.protobuf.PropertyValue();
	                        if (object.strValue != null)
	                            message.strValue = String(object.strValue);
	                        if (object.doubleValue != null)
	                            message.doubleValue = Number(object.doubleValue);
	                        if (object.intValue != null)
	                            if ($util.Long)
	                                (message.intValue = $util.Long.fromValue(object.intValue)).unsigned = false;
	                            else if (typeof object.intValue === "string")
	                                message.intValue = parseInt(object.intValue, 10);
	                            else if (typeof object.intValue === "number")
	                                message.intValue = object.intValue;
	                            else if (typeof object.intValue === "object")
	                                message.intValue = new $util.LongBits(object.intValue.low >>> 0, object.intValue.high >>> 0).toNumber();
	                        if (object.boolValue != null)
	                            message.boolValue = Boolean(object.boolValue);
	                        return message;
	                    };

	                    /**
	                     * Creates a plain object from a PropertyValue message. Also converts values to other types if specified.
	                     * @function toObject
	                     * @memberof com.signalfx.metrics.protobuf.PropertyValue
	                     * @static
	                     * @param {com.signalfx.metrics.protobuf.PropertyValue} message PropertyValue
	                     * @param {$protobuf.IConversionOptions} [options] Conversion options
	                     * @returns {Object.<string,*>} Plain object
	                     */
	                    PropertyValue.toObject = function toObject(message, options) {
	                        if (!options)
	                            options = {};
	                        var object = {};
	                        if (options.defaults) {
	                            object.strValue = "";
	                            object.doubleValue = 0;
	                            if ($util.Long) {
	                                var long = new $util.Long(0, 0, false);
	                                object.intValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
	                            } else
	                                object.intValue = options.longs === String ? "0" : 0;
	                            object.boolValue = false;
	                        }
	                        if (message.strValue != null && message.hasOwnProperty("strValue"))
	                            object.strValue = message.strValue;
	                        if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
	                            object.doubleValue = options.json && !isFinite(message.doubleValue) ? String(message.doubleValue) : message.doubleValue;
	                        if (message.intValue != null && message.hasOwnProperty("intValue"))
	                            if (typeof message.intValue === "number")
	                                object.intValue = options.longs === String ? String(message.intValue) : message.intValue;
	                            else
	                                object.intValue = options.longs === String ? $util.Long.prototype.toString.call(message.intValue) : options.longs === Number ? new $util.LongBits(message.intValue.low >>> 0, message.intValue.high >>> 0).toNumber() : message.intValue;
	                        if (message.boolValue != null && message.hasOwnProperty("boolValue"))
	                            object.boolValue = message.boolValue;
	                        return object;
	                    };

	                    /**
	                     * Converts this PropertyValue to JSON.
	                     * @function toJSON
	                     * @memberof com.signalfx.metrics.protobuf.PropertyValue
	                     * @instance
	                     * @returns {Object.<string,*>} JSON object
	                     */
	                    PropertyValue.prototype.toJSON = function toJSON() {
	                        return this.constructor.toObject(this, minimal.util.toJSONOptions);
	                    };

	                    return PropertyValue;
	                })();

	                protobuf.Event = (function() {

	                    /**
	                     * Properties of an Event.
	                     * @memberof com.signalfx.metrics.protobuf
	                     * @interface IEvent
	                     * @property {string} eventType Event eventType
	                     * @property {Array.<com.signalfx.metrics.protobuf.IDimension>|null} [dimensions] Event dimensions
	                     * @property {Array.<com.signalfx.metrics.protobuf.IProperty>|null} [properties] Event properties
	                     * @property {com.signalfx.metrics.protobuf.EventCategory|null} [category] Event category
	                     * @property {number|Long|null} [timestamp] Event timestamp
	                     */

	                    /**
	                     * Constructs a new Event.
	                     * @memberof com.signalfx.metrics.protobuf
	                     * @classdesc Represents an Event.
	                     * @implements IEvent
	                     * @constructor
	                     * @param {com.signalfx.metrics.protobuf.IEvent=} [properties] Properties to set
	                     */
	                    function Event(properties) {
	                        this.dimensions = [];
	                        this.properties = [];
	                        if (properties)
	                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
	                                if (properties[keys[i]] != null)
	                                    this[keys[i]] = properties[keys[i]];
	                    }

	                    /**
	                     * Event eventType.
	                     * @member {string} eventType
	                     * @memberof com.signalfx.metrics.protobuf.Event
	                     * @instance
	                     */
	                    Event.prototype.eventType = "";

	                    /**
	                     * Event dimensions.
	                     * @member {Array.<com.signalfx.metrics.protobuf.IDimension>} dimensions
	                     * @memberof com.signalfx.metrics.protobuf.Event
	                     * @instance
	                     */
	                    Event.prototype.dimensions = $util.emptyArray;

	                    /**
	                     * Event properties.
	                     * @member {Array.<com.signalfx.metrics.protobuf.IProperty>} properties
	                     * @memberof com.signalfx.metrics.protobuf.Event
	                     * @instance
	                     */
	                    Event.prototype.properties = $util.emptyArray;

	                    /**
	                     * Event category.
	                     * @member {com.signalfx.metrics.protobuf.EventCategory} category
	                     * @memberof com.signalfx.metrics.protobuf.Event
	                     * @instance
	                     */
	                    Event.prototype.category = 1000000;

	                    /**
	                     * Event timestamp.
	                     * @member {number|Long} timestamp
	                     * @memberof com.signalfx.metrics.protobuf.Event
	                     * @instance
	                     */
	                    Event.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

	                    /**
	                     * Creates a new Event instance using the specified properties.
	                     * @function create
	                     * @memberof com.signalfx.metrics.protobuf.Event
	                     * @static
	                     * @param {com.signalfx.metrics.protobuf.IEvent=} [properties] Properties to set
	                     * @returns {com.signalfx.metrics.protobuf.Event} Event instance
	                     */
	                    Event.create = function create(properties) {
	                        return new Event(properties);
	                    };

	                    /**
	                     * Encodes the specified Event message. Does not implicitly {@link com.signalfx.metrics.protobuf.Event.verify|verify} messages.
	                     * @function encode
	                     * @memberof com.signalfx.metrics.protobuf.Event
	                     * @static
	                     * @param {com.signalfx.metrics.protobuf.IEvent} message Event message or plain object to encode
	                     * @param {$protobuf.Writer} [writer] Writer to encode to
	                     * @returns {$protobuf.Writer} Writer
	                     */
	                    Event.encode = function encode(message, writer) {
	                        if (!writer)
	                            writer = $Writer.create();
	                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.eventType);
	                        if (message.dimensions != null && message.dimensions.length)
	                            for (var i = 0; i < message.dimensions.length; ++i)
	                                $root.com.signalfx.metrics.protobuf.Dimension.encode(message.dimensions[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
	                        if (message.properties != null && message.properties.length)
	                            for (var i = 0; i < message.properties.length; ++i)
	                                $root.com.signalfx.metrics.protobuf.Property.encode(message.properties[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
	                        if (message.category != null && message.hasOwnProperty("category"))
	                            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.category);
	                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
	                            writer.uint32(/* id 5, wireType 0 =*/40).int64(message.timestamp);
	                        return writer;
	                    };

	                    /**
	                     * Encodes the specified Event message, length delimited. Does not implicitly {@link com.signalfx.metrics.protobuf.Event.verify|verify} messages.
	                     * @function encodeDelimited
	                     * @memberof com.signalfx.metrics.protobuf.Event
	                     * @static
	                     * @param {com.signalfx.metrics.protobuf.IEvent} message Event message or plain object to encode
	                     * @param {$protobuf.Writer} [writer] Writer to encode to
	                     * @returns {$protobuf.Writer} Writer
	                     */
	                    Event.encodeDelimited = function encodeDelimited(message, writer) {
	                        return this.encode(message, writer).ldelim();
	                    };

	                    /**
	                     * Decodes an Event message from the specified reader or buffer.
	                     * @function decode
	                     * @memberof com.signalfx.metrics.protobuf.Event
	                     * @static
	                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
	                     * @param {number} [length] Message length if known beforehand
	                     * @returns {com.signalfx.metrics.protobuf.Event} Event
	                     * @throws {Error} If the payload is not a reader or valid buffer
	                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                     */
	                    Event.decode = function decode(reader, length) {
	                        if (!(reader instanceof $Reader))
	                            reader = $Reader.create(reader);
	                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.signalfx.metrics.protobuf.Event();
	                        while (reader.pos < end) {
	                            var tag = reader.uint32();
	                            switch (tag >>> 3) {
	                            case 1:
	                                message.eventType = reader.string();
	                                break;
	                            case 2:
	                                if (!(message.dimensions && message.dimensions.length))
	                                    message.dimensions = [];
	                                message.dimensions.push($root.com.signalfx.metrics.protobuf.Dimension.decode(reader, reader.uint32()));
	                                break;
	                            case 3:
	                                if (!(message.properties && message.properties.length))
	                                    message.properties = [];
	                                message.properties.push($root.com.signalfx.metrics.protobuf.Property.decode(reader, reader.uint32()));
	                                break;
	                            case 4:
	                                message.category = reader.int32();
	                                break;
	                            case 5:
	                                message.timestamp = reader.int64();
	                                break;
	                            default:
	                                reader.skipType(tag & 7);
	                                break;
	                            }
	                        }
	                        if (!message.hasOwnProperty("eventType"))
	                            throw $util.ProtocolError("missing required 'eventType'", { instance: message });
	                        return message;
	                    };

	                    /**
	                     * Decodes an Event message from the specified reader or buffer, length delimited.
	                     * @function decodeDelimited
	                     * @memberof com.signalfx.metrics.protobuf.Event
	                     * @static
	                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
	                     * @returns {com.signalfx.metrics.protobuf.Event} Event
	                     * @throws {Error} If the payload is not a reader or valid buffer
	                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                     */
	                    Event.decodeDelimited = function decodeDelimited(reader) {
	                        if (!(reader instanceof $Reader))
	                            reader = new $Reader(reader);
	                        return this.decode(reader, reader.uint32());
	                    };

	                    /**
	                     * Verifies an Event message.
	                     * @function verify
	                     * @memberof com.signalfx.metrics.protobuf.Event
	                     * @static
	                     * @param {Object.<string,*>} message Plain object to verify
	                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
	                     */
	                    Event.verify = function verify(message) {
	                        if (typeof message !== "object" || message === null)
	                            return "object expected";
	                        if (!$util.isString(message.eventType))
	                            return "eventType: string expected";
	                        if (message.dimensions != null && message.hasOwnProperty("dimensions")) {
	                            if (!Array.isArray(message.dimensions))
	                                return "dimensions: array expected";
	                            for (var i = 0; i < message.dimensions.length; ++i) {
	                                var error = $root.com.signalfx.metrics.protobuf.Dimension.verify(message.dimensions[i]);
	                                if (error)
	                                    return "dimensions." + error;
	                            }
	                        }
	                        if (message.properties != null && message.hasOwnProperty("properties")) {
	                            if (!Array.isArray(message.properties))
	                                return "properties: array expected";
	                            for (var i = 0; i < message.properties.length; ++i) {
	                                var error = $root.com.signalfx.metrics.protobuf.Property.verify(message.properties[i]);
	                                if (error)
	                                    return "properties." + error;
	                            }
	                        }
	                        if (message.category != null && message.hasOwnProperty("category"))
	                            switch (message.category) {
	                            default:
	                                return "category: enum value expected";
	                            case 1000000:
	                            case 100000:
	                            case 200000:
	                            case 300000:
	                            case 400000:
	                            case 500000:
	                            case 700000:
	                                break;
	                            }
	                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
	                            if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))
	                                return "timestamp: integer|Long expected";
	                        return null;
	                    };

	                    /**
	                     * Creates an Event message from a plain object. Also converts values to their respective internal types.
	                     * @function fromObject
	                     * @memberof com.signalfx.metrics.protobuf.Event
	                     * @static
	                     * @param {Object.<string,*>} object Plain object
	                     * @returns {com.signalfx.metrics.protobuf.Event} Event
	                     */
	                    Event.fromObject = function fromObject(object) {
	                        if (object instanceof $root.com.signalfx.metrics.protobuf.Event)
	                            return object;
	                        var message = new $root.com.signalfx.metrics.protobuf.Event();
	                        if (object.eventType != null)
	                            message.eventType = String(object.eventType);
	                        if (object.dimensions) {
	                            if (!Array.isArray(object.dimensions))
	                                throw TypeError(".com.signalfx.metrics.protobuf.Event.dimensions: array expected");
	                            message.dimensions = [];
	                            for (var i = 0; i < object.dimensions.length; ++i) {
	                                if (typeof object.dimensions[i] !== "object")
	                                    throw TypeError(".com.signalfx.metrics.protobuf.Event.dimensions: object expected");
	                                message.dimensions[i] = $root.com.signalfx.metrics.protobuf.Dimension.fromObject(object.dimensions[i]);
	                            }
	                        }
	                        if (object.properties) {
	                            if (!Array.isArray(object.properties))
	                                throw TypeError(".com.signalfx.metrics.protobuf.Event.properties: array expected");
	                            message.properties = [];
	                            for (var i = 0; i < object.properties.length; ++i) {
	                                if (typeof object.properties[i] !== "object")
	                                    throw TypeError(".com.signalfx.metrics.protobuf.Event.properties: object expected");
	                                message.properties[i] = $root.com.signalfx.metrics.protobuf.Property.fromObject(object.properties[i]);
	                            }
	                        }
	                        switch (object.category) {
	                        case "USER_DEFINED":
	                        case 1000000:
	                            message.category = 1000000;
	                            break;
	                        case "ALERT":
	                        case 100000:
	                            message.category = 100000;
	                            break;
	                        case "AUDIT":
	                        case 200000:
	                            message.category = 200000;
	                            break;
	                        case "JOB":
	                        case 300000:
	                            message.category = 300000;
	                            break;
	                        case "COLLECTD":
	                        case 400000:
	                            message.category = 400000;
	                            break;
	                        case "SERVICE_DISCOVERY":
	                        case 500000:
	                            message.category = 500000;
	                            break;
	                        case "EXCEPTION":
	                        case 700000:
	                            message.category = 700000;
	                            break;
	                        }
	                        if (object.timestamp != null)
	                            if ($util.Long)
	                                (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = false;
	                            else if (typeof object.timestamp === "string")
	                                message.timestamp = parseInt(object.timestamp, 10);
	                            else if (typeof object.timestamp === "number")
	                                message.timestamp = object.timestamp;
	                            else if (typeof object.timestamp === "object")
	                                message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber();
	                        return message;
	                    };

	                    /**
	                     * Creates a plain object from an Event message. Also converts values to other types if specified.
	                     * @function toObject
	                     * @memberof com.signalfx.metrics.protobuf.Event
	                     * @static
	                     * @param {com.signalfx.metrics.protobuf.Event} message Event
	                     * @param {$protobuf.IConversionOptions} [options] Conversion options
	                     * @returns {Object.<string,*>} Plain object
	                     */
	                    Event.toObject = function toObject(message, options) {
	                        if (!options)
	                            options = {};
	                        var object = {};
	                        if (options.arrays || options.defaults) {
	                            object.dimensions = [];
	                            object.properties = [];
	                        }
	                        if (options.defaults) {
	                            object.eventType = "";
	                            object.category = options.enums === String ? "USER_DEFINED" : 1000000;
	                            if ($util.Long) {
	                                var long = new $util.Long(0, 0, false);
	                                object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
	                            } else
	                                object.timestamp = options.longs === String ? "0" : 0;
	                        }
	                        if (message.eventType != null && message.hasOwnProperty("eventType"))
	                            object.eventType = message.eventType;
	                        if (message.dimensions && message.dimensions.length) {
	                            object.dimensions = [];
	                            for (var j = 0; j < message.dimensions.length; ++j)
	                                object.dimensions[j] = $root.com.signalfx.metrics.protobuf.Dimension.toObject(message.dimensions[j], options);
	                        }
	                        if (message.properties && message.properties.length) {
	                            object.properties = [];
	                            for (var j = 0; j < message.properties.length; ++j)
	                                object.properties[j] = $root.com.signalfx.metrics.protobuf.Property.toObject(message.properties[j], options);
	                        }
	                        if (message.category != null && message.hasOwnProperty("category"))
	                            object.category = options.enums === String ? $root.com.signalfx.metrics.protobuf.EventCategory[message.category] : message.category;
	                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
	                            if (typeof message.timestamp === "number")
	                                object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;
	                            else
	                                object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber() : message.timestamp;
	                        return object;
	                    };

	                    /**
	                     * Converts this Event to JSON.
	                     * @function toJSON
	                     * @memberof com.signalfx.metrics.protobuf.Event
	                     * @instance
	                     * @returns {Object.<string,*>} JSON object
	                     */
	                    Event.prototype.toJSON = function toJSON() {
	                        return this.constructor.toObject(this, minimal.util.toJSONOptions);
	                    };

	                    return Event;
	                })();

	                protobuf.EventUploadMessage = (function() {

	                    /**
	                     * Properties of an EventUploadMessage.
	                     * @memberof com.signalfx.metrics.protobuf
	                     * @interface IEventUploadMessage
	                     * @property {Array.<com.signalfx.metrics.protobuf.IEvent>|null} [events] EventUploadMessage events
	                     */

	                    /**
	                     * Constructs a new EventUploadMessage.
	                     * @memberof com.signalfx.metrics.protobuf
	                     * @classdesc Represents an EventUploadMessage.
	                     * @implements IEventUploadMessage
	                     * @constructor
	                     * @param {com.signalfx.metrics.protobuf.IEventUploadMessage=} [properties] Properties to set
	                     */
	                    function EventUploadMessage(properties) {
	                        this.events = [];
	                        if (properties)
	                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
	                                if (properties[keys[i]] != null)
	                                    this[keys[i]] = properties[keys[i]];
	                    }

	                    /**
	                     * EventUploadMessage events.
	                     * @member {Array.<com.signalfx.metrics.protobuf.IEvent>} events
	                     * @memberof com.signalfx.metrics.protobuf.EventUploadMessage
	                     * @instance
	                     */
	                    EventUploadMessage.prototype.events = $util.emptyArray;

	                    /**
	                     * Creates a new EventUploadMessage instance using the specified properties.
	                     * @function create
	                     * @memberof com.signalfx.metrics.protobuf.EventUploadMessage
	                     * @static
	                     * @param {com.signalfx.metrics.protobuf.IEventUploadMessage=} [properties] Properties to set
	                     * @returns {com.signalfx.metrics.protobuf.EventUploadMessage} EventUploadMessage instance
	                     */
	                    EventUploadMessage.create = function create(properties) {
	                        return new EventUploadMessage(properties);
	                    };

	                    /**
	                     * Encodes the specified EventUploadMessage message. Does not implicitly {@link com.signalfx.metrics.protobuf.EventUploadMessage.verify|verify} messages.
	                     * @function encode
	                     * @memberof com.signalfx.metrics.protobuf.EventUploadMessage
	                     * @static
	                     * @param {com.signalfx.metrics.protobuf.IEventUploadMessage} message EventUploadMessage message or plain object to encode
	                     * @param {$protobuf.Writer} [writer] Writer to encode to
	                     * @returns {$protobuf.Writer} Writer
	                     */
	                    EventUploadMessage.encode = function encode(message, writer) {
	                        if (!writer)
	                            writer = $Writer.create();
	                        if (message.events != null && message.events.length)
	                            for (var i = 0; i < message.events.length; ++i)
	                                $root.com.signalfx.metrics.protobuf.Event.encode(message.events[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
	                        return writer;
	                    };

	                    /**
	                     * Encodes the specified EventUploadMessage message, length delimited. Does not implicitly {@link com.signalfx.metrics.protobuf.EventUploadMessage.verify|verify} messages.
	                     * @function encodeDelimited
	                     * @memberof com.signalfx.metrics.protobuf.EventUploadMessage
	                     * @static
	                     * @param {com.signalfx.metrics.protobuf.IEventUploadMessage} message EventUploadMessage message or plain object to encode
	                     * @param {$protobuf.Writer} [writer] Writer to encode to
	                     * @returns {$protobuf.Writer} Writer
	                     */
	                    EventUploadMessage.encodeDelimited = function encodeDelimited(message, writer) {
	                        return this.encode(message, writer).ldelim();
	                    };

	                    /**
	                     * Decodes an EventUploadMessage message from the specified reader or buffer.
	                     * @function decode
	                     * @memberof com.signalfx.metrics.protobuf.EventUploadMessage
	                     * @static
	                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
	                     * @param {number} [length] Message length if known beforehand
	                     * @returns {com.signalfx.metrics.protobuf.EventUploadMessage} EventUploadMessage
	                     * @throws {Error} If the payload is not a reader or valid buffer
	                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                     */
	                    EventUploadMessage.decode = function decode(reader, length) {
	                        if (!(reader instanceof $Reader))
	                            reader = $Reader.create(reader);
	                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.signalfx.metrics.protobuf.EventUploadMessage();
	                        while (reader.pos < end) {
	                            var tag = reader.uint32();
	                            switch (tag >>> 3) {
	                            case 1:
	                                if (!(message.events && message.events.length))
	                                    message.events = [];
	                                message.events.push($root.com.signalfx.metrics.protobuf.Event.decode(reader, reader.uint32()));
	                                break;
	                            default:
	                                reader.skipType(tag & 7);
	                                break;
	                            }
	                        }
	                        return message;
	                    };

	                    /**
	                     * Decodes an EventUploadMessage message from the specified reader or buffer, length delimited.
	                     * @function decodeDelimited
	                     * @memberof com.signalfx.metrics.protobuf.EventUploadMessage
	                     * @static
	                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
	                     * @returns {com.signalfx.metrics.protobuf.EventUploadMessage} EventUploadMessage
	                     * @throws {Error} If the payload is not a reader or valid buffer
	                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                     */
	                    EventUploadMessage.decodeDelimited = function decodeDelimited(reader) {
	                        if (!(reader instanceof $Reader))
	                            reader = new $Reader(reader);
	                        return this.decode(reader, reader.uint32());
	                    };

	                    /**
	                     * Verifies an EventUploadMessage message.
	                     * @function verify
	                     * @memberof com.signalfx.metrics.protobuf.EventUploadMessage
	                     * @static
	                     * @param {Object.<string,*>} message Plain object to verify
	                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
	                     */
	                    EventUploadMessage.verify = function verify(message) {
	                        if (typeof message !== "object" || message === null)
	                            return "object expected";
	                        if (message.events != null && message.hasOwnProperty("events")) {
	                            if (!Array.isArray(message.events))
	                                return "events: array expected";
	                            for (var i = 0; i < message.events.length; ++i) {
	                                var error = $root.com.signalfx.metrics.protobuf.Event.verify(message.events[i]);
	                                if (error)
	                                    return "events." + error;
	                            }
	                        }
	                        return null;
	                    };

	                    /**
	                     * Creates an EventUploadMessage message from a plain object. Also converts values to their respective internal types.
	                     * @function fromObject
	                     * @memberof com.signalfx.metrics.protobuf.EventUploadMessage
	                     * @static
	                     * @param {Object.<string,*>} object Plain object
	                     * @returns {com.signalfx.metrics.protobuf.EventUploadMessage} EventUploadMessage
	                     */
	                    EventUploadMessage.fromObject = function fromObject(object) {
	                        if (object instanceof $root.com.signalfx.metrics.protobuf.EventUploadMessage)
	                            return object;
	                        var message = new $root.com.signalfx.metrics.protobuf.EventUploadMessage();
	                        if (object.events) {
	                            if (!Array.isArray(object.events))
	                                throw TypeError(".com.signalfx.metrics.protobuf.EventUploadMessage.events: array expected");
	                            message.events = [];
	                            for (var i = 0; i < object.events.length; ++i) {
	                                if (typeof object.events[i] !== "object")
	                                    throw TypeError(".com.signalfx.metrics.protobuf.EventUploadMessage.events: object expected");
	                                message.events[i] = $root.com.signalfx.metrics.protobuf.Event.fromObject(object.events[i]);
	                            }
	                        }
	                        return message;
	                    };

	                    /**
	                     * Creates a plain object from an EventUploadMessage message. Also converts values to other types if specified.
	                     * @function toObject
	                     * @memberof com.signalfx.metrics.protobuf.EventUploadMessage
	                     * @static
	                     * @param {com.signalfx.metrics.protobuf.EventUploadMessage} message EventUploadMessage
	                     * @param {$protobuf.IConversionOptions} [options] Conversion options
	                     * @returns {Object.<string,*>} Plain object
	                     */
	                    EventUploadMessage.toObject = function toObject(message, options) {
	                        if (!options)
	                            options = {};
	                        var object = {};
	                        if (options.arrays || options.defaults)
	                            object.events = [];
	                        if (message.events && message.events.length) {
	                            object.events = [];
	                            for (var j = 0; j < message.events.length; ++j)
	                                object.events[j] = $root.com.signalfx.metrics.protobuf.Event.toObject(message.events[j], options);
	                        }
	                        return object;
	                    };

	                    /**
	                     * Converts this EventUploadMessage to JSON.
	                     * @function toJSON
	                     * @memberof com.signalfx.metrics.protobuf.EventUploadMessage
	                     * @instance
	                     * @returns {Object.<string,*>} JSON object
	                     */
	                    EventUploadMessage.prototype.toJSON = function toJSON() {
	                        return this.constructor.toObject(this, minimal.util.toJSONOptions);
	                    };

	                    return EventUploadMessage;
	                })();

	                return protobuf;
	            })();

	            return metrics;
	        })();

	        return signalfx;
	    })();

	    return com;
	})();

	var signal_fx_protocol_buffers_pb2 = $root;

	// Copyright (C) 2015 SignalFx, Inc. All rights reserved.



	var protocolBuffers$1;
	var protocolBufferEnabled$1 = false;
	try {
	  protocolBuffers$1 = signal_fx_protocol_buffers_pb2.com.signalfx.metrics.protobuf;
	  protocolBufferEnabled$1 = true;
	} catch (error) {
	  logger_1.warn('Protocol Buffers not installed properly %s', error);
	  protocolBufferEnabled$1 = false;
	}

	var protocolBufferEnabled_1 = protocolBufferEnabled$1;
	var protocolBuffers_1 = protocolBuffers$1;

	var proto = {
		protocolBufferEnabled: protocolBufferEnabled_1,
		protocolBuffers: protocolBuffers_1
	};

	// Copyright (C) 2015 SignalFx, Inc. All rights reserved.

	 // Logging library

	var SignalFxClient$1 = signal_fx_client.SignalFxClient;


	var protocolBuffers = proto.protocolBuffers;

	/**
	 * SignalFx API client data handler that uses Protocol Buffers.
	 * This class presents the interfaces that handle the serialization of data
	 * using Protocol Buffers
	 *
	 * @param apiToken
	 * @constructor
	 */
	function ProtoBufSignalFx$1(apiToken) {
	  SignalFxClient$1.apply(this, arguments);
	}

	ProtoBufSignalFx$1.prototype = Object.create(SignalFxClient$1.prototype);
	ProtoBufSignalFx$1.prototype.constructor = SignalFxClient$1;

	ProtoBufSignalFx$1.prototype.getHeaderContentType = function () {
	  return conf.PROTOBUF_HEADER_CONTENT_TYPE;
	};

	ProtoBufSignalFx$1.prototype._addToQueue = function (metricType, datapoint) {
	  var protobufDatapoint = new protocolBuffers.DataPoint();

	  // Set value by type
	  protobufDatapoint.value = {};
	  if (typeof datapoint.value === 'string') { // string value
	    protobufDatapoint.value.strValue = datapoint.value;
	  } else if (typeof datapoint.value === 'number' && datapoint.value % 1 !== 0) { // 'double' value
	    protobufDatapoint.value.doubleValue = +datapoint.value;
	  } else if (typeof datapoint.value === 'number' && datapoint.value % 1 === 0) { // int value
	    protobufDatapoint.value.intValue = +datapoint.value;
	  } else {
	    throw new TypeError('Invalid Value ' + datapoint.value);
	  }

	  protobufDatapoint.metricType = protocolBuffers.MetricType[metricType.toUpperCase()];
	  protobufDatapoint.metric = datapoint['metric'];

	  if (datapoint['timestamp']) {
	    protobufDatapoint.timestamp = +datapoint['timestamp'];
	  }

	  // set datapoint dimensions
	  var dimensions = datapoint['dimensions'] || {};
	  for (var key in dimensions) {
	    if (dimensions.hasOwnProperty(key)) {
	      var dim = {};
	      dim.key = key;
	      dim.value = dimensions[key];
	      protobufDatapoint.dimensions.push(dim);
	    }
	  }
	  this.queue.push(protobufDatapoint);
	};

	ProtoBufSignalFx$1.prototype._batchData = function (datapointsList) {
	  var dpum = new protocolBuffers.DataPointUploadMessage();
	  dpum.datapoints = dpum.datapoints.concat(datapointsList);

	  try {
	    var dataToSend = protocolBuffers.DataPointUploadMessage.encode(dpum);
	    return dataToSend.finish();
	  } catch (error) {
	    logger_1.error('Invalid Protobuf object %s', error);
	  }

	  return undefined;
	};

	ProtoBufSignalFx$1.prototype._buildEvent = function (event) {
	  var protobufEvent = new protocolBuffers.Event();
	  if (event.eventType) {
	    protobufEvent.eventType = event.eventType;
	  }
	  if (event.category) {
	    protobufEvent.category = protocolBuffers.EventCategory[event.category.toUpperCase()];
	  }

	  if (event.timestamp) {
	    protobufEvent.timestamp = +event.timestamp;
	  }

	  // set datapoint dimensions
	  var dimensions = event['dimensions'] || {};
	  for (var key in dimensions) {
	    if (dimensions.hasOwnProperty(key)) {
	      var dim = {};
	      dim.key = key;
	      dim.value = dimensions[key];
	      protobufEvent.dimensions.push(dim);
	    }
	  }

	  // set datapoint dimensions
	  var properties = event.properties || {};
	  for (var keyProp in properties) {
	    if (properties.hasOwnProperty(keyProp)) {
	      var prop = new protocolBuffers.Property();
	      prop.key = keyProp;
	      prop.value = new protocolBuffers.PropertyValue();
	      var rawValue = properties[keyProp];
	      if (typeof rawValue === 'string') { // string value
	        prop.value.strValue = rawValue;
	      } else if (typeof rawValue === 'number' && rawValue % 1 !== 0) { // 'double' value
	        prop.value.doubleValue = +rawValue;
	      } else if (typeof rawValue === 'number' && rawValue % 1 === 0) { // int value
	        prop.value.intValue = +rawValue;
	      } else {
	        throw new TypeError('Invalid Value ' + rawValue);
	      }
	      protobufEvent.properties.push(prop);
	    }
	  }
	  return protobufEvent; // dataToSend.toBuffer();
	};

	ProtoBufSignalFx$1.prototype._encodeEvent = function (protobufEvent) {
	  var eventMessage = new protocolBuffers.EventUploadMessage();
	  eventMessage.events = [];
	  eventMessage.events.push(protobufEvent);
	  var eventToSend = protocolBuffers.EventUploadMessage.encode(eventMessage);
	  return eventToSend.finish();
	};

	var ProtoBufSignalFx_1 = ProtoBufSignalFx$1;

	var protobuf_signal_fx_client = {
		ProtoBufSignalFx: ProtoBufSignalFx_1
	};

	// Copyright (C) 2015 SignalFx, Inc. All rights reserved.

	var SignalFxClient = signal_fx_client.SignalFxClient;

	/**
	 * SignalFx API client data handler that uses Json
	 * This class presents the interfaces that handle the serialization of data
	 * using Json
	 *
	 * @param apiToken
	 * @constructor
	 */
	function JsonSignalFx$1(apiToken) {
	  SignalFxClient.apply(this, arguments);
	}

	JsonSignalFx$1.prototype = Object.create(SignalFxClient.prototype);
	JsonSignalFx$1.prototype.constructor = SignalFxClient;

	JsonSignalFx$1.prototype.getHeaderContentType = function () {
	  return conf.JSON_HEADER_CONTENT_TYPE;
	};

	JsonSignalFx$1.prototype._addToQueue = function (metricType, datapoint) {
	  var jsonObject = {};
	  jsonObject[metricType] = datapoint;
	  this.queue.push(jsonObject);
	};

	JsonSignalFx$1.prototype._batchData = function (datapointsList) {
	  var data = {};
	  datapointsList.forEach(function (element) {

	    for (var metricType in element) {
	      if (element.hasOwnProperty(metricType)) {
	        if (!data[metricType]) {
	          data[metricType] = [];
	        }
	        data[metricType].push(element[metricType]);
	      }
	    }
	  });
	  return JSON.stringify(data);
	};

	JsonSignalFx$1.prototype._buildEvent = function (event) {
	  var trimmedEvent = {};
	  for (var key in event) {
	    if (event.hasOwnProperty(key)) {
	      if (event[key]) {
	        trimmedEvent[key] = event[key];
	      }
	    }
	  }
	  var eventsListToSend = [trimmedEvent];
	  return JSON.stringify(eventsListToSend);
	};

	JsonSignalFx$1.prototype._encodeEvent = function (event) {
	  // Nothing to encode. Just return
	  return event;
	};

	var JsonSignalFx_1 = JsonSignalFx$1;

	var json_signal_fx_client = {
		JsonSignalFx: JsonSignalFx_1
	};

	var byteLength_1 = byteLength;
	var toByteArray_1 = toByteArray;
	var fromByteArray_1 = fromByteArray;

	var lookup = [];
	var revLookup = [];
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;

	var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
	for (var i = 0, len = code.length; i < len; ++i) {
	  lookup[i] = code[i];
	  revLookup[code.charCodeAt(i)] = i;
	}

	// Support decoding URL-safe base64 strings, as Node.js does.
	// See: https://en.wikipedia.org/wiki/Base64#URL_applications
	revLookup['-'.charCodeAt(0)] = 62;
	revLookup['_'.charCodeAt(0)] = 63;

	function getLens (b64) {
	  var len = b64.length;

	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }

	  // Trim off extra bytes after placeholder bytes are found
	  // See: https://github.com/beatgammit/base64-js/issues/42
	  var validLen = b64.indexOf('=');
	  if (validLen === -1) validLen = len;

	  var placeHoldersLen = validLen === len
	    ? 0
	    : 4 - (validLen % 4);

	  return [validLen, placeHoldersLen]
	}

	// base64 is 4/3 + up to two characters of the original data
	function byteLength (b64) {
	  var lens = getLens(b64);
	  var validLen = lens[0];
	  var placeHoldersLen = lens[1];
	  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
	}

	function _byteLength (b64, validLen, placeHoldersLen) {
	  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
	}

	function toByteArray (b64) {
	  var tmp;
	  var lens = getLens(b64);
	  var validLen = lens[0];
	  var placeHoldersLen = lens[1];

	  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));

	  var curByte = 0;

	  // if there are placeholders, only get up to the last complete 4 chars
	  var len = placeHoldersLen > 0
	    ? validLen - 4
	    : validLen;

	  var i;
	  for (i = 0; i < len; i += 4) {
	    tmp =
	      (revLookup[b64.charCodeAt(i)] << 18) |
	      (revLookup[b64.charCodeAt(i + 1)] << 12) |
	      (revLookup[b64.charCodeAt(i + 2)] << 6) |
	      revLookup[b64.charCodeAt(i + 3)];
	    arr[curByte++] = (tmp >> 16) & 0xFF;
	    arr[curByte++] = (tmp >> 8) & 0xFF;
	    arr[curByte++] = tmp & 0xFF;
	  }

	  if (placeHoldersLen === 2) {
	    tmp =
	      (revLookup[b64.charCodeAt(i)] << 2) |
	      (revLookup[b64.charCodeAt(i + 1)] >> 4);
	    arr[curByte++] = tmp & 0xFF;
	  }

	  if (placeHoldersLen === 1) {
	    tmp =
	      (revLookup[b64.charCodeAt(i)] << 10) |
	      (revLookup[b64.charCodeAt(i + 1)] << 4) |
	      (revLookup[b64.charCodeAt(i + 2)] >> 2);
	    arr[curByte++] = (tmp >> 8) & 0xFF;
	    arr[curByte++] = tmp & 0xFF;
	  }

	  return arr
	}

	function tripletToBase64 (num) {
	  return lookup[num >> 18 & 0x3F] +
	    lookup[num >> 12 & 0x3F] +
	    lookup[num >> 6 & 0x3F] +
	    lookup[num & 0x3F]
	}

	function encodeChunk (uint8, start, end) {
	  var tmp;
	  var output = [];
	  for (var i = start; i < end; i += 3) {
	    tmp =
	      ((uint8[i] << 16) & 0xFF0000) +
	      ((uint8[i + 1] << 8) & 0xFF00) +
	      (uint8[i + 2] & 0xFF);
	    output.push(tripletToBase64(tmp));
	  }
	  return output.join('')
	}

	function fromByteArray (uint8) {
	  var tmp;
	  var len = uint8.length;
	  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
	  var parts = [];
	  var maxChunkLength = 16383; // must be multiple of 3

	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
	  }

	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1];
	    parts.push(
	      lookup[tmp >> 2] +
	      lookup[(tmp << 4) & 0x3F] +
	      '=='
	    );
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
	    parts.push(
	      lookup[tmp >> 10] +
	      lookup[(tmp >> 4) & 0x3F] +
	      lookup[(tmp << 2) & 0x3F] +
	      '='
	    );
	  }

	  return parts.join('')
	}

	var base64Js = {
		byteLength: byteLength_1,
		toByteArray: toByteArray_1,
		fromByteArray: fromByteArray_1
	};

	/*! bignumber.js v2.4.0 https://github.com/MikeMcl/bignumber.js/LICENCE */

	var bignumber = createCommonjsModule(function (module) {
	(function (globalObj) {

	    /*
	      bignumber.js v2.4.0
	      A JavaScript library for arbitrary-precision arithmetic.
	      https://github.com/MikeMcl/bignumber.js
	      Copyright (c) 2016 Michael Mclaughlin <M8ch88l@gmail.com>
	      MIT Expat Licence
	    */


	    var BigNumber, cryptoObj, parseNumeric,
	        isNumeric = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,
	        mathceil = Math.ceil,
	        mathfloor = Math.floor,
	        notBool = ' not a boolean or binary digit',
	        roundingMode = 'rounding mode',
	        tooManyDigits = 'number type has more than 15 significant digits',
	        ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',
	        BASE = 1e14,
	        LOG_BASE = 14,
	        MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1
	        // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1
	        POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],
	        SQRT_BASE = 1e7,

	        /*
	         * The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and
	         * the arguments to toExponential, toFixed, toFormat, and toPrecision, beyond which an
	         * exception is thrown (if ERRORS is true).
	         */
	        MAX = 1E9;                                   // 0 to MAX_INT32

	    if ( typeof crypto != 'undefined' ) cryptoObj = crypto;


	    /*
	     * Create and return a BigNumber constructor.
	     */
	    function constructorFactory(configObj) {
	        var div,

	            // id tracks the caller function, so its name can be included in error messages.
	            id = 0,
	            P = BigNumber.prototype,
	            ONE = new BigNumber(1),


	            /********************************* EDITABLE DEFAULTS **********************************/


	            /*
	             * The default values below must be integers within the inclusive ranges stated.
	             * The values can also be changed at run-time using BigNumber.config.
	             */

	            // The maximum number of decimal places for operations involving division.
	            DECIMAL_PLACES = 20,                     // 0 to MAX

	            /*
	             * The rounding mode used when rounding to the above decimal places, and when using
	             * toExponential, toFixed, toFormat and toPrecision, and round (default value).
	             * UP         0 Away from zero.
	             * DOWN       1 Towards zero.
	             * CEIL       2 Towards +Infinity.
	             * FLOOR      3 Towards -Infinity.
	             * HALF_UP    4 Towards nearest neighbour. If equidistant, up.
	             * HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
	             * HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
	             * HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
	             * HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
	             */
	            ROUNDING_MODE = 4,                       // 0 to 8

	            // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]

	            // The exponent value at and beneath which toString returns exponential notation.
	            // Number type: -7
	            TO_EXP_NEG = -7,                         // 0 to -MAX

	            // The exponent value at and above which toString returns exponential notation.
	            // Number type: 21
	            TO_EXP_POS = 21,                         // 0 to MAX

	            // RANGE : [MIN_EXP, MAX_EXP]

	            // The minimum exponent value, beneath which underflow to zero occurs.
	            // Number type: -324  (5e-324)
	            MIN_EXP = -1e7,                          // -1 to -MAX

	            // The maximum exponent value, above which overflow to Infinity occurs.
	            // Number type:  308  (1.7976931348623157e+308)
	            // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.
	            MAX_EXP = 1e7,                           // 1 to MAX

	            // Whether BigNumber Errors are ever thrown.
	            ERRORS = true,                           // true or false

	            // Change to intValidatorNoErrors if ERRORS is false.
	            isValidInt = intValidatorWithErrors,     // intValidatorWithErrors/intValidatorNoErrors

	            // Whether to use cryptographically-secure random number generation, if available.
	            CRYPTO = false,                          // true or false

	            /*
	             * The modulo mode used when calculating the modulus: a mod n.
	             * The quotient (q = a / n) is calculated according to the corresponding rounding mode.
	             * The remainder (r) is calculated as: r = a - n * q.
	             *
	             * UP        0 The remainder is positive if the dividend is negative, else is negative.
	             * DOWN      1 The remainder has the same sign as the dividend.
	             *             This modulo mode is commonly known as 'truncated division' and is
	             *             equivalent to (a % n) in JavaScript.
	             * FLOOR     3 The remainder has the same sign as the divisor (Python %).
	             * HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.
	             * EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).
	             *             The remainder is always positive.
	             *
	             * The truncated division, floored division, Euclidian division and IEEE 754 remainder
	             * modes are commonly used for the modulus operation.
	             * Although the other rounding modes can also be used, they may not give useful results.
	             */
	            MODULO_MODE = 1,                         // 0 to 9

	            // The maximum number of significant digits of the result of the toPower operation.
	            // If POW_PRECISION is 0, there will be unlimited significant digits.
	            POW_PRECISION = 100,                     // 0 to MAX

	            // The format specification used by the BigNumber.prototype.toFormat method.
	            FORMAT = {
	                decimalSeparator: '.',
	                groupSeparator: ',',
	                groupSize: 3,
	                secondaryGroupSize: 0,
	                fractionGroupSeparator: '\xA0',      // non-breaking space
	                fractionGroupSize: 0
	            };


	        /******************************************************************************************/


	        // CONSTRUCTOR


	        /*
	         * The BigNumber constructor and exported function.
	         * Create and return a new instance of a BigNumber object.
	         *
	         * n {number|string|BigNumber} A numeric value.
	         * [b] {number} The base of n. Integer, 2 to 64 inclusive.
	         */
	        function BigNumber( n, b ) {
	            var c, e, i, num, len, str,
	                x = this;

	            // Enable constructor usage without new.
	            if ( !( x instanceof BigNumber ) ) {

	                // 'BigNumber() constructor call without new: {n}'
	                if (ERRORS) raise( 26, 'constructor call without new', n );
	                return new BigNumber( n, b );
	            }

	            // 'new BigNumber() base not an integer: {b}'
	            // 'new BigNumber() base out of range: {b}'
	            if ( b == null || !isValidInt( b, 2, 64, id, 'base' ) ) {

	                // Duplicate.
	                if ( n instanceof BigNumber ) {
	                    x.s = n.s;
	                    x.e = n.e;
	                    x.c = ( n = n.c ) ? n.slice() : n;
	                    id = 0;
	                    return;
	                }

	                if ( ( num = typeof n == 'number' ) && n * 0 == 0 ) {
	                    x.s = 1 / n < 0 ? ( n = -n, -1 ) : 1;

	                    // Fast path for integers.
	                    if ( n === ~~n ) {
	                        for ( e = 0, i = n; i >= 10; i /= 10, e++ );
	                        x.e = e;
	                        x.c = [n];
	                        id = 0;
	                        return;
	                    }

	                    str = n + '';
	                } else {
	                    if ( !isNumeric.test( str = n + '' ) ) return parseNumeric( x, str, num );
	                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;
	                }
	            } else {
	                b = b | 0;
	                str = n + '';

	                // Ensure return value is rounded to DECIMAL_PLACES as with other bases.
	                // Allow exponential notation to be used with base 10 argument.
	                if ( b == 10 ) {
	                    x = new BigNumber( n instanceof BigNumber ? n : str );
	                    return round( x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE );
	                }

	                // Avoid potential interpretation of Infinity and NaN as base 44+ values.
	                // Any number in exponential form will fail due to the [Ee][+-].
	                if ( ( num = typeof n == 'number' ) && n * 0 != 0 ||
	                  !( new RegExp( '^-?' + ( c = '[' + ALPHABET.slice( 0, b ) + ']+' ) +
	                    '(?:\\.' + c + ')?$',b < 37 ? 'i' : '' ) ).test(str) ) {
	                    return parseNumeric( x, str, num, b );
	                }

	                if (num) {
	                    x.s = 1 / n < 0 ? ( str = str.slice(1), -1 ) : 1;

	                    if ( ERRORS && str.replace( /^0\.0*|\./, '' ).length > 15 ) {

	                        // 'new BigNumber() number type has more than 15 significant digits: {n}'
	                        raise( id, tooManyDigits, n );
	                    }

	                    // Prevent later check for length on converted number.
	                    num = false;
	                } else {
	                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;
	                }

	                str = convertBase( str, 10, b, x.s );
	            }

	            // Decimal point?
	            if ( ( e = str.indexOf('.') ) > -1 ) str = str.replace( '.', '' );

	            // Exponential form?
	            if ( ( i = str.search( /e/i ) ) > 0 ) {

	                // Determine exponent.
	                if ( e < 0 ) e = i;
	                e += +str.slice( i + 1 );
	                str = str.substring( 0, i );
	            } else if ( e < 0 ) {

	                // Integer.
	                e = str.length;
	            }

	            // Determine leading zeros.
	            for ( i = 0; str.charCodeAt(i) === 48; i++ );

	            // Determine trailing zeros.
	            for ( len = str.length; str.charCodeAt(--len) === 48; );
	            str = str.slice( i, len + 1 );

	            if (str) {
	                len = str.length;

	                // Disallow numbers with over 15 significant digits if number type.
	                // 'new BigNumber() number type has more than 15 significant digits: {n}'
	                if ( num && ERRORS && len > 15 && ( n > MAX_SAFE_INTEGER || n !== mathfloor(n) ) ) {
	                    raise( id, tooManyDigits, x.s * n );
	                }

	                e = e - i - 1;

	                 // Overflow?
	                if ( e > MAX_EXP ) {

	                    // Infinity.
	                    x.c = x.e = null;

	                // Underflow?
	                } else if ( e < MIN_EXP ) {

	                    // Zero.
	                    x.c = [ x.e = 0 ];
	                } else {
	                    x.e = e;
	                    x.c = [];

	                    // Transform base

	                    // e is the base 10 exponent.
	                    // i is where to slice str to get the first element of the coefficient array.
	                    i = ( e + 1 ) % LOG_BASE;
	                    if ( e < 0 ) i += LOG_BASE;

	                    if ( i < len ) {
	                        if (i) x.c.push( +str.slice( 0, i ) );

	                        for ( len -= LOG_BASE; i < len; ) {
	                            x.c.push( +str.slice( i, i += LOG_BASE ) );
	                        }

	                        str = str.slice(i);
	                        i = LOG_BASE - str.length;
	                    } else {
	                        i -= len;
	                    }

	                    for ( ; i--; str += '0' );
	                    x.c.push( +str );
	                }
	            } else {

	                // Zero.
	                x.c = [ x.e = 0 ];
	            }

	            id = 0;
	        }


	        // CONSTRUCTOR PROPERTIES


	        BigNumber.another = constructorFactory;

	        BigNumber.ROUND_UP = 0;
	        BigNumber.ROUND_DOWN = 1;
	        BigNumber.ROUND_CEIL = 2;
	        BigNumber.ROUND_FLOOR = 3;
	        BigNumber.ROUND_HALF_UP = 4;
	        BigNumber.ROUND_HALF_DOWN = 5;
	        BigNumber.ROUND_HALF_EVEN = 6;
	        BigNumber.ROUND_HALF_CEIL = 7;
	        BigNumber.ROUND_HALF_FLOOR = 8;
	        BigNumber.EUCLID = 9;


	        /*
	         * Configure infrequently-changing library-wide settings.
	         *
	         * Accept an object or an argument list, with one or many of the following properties or
	         * parameters respectively:
	         *
	         *   DECIMAL_PLACES  {number}  Integer, 0 to MAX inclusive
	         *   ROUNDING_MODE   {number}  Integer, 0 to 8 inclusive
	         *   EXPONENTIAL_AT  {number|number[]}  Integer, -MAX to MAX inclusive or
	         *                                      [integer -MAX to 0 incl., 0 to MAX incl.]
	         *   RANGE           {number|number[]}  Non-zero integer, -MAX to MAX inclusive or
	         *                                      [integer -MAX to -1 incl., integer 1 to MAX incl.]
	         *   ERRORS          {boolean|number}   true, false, 1 or 0
	         *   CRYPTO          {boolean|number}   true, false, 1 or 0
	         *   MODULO_MODE     {number}           0 to 9 inclusive
	         *   POW_PRECISION   {number}           0 to MAX inclusive
	         *   FORMAT          {object}           See BigNumber.prototype.toFormat
	         *      decimalSeparator       {string}
	         *      groupSeparator         {string}
	         *      groupSize              {number}
	         *      secondaryGroupSize     {number}
	         *      fractionGroupSeparator {string}
	         *      fractionGroupSize      {number}
	         *
	         * (The values assigned to the above FORMAT object properties are not checked for validity.)
	         *
	         * E.g.
	         * BigNumber.config(20, 4) is equivalent to
	         * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
	         *
	         * Ignore properties/parameters set to null or undefined.
	         * Return an object with the properties current values.
	         */
	        BigNumber.config = function () {
	            var v, p,
	                i = 0,
	                r = {},
	                a = arguments,
	                o = a[0],
	                has = o && typeof o == 'object'
	                  ? function () { if ( o.hasOwnProperty(p) ) return ( v = o[p] ) != null; }
	                  : function () { if ( a.length > i ) return ( v = a[i++] ) != null; };

	            // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.
	            // 'config() DECIMAL_PLACES not an integer: {v}'
	            // 'config() DECIMAL_PLACES out of range: {v}'
	            if ( has( p = 'DECIMAL_PLACES' ) && isValidInt( v, 0, MAX, 2, p ) ) {
	                DECIMAL_PLACES = v | 0;
	            }
	            r[p] = DECIMAL_PLACES;

	            // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.
	            // 'config() ROUNDING_MODE not an integer: {v}'
	            // 'config() ROUNDING_MODE out of range: {v}'
	            if ( has( p = 'ROUNDING_MODE' ) && isValidInt( v, 0, 8, 2, p ) ) {
	                ROUNDING_MODE = v | 0;
	            }
	            r[p] = ROUNDING_MODE;

	            // EXPONENTIAL_AT {number|number[]}
	            // Integer, -MAX to MAX inclusive or [integer -MAX to 0 inclusive, 0 to MAX inclusive].
	            // 'config() EXPONENTIAL_AT not an integer: {v}'
	            // 'config() EXPONENTIAL_AT out of range: {v}'
	            if ( has( p = 'EXPONENTIAL_AT' ) ) {

	                if ( isArray(v) ) {
	                    if ( isValidInt( v[0], -MAX, 0, 2, p ) && isValidInt( v[1], 0, MAX, 2, p ) ) {
	                        TO_EXP_NEG = v[0] | 0;
	                        TO_EXP_POS = v[1] | 0;
	                    }
	                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {
	                    TO_EXP_NEG = -( TO_EXP_POS = ( v < 0 ? -v : v ) | 0 );
	                }
	            }
	            r[p] = [ TO_EXP_NEG, TO_EXP_POS ];

	            // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or
	            // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].
	            // 'config() RANGE not an integer: {v}'
	            // 'config() RANGE cannot be zero: {v}'
	            // 'config() RANGE out of range: {v}'
	            if ( has( p = 'RANGE' ) ) {

	                if ( isArray(v) ) {
	                    if ( isValidInt( v[0], -MAX, -1, 2, p ) && isValidInt( v[1], 1, MAX, 2, p ) ) {
	                        MIN_EXP = v[0] | 0;
	                        MAX_EXP = v[1] | 0;
	                    }
	                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {
	                    if ( v | 0 ) MIN_EXP = -( MAX_EXP = ( v < 0 ? -v : v ) | 0 );
	                    else if (ERRORS) raise( 2, p + ' cannot be zero', v );
	                }
	            }
	            r[p] = [ MIN_EXP, MAX_EXP ];

	            // ERRORS {boolean|number} true, false, 1 or 0.
	            // 'config() ERRORS not a boolean or binary digit: {v}'
	            if ( has( p = 'ERRORS' ) ) {

	                if ( v === !!v || v === 1 || v === 0 ) {
	                    id = 0;
	                    isValidInt = ( ERRORS = !!v ) ? intValidatorWithErrors : intValidatorNoErrors;
	                } else if (ERRORS) {
	                    raise( 2, p + notBool, v );
	                }
	            }
	            r[p] = ERRORS;

	            // CRYPTO {boolean|number} true, false, 1 or 0.
	            // 'config() CRYPTO not a boolean or binary digit: {v}'
	            // 'config() crypto unavailable: {crypto}'
	            if ( has( p = 'CRYPTO' ) ) {

	                if ( v === !!v || v === 1 || v === 0 ) {
	                    CRYPTO = !!( v && cryptoObj );
	                    if ( v && !CRYPTO && ERRORS ) raise( 2, 'crypto unavailable', cryptoObj );
	                } else if (ERRORS) {
	                    raise( 2, p + notBool, v );
	                }
	            }
	            r[p] = CRYPTO;

	            // MODULO_MODE {number} Integer, 0 to 9 inclusive.
	            // 'config() MODULO_MODE not an integer: {v}'
	            // 'config() MODULO_MODE out of range: {v}'
	            if ( has( p = 'MODULO_MODE' ) && isValidInt( v, 0, 9, 2, p ) ) {
	                MODULO_MODE = v | 0;
	            }
	            r[p] = MODULO_MODE;

	            // POW_PRECISION {number} Integer, 0 to MAX inclusive.
	            // 'config() POW_PRECISION not an integer: {v}'
	            // 'config() POW_PRECISION out of range: {v}'
	            if ( has( p = 'POW_PRECISION' ) && isValidInt( v, 0, MAX, 2, p ) ) {
	                POW_PRECISION = v | 0;
	            }
	            r[p] = POW_PRECISION;

	            // FORMAT {object}
	            // 'config() FORMAT not an object: {v}'
	            if ( has( p = 'FORMAT' ) ) {

	                if ( typeof v == 'object' ) {
	                    FORMAT = v;
	                } else if (ERRORS) {
	                    raise( 2, p + ' not an object', v );
	                }
	            }
	            r[p] = FORMAT;

	            return r;
	        };


	        /*
	         * Return a new BigNumber whose value is the maximum of the arguments.
	         *
	         * arguments {number|string|BigNumber}
	         */
	        BigNumber.max = function () { return maxOrMin( arguments, P.lt ); };


	        /*
	         * Return a new BigNumber whose value is the minimum of the arguments.
	         *
	         * arguments {number|string|BigNumber}
	         */
	        BigNumber.min = function () { return maxOrMin( arguments, P.gt ); };


	        /*
	         * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,
	         * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing
	         * zeros are produced).
	         *
	         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
	         *
	         * 'random() decimal places not an integer: {dp}'
	         * 'random() decimal places out of range: {dp}'
	         * 'random() crypto unavailable: {crypto}'
	         */
	        BigNumber.random = (function () {
	            var pow2_53 = 0x20000000000000;

	            // Return a 53 bit integer n, where 0 <= n < 9007199254740992.
	            // Check if Math.random() produces more than 32 bits of randomness.
	            // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.
	            // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.
	            var random53bitInt = (Math.random() * pow2_53) & 0x1fffff
	              ? function () { return mathfloor( Math.random() * pow2_53 ); }
	              : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +
	                  (Math.random() * 0x800000 | 0); };

	            return function (dp) {
	                var a, b, e, k, v,
	                    i = 0,
	                    c = [],
	                    rand = new BigNumber(ONE);

	                dp = dp == null || !isValidInt( dp, 0, MAX, 14 ) ? DECIMAL_PLACES : dp | 0;
	                k = mathceil( dp / LOG_BASE );

	                if (CRYPTO) {

	                    // Browsers supporting crypto.getRandomValues.
	                    if ( cryptoObj && cryptoObj.getRandomValues ) {

	                        a = cryptoObj.getRandomValues( new Uint32Array( k *= 2 ) );

	                        for ( ; i < k; ) {

	                            // 53 bits:
	                            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)
	                            // 11111 11111111 11111111 11111111 11100000 00000000 00000000
	                            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)
	                            //                                     11111 11111111 11111111
	                            // 0x20000 is 2^21.
	                            v = a[i] * 0x20000 + (a[i + 1] >>> 11);

	                            // Rejection sampling:
	                            // 0 <= v < 9007199254740992
	                            // Probability that v >= 9e15, is
	                            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251
	                            if ( v >= 9e15 ) {
	                                b = cryptoObj.getRandomValues( new Uint32Array(2) );
	                                a[i] = b[0];
	                                a[i + 1] = b[1];
	                            } else {

	                                // 0 <= v <= 8999999999999999
	                                // 0 <= (v % 1e14) <= 99999999999999
	                                c.push( v % 1e14 );
	                                i += 2;
	                            }
	                        }
	                        i = k / 2;

	                    // Node.js supporting crypto.randomBytes.
	                    } else if ( cryptoObj && cryptoObj.randomBytes ) {

	                        // buffer
	                        a = cryptoObj.randomBytes( k *= 7 );

	                        for ( ; i < k; ) {

	                            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40
	                            // 0x100000000 is 2^32, 0x1000000 is 2^24
	                            // 11111 11111111 11111111 11111111 11111111 11111111 11111111
	                            // 0 <= v < 9007199254740992
	                            v = ( ( a[i] & 31 ) * 0x1000000000000 ) + ( a[i + 1] * 0x10000000000 ) +
	                                  ( a[i + 2] * 0x100000000 ) + ( a[i + 3] * 0x1000000 ) +
	                                  ( a[i + 4] << 16 ) + ( a[i + 5] << 8 ) + a[i + 6];

	                            if ( v >= 9e15 ) {
	                                cryptoObj.randomBytes(7).copy( a, i );
	                            } else {

	                                // 0 <= (v % 1e14) <= 99999999999999
	                                c.push( v % 1e14 );
	                                i += 7;
	                            }
	                        }
	                        i = k / 7;
	                    } else if (ERRORS) {
	                        raise( 14, 'crypto unavailable', cryptoObj );
	                    }
	                }

	                // Use Math.random: CRYPTO is false or crypto is unavailable and ERRORS is false.
	                if (!i) {

	                    for ( ; i < k; ) {
	                        v = random53bitInt();
	                        if ( v < 9e15 ) c[i++] = v % 1e14;
	                    }
	                }

	                k = c[--i];
	                dp %= LOG_BASE;

	                // Convert trailing digits to zeros according to dp.
	                if ( k && dp ) {
	                    v = POWS_TEN[LOG_BASE - dp];
	                    c[i] = mathfloor( k / v ) * v;
	                }

	                // Remove trailing elements which are zero.
	                for ( ; c[i] === 0; c.pop(), i-- );

	                // Zero?
	                if ( i < 0 ) {
	                    c = [ e = 0 ];
	                } else {

	                    // Remove leading elements which are zero and adjust exponent accordingly.
	                    for ( e = -1 ; c[0] === 0; c.shift(), e -= LOG_BASE);

	                    // Count the digits of the first element of c to determine leading zeros, and...
	                    for ( i = 1, v = c[0]; v >= 10; v /= 10, i++);

	                    // adjust the exponent accordingly.
	                    if ( i < LOG_BASE ) e -= LOG_BASE - i;
	                }

	                rand.e = e;
	                rand.c = c;
	                return rand;
	            };
	        })();


	        // PRIVATE FUNCTIONS


	        // Convert a numeric string of baseIn to a numeric string of baseOut.
	        function convertBase( str, baseOut, baseIn, sign ) {
	            var d, e, k, r, x, xc, y,
	                i = str.indexOf( '.' ),
	                dp = DECIMAL_PLACES,
	                rm = ROUNDING_MODE;

	            if ( baseIn < 37 ) str = str.toLowerCase();

	            // Non-integer.
	            if ( i >= 0 ) {
	                k = POW_PRECISION;

	                // Unlimited precision.
	                POW_PRECISION = 0;
	                str = str.replace( '.', '' );
	                y = new BigNumber(baseIn);
	                x = y.pow( str.length - i );
	                POW_PRECISION = k;

	                // Convert str as if an integer, then restore the fraction part by dividing the
	                // result by its base raised to a power.
	                y.c = toBaseOut( toFixedPoint( coeffToString( x.c ), x.e ), 10, baseOut );
	                y.e = y.c.length;
	            }

	            // Convert the number as integer.
	            xc = toBaseOut( str, baseIn, baseOut );
	            e = k = xc.length;

	            // Remove trailing zeros.
	            for ( ; xc[--k] == 0; xc.pop() );
	            if ( !xc[0] ) return '0';

	            if ( i < 0 ) {
	                --e;
	            } else {
	                x.c = xc;
	                x.e = e;

	                // sign is needed for correct rounding.
	                x.s = sign;
	                x = div( x, y, dp, rm, baseOut );
	                xc = x.c;
	                r = x.r;
	                e = x.e;
	            }

	            d = e + dp + 1;

	            // The rounding digit, i.e. the digit to the right of the digit that may be rounded up.
	            i = xc[d];
	            k = baseOut / 2;
	            r = r || d < 0 || xc[d + 1] != null;

	            r = rm < 4 ? ( i != null || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )
	                       : i > k || i == k &&( rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||
	                         rm == ( x.s < 0 ? 8 : 7 ) );

	            if ( d < 1 || !xc[0] ) {

	                // 1^-dp or 0.
	                str = r ? toFixedPoint( '1', -dp ) : '0';
	            } else {
	                xc.length = d;

	                if (r) {

	                    // Rounding up may mean the previous digit has to be rounded up and so on.
	                    for ( --baseOut; ++xc[--d] > baseOut; ) {
	                        xc[d] = 0;

	                        if ( !d ) {
	                            ++e;
	                            xc.unshift(1);
	                        }
	                    }
	                }

	                // Determine trailing zeros.
	                for ( k = xc.length; !xc[--k]; );

	                // E.g. [4, 11, 15] becomes 4bf.
	                for ( i = 0, str = ''; i <= k; str += ALPHABET.charAt( xc[i++] ) );
	                str = toFixedPoint( str, e );
	            }

	            // The caller will add the sign.
	            return str;
	        }


	        // Perform division in the specified base. Called by div and convertBase.
	        div = (function () {

	            // Assume non-zero x and k.
	            function multiply( x, k, base ) {
	                var m, temp, xlo, xhi,
	                    carry = 0,
	                    i = x.length,
	                    klo = k % SQRT_BASE,
	                    khi = k / SQRT_BASE | 0;

	                for ( x = x.slice(); i--; ) {
	                    xlo = x[i] % SQRT_BASE;
	                    xhi = x[i] / SQRT_BASE | 0;
	                    m = khi * xlo + xhi * klo;
	                    temp = klo * xlo + ( ( m % SQRT_BASE ) * SQRT_BASE ) + carry;
	                    carry = ( temp / base | 0 ) + ( m / SQRT_BASE | 0 ) + khi * xhi;
	                    x[i] = temp % base;
	                }

	                if (carry) x.unshift(carry);

	                return x;
	            }

	            function compare( a, b, aL, bL ) {
	                var i, cmp;

	                if ( aL != bL ) {
	                    cmp = aL > bL ? 1 : -1;
	                } else {

	                    for ( i = cmp = 0; i < aL; i++ ) {

	                        if ( a[i] != b[i] ) {
	                            cmp = a[i] > b[i] ? 1 : -1;
	                            break;
	                        }
	                    }
	                }
	                return cmp;
	            }

	            function subtract( a, b, aL, base ) {
	                var i = 0;

	                // Subtract b from a.
	                for ( ; aL--; ) {
	                    a[aL] -= i;
	                    i = a[aL] < b[aL] ? 1 : 0;
	                    a[aL] = i * base + a[aL] - b[aL];
	                }

	                // Remove leading zeros.
	                for ( ; !a[0] && a.length > 1; a.shift() );
	            }

	            // x: dividend, y: divisor.
	            return function ( x, y, dp, rm, base ) {
	                var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,
	                    yL, yz,
	                    s = x.s == y.s ? 1 : -1,
	                    xc = x.c,
	                    yc = y.c;

	                // Either NaN, Infinity or 0?
	                if ( !xc || !xc[0] || !yc || !yc[0] ) {

	                    return new BigNumber(

	                      // Return NaN if either NaN, or both Infinity or 0.
	                      !x.s || !y.s || ( xc ? yc && xc[0] == yc[0] : !yc ) ? NaN :

	                        // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
	                        xc && xc[0] == 0 || !yc ? s * 0 : s / 0
	                    );
	                }

	                q = new BigNumber(s);
	                qc = q.c = [];
	                e = x.e - y.e;
	                s = dp + e + 1;

	                if ( !base ) {
	                    base = BASE;
	                    e = bitFloor( x.e / LOG_BASE ) - bitFloor( y.e / LOG_BASE );
	                    s = s / LOG_BASE | 0;
	                }

	                // Result exponent may be one less then the current value of e.
	                // The coefficients of the BigNumbers from convertBase may have trailing zeros.
	                for ( i = 0; yc[i] == ( xc[i] || 0 ); i++ );
	                if ( yc[i] > ( xc[i] || 0 ) ) e--;

	                if ( s < 0 ) {
	                    qc.push(1);
	                    more = true;
	                } else {
	                    xL = xc.length;
	                    yL = yc.length;
	                    i = 0;
	                    s += 2;

	                    // Normalise xc and yc so highest order digit of yc is >= base / 2.

	                    n = mathfloor( base / ( yc[0] + 1 ) );

	                    // Not necessary, but to handle odd bases where yc[0] == ( base / 2 ) - 1.
	                    // if ( n > 1 || n++ == 1 && yc[0] < base / 2 ) {
	                    if ( n > 1 ) {
	                        yc = multiply( yc, n, base );
	                        xc = multiply( xc, n, base );
	                        yL = yc.length;
	                        xL = xc.length;
	                    }

	                    xi = yL;
	                    rem = xc.slice( 0, yL );
	                    remL = rem.length;

	                    // Add zeros to make remainder as long as divisor.
	                    for ( ; remL < yL; rem[remL++] = 0 );
	                    yz = yc.slice();
	                    yz.unshift(0);
	                    yc0 = yc[0];
	                    if ( yc[1] >= base / 2 ) yc0++;
	                    // Not necessary, but to prevent trial digit n > base, when using base 3.
	                    // else if ( base == 3 && yc0 == 1 ) yc0 = 1 + 1e-15;

	                    do {
	                        n = 0;

	                        // Compare divisor and remainder.
	                        cmp = compare( yc, rem, yL, remL );

	                        // If divisor < remainder.
	                        if ( cmp < 0 ) {

	                            // Calculate trial digit, n.

	                            rem0 = rem[0];
	                            if ( yL != remL ) rem0 = rem0 * base + ( rem[1] || 0 );

	                            // n is how many times the divisor goes into the current remainder.
	                            n = mathfloor( rem0 / yc0 );

	                            //  Algorithm:
	                            //  1. product = divisor * trial digit (n)
	                            //  2. if product > remainder: product -= divisor, n--
	                            //  3. remainder -= product
	                            //  4. if product was < remainder at 2:
	                            //    5. compare new remainder and divisor
	                            //    6. If remainder > divisor: remainder -= divisor, n++

	                            if ( n > 1 ) {

	                                // n may be > base only when base is 3.
	                                if (n >= base) n = base - 1;

	                                // product = divisor * trial digit.
	                                prod = multiply( yc, n, base );
	                                prodL = prod.length;
	                                remL = rem.length;

	                                // Compare product and remainder.
	                                // If product > remainder.
	                                // Trial digit n too high.
	                                // n is 1 too high about 5% of the time, and is not known to have
	                                // ever been more than 1 too high.
	                                while ( compare( prod, rem, prodL, remL ) == 1 ) {
	                                    n--;

	                                    // Subtract divisor from product.
	                                    subtract( prod, yL < prodL ? yz : yc, prodL, base );
	                                    prodL = prod.length;
	                                    cmp = 1;
	                                }
	                            } else {

	                                // n is 0 or 1, cmp is -1.
	                                // If n is 0, there is no need to compare yc and rem again below,
	                                // so change cmp to 1 to avoid it.
	                                // If n is 1, leave cmp as -1, so yc and rem are compared again.
	                                if ( n == 0 ) {

	                                    // divisor < remainder, so n must be at least 1.
	                                    cmp = n = 1;
	                                }

	                                // product = divisor
	                                prod = yc.slice();
	                                prodL = prod.length;
	                            }

	                            if ( prodL < remL ) prod.unshift(0);

	                            // Subtract product from remainder.
	                            subtract( rem, prod, remL, base );
	                            remL = rem.length;

	                             // If product was < remainder.
	                            if ( cmp == -1 ) {

	                                // Compare divisor and new remainder.
	                                // If divisor < new remainder, subtract divisor from remainder.
	                                // Trial digit n too low.
	                                // n is 1 too low about 5% of the time, and very rarely 2 too low.
	                                while ( compare( yc, rem, yL, remL ) < 1 ) {
	                                    n++;

	                                    // Subtract divisor from remainder.
	                                    subtract( rem, yL < remL ? yz : yc, remL, base );
	                                    remL = rem.length;
	                                }
	                            }
	                        } else if ( cmp === 0 ) {
	                            n++;
	                            rem = [0];
	                        } // else cmp === 1 and n will be 0

	                        // Add the next digit, n, to the result array.
	                        qc[i++] = n;

	                        // Update the remainder.
	                        if ( rem[0] ) {
	                            rem[remL++] = xc[xi] || 0;
	                        } else {
	                            rem = [ xc[xi] ];
	                            remL = 1;
	                        }
	                    } while ( ( xi++ < xL || rem[0] != null ) && s-- );

	                    more = rem[0] != null;

	                    // Leading zero?
	                    if ( !qc[0] ) qc.shift();
	                }

	                if ( base == BASE ) {

	                    // To calculate q.e, first get the number of digits of qc[0].
	                    for ( i = 1, s = qc[0]; s >= 10; s /= 10, i++ );
	                    round( q, dp + ( q.e = i + e * LOG_BASE - 1 ) + 1, rm, more );

	                // Caller is convertBase.
	                } else {
	                    q.e = e;
	                    q.r = +more;
	                }

	                return q;
	            };
	        })();


	        /*
	         * Return a string representing the value of BigNumber n in fixed-point or exponential
	         * notation rounded to the specified decimal places or significant digits.
	         *
	         * n is a BigNumber.
	         * i is the index of the last digit required (i.e. the digit that may be rounded up).
	         * rm is the rounding mode.
	         * caller is caller id: toExponential 19, toFixed 20, toFormat 21, toPrecision 24.
	         */
	        function format( n, i, rm, caller ) {
	            var c0, e, ne, len, str;

	            rm = rm != null && isValidInt( rm, 0, 8, caller, roundingMode )
	              ? rm | 0 : ROUNDING_MODE;

	            if ( !n.c ) return n.toString();
	            c0 = n.c[0];
	            ne = n.e;

	            if ( i == null ) {
	                str = coeffToString( n.c );
	                str = caller == 19 || caller == 24 && ne <= TO_EXP_NEG
	                  ? toExponential( str, ne )
	                  : toFixedPoint( str, ne );
	            } else {
	                n = round( new BigNumber(n), i, rm );

	                // n.e may have changed if the value was rounded up.
	                e = n.e;

	                str = coeffToString( n.c );
	                len = str.length;

	                // toPrecision returns exponential notation if the number of significant digits
	                // specified is less than the number of digits necessary to represent the integer
	                // part of the value in fixed-point notation.

	                // Exponential notation.
	                if ( caller == 19 || caller == 24 && ( i <= e || e <= TO_EXP_NEG ) ) {

	                    // Append zeros?
	                    for ( ; len < i; str += '0', len++ );
	                    str = toExponential( str, e );

	                // Fixed-point notation.
	                } else {
	                    i -= ne;
	                    str = toFixedPoint( str, e );

	                    // Append zeros?
	                    if ( e + 1 > len ) {
	                        if ( --i > 0 ) for ( str += '.'; i--; str += '0' );
	                    } else {
	                        i += e - len;
	                        if ( i > 0 ) {
	                            if ( e + 1 == len ) str += '.';
	                            for ( ; i--; str += '0' );
	                        }
	                    }
	                }
	            }

	            return n.s < 0 && c0 ? '-' + str : str;
	        }


	        // Handle BigNumber.max and BigNumber.min.
	        function maxOrMin( args, method ) {
	            var m, n,
	                i = 0;

	            if ( isArray( args[0] ) ) args = args[0];
	            m = new BigNumber( args[0] );

	            for ( ; ++i < args.length; ) {
	                n = new BigNumber( args[i] );

	                // If any number is NaN, return NaN.
	                if ( !n.s ) {
	                    m = n;
	                    break;
	                } else if ( method.call( m, n ) ) {
	                    m = n;
	                }
	            }

	            return m;
	        }


	        /*
	         * Return true if n is an integer in range, otherwise throw.
	         * Use for argument validation when ERRORS is true.
	         */
	        function intValidatorWithErrors( n, min, max, caller, name ) {
	            if ( n < min || n > max || n != truncate(n) ) {
	                raise( caller, ( name || 'decimal places' ) +
	                  ( n < min || n > max ? ' out of range' : ' not an integer' ), n );
	            }

	            return true;
	        }


	        /*
	         * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.
	         * Called by minus, plus and times.
	         */
	        function normalise( n, c, e ) {
	            var i = 1,
	                j = c.length;

	             // Remove trailing zeros.
	            for ( ; !c[--j]; c.pop() );

	            // Calculate the base 10 exponent. First get the number of digits of c[0].
	            for ( j = c[0]; j >= 10; j /= 10, i++ );

	            // Overflow?
	            if ( ( e = i + e * LOG_BASE - 1 ) > MAX_EXP ) {

	                // Infinity.
	                n.c = n.e = null;

	            // Underflow?
	            } else if ( e < MIN_EXP ) {

	                // Zero.
	                n.c = [ n.e = 0 ];
	            } else {
	                n.e = e;
	                n.c = c;
	            }

	            return n;
	        }


	        // Handle values that fail the validity test in BigNumber.
	        parseNumeric = (function () {
	            var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i,
	                dotAfter = /^([^.]+)\.$/,
	                dotBefore = /^\.([^.]+)$/,
	                isInfinityOrNaN = /^-?(Infinity|NaN)$/,
	                whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;

	            return function ( x, str, num, b ) {
	                var base,
	                    s = num ? str : str.replace( whitespaceOrPlus, '' );

	                // No exception on ±Infinity or NaN.
	                if ( isInfinityOrNaN.test(s) ) {
	                    x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
	                } else {
	                    if ( !num ) {

	                        // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i
	                        s = s.replace( basePrefix, function ( m, p1, p2 ) {
	                            base = ( p2 = p2.toLowerCase() ) == 'x' ? 16 : p2 == 'b' ? 2 : 8;
	                            return !b || b == base ? p1 : m;
	                        });

	                        if (b) {
	                            base = b;

	                            // E.g. '1.' to '1', '.1' to '0.1'
	                            s = s.replace( dotAfter, '$1' ).replace( dotBefore, '0.$1' );
	                        }

	                        if ( str != s ) return new BigNumber( s, base );
	                    }

	                    // 'new BigNumber() not a number: {n}'
	                    // 'new BigNumber() not a base {b} number: {n}'
	                    if (ERRORS) raise( id, 'not a' + ( b ? ' base ' + b : '' ) + ' number', str );
	                    x.s = null;
	                }

	                x.c = x.e = null;
	                id = 0;
	            }
	        })();


	        // Throw a BigNumber Error.
	        function raise( caller, msg, val ) {
	            var error = new Error( [
	                'new BigNumber',     // 0
	                'cmp',               // 1
	                'config',            // 2
	                'div',               // 3
	                'divToInt',          // 4
	                'eq',                // 5
	                'gt',                // 6
	                'gte',               // 7
	                'lt',                // 8
	                'lte',               // 9
	                'minus',             // 10
	                'mod',               // 11
	                'plus',              // 12
	                'precision',         // 13
	                'random',            // 14
	                'round',             // 15
	                'shift',             // 16
	                'times',             // 17
	                'toDigits',          // 18
	                'toExponential',     // 19
	                'toFixed',           // 20
	                'toFormat',          // 21
	                'toFraction',        // 22
	                'pow',               // 23
	                'toPrecision',       // 24
	                'toString',          // 25
	                'BigNumber'          // 26
	            ][caller] + '() ' + msg + ': ' + val );

	            error.name = 'BigNumber Error';
	            id = 0;
	            throw error;
	        }


	        /*
	         * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
	         * If r is truthy, it is known that there are more digits after the rounding digit.
	         */
	        function round( x, sd, rm, r ) {
	            var d, i, j, k, n, ni, rd,
	                xc = x.c,
	                pows10 = POWS_TEN;

	            // if x is not Infinity or NaN...
	            if (xc) {

	                // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.
	                // n is a base 1e14 number, the value of the element of array x.c containing rd.
	                // ni is the index of n within x.c.
	                // d is the number of digits of n.
	                // i is the index of rd within n including leading zeros.
	                // j is the actual index of rd within n (if < 0, rd is a leading zero).
	                out: {

	                    // Get the number of digits of the first element of xc.
	                    for ( d = 1, k = xc[0]; k >= 10; k /= 10, d++ );
	                    i = sd - d;

	                    // If the rounding digit is in the first element of xc...
	                    if ( i < 0 ) {
	                        i += LOG_BASE;
	                        j = sd;
	                        n = xc[ ni = 0 ];

	                        // Get the rounding digit at index j of n.
	                        rd = n / pows10[ d - j - 1 ] % 10 | 0;
	                    } else {
	                        ni = mathceil( ( i + 1 ) / LOG_BASE );

	                        if ( ni >= xc.length ) {

	                            if (r) {

	                                // Needed by sqrt.
	                                for ( ; xc.length <= ni; xc.push(0) );
	                                n = rd = 0;
	                                d = 1;
	                                i %= LOG_BASE;
	                                j = i - LOG_BASE + 1;
	                            } else {
	                                break out;
	                            }
	                        } else {
	                            n = k = xc[ni];

	                            // Get the number of digits of n.
	                            for ( d = 1; k >= 10; k /= 10, d++ );

	                            // Get the index of rd within n.
	                            i %= LOG_BASE;

	                            // Get the index of rd within n, adjusted for leading zeros.
	                            // The number of leading zeros of n is given by LOG_BASE - d.
	                            j = i - LOG_BASE + d;

	                            // Get the rounding digit at index j of n.
	                            rd = j < 0 ? 0 : n / pows10[ d - j - 1 ] % 10 | 0;
	                        }
	                    }

	                    r = r || sd < 0 ||

	                    // Are there any non-zero digits after the rounding digit?
	                    // The expression  n % pows10[ d - j - 1 ]  returns all digits of n to the right
	                    // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
	                      xc[ni + 1] != null || ( j < 0 ? n : n % pows10[ d - j - 1 ] );

	                    r = rm < 4
	                      ? ( rd || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )
	                      : rd > 5 || rd == 5 && ( rm == 4 || r || rm == 6 &&

	                        // Check whether the digit to the left of the rounding digit is odd.
	                        ( ( i > 0 ? j > 0 ? n / pows10[ d - j ] : 0 : xc[ni - 1] ) % 10 ) & 1 ||
	                          rm == ( x.s < 0 ? 8 : 7 ) );

	                    if ( sd < 1 || !xc[0] ) {
	                        xc.length = 0;

	                        if (r) {

	                            // Convert sd to decimal places.
	                            sd -= x.e + 1;

	                            // 1, 0.1, 0.01, 0.001, 0.0001 etc.
	                            xc[0] = pows10[ ( LOG_BASE - sd % LOG_BASE ) % LOG_BASE ];
	                            x.e = -sd || 0;
	                        } else {

	                            // Zero.
	                            xc[0] = x.e = 0;
	                        }

	                        return x;
	                    }

	                    // Remove excess digits.
	                    if ( i == 0 ) {
	                        xc.length = ni;
	                        k = 1;
	                        ni--;
	                    } else {
	                        xc.length = ni + 1;
	                        k = pows10[ LOG_BASE - i ];

	                        // E.g. 56700 becomes 56000 if 7 is the rounding digit.
	                        // j > 0 means i > number of leading zeros of n.
	                        xc[ni] = j > 0 ? mathfloor( n / pows10[ d - j ] % pows10[j] ) * k : 0;
	                    }

	                    // Round up?
	                    if (r) {

	                        for ( ; ; ) {

	                            // If the digit to be rounded up is in the first element of xc...
	                            if ( ni == 0 ) {

	                                // i will be the length of xc[0] before k is added.
	                                for ( i = 1, j = xc[0]; j >= 10; j /= 10, i++ );
	                                j = xc[0] += k;
	                                for ( k = 1; j >= 10; j /= 10, k++ );

	                                // if i != k the length has increased.
	                                if ( i != k ) {
	                                    x.e++;
	                                    if ( xc[0] == BASE ) xc[0] = 1;
	                                }

	                                break;
	                            } else {
	                                xc[ni] += k;
	                                if ( xc[ni] != BASE ) break;
	                                xc[ni--] = 0;
	                                k = 1;
	                            }
	                        }
	                    }

	                    // Remove trailing zeros.
	                    for ( i = xc.length; xc[--i] === 0; xc.pop() );
	                }

	                // Overflow? Infinity.
	                if ( x.e > MAX_EXP ) {
	                    x.c = x.e = null;

	                // Underflow? Zero.
	                } else if ( x.e < MIN_EXP ) {
	                    x.c = [ x.e = 0 ];
	                }
	            }

	            return x;
	        }


	        // PROTOTYPE/INSTANCE METHODS


	        /*
	         * Return a new BigNumber whose value is the absolute value of this BigNumber.
	         */
	        P.absoluteValue = P.abs = function () {
	            var x = new BigNumber(this);
	            if ( x.s < 0 ) x.s = 1;
	            return x;
	        };


	        /*
	         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole
	         * number in the direction of Infinity.
	         */
	        P.ceil = function () {
	            return round( new BigNumber(this), this.e + 1, 2 );
	        };


	        /*
	         * Return
	         * 1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
	         * -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
	         * 0 if they have the same value,
	         * or null if the value of either is NaN.
	         */
	        P.comparedTo = P.cmp = function ( y, b ) {
	            id = 1;
	            return compare( this, new BigNumber( y, b ) );
	        };


	        /*
	         * Return the number of decimal places of the value of this BigNumber, or null if the value
	         * of this BigNumber is ±Infinity or NaN.
	         */
	        P.decimalPlaces = P.dp = function () {
	            var n, v,
	                c = this.c;

	            if ( !c ) return null;
	            n = ( ( v = c.length - 1 ) - bitFloor( this.e / LOG_BASE ) ) * LOG_BASE;

	            // Subtract the number of trailing zeros of the last number.
	            if ( v = c[v] ) for ( ; v % 10 == 0; v /= 10, n-- );
	            if ( n < 0 ) n = 0;

	            return n;
	        };


	        /*
	         *  n / 0 = I
	         *  n / N = N
	         *  n / I = 0
	         *  0 / n = 0
	         *  0 / 0 = N
	         *  0 / N = N
	         *  0 / I = 0
	         *  N / n = N
	         *  N / 0 = N
	         *  N / N = N
	         *  N / I = N
	         *  I / n = I
	         *  I / 0 = I
	         *  I / N = N
	         *  I / I = N
	         *
	         * Return a new BigNumber whose value is the value of this BigNumber divided by the value of
	         * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.
	         */
	        P.dividedBy = P.div = function ( y, b ) {
	            id = 3;
	            return div( this, new BigNumber( y, b ), DECIMAL_PLACES, ROUNDING_MODE );
	        };


	        /*
	         * Return a new BigNumber whose value is the integer part of dividing the value of this
	         * BigNumber by the value of BigNumber(y, b).
	         */
	        P.dividedToIntegerBy = P.divToInt = function ( y, b ) {
	            id = 4;
	            return div( this, new BigNumber( y, b ), 0, 1 );
	        };


	        /*
	         * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),
	         * otherwise returns false.
	         */
	        P.equals = P.eq = function ( y, b ) {
	            id = 5;
	            return compare( this, new BigNumber( y, b ) ) === 0;
	        };


	        /*
	         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole
	         * number in the direction of -Infinity.
	         */
	        P.floor = function () {
	            return round( new BigNumber(this), this.e + 1, 3 );
	        };


	        /*
	         * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),
	         * otherwise returns false.
	         */
	        P.greaterThan = P.gt = function ( y, b ) {
	            id = 6;
	            return compare( this, new BigNumber( y, b ) ) > 0;
	        };


	        /*
	         * Return true if the value of this BigNumber is greater than or equal to the value of
	         * BigNumber(y, b), otherwise returns false.
	         */
	        P.greaterThanOrEqualTo = P.gte = function ( y, b ) {
	            id = 7;
	            return ( b = compare( this, new BigNumber( y, b ) ) ) === 1 || b === 0;

	        };


	        /*
	         * Return true if the value of this BigNumber is a finite number, otherwise returns false.
	         */
	        P.isFinite = function () {
	            return !!this.c;
	        };


	        /*
	         * Return true if the value of this BigNumber is an integer, otherwise return false.
	         */
	        P.isInteger = P.isInt = function () {
	            return !!this.c && bitFloor( this.e / LOG_BASE ) > this.c.length - 2;
	        };


	        /*
	         * Return true if the value of this BigNumber is NaN, otherwise returns false.
	         */
	        P.isNaN = function () {
	            return !this.s;
	        };


	        /*
	         * Return true if the value of this BigNumber is negative, otherwise returns false.
	         */
	        P.isNegative = P.isNeg = function () {
	            return this.s < 0;
	        };


	        /*
	         * Return true if the value of this BigNumber is 0 or -0, otherwise returns false.
	         */
	        P.isZero = function () {
	            return !!this.c && this.c[0] == 0;
	        };


	        /*
	         * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),
	         * otherwise returns false.
	         */
	        P.lessThan = P.lt = function ( y, b ) {
	            id = 8;
	            return compare( this, new BigNumber( y, b ) ) < 0;
	        };


	        /*
	         * Return true if the value of this BigNumber is less than or equal to the value of
	         * BigNumber(y, b), otherwise returns false.
	         */
	        P.lessThanOrEqualTo = P.lte = function ( y, b ) {
	            id = 9;
	            return ( b = compare( this, new BigNumber( y, b ) ) ) === -1 || b === 0;
	        };


	        /*
	         *  n - 0 = n
	         *  n - N = N
	         *  n - I = -I
	         *  0 - n = -n
	         *  0 - 0 = 0
	         *  0 - N = N
	         *  0 - I = -I
	         *  N - n = N
	         *  N - 0 = N
	         *  N - N = N
	         *  N - I = N
	         *  I - n = I
	         *  I - 0 = I
	         *  I - N = N
	         *  I - I = N
	         *
	         * Return a new BigNumber whose value is the value of this BigNumber minus the value of
	         * BigNumber(y, b).
	         */
	        P.minus = P.sub = function ( y, b ) {
	            var i, j, t, xLTy,
	                x = this,
	                a = x.s;

	            id = 10;
	            y = new BigNumber( y, b );
	            b = y.s;

	            // Either NaN?
	            if ( !a || !b ) return new BigNumber(NaN);

	            // Signs differ?
	            if ( a != b ) {
	                y.s = -b;
	                return x.plus(y);
	            }

	            var xe = x.e / LOG_BASE,
	                ye = y.e / LOG_BASE,
	                xc = x.c,
	                yc = y.c;

	            if ( !xe || !ye ) {

	                // Either Infinity?
	                if ( !xc || !yc ) return xc ? ( y.s = -b, y ) : new BigNumber( yc ? x : NaN );

	                // Either zero?
	                if ( !xc[0] || !yc[0] ) {

	                    // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
	                    return yc[0] ? ( y.s = -b, y ) : new BigNumber( xc[0] ? x :

	                      // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
	                      ROUNDING_MODE == 3 ? -0 : 0 );
	                }
	            }

	            xe = bitFloor(xe);
	            ye = bitFloor(ye);
	            xc = xc.slice();

	            // Determine which is the bigger number.
	            if ( a = xe - ye ) {

	                if ( xLTy = a < 0 ) {
	                    a = -a;
	                    t = xc;
	                } else {
	                    ye = xe;
	                    t = yc;
	                }

	                t.reverse();

	                // Prepend zeros to equalise exponents.
	                for ( b = a; b--; t.push(0) );
	                t.reverse();
	            } else {

	                // Exponents equal. Check digit by digit.
	                j = ( xLTy = ( a = xc.length ) < ( b = yc.length ) ) ? a : b;

	                for ( a = b = 0; b < j; b++ ) {

	                    if ( xc[b] != yc[b] ) {
	                        xLTy = xc[b] < yc[b];
	                        break;
	                    }
	                }
	            }

	            // x < y? Point xc to the array of the bigger number.
	            if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;

	            b = ( j = yc.length ) - ( i = xc.length );

	            // Append zeros to xc if shorter.
	            // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.
	            if ( b > 0 ) for ( ; b--; xc[i++] = 0 );
	            b = BASE - 1;

	            // Subtract yc from xc.
	            for ( ; j > a; ) {

	                if ( xc[--j] < yc[j] ) {
	                    for ( i = j; i && !xc[--i]; xc[i] = b );
	                    --xc[i];
	                    xc[j] += BASE;
	                }

	                xc[j] -= yc[j];
	            }

	            // Remove leading zeros and adjust exponent accordingly.
	            for ( ; xc[0] == 0; xc.shift(), --ye );

	            // Zero?
	            if ( !xc[0] ) {

	                // Following IEEE 754 (2008) 6.3,
	                // n - n = +0  but  n - n = -0  when rounding towards -Infinity.
	                y.s = ROUNDING_MODE == 3 ? -1 : 1;
	                y.c = [ y.e = 0 ];
	                return y;
	            }

	            // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
	            // for finite x and y.
	            return normalise( y, xc, ye );
	        };


	        /*
	         *   n % 0 =  N
	         *   n % N =  N
	         *   n % I =  n
	         *   0 % n =  0
	         *  -0 % n = -0
	         *   0 % 0 =  N
	         *   0 % N =  N
	         *   0 % I =  0
	         *   N % n =  N
	         *   N % 0 =  N
	         *   N % N =  N
	         *   N % I =  N
	         *   I % n =  N
	         *   I % 0 =  N
	         *   I % N =  N
	         *   I % I =  N
	         *
	         * Return a new BigNumber whose value is the value of this BigNumber modulo the value of
	         * BigNumber(y, b). The result depends on the value of MODULO_MODE.
	         */
	        P.modulo = P.mod = function ( y, b ) {
	            var q, s,
	                x = this;

	            id = 11;
	            y = new BigNumber( y, b );

	            // Return NaN if x is Infinity or NaN, or y is NaN or zero.
	            if ( !x.c || !y.s || y.c && !y.c[0] ) {
	                return new BigNumber(NaN);

	            // Return x if y is Infinity or x is zero.
	            } else if ( !y.c || x.c && !x.c[0] ) {
	                return new BigNumber(x);
	            }

	            if ( MODULO_MODE == 9 ) {

	                // Euclidian division: q = sign(y) * floor(x / abs(y))
	                // r = x - qy    where  0 <= r < abs(y)
	                s = y.s;
	                y.s = 1;
	                q = div( x, y, 0, 3 );
	                y.s = s;
	                q.s *= s;
	            } else {
	                q = div( x, y, 0, MODULO_MODE );
	            }

	            return x.minus( q.times(y) );
	        };


	        /*
	         * Return a new BigNumber whose value is the value of this BigNumber negated,
	         * i.e. multiplied by -1.
	         */
	        P.negated = P.neg = function () {
	            var x = new BigNumber(this);
	            x.s = -x.s || null;
	            return x;
	        };


	        /*
	         *  n + 0 = n
	         *  n + N = N
	         *  n + I = I
	         *  0 + n = n
	         *  0 + 0 = 0
	         *  0 + N = N
	         *  0 + I = I
	         *  N + n = N
	         *  N + 0 = N
	         *  N + N = N
	         *  N + I = N
	         *  I + n = I
	         *  I + 0 = I
	         *  I + N = N
	         *  I + I = I
	         *
	         * Return a new BigNumber whose value is the value of this BigNumber plus the value of
	         * BigNumber(y, b).
	         */
	        P.plus = P.add = function ( y, b ) {
	            var t,
	                x = this,
	                a = x.s;

	            id = 12;
	            y = new BigNumber( y, b );
	            b = y.s;

	            // Either NaN?
	            if ( !a || !b ) return new BigNumber(NaN);

	            // Signs differ?
	             if ( a != b ) {
	                y.s = -b;
	                return x.minus(y);
	            }

	            var xe = x.e / LOG_BASE,
	                ye = y.e / LOG_BASE,
	                xc = x.c,
	                yc = y.c;

	            if ( !xe || !ye ) {

	                // Return ±Infinity if either ±Infinity.
	                if ( !xc || !yc ) return new BigNumber( a / 0 );

	                // Either zero?
	                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
	                if ( !xc[0] || !yc[0] ) return yc[0] ? y : new BigNumber( xc[0] ? x : a * 0 );
	            }

	            xe = bitFloor(xe);
	            ye = bitFloor(ye);
	            xc = xc.slice();

	            // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.
	            if ( a = xe - ye ) {
	                if ( a > 0 ) {
	                    ye = xe;
	                    t = yc;
	                } else {
	                    a = -a;
	                    t = xc;
	                }

	                t.reverse();
	                for ( ; a--; t.push(0) );
	                t.reverse();
	            }

	            a = xc.length;
	            b = yc.length;

	            // Point xc to the longer array, and b to the shorter length.
	            if ( a - b < 0 ) t = yc, yc = xc, xc = t, b = a;

	            // Only start adding at yc.length - 1 as the further digits of xc can be ignored.
	            for ( a = 0; b; ) {
	                a = ( xc[--b] = xc[b] + yc[b] + a ) / BASE | 0;
	                xc[b] %= BASE;
	            }

	            if (a) {
	                xc.unshift(a);
	                ++ye;
	            }

	            // No need to check for zero, as +x + +y != 0 && -x + -y != 0
	            // ye = MAX_EXP + 1 possible
	            return normalise( y, xc, ye );
	        };


	        /*
	         * Return the number of significant digits of the value of this BigNumber.
	         *
	         * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.
	         */
	        P.precision = P.sd = function (z) {
	            var n, v,
	                x = this,
	                c = x.c;

	            // 'precision() argument not a boolean or binary digit: {z}'
	            if ( z != null && z !== !!z && z !== 1 && z !== 0 ) {
	                if (ERRORS) raise( 13, 'argument' + notBool, z );
	                if ( z != !!z ) z = null;
	            }

	            if ( !c ) return null;
	            v = c.length - 1;
	            n = v * LOG_BASE + 1;

	            if ( v = c[v] ) {

	                // Subtract the number of trailing zeros of the last element.
	                for ( ; v % 10 == 0; v /= 10, n-- );

	                // Add the number of digits of the first element.
	                for ( v = c[0]; v >= 10; v /= 10, n++ );
	            }

	            if ( z && x.e + 1 > n ) n = x.e + 1;

	            return n;
	        };


	        /*
	         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of
	         * dp decimal places using rounding mode rm, or to 0 and ROUNDING_MODE respectively if
	         * omitted.
	         *
	         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
	         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	         *
	         * 'round() decimal places out of range: {dp}'
	         * 'round() decimal places not an integer: {dp}'
	         * 'round() rounding mode not an integer: {rm}'
	         * 'round() rounding mode out of range: {rm}'
	         */
	        P.round = function ( dp, rm ) {
	            var n = new BigNumber(this);

	            if ( dp == null || isValidInt( dp, 0, MAX, 15 ) ) {
	                round( n, ~~dp + this.e + 1, rm == null ||
	                  !isValidInt( rm, 0, 8, 15, roundingMode ) ? ROUNDING_MODE : rm | 0 );
	            }

	            return n;
	        };


	        /*
	         * Return a new BigNumber whose value is the value of this BigNumber shifted by k places
	         * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.
	         *
	         * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
	         *
	         * If k is out of range and ERRORS is false, the result will be ±0 if k < 0, or ±Infinity
	         * otherwise.
	         *
	         * 'shift() argument not an integer: {k}'
	         * 'shift() argument out of range: {k}'
	         */
	        P.shift = function (k) {
	            var n = this;
	            return isValidInt( k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 16, 'argument' )

	              // k < 1e+21, or truncate(k) will produce exponential notation.
	              ? n.times( '1e' + truncate(k) )
	              : new BigNumber( n.c && n.c[0] && ( k < -MAX_SAFE_INTEGER || k > MAX_SAFE_INTEGER )
	                ? n.s * ( k < 0 ? 0 : 1 / 0 )
	                : n );
	        };


	        /*
	         *  sqrt(-n) =  N
	         *  sqrt( N) =  N
	         *  sqrt(-I) =  N
	         *  sqrt( I) =  I
	         *  sqrt( 0) =  0
	         *  sqrt(-0) = -0
	         *
	         * Return a new BigNumber whose value is the square root of the value of this BigNumber,
	         * rounded according to DECIMAL_PLACES and ROUNDING_MODE.
	         */
	        P.squareRoot = P.sqrt = function () {
	            var m, n, r, rep, t,
	                x = this,
	                c = x.c,
	                s = x.s,
	                e = x.e,
	                dp = DECIMAL_PLACES + 4,
	                half = new BigNumber('0.5');

	            // Negative/NaN/Infinity/zero?
	            if ( s !== 1 || !c || !c[0] ) {
	                return new BigNumber( !s || s < 0 && ( !c || c[0] ) ? NaN : c ? x : 1 / 0 );
	            }

	            // Initial estimate.
	            s = Math.sqrt( +x );

	            // Math.sqrt underflow/overflow?
	            // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
	            if ( s == 0 || s == 1 / 0 ) {
	                n = coeffToString(c);
	                if ( ( n.length + e ) % 2 == 0 ) n += '0';
	                s = Math.sqrt(n);
	                e = bitFloor( ( e + 1 ) / 2 ) - ( e < 0 || e % 2 );

	                if ( s == 1 / 0 ) {
	                    n = '1e' + e;
	                } else {
	                    n = s.toExponential();
	                    n = n.slice( 0, n.indexOf('e') + 1 ) + e;
	                }

	                r = new BigNumber(n);
	            } else {
	                r = new BigNumber( s + '' );
	            }

	            // Check for zero.
	            // r could be zero if MIN_EXP is changed after the this value was created.
	            // This would cause a division by zero (x/t) and hence Infinity below, which would cause
	            // coeffToString to throw.
	            if ( r.c[0] ) {
	                e = r.e;
	                s = e + dp;
	                if ( s < 3 ) s = 0;

	                // Newton-Raphson iteration.
	                for ( ; ; ) {
	                    t = r;
	                    r = half.times( t.plus( div( x, t, dp, 1 ) ) );

	                    if ( coeffToString( t.c   ).slice( 0, s ) === ( n =
	                         coeffToString( r.c ) ).slice( 0, s ) ) {

	                        // The exponent of r may here be one less than the final result exponent,
	                        // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits
	                        // are indexed correctly.
	                        if ( r.e < e ) --s;
	                        n = n.slice( s - 3, s + 1 );

	                        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits
	                        // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the
	                        // iteration.
	                        if ( n == '9999' || !rep && n == '4999' ) {

	                            // On the first iteration only, check to see if rounding up gives the
	                            // exact result as the nines may infinitely repeat.
	                            if ( !rep ) {
	                                round( t, t.e + DECIMAL_PLACES + 2, 0 );

	                                if ( t.times(t).eq(x) ) {
	                                    r = t;
	                                    break;
	                                }
	                            }

	                            dp += 4;
	                            s += 4;
	                            rep = 1;
	                        } else {

	                            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact
	                            // result. If not, then there are further digits and m will be truthy.
	                            if ( !+n || !+n.slice(1) && n.charAt(0) == '5' ) {

	                                // Truncate to the first rounding digit.
	                                round( r, r.e + DECIMAL_PLACES + 2, 1 );
	                                m = !r.times(r).eq(x);
	                            }

	                            break;
	                        }
	                    }
	                }
	            }

	            return round( r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m );
	        };


	        /*
	         *  n * 0 = 0
	         *  n * N = N
	         *  n * I = I
	         *  0 * n = 0
	         *  0 * 0 = 0
	         *  0 * N = N
	         *  0 * I = N
	         *  N * n = N
	         *  N * 0 = N
	         *  N * N = N
	         *  N * I = N
	         *  I * n = I
	         *  I * 0 = N
	         *  I * N = N
	         *  I * I = I
	         *
	         * Return a new BigNumber whose value is the value of this BigNumber times the value of
	         * BigNumber(y, b).
	         */
	        P.times = P.mul = function ( y, b ) {
	            var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,
	                base, sqrtBase,
	                x = this,
	                xc = x.c,
	                yc = ( id = 17, y = new BigNumber( y, b ) ).c;

	            // Either NaN, ±Infinity or ±0?
	            if ( !xc || !yc || !xc[0] || !yc[0] ) {

	                // Return NaN if either is NaN, or one is 0 and the other is Infinity.
	                if ( !x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc ) {
	                    y.c = y.e = y.s = null;
	                } else {
	                    y.s *= x.s;

	                    // Return ±Infinity if either is ±Infinity.
	                    if ( !xc || !yc ) {
	                        y.c = y.e = null;

	                    // Return ±0 if either is ±0.
	                    } else {
	                        y.c = [0];
	                        y.e = 0;
	                    }
	                }

	                return y;
	            }

	            e = bitFloor( x.e / LOG_BASE ) + bitFloor( y.e / LOG_BASE );
	            y.s *= x.s;
	            xcL = xc.length;
	            ycL = yc.length;

	            // Ensure xc points to longer array and xcL to its length.
	            if ( xcL < ycL ) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;

	            // Initialise the result array with zeros.
	            for ( i = xcL + ycL, zc = []; i--; zc.push(0) );

	            base = BASE;
	            sqrtBase = SQRT_BASE;

	            for ( i = ycL; --i >= 0; ) {
	                c = 0;
	                ylo = yc[i] % sqrtBase;
	                yhi = yc[i] / sqrtBase | 0;

	                for ( k = xcL, j = i + k; j > i; ) {
	                    xlo = xc[--k] % sqrtBase;
	                    xhi = xc[k] / sqrtBase | 0;
	                    m = yhi * xlo + xhi * ylo;
	                    xlo = ylo * xlo + ( ( m % sqrtBase ) * sqrtBase ) + zc[j] + c;
	                    c = ( xlo / base | 0 ) + ( m / sqrtBase | 0 ) + yhi * xhi;
	                    zc[j--] = xlo % base;
	                }

	                zc[j] = c;
	            }

	            if (c) {
	                ++e;
	            } else {
	                zc.shift();
	            }

	            return normalise( y, zc, e );
	        };


	        /*
	         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of
	         * sd significant digits using rounding mode rm, or ROUNDING_MODE if rm is omitted.
	         *
	         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
	         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	         *
	         * 'toDigits() precision out of range: {sd}'
	         * 'toDigits() precision not an integer: {sd}'
	         * 'toDigits() rounding mode not an integer: {rm}'
	         * 'toDigits() rounding mode out of range: {rm}'
	         */
	        P.toDigits = function ( sd, rm ) {
	            var n = new BigNumber(this);
	            sd = sd == null || !isValidInt( sd, 1, MAX, 18, 'precision' ) ? null : sd | 0;
	            rm = rm == null || !isValidInt( rm, 0, 8, 18, roundingMode ) ? ROUNDING_MODE : rm | 0;
	            return sd ? round( n, sd, rm ) : n;
	        };


	        /*
	         * Return a string representing the value of this BigNumber in exponential notation and
	         * rounded using ROUNDING_MODE to dp fixed decimal places.
	         *
	         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
	         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	         *
	         * 'toExponential() decimal places not an integer: {dp}'
	         * 'toExponential() decimal places out of range: {dp}'
	         * 'toExponential() rounding mode not an integer: {rm}'
	         * 'toExponential() rounding mode out of range: {rm}'
	         */
	        P.toExponential = function ( dp, rm ) {
	            return format( this,
	              dp != null && isValidInt( dp, 0, MAX, 19 ) ? ~~dp + 1 : null, rm, 19 );
	        };


	        /*
	         * Return a string representing the value of this BigNumber in fixed-point notation rounding
	         * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.
	         *
	         * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
	         * but e.g. (-0.00001).toFixed(0) is '-0'.
	         *
	         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
	         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	         *
	         * 'toFixed() decimal places not an integer: {dp}'
	         * 'toFixed() decimal places out of range: {dp}'
	         * 'toFixed() rounding mode not an integer: {rm}'
	         * 'toFixed() rounding mode out of range: {rm}'
	         */
	        P.toFixed = function ( dp, rm ) {
	            return format( this, dp != null && isValidInt( dp, 0, MAX, 20 )
	              ? ~~dp + this.e + 1 : null, rm, 20 );
	        };


	        /*
	         * Return a string representing the value of this BigNumber in fixed-point notation rounded
	         * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties
	         * of the FORMAT object (see BigNumber.config).
	         *
	         * FORMAT = {
	         *      decimalSeparator : '.',
	         *      groupSeparator : ',',
	         *      groupSize : 3,
	         *      secondaryGroupSize : 0,
	         *      fractionGroupSeparator : '\xA0',    // non-breaking space
	         *      fractionGroupSize : 0
	         * };
	         *
	         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
	         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	         *
	         * 'toFormat() decimal places not an integer: {dp}'
	         * 'toFormat() decimal places out of range: {dp}'
	         * 'toFormat() rounding mode not an integer: {rm}'
	         * 'toFormat() rounding mode out of range: {rm}'
	         */
	        P.toFormat = function ( dp, rm ) {
	            var str = format( this, dp != null && isValidInt( dp, 0, MAX, 21 )
	              ? ~~dp + this.e + 1 : null, rm, 21 );

	            if ( this.c ) {
	                var i,
	                    arr = str.split('.'),
	                    g1 = +FORMAT.groupSize,
	                    g2 = +FORMAT.secondaryGroupSize,
	                    groupSeparator = FORMAT.groupSeparator,
	                    intPart = arr[0],
	                    fractionPart = arr[1],
	                    isNeg = this.s < 0,
	                    intDigits = isNeg ? intPart.slice(1) : intPart,
	                    len = intDigits.length;

	                if (g2) i = g1, g1 = g2, g2 = i, len -= i;

	                if ( g1 > 0 && len > 0 ) {
	                    i = len % g1 || g1;
	                    intPart = intDigits.substr( 0, i );

	                    for ( ; i < len; i += g1 ) {
	                        intPart += groupSeparator + intDigits.substr( i, g1 );
	                    }

	                    if ( g2 > 0 ) intPart += groupSeparator + intDigits.slice(i);
	                    if (isNeg) intPart = '-' + intPart;
	                }

	                str = fractionPart
	                  ? intPart + FORMAT.decimalSeparator + ( ( g2 = +FORMAT.fractionGroupSize )
	                    ? fractionPart.replace( new RegExp( '\\d{' + g2 + '}\\B', 'g' ),
	                      '$&' + FORMAT.fractionGroupSeparator )
	                    : fractionPart )
	                  : intPart;
	            }

	            return str;
	        };


	        /*
	         * Return a string array representing the value of this BigNumber as a simple fraction with
	         * an integer numerator and an integer denominator. The denominator will be a positive
	         * non-zero value less than or equal to the specified maximum denominator. If a maximum
	         * denominator is not specified, the denominator will be the lowest value necessary to
	         * represent the number exactly.
	         *
	         * [md] {number|string|BigNumber} Integer >= 1 and < Infinity. The maximum denominator.
	         *
	         * 'toFraction() max denominator not an integer: {md}'
	         * 'toFraction() max denominator out of range: {md}'
	         */
	        P.toFraction = function (md) {
	            var arr, d0, d2, e, exp, n, n0, q, s,
	                k = ERRORS,
	                x = this,
	                xc = x.c,
	                d = new BigNumber(ONE),
	                n1 = d0 = new BigNumber(ONE),
	                d1 = n0 = new BigNumber(ONE);

	            if ( md != null ) {
	                ERRORS = false;
	                n = new BigNumber(md);
	                ERRORS = k;

	                if ( !( k = n.isInt() ) || n.lt(ONE) ) {

	                    if (ERRORS) {
	                        raise( 22,
	                          'max denominator ' + ( k ? 'out of range' : 'not an integer' ), md );
	                    }

	                    // ERRORS is false:
	                    // If md is a finite non-integer >= 1, round it to an integer and use it.
	                    md = !k && n.c && round( n, n.e + 1, 1 ).gte(ONE) ? n : null;
	                }
	            }

	            if ( !xc ) return x.toString();
	            s = coeffToString(xc);

	            // Determine initial denominator.
	            // d is a power of 10 and the minimum max denominator that specifies the value exactly.
	            e = d.e = s.length - x.e - 1;
	            d.c[0] = POWS_TEN[ ( exp = e % LOG_BASE ) < 0 ? LOG_BASE + exp : exp ];
	            md = !md || n.cmp(d) > 0 ? ( e > 0 ? d : n1 ) : n;

	            exp = MAX_EXP;
	            MAX_EXP = 1 / 0;
	            n = new BigNumber(s);

	            // n0 = d1 = 0
	            n0.c[0] = 0;

	            for ( ; ; )  {
	                q = div( n, d, 0, 1 );
	                d2 = d0.plus( q.times(d1) );
	                if ( d2.cmp(md) == 1 ) break;
	                d0 = d1;
	                d1 = d2;
	                n1 = n0.plus( q.times( d2 = n1 ) );
	                n0 = d2;
	                d = n.minus( q.times( d2 = d ) );
	                n = d2;
	            }

	            d2 = div( md.minus(d0), d1, 0, 1 );
	            n0 = n0.plus( d2.times(n1) );
	            d0 = d0.plus( d2.times(d1) );
	            n0.s = n1.s = x.s;
	            e *= 2;

	            // Determine which fraction is closer to x, n0/d0 or n1/d1
	            arr = div( n1, d1, e, ROUNDING_MODE ).minus(x).abs().cmp(
	                  div( n0, d0, e, ROUNDING_MODE ).minus(x).abs() ) < 1
	                    ? [ n1.toString(), d1.toString() ]
	                    : [ n0.toString(), d0.toString() ];

	            MAX_EXP = exp;
	            return arr;
	        };


	        /*
	         * Return the value of this BigNumber converted to a number primitive.
	         */
	        P.toNumber = function () {
	            return +this;
	        };


	        /*
	         * Return a BigNumber whose value is the value of this BigNumber raised to the power n.
	         * If m is present, return the result modulo m.
	         * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.
	         * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using
	         * ROUNDING_MODE.
	         *
	         * The modular power operation works efficiently when x, n, and m are positive integers,
	         * otherwise it is equivalent to calculating x.toPower(n).modulo(m) (with POW_PRECISION 0).
	         *
	         * n {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
	         * [m] {number|string|BigNumber} The modulus.
	         *
	         * 'pow() exponent not an integer: {n}'
	         * 'pow() exponent out of range: {n}'
	         *
	         * Performs 54 loop iterations for n of 9007199254740991.
	         */
	        P.toPower = P.pow = function ( n, m ) {
	            var k, y, z,
	                i = mathfloor( n < 0 ? -n : +n ),
	                x = this;

	            if ( m != null ) {
	                id = 23;
	                m = new BigNumber(m);
	            }

	            // Pass ±Infinity to Math.pow if exponent is out of range.
	            if ( !isValidInt( n, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 23, 'exponent' ) &&
	              ( !isFinite(n) || i > MAX_SAFE_INTEGER && ( n /= 0 ) ||
	                parseFloat(n) != n && !( n = NaN ) ) || n == 0 ) {
	                k = Math.pow( +x, n );
	                return new BigNumber( m ? k % m : k );
	            }

	            if (m) {
	                if ( n > 1 && x.gt(ONE) && x.isInt() && m.gt(ONE) && m.isInt() ) {
	                    x = x.mod(m);
	                } else {
	                    z = m;

	                    // Nullify m so only a single mod operation is performed at the end.
	                    m = null;
	                }
	            } else if (POW_PRECISION) {

	                // Truncating each coefficient array to a length of k after each multiplication
	                // equates to truncating significant digits to POW_PRECISION + [28, 41],
	                // i.e. there will be a minimum of 28 guard digits retained.
	                // (Using + 1.5 would give [9, 21] guard digits.)
	                k = mathceil( POW_PRECISION / LOG_BASE + 2 );
	            }

	            y = new BigNumber(ONE);

	            for ( ; ; ) {
	                if ( i % 2 ) {
	                    y = y.times(x);
	                    if ( !y.c ) break;
	                    if (k) {
	                        if ( y.c.length > k ) y.c.length = k;
	                    } else if (m) {
	                        y = y.mod(m);
	                    }
	                }

	                i = mathfloor( i / 2 );
	                if ( !i ) break;
	                x = x.times(x);
	                if (k) {
	                    if ( x.c && x.c.length > k ) x.c.length = k;
	                } else if (m) {
	                    x = x.mod(m);
	                }
	            }

	            if (m) return y;
	            if ( n < 0 ) y = ONE.div(y);

	            return z ? y.mod(z) : k ? round( y, POW_PRECISION, ROUNDING_MODE ) : y;
	        };


	        /*
	         * Return a string representing the value of this BigNumber rounded to sd significant digits
	         * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits
	         * necessary to represent the integer part of the value in fixed-point notation, then use
	         * exponential notation.
	         *
	         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
	         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	         *
	         * 'toPrecision() precision not an integer: {sd}'
	         * 'toPrecision() precision out of range: {sd}'
	         * 'toPrecision() rounding mode not an integer: {rm}'
	         * 'toPrecision() rounding mode out of range: {rm}'
	         */
	        P.toPrecision = function ( sd, rm ) {
	            return format( this, sd != null && isValidInt( sd, 1, MAX, 24, 'precision' )
	              ? sd | 0 : null, rm, 24 );
	        };


	        /*
	         * Return a string representing the value of this BigNumber in base b, or base 10 if b is
	         * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and
	         * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent
	         * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than
	         * TO_EXP_NEG, return exponential notation.
	         *
	         * [b] {number} Integer, 2 to 64 inclusive.
	         *
	         * 'toString() base not an integer: {b}'
	         * 'toString() base out of range: {b}'
	         */
	        P.toString = function (b) {
	            var str,
	                n = this,
	                s = n.s,
	                e = n.e;

	            // Infinity or NaN?
	            if ( e === null ) {

	                if (s) {
	                    str = 'Infinity';
	                    if ( s < 0 ) str = '-' + str;
	                } else {
	                    str = 'NaN';
	                }
	            } else {
	                str = coeffToString( n.c );

	                if ( b == null || !isValidInt( b, 2, 64, 25, 'base' ) ) {
	                    str = e <= TO_EXP_NEG || e >= TO_EXP_POS
	                      ? toExponential( str, e )
	                      : toFixedPoint( str, e );
	                } else {
	                    str = convertBase( toFixedPoint( str, e ), b | 0, 10, s );
	                }

	                if ( s < 0 && n.c[0] ) str = '-' + str;
	            }

	            return str;
	        };


	        /*
	         * Return a new BigNumber whose value is the value of this BigNumber truncated to a whole
	         * number.
	         */
	        P.truncated = P.trunc = function () {
	            return round( new BigNumber(this), this.e + 1, 1 );
	        };



	        /*
	         * Return as toString, but do not accept a base argument, and include the minus sign for
	         * negative zero.
	         */
	        P.valueOf = P.toJSON = function () {
	            var str,
	                n = this,
	                e = n.e;

	            if ( e === null ) return n.toString();

	            str = coeffToString( n.c );

	            str = e <= TO_EXP_NEG || e >= TO_EXP_POS
	                ? toExponential( str, e )
	                : toFixedPoint( str, e );

	            return n.s < 0 ? '-' + str : str;
	        };


	        // Aliases for BigDecimal methods.
	        //P.add = P.plus;         // P.add included above
	        //P.subtract = P.minus;   // P.sub included above
	        //P.multiply = P.times;   // P.mul included above
	        //P.divide = P.div;
	        //P.remainder = P.mod;
	        //P.compareTo = P.cmp;
	        //P.negate = P.neg;


	        if ( configObj != null ) BigNumber.config(configObj);

	        return BigNumber;
	    }


	    // PRIVATE HELPER FUNCTIONS


	    function bitFloor(n) {
	        var i = n | 0;
	        return n > 0 || n === i ? i : i - 1;
	    }


	    // Return a coefficient array as a string of base 10 digits.
	    function coeffToString(a) {
	        var s, z,
	            i = 1,
	            j = a.length,
	            r = a[0] + '';

	        for ( ; i < j; ) {
	            s = a[i++] + '';
	            z = LOG_BASE - s.length;
	            for ( ; z--; s = '0' + s );
	            r += s;
	        }

	        // Determine trailing zeros.
	        for ( j = r.length; r.charCodeAt(--j) === 48; );
	        return r.slice( 0, j + 1 || 1 );
	    }


	    // Compare the value of BigNumbers x and y.
	    function compare( x, y ) {
	        var a, b,
	            xc = x.c,
	            yc = y.c,
	            i = x.s,
	            j = y.s,
	            k = x.e,
	            l = y.e;

	        // Either NaN?
	        if ( !i || !j ) return null;

	        a = xc && !xc[0];
	        b = yc && !yc[0];

	        // Either zero?
	        if ( a || b ) return a ? b ? 0 : -j : i;

	        // Signs differ?
	        if ( i != j ) return i;

	        a = i < 0;
	        b = k == l;

	        // Either Infinity?
	        if ( !xc || !yc ) return b ? 0 : !xc ^ a ? 1 : -1;

	        // Compare exponents.
	        if ( !b ) return k > l ^ a ? 1 : -1;

	        j = ( k = xc.length ) < ( l = yc.length ) ? k : l;

	        // Compare digit by digit.
	        for ( i = 0; i < j; i++ ) if ( xc[i] != yc[i] ) return xc[i] > yc[i] ^ a ? 1 : -1;

	        // Compare lengths.
	        return k == l ? 0 : k > l ^ a ? 1 : -1;
	    }


	    /*
	     * Return true if n is a valid number in range, otherwise false.
	     * Use for argument validation when ERRORS is false.
	     * Note: parseInt('1e+1') == 1 but parseFloat('1e+1') == 10.
	     */
	    function intValidatorNoErrors( n, min, max ) {
	        return ( n = truncate(n) ) >= min && n <= max;
	    }


	    function isArray(obj) {
	        return Object.prototype.toString.call(obj) == '[object Array]';
	    }


	    /*
	     * Convert string of baseIn to an array of numbers of baseOut.
	     * Eg. convertBase('255', 10, 16) returns [15, 15].
	     * Eg. convertBase('ff', 16, 10) returns [2, 5, 5].
	     */
	    function toBaseOut( str, baseIn, baseOut ) {
	        var j,
	            arr = [0],
	            arrL,
	            i = 0,
	            len = str.length;

	        for ( ; i < len; ) {
	            for ( arrL = arr.length; arrL--; arr[arrL] *= baseIn );
	            arr[ j = 0 ] += ALPHABET.indexOf( str.charAt( i++ ) );

	            for ( ; j < arr.length; j++ ) {

	                if ( arr[j] > baseOut - 1 ) {
	                    if ( arr[j + 1] == null ) arr[j + 1] = 0;
	                    arr[j + 1] += arr[j] / baseOut | 0;
	                    arr[j] %= baseOut;
	                }
	            }
	        }

	        return arr.reverse();
	    }


	    function toExponential( str, e ) {
	        return ( str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str ) +
	          ( e < 0 ? 'e' : 'e+' ) + e;
	    }


	    function toFixedPoint( str, e ) {
	        var len, z;

	        // Negative exponent?
	        if ( e < 0 ) {

	            // Prepend zeros.
	            for ( z = '0.'; ++e; z += '0' );
	            str = z + str;

	        // Positive exponent
	        } else {
	            len = str.length;

	            // Append zeros.
	            if ( ++e > len ) {
	                for ( z = '0', e -= len; --e; z += '0' );
	                str += z;
	            } else if ( e < len ) {
	                str = str.slice( 0, e ) + '.' + str.slice(e);
	            }
	        }

	        return str;
	    }


	    function truncate(n) {
	        n = parseFloat(n);
	        return n < 0 ? mathceil(n) : mathfloor(n);
	    }


	    // EXPORT


	    BigNumber = constructorFactory();
	    BigNumber.default = BigNumber.BigNumber = BigNumber;


	    // AMD.
	    if ( module.exports ) {
	        module.exports = BigNumber;

	        // Split string stops browserify adding crypto shim.
	        if ( !cryptoObj ) try { cryptoObj = commonjsRequire('cry' + 'pto'); } catch (e) {}

	    // Browser.
	    } else {
	        if ( !globalObj ) globalObj = typeof self != 'undefined' ? self : Function('return this')();
	        globalObj.BigNumber = BigNumber;
	    }
	})(commonjsGlobal);
	});

	var common = createCommonjsModule(function (module, exports) {


	var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
	                (typeof Uint16Array !== 'undefined') &&
	                (typeof Int32Array !== 'undefined');

	function _has(obj, key) {
	  return Object.prototype.hasOwnProperty.call(obj, key);
	}

	exports.assign = function (obj /*from1, from2, from3, ...*/) {
	  var sources = Array.prototype.slice.call(arguments, 1);
	  while (sources.length) {
	    var source = sources.shift();
	    if (!source) { continue; }

	    if (typeof source !== 'object') {
	      throw new TypeError(source + 'must be non-object');
	    }

	    for (var p in source) {
	      if (_has(source, p)) {
	        obj[p] = source[p];
	      }
	    }
	  }

	  return obj;
	};


	// reduce buffer size, avoiding mem copy
	exports.shrinkBuf = function (buf, size) {
	  if (buf.length === size) { return buf; }
	  if (buf.subarray) { return buf.subarray(0, size); }
	  buf.length = size;
	  return buf;
	};


	var fnTyped = {
	  arraySet: function (dest, src, src_offs, len, dest_offs) {
	    if (src.subarray && dest.subarray) {
	      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
	      return;
	    }
	    // Fallback to ordinary array
	    for (var i = 0; i < len; i++) {
	      dest[dest_offs + i] = src[src_offs + i];
	    }
	  },
	  // Join array of chunks to single array.
	  flattenChunks: function (chunks) {
	    var i, l, len, pos, chunk, result;

	    // calculate data length
	    len = 0;
	    for (i = 0, l = chunks.length; i < l; i++) {
	      len += chunks[i].length;
	    }

	    // join chunks
	    result = new Uint8Array(len);
	    pos = 0;
	    for (i = 0, l = chunks.length; i < l; i++) {
	      chunk = chunks[i];
	      result.set(chunk, pos);
	      pos += chunk.length;
	    }

	    return result;
	  }
	};

	var fnUntyped = {
	  arraySet: function (dest, src, src_offs, len, dest_offs) {
	    for (var i = 0; i < len; i++) {
	      dest[dest_offs + i] = src[src_offs + i];
	    }
	  },
	  // Join array of chunks to single array.
	  flattenChunks: function (chunks) {
	    return [].concat.apply([], chunks);
	  }
	};


	// Enable/Disable typed arrays use, for testing
	//
	exports.setTyped = function (on) {
	  if (on) {
	    exports.Buf8  = Uint8Array;
	    exports.Buf16 = Uint16Array;
	    exports.Buf32 = Int32Array;
	    exports.assign(exports, fnTyped);
	  } else {
	    exports.Buf8  = Array;
	    exports.Buf16 = Array;
	    exports.Buf32 = Array;
	    exports.assign(exports, fnUntyped);
	  }
	};

	exports.setTyped(TYPED_OK);
	});

	// (C) 1995-2013 Jean-loup Gailly and Mark Adler
	// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
	//
	// This software is provided 'as-is', without any express or implied
	// warranty. In no event will the authors be held liable for any damages
	// arising from the use of this software.
	//
	// Permission is granted to anyone to use this software for any purpose,
	// including commercial applications, and to alter it and redistribute it
	// freely, subject to the following restrictions:
	//
	// 1. The origin of this software must not be misrepresented; you must not
	//   claim that you wrote the original software. If you use this software
	//   in a product, an acknowledgment in the product documentation would be
	//   appreciated but is not required.
	// 2. Altered source versions must be plainly marked as such, and must not be
	//   misrepresented as being the original software.
	// 3. This notice may not be removed or altered from any source distribution.

	/* eslint-disable space-unary-ops */



	/* Public constants ==========================================================*/
	/* ===========================================================================*/


	//var Z_FILTERED          = 1;
	//var Z_HUFFMAN_ONLY      = 2;
	//var Z_RLE               = 3;
	var Z_FIXED$1               = 4;
	//var Z_DEFAULT_STRATEGY  = 0;

	/* Possible values of the data_type field (though see inflate()) */
	var Z_BINARY              = 0;
	var Z_TEXT                = 1;
	//var Z_ASCII             = 1; // = Z_TEXT
	var Z_UNKNOWN$1             = 2;

	/*============================================================================*/


	function zero$1(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }

	// From zutil.h

	var STORED_BLOCK = 0;
	var STATIC_TREES = 1;
	var DYN_TREES    = 2;
	/* The three kinds of block type */

	var MIN_MATCH$1    = 3;
	var MAX_MATCH$1    = 258;
	/* The minimum and maximum match lengths */

	// From deflate.h
	/* ===========================================================================
	 * Internal compression state.
	 */

	var LENGTH_CODES$1  = 29;
	/* number of length codes, not counting the special END_BLOCK code */

	var LITERALS$1      = 256;
	/* number of literal bytes 0..255 */

	var L_CODES$1       = LITERALS$1 + 1 + LENGTH_CODES$1;
	/* number of Literal or Length codes, including the END_BLOCK code */

	var D_CODES$1       = 30;
	/* number of distance codes */

	var BL_CODES$1      = 19;
	/* number of codes used to transfer the bit lengths */

	var HEAP_SIZE$1     = 2 * L_CODES$1 + 1;
	/* maximum heap size */

	var MAX_BITS$1      = 15;
	/* All codes must not exceed MAX_BITS bits */

	var Buf_size      = 16;
	/* size of bit buffer in bi_buf */


	/* ===========================================================================
	 * Constants
	 */

	var MAX_BL_BITS = 7;
	/* Bit length codes must not exceed MAX_BL_BITS bits */

	var END_BLOCK   = 256;
	/* end of block literal code */

	var REP_3_6     = 16;
	/* repeat previous bit length 3-6 times (2 bits of repeat count) */

	var REPZ_3_10   = 17;
	/* repeat a zero length 3-10 times  (3 bits of repeat count) */

	var REPZ_11_138 = 18;
	/* repeat a zero length 11-138 times  (7 bits of repeat count) */

	/* eslint-disable comma-spacing,array-bracket-spacing */
	var extra_lbits =   /* extra bits for each length code */
	  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];

	var extra_dbits =   /* extra bits for each distance code */
	  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];

	var extra_blbits =  /* extra bits for each bit length code */
	  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];

	var bl_order =
	  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
	/* eslint-enable comma-spacing,array-bracket-spacing */

	/* The lengths of the bit length codes are sent in order of decreasing
	 * probability, to avoid transmitting the lengths for unused bit length codes.
	 */

	/* ===========================================================================
	 * Local data. These are initialized only once.
	 */

	// We pre-fill arrays with 0 to avoid uninitialized gaps

	var DIST_CODE_LEN = 512; /* see definition of array dist_code below */

	// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1
	var static_ltree  = new Array((L_CODES$1 + 2) * 2);
	zero$1(static_ltree);
	/* The static literal tree. Since the bit lengths are imposed, there is no
	 * need for the L_CODES extra codes used during heap construction. However
	 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
	 * below).
	 */

	var static_dtree  = new Array(D_CODES$1 * 2);
	zero$1(static_dtree);
	/* The static distance tree. (Actually a trivial tree since all codes use
	 * 5 bits.)
	 */

	var _dist_code    = new Array(DIST_CODE_LEN);
	zero$1(_dist_code);
	/* Distance codes. The first 256 values correspond to the distances
	 * 3 .. 258, the last 256 values correspond to the top 8 bits of
	 * the 15 bit distances.
	 */

	var _length_code  = new Array(MAX_MATCH$1 - MIN_MATCH$1 + 1);
	zero$1(_length_code);
	/* length code for each normalized match length (0 == MIN_MATCH) */

	var base_length   = new Array(LENGTH_CODES$1);
	zero$1(base_length);
	/* First normalized length for each code (0 = MIN_MATCH) */

	var base_dist     = new Array(D_CODES$1);
	zero$1(base_dist);
	/* First normalized distance for each code (0 = distance of 1) */


	function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {

	  this.static_tree  = static_tree;  /* static tree or NULL */
	  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
	  this.extra_base   = extra_base;   /* base index for extra_bits */
	  this.elems        = elems;        /* max number of elements in the tree */
	  this.max_length   = max_length;   /* max bit length for the codes */

	  // show if `static_tree` has data or dummy - needed for monomorphic objects
	  this.has_stree    = static_tree && static_tree.length;
	}


	var static_l_desc;
	var static_d_desc;
	var static_bl_desc;


	function TreeDesc(dyn_tree, stat_desc) {
	  this.dyn_tree = dyn_tree;     /* the dynamic tree */
	  this.max_code = 0;            /* largest code with non zero frequency */
	  this.stat_desc = stat_desc;   /* the corresponding static tree */
	}



	function d_code(dist) {
	  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
	}


	/* ===========================================================================
	 * Output a short LSB first on the stream.
	 * IN assertion: there is enough room in pendingBuf.
	 */
	function put_short(s, w) {
	//    put_byte(s, (uch)((w) & 0xff));
	//    put_byte(s, (uch)((ush)(w) >> 8));
	  s.pending_buf[s.pending++] = (w) & 0xff;
	  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
	}


	/* ===========================================================================
	 * Send a value on a given number of bits.
	 * IN assertion: length <= 16 and value fits in length bits.
	 */
	function send_bits(s, value, length) {
	  if (s.bi_valid > (Buf_size - length)) {
	    s.bi_buf |= (value << s.bi_valid) & 0xffff;
	    put_short(s, s.bi_buf);
	    s.bi_buf = value >> (Buf_size - s.bi_valid);
	    s.bi_valid += length - Buf_size;
	  } else {
	    s.bi_buf |= (value << s.bi_valid) & 0xffff;
	    s.bi_valid += length;
	  }
	}


	function send_code(s, c, tree) {
	  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);
	}


	/* ===========================================================================
	 * Reverse the first len bits of a code, using straightforward code (a faster
	 * method would use a table)
	 * IN assertion: 1 <= len <= 15
	 */
	function bi_reverse(code, len) {
	  var res = 0;
	  do {
	    res |= code & 1;
	    code >>>= 1;
	    res <<= 1;
	  } while (--len > 0);
	  return res >>> 1;
	}


	/* ===========================================================================
	 * Flush the bit buffer, keeping at most 7 bits in it.
	 */
	function bi_flush(s) {
	  if (s.bi_valid === 16) {
	    put_short(s, s.bi_buf);
	    s.bi_buf = 0;
	    s.bi_valid = 0;

	  } else if (s.bi_valid >= 8) {
	    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
	    s.bi_buf >>= 8;
	    s.bi_valid -= 8;
	  }
	}


	/* ===========================================================================
	 * Compute the optimal bit lengths for a tree and update the total bit length
	 * for the current block.
	 * IN assertion: the fields freq and dad are set, heap[heap_max] and
	 *    above are the tree nodes sorted by increasing frequency.
	 * OUT assertions: the field len is set to the optimal bit length, the
	 *     array bl_count contains the frequencies for each bit length.
	 *     The length opt_len is updated; static_len is also updated if stree is
	 *     not null.
	 */
	function gen_bitlen(s, desc)
	//    deflate_state *s;
	//    tree_desc *desc;    /* the tree descriptor */
	{
	  var tree            = desc.dyn_tree;
	  var max_code        = desc.max_code;
	  var stree           = desc.stat_desc.static_tree;
	  var has_stree       = desc.stat_desc.has_stree;
	  var extra           = desc.stat_desc.extra_bits;
	  var base            = desc.stat_desc.extra_base;
	  var max_length      = desc.stat_desc.max_length;
	  var h;              /* heap index */
	  var n, m;           /* iterate over the tree elements */
	  var bits;           /* bit length */
	  var xbits;          /* extra bits */
	  var f;              /* frequency */
	  var overflow = 0;   /* number of elements with bit length too large */

	  for (bits = 0; bits <= MAX_BITS$1; bits++) {
	    s.bl_count[bits] = 0;
	  }

	  /* In a first pass, compute the optimal bit lengths (which may
	   * overflow in the case of the bit length tree).
	   */
	  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */

	  for (h = s.heap_max + 1; h < HEAP_SIZE$1; h++) {
	    n = s.heap[h];
	    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
	    if (bits > max_length) {
	      bits = max_length;
	      overflow++;
	    }
	    tree[n * 2 + 1]/*.Len*/ = bits;
	    /* We overwrite tree[n].Dad which is no longer needed */

	    if (n > max_code) { continue; } /* not a leaf node */

	    s.bl_count[bits]++;
	    xbits = 0;
	    if (n >= base) {
	      xbits = extra[n - base];
	    }
	    f = tree[n * 2]/*.Freq*/;
	    s.opt_len += f * (bits + xbits);
	    if (has_stree) {
	      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);
	    }
	  }
	  if (overflow === 0) { return; }

	  // Trace((stderr,"\nbit length overflow\n"));
	  /* This happens for example on obj2 and pic of the Calgary corpus */

	  /* Find the first bit length which could increase: */
	  do {
	    bits = max_length - 1;
	    while (s.bl_count[bits] === 0) { bits--; }
	    s.bl_count[bits]--;      /* move one leaf down the tree */
	    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
	    s.bl_count[max_length]--;
	    /* The brother of the overflow item also moves one step up,
	     * but this does not affect bl_count[max_length]
	     */
	    overflow -= 2;
	  } while (overflow > 0);

	  /* Now recompute all bit lengths, scanning in increasing frequency.
	   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
	   * lengths instead of fixing only the wrong ones. This idea is taken
	   * from 'ar' written by Haruhiko Okumura.)
	   */
	  for (bits = max_length; bits !== 0; bits--) {
	    n = s.bl_count[bits];
	    while (n !== 0) {
	      m = s.heap[--h];
	      if (m > max_code) { continue; }
	      if (tree[m * 2 + 1]/*.Len*/ !== bits) {
	        // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
	        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;
	        tree[m * 2 + 1]/*.Len*/ = bits;
	      }
	      n--;
	    }
	  }
	}


	/* ===========================================================================
	 * Generate the codes for a given tree and bit counts (which need not be
	 * optimal).
	 * IN assertion: the array bl_count contains the bit length statistics for
	 * the given tree and the field len is set for all tree elements.
	 * OUT assertion: the field code is set for all tree elements of non
	 *     zero code length.
	 */
	function gen_codes(tree, max_code, bl_count)
	//    ct_data *tree;             /* the tree to decorate */
	//    int max_code;              /* largest code with non zero frequency */
	//    ushf *bl_count;            /* number of codes at each bit length */
	{
	  var next_code = new Array(MAX_BITS$1 + 1); /* next code value for each bit length */
	  var code = 0;              /* running code value */
	  var bits;                  /* bit index */
	  var n;                     /* code index */

	  /* The distribution counts are first used to generate the code values
	   * without bit reversal.
	   */
	  for (bits = 1; bits <= MAX_BITS$1; bits++) {
	    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;
	  }
	  /* Check that the bit counts in bl_count are consistent. The last code
	   * must be all ones.
	   */
	  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
	  //        "inconsistent bit counts");
	  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

	  for (n = 0;  n <= max_code; n++) {
	    var len = tree[n * 2 + 1]/*.Len*/;
	    if (len === 0) { continue; }
	    /* Now reverse the bits */
	    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);

	    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
	    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
	  }
	}


	/* ===========================================================================
	 * Initialize the various 'constant' tables.
	 */
	function tr_static_init() {
	  var n;        /* iterates over tree elements */
	  var bits;     /* bit counter */
	  var length;   /* length value */
	  var code;     /* code value */
	  var dist;     /* distance index */
	  var bl_count = new Array(MAX_BITS$1 + 1);
	  /* number of codes at each bit length for an optimal tree */

	  // do check in _tr_init()
	  //if (static_init_done) return;

	  /* For some embedded targets, global variables are not initialized: */
	/*#ifdef NO_INIT_GLOBAL_POINTERS
	  static_l_desc.static_tree = static_ltree;
	  static_l_desc.extra_bits = extra_lbits;
	  static_d_desc.static_tree = static_dtree;
	  static_d_desc.extra_bits = extra_dbits;
	  static_bl_desc.extra_bits = extra_blbits;
	#endif*/

	  /* Initialize the mapping length (0..255) -> length code (0..28) */
	  length = 0;
	  for (code = 0; code < LENGTH_CODES$1 - 1; code++) {
	    base_length[code] = length;
	    for (n = 0; n < (1 << extra_lbits[code]); n++) {
	      _length_code[length++] = code;
	    }
	  }
	  //Assert (length == 256, "tr_static_init: length != 256");
	  /* Note that the length 255 (match length 258) can be represented
	   * in two different ways: code 284 + 5 bits or code 285, so we
	   * overwrite length_code[255] to use the best encoding:
	   */
	  _length_code[length - 1] = code;

	  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
	  dist = 0;
	  for (code = 0; code < 16; code++) {
	    base_dist[code] = dist;
	    for (n = 0; n < (1 << extra_dbits[code]); n++) {
	      _dist_code[dist++] = code;
	    }
	  }
	  //Assert (dist == 256, "tr_static_init: dist != 256");
	  dist >>= 7; /* from now on, all distances are divided by 128 */
	  for (; code < D_CODES$1; code++) {
	    base_dist[code] = dist << 7;
	    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
	      _dist_code[256 + dist++] = code;
	    }
	  }
	  //Assert (dist == 256, "tr_static_init: 256+dist != 512");

	  /* Construct the codes of the static literal tree */
	  for (bits = 0; bits <= MAX_BITS$1; bits++) {
	    bl_count[bits] = 0;
	  }

	  n = 0;
	  while (n <= 143) {
	    static_ltree[n * 2 + 1]/*.Len*/ = 8;
	    n++;
	    bl_count[8]++;
	  }
	  while (n <= 255) {
	    static_ltree[n * 2 + 1]/*.Len*/ = 9;
	    n++;
	    bl_count[9]++;
	  }
	  while (n <= 279) {
	    static_ltree[n * 2 + 1]/*.Len*/ = 7;
	    n++;
	    bl_count[7]++;
	  }
	  while (n <= 287) {
	    static_ltree[n * 2 + 1]/*.Len*/ = 8;
	    n++;
	    bl_count[8]++;
	  }
	  /* Codes 286 and 287 do not exist, but we must include them in the
	   * tree construction to get a canonical Huffman tree (longest code
	   * all ones)
	   */
	  gen_codes(static_ltree, L_CODES$1 + 1, bl_count);

	  /* The static distance tree is trivial: */
	  for (n = 0; n < D_CODES$1; n++) {
	    static_dtree[n * 2 + 1]/*.Len*/ = 5;
	    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);
	  }

	  // Now data ready and we can init static trees
	  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS$1 + 1, L_CODES$1, MAX_BITS$1);
	  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES$1, MAX_BITS$1);
	  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES$1, MAX_BL_BITS);

	  //static_init_done = true;
	}


	/* ===========================================================================
	 * Initialize a new block.
	 */
	function init_block(s) {
	  var n; /* iterates over tree elements */

	  /* Initialize the trees. */
	  for (n = 0; n < L_CODES$1;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }
	  for (n = 0; n < D_CODES$1;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }
	  for (n = 0; n < BL_CODES$1; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }

	  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;
	  s.opt_len = s.static_len = 0;
	  s.last_lit = s.matches = 0;
	}


	/* ===========================================================================
	 * Flush the bit buffer and align the output on a byte boundary
	 */
	function bi_windup(s)
	{
	  if (s.bi_valid > 8) {
	    put_short(s, s.bi_buf);
	  } else if (s.bi_valid > 0) {
	    //put_byte(s, (Byte)s->bi_buf);
	    s.pending_buf[s.pending++] = s.bi_buf;
	  }
	  s.bi_buf = 0;
	  s.bi_valid = 0;
	}

	/* ===========================================================================
	 * Copy a stored block, storing first the length and its
	 * one's complement if requested.
	 */
	function copy_block(s, buf, len, header)
	//DeflateState *s;
	//charf    *buf;    /* the input data */
	//unsigned len;     /* its length */
	//int      header;  /* true if block header must be written */
	{
	  bi_windup(s);        /* align on byte boundary */

	  if (header) {
	    put_short(s, len);
	    put_short(s, ~len);
	  }
	//  while (len--) {
	//    put_byte(s, *buf++);
	//  }
	  common.arraySet(s.pending_buf, s.window, buf, len, s.pending);
	  s.pending += len;
	}

	/* ===========================================================================
	 * Compares to subtrees, using the tree depth as tie breaker when
	 * the subtrees have equal frequency. This minimizes the worst case length.
	 */
	function smaller(tree, n, m, depth) {
	  var _n2 = n * 2;
	  var _m2 = m * 2;
	  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
	         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
	}

	/* ===========================================================================
	 * Restore the heap property by moving down the tree starting at node k,
	 * exchanging a node with the smallest of its two sons if necessary, stopping
	 * when the heap property is re-established (each father smaller than its
	 * two sons).
	 */
	function pqdownheap(s, tree, k)
	//    deflate_state *s;
	//    ct_data *tree;  /* the tree to restore */
	//    int k;               /* node to move down */
	{
	  var v = s.heap[k];
	  var j = k << 1;  /* left son of k */
	  while (j <= s.heap_len) {
	    /* Set j to the smallest of the two sons: */
	    if (j < s.heap_len &&
	      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
	      j++;
	    }
	    /* Exit if v is smaller than both sons */
	    if (smaller(tree, v, s.heap[j], s.depth)) { break; }

	    /* Exchange v with the smallest son */
	    s.heap[k] = s.heap[j];
	    k = j;

	    /* And continue down the tree, setting j to the left son of k */
	    j <<= 1;
	  }
	  s.heap[k] = v;
	}


	// inlined manually
	// var SMALLEST = 1;

	/* ===========================================================================
	 * Send the block data compressed using the given Huffman trees
	 */
	function compress_block(s, ltree, dtree)
	//    deflate_state *s;
	//    const ct_data *ltree; /* literal tree */
	//    const ct_data *dtree; /* distance tree */
	{
	  var dist;           /* distance of matched string */
	  var lc;             /* match length or unmatched char (if dist == 0) */
	  var lx = 0;         /* running index in l_buf */
	  var code;           /* the code to send */
	  var extra;          /* number of extra bits to send */

	  if (s.last_lit !== 0) {
	    do {
	      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);
	      lc = s.pending_buf[s.l_buf + lx];
	      lx++;

	      if (dist === 0) {
	        send_code(s, lc, ltree); /* send a literal byte */
	        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
	      } else {
	        /* Here, lc is the match length - MIN_MATCH */
	        code = _length_code[lc];
	        send_code(s, code + LITERALS$1 + 1, ltree); /* send the length code */
	        extra = extra_lbits[code];
	        if (extra !== 0) {
	          lc -= base_length[code];
	          send_bits(s, lc, extra);       /* send the extra length bits */
	        }
	        dist--; /* dist is now the match distance - 1 */
	        code = d_code(dist);
	        //Assert (code < D_CODES, "bad d_code");

	        send_code(s, code, dtree);       /* send the distance code */
	        extra = extra_dbits[code];
	        if (extra !== 0) {
	          dist -= base_dist[code];
	          send_bits(s, dist, extra);   /* send the extra distance bits */
	        }
	      } /* literal or match pair ? */

	      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
	      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
	      //       "pendingBuf overflow");

	    } while (lx < s.last_lit);
	  }

	  send_code(s, END_BLOCK, ltree);
	}


	/* ===========================================================================
	 * Construct one Huffman tree and assigns the code bit strings and lengths.
	 * Update the total bit length for the current block.
	 * IN assertion: the field freq is set for all tree elements.
	 * OUT assertions: the fields len and code are set to the optimal bit length
	 *     and corresponding code. The length opt_len is updated; static_len is
	 *     also updated if stree is not null. The field max_code is set.
	 */
	function build_tree(s, desc)
	//    deflate_state *s;
	//    tree_desc *desc; /* the tree descriptor */
	{
	  var tree     = desc.dyn_tree;
	  var stree    = desc.stat_desc.static_tree;
	  var has_stree = desc.stat_desc.has_stree;
	  var elems    = desc.stat_desc.elems;
	  var n, m;          /* iterate over heap elements */
	  var max_code = -1; /* largest code with non zero frequency */
	  var node;          /* new node being created */

	  /* Construct the initial heap, with least frequent element in
	   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
	   * heap[0] is not used.
	   */
	  s.heap_len = 0;
	  s.heap_max = HEAP_SIZE$1;

	  for (n = 0; n < elems; n++) {
	    if (tree[n * 2]/*.Freq*/ !== 0) {
	      s.heap[++s.heap_len] = max_code = n;
	      s.depth[n] = 0;

	    } else {
	      tree[n * 2 + 1]/*.Len*/ = 0;
	    }
	  }

	  /* The pkzip format requires that at least one distance code exists,
	   * and that at least one bit should be sent even if there is only one
	   * possible code. So to avoid special checks later on we force at least
	   * two codes of non zero frequency.
	   */
	  while (s.heap_len < 2) {
	    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
	    tree[node * 2]/*.Freq*/ = 1;
	    s.depth[node] = 0;
	    s.opt_len--;

	    if (has_stree) {
	      s.static_len -= stree[node * 2 + 1]/*.Len*/;
	    }
	    /* node is 0 or 1 so it does not have extra bits */
	  }
	  desc.max_code = max_code;

	  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
	   * establish sub-heaps of increasing lengths:
	   */
	  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }

	  /* Construct the Huffman tree by repeatedly combining the least two
	   * frequent nodes.
	   */
	  node = elems;              /* next internal node of the tree */
	  do {
	    //pqremove(s, tree, n);  /* n = node of least frequency */
	    /*** pqremove ***/
	    n = s.heap[1/*SMALLEST*/];
	    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
	    pqdownheap(s, tree, 1/*SMALLEST*/);
	    /***/

	    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */

	    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
	    s.heap[--s.heap_max] = m;

	    /* Create a new node father of n and m */
	    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
	    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
	    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;

	    /* and insert the new node in the heap */
	    s.heap[1/*SMALLEST*/] = node++;
	    pqdownheap(s, tree, 1/*SMALLEST*/);

	  } while (s.heap_len >= 2);

	  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];

	  /* At this point, the fields freq and dad are set. We can now
	   * generate the bit lengths.
	   */
	  gen_bitlen(s, desc);

	  /* The field len is now set, we can generate the bit codes */
	  gen_codes(tree, max_code, s.bl_count);
	}


	/* ===========================================================================
	 * Scan a literal or distance tree to determine the frequencies of the codes
	 * in the bit length tree.
	 */
	function scan_tree(s, tree, max_code)
	//    deflate_state *s;
	//    ct_data *tree;   /* the tree to be scanned */
	//    int max_code;    /* and its largest code of non zero frequency */
	{
	  var n;                     /* iterates over all tree elements */
	  var prevlen = -1;          /* last emitted length */
	  var curlen;                /* length of current code */

	  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

	  var count = 0;             /* repeat count of the current code */
	  var max_count = 7;         /* max repeat count */
	  var min_count = 4;         /* min repeat count */

	  if (nextlen === 0) {
	    max_count = 138;
	    min_count = 3;
	  }
	  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */

	  for (n = 0; n <= max_code; n++) {
	    curlen = nextlen;
	    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

	    if (++count < max_count && curlen === nextlen) {
	      continue;

	    } else if (count < min_count) {
	      s.bl_tree[curlen * 2]/*.Freq*/ += count;

	    } else if (curlen !== 0) {

	      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
	      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;

	    } else if (count <= 10) {
	      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;

	    } else {
	      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;
	    }

	    count = 0;
	    prevlen = curlen;

	    if (nextlen === 0) {
	      max_count = 138;
	      min_count = 3;

	    } else if (curlen === nextlen) {
	      max_count = 6;
	      min_count = 3;

	    } else {
	      max_count = 7;
	      min_count = 4;
	    }
	  }
	}


	/* ===========================================================================
	 * Send a literal or distance tree in compressed form, using the codes in
	 * bl_tree.
	 */
	function send_tree(s, tree, max_code)
	//    deflate_state *s;
	//    ct_data *tree; /* the tree to be scanned */
	//    int max_code;       /* and its largest code of non zero frequency */
	{
	  var n;                     /* iterates over all tree elements */
	  var prevlen = -1;          /* last emitted length */
	  var curlen;                /* length of current code */

	  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

	  var count = 0;             /* repeat count of the current code */
	  var max_count = 7;         /* max repeat count */
	  var min_count = 4;         /* min repeat count */

	  /* tree[max_code+1].Len = -1; */  /* guard already set */
	  if (nextlen === 0) {
	    max_count = 138;
	    min_count = 3;
	  }

	  for (n = 0; n <= max_code; n++) {
	    curlen = nextlen;
	    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

	    if (++count < max_count && curlen === nextlen) {
	      continue;

	    } else if (count < min_count) {
	      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);

	    } else if (curlen !== 0) {
	      if (curlen !== prevlen) {
	        send_code(s, curlen, s.bl_tree);
	        count--;
	      }
	      //Assert(count >= 3 && count <= 6, " 3_6?");
	      send_code(s, REP_3_6, s.bl_tree);
	      send_bits(s, count - 3, 2);

	    } else if (count <= 10) {
	      send_code(s, REPZ_3_10, s.bl_tree);
	      send_bits(s, count - 3, 3);

	    } else {
	      send_code(s, REPZ_11_138, s.bl_tree);
	      send_bits(s, count - 11, 7);
	    }

	    count = 0;
	    prevlen = curlen;
	    if (nextlen === 0) {
	      max_count = 138;
	      min_count = 3;

	    } else if (curlen === nextlen) {
	      max_count = 6;
	      min_count = 3;

	    } else {
	      max_count = 7;
	      min_count = 4;
	    }
	  }
	}


	/* ===========================================================================
	 * Construct the Huffman tree for the bit lengths and return the index in
	 * bl_order of the last bit length code to send.
	 */
	function build_bl_tree(s) {
	  var max_blindex;  /* index of last bit length code of non zero freq */

	  /* Determine the bit length frequencies for literal and distance trees */
	  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
	  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

	  /* Build the bit length tree: */
	  build_tree(s, s.bl_desc);
	  /* opt_len now includes the length of the tree representations, except
	   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
	   */

	  /* Determine the number of bit length codes to send. The pkzip format
	   * requires that at least 4 bit length codes be sent. (appnote.txt says
	   * 3 but the actual value used is 4.)
	   */
	  for (max_blindex = BL_CODES$1 - 1; max_blindex >= 3; max_blindex--) {
	    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {
	      break;
	    }
	  }
	  /* Update opt_len to include the bit length tree and counts */
	  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
	  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
	  //        s->opt_len, s->static_len));

	  return max_blindex;
	}


	/* ===========================================================================
	 * Send the header for a block using dynamic Huffman trees: the counts, the
	 * lengths of the bit length codes, the literal tree and the distance tree.
	 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
	 */
	function send_all_trees(s, lcodes, dcodes, blcodes)
	//    deflate_state *s;
	//    int lcodes, dcodes, blcodes; /* number of codes for each tree */
	{
	  var rank;                    /* index in bl_order */

	  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
	  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
	  //        "too many codes");
	  //Tracev((stderr, "\nbl counts: "));
	  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
	  send_bits(s, dcodes - 1,   5);
	  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */
	  for (rank = 0; rank < blcodes; rank++) {
	    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
	    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);
	  }
	  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

	  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
	  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

	  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
	  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
	}


	/* ===========================================================================
	 * Check if the data type is TEXT or BINARY, using the following algorithm:
	 * - TEXT if the two conditions below are satisfied:
	 *    a) There are no non-portable control characters belonging to the
	 *       "black list" (0..6, 14..25, 28..31).
	 *    b) There is at least one printable character belonging to the
	 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
	 * - BINARY otherwise.
	 * - The following partially-portable control characters form a
	 *   "gray list" that is ignored in this detection algorithm:
	 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
	 * IN assertion: the fields Freq of dyn_ltree are set.
	 */
	function detect_data_type(s) {
	  /* black_mask is the bit mask of black-listed bytes
	   * set bits 0..6, 14..25, and 28..31
	   * 0xf3ffc07f = binary 11110011111111111100000001111111
	   */
	  var black_mask = 0xf3ffc07f;
	  var n;

	  /* Check for non-textual ("black-listed") bytes. */
	  for (n = 0; n <= 31; n++, black_mask >>>= 1) {
	    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {
	      return Z_BINARY;
	    }
	  }

	  /* Check for textual ("white-listed") bytes. */
	  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
	      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
	    return Z_TEXT;
	  }
	  for (n = 32; n < LITERALS$1; n++) {
	    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
	      return Z_TEXT;
	    }
	  }

	  /* There are no "black-listed" or "white-listed" bytes:
	   * this stream either is empty or has tolerated ("gray-listed") bytes only.
	   */
	  return Z_BINARY;
	}


	var static_init_done = false;

	/* ===========================================================================
	 * Initialize the tree data structures for a new zlib stream.
	 */
	function _tr_init(s)
	{

	  if (!static_init_done) {
	    tr_static_init();
	    static_init_done = true;
	  }

	  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
	  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
	  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

	  s.bi_buf = 0;
	  s.bi_valid = 0;

	  /* Initialize the first block of the first file: */
	  init_block(s);
	}


	/* ===========================================================================
	 * Send a stored block
	 */
	function _tr_stored_block(s, buf, stored_len, last)
	//DeflateState *s;
	//charf *buf;       /* input block */
	//ulg stored_len;   /* length of input block */
	//int last;         /* one if this is the last block for a file */
	{
	  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */
	  copy_block(s, buf, stored_len, true); /* with header */
	}


	/* ===========================================================================
	 * Send one empty static block to give enough lookahead for inflate.
	 * This takes 10 bits, of which 7 may remain in the bit buffer.
	 */
	function _tr_align(s) {
	  send_bits(s, STATIC_TREES << 1, 3);
	  send_code(s, END_BLOCK, static_ltree);
	  bi_flush(s);
	}


	/* ===========================================================================
	 * Determine the best encoding for the current block: dynamic trees, static
	 * trees or store, and output the encoded block to the zip file.
	 */
	function _tr_flush_block(s, buf, stored_len, last)
	//DeflateState *s;
	//charf *buf;       /* input block, or NULL if too old */
	//ulg stored_len;   /* length of input block */
	//int last;         /* one if this is the last block for a file */
	{
	  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
	  var max_blindex = 0;        /* index of last bit length code of non zero freq */

	  /* Build the Huffman trees unless a stored block is forced */
	  if (s.level > 0) {

	    /* Check if the file is binary or text */
	    if (s.strm.data_type === Z_UNKNOWN$1) {
	      s.strm.data_type = detect_data_type(s);
	    }

	    /* Construct the literal and distance trees */
	    build_tree(s, s.l_desc);
	    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
	    //        s->static_len));

	    build_tree(s, s.d_desc);
	    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
	    //        s->static_len));
	    /* At this point, opt_len and static_len are the total bit lengths of
	     * the compressed block data, excluding the tree representations.
	     */

	    /* Build the bit length tree for the above two trees, and get the index
	     * in bl_order of the last bit length code to send.
	     */
	    max_blindex = build_bl_tree(s);

	    /* Determine the best encoding. Compute the block lengths in bytes. */
	    opt_lenb = (s.opt_len + 3 + 7) >>> 3;
	    static_lenb = (s.static_len + 3 + 7) >>> 3;

	    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
	    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
	    //        s->last_lit));

	    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }

	  } else {
	    // Assert(buf != (char*)0, "lost buf");
	    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
	  }

	  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
	    /* 4: two words for the lengths */

	    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
	     * Otherwise we can't have processed more than WSIZE input bytes since
	     * the last block flush, because compression would have been
	     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
	     * transform a block into a stored block.
	     */
	    _tr_stored_block(s, buf, stored_len, last);

	  } else if (s.strategy === Z_FIXED$1 || static_lenb === opt_lenb) {

	    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
	    compress_block(s, static_ltree, static_dtree);

	  } else {
	    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
	    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
	    compress_block(s, s.dyn_ltree, s.dyn_dtree);
	  }
	  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
	  /* The above check is made mod 2^32, for files larger than 512 MB
	   * and uLong implemented on 32 bits.
	   */
	  init_block(s);

	  if (last) {
	    bi_windup(s);
	  }
	  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
	  //       s->compressed_len-7*last));
	}

	/* ===========================================================================
	 * Save the match info and tally the frequency counts. Return true if
	 * the current block must be flushed.
	 */
	function _tr_tally(s, dist, lc)
	//    deflate_state *s;
	//    unsigned dist;  /* distance of matched string */
	//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
	{
	  //var out_length, in_length, dcode;

	  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;
	  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

	  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
	  s.last_lit++;

	  if (dist === 0) {
	    /* lc is the unmatched char */
	    s.dyn_ltree[lc * 2]/*.Freq*/++;
	  } else {
	    s.matches++;
	    /* Here, lc is the match length - MIN_MATCH */
	    dist--;             /* dist = match distance - 1 */
	    //Assert((ush)dist < (ush)MAX_DIST(s) &&
	    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
	    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

	    s.dyn_ltree[(_length_code[lc] + LITERALS$1 + 1) * 2]/*.Freq*/++;
	    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
	  }

	// (!) This block is disabled in zlib defaults,
	// don't enable it for binary compatibility

	//#ifdef TRUNCATE_BLOCK
	//  /* Try to guess if it is profitable to stop the current block here */
	//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
	//    /* Compute an upper bound for the compressed length */
	//    out_length = s.last_lit*8;
	//    in_length = s.strstart - s.block_start;
	//
	//    for (dcode = 0; dcode < D_CODES; dcode++) {
	//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
	//    }
	//    out_length >>>= 3;
	//    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
	//    //       s->last_lit, in_length, out_length,
	//    //       100L - out_length*100L/in_length));
	//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
	//      return true;
	//    }
	//  }
	//#endif

	  return (s.last_lit === s.lit_bufsize - 1);
	  /* We avoid equality with lit_bufsize because of wraparound at 64K
	   * on 16 bit machines and because stored blocks are restricted to
	   * 64K-1 bytes.
	   */
	}

	var _tr_init_1  = _tr_init;
	var _tr_stored_block_1 = _tr_stored_block;
	var _tr_flush_block_1  = _tr_flush_block;
	var _tr_tally_1 = _tr_tally;
	var _tr_align_1 = _tr_align;

	var trees = {
		_tr_init: _tr_init_1,
		_tr_stored_block: _tr_stored_block_1,
		_tr_flush_block: _tr_flush_block_1,
		_tr_tally: _tr_tally_1,
		_tr_align: _tr_align_1
	};

	// Note: adler32 takes 12% for level 0 and 2% for level 6.
	// It isn't worth it to make additional optimizations as in original.
	// Small size is preferable.

	// (C) 1995-2013 Jean-loup Gailly and Mark Adler
	// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
	//
	// This software is provided 'as-is', without any express or implied
	// warranty. In no event will the authors be held liable for any damages
	// arising from the use of this software.
	//
	// Permission is granted to anyone to use this software for any purpose,
	// including commercial applications, and to alter it and redistribute it
	// freely, subject to the following restrictions:
	//
	// 1. The origin of this software must not be misrepresented; you must not
	//   claim that you wrote the original software. If you use this software
	//   in a product, an acknowledgment in the product documentation would be
	//   appreciated but is not required.
	// 2. Altered source versions must be plainly marked as such, and must not be
	//   misrepresented as being the original software.
	// 3. This notice may not be removed or altered from any source distribution.

	function adler32(adler, buf, len, pos) {
	  var s1 = (adler & 0xffff) |0,
	      s2 = ((adler >>> 16) & 0xffff) |0,
	      n = 0;

	  while (len !== 0) {
	    // Set limit ~ twice less than 5552, to keep
	    // s2 in 31-bits, because we force signed ints.
	    // in other case %= will fail.
	    n = len > 2000 ? 2000 : len;
	    len -= n;

	    do {
	      s1 = (s1 + buf[pos++]) |0;
	      s2 = (s2 + s1) |0;
	    } while (--n);

	    s1 %= 65521;
	    s2 %= 65521;
	  }

	  return (s1 | (s2 << 16)) |0;
	}


	var adler32_1 = adler32;

	// Note: we can't get significant speed boost here.
	// So write code to minimize size - no pregenerated tables
	// and array tools dependencies.

	// (C) 1995-2013 Jean-loup Gailly and Mark Adler
	// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
	//
	// This software is provided 'as-is', without any express or implied
	// warranty. In no event will the authors be held liable for any damages
	// arising from the use of this software.
	//
	// Permission is granted to anyone to use this software for any purpose,
	// including commercial applications, and to alter it and redistribute it
	// freely, subject to the following restrictions:
	//
	// 1. The origin of this software must not be misrepresented; you must not
	//   claim that you wrote the original software. If you use this software
	//   in a product, an acknowledgment in the product documentation would be
	//   appreciated but is not required.
	// 2. Altered source versions must be plainly marked as such, and must not be
	//   misrepresented as being the original software.
	// 3. This notice may not be removed or altered from any source distribution.

	// Use ordinary array, since untyped makes no boost here
	function makeTable() {
	  var c, table = [];

	  for (var n = 0; n < 256; n++) {
	    c = n;
	    for (var k = 0; k < 8; k++) {
	      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
	    }
	    table[n] = c;
	  }

	  return table;
	}

	// Create table on load. Just 255 signed longs. Not a problem.
	var crcTable = makeTable();


	function crc32(crc, buf, len, pos) {
	  var t = crcTable,
	      end = pos + len;

	  crc ^= -1;

	  for (var i = pos; i < end; i++) {
	    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
	  }

	  return (crc ^ (-1)); // >>> 0;
	}


	var crc32_1 = crc32;

	// (C) 1995-2013 Jean-loup Gailly and Mark Adler
	// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
	//
	// This software is provided 'as-is', without any express or implied
	// warranty. In no event will the authors be held liable for any damages
	// arising from the use of this software.
	//
	// Permission is granted to anyone to use this software for any purpose,
	// including commercial applications, and to alter it and redistribute it
	// freely, subject to the following restrictions:
	//
	// 1. The origin of this software must not be misrepresented; you must not
	//   claim that you wrote the original software. If you use this software
	//   in a product, an acknowledgment in the product documentation would be
	//   appreciated but is not required.
	// 2. Altered source versions must be plainly marked as such, and must not be
	//   misrepresented as being the original software.
	// 3. This notice may not be removed or altered from any source distribution.

	var messages = {
	  2:      'need dictionary',     /* Z_NEED_DICT       2  */
	  1:      'stream end',          /* Z_STREAM_END      1  */
	  0:      '',                    /* Z_OK              0  */
	  '-1':   'file error',          /* Z_ERRNO         (-1) */
	  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
	  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
	  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
	  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
	  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
	};

	// (C) 1995-2013 Jean-loup Gailly and Mark Adler
	// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
	//
	// This software is provided 'as-is', without any express or implied
	// warranty. In no event will the authors be held liable for any damages
	// arising from the use of this software.
	//
	// Permission is granted to anyone to use this software for any purpose,
	// including commercial applications, and to alter it and redistribute it
	// freely, subject to the following restrictions:
	//
	// 1. The origin of this software must not be misrepresented; you must not
	//   claim that you wrote the original software. If you use this software
	//   in a product, an acknowledgment in the product documentation would be
	//   appreciated but is not required.
	// 2. Altered source versions must be plainly marked as such, and must not be
	//   misrepresented as being the original software.
	// 3. This notice may not be removed or altered from any source distribution.







	/* Public constants ==========================================================*/
	/* ===========================================================================*/


	/* Allowed flush values; see deflate() and inflate() below for details */
	var Z_NO_FLUSH$1      = 0;
	var Z_PARTIAL_FLUSH = 1;
	//var Z_SYNC_FLUSH    = 2;
	var Z_FULL_FLUSH    = 3;
	var Z_FINISH$2        = 4;
	var Z_BLOCK$1         = 5;
	//var Z_TREES         = 6;


	/* Return codes for the compression/decompression functions. Negative values
	 * are errors, positive values are used for special but normal events.
	 */
	var Z_OK$2            = 0;
	var Z_STREAM_END$2    = 1;
	//var Z_NEED_DICT     = 2;
	//var Z_ERRNO         = -1;
	var Z_STREAM_ERROR$1  = -2;
	var Z_DATA_ERROR$1    = -3;
	//var Z_MEM_ERROR     = -4;
	var Z_BUF_ERROR$1     = -5;
	//var Z_VERSION_ERROR = -6;


	/* compression levels */
	//var Z_NO_COMPRESSION      = 0;
	//var Z_BEST_SPEED          = 1;
	//var Z_BEST_COMPRESSION    = 9;
	var Z_DEFAULT_COMPRESSION$1 = -1;


	var Z_FILTERED            = 1;
	var Z_HUFFMAN_ONLY        = 2;
	var Z_RLE                 = 3;
	var Z_FIXED               = 4;
	var Z_DEFAULT_STRATEGY$1    = 0;

	/* Possible values of the data_type field (though see inflate()) */
	//var Z_BINARY              = 0;
	//var Z_TEXT                = 1;
	//var Z_ASCII               = 1; // = Z_TEXT
	var Z_UNKNOWN             = 2;


	/* The deflate compression method */
	var Z_DEFLATED$2  = 8;

	/*============================================================================*/


	var MAX_MEM_LEVEL = 9;
	/* Maximum value for memLevel in deflateInit2 */
	var MAX_WBITS$1 = 15;
	/* 32K LZ77 window */
	var DEF_MEM_LEVEL = 8;


	var LENGTH_CODES  = 29;
	/* number of length codes, not counting the special END_BLOCK code */
	var LITERALS      = 256;
	/* number of literal bytes 0..255 */
	var L_CODES       = LITERALS + 1 + LENGTH_CODES;
	/* number of Literal or Length codes, including the END_BLOCK code */
	var D_CODES       = 30;
	/* number of distance codes */
	var BL_CODES      = 19;
	/* number of codes used to transfer the bit lengths */
	var HEAP_SIZE     = 2 * L_CODES + 1;
	/* maximum heap size */
	var MAX_BITS  = 15;
	/* All codes must not exceed MAX_BITS bits */

	var MIN_MATCH = 3;
	var MAX_MATCH = 258;
	var MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

	var PRESET_DICT = 0x20;

	var INIT_STATE = 42;
	var EXTRA_STATE = 69;
	var NAME_STATE = 73;
	var COMMENT_STATE = 91;
	var HCRC_STATE = 103;
	var BUSY_STATE = 113;
	var FINISH_STATE = 666;

	var BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
	var BS_BLOCK_DONE     = 2; /* block flush performed */
	var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
	var BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */

	var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

	function err(strm, errorCode) {
	  strm.msg = messages[errorCode];
	  return errorCode;
	}

	function rank(f) {
	  return ((f) << 1) - ((f) > 4 ? 9 : 0);
	}

	function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }


	/* =========================================================================
	 * Flush as much pending output as possible. All deflate() output goes
	 * through this function so some applications may wish to modify it
	 * to avoid allocating a large strm->output buffer and copying into it.
	 * (See also read_buf()).
	 */
	function flush_pending(strm) {
	  var s = strm.state;

	  //_tr_flush_bits(s);
	  var len = s.pending;
	  if (len > strm.avail_out) {
	    len = strm.avail_out;
	  }
	  if (len === 0) { return; }

	  common.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
	  strm.next_out += len;
	  s.pending_out += len;
	  strm.total_out += len;
	  strm.avail_out -= len;
	  s.pending -= len;
	  if (s.pending === 0) {
	    s.pending_out = 0;
	  }
	}


	function flush_block_only(s, last) {
	  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
	  s.block_start = s.strstart;
	  flush_pending(s.strm);
	}


	function put_byte(s, b) {
	  s.pending_buf[s.pending++] = b;
	}


	/* =========================================================================
	 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
	 * IN assertion: the stream state is correct and there is enough room in
	 * pending_buf.
	 */
	function putShortMSB(s, b) {
	//  put_byte(s, (Byte)(b >> 8));
	//  put_byte(s, (Byte)(b & 0xff));
	  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
	  s.pending_buf[s.pending++] = b & 0xff;
	}


	/* ===========================================================================
	 * Read a new buffer from the current input stream, update the adler32
	 * and total number of bytes read.  All deflate() input goes through
	 * this function so some applications may wish to modify it to avoid
	 * allocating a large strm->input buffer and copying from it.
	 * (See also flush_pending()).
	 */
	function read_buf(strm, buf, start, size) {
	  var len = strm.avail_in;

	  if (len > size) { len = size; }
	  if (len === 0) { return 0; }

	  strm.avail_in -= len;

	  // zmemcpy(buf, strm->next_in, len);
	  common.arraySet(buf, strm.input, strm.next_in, len, start);
	  if (strm.state.wrap === 1) {
	    strm.adler = adler32_1(strm.adler, buf, len, start);
	  }

	  else if (strm.state.wrap === 2) {
	    strm.adler = crc32_1(strm.adler, buf, len, start);
	  }

	  strm.next_in += len;
	  strm.total_in += len;

	  return len;
	}


	/* ===========================================================================
	 * Set match_start to the longest match starting at the given string and
	 * return its length. Matches shorter or equal to prev_length are discarded,
	 * in which case the result is equal to prev_length and match_start is
	 * garbage.
	 * IN assertions: cur_match is the head of the hash chain for the current
	 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
	 * OUT assertion: the match length is not greater than s->lookahead.
	 */
	function longest_match(s, cur_match) {
	  var chain_length = s.max_chain_length;      /* max hash chain length */
	  var scan = s.strstart; /* current string */
	  var match;                       /* matched string */
	  var len;                           /* length of current match */
	  var best_len = s.prev_length;              /* best match length so far */
	  var nice_match = s.nice_match;             /* stop if match long enough */
	  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
	      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;

	  var _win = s.window; // shortcut

	  var wmask = s.w_mask;
	  var prev  = s.prev;

	  /* Stop when cur_match becomes <= limit. To simplify the code,
	   * we prevent matches with the string of window index 0.
	   */

	  var strend = s.strstart + MAX_MATCH;
	  var scan_end1  = _win[scan + best_len - 1];
	  var scan_end   = _win[scan + best_len];

	  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
	   * It is easy to get rid of this optimization if necessary.
	   */
	  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

	  /* Do not waste too much time if we already have a good match: */
	  if (s.prev_length >= s.good_match) {
	    chain_length >>= 2;
	  }
	  /* Do not look for matches beyond the end of the input. This is necessary
	   * to make deflate deterministic.
	   */
	  if (nice_match > s.lookahead) { nice_match = s.lookahead; }

	  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

	  do {
	    // Assert(cur_match < s->strstart, "no future");
	    match = cur_match;

	    /* Skip to next match if the match length cannot increase
	     * or if the match length is less than 2.  Note that the checks below
	     * for insufficient lookahead only occur occasionally for performance
	     * reasons.  Therefore uninitialized memory will be accessed, and
	     * conditional jumps will be made that depend on those values.
	     * However the length of the match is limited to the lookahead, so
	     * the output of deflate is not affected by the uninitialized values.
	     */

	    if (_win[match + best_len]     !== scan_end  ||
	        _win[match + best_len - 1] !== scan_end1 ||
	        _win[match]                !== _win[scan] ||
	        _win[++match]              !== _win[scan + 1]) {
	      continue;
	    }

	    /* The check at best_len-1 can be removed because it will be made
	     * again later. (This heuristic is not always a win.)
	     * It is not necessary to compare scan[2] and match[2] since they
	     * are always equal when the other bytes match, given that
	     * the hash keys are equal and that HASH_BITS >= 8.
	     */
	    scan += 2;
	    match++;
	    // Assert(*scan == *match, "match[2]?");

	    /* We check for insufficient lookahead only every 8th comparison;
	     * the 256th check will be made at strstart+258.
	     */
	    do {
	      /*jshint noempty:false*/
	    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
	             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
	             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
	             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
	             scan < strend);

	    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

	    len = MAX_MATCH - (strend - scan);
	    scan = strend - MAX_MATCH;

	    if (len > best_len) {
	      s.match_start = cur_match;
	      best_len = len;
	      if (len >= nice_match) {
	        break;
	      }
	      scan_end1  = _win[scan + best_len - 1];
	      scan_end   = _win[scan + best_len];
	    }
	  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

	  if (best_len <= s.lookahead) {
	    return best_len;
	  }
	  return s.lookahead;
	}


	/* ===========================================================================
	 * Fill the window when the lookahead becomes insufficient.
	 * Updates strstart and lookahead.
	 *
	 * IN assertion: lookahead < MIN_LOOKAHEAD
	 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
	 *    At least one byte has been read, or avail_in == 0; reads are
	 *    performed for at least two bytes (required for the zip translate_eol
	 *    option -- not supported here).
	 */
	function fill_window(s) {
	  var _w_size = s.w_size;
	  var p, n, m, more, str;

	  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

	  do {
	    more = s.window_size - s.lookahead - s.strstart;

	    // JS ints have 32 bit, block below not needed
	    /* Deal with !@#$% 64K limit: */
	    //if (sizeof(int) <= 2) {
	    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
	    //        more = wsize;
	    //
	    //  } else if (more == (unsigned)(-1)) {
	    //        /* Very unlikely, but possible on 16 bit machine if
	    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
	    //         */
	    //        more--;
	    //    }
	    //}


	    /* If the window is almost full and there is insufficient lookahead,
	     * move the upper half to the lower one to make room in the upper half.
	     */
	    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

	      common.arraySet(s.window, s.window, _w_size, _w_size, 0);
	      s.match_start -= _w_size;
	      s.strstart -= _w_size;
	      /* we now have strstart >= MAX_DIST */
	      s.block_start -= _w_size;

	      /* Slide the hash table (could be avoided with 32 bit values
	       at the expense of memory usage). We slide even when level == 0
	       to keep the hash table consistent if we switch back to level > 0
	       later. (Using level 0 permanently is not an optimal usage of
	       zlib, so we don't care about this pathological case.)
	       */

	      n = s.hash_size;
	      p = n;
	      do {
	        m = s.head[--p];
	        s.head[p] = (m >= _w_size ? m - _w_size : 0);
	      } while (--n);

	      n = _w_size;
	      p = n;
	      do {
	        m = s.prev[--p];
	        s.prev[p] = (m >= _w_size ? m - _w_size : 0);
	        /* If n is not on any hash chain, prev[n] is garbage but
	         * its value will never be used.
	         */
	      } while (--n);

	      more += _w_size;
	    }
	    if (s.strm.avail_in === 0) {
	      break;
	    }

	    /* If there was no sliding:
	     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
	     *    more == window_size - lookahead - strstart
	     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
	     * => more >= window_size - 2*WSIZE + 2
	     * In the BIG_MEM or MMAP case (not yet supported),
	     *   window_size == input_size + MIN_LOOKAHEAD  &&
	     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
	     * Otherwise, window_size == 2*WSIZE so more >= 2.
	     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
	     */
	    //Assert(more >= 2, "more < 2");
	    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
	    s.lookahead += n;

	    /* Initialize the hash value now that we have some input: */
	    if (s.lookahead + s.insert >= MIN_MATCH) {
	      str = s.strstart - s.insert;
	      s.ins_h = s.window[str];

	      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
	      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;
	//#if MIN_MATCH != 3
	//        Call update_hash() MIN_MATCH-3 more times
	//#endif
	      while (s.insert) {
	        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
	        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

	        s.prev[str & s.w_mask] = s.head[s.ins_h];
	        s.head[s.ins_h] = str;
	        str++;
	        s.insert--;
	        if (s.lookahead + s.insert < MIN_MATCH) {
	          break;
	        }
	      }
	    }
	    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
	     * but this is not important since only literal bytes will be emitted.
	     */

	  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

	  /* If the WIN_INIT bytes after the end of the current data have never been
	   * written, then zero those bytes in order to avoid memory check reports of
	   * the use of uninitialized (or uninitialised as Julian writes) bytes by
	   * the longest match routines.  Update the high water mark for the next
	   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
	   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
	   */
	//  if (s.high_water < s.window_size) {
	//    var curr = s.strstart + s.lookahead;
	//    var init = 0;
	//
	//    if (s.high_water < curr) {
	//      /* Previous high water mark below current data -- zero WIN_INIT
	//       * bytes or up to end of window, whichever is less.
	//       */
	//      init = s.window_size - curr;
	//      if (init > WIN_INIT)
	//        init = WIN_INIT;
	//      zmemzero(s->window + curr, (unsigned)init);
	//      s->high_water = curr + init;
	//    }
	//    else if (s->high_water < (ulg)curr + WIN_INIT) {
	//      /* High water mark at or above current data, but below current data
	//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
	//       * to end of window, whichever is less.
	//       */
	//      init = (ulg)curr + WIN_INIT - s->high_water;
	//      if (init > s->window_size - s->high_water)
	//        init = s->window_size - s->high_water;
	//      zmemzero(s->window + s->high_water, (unsigned)init);
	//      s->high_water += init;
	//    }
	//  }
	//
	//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
	//    "not enough room for search");
	}

	/* ===========================================================================
	 * Copy without compression as much as possible from the input stream, return
	 * the current block state.
	 * This function does not insert new strings in the dictionary since
	 * uncompressible data is probably not useful. This function is used
	 * only for the level=0 compression option.
	 * NOTE: this function should be optimized to avoid extra copying from
	 * window to pending_buf.
	 */
	function deflate_stored(s, flush) {
	  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
	   * to pending_buf_size, and each stored block has a 5 byte header:
	   */
	  var max_block_size = 0xffff;

	  if (max_block_size > s.pending_buf_size - 5) {
	    max_block_size = s.pending_buf_size - 5;
	  }

	  /* Copy as much as possible from input to output: */
	  for (;;) {
	    /* Fill the window as much as possible: */
	    if (s.lookahead <= 1) {

	      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
	      //  s->block_start >= (long)s->w_size, "slide too late");
	//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
	//        s.block_start >= s.w_size)) {
	//        throw  new Error("slide too late");
	//      }

	      fill_window(s);
	      if (s.lookahead === 0 && flush === Z_NO_FLUSH$1) {
	        return BS_NEED_MORE;
	      }

	      if (s.lookahead === 0) {
	        break;
	      }
	      /* flush the current block */
	    }
	    //Assert(s->block_start >= 0L, "block gone");
	//    if (s.block_start < 0) throw new Error("block gone");

	    s.strstart += s.lookahead;
	    s.lookahead = 0;

	    /* Emit a stored block if pending_buf will be full: */
	    var max_start = s.block_start + max_block_size;

	    if (s.strstart === 0 || s.strstart >= max_start) {
	      /* strstart == 0 is possible when wraparound on 16-bit machine */
	      s.lookahead = s.strstart - max_start;
	      s.strstart = max_start;
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/


	    }
	    /* Flush if we may have to slide, otherwise block_start may become
	     * negative and the data will be gone:
	     */
	    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }

	  s.insert = 0;

	  if (flush === Z_FINISH$2) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }

	  if (s.strstart > s.block_start) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }

	  return BS_NEED_MORE;
	}

	/* ===========================================================================
	 * Compress as much as possible from the input stream, return the current
	 * block state.
	 * This function does not perform lazy evaluation of matches and inserts
	 * new strings in the dictionary only for unmatched strings or for short
	 * matches. It is used only for the fast compression options.
	 */
	function deflate_fast(s, flush) {
	  var hash_head;        /* head of the hash chain */
	  var bflush;           /* set if current block must be flushed */

	  for (;;) {
	    /* Make sure that we always have enough lookahead, except
	     * at the end of the input file. We need MAX_MATCH bytes
	     * for the next match, plus MIN_MATCH bytes to insert the
	     * string following the next match.
	     */
	    if (s.lookahead < MIN_LOOKAHEAD) {
	      fill_window(s);
	      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$1) {
	        return BS_NEED_MORE;
	      }
	      if (s.lookahead === 0) {
	        break; /* flush the current block */
	      }
	    }

	    /* Insert the string window[strstart .. strstart+2] in the
	     * dictionary, and set hash_head to the head of the hash chain:
	     */
	    hash_head = 0/*NIL*/;
	    if (s.lookahead >= MIN_MATCH) {
	      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
	      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	      s.head[s.ins_h] = s.strstart;
	      /***/
	    }

	    /* Find the longest match, discarding those <= prev_length.
	     * At this point we have always match_length < MIN_MATCH
	     */
	    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
	      /* To simplify the code, we prevent matches with the string
	       * of window index 0 (in particular we have to avoid a match
	       * of the string with itself at the start of the input file).
	       */
	      s.match_length = longest_match(s, hash_head);
	      /* longest_match() sets match_start */
	    }
	    if (s.match_length >= MIN_MATCH) {
	      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

	      /*** _tr_tally_dist(s, s.strstart - s.match_start,
	                     s.match_length - MIN_MATCH, bflush); ***/
	      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

	      s.lookahead -= s.match_length;

	      /* Insert new strings in the hash table only if the match length
	       * is not too large. This saves time but degrades compression.
	       */
	      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
	        s.match_length--; /* string at strstart already in table */
	        do {
	          s.strstart++;
	          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
	          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	          s.head[s.ins_h] = s.strstart;
	          /***/
	          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
	           * always MIN_MATCH bytes ahead.
	           */
	        } while (--s.match_length !== 0);
	        s.strstart++;
	      } else
	      {
	        s.strstart += s.match_length;
	        s.match_length = 0;
	        s.ins_h = s.window[s.strstart];
	        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
	        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;

	//#if MIN_MATCH != 3
	//                Call UPDATE_HASH() MIN_MATCH-3 more times
	//#endif
	        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
	         * matter since it will be recomputed at next deflate call.
	         */
	      }
	    } else {
	      /* No match, output a literal byte */
	      //Tracevv((stderr,"%c", s.window[s.strstart]));
	      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
	      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

	      s.lookahead--;
	      s.strstart++;
	    }
	    if (bflush) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }
	  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);
	  if (flush === Z_FINISH$2) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }
	  return BS_BLOCK_DONE;
	}

	/* ===========================================================================
	 * Same as above, but achieves better compression. We use a lazy
	 * evaluation for matches: a match is finally adopted only if there is
	 * no better match at the next window position.
	 */
	function deflate_slow(s, flush) {
	  var hash_head;          /* head of hash chain */
	  var bflush;              /* set if current block must be flushed */

	  var max_insert;

	  /* Process the input block. */
	  for (;;) {
	    /* Make sure that we always have enough lookahead, except
	     * at the end of the input file. We need MAX_MATCH bytes
	     * for the next match, plus MIN_MATCH bytes to insert the
	     * string following the next match.
	     */
	    if (s.lookahead < MIN_LOOKAHEAD) {
	      fill_window(s);
	      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$1) {
	        return BS_NEED_MORE;
	      }
	      if (s.lookahead === 0) { break; } /* flush the current block */
	    }

	    /* Insert the string window[strstart .. strstart+2] in the
	     * dictionary, and set hash_head to the head of the hash chain:
	     */
	    hash_head = 0/*NIL*/;
	    if (s.lookahead >= MIN_MATCH) {
	      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
	      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	      s.head[s.ins_h] = s.strstart;
	      /***/
	    }

	    /* Find the longest match, discarding those <= prev_length.
	     */
	    s.prev_length = s.match_length;
	    s.prev_match = s.match_start;
	    s.match_length = MIN_MATCH - 1;

	    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
	        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
	      /* To simplify the code, we prevent matches with the string
	       * of window index 0 (in particular we have to avoid a match
	       * of the string with itself at the start of the input file).
	       */
	      s.match_length = longest_match(s, hash_head);
	      /* longest_match() sets match_start */

	      if (s.match_length <= 5 &&
	         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {

	        /* If prev_match is also MIN_MATCH, match_start is garbage
	         * but we will ignore the current match anyway.
	         */
	        s.match_length = MIN_MATCH - 1;
	      }
	    }
	    /* If there was a match at the previous step and the current
	     * match is not better, output the previous match:
	     */
	    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
	      max_insert = s.strstart + s.lookahead - MIN_MATCH;
	      /* Do not insert strings in hash table beyond this. */

	      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

	      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
	                     s.prev_length - MIN_MATCH, bflush);***/
	      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
	      /* Insert in hash table all strings up to the end of the match.
	       * strstart-1 and strstart are already inserted. If there is not
	       * enough lookahead, the last two strings are not inserted in
	       * the hash table.
	       */
	      s.lookahead -= s.prev_length - 1;
	      s.prev_length -= 2;
	      do {
	        if (++s.strstart <= max_insert) {
	          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
	          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	          s.head[s.ins_h] = s.strstart;
	          /***/
	        }
	      } while (--s.prev_length !== 0);
	      s.match_available = 0;
	      s.match_length = MIN_MATCH - 1;
	      s.strstart++;

	      if (bflush) {
	        /*** FLUSH_BLOCK(s, 0); ***/
	        flush_block_only(s, false);
	        if (s.strm.avail_out === 0) {
	          return BS_NEED_MORE;
	        }
	        /***/
	      }

	    } else if (s.match_available) {
	      /* If there was no match at the previous position, output a
	       * single literal. If there was a match but the current match
	       * is longer, truncate the previous match to a single literal.
	       */
	      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
	      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
	      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

	      if (bflush) {
	        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
	        flush_block_only(s, false);
	        /***/
	      }
	      s.strstart++;
	      s.lookahead--;
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	    } else {
	      /* There is no previous match to compare with, wait for
	       * the next step to decide.
	       */
	      s.match_available = 1;
	      s.strstart++;
	      s.lookahead--;
	    }
	  }
	  //Assert (flush != Z_NO_FLUSH, "no flush?");
	  if (s.match_available) {
	    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
	    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
	    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

	    s.match_available = 0;
	  }
	  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
	  if (flush === Z_FINISH$2) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }

	  return BS_BLOCK_DONE;
	}


	/* ===========================================================================
	 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
	 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
	 * deflate switches away from Z_RLE.)
	 */
	function deflate_rle(s, flush) {
	  var bflush;            /* set if current block must be flushed */
	  var prev;              /* byte at distance one to match */
	  var scan, strend;      /* scan goes up to strend for length of run */

	  var _win = s.window;

	  for (;;) {
	    /* Make sure that we always have enough lookahead, except
	     * at the end of the input file. We need MAX_MATCH bytes
	     * for the longest run, plus one for the unrolled loop.
	     */
	    if (s.lookahead <= MAX_MATCH) {
	      fill_window(s);
	      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH$1) {
	        return BS_NEED_MORE;
	      }
	      if (s.lookahead === 0) { break; } /* flush the current block */
	    }

	    /* See how many times the previous byte repeats */
	    s.match_length = 0;
	    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
	      scan = s.strstart - 1;
	      prev = _win[scan];
	      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
	        strend = s.strstart + MAX_MATCH;
	        do {
	          /*jshint noempty:false*/
	        } while (prev === _win[++scan] && prev === _win[++scan] &&
	                 prev === _win[++scan] && prev === _win[++scan] &&
	                 prev === _win[++scan] && prev === _win[++scan] &&
	                 prev === _win[++scan] && prev === _win[++scan] &&
	                 scan < strend);
	        s.match_length = MAX_MATCH - (strend - scan);
	        if (s.match_length > s.lookahead) {
	          s.match_length = s.lookahead;
	        }
	      }
	      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
	    }

	    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
	    if (s.match_length >= MIN_MATCH) {
	      //check_match(s, s.strstart, s.strstart - 1, s.match_length);

	      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
	      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);

	      s.lookahead -= s.match_length;
	      s.strstart += s.match_length;
	      s.match_length = 0;
	    } else {
	      /* No match, output a literal byte */
	      //Tracevv((stderr,"%c", s->window[s->strstart]));
	      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
	      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

	      s.lookahead--;
	      s.strstart++;
	    }
	    if (bflush) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }
	  s.insert = 0;
	  if (flush === Z_FINISH$2) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }
	  return BS_BLOCK_DONE;
	}

	/* ===========================================================================
	 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
	 * (It will be regenerated if this run of deflate switches away from Huffman.)
	 */
	function deflate_huff(s, flush) {
	  var bflush;             /* set if current block must be flushed */

	  for (;;) {
	    /* Make sure that we have a literal to write. */
	    if (s.lookahead === 0) {
	      fill_window(s);
	      if (s.lookahead === 0) {
	        if (flush === Z_NO_FLUSH$1) {
	          return BS_NEED_MORE;
	        }
	        break;      /* flush the current block */
	      }
	    }

	    /* Output a literal byte */
	    s.match_length = 0;
	    //Tracevv((stderr,"%c", s->window[s->strstart]));
	    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
	    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
	    s.lookahead--;
	    s.strstart++;
	    if (bflush) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }
	  s.insert = 0;
	  if (flush === Z_FINISH$2) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }
	  return BS_BLOCK_DONE;
	}

	/* Values for max_lazy_match, good_match and max_chain_length, depending on
	 * the desired pack level (0..9). The values given below have been tuned to
	 * exclude worst case performance for pathological files. Better values may be
	 * found for specific files.
	 */
	function Config(good_length, max_lazy, nice_length, max_chain, func) {
	  this.good_length = good_length;
	  this.max_lazy = max_lazy;
	  this.nice_length = nice_length;
	  this.max_chain = max_chain;
	  this.func = func;
	}

	var configuration_table;

	configuration_table = [
	  /*      good lazy nice chain */
	  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
	  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
	  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
	  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */

	  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
	  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
	  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
	  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
	  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
	  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
	];


	/* ===========================================================================
	 * Initialize the "longest match" routines for a new zlib stream
	 */
	function lm_init(s) {
	  s.window_size = 2 * s.w_size;

	  /*** CLEAR_HASH(s); ***/
	  zero(s.head); // Fill with NIL (= 0);

	  /* Set the default configuration parameters:
	   */
	  s.max_lazy_match = configuration_table[s.level].max_lazy;
	  s.good_match = configuration_table[s.level].good_length;
	  s.nice_match = configuration_table[s.level].nice_length;
	  s.max_chain_length = configuration_table[s.level].max_chain;

	  s.strstart = 0;
	  s.block_start = 0;
	  s.lookahead = 0;
	  s.insert = 0;
	  s.match_length = s.prev_length = MIN_MATCH - 1;
	  s.match_available = 0;
	  s.ins_h = 0;
	}


	function DeflateState() {
	  this.strm = null;            /* pointer back to this zlib stream */
	  this.status = 0;            /* as the name implies */
	  this.pending_buf = null;      /* output still pending */
	  this.pending_buf_size = 0;  /* size of pending_buf */
	  this.pending_out = 0;       /* next pending byte to output to the stream */
	  this.pending = 0;           /* nb of bytes in the pending buffer */
	  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
	  this.gzhead = null;         /* gzip header information to write */
	  this.gzindex = 0;           /* where in extra, name, or comment */
	  this.method = Z_DEFLATED$2; /* can only be DEFLATED */
	  this.last_flush = -1;   /* value of flush param for previous deflate call */

	  this.w_size = 0;  /* LZ77 window size (32K by default) */
	  this.w_bits = 0;  /* log2(w_size)  (8..16) */
	  this.w_mask = 0;  /* w_size - 1 */

	  this.window = null;
	  /* Sliding window. Input bytes are read into the second half of the window,
	   * and move to the first half later to keep a dictionary of at least wSize
	   * bytes. With this organization, matches are limited to a distance of
	   * wSize-MAX_MATCH bytes, but this ensures that IO is always
	   * performed with a length multiple of the block size.
	   */

	  this.window_size = 0;
	  /* Actual size of window: 2*wSize, except when the user input buffer
	   * is directly used as sliding window.
	   */

	  this.prev = null;
	  /* Link to older string with same hash index. To limit the size of this
	   * array to 64K, this link is maintained only for the last 32K strings.
	   * An index in this array is thus a window index modulo 32K.
	   */

	  this.head = null;   /* Heads of the hash chains or NIL. */

	  this.ins_h = 0;       /* hash index of string to be inserted */
	  this.hash_size = 0;   /* number of elements in hash table */
	  this.hash_bits = 0;   /* log2(hash_size) */
	  this.hash_mask = 0;   /* hash_size-1 */

	  this.hash_shift = 0;
	  /* Number of bits by which ins_h must be shifted at each input
	   * step. It must be such that after MIN_MATCH steps, the oldest
	   * byte no longer takes part in the hash key, that is:
	   *   hash_shift * MIN_MATCH >= hash_bits
	   */

	  this.block_start = 0;
	  /* Window position at the beginning of the current output block. Gets
	   * negative when the window is moved backwards.
	   */

	  this.match_length = 0;      /* length of best match */
	  this.prev_match = 0;        /* previous match */
	  this.match_available = 0;   /* set if previous match exists */
	  this.strstart = 0;          /* start of string to insert */
	  this.match_start = 0;       /* start of matching string */
	  this.lookahead = 0;         /* number of valid bytes ahead in window */

	  this.prev_length = 0;
	  /* Length of the best match at previous step. Matches not greater than this
	   * are discarded. This is used in the lazy match evaluation.
	   */

	  this.max_chain_length = 0;
	  /* To speed up deflation, hash chains are never searched beyond this
	   * length.  A higher limit improves compression ratio but degrades the
	   * speed.
	   */

	  this.max_lazy_match = 0;
	  /* Attempt to find a better match only when the current match is strictly
	   * smaller than this value. This mechanism is used only for compression
	   * levels >= 4.
	   */
	  // That's alias to max_lazy_match, don't use directly
	  //this.max_insert_length = 0;
	  /* Insert new strings in the hash table only if the match length is not
	   * greater than this length. This saves time but degrades compression.
	   * max_insert_length is used only for compression levels <= 3.
	   */

	  this.level = 0;     /* compression level (1..9) */
	  this.strategy = 0;  /* favor or force Huffman coding*/

	  this.good_match = 0;
	  /* Use a faster search when the previous match is longer than this */

	  this.nice_match = 0; /* Stop searching when current match exceeds this */

	              /* used by trees.c: */

	  /* Didn't use ct_data typedef below to suppress compiler warning */

	  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
	  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
	  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

	  // Use flat array of DOUBLE size, with interleaved fata,
	  // because JS does not support effective
	  this.dyn_ltree  = new common.Buf16(HEAP_SIZE * 2);
	  this.dyn_dtree  = new common.Buf16((2 * D_CODES + 1) * 2);
	  this.bl_tree    = new common.Buf16((2 * BL_CODES + 1) * 2);
	  zero(this.dyn_ltree);
	  zero(this.dyn_dtree);
	  zero(this.bl_tree);

	  this.l_desc   = null;         /* desc. for literal tree */
	  this.d_desc   = null;         /* desc. for distance tree */
	  this.bl_desc  = null;         /* desc. for bit length tree */

	  //ush bl_count[MAX_BITS+1];
	  this.bl_count = new common.Buf16(MAX_BITS + 1);
	  /* number of codes at each bit length for an optimal tree */

	  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
	  this.heap = new common.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */
	  zero(this.heap);

	  this.heap_len = 0;               /* number of elements in the heap */
	  this.heap_max = 0;               /* element of largest frequency */
	  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
	   * The same heap array is used to build all trees.
	   */

	  this.depth = new common.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
	  zero(this.depth);
	  /* Depth of each subtree used as tie breaker for trees of equal frequency
	   */

	  this.l_buf = 0;          /* buffer index for literals or lengths */

	  this.lit_bufsize = 0;
	  /* Size of match buffer for literals/lengths.  There are 4 reasons for
	   * limiting lit_bufsize to 64K:
	   *   - frequencies can be kept in 16 bit counters
	   *   - if compression is not successful for the first block, all input
	   *     data is still in the window so we can still emit a stored block even
	   *     when input comes from standard input.  (This can also be done for
	   *     all blocks if lit_bufsize is not greater than 32K.)
	   *   - if compression is not successful for a file smaller than 64K, we can
	   *     even emit a stored file instead of a stored block (saving 5 bytes).
	   *     This is applicable only for zip (not gzip or zlib).
	   *   - creating new Huffman trees less frequently may not provide fast
	   *     adaptation to changes in the input data statistics. (Take for
	   *     example a binary file with poorly compressible code followed by
	   *     a highly compressible string table.) Smaller buffer sizes give
	   *     fast adaptation but have of course the overhead of transmitting
	   *     trees more frequently.
	   *   - I can't count above 4
	   */

	  this.last_lit = 0;      /* running index in l_buf */

	  this.d_buf = 0;
	  /* Buffer index for distances. To simplify the code, d_buf and l_buf have
	   * the same number of elements. To use different lengths, an extra flag
	   * array would be necessary.
	   */

	  this.opt_len = 0;       /* bit length of current block with optimal trees */
	  this.static_len = 0;    /* bit length of current block with static trees */
	  this.matches = 0;       /* number of string matches in current block */
	  this.insert = 0;        /* bytes at end of window left to insert */


	  this.bi_buf = 0;
	  /* Output buffer. bits are inserted starting at the bottom (least
	   * significant bits).
	   */
	  this.bi_valid = 0;
	  /* Number of valid bits in bi_buf.  All bits above the last valid bit
	   * are always zero.
	   */

	  // Used for window memory init. We safely ignore it for JS. That makes
	  // sense only for pointers and memory check tools.
	  //this.high_water = 0;
	  /* High water mark offset in window for initialized bytes -- bytes above
	   * this are set to zero in order to avoid memory check warnings when
	   * longest match routines access bytes past the input.  This is then
	   * updated to the new high water mark.
	   */
	}


	function deflateResetKeep(strm) {
	  var s;

	  if (!strm || !strm.state) {
	    return err(strm, Z_STREAM_ERROR$1);
	  }

	  strm.total_in = strm.total_out = 0;
	  strm.data_type = Z_UNKNOWN;

	  s = strm.state;
	  s.pending = 0;
	  s.pending_out = 0;

	  if (s.wrap < 0) {
	    s.wrap = -s.wrap;
	    /* was made negative by deflate(..., Z_FINISH); */
	  }
	  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
	  strm.adler = (s.wrap === 2) ?
	    0  // crc32(0, Z_NULL, 0)
	  :
	    1; // adler32(0, Z_NULL, 0)
	  s.last_flush = Z_NO_FLUSH$1;
	  trees._tr_init(s);
	  return Z_OK$2;
	}


	function deflateReset(strm) {
	  var ret = deflateResetKeep(strm);
	  if (ret === Z_OK$2) {
	    lm_init(strm.state);
	  }
	  return ret;
	}


	function deflateSetHeader(strm, head) {
	  if (!strm || !strm.state) { return Z_STREAM_ERROR$1; }
	  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR$1; }
	  strm.state.gzhead = head;
	  return Z_OK$2;
	}


	function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
	  if (!strm) { // === Z_NULL
	    return Z_STREAM_ERROR$1;
	  }
	  var wrap = 1;

	  if (level === Z_DEFAULT_COMPRESSION$1) {
	    level = 6;
	  }

	  if (windowBits < 0) { /* suppress zlib wrapper */
	    wrap = 0;
	    windowBits = -windowBits;
	  }

	  else if (windowBits > 15) {
	    wrap = 2;           /* write gzip wrapper instead */
	    windowBits -= 16;
	  }


	  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED$2 ||
	    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
	    strategy < 0 || strategy > Z_FIXED) {
	    return err(strm, Z_STREAM_ERROR$1);
	  }


	  if (windowBits === 8) {
	    windowBits = 9;
	  }
	  /* until 256-byte window bug fixed */

	  var s = new DeflateState();

	  strm.state = s;
	  s.strm = strm;

	  s.wrap = wrap;
	  s.gzhead = null;
	  s.w_bits = windowBits;
	  s.w_size = 1 << s.w_bits;
	  s.w_mask = s.w_size - 1;

	  s.hash_bits = memLevel + 7;
	  s.hash_size = 1 << s.hash_bits;
	  s.hash_mask = s.hash_size - 1;
	  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

	  s.window = new common.Buf8(s.w_size * 2);
	  s.head = new common.Buf16(s.hash_size);
	  s.prev = new common.Buf16(s.w_size);

	  // Don't need mem init magic for JS.
	  //s.high_water = 0;  /* nothing written to s->window yet */

	  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

	  s.pending_buf_size = s.lit_bufsize * 4;

	  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
	  //s->pending_buf = (uchf *) overlay;
	  s.pending_buf = new common.Buf8(s.pending_buf_size);

	  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
	  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
	  s.d_buf = 1 * s.lit_bufsize;

	  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
	  s.l_buf = (1 + 2) * s.lit_bufsize;

	  s.level = level;
	  s.strategy = strategy;
	  s.method = method;

	  return deflateReset(strm);
	}

	function deflateInit(strm, level) {
	  return deflateInit2(strm, level, Z_DEFLATED$2, MAX_WBITS$1, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY$1);
	}


	function deflate$1(strm, flush) {
	  var old_flush, s;
	  var beg, val; // for gzip header write only

	  if (!strm || !strm.state ||
	    flush > Z_BLOCK$1 || flush < 0) {
	    return strm ? err(strm, Z_STREAM_ERROR$1) : Z_STREAM_ERROR$1;
	  }

	  s = strm.state;

	  if (!strm.output ||
	      (!strm.input && strm.avail_in !== 0) ||
	      (s.status === FINISH_STATE && flush !== Z_FINISH$2)) {
	    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR$1 : Z_STREAM_ERROR$1);
	  }

	  s.strm = strm; /* just in case */
	  old_flush = s.last_flush;
	  s.last_flush = flush;

	  /* Write the header */
	  if (s.status === INIT_STATE) {

	    if (s.wrap === 2) { // GZIP header
	      strm.adler = 0;  //crc32(0L, Z_NULL, 0);
	      put_byte(s, 31);
	      put_byte(s, 139);
	      put_byte(s, 8);
	      if (!s.gzhead) { // s->gzhead == Z_NULL
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, s.level === 9 ? 2 :
	                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
	                     4 : 0));
	        put_byte(s, OS_CODE);
	        s.status = BUSY_STATE;
	      }
	      else {
	        put_byte(s, (s.gzhead.text ? 1 : 0) +
	                    (s.gzhead.hcrc ? 2 : 0) +
	                    (!s.gzhead.extra ? 0 : 4) +
	                    (!s.gzhead.name ? 0 : 8) +
	                    (!s.gzhead.comment ? 0 : 16)
	        );
	        put_byte(s, s.gzhead.time & 0xff);
	        put_byte(s, (s.gzhead.time >> 8) & 0xff);
	        put_byte(s, (s.gzhead.time >> 16) & 0xff);
	        put_byte(s, (s.gzhead.time >> 24) & 0xff);
	        put_byte(s, s.level === 9 ? 2 :
	                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
	                     4 : 0));
	        put_byte(s, s.gzhead.os & 0xff);
	        if (s.gzhead.extra && s.gzhead.extra.length) {
	          put_byte(s, s.gzhead.extra.length & 0xff);
	          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
	        }
	        if (s.gzhead.hcrc) {
	          strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending, 0);
	        }
	        s.gzindex = 0;
	        s.status = EXTRA_STATE;
	      }
	    }
	    else // DEFLATE header
	    {
	      var header = (Z_DEFLATED$2 + ((s.w_bits - 8) << 4)) << 8;
	      var level_flags = -1;

	      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
	        level_flags = 0;
	      } else if (s.level < 6) {
	        level_flags = 1;
	      } else if (s.level === 6) {
	        level_flags = 2;
	      } else {
	        level_flags = 3;
	      }
	      header |= (level_flags << 6);
	      if (s.strstart !== 0) { header |= PRESET_DICT; }
	      header += 31 - (header % 31);

	      s.status = BUSY_STATE;
	      putShortMSB(s, header);

	      /* Save the adler32 of the preset dictionary: */
	      if (s.strstart !== 0) {
	        putShortMSB(s, strm.adler >>> 16);
	        putShortMSB(s, strm.adler & 0xffff);
	      }
	      strm.adler = 1; // adler32(0L, Z_NULL, 0);
	    }
	  }

	//#ifdef GZIP
	  if (s.status === EXTRA_STATE) {
	    if (s.gzhead.extra/* != Z_NULL*/) {
	      beg = s.pending;  /* start of bytes to update crc */

	      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
	        if (s.pending === s.pending_buf_size) {
	          if (s.gzhead.hcrc && s.pending > beg) {
	            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
	          }
	          flush_pending(strm);
	          beg = s.pending;
	          if (s.pending === s.pending_buf_size) {
	            break;
	          }
	        }
	        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
	        s.gzindex++;
	      }
	      if (s.gzhead.hcrc && s.pending > beg) {
	        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
	      }
	      if (s.gzindex === s.gzhead.extra.length) {
	        s.gzindex = 0;
	        s.status = NAME_STATE;
	      }
	    }
	    else {
	      s.status = NAME_STATE;
	    }
	  }
	  if (s.status === NAME_STATE) {
	    if (s.gzhead.name/* != Z_NULL*/) {
	      beg = s.pending;  /* start of bytes to update crc */
	      //int val;

	      do {
	        if (s.pending === s.pending_buf_size) {
	          if (s.gzhead.hcrc && s.pending > beg) {
	            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
	          }
	          flush_pending(strm);
	          beg = s.pending;
	          if (s.pending === s.pending_buf_size) {
	            val = 1;
	            break;
	          }
	        }
	        // JS specific: little magic to add zero terminator to end of string
	        if (s.gzindex < s.gzhead.name.length) {
	          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
	        } else {
	          val = 0;
	        }
	        put_byte(s, val);
	      } while (val !== 0);

	      if (s.gzhead.hcrc && s.pending > beg) {
	        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
	      }
	      if (val === 0) {
	        s.gzindex = 0;
	        s.status = COMMENT_STATE;
	      }
	    }
	    else {
	      s.status = COMMENT_STATE;
	    }
	  }
	  if (s.status === COMMENT_STATE) {
	    if (s.gzhead.comment/* != Z_NULL*/) {
	      beg = s.pending;  /* start of bytes to update crc */
	      //int val;

	      do {
	        if (s.pending === s.pending_buf_size) {
	          if (s.gzhead.hcrc && s.pending > beg) {
	            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
	          }
	          flush_pending(strm);
	          beg = s.pending;
	          if (s.pending === s.pending_buf_size) {
	            val = 1;
	            break;
	          }
	        }
	        // JS specific: little magic to add zero terminator to end of string
	        if (s.gzindex < s.gzhead.comment.length) {
	          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
	        } else {
	          val = 0;
	        }
	        put_byte(s, val);
	      } while (val !== 0);

	      if (s.gzhead.hcrc && s.pending > beg) {
	        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
	      }
	      if (val === 0) {
	        s.status = HCRC_STATE;
	      }
	    }
	    else {
	      s.status = HCRC_STATE;
	    }
	  }
	  if (s.status === HCRC_STATE) {
	    if (s.gzhead.hcrc) {
	      if (s.pending + 2 > s.pending_buf_size) {
	        flush_pending(strm);
	      }
	      if (s.pending + 2 <= s.pending_buf_size) {
	        put_byte(s, strm.adler & 0xff);
	        put_byte(s, (strm.adler >> 8) & 0xff);
	        strm.adler = 0; //crc32(0L, Z_NULL, 0);
	        s.status = BUSY_STATE;
	      }
	    }
	    else {
	      s.status = BUSY_STATE;
	    }
	  }
	//#endif

	  /* Flush as much pending output as possible */
	  if (s.pending !== 0) {
	    flush_pending(strm);
	    if (strm.avail_out === 0) {
	      /* Since avail_out is 0, deflate will be called again with
	       * more output space, but possibly with both pending and
	       * avail_in equal to zero. There won't be anything to do,
	       * but this is not an error situation so make sure we
	       * return OK instead of BUF_ERROR at next call of deflate:
	       */
	      s.last_flush = -1;
	      return Z_OK$2;
	    }

	    /* Make sure there is something to do and avoid duplicate consecutive
	     * flushes. For repeated and useless calls with Z_FINISH, we keep
	     * returning Z_STREAM_END instead of Z_BUF_ERROR.
	     */
	  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
	    flush !== Z_FINISH$2) {
	    return err(strm, Z_BUF_ERROR$1);
	  }

	  /* User must not provide more input after the first FINISH: */
	  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
	    return err(strm, Z_BUF_ERROR$1);
	  }

	  /* Start a new block or continue the current one.
	   */
	  if (strm.avail_in !== 0 || s.lookahead !== 0 ||
	    (flush !== Z_NO_FLUSH$1 && s.status !== FINISH_STATE)) {
	    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
	      (s.strategy === Z_RLE ? deflate_rle(s, flush) :
	        configuration_table[s.level].func(s, flush));

	    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
	      s.status = FINISH_STATE;
	    }
	    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
	      if (strm.avail_out === 0) {
	        s.last_flush = -1;
	        /* avoid BUF_ERROR next call, see above */
	      }
	      return Z_OK$2;
	      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
	       * of deflate should use the same flush parameter to make sure
	       * that the flush is complete. So we don't have to output an
	       * empty block here, this will be done at next call. This also
	       * ensures that for a very small output buffer, we emit at most
	       * one empty block.
	       */
	    }
	    if (bstate === BS_BLOCK_DONE) {
	      if (flush === Z_PARTIAL_FLUSH) {
	        trees._tr_align(s);
	      }
	      else if (flush !== Z_BLOCK$1) { /* FULL_FLUSH or SYNC_FLUSH */

	        trees._tr_stored_block(s, 0, 0, false);
	        /* For a full flush, this empty block will be recognized
	         * as a special marker by inflate_sync().
	         */
	        if (flush === Z_FULL_FLUSH) {
	          /*** CLEAR_HASH(s); ***/             /* forget history */
	          zero(s.head); // Fill with NIL (= 0);

	          if (s.lookahead === 0) {
	            s.strstart = 0;
	            s.block_start = 0;
	            s.insert = 0;
	          }
	        }
	      }
	      flush_pending(strm);
	      if (strm.avail_out === 0) {
	        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
	        return Z_OK$2;
	      }
	    }
	  }
	  //Assert(strm->avail_out > 0, "bug2");
	  //if (strm.avail_out <= 0) { throw new Error("bug2");}

	  if (flush !== Z_FINISH$2) { return Z_OK$2; }
	  if (s.wrap <= 0) { return Z_STREAM_END$2; }

	  /* Write the trailer */
	  if (s.wrap === 2) {
	    put_byte(s, strm.adler & 0xff);
	    put_byte(s, (strm.adler >> 8) & 0xff);
	    put_byte(s, (strm.adler >> 16) & 0xff);
	    put_byte(s, (strm.adler >> 24) & 0xff);
	    put_byte(s, strm.total_in & 0xff);
	    put_byte(s, (strm.total_in >> 8) & 0xff);
	    put_byte(s, (strm.total_in >> 16) & 0xff);
	    put_byte(s, (strm.total_in >> 24) & 0xff);
	  }
	  else
	  {
	    putShortMSB(s, strm.adler >>> 16);
	    putShortMSB(s, strm.adler & 0xffff);
	  }

	  flush_pending(strm);
	  /* If avail_out is zero, the application will call deflate again
	   * to flush the rest.
	   */
	  if (s.wrap > 0) { s.wrap = -s.wrap; }
	  /* write the trailer only once! */
	  return s.pending !== 0 ? Z_OK$2 : Z_STREAM_END$2;
	}

	function deflateEnd(strm) {
	  var status;

	  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
	    return Z_STREAM_ERROR$1;
	  }

	  status = strm.state.status;
	  if (status !== INIT_STATE &&
	    status !== EXTRA_STATE &&
	    status !== NAME_STATE &&
	    status !== COMMENT_STATE &&
	    status !== HCRC_STATE &&
	    status !== BUSY_STATE &&
	    status !== FINISH_STATE
	  ) {
	    return err(strm, Z_STREAM_ERROR$1);
	  }

	  strm.state = null;

	  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR$1) : Z_OK$2;
	}


	/* =========================================================================
	 * Initializes the compression dictionary from the given byte
	 * sequence without producing any compressed output.
	 */
	function deflateSetDictionary(strm, dictionary) {
	  var dictLength = dictionary.length;

	  var s;
	  var str, n;
	  var wrap;
	  var avail;
	  var next;
	  var input;
	  var tmpDict;

	  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
	    return Z_STREAM_ERROR$1;
	  }

	  s = strm.state;
	  wrap = s.wrap;

	  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {
	    return Z_STREAM_ERROR$1;
	  }

	  /* when using zlib wrappers, compute Adler-32 for provided dictionary */
	  if (wrap === 1) {
	    /* adler32(strm->adler, dictionary, dictLength); */
	    strm.adler = adler32_1(strm.adler, dictionary, dictLength, 0);
	  }

	  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */

	  /* if dictionary would fill window, just replace the history */
	  if (dictLength >= s.w_size) {
	    if (wrap === 0) {            /* already empty otherwise */
	      /*** CLEAR_HASH(s); ***/
	      zero(s.head); // Fill with NIL (= 0);
	      s.strstart = 0;
	      s.block_start = 0;
	      s.insert = 0;
	    }
	    /* use the tail */
	    // dictionary = dictionary.slice(dictLength - s.w_size);
	    tmpDict = new common.Buf8(s.w_size);
	    common.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);
	    dictionary = tmpDict;
	    dictLength = s.w_size;
	  }
	  /* insert dictionary into window and hash */
	  avail = strm.avail_in;
	  next = strm.next_in;
	  input = strm.input;
	  strm.avail_in = dictLength;
	  strm.next_in = 0;
	  strm.input = dictionary;
	  fill_window(s);
	  while (s.lookahead >= MIN_MATCH) {
	    str = s.strstart;
	    n = s.lookahead - (MIN_MATCH - 1);
	    do {
	      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
	      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

	      s.prev[str & s.w_mask] = s.head[s.ins_h];

	      s.head[s.ins_h] = str;
	      str++;
	    } while (--n);
	    s.strstart = str;
	    s.lookahead = MIN_MATCH - 1;
	    fill_window(s);
	  }
	  s.strstart += s.lookahead;
	  s.block_start = s.strstart;
	  s.insert = s.lookahead;
	  s.lookahead = 0;
	  s.match_length = s.prev_length = MIN_MATCH - 1;
	  s.match_available = 0;
	  strm.next_in = next;
	  strm.input = input;
	  strm.avail_in = avail;
	  s.wrap = wrap;
	  return Z_OK$2;
	}


	var deflateInit_1 = deflateInit;
	var deflateInit2_1 = deflateInit2;
	var deflateReset_1 = deflateReset;
	var deflateResetKeep_1 = deflateResetKeep;
	var deflateSetHeader_1 = deflateSetHeader;
	var deflate_2$1 = deflate$1;
	var deflateEnd_1 = deflateEnd;
	var deflateSetDictionary_1 = deflateSetDictionary;
	var deflateInfo = 'pako deflate (from Nodeca project)';

	/* Not implemented
	exports.deflateBound = deflateBound;
	exports.deflateCopy = deflateCopy;
	exports.deflateParams = deflateParams;
	exports.deflatePending = deflatePending;
	exports.deflatePrime = deflatePrime;
	exports.deflateTune = deflateTune;
	*/

	var deflate_1$1 = {
		deflateInit: deflateInit_1,
		deflateInit2: deflateInit2_1,
		deflateReset: deflateReset_1,
		deflateResetKeep: deflateResetKeep_1,
		deflateSetHeader: deflateSetHeader_1,
		deflate: deflate_2$1,
		deflateEnd: deflateEnd_1,
		deflateSetDictionary: deflateSetDictionary_1,
		deflateInfo: deflateInfo
	};

	// Quick check if we can use fast array to bin string conversion
	//
	// - apply(Array) can fail on Android 2.2
	// - apply(Uint8Array) can fail on iOS 5.1 Safari
	//
	var STR_APPLY_OK = true;
	var STR_APPLY_UIA_OK = true;

	try { String.fromCharCode.apply(null, [ 0 ]); } catch (__) { STR_APPLY_OK = false; }
	try { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }


	// Table with utf8 lengths (calculated by first byte of sequence)
	// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
	// because max possible codepoint is 0x10ffff
	var _utf8len = new common.Buf8(256);
	for (var q$1 = 0; q$1 < 256; q$1++) {
	  _utf8len[q$1] = (q$1 >= 252 ? 6 : q$1 >= 248 ? 5 : q$1 >= 240 ? 4 : q$1 >= 224 ? 3 : q$1 >= 192 ? 2 : 1);
	}
	_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start


	// convert string to array (typed, when possible)
	var string2buf = function (str) {
	  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;

	  // count binary size
	  for (m_pos = 0; m_pos < str_len; m_pos++) {
	    c = str.charCodeAt(m_pos);
	    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
	      c2 = str.charCodeAt(m_pos + 1);
	      if ((c2 & 0xfc00) === 0xdc00) {
	        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
	        m_pos++;
	      }
	    }
	    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
	  }

	  // allocate buffer
	  buf = new common.Buf8(buf_len);

	  // convert
	  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
	    c = str.charCodeAt(m_pos);
	    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
	      c2 = str.charCodeAt(m_pos + 1);
	      if ((c2 & 0xfc00) === 0xdc00) {
	        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
	        m_pos++;
	      }
	    }
	    if (c < 0x80) {
	      /* one byte */
	      buf[i++] = c;
	    } else if (c < 0x800) {
	      /* two bytes */
	      buf[i++] = 0xC0 | (c >>> 6);
	      buf[i++] = 0x80 | (c & 0x3f);
	    } else if (c < 0x10000) {
	      /* three bytes */
	      buf[i++] = 0xE0 | (c >>> 12);
	      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
	      buf[i++] = 0x80 | (c & 0x3f);
	    } else {
	      /* four bytes */
	      buf[i++] = 0xf0 | (c >>> 18);
	      buf[i++] = 0x80 | (c >>> 12 & 0x3f);
	      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
	      buf[i++] = 0x80 | (c & 0x3f);
	    }
	  }

	  return buf;
	};

	// Helper (used in 2 places)
	function buf2binstring(buf, len) {
	  // On Chrome, the arguments in a function call that are allowed is `65534`.
	  // If the length of the buffer is smaller than that, we can use this optimization,
	  // otherwise we will take a slower path.
	  if (len < 65534) {
	    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {
	      return String.fromCharCode.apply(null, common.shrinkBuf(buf, len));
	    }
	  }

	  var result = '';
	  for (var i = 0; i < len; i++) {
	    result += String.fromCharCode(buf[i]);
	  }
	  return result;
	}


	// Convert byte array to binary string
	var buf2binstring_1 = function (buf) {
	  return buf2binstring(buf, buf.length);
	};


	// Convert binary string (typed, when possible)
	var binstring2buf = function (str) {
	  var buf = new common.Buf8(str.length);
	  for (var i = 0, len = buf.length; i < len; i++) {
	    buf[i] = str.charCodeAt(i);
	  }
	  return buf;
	};


	// convert array to string
	var buf2string = function (buf, max) {
	  var i, out, c, c_len;
	  var len = max || buf.length;

	  // Reserve max possible length (2 words per char)
	  // NB: by unknown reasons, Array is significantly faster for
	  //     String.fromCharCode.apply than Uint16Array.
	  var utf16buf = new Array(len * 2);

	  for (out = 0, i = 0; i < len;) {
	    c = buf[i++];
	    // quick process ascii
	    if (c < 0x80) { utf16buf[out++] = c; continue; }

	    c_len = _utf8len[c];
	    // skip 5 & 6 byte codes
	    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }

	    // apply mask on first byte
	    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
	    // join the rest
	    while (c_len > 1 && i < len) {
	      c = (c << 6) | (buf[i++] & 0x3f);
	      c_len--;
	    }

	    // terminated by end of string?
	    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }

	    if (c < 0x10000) {
	      utf16buf[out++] = c;
	    } else {
	      c -= 0x10000;
	      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
	      utf16buf[out++] = 0xdc00 | (c & 0x3ff);
	    }
	  }

	  return buf2binstring(utf16buf, out);
	};


	// Calculate max possible position in utf8 buffer,
	// that will not break sequence. If that's not possible
	// - (very small limits) return max size as is.
	//
	// buf[] - utf8 bytes array
	// max   - length limit (mandatory);
	var utf8border = function (buf, max) {
	  var pos;

	  max = max || buf.length;
	  if (max > buf.length) { max = buf.length; }

	  // go back from last position, until start of sequence found
	  pos = max - 1;
	  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }

	  // Very small and broken sequence,
	  // return max, because we should return something anyway.
	  if (pos < 0) { return max; }

	  // If we came to start of buffer - that means buffer is too small,
	  // return max too.
	  if (pos === 0) { return max; }

	  return (pos + _utf8len[buf[pos]] > max) ? pos : max;
	};

	var strings = {
		string2buf: string2buf,
		buf2binstring: buf2binstring_1,
		binstring2buf: binstring2buf,
		buf2string: buf2string,
		utf8border: utf8border
	};

	// (C) 1995-2013 Jean-loup Gailly and Mark Adler
	// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
	//
	// This software is provided 'as-is', without any express or implied
	// warranty. In no event will the authors be held liable for any damages
	// arising from the use of this software.
	//
	// Permission is granted to anyone to use this software for any purpose,
	// including commercial applications, and to alter it and redistribute it
	// freely, subject to the following restrictions:
	//
	// 1. The origin of this software must not be misrepresented; you must not
	//   claim that you wrote the original software. If you use this software
	//   in a product, an acknowledgment in the product documentation would be
	//   appreciated but is not required.
	// 2. Altered source versions must be plainly marked as such, and must not be
	//   misrepresented as being the original software.
	// 3. This notice may not be removed or altered from any source distribution.

	function ZStream() {
	  /* next input byte */
	  this.input = null; // JS specific, because we have no pointers
	  this.next_in = 0;
	  /* number of bytes available at input */
	  this.avail_in = 0;
	  /* total number of input bytes read so far */
	  this.total_in = 0;
	  /* next output byte should be put there */
	  this.output = null; // JS specific, because we have no pointers
	  this.next_out = 0;
	  /* remaining free space at output */
	  this.avail_out = 0;
	  /* total number of bytes output so far */
	  this.total_out = 0;
	  /* last error message, NULL if no error */
	  this.msg = ''/*Z_NULL*/;
	  /* not visible by applications */
	  this.state = null;
	  /* best guess about the data type: binary or text */
	  this.data_type = 2/*Z_UNKNOWN*/;
	  /* adler32 value of the uncompressed data */
	  this.adler = 0;
	}

	var zstream = ZStream;

	var toString$1 = Object.prototype.toString;

	/* Public constants ==========================================================*/
	/* ===========================================================================*/

	var Z_NO_FLUSH      = 0;
	var Z_FINISH$1        = 4;

	var Z_OK$1            = 0;
	var Z_STREAM_END$1    = 1;
	var Z_SYNC_FLUSH    = 2;

	var Z_DEFAULT_COMPRESSION = -1;

	var Z_DEFAULT_STRATEGY    = 0;

	var Z_DEFLATED$1  = 8;

	/* ===========================================================================*/


	/**
	 * class Deflate
	 *
	 * Generic JS-style wrapper for zlib calls. If you don't need
	 * streaming behaviour - use more simple functions: [[deflate]],
	 * [[deflateRaw]] and [[gzip]].
	 **/

	/* internal
	 * Deflate.chunks -> Array
	 *
	 * Chunks of output data, if [[Deflate#onData]] not overridden.
	 **/

	/**
	 * Deflate.result -> Uint8Array|Array
	 *
	 * Compressed result, generated by default [[Deflate#onData]]
	 * and [[Deflate#onEnd]] handlers. Filled after you push last chunk
	 * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you
	 * push a chunk with explicit flush (call [[Deflate#push]] with
	 * `Z_SYNC_FLUSH` param).
	 **/

	/**
	 * Deflate.err -> Number
	 *
	 * Error code after deflate finished. 0 (Z_OK) on success.
	 * You will not need it in real life, because deflate errors
	 * are possible only on wrong options or bad `onData` / `onEnd`
	 * custom handlers.
	 **/

	/**
	 * Deflate.msg -> String
	 *
	 * Error message, if [[Deflate.err]] != 0
	 **/


	/**
	 * new Deflate(options)
	 * - options (Object): zlib deflate options.
	 *
	 * Creates new deflator instance with specified params. Throws exception
	 * on bad params. Supported options:
	 *
	 * - `level`
	 * - `windowBits`
	 * - `memLevel`
	 * - `strategy`
	 * - `dictionary`
	 *
	 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
	 * for more information on these.
	 *
	 * Additional options, for internal needs:
	 *
	 * - `chunkSize` - size of generated data chunks (16K by default)
	 * - `raw` (Boolean) - do raw deflate
	 * - `gzip` (Boolean) - create gzip wrapper
	 * - `to` (String) - if equal to 'string', then result will be "binary string"
	 *    (each char code [0..255])
	 * - `header` (Object) - custom header for gzip
	 *   - `text` (Boolean) - true if compressed data believed to be text
	 *   - `time` (Number) - modification time, unix timestamp
	 *   - `os` (Number) - operation system code
	 *   - `extra` (Array) - array of bytes with extra data (max 65536)
	 *   - `name` (String) - file name (binary string)
	 *   - `comment` (String) - comment (binary string)
	 *   - `hcrc` (Boolean) - true if header crc should be added
	 *
	 * ##### Example:
	 *
	 * ```javascript
	 * var pako = require('pako')
	 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
	 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
	 *
	 * var deflate = new pako.Deflate({ level: 3});
	 *
	 * deflate.push(chunk1, false);
	 * deflate.push(chunk2, true);  // true -> last chunk
	 *
	 * if (deflate.err) { throw new Error(deflate.err); }
	 *
	 * console.log(deflate.result);
	 * ```
	 **/
	function Deflate(options) {
	  if (!(this instanceof Deflate)) return new Deflate(options);

	  this.options = common.assign({
	    level: Z_DEFAULT_COMPRESSION,
	    method: Z_DEFLATED$1,
	    chunkSize: 16384,
	    windowBits: 15,
	    memLevel: 8,
	    strategy: Z_DEFAULT_STRATEGY,
	    to: ''
	  }, options || {});

	  var opt = this.options;

	  if (opt.raw && (opt.windowBits > 0)) {
	    opt.windowBits = -opt.windowBits;
	  }

	  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {
	    opt.windowBits += 16;
	  }

	  this.err    = 0;      // error code, if happens (0 = Z_OK)
	  this.msg    = '';     // error message
	  this.ended  = false;  // used to avoid multiple onEnd() calls
	  this.chunks = [];     // chunks of compressed data

	  this.strm = new zstream();
	  this.strm.avail_out = 0;

	  var status = deflate_1$1.deflateInit2(
	    this.strm,
	    opt.level,
	    opt.method,
	    opt.windowBits,
	    opt.memLevel,
	    opt.strategy
	  );

	  if (status !== Z_OK$1) {
	    throw new Error(messages[status]);
	  }

	  if (opt.header) {
	    deflate_1$1.deflateSetHeader(this.strm, opt.header);
	  }

	  if (opt.dictionary) {
	    var dict;
	    // Convert data if needed
	    if (typeof opt.dictionary === 'string') {
	      // If we need to compress text, change encoding to utf8.
	      dict = strings.string2buf(opt.dictionary);
	    } else if (toString$1.call(opt.dictionary) === '[object ArrayBuffer]') {
	      dict = new Uint8Array(opt.dictionary);
	    } else {
	      dict = opt.dictionary;
	    }

	    status = deflate_1$1.deflateSetDictionary(this.strm, dict);

	    if (status !== Z_OK$1) {
	      throw new Error(messages[status]);
	    }

	    this._dict_set = true;
	  }
	}

	/**
	 * Deflate#push(data[, mode]) -> Boolean
	 * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be
	 *   converted to utf8 byte sequence.
	 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
	 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.
	 *
	 * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with
	 * new compressed chunks. Returns `true` on success. The last data block must have
	 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
	 * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you
	 * can use mode Z_SYNC_FLUSH, keeping the compression context.
	 *
	 * On fail call [[Deflate#onEnd]] with error code and return false.
	 *
	 * We strongly recommend to use `Uint8Array` on input for best speed (output
	 * array format is detected automatically). Also, don't skip last param and always
	 * use the same type in your code (boolean or number). That will improve JS speed.
	 *
	 * For regular `Array`-s make sure all elements are [0..255].
	 *
	 * ##### Example
	 *
	 * ```javascript
	 * push(chunk, false); // push one of data chunks
	 * ...
	 * push(chunk, true);  // push last chunk
	 * ```
	 **/
	Deflate.prototype.push = function (data, mode) {
	  var strm = this.strm;
	  var chunkSize = this.options.chunkSize;
	  var status, _mode;

	  if (this.ended) { return false; }

	  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH$1 : Z_NO_FLUSH);

	  // Convert data if needed
	  if (typeof data === 'string') {
	    // If we need to compress text, change encoding to utf8.
	    strm.input = strings.string2buf(data);
	  } else if (toString$1.call(data) === '[object ArrayBuffer]') {
	    strm.input = new Uint8Array(data);
	  } else {
	    strm.input = data;
	  }

	  strm.next_in = 0;
	  strm.avail_in = strm.input.length;

	  do {
	    if (strm.avail_out === 0) {
	      strm.output = new common.Buf8(chunkSize);
	      strm.next_out = 0;
	      strm.avail_out = chunkSize;
	    }
	    status = deflate_1$1.deflate(strm, _mode);    /* no bad return value */

	    if (status !== Z_STREAM_END$1 && status !== Z_OK$1) {
	      this.onEnd(status);
	      this.ended = true;
	      return false;
	    }
	    if (strm.avail_out === 0 || (strm.avail_in === 0 && (_mode === Z_FINISH$1 || _mode === Z_SYNC_FLUSH))) {
	      if (this.options.to === 'string') {
	        this.onData(strings.buf2binstring(common.shrinkBuf(strm.output, strm.next_out)));
	      } else {
	        this.onData(common.shrinkBuf(strm.output, strm.next_out));
	      }
	    }
	  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END$1);

	  // Finalize on the last chunk.
	  if (_mode === Z_FINISH$1) {
	    status = deflate_1$1.deflateEnd(this.strm);
	    this.onEnd(status);
	    this.ended = true;
	    return status === Z_OK$1;
	  }

	  // callback interim results if Z_SYNC_FLUSH.
	  if (_mode === Z_SYNC_FLUSH) {
	    this.onEnd(Z_OK$1);
	    strm.avail_out = 0;
	    return true;
	  }

	  return true;
	};


	/**
	 * Deflate#onData(chunk) -> Void
	 * - chunk (Uint8Array|Array|String): output data. Type of array depends
	 *   on js engine support. When string output requested, each chunk
	 *   will be string.
	 *
	 * By default, stores data blocks in `chunks[]` property and glue
	 * those in `onEnd`. Override this handler, if you need another behaviour.
	 **/
	Deflate.prototype.onData = function (chunk) {
	  this.chunks.push(chunk);
	};


	/**
	 * Deflate#onEnd(status) -> Void
	 * - status (Number): deflate status. 0 (Z_OK) on success,
	 *   other if not.
	 *
	 * Called once after you tell deflate that the input stream is
	 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
	 * or if an error happened. By default - join collected chunks,
	 * free memory and fill `results` / `err` properties.
	 **/
	Deflate.prototype.onEnd = function (status) {
	  // On success - join
	  if (status === Z_OK$1) {
	    if (this.options.to === 'string') {
	      this.result = this.chunks.join('');
	    } else {
	      this.result = common.flattenChunks(this.chunks);
	    }
	  }
	  this.chunks = [];
	  this.err = status;
	  this.msg = this.strm.msg;
	};


	/**
	 * deflate(data[, options]) -> Uint8Array|Array|String
	 * - data (Uint8Array|Array|String): input data to compress.
	 * - options (Object): zlib deflate options.
	 *
	 * Compress `data` with deflate algorithm and `options`.
	 *
	 * Supported options are:
	 *
	 * - level
	 * - windowBits
	 * - memLevel
	 * - strategy
	 * - dictionary
	 *
	 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
	 * for more information on these.
	 *
	 * Sugar (options):
	 *
	 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
	 *   negative windowBits implicitly.
	 * - `to` (String) - if equal to 'string', then result will be "binary string"
	 *    (each char code [0..255])
	 *
	 * ##### Example:
	 *
	 * ```javascript
	 * var pako = require('pako')
	 *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);
	 *
	 * console.log(pako.deflate(data));
	 * ```
	 **/
	function deflate(input, options) {
	  var deflator = new Deflate(options);

	  deflator.push(input, true);

	  // That will never happens, if you don't cheat with options :)
	  if (deflator.err) { throw deflator.msg || messages[deflator.err]; }

	  return deflator.result;
	}


	/**
	 * deflateRaw(data[, options]) -> Uint8Array|Array|String
	 * - data (Uint8Array|Array|String): input data to compress.
	 * - options (Object): zlib deflate options.
	 *
	 * The same as [[deflate]], but creates raw data, without wrapper
	 * (header and adler32 crc).
	 **/
	function deflateRaw(input, options) {
	  options = options || {};
	  options.raw = true;
	  return deflate(input, options);
	}


	/**
	 * gzip(data[, options]) -> Uint8Array|Array|String
	 * - data (Uint8Array|Array|String): input data to compress.
	 * - options (Object): zlib deflate options.
	 *
	 * The same as [[deflate]], but create gzip wrapper instead of
	 * deflate one.
	 **/
	function gzip(input, options) {
	  options = options || {};
	  options.gzip = true;
	  return deflate(input, options);
	}


	var Deflate_1 = Deflate;
	var deflate_2 = deflate;
	var deflateRaw_1 = deflateRaw;
	var gzip_1 = gzip;

	var deflate_1 = {
		Deflate: Deflate_1,
		deflate: deflate_2,
		deflateRaw: deflateRaw_1,
		gzip: gzip_1
	};

	// (C) 1995-2013 Jean-loup Gailly and Mark Adler
	// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
	//
	// This software is provided 'as-is', without any express or implied
	// warranty. In no event will the authors be held liable for any damages
	// arising from the use of this software.
	//
	// Permission is granted to anyone to use this software for any purpose,
	// including commercial applications, and to alter it and redistribute it
	// freely, subject to the following restrictions:
	//
	// 1. The origin of this software must not be misrepresented; you must not
	//   claim that you wrote the original software. If you use this software
	//   in a product, an acknowledgment in the product documentation would be
	//   appreciated but is not required.
	// 2. Altered source versions must be plainly marked as such, and must not be
	//   misrepresented as being the original software.
	// 3. This notice may not be removed or altered from any source distribution.

	// See state defs from inflate.js
	var BAD$1 = 30;       /* got a data error -- remain here until reset */
	var TYPE$1 = 12;      /* i: waiting for type bits, including last-flag bit */

	/*
	   Decode literal, length, and distance codes and write out the resulting
	   literal and match bytes until either not enough input or output is
	   available, an end-of-block is encountered, or a data error is encountered.
	   When large enough input and output buffers are supplied to inflate(), for
	   example, a 16K input buffer and a 64K output buffer, more than 95% of the
	   inflate execution time is spent in this routine.

	   Entry assumptions:

	        state.mode === LEN
	        strm.avail_in >= 6
	        strm.avail_out >= 258
	        start >= strm.avail_out
	        state.bits < 8

	   On return, state.mode is one of:

	        LEN -- ran out of enough output space or enough available input
	        TYPE -- reached end of block code, inflate() to interpret next block
	        BAD -- error in block data

	   Notes:

	    - The maximum input bits used by a length/distance pair is 15 bits for the
	      length code, 5 bits for the length extra, 15 bits for the distance code,
	      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
	      Therefore if strm.avail_in >= 6, then there is enough input to avoid
	      checking for available input while decoding.

	    - The maximum bytes that a single length/distance pair can output is 258
	      bytes, which is the maximum length that can be coded.  inflate_fast()
	      requires strm.avail_out >= 258 for each loop to avoid checking for
	      output space.
	 */
	var inffast = function inflate_fast(strm, start) {
	  var state;
	  var _in;                    /* local strm.input */
	  var last;                   /* have enough input while in < last */
	  var _out;                   /* local strm.output */
	  var beg;                    /* inflate()'s initial strm.output */
	  var end;                    /* while out < end, enough space available */
	//#ifdef INFLATE_STRICT
	  var dmax;                   /* maximum distance from zlib header */
	//#endif
	  var wsize;                  /* window size or zero if not using window */
	  var whave;                  /* valid bytes in the window */
	  var wnext;                  /* window write index */
	  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
	  var s_window;               /* allocated sliding window, if wsize != 0 */
	  var hold;                   /* local strm.hold */
	  var bits;                   /* local strm.bits */
	  var lcode;                  /* local strm.lencode */
	  var dcode;                  /* local strm.distcode */
	  var lmask;                  /* mask for first level of length codes */
	  var dmask;                  /* mask for first level of distance codes */
	  var here;                   /* retrieved table entry */
	  var op;                     /* code bits, operation, extra bits, or */
	                              /*  window position, window bytes to copy */
	  var len;                    /* match length, unused bytes */
	  var dist;                   /* match distance */
	  var from;                   /* where to copy match from */
	  var from_source;


	  var input, output; // JS specific, because we have no pointers

	  /* copy state to local variables */
	  state = strm.state;
	  //here = state.here;
	  _in = strm.next_in;
	  input = strm.input;
	  last = _in + (strm.avail_in - 5);
	  _out = strm.next_out;
	  output = strm.output;
	  beg = _out - (start - strm.avail_out);
	  end = _out + (strm.avail_out - 257);
	//#ifdef INFLATE_STRICT
	  dmax = state.dmax;
	//#endif
	  wsize = state.wsize;
	  whave = state.whave;
	  wnext = state.wnext;
	  s_window = state.window;
	  hold = state.hold;
	  bits = state.bits;
	  lcode = state.lencode;
	  dcode = state.distcode;
	  lmask = (1 << state.lenbits) - 1;
	  dmask = (1 << state.distbits) - 1;


	  /* decode literals and length/distances until end-of-block or not enough
	     input data or output space */

	  top:
	  do {
	    if (bits < 15) {
	      hold += input[_in++] << bits;
	      bits += 8;
	      hold += input[_in++] << bits;
	      bits += 8;
	    }

	    here = lcode[hold & lmask];

	    dolen:
	    for (;;) { // Goto emulation
	      op = here >>> 24/*here.bits*/;
	      hold >>>= op;
	      bits -= op;
	      op = (here >>> 16) & 0xff/*here.op*/;
	      if (op === 0) {                          /* literal */
	        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
	        //        "inflate:         literal '%c'\n" :
	        //        "inflate:         literal 0x%02x\n", here.val));
	        output[_out++] = here & 0xffff/*here.val*/;
	      }
	      else if (op & 16) {                     /* length base */
	        len = here & 0xffff/*here.val*/;
	        op &= 15;                           /* number of extra bits */
	        if (op) {
	          if (bits < op) {
	            hold += input[_in++] << bits;
	            bits += 8;
	          }
	          len += hold & ((1 << op) - 1);
	          hold >>>= op;
	          bits -= op;
	        }
	        //Tracevv((stderr, "inflate:         length %u\n", len));
	        if (bits < 15) {
	          hold += input[_in++] << bits;
	          bits += 8;
	          hold += input[_in++] << bits;
	          bits += 8;
	        }
	        here = dcode[hold & dmask];

	        dodist:
	        for (;;) { // goto emulation
	          op = here >>> 24/*here.bits*/;
	          hold >>>= op;
	          bits -= op;
	          op = (here >>> 16) & 0xff/*here.op*/;

	          if (op & 16) {                      /* distance base */
	            dist = here & 0xffff/*here.val*/;
	            op &= 15;                       /* number of extra bits */
	            if (bits < op) {
	              hold += input[_in++] << bits;
	              bits += 8;
	              if (bits < op) {
	                hold += input[_in++] << bits;
	                bits += 8;
	              }
	            }
	            dist += hold & ((1 << op) - 1);
	//#ifdef INFLATE_STRICT
	            if (dist > dmax) {
	              strm.msg = 'invalid distance too far back';
	              state.mode = BAD$1;
	              break top;
	            }
	//#endif
	            hold >>>= op;
	            bits -= op;
	            //Tracevv((stderr, "inflate:         distance %u\n", dist));
	            op = _out - beg;                /* max distance in output */
	            if (dist > op) {                /* see if copy from window */
	              op = dist - op;               /* distance back in window */
	              if (op > whave) {
	                if (state.sane) {
	                  strm.msg = 'invalid distance too far back';
	                  state.mode = BAD$1;
	                  break top;
	                }

	// (!) This block is disabled in zlib defaults,
	// don't enable it for binary compatibility
	//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
	//                if (len <= op - whave) {
	//                  do {
	//                    output[_out++] = 0;
	//                  } while (--len);
	//                  continue top;
	//                }
	//                len -= op - whave;
	//                do {
	//                  output[_out++] = 0;
	//                } while (--op > whave);
	//                if (op === 0) {
	//                  from = _out - dist;
	//                  do {
	//                    output[_out++] = output[from++];
	//                  } while (--len);
	//                  continue top;
	//                }
	//#endif
	              }
	              from = 0; // window index
	              from_source = s_window;
	              if (wnext === 0) {           /* very common case */
	                from += wsize - op;
	                if (op < len) {         /* some from window */
	                  len -= op;
	                  do {
	                    output[_out++] = s_window[from++];
	                  } while (--op);
	                  from = _out - dist;  /* rest from output */
	                  from_source = output;
	                }
	              }
	              else if (wnext < op) {      /* wrap around window */
	                from += wsize + wnext - op;
	                op -= wnext;
	                if (op < len) {         /* some from end of window */
	                  len -= op;
	                  do {
	                    output[_out++] = s_window[from++];
	                  } while (--op);
	                  from = 0;
	                  if (wnext < len) {  /* some from start of window */
	                    op = wnext;
	                    len -= op;
	                    do {
	                      output[_out++] = s_window[from++];
	                    } while (--op);
	                    from = _out - dist;      /* rest from output */
	                    from_source = output;
	                  }
	                }
	              }
	              else {                      /* contiguous in window */
	                from += wnext - op;
	                if (op < len) {         /* some from window */
	                  len -= op;
	                  do {
	                    output[_out++] = s_window[from++];
	                  } while (--op);
	                  from = _out - dist;  /* rest from output */
	                  from_source = output;
	                }
	              }
	              while (len > 2) {
	                output[_out++] = from_source[from++];
	                output[_out++] = from_source[from++];
	                output[_out++] = from_source[from++];
	                len -= 3;
	              }
	              if (len) {
	                output[_out++] = from_source[from++];
	                if (len > 1) {
	                  output[_out++] = from_source[from++];
	                }
	              }
	            }
	            else {
	              from = _out - dist;          /* copy direct from output */
	              do {                        /* minimum length is three */
	                output[_out++] = output[from++];
	                output[_out++] = output[from++];
	                output[_out++] = output[from++];
	                len -= 3;
	              } while (len > 2);
	              if (len) {
	                output[_out++] = output[from++];
	                if (len > 1) {
	                  output[_out++] = output[from++];
	                }
	              }
	            }
	          }
	          else if ((op & 64) === 0) {          /* 2nd level distance code */
	            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
	            continue dodist;
	          }
	          else {
	            strm.msg = 'invalid distance code';
	            state.mode = BAD$1;
	            break top;
	          }

	          break; // need to emulate goto via "continue"
	        }
	      }
	      else if ((op & 64) === 0) {              /* 2nd level length code */
	        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
	        continue dolen;
	      }
	      else if (op & 32) {                     /* end-of-block */
	        //Tracevv((stderr, "inflate:         end of block\n"));
	        state.mode = TYPE$1;
	        break top;
	      }
	      else {
	        strm.msg = 'invalid literal/length code';
	        state.mode = BAD$1;
	        break top;
	      }

	      break; // need to emulate goto via "continue"
	    }
	  } while (_in < last && _out < end);

	  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
	  len = bits >> 3;
	  _in -= len;
	  bits -= len << 3;
	  hold &= (1 << bits) - 1;

	  /* update state and return */
	  strm.next_in = _in;
	  strm.next_out = _out;
	  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
	  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
	  state.hold = hold;
	  state.bits = bits;
	  return;
	};

	// (C) 1995-2013 Jean-loup Gailly and Mark Adler
	// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
	//
	// This software is provided 'as-is', without any express or implied
	// warranty. In no event will the authors be held liable for any damages
	// arising from the use of this software.
	//
	// Permission is granted to anyone to use this software for any purpose,
	// including commercial applications, and to alter it and redistribute it
	// freely, subject to the following restrictions:
	//
	// 1. The origin of this software must not be misrepresented; you must not
	//   claim that you wrote the original software. If you use this software
	//   in a product, an acknowledgment in the product documentation would be
	//   appreciated but is not required.
	// 2. Altered source versions must be plainly marked as such, and must not be
	//   misrepresented as being the original software.
	// 3. This notice may not be removed or altered from any source distribution.



	var MAXBITS = 15;
	var ENOUGH_LENS$1 = 852;
	var ENOUGH_DISTS$1 = 592;
	//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

	var CODES$1 = 0;
	var LENS$1 = 1;
	var DISTS$1 = 2;

	var lbase = [ /* Length codes 257..285 base */
	  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
	  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
	];

	var lext = [ /* Length codes 257..285 extra */
	  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
	  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
	];

	var dbase = [ /* Distance codes 0..29 base */
	  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
	  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
	  8193, 12289, 16385, 24577, 0, 0
	];

	var dext = [ /* Distance codes 0..29 extra */
	  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
	  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
	  28, 28, 29, 29, 64, 64
	];

	var inftrees = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)
	{
	  var bits = opts.bits;
	      //here = opts.here; /* table entry for duplication */

	  var len = 0;               /* a code's length in bits */
	  var sym = 0;               /* index of code symbols */
	  var min = 0, max = 0;          /* minimum and maximum code lengths */
	  var root = 0;              /* number of index bits for root table */
	  var curr = 0;              /* number of index bits for current table */
	  var drop = 0;              /* code bits to drop for sub-table */
	  var left = 0;                   /* number of prefix codes available */
	  var used = 0;              /* code entries in table used */
	  var huff = 0;              /* Huffman code */
	  var incr;              /* for incrementing code, index */
	  var fill;              /* index for replicating entries */
	  var low;               /* low bits for current root entry */
	  var mask;              /* mask for low root bits */
	  var next;             /* next available space in table */
	  var base = null;     /* base value table to use */
	  var base_index = 0;
	//  var shoextra;    /* extra bits table to use */
	  var end;                    /* use base and extra for symbol > end */
	  var count = new common.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
	  var offs = new common.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
	  var extra = null;
	  var extra_index = 0;

	  var here_bits, here_op, here_val;

	  /*
	   Process a set of code lengths to create a canonical Huffman code.  The
	   code lengths are lens[0..codes-1].  Each length corresponds to the
	   symbols 0..codes-1.  The Huffman code is generated by first sorting the
	   symbols by length from short to long, and retaining the symbol order
	   for codes with equal lengths.  Then the code starts with all zero bits
	   for the first code of the shortest length, and the codes are integer
	   increments for the same length, and zeros are appended as the length
	   increases.  For the deflate format, these bits are stored backwards
	   from their more natural integer increment ordering, and so when the
	   decoding tables are built in the large loop below, the integer codes
	   are incremented backwards.

	   This routine assumes, but does not check, that all of the entries in
	   lens[] are in the range 0..MAXBITS.  The caller must assure this.
	   1..MAXBITS is interpreted as that code length.  zero means that that
	   symbol does not occur in this code.

	   The codes are sorted by computing a count of codes for each length,
	   creating from that a table of starting indices for each length in the
	   sorted table, and then entering the symbols in order in the sorted
	   table.  The sorted table is work[], with that space being provided by
	   the caller.

	   The length counts are used for other purposes as well, i.e. finding
	   the minimum and maximum length codes, determining if there are any
	   codes at all, checking for a valid set of lengths, and looking ahead
	   at length counts to determine sub-table sizes when building the
	   decoding tables.
	   */

	  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
	  for (len = 0; len <= MAXBITS; len++) {
	    count[len] = 0;
	  }
	  for (sym = 0; sym < codes; sym++) {
	    count[lens[lens_index + sym]]++;
	  }

	  /* bound code lengths, force root to be within code lengths */
	  root = bits;
	  for (max = MAXBITS; max >= 1; max--) {
	    if (count[max] !== 0) { break; }
	  }
	  if (root > max) {
	    root = max;
	  }
	  if (max === 0) {                     /* no symbols to code at all */
	    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
	    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
	    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
	    table[table_index++] = (1 << 24) | (64 << 16) | 0;


	    //table.op[opts.table_index] = 64;
	    //table.bits[opts.table_index] = 1;
	    //table.val[opts.table_index++] = 0;
	    table[table_index++] = (1 << 24) | (64 << 16) | 0;

	    opts.bits = 1;
	    return 0;     /* no symbols, but wait for decoding to report error */
	  }
	  for (min = 1; min < max; min++) {
	    if (count[min] !== 0) { break; }
	  }
	  if (root < min) {
	    root = min;
	  }

	  /* check for an over-subscribed or incomplete set of lengths */
	  left = 1;
	  for (len = 1; len <= MAXBITS; len++) {
	    left <<= 1;
	    left -= count[len];
	    if (left < 0) {
	      return -1;
	    }        /* over-subscribed */
	  }
	  if (left > 0 && (type === CODES$1 || max !== 1)) {
	    return -1;                      /* incomplete set */
	  }

	  /* generate offsets into symbol table for each length for sorting */
	  offs[1] = 0;
	  for (len = 1; len < MAXBITS; len++) {
	    offs[len + 1] = offs[len] + count[len];
	  }

	  /* sort symbols by length, by symbol order within each length */
	  for (sym = 0; sym < codes; sym++) {
	    if (lens[lens_index + sym] !== 0) {
	      work[offs[lens[lens_index + sym]]++] = sym;
	    }
	  }

	  /*
	   Create and fill in decoding tables.  In this loop, the table being
	   filled is at next and has curr index bits.  The code being used is huff
	   with length len.  That code is converted to an index by dropping drop
	   bits off of the bottom.  For codes where len is less than drop + curr,
	   those top drop + curr - len bits are incremented through all values to
	   fill the table with replicated entries.

	   root is the number of index bits for the root table.  When len exceeds
	   root, sub-tables are created pointed to by the root entry with an index
	   of the low root bits of huff.  This is saved in low to check for when a
	   new sub-table should be started.  drop is zero when the root table is
	   being filled, and drop is root when sub-tables are being filled.

	   When a new sub-table is needed, it is necessary to look ahead in the
	   code lengths to determine what size sub-table is needed.  The length
	   counts are used for this, and so count[] is decremented as codes are
	   entered in the tables.

	   used keeps track of how many table entries have been allocated from the
	   provided *table space.  It is checked for LENS and DIST tables against
	   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
	   the initial root table size constants.  See the comments in inftrees.h
	   for more information.

	   sym increments through all symbols, and the loop terminates when
	   all codes of length max, i.e. all codes, have been processed.  This
	   routine permits incomplete codes, so another loop after this one fills
	   in the rest of the decoding tables with invalid code markers.
	   */

	  /* set up for code type */
	  // poor man optimization - use if-else instead of switch,
	  // to avoid deopts in old v8
	  if (type === CODES$1) {
	    base = extra = work;    /* dummy value--not used */
	    end = 19;

	  } else if (type === LENS$1) {
	    base = lbase;
	    base_index -= 257;
	    extra = lext;
	    extra_index -= 257;
	    end = 256;

	  } else {                    /* DISTS */
	    base = dbase;
	    extra = dext;
	    end = -1;
	  }

	  /* initialize opts for loop */
	  huff = 0;                   /* starting code */
	  sym = 0;                    /* starting code symbol */
	  len = min;                  /* starting code length */
	  next = table_index;              /* current table to fill in */
	  curr = root;                /* current table index bits */
	  drop = 0;                   /* current bits to drop from code for index */
	  low = -1;                   /* trigger new sub-table when len > root */
	  used = 1 << root;          /* use root table entries */
	  mask = used - 1;            /* mask for comparing low */

	  /* check available table space */
	  if ((type === LENS$1 && used > ENOUGH_LENS$1) ||
	    (type === DISTS$1 && used > ENOUGH_DISTS$1)) {
	    return 1;
	  }

	  /* process all codes and make table entries */
	  for (;;) {
	    /* create table entry */
	    here_bits = len - drop;
	    if (work[sym] < end) {
	      here_op = 0;
	      here_val = work[sym];
	    }
	    else if (work[sym] > end) {
	      here_op = extra[extra_index + work[sym]];
	      here_val = base[base_index + work[sym]];
	    }
	    else {
	      here_op = 32 + 64;         /* end of block */
	      here_val = 0;
	    }

	    /* replicate for those indices with low len bits equal to huff */
	    incr = 1 << (len - drop);
	    fill = 1 << curr;
	    min = fill;                 /* save offset to next table */
	    do {
	      fill -= incr;
	      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
	    } while (fill !== 0);

	    /* backwards increment the len-bit code huff */
	    incr = 1 << (len - 1);
	    while (huff & incr) {
	      incr >>= 1;
	    }
	    if (incr !== 0) {
	      huff &= incr - 1;
	      huff += incr;
	    } else {
	      huff = 0;
	    }

	    /* go to next symbol, update count, len */
	    sym++;
	    if (--count[len] === 0) {
	      if (len === max) { break; }
	      len = lens[lens_index + work[sym]];
	    }

	    /* create new sub-table if needed */
	    if (len > root && (huff & mask) !== low) {
	      /* if first time, transition to sub-tables */
	      if (drop === 0) {
	        drop = root;
	      }

	      /* increment past last table */
	      next += min;            /* here min is 1 << curr */

	      /* determine length of next table */
	      curr = len - drop;
	      left = 1 << curr;
	      while (curr + drop < max) {
	        left -= count[curr + drop];
	        if (left <= 0) { break; }
	        curr++;
	        left <<= 1;
	      }

	      /* check for enough space */
	      used += 1 << curr;
	      if ((type === LENS$1 && used > ENOUGH_LENS$1) ||
	        (type === DISTS$1 && used > ENOUGH_DISTS$1)) {
	        return 1;
	      }

	      /* point entry in root table to sub-table */
	      low = huff & mask;
	      /*table.op[low] = curr;
	      table.bits[low] = root;
	      table.val[low] = next - opts.table_index;*/
	      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
	    }
	  }

	  /* fill in remaining table entry if code is incomplete (guaranteed to have
	   at most one remaining entry, since if the code is incomplete, the
	   maximum code length that was allowed to get this far is one bit) */
	  if (huff !== 0) {
	    //table.op[next + huff] = 64;            /* invalid code marker */
	    //table.bits[next + huff] = len - drop;
	    //table.val[next + huff] = 0;
	    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
	  }

	  /* set return parameters */
	  //opts.table_index += used;
	  opts.bits = root;
	  return 0;
	};

	// (C) 1995-2013 Jean-loup Gailly and Mark Adler
	// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
	//
	// This software is provided 'as-is', without any express or implied
	// warranty. In no event will the authors be held liable for any damages
	// arising from the use of this software.
	//
	// Permission is granted to anyone to use this software for any purpose,
	// including commercial applications, and to alter it and redistribute it
	// freely, subject to the following restrictions:
	//
	// 1. The origin of this software must not be misrepresented; you must not
	//   claim that you wrote the original software. If you use this software
	//   in a product, an acknowledgment in the product documentation would be
	//   appreciated but is not required.
	// 2. Altered source versions must be plainly marked as such, and must not be
	//   misrepresented as being the original software.
	// 3. This notice may not be removed or altered from any source distribution.







	var CODES = 0;
	var LENS = 1;
	var DISTS = 2;

	/* Public constants ==========================================================*/
	/* ===========================================================================*/


	/* Allowed flush values; see deflate() and inflate() below for details */
	//var Z_NO_FLUSH      = 0;
	//var Z_PARTIAL_FLUSH = 1;
	//var Z_SYNC_FLUSH    = 2;
	//var Z_FULL_FLUSH    = 3;
	var Z_FINISH        = 4;
	var Z_BLOCK         = 5;
	var Z_TREES         = 6;


	/* Return codes for the compression/decompression functions. Negative values
	 * are errors, positive values are used for special but normal events.
	 */
	var Z_OK            = 0;
	var Z_STREAM_END    = 1;
	var Z_NEED_DICT     = 2;
	//var Z_ERRNO         = -1;
	var Z_STREAM_ERROR  = -2;
	var Z_DATA_ERROR    = -3;
	var Z_MEM_ERROR     = -4;
	var Z_BUF_ERROR     = -5;
	//var Z_VERSION_ERROR = -6;

	/* The deflate compression method */
	var Z_DEFLATED  = 8;


	/* STATES ====================================================================*/
	/* ===========================================================================*/


	var    HEAD = 1;       /* i: waiting for magic header */
	var    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
	var    TIME = 3;       /* i: waiting for modification time (gzip) */
	var    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
	var    EXLEN = 5;      /* i: waiting for extra length (gzip) */
	var    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
	var    NAME = 7;       /* i: waiting for end of file name (gzip) */
	var    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
	var    HCRC = 9;       /* i: waiting for header crc (gzip) */
	var    DICTID = 10;    /* i: waiting for dictionary check value */
	var    DICT = 11;      /* waiting for inflateSetDictionary() call */
	var        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
	var        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
	var        STORED = 14;    /* i: waiting for stored size (length and complement) */
	var        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
	var        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
	var        TABLE = 17;     /* i: waiting for dynamic block table lengths */
	var        LENLENS = 18;   /* i: waiting for code length code lengths */
	var        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
	var            LEN_ = 20;      /* i: same as LEN below, but only first time in */
	var            LEN = 21;       /* i: waiting for length/lit/eob code */
	var            LENEXT = 22;    /* i: waiting for length extra bits */
	var            DIST = 23;      /* i: waiting for distance code */
	var            DISTEXT = 24;   /* i: waiting for distance extra bits */
	var            MATCH = 25;     /* o: waiting for output space to copy string */
	var            LIT = 26;       /* o: waiting for output space to write literal */
	var    CHECK = 27;     /* i: waiting for 32-bit check value */
	var    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
	var    DONE = 29;      /* finished check, done -- remain here until reset */
	var    BAD = 30;       /* got a data error -- remain here until reset */
	var    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
	var    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */

	/* ===========================================================================*/



	var ENOUGH_LENS = 852;
	var ENOUGH_DISTS = 592;
	//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

	var MAX_WBITS = 15;
	/* 32K LZ77 window */
	var DEF_WBITS = MAX_WBITS;


	function zswap32(q) {
	  return  (((q >>> 24) & 0xff) +
	          ((q >>> 8) & 0xff00) +
	          ((q & 0xff00) << 8) +
	          ((q & 0xff) << 24));
	}


	function InflateState() {
	  this.mode = 0;             /* current inflate mode */
	  this.last = false;          /* true if processing last block */
	  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
	  this.havedict = false;      /* true if dictionary provided */
	  this.flags = 0;             /* gzip header method and flags (0 if zlib) */
	  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
	  this.check = 0;             /* protected copy of check value */
	  this.total = 0;             /* protected copy of output count */
	  // TODO: may be {}
	  this.head = null;           /* where to save gzip header information */

	  /* sliding window */
	  this.wbits = 0;             /* log base 2 of requested window size */
	  this.wsize = 0;             /* window size or zero if not using window */
	  this.whave = 0;             /* valid bytes in the window */
	  this.wnext = 0;             /* window write index */
	  this.window = null;         /* allocated sliding window, if needed */

	  /* bit accumulator */
	  this.hold = 0;              /* input bit accumulator */
	  this.bits = 0;              /* number of bits in "in" */

	  /* for string and stored block copying */
	  this.length = 0;            /* literal or length of data to copy */
	  this.offset = 0;            /* distance back to copy string from */

	  /* for table and code decoding */
	  this.extra = 0;             /* extra bits needed */

	  /* fixed and dynamic code tables */
	  this.lencode = null;          /* starting table for length/literal codes */
	  this.distcode = null;         /* starting table for distance codes */
	  this.lenbits = 0;           /* index bits for lencode */
	  this.distbits = 0;          /* index bits for distcode */

	  /* dynamic table building */
	  this.ncode = 0;             /* number of code length code lengths */
	  this.nlen = 0;              /* number of length code lengths */
	  this.ndist = 0;             /* number of distance code lengths */
	  this.have = 0;              /* number of code lengths in lens[] */
	  this.next = null;              /* next available space in codes[] */

	  this.lens = new common.Buf16(320); /* temporary storage for code lengths */
	  this.work = new common.Buf16(288); /* work area for code table building */

	  /*
	   because we don't have pointers in js, we use lencode and distcode directly
	   as buffers so we don't need codes
	  */
	  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
	  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
	  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
	  this.sane = 0;                   /* if false, allow invalid distance too far */
	  this.back = 0;                   /* bits back of last unprocessed length/lit */
	  this.was = 0;                    /* initial length of match */
	}

	function inflateResetKeep(strm) {
	  var state;

	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;
	  strm.total_in = strm.total_out = state.total = 0;
	  strm.msg = ''; /*Z_NULL*/
	  if (state.wrap) {       /* to support ill-conceived Java test suite */
	    strm.adler = state.wrap & 1;
	  }
	  state.mode = HEAD;
	  state.last = 0;
	  state.havedict = 0;
	  state.dmax = 32768;
	  state.head = null/*Z_NULL*/;
	  state.hold = 0;
	  state.bits = 0;
	  //state.lencode = state.distcode = state.next = state.codes;
	  state.lencode = state.lendyn = new common.Buf32(ENOUGH_LENS);
	  state.distcode = state.distdyn = new common.Buf32(ENOUGH_DISTS);

	  state.sane = 1;
	  state.back = -1;
	  //Tracev((stderr, "inflate: reset\n"));
	  return Z_OK;
	}

	function inflateReset(strm) {
	  var state;

	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;
	  state.wsize = 0;
	  state.whave = 0;
	  state.wnext = 0;
	  return inflateResetKeep(strm);

	}

	function inflateReset2(strm, windowBits) {
	  var wrap;
	  var state;

	  /* get the state */
	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;

	  /* extract wrap request from windowBits parameter */
	  if (windowBits < 0) {
	    wrap = 0;
	    windowBits = -windowBits;
	  }
	  else {
	    wrap = (windowBits >> 4) + 1;
	    if (windowBits < 48) {
	      windowBits &= 15;
	    }
	  }

	  /* set number of window bits, free window if different */
	  if (windowBits && (windowBits < 8 || windowBits > 15)) {
	    return Z_STREAM_ERROR;
	  }
	  if (state.window !== null && state.wbits !== windowBits) {
	    state.window = null;
	  }

	  /* update state and reset the rest of it */
	  state.wrap = wrap;
	  state.wbits = windowBits;
	  return inflateReset(strm);
	}

	function inflateInit2(strm, windowBits) {
	  var ret;
	  var state;

	  if (!strm) { return Z_STREAM_ERROR; }
	  //strm.msg = Z_NULL;                 /* in case we return an error */

	  state = new InflateState();

	  //if (state === Z_NULL) return Z_MEM_ERROR;
	  //Tracev((stderr, "inflate: allocated\n"));
	  strm.state = state;
	  state.window = null/*Z_NULL*/;
	  ret = inflateReset2(strm, windowBits);
	  if (ret !== Z_OK) {
	    strm.state = null/*Z_NULL*/;
	  }
	  return ret;
	}

	function inflateInit(strm) {
	  return inflateInit2(strm, DEF_WBITS);
	}


	/*
	 Return state with length and distance decoding tables and index sizes set to
	 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
	 If BUILDFIXED is defined, then instead this routine builds the tables the
	 first time it's called, and returns those tables the first time and
	 thereafter.  This reduces the size of the code by about 2K bytes, in
	 exchange for a little execution time.  However, BUILDFIXED should not be
	 used for threaded applications, since the rewriting of the tables and virgin
	 may not be thread-safe.
	 */
	var virgin = true;

	var lenfix, distfix; // We have no pointers in JS, so keep tables separate

	function fixedtables(state) {
	  /* build fixed huffman tables if first call (may not be thread safe) */
	  if (virgin) {
	    var sym;

	    lenfix = new common.Buf32(512);
	    distfix = new common.Buf32(32);

	    /* literal/length table */
	    sym = 0;
	    while (sym < 144) { state.lens[sym++] = 8; }
	    while (sym < 256) { state.lens[sym++] = 9; }
	    while (sym < 280) { state.lens[sym++] = 7; }
	    while (sym < 288) { state.lens[sym++] = 8; }

	    inftrees(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });

	    /* distance table */
	    sym = 0;
	    while (sym < 32) { state.lens[sym++] = 5; }

	    inftrees(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });

	    /* do this just once */
	    virgin = false;
	  }

	  state.lencode = lenfix;
	  state.lenbits = 9;
	  state.distcode = distfix;
	  state.distbits = 5;
	}


	/*
	 Update the window with the last wsize (normally 32K) bytes written before
	 returning.  If window does not exist yet, create it.  This is only called
	 when a window is already in use, or when output has been written during this
	 inflate call, but the end of the deflate stream has not been reached yet.
	 It is also called to create a window for dictionary data when a dictionary
	 is loaded.

	 Providing output buffers larger than 32K to inflate() should provide a speed
	 advantage, since only the last 32K of output is copied to the sliding window
	 upon return from inflate(), and since all distances after the first 32K of
	 output will fall in the output data, making match copies simpler and faster.
	 The advantage may be dependent on the size of the processor's data caches.
	 */
	function updatewindow(strm, src, end, copy) {
	  var dist;
	  var state = strm.state;

	  /* if it hasn't been done already, allocate space for the window */
	  if (state.window === null) {
	    state.wsize = 1 << state.wbits;
	    state.wnext = 0;
	    state.whave = 0;

	    state.window = new common.Buf8(state.wsize);
	  }

	  /* copy state->wsize or less output bytes into the circular window */
	  if (copy >= state.wsize) {
	    common.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
	    state.wnext = 0;
	    state.whave = state.wsize;
	  }
	  else {
	    dist = state.wsize - state.wnext;
	    if (dist > copy) {
	      dist = copy;
	    }
	    //zmemcpy(state->window + state->wnext, end - copy, dist);
	    common.arraySet(state.window, src, end - copy, dist, state.wnext);
	    copy -= dist;
	    if (copy) {
	      //zmemcpy(state->window, end - copy, copy);
	      common.arraySet(state.window, src, end - copy, copy, 0);
	      state.wnext = copy;
	      state.whave = state.wsize;
	    }
	    else {
	      state.wnext += dist;
	      if (state.wnext === state.wsize) { state.wnext = 0; }
	      if (state.whave < state.wsize) { state.whave += dist; }
	    }
	  }
	  return 0;
	}

	function inflate$1(strm, flush) {
	  var state;
	  var input, output;          // input/output buffers
	  var next;                   /* next input INDEX */
	  var put;                    /* next output INDEX */
	  var have, left;             /* available input and output */
	  var hold;                   /* bit buffer */
	  var bits;                   /* bits in bit buffer */
	  var _in, _out;              /* save starting available input and output */
	  var copy;                   /* number of stored or match bytes to copy */
	  var from;                   /* where to copy match bytes from */
	  var from_source;
	  var here = 0;               /* current decoding table entry */
	  var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
	  //var last;                   /* parent table entry */
	  var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
	  var len;                    /* length to copy for repeats, bits to drop */
	  var ret;                    /* return code */
	  var hbuf = new common.Buf8(4);    /* buffer for gzip header crc calculation */
	  var opts;

	  var n; // temporary var for NEED_BITS

	  var order = /* permutation of code lengths */
	    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];


	  if (!strm || !strm.state || !strm.output ||
	      (!strm.input && strm.avail_in !== 0)) {
	    return Z_STREAM_ERROR;
	  }

	  state = strm.state;
	  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


	  //--- LOAD() ---
	  put = strm.next_out;
	  output = strm.output;
	  left = strm.avail_out;
	  next = strm.next_in;
	  input = strm.input;
	  have = strm.avail_in;
	  hold = state.hold;
	  bits = state.bits;
	  //---

	  _in = have;
	  _out = left;
	  ret = Z_OK;

	  inf_leave: // goto emulation
	  for (;;) {
	    switch (state.mode) {
	      case HEAD:
	        if (state.wrap === 0) {
	          state.mode = TYPEDO;
	          break;
	        }
	        //=== NEEDBITS(16);
	        while (bits < 16) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
	          state.check = 0/*crc32(0L, Z_NULL, 0)*/;
	          //=== CRC2(state.check, hold);
	          hbuf[0] = hold & 0xff;
	          hbuf[1] = (hold >>> 8) & 0xff;
	          state.check = crc32_1(state.check, hbuf, 2, 0);
	          //===//

	          //=== INITBITS();
	          hold = 0;
	          bits = 0;
	          //===//
	          state.mode = FLAGS;
	          break;
	        }
	        state.flags = 0;           /* expect zlib header */
	        if (state.head) {
	          state.head.done = false;
	        }
	        if (!(state.wrap & 1) ||   /* check if zlib header allowed */
	          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
	          strm.msg = 'incorrect header check';
	          state.mode = BAD;
	          break;
	        }
	        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
	          strm.msg = 'unknown compression method';
	          state.mode = BAD;
	          break;
	        }
	        //--- DROPBITS(4) ---//
	        hold >>>= 4;
	        bits -= 4;
	        //---//
	        len = (hold & 0x0f)/*BITS(4)*/ + 8;
	        if (state.wbits === 0) {
	          state.wbits = len;
	        }
	        else if (len > state.wbits) {
	          strm.msg = 'invalid window size';
	          state.mode = BAD;
	          break;
	        }
	        state.dmax = 1 << len;
	        //Tracev((stderr, "inflate:   zlib header ok\n"));
	        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
	        state.mode = hold & 0x200 ? DICTID : TYPE;
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        break;
	      case FLAGS:
	        //=== NEEDBITS(16); */
	        while (bits < 16) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.flags = hold;
	        if ((state.flags & 0xff) !== Z_DEFLATED) {
	          strm.msg = 'unknown compression method';
	          state.mode = BAD;
	          break;
	        }
	        if (state.flags & 0xe000) {
	          strm.msg = 'unknown header flags set';
	          state.mode = BAD;
	          break;
	        }
	        if (state.head) {
	          state.head.text = ((hold >> 8) & 1);
	        }
	        if (state.flags & 0x0200) {
	          //=== CRC2(state.check, hold);
	          hbuf[0] = hold & 0xff;
	          hbuf[1] = (hold >>> 8) & 0xff;
	          state.check = crc32_1(state.check, hbuf, 2, 0);
	          //===//
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        state.mode = TIME;
	        /* falls through */
	      case TIME:
	        //=== NEEDBITS(32); */
	        while (bits < 32) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        if (state.head) {
	          state.head.time = hold;
	        }
	        if (state.flags & 0x0200) {
	          //=== CRC4(state.check, hold)
	          hbuf[0] = hold & 0xff;
	          hbuf[1] = (hold >>> 8) & 0xff;
	          hbuf[2] = (hold >>> 16) & 0xff;
	          hbuf[3] = (hold >>> 24) & 0xff;
	          state.check = crc32_1(state.check, hbuf, 4, 0);
	          //===
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        state.mode = OS;
	        /* falls through */
	      case OS:
	        //=== NEEDBITS(16); */
	        while (bits < 16) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        if (state.head) {
	          state.head.xflags = (hold & 0xff);
	          state.head.os = (hold >> 8);
	        }
	        if (state.flags & 0x0200) {
	          //=== CRC2(state.check, hold);
	          hbuf[0] = hold & 0xff;
	          hbuf[1] = (hold >>> 8) & 0xff;
	          state.check = crc32_1(state.check, hbuf, 2, 0);
	          //===//
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        state.mode = EXLEN;
	        /* falls through */
	      case EXLEN:
	        if (state.flags & 0x0400) {
	          //=== NEEDBITS(16); */
	          while (bits < 16) {
	            if (have === 0) { break inf_leave; }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	          }
	          //===//
	          state.length = hold;
	          if (state.head) {
	            state.head.extra_len = hold;
	          }
	          if (state.flags & 0x0200) {
	            //=== CRC2(state.check, hold);
	            hbuf[0] = hold & 0xff;
	            hbuf[1] = (hold >>> 8) & 0xff;
	            state.check = crc32_1(state.check, hbuf, 2, 0);
	            //===//
	          }
	          //=== INITBITS();
	          hold = 0;
	          bits = 0;
	          //===//
	        }
	        else if (state.head) {
	          state.head.extra = null/*Z_NULL*/;
	        }
	        state.mode = EXTRA;
	        /* falls through */
	      case EXTRA:
	        if (state.flags & 0x0400) {
	          copy = state.length;
	          if (copy > have) { copy = have; }
	          if (copy) {
	            if (state.head) {
	              len = state.head.extra_len - state.length;
	              if (!state.head.extra) {
	                // Use untyped array for more convenient processing later
	                state.head.extra = new Array(state.head.extra_len);
	              }
	              common.arraySet(
	                state.head.extra,
	                input,
	                next,
	                // extra field is limited to 65536 bytes
	                // - no need for additional size check
	                copy,
	                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
	                len
	              );
	              //zmemcpy(state.head.extra + len, next,
	              //        len + copy > state.head.extra_max ?
	              //        state.head.extra_max - len : copy);
	            }
	            if (state.flags & 0x0200) {
	              state.check = crc32_1(state.check, input, copy, next);
	            }
	            have -= copy;
	            next += copy;
	            state.length -= copy;
	          }
	          if (state.length) { break inf_leave; }
	        }
	        state.length = 0;
	        state.mode = NAME;
	        /* falls through */
	      case NAME:
	        if (state.flags & 0x0800) {
	          if (have === 0) { break inf_leave; }
	          copy = 0;
	          do {
	            // TODO: 2 or 1 bytes?
	            len = input[next + copy++];
	            /* use constant limit because in js we should not preallocate memory */
	            if (state.head && len &&
	                (state.length < 65536 /*state.head.name_max*/)) {
	              state.head.name += String.fromCharCode(len);
	            }
	          } while (len && copy < have);

	          if (state.flags & 0x0200) {
	            state.check = crc32_1(state.check, input, copy, next);
	          }
	          have -= copy;
	          next += copy;
	          if (len) { break inf_leave; }
	        }
	        else if (state.head) {
	          state.head.name = null;
	        }
	        state.length = 0;
	        state.mode = COMMENT;
	        /* falls through */
	      case COMMENT:
	        if (state.flags & 0x1000) {
	          if (have === 0) { break inf_leave; }
	          copy = 0;
	          do {
	            len = input[next + copy++];
	            /* use constant limit because in js we should not preallocate memory */
	            if (state.head && len &&
	                (state.length < 65536 /*state.head.comm_max*/)) {
	              state.head.comment += String.fromCharCode(len);
	            }
	          } while (len && copy < have);
	          if (state.flags & 0x0200) {
	            state.check = crc32_1(state.check, input, copy, next);
	          }
	          have -= copy;
	          next += copy;
	          if (len) { break inf_leave; }
	        }
	        else if (state.head) {
	          state.head.comment = null;
	        }
	        state.mode = HCRC;
	        /* falls through */
	      case HCRC:
	        if (state.flags & 0x0200) {
	          //=== NEEDBITS(16); */
	          while (bits < 16) {
	            if (have === 0) { break inf_leave; }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	          }
	          //===//
	          if (hold !== (state.check & 0xffff)) {
	            strm.msg = 'header crc mismatch';
	            state.mode = BAD;
	            break;
	          }
	          //=== INITBITS();
	          hold = 0;
	          bits = 0;
	          //===//
	        }
	        if (state.head) {
	          state.head.hcrc = ((state.flags >> 9) & 1);
	          state.head.done = true;
	        }
	        strm.adler = state.check = 0;
	        state.mode = TYPE;
	        break;
	      case DICTID:
	        //=== NEEDBITS(32); */
	        while (bits < 32) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        strm.adler = state.check = zswap32(hold);
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        state.mode = DICT;
	        /* falls through */
	      case DICT:
	        if (state.havedict === 0) {
	          //--- RESTORE() ---
	          strm.next_out = put;
	          strm.avail_out = left;
	          strm.next_in = next;
	          strm.avail_in = have;
	          state.hold = hold;
	          state.bits = bits;
	          //---
	          return Z_NEED_DICT;
	        }
	        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
	        state.mode = TYPE;
	        /* falls through */
	      case TYPE:
	        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
	        /* falls through */
	      case TYPEDO:
	        if (state.last) {
	          //--- BYTEBITS() ---//
	          hold >>>= bits & 7;
	          bits -= bits & 7;
	          //---//
	          state.mode = CHECK;
	          break;
	        }
	        //=== NEEDBITS(3); */
	        while (bits < 3) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.last = (hold & 0x01)/*BITS(1)*/;
	        //--- DROPBITS(1) ---//
	        hold >>>= 1;
	        bits -= 1;
	        //---//

	        switch ((hold & 0x03)/*BITS(2)*/) {
	          case 0:                             /* stored block */
	            //Tracev((stderr, "inflate:     stored block%s\n",
	            //        state.last ? " (last)" : ""));
	            state.mode = STORED;
	            break;
	          case 1:                             /* fixed block */
	            fixedtables(state);
	            //Tracev((stderr, "inflate:     fixed codes block%s\n",
	            //        state.last ? " (last)" : ""));
	            state.mode = LEN_;             /* decode codes */
	            if (flush === Z_TREES) {
	              //--- DROPBITS(2) ---//
	              hold >>>= 2;
	              bits -= 2;
	              //---//
	              break inf_leave;
	            }
	            break;
	          case 2:                             /* dynamic block */
	            //Tracev((stderr, "inflate:     dynamic codes block%s\n",
	            //        state.last ? " (last)" : ""));
	            state.mode = TABLE;
	            break;
	          case 3:
	            strm.msg = 'invalid block type';
	            state.mode = BAD;
	        }
	        //--- DROPBITS(2) ---//
	        hold >>>= 2;
	        bits -= 2;
	        //---//
	        break;
	      case STORED:
	        //--- BYTEBITS() ---// /* go to byte boundary */
	        hold >>>= bits & 7;
	        bits -= bits & 7;
	        //---//
	        //=== NEEDBITS(32); */
	        while (bits < 32) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
	          strm.msg = 'invalid stored block lengths';
	          state.mode = BAD;
	          break;
	        }
	        state.length = hold & 0xffff;
	        //Tracev((stderr, "inflate:       stored length %u\n",
	        //        state.length));
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        state.mode = COPY_;
	        if (flush === Z_TREES) { break inf_leave; }
	        /* falls through */
	      case COPY_:
	        state.mode = COPY;
	        /* falls through */
	      case COPY:
	        copy = state.length;
	        if (copy) {
	          if (copy > have) { copy = have; }
	          if (copy > left) { copy = left; }
	          if (copy === 0) { break inf_leave; }
	          //--- zmemcpy(put, next, copy); ---
	          common.arraySet(output, input, next, copy, put);
	          //---//
	          have -= copy;
	          next += copy;
	          left -= copy;
	          put += copy;
	          state.length -= copy;
	          break;
	        }
	        //Tracev((stderr, "inflate:       stored end\n"));
	        state.mode = TYPE;
	        break;
	      case TABLE:
	        //=== NEEDBITS(14); */
	        while (bits < 14) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
	        //--- DROPBITS(5) ---//
	        hold >>>= 5;
	        bits -= 5;
	        //---//
	        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
	        //--- DROPBITS(5) ---//
	        hold >>>= 5;
	        bits -= 5;
	        //---//
	        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
	        //--- DROPBITS(4) ---//
	        hold >>>= 4;
	        bits -= 4;
	        //---//
	//#ifndef PKZIP_BUG_WORKAROUND
	        if (state.nlen > 286 || state.ndist > 30) {
	          strm.msg = 'too many length or distance symbols';
	          state.mode = BAD;
	          break;
	        }
	//#endif
	        //Tracev((stderr, "inflate:       table sizes ok\n"));
	        state.have = 0;
	        state.mode = LENLENS;
	        /* falls through */
	      case LENLENS:
	        while (state.have < state.ncode) {
	          //=== NEEDBITS(3);
	          while (bits < 3) {
	            if (have === 0) { break inf_leave; }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	          }
	          //===//
	          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
	          //--- DROPBITS(3) ---//
	          hold >>>= 3;
	          bits -= 3;
	          //---//
	        }
	        while (state.have < 19) {
	          state.lens[order[state.have++]] = 0;
	        }
	        // We have separate tables & no pointers. 2 commented lines below not needed.
	        //state.next = state.codes;
	        //state.lencode = state.next;
	        // Switch to use dynamic table
	        state.lencode = state.lendyn;
	        state.lenbits = 7;

	        opts = { bits: state.lenbits };
	        ret = inftrees(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
	        state.lenbits = opts.bits;

	        if (ret) {
	          strm.msg = 'invalid code lengths set';
	          state.mode = BAD;
	          break;
	        }
	        //Tracev((stderr, "inflate:       code lengths ok\n"));
	        state.have = 0;
	        state.mode = CODELENS;
	        /* falls through */
	      case CODELENS:
	        while (state.have < state.nlen + state.ndist) {
	          for (;;) {
	            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
	            here_bits = here >>> 24;
	            here_op = (here >>> 16) & 0xff;
	            here_val = here & 0xffff;

	            if ((here_bits) <= bits) { break; }
	            //--- PULLBYTE() ---//
	            if (have === 0) { break inf_leave; }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	            //---//
	          }
	          if (here_val < 16) {
	            //--- DROPBITS(here.bits) ---//
	            hold >>>= here_bits;
	            bits -= here_bits;
	            //---//
	            state.lens[state.have++] = here_val;
	          }
	          else {
	            if (here_val === 16) {
	              //=== NEEDBITS(here.bits + 2);
	              n = here_bits + 2;
	              while (bits < n) {
	                if (have === 0) { break inf_leave; }
	                have--;
	                hold += input[next++] << bits;
	                bits += 8;
	              }
	              //===//
	              //--- DROPBITS(here.bits) ---//
	              hold >>>= here_bits;
	              bits -= here_bits;
	              //---//
	              if (state.have === 0) {
	                strm.msg = 'invalid bit length repeat';
	                state.mode = BAD;
	                break;
	              }
	              len = state.lens[state.have - 1];
	              copy = 3 + (hold & 0x03);//BITS(2);
	              //--- DROPBITS(2) ---//
	              hold >>>= 2;
	              bits -= 2;
	              //---//
	            }
	            else if (here_val === 17) {
	              //=== NEEDBITS(here.bits + 3);
	              n = here_bits + 3;
	              while (bits < n) {
	                if (have === 0) { break inf_leave; }
	                have--;
	                hold += input[next++] << bits;
	                bits += 8;
	              }
	              //===//
	              //--- DROPBITS(here.bits) ---//
	              hold >>>= here_bits;
	              bits -= here_bits;
	              //---//
	              len = 0;
	              copy = 3 + (hold & 0x07);//BITS(3);
	              //--- DROPBITS(3) ---//
	              hold >>>= 3;
	              bits -= 3;
	              //---//
	            }
	            else {
	              //=== NEEDBITS(here.bits + 7);
	              n = here_bits + 7;
	              while (bits < n) {
	                if (have === 0) { break inf_leave; }
	                have--;
	                hold += input[next++] << bits;
	                bits += 8;
	              }
	              //===//
	              //--- DROPBITS(here.bits) ---//
	              hold >>>= here_bits;
	              bits -= here_bits;
	              //---//
	              len = 0;
	              copy = 11 + (hold & 0x7f);//BITS(7);
	              //--- DROPBITS(7) ---//
	              hold >>>= 7;
	              bits -= 7;
	              //---//
	            }
	            if (state.have + copy > state.nlen + state.ndist) {
	              strm.msg = 'invalid bit length repeat';
	              state.mode = BAD;
	              break;
	            }
	            while (copy--) {
	              state.lens[state.have++] = len;
	            }
	          }
	        }

	        /* handle error breaks in while */
	        if (state.mode === BAD) { break; }

	        /* check for end-of-block code (better have one) */
	        if (state.lens[256] === 0) {
	          strm.msg = 'invalid code -- missing end-of-block';
	          state.mode = BAD;
	          break;
	        }

	        /* build code tables -- note: do not change the lenbits or distbits
	           values here (9 and 6) without reading the comments in inftrees.h
	           concerning the ENOUGH constants, which depend on those values */
	        state.lenbits = 9;

	        opts = { bits: state.lenbits };
	        ret = inftrees(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
	        // We have separate tables & no pointers. 2 commented lines below not needed.
	        // state.next_index = opts.table_index;
	        state.lenbits = opts.bits;
	        // state.lencode = state.next;

	        if (ret) {
	          strm.msg = 'invalid literal/lengths set';
	          state.mode = BAD;
	          break;
	        }

	        state.distbits = 6;
	        //state.distcode.copy(state.codes);
	        // Switch to use dynamic table
	        state.distcode = state.distdyn;
	        opts = { bits: state.distbits };
	        ret = inftrees(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
	        // We have separate tables & no pointers. 2 commented lines below not needed.
	        // state.next_index = opts.table_index;
	        state.distbits = opts.bits;
	        // state.distcode = state.next;

	        if (ret) {
	          strm.msg = 'invalid distances set';
	          state.mode = BAD;
	          break;
	        }
	        //Tracev((stderr, 'inflate:       codes ok\n'));
	        state.mode = LEN_;
	        if (flush === Z_TREES) { break inf_leave; }
	        /* falls through */
	      case LEN_:
	        state.mode = LEN;
	        /* falls through */
	      case LEN:
	        if (have >= 6 && left >= 258) {
	          //--- RESTORE() ---
	          strm.next_out = put;
	          strm.avail_out = left;
	          strm.next_in = next;
	          strm.avail_in = have;
	          state.hold = hold;
	          state.bits = bits;
	          //---
	          inffast(strm, _out);
	          //--- LOAD() ---
	          put = strm.next_out;
	          output = strm.output;
	          left = strm.avail_out;
	          next = strm.next_in;
	          input = strm.input;
	          have = strm.avail_in;
	          hold = state.hold;
	          bits = state.bits;
	          //---

	          if (state.mode === TYPE) {
	            state.back = -1;
	          }
	          break;
	        }
	        state.back = 0;
	        for (;;) {
	          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
	          here_bits = here >>> 24;
	          here_op = (here >>> 16) & 0xff;
	          here_val = here & 0xffff;

	          if (here_bits <= bits) { break; }
	          //--- PULLBYTE() ---//
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	          //---//
	        }
	        if (here_op && (here_op & 0xf0) === 0) {
	          last_bits = here_bits;
	          last_op = here_op;
	          last_val = here_val;
	          for (;;) {
	            here = state.lencode[last_val +
	                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
	            here_bits = here >>> 24;
	            here_op = (here >>> 16) & 0xff;
	            here_val = here & 0xffff;

	            if ((last_bits + here_bits) <= bits) { break; }
	            //--- PULLBYTE() ---//
	            if (have === 0) { break inf_leave; }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	            //---//
	          }
	          //--- DROPBITS(last.bits) ---//
	          hold >>>= last_bits;
	          bits -= last_bits;
	          //---//
	          state.back += last_bits;
	        }
	        //--- DROPBITS(here.bits) ---//
	        hold >>>= here_bits;
	        bits -= here_bits;
	        //---//
	        state.back += here_bits;
	        state.length = here_val;
	        if (here_op === 0) {
	          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
	          //        "inflate:         literal '%c'\n" :
	          //        "inflate:         literal 0x%02x\n", here.val));
	          state.mode = LIT;
	          break;
	        }
	        if (here_op & 32) {
	          //Tracevv((stderr, "inflate:         end of block\n"));
	          state.back = -1;
	          state.mode = TYPE;
	          break;
	        }
	        if (here_op & 64) {
	          strm.msg = 'invalid literal/length code';
	          state.mode = BAD;
	          break;
	        }
	        state.extra = here_op & 15;
	        state.mode = LENEXT;
	        /* falls through */
	      case LENEXT:
	        if (state.extra) {
	          //=== NEEDBITS(state.extra);
	          n = state.extra;
	          while (bits < n) {
	            if (have === 0) { break inf_leave; }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	          }
	          //===//
	          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
	          //--- DROPBITS(state.extra) ---//
	          hold >>>= state.extra;
	          bits -= state.extra;
	          //---//
	          state.back += state.extra;
	        }
	        //Tracevv((stderr, "inflate:         length %u\n", state.length));
	        state.was = state.length;
	        state.mode = DIST;
	        /* falls through */
	      case DIST:
	        for (;;) {
	          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
	          here_bits = here >>> 24;
	          here_op = (here >>> 16) & 0xff;
	          here_val = here & 0xffff;

	          if ((here_bits) <= bits) { break; }
	          //--- PULLBYTE() ---//
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	          //---//
	        }
	        if ((here_op & 0xf0) === 0) {
	          last_bits = here_bits;
	          last_op = here_op;
	          last_val = here_val;
	          for (;;) {
	            here = state.distcode[last_val +
	                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
	            here_bits = here >>> 24;
	            here_op = (here >>> 16) & 0xff;
	            here_val = here & 0xffff;

	            if ((last_bits + here_bits) <= bits) { break; }
	            //--- PULLBYTE() ---//
	            if (have === 0) { break inf_leave; }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	            //---//
	          }
	          //--- DROPBITS(last.bits) ---//
	          hold >>>= last_bits;
	          bits -= last_bits;
	          //---//
	          state.back += last_bits;
	        }
	        //--- DROPBITS(here.bits) ---//
	        hold >>>= here_bits;
	        bits -= here_bits;
	        //---//
	        state.back += here_bits;
	        if (here_op & 64) {
	          strm.msg = 'invalid distance code';
	          state.mode = BAD;
	          break;
	        }
	        state.offset = here_val;
	        state.extra = (here_op) & 15;
	        state.mode = DISTEXT;
	        /* falls through */
	      case DISTEXT:
	        if (state.extra) {
	          //=== NEEDBITS(state.extra);
	          n = state.extra;
	          while (bits < n) {
	            if (have === 0) { break inf_leave; }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	          }
	          //===//
	          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
	          //--- DROPBITS(state.extra) ---//
	          hold >>>= state.extra;
	          bits -= state.extra;
	          //---//
	          state.back += state.extra;
	        }
	//#ifdef INFLATE_STRICT
	        if (state.offset > state.dmax) {
	          strm.msg = 'invalid distance too far back';
	          state.mode = BAD;
	          break;
	        }
	//#endif
	        //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
	        state.mode = MATCH;
	        /* falls through */
	      case MATCH:
	        if (left === 0) { break inf_leave; }
	        copy = _out - left;
	        if (state.offset > copy) {         /* copy from window */
	          copy = state.offset - copy;
	          if (copy > state.whave) {
	            if (state.sane) {
	              strm.msg = 'invalid distance too far back';
	              state.mode = BAD;
	              break;
	            }
	// (!) This block is disabled in zlib defaults,
	// don't enable it for binary compatibility
	//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
	//          Trace((stderr, "inflate.c too far\n"));
	//          copy -= state.whave;
	//          if (copy > state.length) { copy = state.length; }
	//          if (copy > left) { copy = left; }
	//          left -= copy;
	//          state.length -= copy;
	//          do {
	//            output[put++] = 0;
	//          } while (--copy);
	//          if (state.length === 0) { state.mode = LEN; }
	//          break;
	//#endif
	          }
	          if (copy > state.wnext) {
	            copy -= state.wnext;
	            from = state.wsize - copy;
	          }
	          else {
	            from = state.wnext - copy;
	          }
	          if (copy > state.length) { copy = state.length; }
	          from_source = state.window;
	        }
	        else {                              /* copy from output */
	          from_source = output;
	          from = put - state.offset;
	          copy = state.length;
	        }
	        if (copy > left) { copy = left; }
	        left -= copy;
	        state.length -= copy;
	        do {
	          output[put++] = from_source[from++];
	        } while (--copy);
	        if (state.length === 0) { state.mode = LEN; }
	        break;
	      case LIT:
	        if (left === 0) { break inf_leave; }
	        output[put++] = state.length;
	        left--;
	        state.mode = LEN;
	        break;
	      case CHECK:
	        if (state.wrap) {
	          //=== NEEDBITS(32);
	          while (bits < 32) {
	            if (have === 0) { break inf_leave; }
	            have--;
	            // Use '|' instead of '+' to make sure that result is signed
	            hold |= input[next++] << bits;
	            bits += 8;
	          }
	          //===//
	          _out -= left;
	          strm.total_out += _out;
	          state.total += _out;
	          if (_out) {
	            strm.adler = state.check =
	                /*UPDATE(state.check, put - _out, _out);*/
	                (state.flags ? crc32_1(state.check, output, _out, put - _out) : adler32_1(state.check, output, _out, put - _out));

	          }
	          _out = left;
	          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
	          if ((state.flags ? hold : zswap32(hold)) !== state.check) {
	            strm.msg = 'incorrect data check';
	            state.mode = BAD;
	            break;
	          }
	          //=== INITBITS();
	          hold = 0;
	          bits = 0;
	          //===//
	          //Tracev((stderr, "inflate:   check matches trailer\n"));
	        }
	        state.mode = LENGTH;
	        /* falls through */
	      case LENGTH:
	        if (state.wrap && state.flags) {
	          //=== NEEDBITS(32);
	          while (bits < 32) {
	            if (have === 0) { break inf_leave; }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	          }
	          //===//
	          if (hold !== (state.total & 0xffffffff)) {
	            strm.msg = 'incorrect length check';
	            state.mode = BAD;
	            break;
	          }
	          //=== INITBITS();
	          hold = 0;
	          bits = 0;
	          //===//
	          //Tracev((stderr, "inflate:   length matches trailer\n"));
	        }
	        state.mode = DONE;
	        /* falls through */
	      case DONE:
	        ret = Z_STREAM_END;
	        break inf_leave;
	      case BAD:
	        ret = Z_DATA_ERROR;
	        break inf_leave;
	      case MEM:
	        return Z_MEM_ERROR;
	      case SYNC:
	        /* falls through */
	      default:
	        return Z_STREAM_ERROR;
	    }
	  }

	  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

	  /*
	     Return from inflate(), updating the total counts and the check value.
	     If there was no progress during the inflate() call, return a buffer
	     error.  Call updatewindow() to create and/or update the window state.
	     Note: a memory error from inflate() is non-recoverable.
	   */

	  //--- RESTORE() ---
	  strm.next_out = put;
	  strm.avail_out = left;
	  strm.next_in = next;
	  strm.avail_in = have;
	  state.hold = hold;
	  state.bits = bits;
	  //---

	  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
	                      (state.mode < CHECK || flush !== Z_FINISH))) {
	    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) ;
	  }
	  _in -= strm.avail_in;
	  _out -= strm.avail_out;
	  strm.total_in += _in;
	  strm.total_out += _out;
	  state.total += _out;
	  if (state.wrap && _out) {
	    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
	      (state.flags ? crc32_1(state.check, output, _out, strm.next_out - _out) : adler32_1(state.check, output, _out, strm.next_out - _out));
	  }
	  strm.data_type = state.bits + (state.last ? 64 : 0) +
	                    (state.mode === TYPE ? 128 : 0) +
	                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
	  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
	    ret = Z_BUF_ERROR;
	  }
	  return ret;
	}

	function inflateEnd(strm) {

	  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
	    return Z_STREAM_ERROR;
	  }

	  var state = strm.state;
	  if (state.window) {
	    state.window = null;
	  }
	  strm.state = null;
	  return Z_OK;
	}

	function inflateGetHeader(strm, head) {
	  var state;

	  /* check state */
	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;
	  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }

	  /* save header structure */
	  state.head = head;
	  head.done = false;
	  return Z_OK;
	}

	function inflateSetDictionary(strm, dictionary) {
	  var dictLength = dictionary.length;

	  var state;
	  var dictid;
	  var ret;

	  /* check state */
	  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }
	  state = strm.state;

	  if (state.wrap !== 0 && state.mode !== DICT) {
	    return Z_STREAM_ERROR;
	  }

	  /* check for correct dictionary identifier */
	  if (state.mode === DICT) {
	    dictid = 1; /* adler32(0, null, 0)*/
	    /* dictid = adler32(dictid, dictionary, dictLength); */
	    dictid = adler32_1(dictid, dictionary, dictLength, 0);
	    if (dictid !== state.check) {
	      return Z_DATA_ERROR;
	    }
	  }
	  /* copy dictionary to window using updatewindow(), which will amend the
	   existing dictionary if appropriate */
	  ret = updatewindow(strm, dictionary, dictLength, dictLength);
	  if (ret) {
	    state.mode = MEM;
	    return Z_MEM_ERROR;
	  }
	  state.havedict = 1;
	  // Tracev((stderr, "inflate:   dictionary set\n"));
	  return Z_OK;
	}

	var inflateReset_1 = inflateReset;
	var inflateReset2_1 = inflateReset2;
	var inflateResetKeep_1 = inflateResetKeep;
	var inflateInit_1 = inflateInit;
	var inflateInit2_1 = inflateInit2;
	var inflate_2$1 = inflate$1;
	var inflateEnd_1 = inflateEnd;
	var inflateGetHeader_1 = inflateGetHeader;
	var inflateSetDictionary_1 = inflateSetDictionary;
	var inflateInfo = 'pako inflate (from Nodeca project)';

	/* Not implemented
	exports.inflateCopy = inflateCopy;
	exports.inflateGetDictionary = inflateGetDictionary;
	exports.inflateMark = inflateMark;
	exports.inflatePrime = inflatePrime;
	exports.inflateSync = inflateSync;
	exports.inflateSyncPoint = inflateSyncPoint;
	exports.inflateUndermine = inflateUndermine;
	*/

	var inflate_1$1 = {
		inflateReset: inflateReset_1,
		inflateReset2: inflateReset2_1,
		inflateResetKeep: inflateResetKeep_1,
		inflateInit: inflateInit_1,
		inflateInit2: inflateInit2_1,
		inflate: inflate_2$1,
		inflateEnd: inflateEnd_1,
		inflateGetHeader: inflateGetHeader_1,
		inflateSetDictionary: inflateSetDictionary_1,
		inflateInfo: inflateInfo
	};

	// (C) 1995-2013 Jean-loup Gailly and Mark Adler
	// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
	//
	// This software is provided 'as-is', without any express or implied
	// warranty. In no event will the authors be held liable for any damages
	// arising from the use of this software.
	//
	// Permission is granted to anyone to use this software for any purpose,
	// including commercial applications, and to alter it and redistribute it
	// freely, subject to the following restrictions:
	//
	// 1. The origin of this software must not be misrepresented; you must not
	//   claim that you wrote the original software. If you use this software
	//   in a product, an acknowledgment in the product documentation would be
	//   appreciated but is not required.
	// 2. Altered source versions must be plainly marked as such, and must not be
	//   misrepresented as being the original software.
	// 3. This notice may not be removed or altered from any source distribution.

	var constants$2 = {

	  /* Allowed flush values; see deflate() and inflate() below for details */
	  Z_NO_FLUSH:         0,
	  Z_PARTIAL_FLUSH:    1,
	  Z_SYNC_FLUSH:       2,
	  Z_FULL_FLUSH:       3,
	  Z_FINISH:           4,
	  Z_BLOCK:            5,
	  Z_TREES:            6,

	  /* Return codes for the compression/decompression functions. Negative values
	  * are errors, positive values are used for special but normal events.
	  */
	  Z_OK:               0,
	  Z_STREAM_END:       1,
	  Z_NEED_DICT:        2,
	  Z_ERRNO:           -1,
	  Z_STREAM_ERROR:    -2,
	  Z_DATA_ERROR:      -3,
	  //Z_MEM_ERROR:     -4,
	  Z_BUF_ERROR:       -5,
	  //Z_VERSION_ERROR: -6,

	  /* compression levels */
	  Z_NO_COMPRESSION:         0,
	  Z_BEST_SPEED:             1,
	  Z_BEST_COMPRESSION:       9,
	  Z_DEFAULT_COMPRESSION:   -1,


	  Z_FILTERED:               1,
	  Z_HUFFMAN_ONLY:           2,
	  Z_RLE:                    3,
	  Z_FIXED:                  4,
	  Z_DEFAULT_STRATEGY:       0,

	  /* Possible values of the data_type field (though see inflate()) */
	  Z_BINARY:                 0,
	  Z_TEXT:                   1,
	  //Z_ASCII:                1, // = Z_TEXT (deprecated)
	  Z_UNKNOWN:                2,

	  /* The deflate compression method */
	  Z_DEFLATED:               8
	  //Z_NULL:                 null // Use -1 or null inline, depending on var type
	};

	// (C) 1995-2013 Jean-loup Gailly and Mark Adler
	// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
	//
	// This software is provided 'as-is', without any express or implied
	// warranty. In no event will the authors be held liable for any damages
	// arising from the use of this software.
	//
	// Permission is granted to anyone to use this software for any purpose,
	// including commercial applications, and to alter it and redistribute it
	// freely, subject to the following restrictions:
	//
	// 1. The origin of this software must not be misrepresented; you must not
	//   claim that you wrote the original software. If you use this software
	//   in a product, an acknowledgment in the product documentation would be
	//   appreciated but is not required.
	// 2. Altered source versions must be plainly marked as such, and must not be
	//   misrepresented as being the original software.
	// 3. This notice may not be removed or altered from any source distribution.

	function GZheader() {
	  /* true if compressed data believed to be text */
	  this.text       = 0;
	  /* modification time */
	  this.time       = 0;
	  /* extra flags (not used when writing a gzip file) */
	  this.xflags     = 0;
	  /* operating system */
	  this.os         = 0;
	  /* pointer to extra field or Z_NULL if none */
	  this.extra      = null;
	  /* extra field length (valid if extra != Z_NULL) */
	  this.extra_len  = 0; // Actually, we don't need it in JS,
	                       // but leave for few code modifications

	  //
	  // Setup limits is not necessary because in js we should not preallocate memory
	  // for inflate use constant limit in 65536 bytes
	  //

	  /* space at extra (only when reading header) */
	  // this.extra_max  = 0;
	  /* pointer to zero-terminated file name or Z_NULL */
	  this.name       = '';
	  /* space at name (only when reading header) */
	  // this.name_max   = 0;
	  /* pointer to zero-terminated comment or Z_NULL */
	  this.comment    = '';
	  /* space at comment (only when reading header) */
	  // this.comm_max   = 0;
	  /* true if there was or will be a header crc */
	  this.hcrc       = 0;
	  /* true when done reading gzip header (not used when writing a gzip file) */
	  this.done       = false;
	}

	var gzheader = GZheader;

	var toString = Object.prototype.toString;

	/**
	 * class Inflate
	 *
	 * Generic JS-style wrapper for zlib calls. If you don't need
	 * streaming behaviour - use more simple functions: [[inflate]]
	 * and [[inflateRaw]].
	 **/

	/* internal
	 * inflate.chunks -> Array
	 *
	 * Chunks of output data, if [[Inflate#onData]] not overridden.
	 **/

	/**
	 * Inflate.result -> Uint8Array|Array|String
	 *
	 * Uncompressed result, generated by default [[Inflate#onData]]
	 * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
	 * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you
	 * push a chunk with explicit flush (call [[Inflate#push]] with
	 * `Z_SYNC_FLUSH` param).
	 **/

	/**
	 * Inflate.err -> Number
	 *
	 * Error code after inflate finished. 0 (Z_OK) on success.
	 * Should be checked if broken data possible.
	 **/

	/**
	 * Inflate.msg -> String
	 *
	 * Error message, if [[Inflate.err]] != 0
	 **/


	/**
	 * new Inflate(options)
	 * - options (Object): zlib inflate options.
	 *
	 * Creates new inflator instance with specified params. Throws exception
	 * on bad params. Supported options:
	 *
	 * - `windowBits`
	 * - `dictionary`
	 *
	 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
	 * for more information on these.
	 *
	 * Additional options, for internal needs:
	 *
	 * - `chunkSize` - size of generated data chunks (16K by default)
	 * - `raw` (Boolean) - do raw inflate
	 * - `to` (String) - if equal to 'string', then result will be converted
	 *   from utf8 to utf16 (javascript) string. When string output requested,
	 *   chunk length can differ from `chunkSize`, depending on content.
	 *
	 * By default, when no options set, autodetect deflate/gzip data format via
	 * wrapper header.
	 *
	 * ##### Example:
	 *
	 * ```javascript
	 * var pako = require('pako')
	 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
	 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
	 *
	 * var inflate = new pako.Inflate({ level: 3});
	 *
	 * inflate.push(chunk1, false);
	 * inflate.push(chunk2, true);  // true -> last chunk
	 *
	 * if (inflate.err) { throw new Error(inflate.err); }
	 *
	 * console.log(inflate.result);
	 * ```
	 **/
	function Inflate(options) {
	  if (!(this instanceof Inflate)) return new Inflate(options);

	  this.options = common.assign({
	    chunkSize: 16384,
	    windowBits: 0,
	    to: ''
	  }, options || {});

	  var opt = this.options;

	  // Force window size for `raw` data, if not set directly,
	  // because we have no header for autodetect.
	  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {
	    opt.windowBits = -opt.windowBits;
	    if (opt.windowBits === 0) { opt.windowBits = -15; }
	  }

	  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
	  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&
	      !(options && options.windowBits)) {
	    opt.windowBits += 32;
	  }

	  // Gzip header has no info about windows size, we can do autodetect only
	  // for deflate. So, if window size not set, force it to max when gzip possible
	  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {
	    // bit 3 (16) -> gzipped data
	    // bit 4 (32) -> autodetect gzip/deflate
	    if ((opt.windowBits & 15) === 0) {
	      opt.windowBits |= 15;
	    }
	  }

	  this.err    = 0;      // error code, if happens (0 = Z_OK)
	  this.msg    = '';     // error message
	  this.ended  = false;  // used to avoid multiple onEnd() calls
	  this.chunks = [];     // chunks of compressed data

	  this.strm   = new zstream();
	  this.strm.avail_out = 0;

	  var status  = inflate_1$1.inflateInit2(
	    this.strm,
	    opt.windowBits
	  );

	  if (status !== constants$2.Z_OK) {
	    throw new Error(messages[status]);
	  }

	  this.header = new gzheader();

	  inflate_1$1.inflateGetHeader(this.strm, this.header);

	  // Setup dictionary
	  if (opt.dictionary) {
	    // Convert data if needed
	    if (typeof opt.dictionary === 'string') {
	      opt.dictionary = strings.string2buf(opt.dictionary);
	    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {
	      opt.dictionary = new Uint8Array(opt.dictionary);
	    }
	    if (opt.raw) { //In raw mode we need to set the dictionary early
	      status = inflate_1$1.inflateSetDictionary(this.strm, opt.dictionary);
	      if (status !== constants$2.Z_OK) {
	        throw new Error(messages[status]);
	      }
	    }
	  }
	}

	/**
	 * Inflate#push(data[, mode]) -> Boolean
	 * - data (Uint8Array|Array|ArrayBuffer|String): input data
	 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
	 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.
	 *
	 * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
	 * new output chunks. Returns `true` on success. The last data block must have
	 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
	 * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you
	 * can use mode Z_SYNC_FLUSH, keeping the decompression context.
	 *
	 * On fail call [[Inflate#onEnd]] with error code and return false.
	 *
	 * We strongly recommend to use `Uint8Array` on input for best speed (output
	 * format is detected automatically). Also, don't skip last param and always
	 * use the same type in your code (boolean or number). That will improve JS speed.
	 *
	 * For regular `Array`-s make sure all elements are [0..255].
	 *
	 * ##### Example
	 *
	 * ```javascript
	 * push(chunk, false); // push one of data chunks
	 * ...
	 * push(chunk, true);  // push last chunk
	 * ```
	 **/
	Inflate.prototype.push = function (data, mode) {
	  var strm = this.strm;
	  var chunkSize = this.options.chunkSize;
	  var dictionary = this.options.dictionary;
	  var status, _mode;
	  var next_out_utf8, tail, utf8str;

	  // Flag to properly process Z_BUF_ERROR on testing inflate call
	  // when we check that all output data was flushed.
	  var allowBufError = false;

	  if (this.ended) { return false; }
	  _mode = (mode === ~~mode) ? mode : ((mode === true) ? constants$2.Z_FINISH : constants$2.Z_NO_FLUSH);

	  // Convert data if needed
	  if (typeof data === 'string') {
	    // Only binary strings can be decompressed on practice
	    strm.input = strings.binstring2buf(data);
	  } else if (toString.call(data) === '[object ArrayBuffer]') {
	    strm.input = new Uint8Array(data);
	  } else {
	    strm.input = data;
	  }

	  strm.next_in = 0;
	  strm.avail_in = strm.input.length;

	  do {
	    if (strm.avail_out === 0) {
	      strm.output = new common.Buf8(chunkSize);
	      strm.next_out = 0;
	      strm.avail_out = chunkSize;
	    }

	    status = inflate_1$1.inflate(strm, constants$2.Z_NO_FLUSH);    /* no bad return value */

	    if (status === constants$2.Z_NEED_DICT && dictionary) {
	      status = inflate_1$1.inflateSetDictionary(this.strm, dictionary);
	    }

	    if (status === constants$2.Z_BUF_ERROR && allowBufError === true) {
	      status = constants$2.Z_OK;
	      allowBufError = false;
	    }

	    if (status !== constants$2.Z_STREAM_END && status !== constants$2.Z_OK) {
	      this.onEnd(status);
	      this.ended = true;
	      return false;
	    }

	    if (strm.next_out) {
	      if (strm.avail_out === 0 || status === constants$2.Z_STREAM_END || (strm.avail_in === 0 && (_mode === constants$2.Z_FINISH || _mode === constants$2.Z_SYNC_FLUSH))) {

	        if (this.options.to === 'string') {

	          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);

	          tail = strm.next_out - next_out_utf8;
	          utf8str = strings.buf2string(strm.output, next_out_utf8);

	          // move tail
	          strm.next_out = tail;
	          strm.avail_out = chunkSize - tail;
	          if (tail) { common.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }

	          this.onData(utf8str);

	        } else {
	          this.onData(common.shrinkBuf(strm.output, strm.next_out));
	        }
	      }
	    }

	    // When no more input data, we should check that internal inflate buffers
	    // are flushed. The only way to do it when avail_out = 0 - run one more
	    // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.
	    // Here we set flag to process this error properly.
	    //
	    // NOTE. Deflate does not return error in this case and does not needs such
	    // logic.
	    if (strm.avail_in === 0 && strm.avail_out === 0) {
	      allowBufError = true;
	    }

	  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== constants$2.Z_STREAM_END);

	  if (status === constants$2.Z_STREAM_END) {
	    _mode = constants$2.Z_FINISH;
	  }

	  // Finalize on the last chunk.
	  if (_mode === constants$2.Z_FINISH) {
	    status = inflate_1$1.inflateEnd(this.strm);
	    this.onEnd(status);
	    this.ended = true;
	    return status === constants$2.Z_OK;
	  }

	  // callback interim results if Z_SYNC_FLUSH.
	  if (_mode === constants$2.Z_SYNC_FLUSH) {
	    this.onEnd(constants$2.Z_OK);
	    strm.avail_out = 0;
	    return true;
	  }

	  return true;
	};


	/**
	 * Inflate#onData(chunk) -> Void
	 * - chunk (Uint8Array|Array|String): output data. Type of array depends
	 *   on js engine support. When string output requested, each chunk
	 *   will be string.
	 *
	 * By default, stores data blocks in `chunks[]` property and glue
	 * those in `onEnd`. Override this handler, if you need another behaviour.
	 **/
	Inflate.prototype.onData = function (chunk) {
	  this.chunks.push(chunk);
	};


	/**
	 * Inflate#onEnd(status) -> Void
	 * - status (Number): inflate status. 0 (Z_OK) on success,
	 *   other if not.
	 *
	 * Called either after you tell inflate that the input stream is
	 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
	 * or if an error happened. By default - join collected chunks,
	 * free memory and fill `results` / `err` properties.
	 **/
	Inflate.prototype.onEnd = function (status) {
	  // On success - join
	  if (status === constants$2.Z_OK) {
	    if (this.options.to === 'string') {
	      // Glue & convert here, until we teach pako to send
	      // utf8 aligned strings to onData
	      this.result = this.chunks.join('');
	    } else {
	      this.result = common.flattenChunks(this.chunks);
	    }
	  }
	  this.chunks = [];
	  this.err = status;
	  this.msg = this.strm.msg;
	};


	/**
	 * inflate(data[, options]) -> Uint8Array|Array|String
	 * - data (Uint8Array|Array|String): input data to decompress.
	 * - options (Object): zlib inflate options.
	 *
	 * Decompress `data` with inflate/ungzip and `options`. Autodetect
	 * format via wrapper header by default. That's why we don't provide
	 * separate `ungzip` method.
	 *
	 * Supported options are:
	 *
	 * - windowBits
	 *
	 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
	 * for more information.
	 *
	 * Sugar (options):
	 *
	 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
	 *   negative windowBits implicitly.
	 * - `to` (String) - if equal to 'string', then result will be converted
	 *   from utf8 to utf16 (javascript) string. When string output requested,
	 *   chunk length can differ from `chunkSize`, depending on content.
	 *
	 *
	 * ##### Example:
	 *
	 * ```javascript
	 * var pako = require('pako')
	 *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])
	 *   , output;
	 *
	 * try {
	 *   output = pako.inflate(input);
	 * } catch (err)
	 *   console.log(err);
	 * }
	 * ```
	 **/
	function inflate(input, options) {
	  var inflator = new Inflate(options);

	  inflator.push(input, true);

	  // That will never happens, if you don't cheat with options :)
	  if (inflator.err) { throw inflator.msg || messages[inflator.err]; }

	  return inflator.result;
	}


	/**
	 * inflateRaw(data[, options]) -> Uint8Array|Array|String
	 * - data (Uint8Array|Array|String): input data to decompress.
	 * - options (Object): zlib inflate options.
	 *
	 * The same as [[inflate]], but creates raw data, without wrapper
	 * (header and adler32 crc).
	 **/
	function inflateRaw(input, options) {
	  options = options || {};
	  options.raw = true;
	  return inflate(input, options);
	}


	/**
	 * ungzip(data[, options]) -> Uint8Array|Array|String
	 * - data (Uint8Array|Array|String): input data to decompress.
	 * - options (Object): zlib inflate options.
	 *
	 * Just shortcut to [[inflate]], because it autodetects format
	 * by header.content. Done for convenience.
	 **/


	var Inflate_1 = Inflate;
	var inflate_2 = inflate;
	var inflateRaw_1 = inflateRaw;
	var ungzip  = inflate;

	var inflate_1 = {
		Inflate: Inflate_1,
		inflate: inflate_2,
		inflateRaw: inflateRaw_1,
		ungzip: ungzip
	};

	var assign    = common.assign;





	var pako = {};

	assign(pako, deflate_1, inflate_1, constants$2);

	var pako_1 = pako;

	var encodingIndexes = createCommonjsModule(function (module) {
	(function(global) {

	  if (module.exports) {
	    module.exports = global;
	  }

	  global["encoding-indexes"] =
	{
	  "big5":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,17392,19506,17923,17830,17784,160359,19831,17843,162993,19682,163013,15253,18230,18244,19527,19520,148159,144919,160594,159371,159954,19543,172881,18255,17882,19589,162924,19719,19108,18081,158499,29221,154196,137827,146950,147297,26189,22267,null,32149,22813,166841,15860,38708,162799,23515,138590,23204,13861,171696,23249,23479,23804,26478,34195,170309,29793,29853,14453,138579,145054,155681,16108,153822,15093,31484,40855,147809,166157,143850,133770,143966,17162,33924,40854,37935,18736,34323,22678,38730,37400,31184,31282,26208,27177,34973,29772,31685,26498,31276,21071,36934,13542,29636,155065,29894,40903,22451,18735,21580,16689,145038,22552,31346,162661,35727,18094,159368,16769,155033,31662,140476,40904,140481,140489,140492,40905,34052,144827,16564,40906,17633,175615,25281,28782,40907,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,12736,12737,12738,12739,12740,131340,12741,131281,131277,12742,12743,131275,139240,12744,131274,12745,12746,12747,12748,131342,12749,12750,256,193,461,192,274,201,282,200,332,211,465,210,null,7870,null,7872,202,257,225,462,224,593,275,233,283,232,299,237,464,236,333,243,466,242,363,250,468,249,470,472,474,476,252,null,7871,null,7873,234,609,9178,9179,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,172969,135493,null,25866,null,null,20029,28381,40270,37343,null,null,161589,25745,20250,20264,20392,20822,20852,20892,20964,21153,21160,21307,21326,21457,21464,22242,22768,22788,22791,22834,22836,23398,23454,23455,23706,24198,24635,25993,26622,26628,26725,27982,28860,30005,32420,32428,32442,32455,32463,32479,32518,32567,33402,33487,33647,35270,35774,35810,36710,36711,36718,29713,31996,32205,26950,31433,21031,null,null,null,null,37260,30904,37214,32956,null,36107,33014,133607,null,null,32927,40647,19661,40393,40460,19518,171510,159758,40458,172339,13761,null,28314,33342,29977,null,18705,39532,39567,40857,31111,164972,138698,132560,142054,20004,20097,20096,20103,20159,20203,20279,13388,20413,15944,20483,20616,13437,13459,13477,20870,22789,20955,20988,20997,20105,21113,21136,21287,13767,21417,13649,21424,13651,21442,21539,13677,13682,13953,21651,21667,21684,21689,21712,21743,21784,21795,21800,13720,21823,13733,13759,21975,13765,163204,21797,null,134210,134421,151851,21904,142534,14828,131905,36422,150968,169189,16467,164030,30586,142392,14900,18389,164189,158194,151018,25821,134524,135092,134357,135412,25741,36478,134806,134155,135012,142505,164438,148691,null,134470,170573,164073,18420,151207,142530,39602,14951,169460,16365,13574,152263,169940,161992,142660,40302,38933,null,17369,155813,25780,21731,142668,142282,135287,14843,135279,157402,157462,162208,25834,151634,134211,36456,139681,166732,132913,null,18443,131497,16378,22643,142733,null,148936,132348,155799,134988,134550,21881,16571,17338,null,19124,141926,135325,33194,39157,134556,25465,14846,141173,36288,22177,25724,15939,null,173569,134665,142031,142537,null,135368,145858,14738,14854,164507,13688,155209,139463,22098,134961,142514,169760,13500,27709,151099,null,null,161140,142987,139784,173659,167117,134778,134196,157724,32659,135375,141315,141625,13819,152035,134796,135053,134826,16275,134960,134471,135503,134732,null,134827,134057,134472,135360,135485,16377,140950,25650,135085,144372,161337,142286,134526,134527,142417,142421,14872,134808,135367,134958,173618,158544,167122,167321,167114,38314,21708,33476,21945,null,171715,39974,39606,161630,142830,28992,33133,33004,23580,157042,33076,14231,21343,164029,37302,134906,134671,134775,134907,13789,151019,13833,134358,22191,141237,135369,134672,134776,135288,135496,164359,136277,134777,151120,142756,23124,135197,135198,135413,135414,22428,134673,161428,164557,135093,134779,151934,14083,135094,135552,152280,172733,149978,137274,147831,164476,22681,21096,13850,153405,31666,23400,18432,19244,40743,18919,39967,39821,154484,143677,22011,13810,22153,20008,22786,138177,194680,38737,131206,20059,20155,13630,23587,24401,24516,14586,25164,25909,27514,27701,27706,28780,29227,20012,29357,149737,32594,31035,31993,32595,156266,13505,null,156491,32770,32896,157202,158033,21341,34916,35265,161970,35744,36125,38021,38264,38271,38376,167439,38886,39029,39118,39134,39267,170000,40060,40479,40644,27503,63751,20023,131207,38429,25143,38050,null,20539,28158,171123,40870,15817,34959,147790,28791,23797,19232,152013,13657,154928,24866,166450,36775,37366,29073,26393,29626,144001,172295,15499,137600,19216,30948,29698,20910,165647,16393,27235,172730,16931,34319,133743,31274,170311,166634,38741,28749,21284,139390,37876,30425,166371,40871,30685,20131,20464,20668,20015,20247,40872,21556,32139,22674,22736,138678,24210,24217,24514,141074,25995,144377,26905,27203,146531,27903,null,29184,148741,29580,16091,150035,23317,29881,35715,154788,153237,31379,31724,31939,32364,33528,34199,40873,34960,40874,36537,40875,36815,34143,39392,37409,40876,167353,136255,16497,17058,23066,null,null,null,39016,26475,17014,22333,null,34262,149883,33471,160013,19585,159092,23931,158485,159678,40877,40878,23446,40879,26343,32347,28247,31178,15752,17603,143958,141206,17306,17718,null,23765,146202,35577,23672,15634,144721,23928,40882,29015,17752,147692,138787,19575,14712,13386,131492,158785,35532,20404,131641,22975,33132,38998,170234,24379,134047,null,139713,166253,16642,18107,168057,16135,40883,172469,16632,14294,18167,158790,16764,165554,160767,17773,14548,152730,17761,17691,19849,19579,19830,17898,16328,150287,13921,17630,17597,16877,23870,23880,23894,15868,14351,23972,23993,14368,14392,24130,24253,24357,24451,14600,14612,14655,14669,24791,24893,23781,14729,25015,25017,25039,14776,25132,25232,25317,25368,14840,22193,14851,25570,25595,25607,25690,14923,25792,23829,22049,40863,14999,25990,15037,26111,26195,15090,26258,15138,26390,15170,26532,26624,15192,26698,26756,15218,15217,15227,26889,26947,29276,26980,27039,27013,15292,27094,15325,27237,27252,27249,27266,15340,27289,15346,27307,27317,27348,27382,27521,27585,27626,27765,27818,15563,27906,27910,27942,28033,15599,28068,28081,28181,28184,28201,28294,166336,28347,28386,28378,40831,28392,28393,28452,28468,15686,147265,28545,28606,15722,15733,29111,23705,15754,28716,15761,28752,28756,28783,28799,28809,131877,17345,13809,134872,147159,22462,159443,28990,153568,13902,27042,166889,23412,31305,153825,169177,31333,31357,154028,31419,31408,31426,31427,29137,156813,16842,31450,31453,31466,16879,21682,154625,31499,31573,31529,152334,154878,31650,31599,33692,154548,158847,31696,33825,31634,31672,154912,15789,154725,33938,31738,31750,31797,154817,31812,31875,149634,31910,26237,148856,31945,31943,31974,31860,31987,31989,31950,32359,17693,159300,32093,159446,29837,32137,32171,28981,32179,32210,147543,155689,32228,15635,32245,137209,32229,164717,32285,155937,155994,32366,32402,17195,37996,32295,32576,32577,32583,31030,156368,39393,32663,156497,32675,136801,131176,17756,145254,17667,164666,32762,156809,32773,32776,32797,32808,32815,172167,158915,32827,32828,32865,141076,18825,157222,146915,157416,26405,32935,166472,33031,33050,22704,141046,27775,156824,151480,25831,136330,33304,137310,27219,150117,150165,17530,33321,133901,158290,146814,20473,136445,34018,33634,158474,149927,144688,137075,146936,33450,26907,194964,16859,34123,33488,33562,134678,137140,14017,143741,144730,33403,33506,33560,147083,159139,158469,158615,144846,15807,33565,21996,33669,17675,159141,33708,33729,33747,13438,159444,27223,34138,13462,159298,143087,33880,154596,33905,15827,17636,27303,33866,146613,31064,33960,158614,159351,159299,34014,33807,33681,17568,33939,34020,154769,16960,154816,17731,34100,23282,159385,17703,34163,17686,26559,34326,165413,165435,34241,159880,34306,136578,159949,194994,17770,34344,13896,137378,21495,160666,34430,34673,172280,34798,142375,34737,34778,34831,22113,34412,26710,17935,34885,34886,161248,146873,161252,34910,34972,18011,34996,34997,25537,35013,30583,161551,35207,35210,35238,35241,35239,35260,166437,35303,162084,162493,35484,30611,37374,35472,162393,31465,162618,147343,18195,162616,29052,35596,35615,152624,152933,35647,35660,35661,35497,150138,35728,35739,35503,136927,17941,34895,35995,163156,163215,195028,14117,163155,36054,163224,163261,36114,36099,137488,36059,28764,36113,150729,16080,36215,36265,163842,135188,149898,15228,164284,160012,31463,36525,36534,36547,37588,36633,36653,164709,164882,36773,37635,172703,133712,36787,18730,166366,165181,146875,24312,143970,36857,172052,165564,165121,140069,14720,159447,36919,165180,162494,36961,165228,165387,37032,165651,37060,165606,37038,37117,37223,15088,37289,37316,31916,166195,138889,37390,27807,37441,37474,153017,37561,166598,146587,166668,153051,134449,37676,37739,166625,166891,28815,23235,166626,166629,18789,37444,166892,166969,166911,37747,37979,36540,38277,38310,37926,38304,28662,17081,140922,165592,135804,146990,18911,27676,38523,38550,16748,38563,159445,25050,38582,30965,166624,38589,21452,18849,158904,131700,156688,168111,168165,150225,137493,144138,38705,34370,38710,18959,17725,17797,150249,28789,23361,38683,38748,168405,38743,23370,168427,38751,37925,20688,143543,143548,38793,38815,38833,38846,38848,38866,38880,152684,38894,29724,169011,38911,38901,168989,162170,19153,38964,38963,38987,39014,15118,160117,15697,132656,147804,153350,39114,39095,39112,39111,19199,159015,136915,21936,39137,39142,39148,37752,39225,150057,19314,170071,170245,39413,39436,39483,39440,39512,153381,14020,168113,170965,39648,39650,170757,39668,19470,39700,39725,165376,20532,39732,158120,14531,143485,39760,39744,171326,23109,137315,39822,148043,39938,39935,39948,171624,40404,171959,172434,172459,172257,172323,172511,40318,40323,172340,40462,26760,40388,139611,172435,172576,137531,172595,40249,172217,172724,40592,40597,40606,40610,19764,40618,40623,148324,40641,15200,14821,15645,20274,14270,166955,40706,40712,19350,37924,159138,40727,40726,40761,22175,22154,40773,39352,168075,38898,33919,40802,40809,31452,40846,29206,19390,149877,149947,29047,150008,148296,150097,29598,166874,137466,31135,166270,167478,37737,37875,166468,37612,37761,37835,166252,148665,29207,16107,30578,31299,28880,148595,148472,29054,137199,28835,137406,144793,16071,137349,152623,137208,14114,136955,137273,14049,137076,137425,155467,14115,136896,22363,150053,136190,135848,136134,136374,34051,145062,34051,33877,149908,160101,146993,152924,147195,159826,17652,145134,170397,159526,26617,14131,15381,15847,22636,137506,26640,16471,145215,147681,147595,147727,158753,21707,22174,157361,22162,135135,134056,134669,37830,166675,37788,20216,20779,14361,148534,20156,132197,131967,20299,20362,153169,23144,131499,132043,14745,131850,132116,13365,20265,131776,167603,131701,35546,131596,20120,20685,20749,20386,20227,150030,147082,20290,20526,20588,20609,20428,20453,20568,20732,20825,20827,20829,20830,28278,144789,147001,147135,28018,137348,147081,20904,20931,132576,17629,132259,132242,132241,36218,166556,132878,21081,21156,133235,21217,37742,18042,29068,148364,134176,149932,135396,27089,134685,29817,16094,29849,29716,29782,29592,19342,150204,147597,21456,13700,29199,147657,21940,131909,21709,134086,22301,37469,38644,37734,22493,22413,22399,13886,22731,23193,166470,136954,137071,136976,23084,22968,37519,23166,23247,23058,153926,137715,137313,148117,14069,27909,29763,23073,155267,23169,166871,132115,37856,29836,135939,28933,18802,37896,166395,37821,14240,23582,23710,24158,24136,137622,137596,146158,24269,23375,137475,137476,14081,137376,14045,136958,14035,33066,166471,138682,144498,166312,24332,24334,137511,137131,23147,137019,23364,34324,161277,34912,24702,141408,140843,24539,16056,140719,140734,168072,159603,25024,131134,131142,140827,24985,24984,24693,142491,142599,149204,168269,25713,149093,142186,14889,142114,144464,170218,142968,25399,173147,25782,25393,25553,149987,142695,25252,142497,25659,25963,26994,15348,143502,144045,149897,144043,21773,144096,137433,169023,26318,144009,143795,15072,16784,152964,166690,152975,136956,152923,152613,30958,143619,137258,143924,13412,143887,143746,148169,26254,159012,26219,19347,26160,161904,138731,26211,144082,144097,26142,153714,14545,145466,145340,15257,145314,144382,29904,15254,26511,149034,26806,26654,15300,27326,14435,145365,148615,27187,27218,27337,27397,137490,25873,26776,27212,15319,27258,27479,147392,146586,37792,37618,166890,166603,37513,163870,166364,37991,28069,28427,149996,28007,147327,15759,28164,147516,23101,28170,22599,27940,30786,28987,148250,148086,28913,29264,29319,29332,149391,149285,20857,150180,132587,29818,147192,144991,150090,149783,155617,16134,16049,150239,166947,147253,24743,16115,29900,29756,37767,29751,17567,159210,17745,30083,16227,150745,150790,16216,30037,30323,173510,15129,29800,166604,149931,149902,15099,15821,150094,16127,149957,149747,37370,22322,37698,166627,137316,20703,152097,152039,30584,143922,30478,30479,30587,149143,145281,14942,149744,29752,29851,16063,150202,150215,16584,150166,156078,37639,152961,30750,30861,30856,30930,29648,31065,161601,153315,16654,31131,33942,31141,27181,147194,31290,31220,16750,136934,16690,37429,31217,134476,149900,131737,146874,137070,13719,21867,13680,13994,131540,134157,31458,23129,141045,154287,154268,23053,131675,30960,23082,154566,31486,16889,31837,31853,16913,154547,155324,155302,31949,150009,137136,31886,31868,31918,27314,32220,32263,32211,32590,156257,155996,162632,32151,155266,17002,158581,133398,26582,131150,144847,22468,156690,156664,149858,32733,31527,133164,154345,154947,31500,155150,39398,34373,39523,27164,144447,14818,150007,157101,39455,157088,33920,160039,158929,17642,33079,17410,32966,33033,33090,157620,39107,158274,33378,33381,158289,33875,159143,34320,160283,23174,16767,137280,23339,137377,23268,137432,34464,195004,146831,34861,160802,23042,34926,20293,34951,35007,35046,35173,35149,153219,35156,161669,161668,166901,166873,166812,166393,16045,33955,18165,18127,14322,35389,35356,169032,24397,37419,148100,26068,28969,28868,137285,40301,35999,36073,163292,22938,30659,23024,17262,14036,36394,36519,150537,36656,36682,17140,27736,28603,140065,18587,28537,28299,137178,39913,14005,149807,37051,37015,21873,18694,37307,37892,166475,16482,166652,37927,166941,166971,34021,35371,38297,38311,38295,38294,167220,29765,16066,149759,150082,148458,16103,143909,38543,167655,167526,167525,16076,149997,150136,147438,29714,29803,16124,38721,168112,26695,18973,168083,153567,38749,37736,166281,166950,166703,156606,37562,23313,35689,18748,29689,147995,38811,38769,39224,134950,24001,166853,150194,38943,169178,37622,169431,37349,17600,166736,150119,166756,39132,166469,16128,37418,18725,33812,39227,39245,162566,15869,39323,19311,39338,39516,166757,153800,27279,39457,23294,39471,170225,19344,170312,39356,19389,19351,37757,22642,135938,22562,149944,136424,30788,141087,146872,26821,15741,37976,14631,24912,141185,141675,24839,40015,40019,40059,39989,39952,39807,39887,171565,39839,172533,172286,40225,19630,147716,40472,19632,40204,172468,172269,172275,170287,40357,33981,159250,159711,158594,34300,17715,159140,159364,159216,33824,34286,159232,145367,155748,31202,144796,144960,18733,149982,15714,37851,37566,37704,131775,30905,37495,37965,20452,13376,36964,152925,30781,30804,30902,30795,137047,143817,149825,13978,20338,28634,28633,28702,28702,21524,147893,22459,22771,22410,40214,22487,28980,13487,147884,29163,158784,151447,23336,137141,166473,24844,23246,23051,17084,148616,14124,19323,166396,37819,37816,137430,134941,33906,158912,136211,148218,142374,148417,22932,146871,157505,32168,155995,155812,149945,149899,166394,37605,29666,16105,29876,166755,137375,16097,150195,27352,29683,29691,16086,150078,150164,137177,150118,132007,136228,149989,29768,149782,28837,149878,37508,29670,37727,132350,37681,166606,166422,37766,166887,153045,18741,166530,29035,149827,134399,22180,132634,134123,134328,21762,31172,137210,32254,136898,150096,137298,17710,37889,14090,166592,149933,22960,137407,137347,160900,23201,14050,146779,14000,37471,23161,166529,137314,37748,15565,133812,19094,14730,20724,15721,15692,136092,29045,17147,164376,28175,168164,17643,27991,163407,28775,27823,15574,147437,146989,28162,28428,15727,132085,30033,14012,13512,18048,16090,18545,22980,37486,18750,36673,166940,158656,22546,22472,14038,136274,28926,148322,150129,143331,135856,140221,26809,26983,136088,144613,162804,145119,166531,145366,144378,150687,27162,145069,158903,33854,17631,17614,159014,159057,158850,159710,28439,160009,33597,137018,33773,158848,159827,137179,22921,23170,137139,23137,23153,137477,147964,14125,23023,137020,14023,29070,37776,26266,148133,23150,23083,148115,27179,147193,161590,148571,148170,28957,148057,166369,20400,159016,23746,148686,163405,148413,27148,148054,135940,28838,28979,148457,15781,27871,194597,150095,32357,23019,23855,15859,24412,150109,137183,32164,33830,21637,146170,144128,131604,22398,133333,132633,16357,139166,172726,28675,168283,23920,29583,31955,166489,168992,20424,32743,29389,29456,162548,29496,29497,153334,29505,29512,16041,162584,36972,29173,149746,29665,33270,16074,30476,16081,27810,22269,29721,29726,29727,16098,16112,16116,16122,29907,16142,16211,30018,30061,30066,30093,16252,30152,30172,16320,30285,16343,30324,16348,30330,151388,29064,22051,35200,22633,16413,30531,16441,26465,16453,13787,30616,16490,16495,23646,30654,30667,22770,30744,28857,30748,16552,30777,30791,30801,30822,33864,152885,31027,26627,31026,16643,16649,31121,31129,36795,31238,36796,16743,31377,16818,31420,33401,16836,31439,31451,16847,20001,31586,31596,31611,31762,31771,16992,17018,31867,31900,17036,31928,17044,31981,36755,28864,134351,32207,32212,32208,32253,32686,32692,29343,17303,32800,32805,31545,32814,32817,32852,15820,22452,28832,32951,33001,17389,33036,29482,33038,33042,30048,33044,17409,15161,33110,33113,33114,17427,22586,33148,33156,17445,33171,17453,33189,22511,33217,33252,33364,17551,33446,33398,33482,33496,33535,17584,33623,38505,27018,33797,28917,33892,24803,33928,17668,33982,34017,34040,34064,34104,34130,17723,34159,34160,34272,17783,34418,34450,34482,34543,38469,34699,17926,17943,34990,35071,35108,35143,35217,162151,35369,35384,35476,35508,35921,36052,36082,36124,18328,22623,36291,18413,20206,36410,21976,22356,36465,22005,36528,18487,36558,36578,36580,36589,36594,36791,36801,36810,36812,36915,39364,18605,39136,37395,18718,37416,37464,37483,37553,37550,37567,37603,37611,37619,37620,37629,37699,37764,37805,18757,18769,40639,37911,21249,37917,37933,37950,18794,37972,38009,38189,38306,18855,38388,38451,18917,26528,18980,38720,18997,38834,38850,22100,19172,24808,39097,19225,39153,22596,39182,39193,20916,39196,39223,39234,39261,39266,19312,39365,19357,39484,39695,31363,39785,39809,39901,39921,39924,19565,39968,14191,138178,40265,39994,40702,22096,40339,40381,40384,40444,38134,36790,40571,40620,40625,40637,40646,38108,40674,40689,40696,31432,40772,131220,131767,132000,26906,38083,22956,132311,22592,38081,14265,132565,132629,132726,136890,22359,29043,133826,133837,134079,21610,194619,134091,21662,134139,134203,134227,134245,134268,24807,134285,22138,134325,134365,134381,134511,134578,134600,26965,39983,34725,134660,134670,134871,135056,134957,134771,23584,135100,24075,135260,135247,135286,26398,135291,135304,135318,13895,135359,135379,135471,135483,21348,33965,135907,136053,135990,35713,136567,136729,137155,137159,20088,28859,137261,137578,137773,137797,138282,138352,138412,138952,25283,138965,139029,29080,26709,139333,27113,14024,139900,140247,140282,141098,141425,141647,33533,141671,141715,142037,35237,142056,36768,142094,38840,142143,38983,39613,142412,null,142472,142519,154600,142600,142610,142775,142741,142914,143220,143308,143411,143462,144159,144350,24497,26184,26303,162425,144743,144883,29185,149946,30679,144922,145174,32391,131910,22709,26382,26904,146087,161367,155618,146961,147129,161278,139418,18640,19128,147737,166554,148206,148237,147515,148276,148374,150085,132554,20946,132625,22943,138920,15294,146687,148484,148694,22408,149108,14747,149295,165352,170441,14178,139715,35678,166734,39382,149522,149755,150037,29193,150208,134264,22885,151205,151430,132985,36570,151596,21135,22335,29041,152217,152601,147274,150183,21948,152646,152686,158546,37332,13427,152895,161330,152926,18200,152930,152934,153543,149823,153693,20582,13563,144332,24798,153859,18300,166216,154286,154505,154630,138640,22433,29009,28598,155906,162834,36950,156082,151450,35682,156674,156746,23899,158711,36662,156804,137500,35562,150006,156808,147439,156946,19392,157119,157365,141083,37989,153569,24981,23079,194765,20411,22201,148769,157436,20074,149812,38486,28047,158909,13848,35191,157593,157806,156689,157790,29151,157895,31554,168128,133649,157990,37124,158009,31301,40432,158202,39462,158253,13919,156777,131105,31107,158260,158555,23852,144665,33743,158621,18128,158884,30011,34917,159150,22710,14108,140685,159819,160205,15444,160384,160389,37505,139642,160395,37680,160486,149968,27705,38047,160848,134904,34855,35061,141606,164979,137137,28344,150058,137248,14756,14009,23568,31203,17727,26294,171181,170148,35139,161740,161880,22230,16607,136714,14753,145199,164072,136133,29101,33638,162269,168360,23143,19639,159919,166315,162301,162314,162571,163174,147834,31555,31102,163849,28597,172767,27139,164632,21410,159239,37823,26678,38749,164207,163875,158133,136173,143919,163912,23941,166960,163971,22293,38947,166217,23979,149896,26046,27093,21458,150181,147329,15377,26422,163984,164084,164142,139169,164175,164233,164271,164378,164614,164655,164746,13770,164968,165546,18682,25574,166230,30728,37461,166328,17394,166375,17375,166376,166726,166868,23032,166921,36619,167877,168172,31569,168208,168252,15863,168286,150218,36816,29327,22155,169191,169449,169392,169400,169778,170193,170313,170346,170435,170536,170766,171354,171419,32415,171768,171811,19620,38215,172691,29090,172799,19857,36882,173515,19868,134300,36798,21953,36794,140464,36793,150163,17673,32383,28502,27313,20202,13540,166700,161949,14138,36480,137205,163876,166764,166809,162366,157359,15851,161365,146615,153141,153942,20122,155265,156248,22207,134765,36366,23405,147080,150686,25566,25296,137206,137339,25904,22061,154698,21530,152337,15814,171416,19581,22050,22046,32585,155352,22901,146752,34672,19996,135146,134473,145082,33047,40286,36120,30267,40005,30286,30649,37701,21554,33096,33527,22053,33074,33816,32957,21994,31074,22083,21526,134813,13774,22021,22001,26353,164578,13869,30004,22000,21946,21655,21874,134209,134294,24272,151880,134774,142434,134818,40619,32090,21982,135285,25245,38765,21652,36045,29174,37238,25596,25529,25598,21865,142147,40050,143027,20890,13535,134567,20903,21581,21790,21779,30310,36397,157834,30129,32950,34820,34694,35015,33206,33820,135361,17644,29444,149254,23440,33547,157843,22139,141044,163119,147875,163187,159440,160438,37232,135641,37384,146684,173737,134828,134905,29286,138402,18254,151490,163833,135147,16634,40029,25887,142752,18675,149472,171388,135148,134666,24674,161187,135149,null,155720,135559,29091,32398,40272,19994,19972,13687,23309,27826,21351,13996,14812,21373,13989,149016,22682,150382,33325,21579,22442,154261,133497,null,14930,140389,29556,171692,19721,39917,146686,171824,19547,151465,169374,171998,33884,146870,160434,157619,145184,25390,32037,147191,146988,14890,36872,21196,15988,13946,17897,132238,30272,23280,134838,30842,163630,22695,16575,22140,39819,23924,30292,173108,40581,19681,30201,14331,24857,143578,148466,null,22109,135849,22439,149859,171526,21044,159918,13741,27722,40316,31830,39737,22494,137068,23635,25811,169168,156469,160100,34477,134440,159010,150242,134513,null,20990,139023,23950,38659,138705,40577,36940,31519,39682,23761,31651,25192,25397,39679,31695,39722,31870,39726,31810,31878,39957,31740,39689,40727,39963,149822,40794,21875,23491,20477,40600,20466,21088,15878,21201,22375,20566,22967,24082,38856,40363,36700,21609,38836,39232,38842,21292,24880,26924,21466,39946,40194,19515,38465,27008,20646,30022,137069,39386,21107,null,37209,38529,37212,null,37201,167575,25471,159011,27338,22033,37262,30074,25221,132092,29519,31856,154657,146685,null,149785,30422,39837,20010,134356,33726,34882,null,23626,27072,20717,22394,21023,24053,20174,27697,131570,20281,21660,21722,21146,36226,13822,24332,13811,null,27474,37244,40869,39831,38958,39092,39610,40616,40580,29050,31508,null,27642,34840,32632,null,22048,173642,36471,40787,null,36308,36431,40476,36353,25218,164733,36392,36469,31443,150135,31294,30936,27882,35431,30215,166490,40742,27854,34774,30147,172722,30803,194624,36108,29410,29553,35629,29442,29937,36075,150203,34351,24506,34976,17591,null,137275,159237,null,35454,140571,null,24829,30311,39639,40260,37742,39823,34805,null,34831,36087,29484,38689,39856,13782,29362,19463,31825,39242,155993,24921,19460,40598,24957,null,22367,24943,25254,25145,25294,14940,25058,21418,144373,25444,26626,13778,23895,166850,36826,167481,null,20697,138566,30982,21298,38456,134971,16485,null,30718,null,31938,155418,31962,31277,32870,32867,32077,29957,29938,35220,33306,26380,32866,160902,32859,29936,33027,30500,35209,157644,30035,159441,34729,34766,33224,34700,35401,36013,35651,30507,29944,34010,13877,27058,36262,null,35241,29800,28089,34753,147473,29927,15835,29046,24740,24988,15569,29026,24695,null,32625,166701,29264,24809,19326,21024,15384,146631,155351,161366,152881,137540,135934,170243,159196,159917,23745,156077,166415,145015,131310,157766,151310,17762,23327,156492,40784,40614,156267,12288,65292,12289,12290,65294,8231,65307,65306,65311,65281,65072,8230,8229,65104,65105,65106,183,65108,65109,65110,65111,65372,8211,65073,8212,65075,9588,65076,65103,65288,65289,65077,65078,65371,65373,65079,65080,12308,12309,65081,65082,12304,12305,65083,65084,12298,12299,65085,65086,12296,12297,65087,65088,12300,12301,65089,65090,12302,12303,65091,65092,65113,65114,65115,65116,65117,65118,8216,8217,8220,8221,12317,12318,8245,8242,65283,65286,65290,8251,167,12291,9675,9679,9651,9650,9678,9734,9733,9671,9670,9633,9632,9661,9660,12963,8453,175,65507,65343,717,65097,65098,65101,65102,65099,65100,65119,65120,65121,65291,65293,215,247,177,8730,65308,65310,65309,8806,8807,8800,8734,8786,8801,65122,65123,65124,65125,65126,65374,8745,8746,8869,8736,8735,8895,13266,13265,8747,8750,8757,8756,9792,9794,8853,8857,8593,8595,8592,8594,8598,8599,8601,8600,8741,8739,65295,65340,8725,65128,65284,65509,12306,65504,65505,65285,65312,8451,8457,65129,65130,65131,13269,13212,13213,13214,13262,13217,13198,13199,13252,176,20825,20827,20830,20829,20833,20835,21991,29929,31950,9601,9602,9603,9604,9605,9606,9607,9608,9615,9614,9613,9612,9611,9610,9609,9532,9524,9516,9508,9500,9620,9472,9474,9621,9484,9488,9492,9496,9581,9582,9584,9583,9552,9566,9578,9569,9698,9699,9701,9700,9585,9586,9587,65296,65297,65298,65299,65300,65301,65302,65303,65304,65305,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,12321,12322,12323,12324,12325,12326,12327,12328,12329,21313,21316,21317,65313,65314,65315,65316,65317,65318,65319,65320,65321,65322,65323,65324,65325,65326,65327,65328,65329,65330,65331,65332,65333,65334,65335,65336,65337,65338,65345,65346,65347,65348,65349,65350,65351,65352,65353,65354,65355,65356,65357,65358,65359,65360,65361,65362,65363,65364,65365,65366,65367,65368,65369,65370,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,963,964,965,966,967,968,969,12549,12550,12551,12552,12553,12554,12555,12556,12557,12558,12559,12560,12561,12562,12563,12564,12565,12566,12567,12568,12569,12570,12571,12572,12573,12574,12575,12576,12577,12578,12579,12580,12581,12582,12583,12584,12585,729,713,714,711,715,9216,9217,9218,9219,9220,9221,9222,9223,9224,9225,9226,9227,9228,9229,9230,9231,9232,9233,9234,9235,9236,9237,9238,9239,9240,9241,9242,9243,9244,9245,9246,9247,9249,8364,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,19968,20057,19969,19971,20035,20061,20102,20108,20154,20799,20837,20843,20960,20992,20993,21147,21269,21313,21340,21448,19977,19979,19976,19978,20011,20024,20961,20037,20040,20063,20062,20110,20129,20800,20995,21242,21315,21449,21475,22303,22763,22805,22823,22899,23376,23377,23379,23544,23567,23586,23608,23665,24029,24037,24049,24050,24051,24062,24178,24318,24331,24339,25165,19985,19984,19981,20013,20016,20025,20043,23609,20104,20113,20117,20114,20116,20130,20161,20160,20163,20166,20167,20173,20170,20171,20164,20803,20801,20839,20845,20846,20844,20887,20982,20998,20999,21000,21243,21246,21247,21270,21305,21320,21319,21317,21342,21380,21451,21450,21453,22764,22825,22827,22826,22829,23380,23569,23588,23610,23663,24052,24187,24319,24340,24341,24515,25096,25142,25163,25166,25903,25991,26007,26020,26041,26085,26352,26376,26408,27424,27490,27513,27595,27604,27611,27663,27700,28779,29226,29238,29243,29255,29273,29275,29356,29579,19993,19990,19989,19988,19992,20027,20045,20047,20046,20197,20184,20180,20181,20182,20183,20195,20196,20185,20190,20805,20804,20873,20874,20908,20985,20986,20984,21002,21152,21151,21253,21254,21271,21277,20191,21322,21321,21345,21344,21359,21358,21435,21487,21476,21491,21484,21486,21481,21480,21500,21496,21493,21483,21478,21482,21490,21489,21488,21477,21485,21499,22235,22234,22806,22830,22833,22900,22902,23381,23427,23612,24040,24039,24038,24066,24067,24179,24188,24321,24344,24343,24517,25098,25171,25172,25170,25169,26021,26086,26414,26412,26410,26411,26413,27491,27597,27665,27664,27704,27713,27712,27710,29359,29572,29577,29916,29926,29976,29983,29992,29993,30000,30001,30002,30003,30091,30333,30382,30399,30446,30683,30690,30707,31034,31166,31348,31435,19998,19999,20050,20051,20073,20121,20132,20134,20133,20223,20233,20249,20234,20245,20237,20240,20241,20239,20210,20214,20219,20208,20211,20221,20225,20235,20809,20807,20806,20808,20840,20849,20877,20912,21015,21009,21010,21006,21014,21155,21256,21281,21280,21360,21361,21513,21519,21516,21514,21520,21505,21515,21508,21521,21517,21512,21507,21518,21510,21522,22240,22238,22237,22323,22320,22312,22317,22316,22319,22313,22809,22810,22839,22840,22916,22904,22915,22909,22905,22914,22913,23383,23384,23431,23432,23429,23433,23546,23574,23673,24030,24070,24182,24180,24335,24347,24537,24534,25102,25100,25101,25104,25187,25179,25176,25910,26089,26088,26092,26093,26354,26355,26377,26429,26420,26417,26421,27425,27492,27515,27670,27741,27735,27737,27743,27744,27728,27733,27745,27739,27725,27726,28784,29279,29277,30334,31481,31859,31992,32566,32650,32701,32769,32771,32780,32786,32819,32895,32905,32907,32908,33251,33258,33267,33276,33292,33307,33311,33390,33394,33406,34411,34880,34892,34915,35199,38433,20018,20136,20301,20303,20295,20311,20318,20276,20315,20309,20272,20304,20305,20285,20282,20280,20291,20308,20284,20294,20323,20316,20320,20271,20302,20278,20313,20317,20296,20314,20812,20811,20813,20853,20918,20919,21029,21028,21033,21034,21032,21163,21161,21162,21164,21283,21363,21365,21533,21549,21534,21566,21542,21582,21543,21574,21571,21555,21576,21570,21531,21545,21578,21561,21563,21560,21550,21557,21558,21536,21564,21568,21553,21547,21535,21548,22250,22256,22244,22251,22346,22353,22336,22349,22343,22350,22334,22352,22351,22331,22767,22846,22941,22930,22952,22942,22947,22937,22934,22925,22948,22931,22922,22949,23389,23388,23386,23387,23436,23435,23439,23596,23616,23617,23615,23614,23696,23697,23700,23692,24043,24076,24207,24199,24202,24311,24324,24351,24420,24418,24439,24441,24536,24524,24535,24525,24561,24555,24568,24554,25106,25105,25220,25239,25238,25216,25206,25225,25197,25226,25212,25214,25209,25203,25234,25199,25240,25198,25237,25235,25233,25222,25913,25915,25912,26097,26356,26463,26446,26447,26448,26449,26460,26454,26462,26441,26438,26464,26451,26455,27493,27599,27714,27742,27801,27777,27784,27785,27781,27803,27754,27770,27792,27760,27788,27752,27798,27794,27773,27779,27762,27774,27764,27782,27766,27789,27796,27800,27778,28790,28796,28797,28792,29282,29281,29280,29380,29378,29590,29996,29995,30007,30008,30338,30447,30691,31169,31168,31167,31350,31995,32597,32918,32915,32925,32920,32923,32922,32946,33391,33426,33419,33421,35211,35282,35328,35895,35910,35925,35997,36196,36208,36275,36523,36554,36763,36784,36802,36806,36805,36804,24033,37009,37026,37034,37030,37027,37193,37318,37324,38450,38446,38449,38442,38444,20006,20054,20083,20107,20123,20126,20139,20140,20335,20381,20365,20339,20351,20332,20379,20363,20358,20355,20336,20341,20360,20329,20347,20374,20350,20367,20369,20346,20820,20818,20821,20841,20855,20854,20856,20925,20989,21051,21048,21047,21050,21040,21038,21046,21057,21182,21179,21330,21332,21331,21329,21350,21367,21368,21369,21462,21460,21463,21619,21621,21654,21624,21653,21632,21627,21623,21636,21650,21638,21628,21648,21617,21622,21644,21658,21602,21608,21643,21629,21646,22266,22403,22391,22378,22377,22369,22374,22372,22396,22812,22857,22855,22856,22852,22868,22974,22971,22996,22969,22958,22993,22982,22992,22989,22987,22995,22986,22959,22963,22994,22981,23391,23396,23395,23447,23450,23448,23452,23449,23451,23578,23624,23621,23622,23735,23713,23736,23721,23723,23729,23731,24088,24090,24086,24085,24091,24081,24184,24218,24215,24220,24213,24214,24310,24358,24359,24361,24448,24449,24447,24444,24541,24544,24573,24565,24575,24591,24596,24623,24629,24598,24618,24597,24609,24615,24617,24619,24603,25110,25109,25151,25150,25152,25215,25289,25292,25284,25279,25282,25273,25298,25307,25259,25299,25300,25291,25288,25256,25277,25276,25296,25305,25287,25293,25269,25306,25265,25304,25302,25303,25286,25260,25294,25918,26023,26044,26106,26132,26131,26124,26118,26114,26126,26112,26127,26133,26122,26119,26381,26379,26477,26507,26517,26481,26524,26483,26487,26503,26525,26519,26479,26480,26495,26505,26494,26512,26485,26522,26515,26492,26474,26482,27427,27494,27495,27519,27667,27675,27875,27880,27891,27825,27852,27877,27827,27837,27838,27836,27874,27819,27861,27859,27832,27844,27833,27841,27822,27863,27845,27889,27839,27835,27873,27867,27850,27820,27887,27868,27862,27872,28821,28814,28818,28810,28825,29228,29229,29240,29256,29287,29289,29376,29390,29401,29399,29392,29609,29608,29599,29611,29605,30013,30109,30105,30106,30340,30402,30450,30452,30693,30717,31038,31040,31041,31177,31176,31354,31353,31482,31998,32596,32652,32651,32773,32954,32933,32930,32945,32929,32939,32937,32948,32938,32943,33253,33278,33293,33459,33437,33433,33453,33469,33439,33465,33457,33452,33445,33455,33464,33443,33456,33470,33463,34382,34417,21021,34920,36555,36814,36820,36817,37045,37048,37041,37046,37319,37329,38263,38272,38428,38464,38463,38459,38468,38466,38585,38632,38738,38750,20127,20141,20142,20449,20405,20399,20415,20448,20433,20431,20445,20419,20406,20440,20447,20426,20439,20398,20432,20420,20418,20442,20430,20446,20407,20823,20882,20881,20896,21070,21059,21066,21069,21068,21067,21063,21191,21193,21187,21185,21261,21335,21371,21402,21467,21676,21696,21672,21710,21705,21688,21670,21683,21703,21698,21693,21674,21697,21700,21704,21679,21675,21681,21691,21673,21671,21695,22271,22402,22411,22432,22435,22434,22478,22446,22419,22869,22865,22863,22862,22864,23004,23000,23039,23011,23016,23043,23013,23018,23002,23014,23041,23035,23401,23459,23462,23460,23458,23461,23553,23630,23631,23629,23627,23769,23762,24055,24093,24101,24095,24189,24224,24230,24314,24328,24365,24421,24456,24453,24458,24459,24455,24460,24457,24594,24605,24608,24613,24590,24616,24653,24688,24680,24674,24646,24643,24684,24683,24682,24676,25153,25308,25366,25353,25340,25325,25345,25326,25341,25351,25329,25335,25327,25324,25342,25332,25361,25346,25919,25925,26027,26045,26082,26149,26157,26144,26151,26159,26143,26152,26161,26148,26359,26623,26579,26609,26580,26576,26604,26550,26543,26613,26601,26607,26564,26577,26548,26586,26597,26552,26575,26590,26611,26544,26585,26594,26589,26578,27498,27523,27526,27573,27602,27607,27679,27849,27915,27954,27946,27969,27941,27916,27953,27934,27927,27963,27965,27966,27958,27931,27893,27961,27943,27960,27945,27950,27957,27918,27947,28843,28858,28851,28844,28847,28845,28856,28846,28836,29232,29298,29295,29300,29417,29408,29409,29623,29642,29627,29618,29645,29632,29619,29978,29997,30031,30028,30030,30027,30123,30116,30117,30114,30115,30328,30342,30343,30344,30408,30406,30403,30405,30465,30457,30456,30473,30475,30462,30460,30471,30684,30722,30740,30732,30733,31046,31049,31048,31047,31161,31162,31185,31186,31179,31359,31361,31487,31485,31869,32002,32005,32000,32009,32007,32004,32006,32568,32654,32703,32772,32784,32781,32785,32822,32982,32997,32986,32963,32964,32972,32993,32987,32974,32990,32996,32989,33268,33314,33511,33539,33541,33507,33499,33510,33540,33509,33538,33545,33490,33495,33521,33537,33500,33492,33489,33502,33491,33503,33519,33542,34384,34425,34427,34426,34893,34923,35201,35284,35336,35330,35331,35998,36000,36212,36211,36276,36557,36556,36848,36838,36834,36842,36837,36845,36843,36836,36840,37066,37070,37057,37059,37195,37194,37325,38274,38480,38475,38476,38477,38754,38761,38859,38893,38899,38913,39080,39131,39135,39318,39321,20056,20147,20492,20493,20515,20463,20518,20517,20472,20521,20502,20486,20540,20511,20506,20498,20497,20474,20480,20500,20520,20465,20513,20491,20505,20504,20467,20462,20525,20522,20478,20523,20489,20860,20900,20901,20898,20941,20940,20934,20939,21078,21084,21076,21083,21085,21290,21375,21407,21405,21471,21736,21776,21761,21815,21756,21733,21746,21766,21754,21780,21737,21741,21729,21769,21742,21738,21734,21799,21767,21757,21775,22275,22276,22466,22484,22475,22467,22537,22799,22871,22872,22874,23057,23064,23068,23071,23067,23059,23020,23072,23075,23081,23077,23052,23049,23403,23640,23472,23475,23478,23476,23470,23477,23481,23480,23556,23633,23637,23632,23789,23805,23803,23786,23784,23792,23798,23809,23796,24046,24109,24107,24235,24237,24231,24369,24466,24465,24464,24665,24675,24677,24656,24661,24685,24681,24687,24708,24735,24730,24717,24724,24716,24709,24726,25159,25331,25352,25343,25422,25406,25391,25429,25410,25414,25423,25417,25402,25424,25405,25386,25387,25384,25421,25420,25928,25929,26009,26049,26053,26178,26185,26191,26179,26194,26188,26181,26177,26360,26388,26389,26391,26657,26680,26696,26694,26707,26681,26690,26708,26665,26803,26647,26700,26705,26685,26612,26704,26688,26684,26691,26666,26693,26643,26648,26689,27530,27529,27575,27683,27687,27688,27686,27684,27888,28010,28053,28040,28039,28006,28024,28023,27993,28051,28012,28041,28014,27994,28020,28009,28044,28042,28025,28037,28005,28052,28874,28888,28900,28889,28872,28879,29241,29305,29436,29433,29437,29432,29431,29574,29677,29705,29678,29664,29674,29662,30036,30045,30044,30042,30041,30142,30149,30151,30130,30131,30141,30140,30137,30146,30136,30347,30384,30410,30413,30414,30505,30495,30496,30504,30697,30768,30759,30776,30749,30772,30775,30757,30765,30752,30751,30770,31061,31056,31072,31071,31062,31070,31069,31063,31066,31204,31203,31207,31199,31206,31209,31192,31364,31368,31449,31494,31505,31881,32033,32023,32011,32010,32032,32034,32020,32016,32021,32026,32028,32013,32025,32027,32570,32607,32660,32709,32705,32774,32792,32789,32793,32791,32829,32831,33009,33026,33008,33029,33005,33012,33030,33016,33011,33032,33021,33034,33020,33007,33261,33260,33280,33296,33322,33323,33320,33324,33467,33579,33618,33620,33610,33592,33616,33609,33589,33588,33615,33586,33593,33590,33559,33600,33585,33576,33603,34388,34442,34474,34451,34468,34473,34444,34467,34460,34928,34935,34945,34946,34941,34937,35352,35344,35342,35340,35349,35338,35351,35347,35350,35343,35345,35912,35962,35961,36001,36002,36215,36524,36562,36564,36559,36785,36865,36870,36855,36864,36858,36852,36867,36861,36869,36856,37013,37089,37085,37090,37202,37197,37196,37336,37341,37335,37340,37337,38275,38498,38499,38497,38491,38493,38500,38488,38494,38587,39138,39340,39592,39640,39717,39730,39740,20094,20602,20605,20572,20551,20547,20556,20570,20553,20581,20598,20558,20565,20597,20596,20599,20559,20495,20591,20589,20828,20885,20976,21098,21103,21202,21209,21208,21205,21264,21263,21273,21311,21312,21310,21443,26364,21830,21866,21862,21828,21854,21857,21827,21834,21809,21846,21839,21845,21807,21860,21816,21806,21852,21804,21859,21811,21825,21847,22280,22283,22281,22495,22533,22538,22534,22496,22500,22522,22530,22581,22519,22521,22816,22882,23094,23105,23113,23142,23146,23104,23100,23138,23130,23110,23114,23408,23495,23493,23492,23490,23487,23494,23561,23560,23559,23648,23644,23645,23815,23814,23822,23835,23830,23842,23825,23849,23828,23833,23844,23847,23831,24034,24120,24118,24115,24119,24247,24248,24246,24245,24254,24373,24375,24407,24428,24425,24427,24471,24473,24478,24472,24481,24480,24476,24703,24739,24713,24736,24744,24779,24756,24806,24765,24773,24763,24757,24796,24764,24792,24789,24774,24799,24760,24794,24775,25114,25115,25160,25504,25511,25458,25494,25506,25509,25463,25447,25496,25514,25457,25513,25481,25475,25499,25451,25512,25476,25480,25497,25505,25516,25490,25487,25472,25467,25449,25448,25466,25949,25942,25937,25945,25943,21855,25935,25944,25941,25940,26012,26011,26028,26063,26059,26060,26062,26205,26202,26212,26216,26214,26206,26361,21207,26395,26753,26799,26786,26771,26805,26751,26742,26801,26791,26775,26800,26755,26820,26797,26758,26757,26772,26781,26792,26783,26785,26754,27442,27578,27627,27628,27691,28046,28092,28147,28121,28082,28129,28108,28132,28155,28154,28165,28103,28107,28079,28113,28078,28126,28153,28088,28151,28149,28101,28114,28186,28085,28122,28139,28120,28138,28145,28142,28136,28102,28100,28074,28140,28095,28134,28921,28937,28938,28925,28911,29245,29309,29313,29468,29467,29462,29459,29465,29575,29701,29706,29699,29702,29694,29709,29920,29942,29943,29980,29986,30053,30054,30050,30064,30095,30164,30165,30133,30154,30157,30350,30420,30418,30427,30519,30526,30524,30518,30520,30522,30827,30787,30798,31077,31080,31085,31227,31378,31381,31520,31528,31515,31532,31526,31513,31518,31534,31890,31895,31893,32070,32067,32113,32046,32057,32060,32064,32048,32051,32068,32047,32066,32050,32049,32573,32670,32666,32716,32718,32722,32796,32842,32838,33071,33046,33059,33067,33065,33072,33060,33282,33333,33335,33334,33337,33678,33694,33688,33656,33698,33686,33725,33707,33682,33674,33683,33673,33696,33655,33659,33660,33670,33703,34389,24426,34503,34496,34486,34500,34485,34502,34507,34481,34479,34505,34899,34974,34952,34987,34962,34966,34957,34955,35219,35215,35370,35357,35363,35365,35377,35373,35359,35355,35362,35913,35930,36009,36012,36011,36008,36010,36007,36199,36198,36286,36282,36571,36575,36889,36877,36890,36887,36899,36895,36893,36880,36885,36894,36896,36879,36898,36886,36891,36884,37096,37101,37117,37207,37326,37365,37350,37347,37351,37357,37353,38281,38506,38517,38515,38520,38512,38516,38518,38519,38508,38592,38634,38633,31456,31455,38914,38915,39770,40165,40565,40575,40613,40635,20642,20621,20613,20633,20625,20608,20630,20632,20634,26368,20977,21106,21108,21109,21097,21214,21213,21211,21338,21413,21883,21888,21927,21884,21898,21917,21912,21890,21916,21930,21908,21895,21899,21891,21939,21934,21919,21822,21938,21914,21947,21932,21937,21886,21897,21931,21913,22285,22575,22570,22580,22564,22576,22577,22561,22557,22560,22777,22778,22880,23159,23194,23167,23186,23195,23207,23411,23409,23506,23500,23507,23504,23562,23563,23601,23884,23888,23860,23879,24061,24133,24125,24128,24131,24190,24266,24257,24258,24260,24380,24429,24489,24490,24488,24785,24801,24754,24758,24800,24860,24867,24826,24853,24816,24827,24820,24936,24817,24846,24822,24841,24832,24850,25119,25161,25507,25484,25551,25536,25577,25545,25542,25549,25554,25571,25552,25569,25558,25581,25582,25462,25588,25578,25563,25682,25562,25593,25950,25958,25954,25955,26001,26000,26031,26222,26224,26228,26230,26223,26257,26234,26238,26231,26366,26367,26399,26397,26874,26837,26848,26840,26839,26885,26847,26869,26862,26855,26873,26834,26866,26851,26827,26829,26893,26898,26894,26825,26842,26990,26875,27454,27450,27453,27544,27542,27580,27631,27694,27695,27692,28207,28216,28244,28193,28210,28263,28234,28192,28197,28195,28187,28251,28248,28196,28246,28270,28205,28198,28271,28212,28237,28218,28204,28227,28189,28222,28363,28297,28185,28238,28259,28228,28274,28265,28255,28953,28954,28966,28976,28961,28982,29038,28956,29260,29316,29312,29494,29477,29492,29481,29754,29738,29747,29730,29733,29749,29750,29748,29743,29723,29734,29736,29989,29990,30059,30058,30178,30171,30179,30169,30168,30174,30176,30331,30332,30358,30355,30388,30428,30543,30701,30813,30828,30831,31245,31240,31243,31237,31232,31384,31383,31382,31461,31459,31561,31574,31558,31568,31570,31572,31565,31563,31567,31569,31903,31909,32094,32080,32104,32085,32043,32110,32114,32097,32102,32098,32112,32115,21892,32724,32725,32779,32850,32901,33109,33108,33099,33105,33102,33081,33094,33086,33100,33107,33140,33298,33308,33769,33795,33784,33805,33760,33733,33803,33729,33775,33777,33780,33879,33802,33776,33804,33740,33789,33778,33738,33848,33806,33796,33756,33799,33748,33759,34395,34527,34521,34541,34516,34523,34532,34512,34526,34903,35009,35010,34993,35203,35222,35387,35424,35413,35422,35388,35393,35412,35419,35408,35398,35380,35386,35382,35414,35937,35970,36015,36028,36019,36029,36033,36027,36032,36020,36023,36022,36031,36024,36234,36229,36225,36302,36317,36299,36314,36305,36300,36315,36294,36603,36600,36604,36764,36910,36917,36913,36920,36914,36918,37122,37109,37129,37118,37219,37221,37327,37396,37397,37411,37385,37406,37389,37392,37383,37393,38292,38287,38283,38289,38291,38290,38286,38538,38542,38539,38525,38533,38534,38541,38514,38532,38593,38597,38596,38598,38599,38639,38642,38860,38917,38918,38920,39143,39146,39151,39145,39154,39149,39342,39341,40643,40653,40657,20098,20653,20661,20658,20659,20677,20670,20652,20663,20667,20655,20679,21119,21111,21117,21215,21222,21220,21218,21219,21295,21983,21992,21971,21990,21966,21980,21959,21969,21987,21988,21999,21978,21985,21957,21958,21989,21961,22290,22291,22622,22609,22616,22615,22618,22612,22635,22604,22637,22602,22626,22610,22603,22887,23233,23241,23244,23230,23229,23228,23219,23234,23218,23913,23919,24140,24185,24265,24264,24338,24409,24492,24494,24858,24847,24904,24863,24819,24859,24825,24833,24840,24910,24908,24900,24909,24894,24884,24871,24845,24838,24887,25121,25122,25619,25662,25630,25642,25645,25661,25644,25615,25628,25620,25613,25654,25622,25623,25606,25964,26015,26032,26263,26249,26247,26248,26262,26244,26264,26253,26371,27028,26989,26970,26999,26976,26964,26997,26928,27010,26954,26984,26987,26974,26963,27001,27014,26973,26979,26971,27463,27506,27584,27583,27603,27645,28322,28335,28371,28342,28354,28304,28317,28359,28357,28325,28312,28348,28346,28331,28369,28310,28316,28356,28372,28330,28327,28340,29006,29017,29033,29028,29001,29031,29020,29036,29030,29004,29029,29022,28998,29032,29014,29242,29266,29495,29509,29503,29502,29807,29786,29781,29791,29790,29761,29759,29785,29787,29788,30070,30072,30208,30192,30209,30194,30193,30202,30207,30196,30195,30430,30431,30555,30571,30566,30558,30563,30585,30570,30572,30556,30565,30568,30562,30702,30862,30896,30871,30872,30860,30857,30844,30865,30867,30847,31098,31103,31105,33836,31165,31260,31258,31264,31252,31263,31262,31391,31392,31607,31680,31584,31598,31591,31921,31923,31925,32147,32121,32145,32129,32143,32091,32622,32617,32618,32626,32681,32680,32676,32854,32856,32902,32900,33137,33136,33144,33125,33134,33139,33131,33145,33146,33126,33285,33351,33922,33911,33853,33841,33909,33894,33899,33865,33900,33883,33852,33845,33889,33891,33897,33901,33862,34398,34396,34399,34553,34579,34568,34567,34560,34558,34555,34562,34563,34566,34570,34905,35039,35028,35033,35036,35032,35037,35041,35018,35029,35026,35228,35299,35435,35442,35443,35430,35433,35440,35463,35452,35427,35488,35441,35461,35437,35426,35438,35436,35449,35451,35390,35432,35938,35978,35977,36042,36039,36040,36036,36018,36035,36034,36037,36321,36319,36328,36335,36339,36346,36330,36324,36326,36530,36611,36617,36606,36618,36767,36786,36939,36938,36947,36930,36948,36924,36949,36944,36935,36943,36942,36941,36945,36926,36929,37138,37143,37228,37226,37225,37321,37431,37463,37432,37437,37440,37438,37467,37451,37476,37457,37428,37449,37453,37445,37433,37439,37466,38296,38552,38548,38549,38605,38603,38601,38602,38647,38651,38649,38646,38742,38772,38774,38928,38929,38931,38922,38930,38924,39164,39156,39165,39166,39347,39345,39348,39649,40169,40578,40718,40723,40736,20711,20718,20709,20694,20717,20698,20693,20687,20689,20721,20686,20713,20834,20979,21123,21122,21297,21421,22014,22016,22043,22039,22013,22036,22022,22025,22029,22030,22007,22038,22047,22024,22032,22006,22296,22294,22645,22654,22659,22675,22666,22649,22661,22653,22781,22821,22818,22820,22890,22889,23265,23270,23273,23255,23254,23256,23267,23413,23518,23527,23521,23525,23526,23528,23522,23524,23519,23565,23650,23940,23943,24155,24163,24149,24151,24148,24275,24278,24330,24390,24432,24505,24903,24895,24907,24951,24930,24931,24927,24922,24920,24949,25130,25735,25688,25684,25764,25720,25695,25722,25681,25703,25652,25709,25723,25970,26017,26071,26070,26274,26280,26269,27036,27048,27029,27073,27054,27091,27083,27035,27063,27067,27051,27060,27088,27085,27053,27084,27046,27075,27043,27465,27468,27699,28467,28436,28414,28435,28404,28457,28478,28448,28460,28431,28418,28450,28415,28399,28422,28465,28472,28466,28451,28437,28459,28463,28552,28458,28396,28417,28402,28364,28407,29076,29081,29053,29066,29060,29074,29246,29330,29334,29508,29520,29796,29795,29802,29808,29805,29956,30097,30247,30221,30219,30217,30227,30433,30435,30596,30589,30591,30561,30913,30879,30887,30899,30889,30883,31118,31119,31117,31278,31281,31402,31401,31469,31471,31649,31637,31627,31605,31639,31645,31636,31631,31672,31623,31620,31929,31933,31934,32187,32176,32156,32189,32190,32160,32202,32180,32178,32177,32186,32162,32191,32181,32184,32173,32210,32199,32172,32624,32736,32737,32735,32862,32858,32903,33104,33152,33167,33160,33162,33151,33154,33255,33274,33287,33300,33310,33355,33993,33983,33990,33988,33945,33950,33970,33948,33995,33976,33984,34003,33936,33980,34001,33994,34623,34588,34619,34594,34597,34612,34584,34645,34615,34601,35059,35074,35060,35065,35064,35069,35048,35098,35055,35494,35468,35486,35491,35469,35489,35475,35492,35498,35493,35496,35480,35473,35482,35495,35946,35981,35980,36051,36049,36050,36203,36249,36245,36348,36628,36626,36629,36627,36771,36960,36952,36956,36963,36953,36958,36962,36957,36955,37145,37144,37150,37237,37240,37239,37236,37496,37504,37509,37528,37526,37499,37523,37532,37544,37500,37521,38305,38312,38313,38307,38309,38308,38553,38556,38555,38604,38610,38656,38780,38789,38902,38935,38936,39087,39089,39171,39173,39180,39177,39361,39599,39600,39654,39745,39746,40180,40182,40179,40636,40763,40778,20740,20736,20731,20725,20729,20738,20744,20745,20741,20956,21127,21128,21129,21133,21130,21232,21426,22062,22075,22073,22066,22079,22068,22057,22099,22094,22103,22132,22070,22063,22064,22656,22687,22686,22707,22684,22702,22697,22694,22893,23305,23291,23307,23285,23308,23304,23534,23532,23529,23531,23652,23653,23965,23956,24162,24159,24161,24290,24282,24287,24285,24291,24288,24392,24433,24503,24501,24950,24935,24942,24925,24917,24962,24956,24944,24939,24958,24999,24976,25003,24974,25004,24986,24996,24980,25006,25134,25705,25711,25721,25758,25778,25736,25744,25776,25765,25747,25749,25769,25746,25774,25773,25771,25754,25772,25753,25762,25779,25973,25975,25976,26286,26283,26292,26289,27171,27167,27112,27137,27166,27161,27133,27169,27155,27146,27123,27138,27141,27117,27153,27472,27470,27556,27589,27590,28479,28540,28548,28497,28518,28500,28550,28525,28507,28536,28526,28558,28538,28528,28516,28567,28504,28373,28527,28512,28511,29087,29100,29105,29096,29270,29339,29518,29527,29801,29835,29827,29822,29824,30079,30240,30249,30239,30244,30246,30241,30242,30362,30394,30436,30606,30599,30604,30609,30603,30923,30917,30906,30922,30910,30933,30908,30928,31295,31292,31296,31293,31287,31291,31407,31406,31661,31665,31684,31668,31686,31687,31681,31648,31692,31946,32224,32244,32239,32251,32216,32236,32221,32232,32227,32218,32222,32233,32158,32217,32242,32249,32629,32631,32687,32745,32806,33179,33180,33181,33184,33178,33176,34071,34109,34074,34030,34092,34093,34067,34065,34083,34081,34068,34028,34085,34047,34054,34690,34676,34678,34656,34662,34680,34664,34649,34647,34636,34643,34907,34909,35088,35079,35090,35091,35093,35082,35516,35538,35527,35524,35477,35531,35576,35506,35529,35522,35519,35504,35542,35533,35510,35513,35547,35916,35918,35948,36064,36062,36070,36068,36076,36077,36066,36067,36060,36074,36065,36205,36255,36259,36395,36368,36381,36386,36367,36393,36383,36385,36382,36538,36637,36635,36639,36649,36646,36650,36636,36638,36645,36969,36974,36968,36973,36983,37168,37165,37159,37169,37255,37257,37259,37251,37573,37563,37559,37610,37548,37604,37569,37555,37564,37586,37575,37616,37554,38317,38321,38660,38662,38663,38665,38752,38797,38795,38799,38945,38955,38940,39091,39178,39187,39186,39192,39389,39376,39391,39387,39377,39381,39378,39385,39607,39662,39663,39719,39749,39748,39799,39791,40198,40201,40195,40617,40638,40654,22696,40786,20754,20760,20756,20752,20757,20864,20906,20957,21137,21139,21235,22105,22123,22137,22121,22116,22136,22122,22120,22117,22129,22127,22124,22114,22134,22721,22718,22727,22725,22894,23325,23348,23416,23536,23566,24394,25010,24977,25001,24970,25037,25014,25022,25034,25032,25136,25797,25793,25803,25787,25788,25818,25796,25799,25794,25805,25791,25810,25812,25790,25972,26310,26313,26297,26308,26311,26296,27197,27192,27194,27225,27243,27224,27193,27204,27234,27233,27211,27207,27189,27231,27208,27481,27511,27653,28610,28593,28577,28611,28580,28609,28583,28595,28608,28601,28598,28582,28576,28596,29118,29129,29136,29138,29128,29141,29113,29134,29145,29148,29123,29124,29544,29852,29859,29848,29855,29854,29922,29964,29965,30260,30264,30266,30439,30437,30624,30622,30623,30629,30952,30938,30956,30951,31142,31309,31310,31302,31308,31307,31418,31705,31761,31689,31716,31707,31713,31721,31718,31957,31958,32266,32273,32264,32283,32291,32286,32285,32265,32272,32633,32690,32752,32753,32750,32808,33203,33193,33192,33275,33288,33368,33369,34122,34137,34120,34152,34153,34115,34121,34157,34154,34142,34691,34719,34718,34722,34701,34913,35114,35122,35109,35115,35105,35242,35238,35558,35578,35563,35569,35584,35548,35559,35566,35582,35585,35586,35575,35565,35571,35574,35580,35947,35949,35987,36084,36420,36401,36404,36418,36409,36405,36667,36655,36664,36659,36776,36774,36981,36980,36984,36978,36988,36986,37172,37266,37664,37686,37624,37683,37679,37666,37628,37675,37636,37658,37648,37670,37665,37653,37678,37657,38331,38567,38568,38570,38613,38670,38673,38678,38669,38675,38671,38747,38748,38758,38808,38960,38968,38971,38967,38957,38969,38948,39184,39208,39198,39195,39201,39194,39405,39394,39409,39608,39612,39675,39661,39720,39825,40213,40227,40230,40232,40210,40219,40664,40660,40845,40860,20778,20767,20769,20786,21237,22158,22144,22160,22149,22151,22159,22741,22739,22737,22734,23344,23338,23332,23418,23607,23656,23996,23994,23997,23992,24171,24396,24509,25033,25026,25031,25062,25035,25138,25140,25806,25802,25816,25824,25840,25830,25836,25841,25826,25837,25986,25987,26329,26326,27264,27284,27268,27298,27292,27355,27299,27262,27287,27280,27296,27484,27566,27610,27656,28632,28657,28639,28640,28635,28644,28651,28655,28544,28652,28641,28649,28629,28654,28656,29159,29151,29166,29158,29157,29165,29164,29172,29152,29237,29254,29552,29554,29865,29872,29862,29864,30278,30274,30284,30442,30643,30634,30640,30636,30631,30637,30703,30967,30970,30964,30959,30977,31143,31146,31319,31423,31751,31757,31742,31735,31756,31712,31968,31964,31966,31970,31967,31961,31965,32302,32318,32326,32311,32306,32323,32299,32317,32305,32325,32321,32308,32313,32328,32309,32319,32303,32580,32755,32764,32881,32882,32880,32879,32883,33222,33219,33210,33218,33216,33215,33213,33225,33214,33256,33289,33393,34218,34180,34174,34204,34193,34196,34223,34203,34183,34216,34186,34407,34752,34769,34739,34770,34758,34731,34747,34746,34760,34763,35131,35126,35140,35128,35133,35244,35598,35607,35609,35611,35594,35616,35613,35588,35600,35905,35903,35955,36090,36093,36092,36088,36091,36264,36425,36427,36424,36426,36676,36670,36674,36677,36671,36991,36989,36996,36993,36994,36992,37177,37283,37278,37276,37709,37762,37672,37749,37706,37733,37707,37656,37758,37740,37723,37744,37722,37716,38346,38347,38348,38344,38342,38577,38584,38614,38684,38686,38816,38867,38982,39094,39221,39425,39423,39854,39851,39850,39853,40251,40255,40587,40655,40670,40668,40669,40667,40766,40779,21474,22165,22190,22745,22744,23352,24413,25059,25139,25844,25842,25854,25862,25850,25851,25847,26039,26332,26406,27315,27308,27331,27323,27320,27330,27310,27311,27487,27512,27567,28681,28683,28670,28678,28666,28689,28687,29179,29180,29182,29176,29559,29557,29863,29887,29973,30294,30296,30290,30653,30655,30651,30652,30990,31150,31329,31330,31328,31428,31429,31787,31783,31786,31774,31779,31777,31975,32340,32341,32350,32346,32353,32338,32345,32584,32761,32763,32887,32886,33229,33231,33290,34255,34217,34253,34256,34249,34224,34234,34233,34214,34799,34796,34802,34784,35206,35250,35316,35624,35641,35628,35627,35920,36101,36441,36451,36454,36452,36447,36437,36544,36681,36685,36999,36995,37000,37291,37292,37328,37780,37770,37782,37794,37811,37806,37804,37808,37784,37786,37783,38356,38358,38352,38357,38626,38620,38617,38619,38622,38692,38819,38822,38829,38905,38989,38991,38988,38990,38995,39098,39230,39231,39229,39214,39333,39438,39617,39683,39686,39759,39758,39757,39882,39881,39933,39880,39872,40273,40285,40288,40672,40725,40748,20787,22181,22750,22751,22754,23541,40848,24300,25074,25079,25078,25077,25856,25871,26336,26333,27365,27357,27354,27347,28699,28703,28712,28698,28701,28693,28696,29190,29197,29272,29346,29560,29562,29885,29898,29923,30087,30086,30303,30305,30663,31001,31153,31339,31337,31806,31807,31800,31805,31799,31808,32363,32365,32377,32361,32362,32645,32371,32694,32697,32696,33240,34281,34269,34282,34261,34276,34277,34295,34811,34821,34829,34809,34814,35168,35167,35158,35166,35649,35676,35672,35657,35674,35662,35663,35654,35673,36104,36106,36476,36466,36487,36470,36460,36474,36468,36692,36686,36781,37002,37003,37297,37294,37857,37841,37855,37827,37832,37852,37853,37846,37858,37837,37848,37860,37847,37864,38364,38580,38627,38698,38695,38753,38876,38907,39006,39000,39003,39100,39237,39241,39446,39449,39693,39912,39911,39894,39899,40329,40289,40306,40298,40300,40594,40599,40595,40628,21240,22184,22199,22198,22196,22204,22756,23360,23363,23421,23542,24009,25080,25082,25880,25876,25881,26342,26407,27372,28734,28720,28722,29200,29563,29903,30306,30309,31014,31018,31020,31019,31431,31478,31820,31811,31821,31983,31984,36782,32381,32380,32386,32588,32768,33242,33382,34299,34297,34321,34298,34310,34315,34311,34314,34836,34837,35172,35258,35320,35696,35692,35686,35695,35679,35691,36111,36109,36489,36481,36485,36482,37300,37323,37912,37891,37885,38369,38704,39108,39250,39249,39336,39467,39472,39479,39477,39955,39949,40569,40629,40680,40751,40799,40803,40801,20791,20792,22209,22208,22210,22804,23660,24013,25084,25086,25885,25884,26005,26345,27387,27396,27386,27570,28748,29211,29351,29910,29908,30313,30675,31824,32399,32396,32700,34327,34349,34330,34851,34850,34849,34847,35178,35180,35261,35700,35703,35709,36115,36490,36493,36491,36703,36783,37306,37934,37939,37941,37946,37944,37938,37931,38370,38712,38713,38706,38911,39015,39013,39255,39493,39491,39488,39486,39631,39764,39761,39981,39973,40367,40372,40386,40376,40605,40687,40729,40796,40806,40807,20796,20795,22216,22218,22217,23423,24020,24018,24398,25087,25892,27402,27489,28753,28760,29568,29924,30090,30318,30316,31155,31840,31839,32894,32893,33247,35186,35183,35324,35712,36118,36119,36497,36499,36705,37192,37956,37969,37970,38717,38718,38851,38849,39019,39253,39509,39501,39634,39706,40009,39985,39998,39995,40403,40407,40756,40812,40810,40852,22220,24022,25088,25891,25899,25898,26348,27408,29914,31434,31844,31843,31845,32403,32406,32404,33250,34360,34367,34865,35722,37008,37007,37987,37984,37988,38760,39023,39260,39514,39515,39511,39635,39636,39633,40020,40023,40022,40421,40607,40692,22225,22761,25900,28766,30321,30322,30679,32592,32648,34870,34873,34914,35731,35730,35734,33399,36123,37312,37994,38722,38728,38724,38854,39024,39519,39714,39768,40031,40441,40442,40572,40573,40711,40823,40818,24307,27414,28771,31852,31854,34875,35264,36513,37313,38002,38000,39025,39262,39638,39715,40652,28772,30682,35738,38007,38857,39522,39525,32412,35740,36522,37317,38013,38014,38012,40055,40056,40695,35924,38015,40474,29224,39530,39729,40475,40478,31858,9312,9313,9314,9315,9316,9317,9318,9319,9320,9321,9332,9333,9334,9335,9336,9337,9338,9339,9340,9341,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,20022,20031,20101,20128,20866,20886,20907,21241,21304,21353,21430,22794,23424,24027,12083,24191,24308,24400,24417,25908,26080,30098,30326,36789,38582,168,710,12541,12542,12445,12446,12291,20189,12293,12294,12295,12540,65339,65341,10045,12353,12354,12355,12356,12357,12358,12359,12360,12361,12362,12363,12364,12365,12366,12367,12368,12369,12370,12371,12372,12373,12374,12375,12376,12377,12378,12379,12380,12381,12382,12383,12384,12385,12386,12387,12388,12389,12390,12391,12392,12393,12394,12395,12396,12397,12398,12399,12400,12401,12402,12403,12404,12405,12406,12407,12408,12409,12410,12411,12412,12413,12414,12415,12416,12417,12418,12419,12420,12421,12422,12423,12424,12425,12426,12427,12428,12429,12430,12431,12432,12433,12434,12435,12449,12450,12451,12452,12453,12454,12455,12456,12457,12458,12459,12460,12461,12462,12463,12464,12465,12466,12467,12468,12469,12470,12471,12472,12473,12474,12475,12476,12477,12478,12479,12480,12481,12482,12483,12484,12485,12486,12487,12488,12489,12490,12491,12492,12493,12494,12495,12496,12497,12498,12499,12500,12501,12502,12503,12504,12505,12506,12507,12508,12509,12510,12511,12512,12513,12514,12515,12516,12517,12518,12519,12520,12521,12522,12523,12524,12525,12526,12527,12528,12529,12530,12531,12532,12533,12534,1040,1041,1042,1043,1044,1045,1025,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1105,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,8679,8632,8633,12751,131276,20058,131210,20994,17553,40880,20872,40881,161287,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,65506,65508,65287,65282,12849,8470,8481,12443,12444,11904,11908,11910,11911,11912,11914,11916,11917,11925,11932,11933,11941,11943,11946,11948,11950,11958,11964,11966,11974,11978,11980,11981,11983,11990,11991,11998,12003,null,null,null,643,592,603,596,629,339,248,331,650,618,20034,20060,20981,21274,21378,19975,19980,20039,20109,22231,64012,23662,24435,19983,20871,19982,20014,20115,20162,20169,20168,20888,21244,21356,21433,22304,22787,22828,23568,24063,26081,27571,27596,27668,29247,20017,20028,20200,20188,20201,20193,20189,20186,21004,21276,21324,22306,22307,22807,22831,23425,23428,23570,23611,23668,23667,24068,24192,24194,24521,25097,25168,27669,27702,27715,27711,27707,29358,29360,29578,31160,32906,38430,20238,20248,20268,20213,20244,20209,20224,20215,20232,20253,20226,20229,20258,20243,20228,20212,20242,20913,21011,21001,21008,21158,21282,21279,21325,21386,21511,22241,22239,22318,22314,22324,22844,22912,22908,22917,22907,22910,22903,22911,23382,23573,23589,23676,23674,23675,23678,24031,24181,24196,24322,24346,24436,24533,24532,24527,25180,25182,25188,25185,25190,25186,25177,25184,25178,25189,26095,26094,26430,26425,26424,26427,26426,26431,26428,26419,27672,27718,27730,27740,27727,27722,27732,27723,27724,28785,29278,29364,29365,29582,29994,30335,31349,32593,33400,33404,33408,33405,33407,34381,35198,37017,37015,37016,37019,37012,38434,38436,38432,38435,20310,20283,20322,20297,20307,20324,20286,20327,20306,20319,20289,20312,20269,20275,20287,20321,20879,20921,21020,21022,21025,21165,21166,21257,21347,21362,21390,21391,21552,21559,21546,21588,21573,21529,21532,21541,21528,21565,21583,21569,21544,21540,21575,22254,22247,22245,22337,22341,22348,22345,22347,22354,22790,22848,22950,22936,22944,22935,22926,22946,22928,22927,22951,22945,23438,23442,23592,23594,23693,23695,23688,23691,23689,23698,23690,23686,23699,23701,24032,24074,24078,24203,24201,24204,24200,24205,24325,24349,24440,24438,24530,24529,24528,24557,24552,24558,24563,24545,24548,24547,24570,24559,24567,24571,24576,24564,25146,25219,25228,25230,25231,25236,25223,25201,25211,25210,25200,25217,25224,25207,25213,25202,25204,25911,26096,26100,26099,26098,26101,26437,26439,26457,26453,26444,26440,26461,26445,26458,26443,27600,27673,27674,27768,27751,27755,27780,27787,27791,27761,27759,27753,27802,27757,27783,27797,27804,27750,27763,27749,27771,27790,28788,28794,29283,29375,29373,29379,29382,29377,29370,29381,29589,29591,29587,29588,29586,30010,30009,30100,30101,30337,31037,32820,32917,32921,32912,32914,32924,33424,33423,33413,33422,33425,33427,33418,33411,33412,35960,36809,36799,37023,37025,37029,37022,37031,37024,38448,38440,38447,38445,20019,20376,20348,20357,20349,20352,20359,20342,20340,20361,20356,20343,20300,20375,20330,20378,20345,20353,20344,20368,20380,20372,20382,20370,20354,20373,20331,20334,20894,20924,20926,21045,21042,21043,21062,21041,21180,21258,21259,21308,21394,21396,21639,21631,21633,21649,21634,21640,21611,21626,21630,21605,21612,21620,21606,21645,21615,21601,21600,21656,21603,21607,21604,22263,22265,22383,22386,22381,22379,22385,22384,22390,22400,22389,22395,22387,22388,22370,22376,22397,22796,22853,22965,22970,22991,22990,22962,22988,22977,22966,22972,22979,22998,22961,22973,22976,22984,22964,22983,23394,23397,23443,23445,23620,23623,23726,23716,23712,23733,23727,23720,23724,23711,23715,23725,23714,23722,23719,23709,23717,23734,23728,23718,24087,24084,24089,24360,24354,24355,24356,24404,24450,24446,24445,24542,24549,24621,24614,24601,24626,24587,24628,24586,24599,24627,24602,24606,24620,24610,24589,24592,24622,24595,24593,24588,24585,24604,25108,25149,25261,25268,25297,25278,25258,25270,25290,25262,25267,25263,25275,25257,25264,25272,25917,26024,26043,26121,26108,26116,26130,26120,26107,26115,26123,26125,26117,26109,26129,26128,26358,26378,26501,26476,26510,26514,26486,26491,26520,26502,26500,26484,26509,26508,26490,26527,26513,26521,26499,26493,26497,26488,26489,26516,27429,27520,27518,27614,27677,27795,27884,27883,27886,27865,27830,27860,27821,27879,27831,27856,27842,27834,27843,27846,27885,27890,27858,27869,27828,27786,27805,27776,27870,27840,27952,27853,27847,27824,27897,27855,27881,27857,28820,28824,28805,28819,28806,28804,28817,28822,28802,28826,28803,29290,29398,29387,29400,29385,29404,29394,29396,29402,29388,29393,29604,29601,29613,29606,29602,29600,29612,29597,29917,29928,30015,30016,30014,30092,30104,30383,30451,30449,30448,30453,30712,30716,30713,30715,30714,30711,31042,31039,31173,31352,31355,31483,31861,31997,32821,32911,32942,32931,32952,32949,32941,33312,33440,33472,33451,33434,33432,33435,33461,33447,33454,33468,33438,33466,33460,33448,33441,33449,33474,33444,33475,33462,33442,34416,34415,34413,34414,35926,36818,36811,36819,36813,36822,36821,36823,37042,37044,37039,37043,37040,38457,38461,38460,38458,38467,20429,20421,20435,20402,20425,20427,20417,20436,20444,20441,20411,20403,20443,20423,20438,20410,20416,20409,20460,21060,21065,21184,21186,21309,21372,21399,21398,21401,21400,21690,21665,21677,21669,21711,21699,33549,21687,21678,21718,21686,21701,21702,21664,21616,21692,21666,21694,21618,21726,21680,22453,22430,22431,22436,22412,22423,22429,22427,22420,22424,22415,22425,22437,22426,22421,22772,22797,22867,23009,23006,23022,23040,23025,23005,23034,23037,23036,23030,23012,23026,23031,23003,23017,23027,23029,23008,23038,23028,23021,23464,23628,23760,23768,23756,23767,23755,23771,23774,23770,23753,23751,23754,23766,23763,23764,23759,23752,23750,23758,23775,23800,24057,24097,24098,24099,24096,24100,24240,24228,24226,24219,24227,24229,24327,24366,24406,24454,24631,24633,24660,24690,24670,24645,24659,24647,24649,24667,24652,24640,24642,24671,24612,24644,24664,24678,24686,25154,25155,25295,25357,25355,25333,25358,25347,25323,25337,25359,25356,25336,25334,25344,25363,25364,25338,25365,25339,25328,25921,25923,26026,26047,26166,26145,26162,26165,26140,26150,26146,26163,26155,26170,26141,26164,26169,26158,26383,26384,26561,26610,26568,26554,26588,26555,26616,26584,26560,26551,26565,26603,26596,26591,26549,26573,26547,26615,26614,26606,26595,26562,26553,26574,26599,26608,26546,26620,26566,26605,26572,26542,26598,26587,26618,26569,26570,26563,26602,26571,27432,27522,27524,27574,27606,27608,27616,27680,27681,27944,27956,27949,27935,27964,27967,27922,27914,27866,27955,27908,27929,27962,27930,27921,27904,27933,27970,27905,27928,27959,27907,27919,27968,27911,27936,27948,27912,27938,27913,27920,28855,28831,28862,28849,28848,28833,28852,28853,28841,29249,29257,29258,29292,29296,29299,29294,29386,29412,29416,29419,29407,29418,29414,29411,29573,29644,29634,29640,29637,29625,29622,29621,29620,29675,29631,29639,29630,29635,29638,29624,29643,29932,29934,29998,30023,30024,30119,30122,30329,30404,30472,30467,30468,30469,30474,30455,30459,30458,30695,30696,30726,30737,30738,30725,30736,30735,30734,30729,30723,30739,31050,31052,31051,31045,31044,31189,31181,31183,31190,31182,31360,31358,31441,31488,31489,31866,31864,31865,31871,31872,31873,32003,32008,32001,32600,32657,32653,32702,32775,32782,32783,32788,32823,32984,32967,32992,32977,32968,32962,32976,32965,32995,32985,32988,32970,32981,32969,32975,32983,32998,32973,33279,33313,33428,33497,33534,33529,33543,33512,33536,33493,33594,33515,33494,33524,33516,33505,33522,33525,33548,33531,33526,33520,33514,33508,33504,33530,33523,33517,34423,34420,34428,34419,34881,34894,34919,34922,34921,35283,35332,35335,36210,36835,36833,36846,36832,37105,37053,37055,37077,37061,37054,37063,37067,37064,37332,37331,38484,38479,38481,38483,38474,38478,20510,20485,20487,20499,20514,20528,20507,20469,20468,20531,20535,20524,20470,20471,20503,20508,20512,20519,20533,20527,20529,20494,20826,20884,20883,20938,20932,20933,20936,20942,21089,21082,21074,21086,21087,21077,21090,21197,21262,21406,21798,21730,21783,21778,21735,21747,21732,21786,21759,21764,21768,21739,21777,21765,21745,21770,21755,21751,21752,21728,21774,21763,21771,22273,22274,22476,22578,22485,22482,22458,22470,22461,22460,22456,22454,22463,22471,22480,22457,22465,22798,22858,23065,23062,23085,23086,23061,23055,23063,23050,23070,23091,23404,23463,23469,23468,23555,23638,23636,23788,23807,23790,23793,23799,23808,23801,24105,24104,24232,24238,24234,24236,24371,24368,24423,24669,24666,24679,24641,24738,24712,24704,24722,24705,24733,24707,24725,24731,24727,24711,24732,24718,25113,25158,25330,25360,25430,25388,25412,25413,25398,25411,25572,25401,25419,25418,25404,25385,25409,25396,25432,25428,25433,25389,25415,25395,25434,25425,25400,25431,25408,25416,25930,25926,26054,26051,26052,26050,26186,26207,26183,26193,26386,26387,26655,26650,26697,26674,26675,26683,26699,26703,26646,26673,26652,26677,26667,26669,26671,26702,26692,26676,26653,26642,26644,26662,26664,26670,26701,26682,26661,26656,27436,27439,27437,27441,27444,27501,32898,27528,27622,27620,27624,27619,27618,27623,27685,28026,28003,28004,28022,27917,28001,28050,27992,28002,28013,28015,28049,28045,28143,28031,28038,27998,28007,28000,28055,28016,28028,27999,28034,28056,27951,28008,28043,28030,28032,28036,27926,28035,28027,28029,28021,28048,28892,28883,28881,28893,28875,32569,28898,28887,28882,28894,28896,28884,28877,28869,28870,28871,28890,28878,28897,29250,29304,29303,29302,29440,29434,29428,29438,29430,29427,29435,29441,29651,29657,29669,29654,29628,29671,29667,29673,29660,29650,29659,29652,29661,29658,29655,29656,29672,29918,29919,29940,29941,29985,30043,30047,30128,30145,30139,30148,30144,30143,30134,30138,30346,30409,30493,30491,30480,30483,30482,30499,30481,30485,30489,30490,30498,30503,30755,30764,30754,30773,30767,30760,30766,30763,30753,30761,30771,30762,30769,31060,31067,31055,31068,31059,31058,31057,31211,31212,31200,31214,31213,31210,31196,31198,31197,31366,31369,31365,31371,31372,31370,31367,31448,31504,31492,31507,31493,31503,31496,31498,31502,31497,31506,31876,31889,31882,31884,31880,31885,31877,32030,32029,32017,32014,32024,32022,32019,32031,32018,32015,32012,32604,32609,32606,32608,32605,32603,32662,32658,32707,32706,32704,32790,32830,32825,33018,33010,33017,33013,33025,33019,33024,33281,33327,33317,33587,33581,33604,33561,33617,33573,33622,33599,33601,33574,33564,33570,33602,33614,33563,33578,33544,33596,33613,33558,33572,33568,33591,33583,33577,33607,33605,33612,33619,33566,33580,33611,33575,33608,34387,34386,34466,34472,34454,34445,34449,34462,34439,34455,34438,34443,34458,34437,34469,34457,34465,34471,34453,34456,34446,34461,34448,34452,34883,34884,34925,34933,34934,34930,34944,34929,34943,34927,34947,34942,34932,34940,35346,35911,35927,35963,36004,36003,36214,36216,36277,36279,36278,36561,36563,36862,36853,36866,36863,36859,36868,36860,36854,37078,37088,37081,37082,37091,37087,37093,37080,37083,37079,37084,37092,37200,37198,37199,37333,37346,37338,38492,38495,38588,39139,39647,39727,20095,20592,20586,20577,20574,20576,20563,20555,20573,20594,20552,20557,20545,20571,20554,20578,20501,20549,20575,20585,20587,20579,20580,20550,20544,20590,20595,20567,20561,20944,21099,21101,21100,21102,21206,21203,21293,21404,21877,21878,21820,21837,21840,21812,21802,21841,21858,21814,21813,21808,21842,21829,21772,21810,21861,21838,21817,21832,21805,21819,21824,21835,22282,22279,22523,22548,22498,22518,22492,22516,22528,22509,22525,22536,22520,22539,22515,22479,22535,22510,22499,22514,22501,22508,22497,22542,22524,22544,22503,22529,22540,22513,22505,22512,22541,22532,22876,23136,23128,23125,23143,23134,23096,23093,23149,23120,23135,23141,23148,23123,23140,23127,23107,23133,23122,23108,23131,23112,23182,23102,23117,23097,23116,23152,23145,23111,23121,23126,23106,23132,23410,23406,23489,23488,23641,23838,23819,23837,23834,23840,23820,23848,23821,23846,23845,23823,23856,23826,23843,23839,23854,24126,24116,24241,24244,24249,24242,24243,24374,24376,24475,24470,24479,24714,24720,24710,24766,24752,24762,24787,24788,24783,24804,24793,24797,24776,24753,24795,24759,24778,24767,24771,24781,24768,25394,25445,25482,25474,25469,25533,25502,25517,25501,25495,25515,25486,25455,25479,25488,25454,25519,25461,25500,25453,25518,25468,25508,25403,25503,25464,25477,25473,25489,25485,25456,25939,26061,26213,26209,26203,26201,26204,26210,26392,26745,26759,26768,26780,26733,26734,26798,26795,26966,26735,26787,26796,26793,26741,26740,26802,26767,26743,26770,26748,26731,26738,26794,26752,26737,26750,26779,26774,26763,26784,26761,26788,26744,26747,26769,26764,26762,26749,27446,27443,27447,27448,27537,27535,27533,27534,27532,27690,28096,28075,28084,28083,28276,28076,28137,28130,28087,28150,28116,28160,28104,28128,28127,28118,28094,28133,28124,28125,28123,28148,28106,28093,28141,28144,28090,28117,28098,28111,28105,28112,28146,28115,28157,28119,28109,28131,28091,28922,28941,28919,28951,28916,28940,28912,28932,28915,28944,28924,28927,28934,28947,28928,28920,28918,28939,28930,28942,29310,29307,29308,29311,29469,29463,29447,29457,29464,29450,29448,29439,29455,29470,29576,29686,29688,29685,29700,29697,29693,29703,29696,29690,29692,29695,29708,29707,29684,29704,30052,30051,30158,30162,30159,30155,30156,30161,30160,30351,30345,30419,30521,30511,30509,30513,30514,30516,30515,30525,30501,30523,30517,30792,30802,30793,30797,30794,30796,30758,30789,30800,31076,31079,31081,31082,31075,31083,31073,31163,31226,31224,31222,31223,31375,31380,31376,31541,31559,31540,31525,31536,31522,31524,31539,31512,31530,31517,31537,31531,31533,31535,31538,31544,31514,31523,31892,31896,31894,31907,32053,32061,32056,32054,32058,32069,32044,32041,32065,32071,32062,32063,32074,32059,32040,32611,32661,32668,32669,32667,32714,32715,32717,32720,32721,32711,32719,32713,32799,32798,32795,32839,32835,32840,33048,33061,33049,33051,33069,33055,33068,33054,33057,33045,33063,33053,33058,33297,33336,33331,33338,33332,33330,33396,33680,33699,33704,33677,33658,33651,33700,33652,33679,33665,33685,33689,33653,33684,33705,33661,33667,33676,33693,33691,33706,33675,33662,33701,33711,33672,33687,33712,33663,33702,33671,33710,33654,33690,34393,34390,34495,34487,34498,34497,34501,34490,34480,34504,34489,34483,34488,34508,34484,34491,34492,34499,34493,34494,34898,34953,34965,34984,34978,34986,34970,34961,34977,34975,34968,34983,34969,34971,34967,34980,34988,34956,34963,34958,35202,35286,35289,35285,35376,35367,35372,35358,35897,35899,35932,35933,35965,36005,36221,36219,36217,36284,36290,36281,36287,36289,36568,36574,36573,36572,36567,36576,36577,36900,36875,36881,36892,36876,36897,37103,37098,37104,37108,37106,37107,37076,37099,37100,37097,37206,37208,37210,37203,37205,37356,37364,37361,37363,37368,37348,37369,37354,37355,37367,37352,37358,38266,38278,38280,38524,38509,38507,38513,38511,38591,38762,38916,39141,39319,20635,20629,20628,20638,20619,20643,20611,20620,20622,20637,20584,20636,20626,20610,20615,20831,20948,21266,21265,21412,21415,21905,21928,21925,21933,21879,22085,21922,21907,21896,21903,21941,21889,21923,21906,21924,21885,21900,21926,21887,21909,21921,21902,22284,22569,22583,22553,22558,22567,22563,22568,22517,22600,22565,22556,22555,22579,22591,22582,22574,22585,22584,22573,22572,22587,22881,23215,23188,23199,23162,23202,23198,23160,23206,23164,23205,23212,23189,23214,23095,23172,23178,23191,23171,23179,23209,23163,23165,23180,23196,23183,23187,23197,23530,23501,23499,23508,23505,23498,23502,23564,23600,23863,23875,23915,23873,23883,23871,23861,23889,23886,23893,23859,23866,23890,23869,23857,23897,23874,23865,23881,23864,23868,23858,23862,23872,23877,24132,24129,24408,24486,24485,24491,24777,24761,24780,24802,24782,24772,24852,24818,24842,24854,24837,24821,24851,24824,24828,24830,24769,24835,24856,24861,24848,24831,24836,24843,25162,25492,25521,25520,25550,25573,25576,25583,25539,25757,25587,25546,25568,25590,25557,25586,25589,25697,25567,25534,25565,25564,25540,25560,25555,25538,25543,25548,25547,25544,25584,25559,25561,25906,25959,25962,25956,25948,25960,25957,25996,26013,26014,26030,26064,26066,26236,26220,26235,26240,26225,26233,26218,26226,26369,26892,26835,26884,26844,26922,26860,26858,26865,26895,26838,26871,26859,26852,26870,26899,26896,26867,26849,26887,26828,26888,26992,26804,26897,26863,26822,26900,26872,26832,26877,26876,26856,26891,26890,26903,26830,26824,26845,26846,26854,26868,26833,26886,26836,26857,26901,26917,26823,27449,27451,27455,27452,27540,27543,27545,27541,27581,27632,27634,27635,27696,28156,28230,28231,28191,28233,28296,28220,28221,28229,28258,28203,28223,28225,28253,28275,28188,28211,28235,28224,28241,28219,28163,28206,28254,28264,28252,28257,28209,28200,28256,28273,28267,28217,28194,28208,28243,28261,28199,28280,28260,28279,28245,28281,28242,28262,28213,28214,28250,28960,28958,28975,28923,28974,28977,28963,28965,28962,28978,28959,28968,28986,28955,29259,29274,29320,29321,29318,29317,29323,29458,29451,29488,29474,29489,29491,29479,29490,29485,29478,29475,29493,29452,29742,29740,29744,29739,29718,29722,29729,29741,29745,29732,29731,29725,29737,29728,29746,29947,29999,30063,30060,30183,30170,30177,30182,30173,30175,30180,30167,30357,30354,30426,30534,30535,30532,30541,30533,30538,30542,30539,30540,30686,30700,30816,30820,30821,30812,30829,30833,30826,30830,30832,30825,30824,30814,30818,31092,31091,31090,31088,31234,31242,31235,31244,31236,31385,31462,31460,31562,31547,31556,31560,31564,31566,31552,31576,31557,31906,31902,31912,31905,32088,32111,32099,32083,32086,32103,32106,32079,32109,32092,32107,32082,32084,32105,32081,32095,32078,32574,32575,32613,32614,32674,32672,32673,32727,32849,32847,32848,33022,32980,33091,33098,33106,33103,33095,33085,33101,33082,33254,33262,33271,33272,33273,33284,33340,33341,33343,33397,33595,33743,33785,33827,33728,33768,33810,33767,33764,33788,33782,33808,33734,33736,33771,33763,33727,33793,33757,33765,33752,33791,33761,33739,33742,33750,33781,33737,33801,33807,33758,33809,33798,33730,33779,33749,33786,33735,33745,33770,33811,33731,33772,33774,33732,33787,33751,33762,33819,33755,33790,34520,34530,34534,34515,34531,34522,34538,34525,34539,34524,34540,34537,34519,34536,34513,34888,34902,34901,35002,35031,35001,35000,35008,35006,34998,35004,34999,35005,34994,35073,35017,35221,35224,35223,35293,35290,35291,35406,35405,35385,35417,35392,35415,35416,35396,35397,35410,35400,35409,35402,35404,35407,35935,35969,35968,36026,36030,36016,36025,36021,36228,36224,36233,36312,36307,36301,36295,36310,36316,36303,36309,36313,36296,36311,36293,36591,36599,36602,36601,36582,36590,36581,36597,36583,36584,36598,36587,36593,36588,36596,36585,36909,36916,36911,37126,37164,37124,37119,37116,37128,37113,37115,37121,37120,37127,37125,37123,37217,37220,37215,37218,37216,37377,37386,37413,37379,37402,37414,37391,37388,37376,37394,37375,37373,37382,37380,37415,37378,37404,37412,37401,37399,37381,37398,38267,38285,38284,38288,38535,38526,38536,38537,38531,38528,38594,38600,38595,38641,38640,38764,38768,38766,38919,39081,39147,40166,40697,20099,20100,20150,20669,20671,20678,20654,20676,20682,20660,20680,20674,20656,20673,20666,20657,20683,20681,20662,20664,20951,21114,21112,21115,21116,21955,21979,21964,21968,21963,21962,21981,21952,21972,21956,21993,21951,21970,21901,21967,21973,21986,21974,21960,22002,21965,21977,21954,22292,22611,22632,22628,22607,22605,22601,22639,22613,22606,22621,22617,22629,22619,22589,22627,22641,22780,23239,23236,23243,23226,23224,23217,23221,23216,23231,23240,23227,23238,23223,23232,23242,23220,23222,23245,23225,23184,23510,23512,23513,23583,23603,23921,23907,23882,23909,23922,23916,23902,23912,23911,23906,24048,24143,24142,24138,24141,24139,24261,24268,24262,24267,24263,24384,24495,24493,24823,24905,24906,24875,24901,24886,24882,24878,24902,24879,24911,24873,24896,25120,37224,25123,25125,25124,25541,25585,25579,25616,25618,25609,25632,25636,25651,25667,25631,25621,25624,25657,25655,25634,25635,25612,25638,25648,25640,25665,25653,25647,25610,25626,25664,25637,25639,25611,25575,25627,25646,25633,25614,25967,26002,26067,26246,26252,26261,26256,26251,26250,26265,26260,26232,26400,26982,26975,26936,26958,26978,26993,26943,26949,26986,26937,26946,26967,26969,27002,26952,26953,26933,26988,26931,26941,26981,26864,27000,26932,26985,26944,26991,26948,26998,26968,26945,26996,26956,26939,26955,26935,26972,26959,26961,26930,26962,26927,27003,26940,27462,27461,27459,27458,27464,27457,27547,64013,27643,27644,27641,27639,27640,28315,28374,28360,28303,28352,28319,28307,28308,28320,28337,28345,28358,28370,28349,28353,28318,28361,28343,28336,28365,28326,28367,28338,28350,28355,28380,28376,28313,28306,28302,28301,28324,28321,28351,28339,28368,28362,28311,28334,28323,28999,29012,29010,29027,29024,28993,29021,29026,29042,29048,29034,29025,28994,29016,28995,29003,29040,29023,29008,29011,28996,29005,29018,29263,29325,29324,29329,29328,29326,29500,29506,29499,29498,29504,29514,29513,29764,29770,29771,29778,29777,29783,29760,29775,29776,29774,29762,29766,29773,29780,29921,29951,29950,29949,29981,30073,30071,27011,30191,30223,30211,30199,30206,30204,30201,30200,30224,30203,30198,30189,30197,30205,30361,30389,30429,30549,30559,30560,30546,30550,30554,30569,30567,30548,30553,30573,30688,30855,30874,30868,30863,30852,30869,30853,30854,30881,30851,30841,30873,30848,30870,30843,31100,31106,31101,31097,31249,31256,31257,31250,31255,31253,31266,31251,31259,31248,31395,31394,31390,31467,31590,31588,31597,31604,31593,31602,31589,31603,31601,31600,31585,31608,31606,31587,31922,31924,31919,32136,32134,32128,32141,32127,32133,32122,32142,32123,32131,32124,32140,32148,32132,32125,32146,32621,32619,32615,32616,32620,32678,32677,32679,32731,32732,32801,33124,33120,33143,33116,33129,33115,33122,33138,26401,33118,33142,33127,33135,33092,33121,33309,33353,33348,33344,33346,33349,34033,33855,33878,33910,33913,33935,33933,33893,33873,33856,33926,33895,33840,33869,33917,33882,33881,33908,33907,33885,34055,33886,33847,33850,33844,33914,33859,33912,33842,33861,33833,33753,33867,33839,33858,33837,33887,33904,33849,33870,33868,33874,33903,33989,33934,33851,33863,33846,33843,33896,33918,33860,33835,33888,33876,33902,33872,34571,34564,34551,34572,34554,34518,34549,34637,34552,34574,34569,34561,34550,34573,34565,35030,35019,35021,35022,35038,35035,35034,35020,35024,35205,35227,35295,35301,35300,35297,35296,35298,35292,35302,35446,35462,35455,35425,35391,35447,35458,35460,35445,35459,35457,35444,35450,35900,35915,35914,35941,35940,35942,35974,35972,35973,36044,36200,36201,36241,36236,36238,36239,36237,36243,36244,36240,36242,36336,36320,36332,36337,36334,36304,36329,36323,36322,36327,36338,36331,36340,36614,36607,36609,36608,36613,36615,36616,36610,36619,36946,36927,36932,36937,36925,37136,37133,37135,37137,37142,37140,37131,37134,37230,37231,37448,37458,37424,37434,37478,37427,37477,37470,37507,37422,37450,37446,37485,37484,37455,37472,37479,37487,37430,37473,37488,37425,37460,37475,37456,37490,37454,37459,37452,37462,37426,38303,38300,38302,38299,38546,38547,38545,38551,38606,38650,38653,38648,38645,38771,38775,38776,38770,38927,38925,38926,39084,39158,39161,39343,39346,39344,39349,39597,39595,39771,40170,40173,40167,40576,40701,20710,20692,20695,20712,20723,20699,20714,20701,20708,20691,20716,20720,20719,20707,20704,20952,21120,21121,21225,21227,21296,21420,22055,22037,22028,22034,22012,22031,22044,22017,22035,22018,22010,22045,22020,22015,22009,22665,22652,22672,22680,22662,22657,22655,22644,22667,22650,22663,22673,22670,22646,22658,22664,22651,22676,22671,22782,22891,23260,23278,23269,23253,23274,23258,23277,23275,23283,23266,23264,23259,23276,23262,23261,23257,23272,23263,23415,23520,23523,23651,23938,23936,23933,23942,23930,23937,23927,23946,23945,23944,23934,23932,23949,23929,23935,24152,24153,24147,24280,24273,24279,24270,24284,24277,24281,24274,24276,24388,24387,24431,24502,24876,24872,24897,24926,24945,24947,24914,24915,24946,24940,24960,24948,24916,24954,24923,24933,24891,24938,24929,24918,25129,25127,25131,25643,25677,25691,25693,25716,25718,25714,25715,25725,25717,25702,25766,25678,25730,25694,25692,25675,25683,25696,25680,25727,25663,25708,25707,25689,25701,25719,25971,26016,26273,26272,26271,26373,26372,26402,27057,27062,27081,27040,27086,27030,27056,27052,27068,27025,27033,27022,27047,27021,27049,27070,27055,27071,27076,27069,27044,27092,27065,27082,27034,27087,27059,27027,27050,27041,27038,27097,27031,27024,27074,27061,27045,27078,27466,27469,27467,27550,27551,27552,27587,27588,27646,28366,28405,28401,28419,28453,28408,28471,28411,28462,28425,28494,28441,28442,28455,28440,28475,28434,28397,28426,28470,28531,28409,28398,28461,28480,28464,28476,28469,28395,28423,28430,28483,28421,28413,28406,28473,28444,28412,28474,28447,28429,28446,28424,28449,29063,29072,29065,29056,29061,29058,29071,29051,29062,29057,29079,29252,29267,29335,29333,29331,29507,29517,29521,29516,29794,29811,29809,29813,29810,29799,29806,29952,29954,29955,30077,30096,30230,30216,30220,30229,30225,30218,30228,30392,30593,30588,30597,30594,30574,30592,30575,30590,30595,30898,30890,30900,30893,30888,30846,30891,30878,30885,30880,30892,30882,30884,31128,31114,31115,31126,31125,31124,31123,31127,31112,31122,31120,31275,31306,31280,31279,31272,31270,31400,31403,31404,31470,31624,31644,31626,31633,31632,31638,31629,31628,31643,31630,31621,31640,21124,31641,31652,31618,31931,31935,31932,31930,32167,32183,32194,32163,32170,32193,32192,32197,32157,32206,32196,32198,32203,32204,32175,32185,32150,32188,32159,32166,32174,32169,32161,32201,32627,32738,32739,32741,32734,32804,32861,32860,33161,33158,33155,33159,33165,33164,33163,33301,33943,33956,33953,33951,33978,33998,33986,33964,33966,33963,33977,33972,33985,33997,33962,33946,33969,34000,33949,33959,33979,33954,33940,33991,33996,33947,33961,33967,33960,34006,33944,33974,33999,33952,34007,34004,34002,34011,33968,33937,34401,34611,34595,34600,34667,34624,34606,34590,34593,34585,34587,34627,34604,34625,34622,34630,34592,34610,34602,34605,34620,34578,34618,34609,34613,34626,34598,34599,34616,34596,34586,34608,34577,35063,35047,35057,35058,35066,35070,35054,35068,35062,35067,35056,35052,35051,35229,35233,35231,35230,35305,35307,35304,35499,35481,35467,35474,35471,35478,35901,35944,35945,36053,36047,36055,36246,36361,36354,36351,36365,36349,36362,36355,36359,36358,36357,36350,36352,36356,36624,36625,36622,36621,37155,37148,37152,37154,37151,37149,37146,37156,37153,37147,37242,37234,37241,37235,37541,37540,37494,37531,37498,37536,37524,37546,37517,37542,37530,37547,37497,37527,37503,37539,37614,37518,37506,37525,37538,37501,37512,37537,37514,37510,37516,37529,37543,37502,37511,37545,37533,37515,37421,38558,38561,38655,38744,38781,38778,38782,38787,38784,38786,38779,38788,38785,38783,38862,38861,38934,39085,39086,39170,39168,39175,39325,39324,39363,39353,39355,39354,39362,39357,39367,39601,39651,39655,39742,39743,39776,39777,39775,40177,40178,40181,40615,20735,20739,20784,20728,20742,20743,20726,20734,20747,20748,20733,20746,21131,21132,21233,21231,22088,22082,22092,22069,22081,22090,22089,22086,22104,22106,22080,22067,22077,22060,22078,22072,22058,22074,22298,22699,22685,22705,22688,22691,22703,22700,22693,22689,22783,23295,23284,23293,23287,23286,23299,23288,23298,23289,23297,23303,23301,23311,23655,23961,23959,23967,23954,23970,23955,23957,23968,23964,23969,23962,23966,24169,24157,24160,24156,32243,24283,24286,24289,24393,24498,24971,24963,24953,25009,25008,24994,24969,24987,24979,25007,25005,24991,24978,25002,24993,24973,24934,25011,25133,25710,25712,25750,25760,25733,25751,25756,25743,25739,25738,25740,25763,25759,25704,25777,25752,25974,25978,25977,25979,26034,26035,26293,26288,26281,26290,26295,26282,26287,27136,27142,27159,27109,27128,27157,27121,27108,27168,27135,27116,27106,27163,27165,27134,27175,27122,27118,27156,27127,27111,27200,27144,27110,27131,27149,27132,27115,27145,27140,27160,27173,27151,27126,27174,27143,27124,27158,27473,27557,27555,27554,27558,27649,27648,27647,27650,28481,28454,28542,28551,28614,28562,28557,28553,28556,28514,28495,28549,28506,28566,28534,28524,28546,28501,28530,28498,28496,28503,28564,28563,28509,28416,28513,28523,28541,28519,28560,28499,28555,28521,28543,28565,28515,28535,28522,28539,29106,29103,29083,29104,29088,29082,29097,29109,29085,29093,29086,29092,29089,29098,29084,29095,29107,29336,29338,29528,29522,29534,29535,29536,29533,29531,29537,29530,29529,29538,29831,29833,29834,29830,29825,29821,29829,29832,29820,29817,29960,29959,30078,30245,30238,30233,30237,30236,30243,30234,30248,30235,30364,30365,30366,30363,30605,30607,30601,30600,30925,30907,30927,30924,30929,30926,30932,30920,30915,30916,30921,31130,31137,31136,31132,31138,31131,27510,31289,31410,31412,31411,31671,31691,31678,31660,31694,31663,31673,31690,31669,31941,31944,31948,31947,32247,32219,32234,32231,32215,32225,32259,32250,32230,32246,32241,32240,32238,32223,32630,32684,32688,32685,32749,32747,32746,32748,32742,32744,32868,32871,33187,33183,33182,33173,33186,33177,33175,33302,33359,33363,33362,33360,33358,33361,34084,34107,34063,34048,34089,34062,34057,34061,34079,34058,34087,34076,34043,34091,34042,34056,34060,34036,34090,34034,34069,34039,34027,34035,34044,34066,34026,34025,34070,34046,34088,34077,34094,34050,34045,34078,34038,34097,34086,34023,34024,34032,34031,34041,34072,34080,34096,34059,34073,34095,34402,34646,34659,34660,34679,34785,34675,34648,34644,34651,34642,34657,34650,34641,34654,34669,34666,34640,34638,34655,34653,34671,34668,34682,34670,34652,34661,34639,34683,34677,34658,34663,34665,34906,35077,35084,35092,35083,35095,35096,35097,35078,35094,35089,35086,35081,35234,35236,35235,35309,35312,35308,35535,35526,35512,35539,35537,35540,35541,35515,35543,35518,35520,35525,35544,35523,35514,35517,35545,35902,35917,35983,36069,36063,36057,36072,36058,36061,36071,36256,36252,36257,36251,36384,36387,36389,36388,36398,36373,36379,36374,36369,36377,36390,36391,36372,36370,36376,36371,36380,36375,36378,36652,36644,36632,36634,36640,36643,36630,36631,36979,36976,36975,36967,36971,37167,37163,37161,37162,37170,37158,37166,37253,37254,37258,37249,37250,37252,37248,37584,37571,37572,37568,37593,37558,37583,37617,37599,37592,37609,37591,37597,37580,37615,37570,37608,37578,37576,37582,37606,37581,37589,37577,37600,37598,37607,37585,37587,37557,37601,37574,37556,38268,38316,38315,38318,38320,38564,38562,38611,38661,38664,38658,38746,38794,38798,38792,38864,38863,38942,38941,38950,38953,38952,38944,38939,38951,39090,39176,39162,39185,39188,39190,39191,39189,39388,39373,39375,39379,39380,39374,39369,39382,39384,39371,39383,39372,39603,39660,39659,39667,39666,39665,39750,39747,39783,39796,39793,39782,39798,39797,39792,39784,39780,39788,40188,40186,40189,40191,40183,40199,40192,40185,40187,40200,40197,40196,40579,40659,40719,40720,20764,20755,20759,20762,20753,20958,21300,21473,22128,22112,22126,22131,22118,22115,22125,22130,22110,22135,22300,22299,22728,22717,22729,22719,22714,22722,22716,22726,23319,23321,23323,23329,23316,23315,23312,23318,23336,23322,23328,23326,23535,23980,23985,23977,23975,23989,23984,23982,23978,23976,23986,23981,23983,23988,24167,24168,24166,24175,24297,24295,24294,24296,24293,24395,24508,24989,25000,24982,25029,25012,25030,25025,25036,25018,25023,25016,24972,25815,25814,25808,25807,25801,25789,25737,25795,25819,25843,25817,25907,25983,25980,26018,26312,26302,26304,26314,26315,26319,26301,26299,26298,26316,26403,27188,27238,27209,27239,27186,27240,27198,27229,27245,27254,27227,27217,27176,27226,27195,27199,27201,27242,27236,27216,27215,27220,27247,27241,27232,27196,27230,27222,27221,27213,27214,27206,27477,27476,27478,27559,27562,27563,27592,27591,27652,27651,27654,28589,28619,28579,28615,28604,28622,28616,28510,28612,28605,28574,28618,28584,28676,28581,28590,28602,28588,28586,28623,28607,28600,28578,28617,28587,28621,28591,28594,28592,29125,29122,29119,29112,29142,29120,29121,29131,29140,29130,29127,29135,29117,29144,29116,29126,29146,29147,29341,29342,29545,29542,29543,29548,29541,29547,29546,29823,29850,29856,29844,29842,29845,29857,29963,30080,30255,30253,30257,30269,30259,30268,30261,30258,30256,30395,30438,30618,30621,30625,30620,30619,30626,30627,30613,30617,30615,30941,30953,30949,30954,30942,30947,30939,30945,30946,30957,30943,30944,31140,31300,31304,31303,31414,31416,31413,31409,31415,31710,31715,31719,31709,31701,31717,31706,31720,31737,31700,31722,31714,31708,31723,31704,31711,31954,31956,31959,31952,31953,32274,32289,32279,32268,32287,32288,32275,32270,32284,32277,32282,32290,32267,32271,32278,32269,32276,32293,32292,32579,32635,32636,32634,32689,32751,32810,32809,32876,33201,33190,33198,33209,33205,33195,33200,33196,33204,33202,33207,33191,33266,33365,33366,33367,34134,34117,34155,34125,34131,34145,34136,34112,34118,34148,34113,34146,34116,34129,34119,34147,34110,34139,34161,34126,34158,34165,34133,34151,34144,34188,34150,34141,34132,34149,34156,34403,34405,34404,34715,34703,34711,34707,34706,34696,34689,34710,34712,34681,34695,34723,34693,34704,34705,34717,34692,34708,34716,34714,34697,35102,35110,35120,35117,35118,35111,35121,35106,35113,35107,35119,35116,35103,35313,35552,35554,35570,35572,35573,35549,35604,35556,35551,35568,35528,35550,35553,35560,35583,35567,35579,35985,35986,35984,36085,36078,36081,36080,36083,36204,36206,36261,36263,36403,36414,36408,36416,36421,36406,36412,36413,36417,36400,36415,36541,36662,36654,36661,36658,36665,36663,36660,36982,36985,36987,36998,37114,37171,37173,37174,37267,37264,37265,37261,37263,37671,37662,37640,37663,37638,37647,37754,37688,37692,37659,37667,37650,37633,37702,37677,37646,37645,37579,37661,37626,37669,37651,37625,37623,37684,37634,37668,37631,37673,37689,37685,37674,37652,37644,37643,37630,37641,37632,37627,37654,38332,38349,38334,38329,38330,38326,38335,38325,38333,38569,38612,38667,38674,38672,38809,38807,38804,38896,38904,38965,38959,38962,39204,39199,39207,39209,39326,39406,39404,39397,39396,39408,39395,39402,39401,39399,39609,39615,39604,39611,39670,39674,39673,39671,39731,39808,39813,39815,39804,39806,39803,39810,39827,39826,39824,39802,39829,39805,39816,40229,40215,40224,40222,40212,40233,40221,40216,40226,40208,40217,40223,40584,40582,40583,40622,40621,40661,40662,40698,40722,40765,20774,20773,20770,20772,20768,20777,21236,22163,22156,22157,22150,22148,22147,22142,22146,22143,22145,22742,22740,22735,22738,23341,23333,23346,23331,23340,23335,23334,23343,23342,23419,23537,23538,23991,24172,24170,24510,24507,25027,25013,25020,25063,25056,25061,25060,25064,25054,25839,25833,25827,25835,25828,25832,25985,25984,26038,26074,26322,27277,27286,27265,27301,27273,27295,27291,27297,27294,27271,27283,27278,27285,27267,27304,27300,27281,27263,27302,27290,27269,27276,27282,27483,27565,27657,28620,28585,28660,28628,28643,28636,28653,28647,28646,28638,28658,28637,28642,28648,29153,29169,29160,29170,29156,29168,29154,29555,29550,29551,29847,29874,29867,29840,29866,29869,29873,29861,29871,29968,29969,29970,29967,30084,30275,30280,30281,30279,30372,30441,30645,30635,30642,30647,30646,30644,30641,30632,30704,30963,30973,30978,30971,30972,30962,30981,30969,30974,30980,31147,31144,31324,31323,31318,31320,31316,31322,31422,31424,31425,31749,31759,31730,31744,31743,31739,31758,31732,31755,31731,31746,31753,31747,31745,31736,31741,31750,31728,31729,31760,31754,31976,32301,32316,32322,32307,38984,32312,32298,32329,32320,32327,32297,32332,32304,32315,32310,32324,32314,32581,32639,32638,32637,32756,32754,32812,33211,33220,33228,33226,33221,33223,33212,33257,33371,33370,33372,34179,34176,34191,34215,34197,34208,34187,34211,34171,34212,34202,34206,34167,34172,34185,34209,34170,34168,34135,34190,34198,34182,34189,34201,34205,34177,34210,34178,34184,34181,34169,34166,34200,34192,34207,34408,34750,34730,34733,34757,34736,34732,34745,34741,34748,34734,34761,34755,34754,34764,34743,34735,34756,34762,34740,34742,34751,34744,34749,34782,34738,35125,35123,35132,35134,35137,35154,35127,35138,35245,35247,35246,35314,35315,35614,35608,35606,35601,35589,35595,35618,35599,35602,35605,35591,35597,35592,35590,35612,35603,35610,35919,35952,35954,35953,35951,35989,35988,36089,36207,36430,36429,36435,36432,36428,36423,36675,36672,36997,36990,37176,37274,37282,37275,37273,37279,37281,37277,37280,37793,37763,37807,37732,37718,37703,37756,37720,37724,37750,37705,37712,37713,37728,37741,37775,37708,37738,37753,37719,37717,37714,37711,37745,37751,37755,37729,37726,37731,37735,37760,37710,37721,38343,38336,38345,38339,38341,38327,38574,38576,38572,38688,38687,38680,38685,38681,38810,38817,38812,38814,38813,38869,38868,38897,38977,38980,38986,38985,38981,38979,39205,39211,39212,39210,39219,39218,39215,39213,39217,39216,39320,39331,39329,39426,39418,39412,39415,39417,39416,39414,39419,39421,39422,39420,39427,39614,39678,39677,39681,39676,39752,39834,39848,39838,39835,39846,39841,39845,39844,39814,39842,39840,39855,40243,40257,40295,40246,40238,40239,40241,40248,40240,40261,40258,40259,40254,40247,40256,40253,32757,40237,40586,40585,40589,40624,40648,40666,40699,40703,40740,40739,40738,40788,40864,20785,20781,20782,22168,22172,22167,22170,22173,22169,22896,23356,23657,23658,24000,24173,24174,25048,25055,25069,25070,25073,25066,25072,25067,25046,25065,25855,25860,25853,25848,25857,25859,25852,26004,26075,26330,26331,26328,27333,27321,27325,27361,27334,27322,27318,27319,27335,27316,27309,27486,27593,27659,28679,28684,28685,28673,28677,28692,28686,28671,28672,28667,28710,28668,28663,28682,29185,29183,29177,29187,29181,29558,29880,29888,29877,29889,29886,29878,29883,29890,29972,29971,30300,30308,30297,30288,30291,30295,30298,30374,30397,30444,30658,30650,30975,30988,30995,30996,30985,30992,30994,30993,31149,31148,31327,31772,31785,31769,31776,31775,31789,31773,31782,31784,31778,31781,31792,32348,32336,32342,32355,32344,32354,32351,32337,32352,32343,32339,32693,32691,32759,32760,32885,33233,33234,33232,33375,33374,34228,34246,34240,34243,34242,34227,34229,34237,34247,34244,34239,34251,34254,34248,34245,34225,34230,34258,34340,34232,34231,34238,34409,34791,34790,34786,34779,34795,34794,34789,34783,34803,34788,34772,34780,34771,34797,34776,34787,34724,34775,34777,34817,34804,34792,34781,35155,35147,35151,35148,35142,35152,35153,35145,35626,35623,35619,35635,35632,35637,35655,35631,35644,35646,35633,35621,35639,35622,35638,35630,35620,35643,35645,35642,35906,35957,35993,35992,35991,36094,36100,36098,36096,36444,36450,36448,36439,36438,36446,36453,36455,36443,36442,36449,36445,36457,36436,36678,36679,36680,36683,37160,37178,37179,37182,37288,37285,37287,37295,37290,37813,37772,37778,37815,37787,37789,37769,37799,37774,37802,37790,37798,37781,37768,37785,37791,37773,37809,37777,37810,37796,37800,37812,37795,37797,38354,38355,38353,38579,38615,38618,24002,38623,38616,38621,38691,38690,38693,38828,38830,38824,38827,38820,38826,38818,38821,38871,38873,38870,38872,38906,38992,38993,38994,39096,39233,39228,39226,39439,39435,39433,39437,39428,39441,39434,39429,39431,39430,39616,39644,39688,39684,39685,39721,39733,39754,39756,39755,39879,39878,39875,39871,39873,39861,39864,39891,39862,39876,39865,39869,40284,40275,40271,40266,40283,40267,40281,40278,40268,40279,40274,40276,40287,40280,40282,40590,40588,40671,40705,40704,40726,40741,40747,40746,40745,40744,40780,40789,20788,20789,21142,21239,21428,22187,22189,22182,22183,22186,22188,22746,22749,22747,22802,23357,23358,23359,24003,24176,24511,25083,25863,25872,25869,25865,25868,25870,25988,26078,26077,26334,27367,27360,27340,27345,27353,27339,27359,27356,27344,27371,27343,27341,27358,27488,27568,27660,28697,28711,28704,28694,28715,28705,28706,28707,28713,28695,28708,28700,28714,29196,29194,29191,29186,29189,29349,29350,29348,29347,29345,29899,29893,29879,29891,29974,30304,30665,30666,30660,30705,31005,31003,31009,31004,30999,31006,31152,31335,31336,31795,31804,31801,31788,31803,31980,31978,32374,32373,32376,32368,32375,32367,32378,32370,32372,32360,32587,32586,32643,32646,32695,32765,32766,32888,33239,33237,33380,33377,33379,34283,34289,34285,34265,34273,34280,34266,34263,34284,34290,34296,34264,34271,34275,34268,34257,34288,34278,34287,34270,34274,34816,34810,34819,34806,34807,34825,34828,34827,34822,34812,34824,34815,34826,34818,35170,35162,35163,35159,35169,35164,35160,35165,35161,35208,35255,35254,35318,35664,35656,35658,35648,35667,35670,35668,35659,35669,35665,35650,35666,35671,35907,35959,35958,35994,36102,36103,36105,36268,36266,36269,36267,36461,36472,36467,36458,36463,36475,36546,36690,36689,36687,36688,36691,36788,37184,37183,37296,37293,37854,37831,37839,37826,37850,37840,37881,37868,37836,37849,37801,37862,37834,37844,37870,37859,37845,37828,37838,37824,37842,37863,38269,38362,38363,38625,38697,38699,38700,38696,38694,38835,38839,38838,38877,38878,38879,39004,39001,39005,38999,39103,39101,39099,39102,39240,39239,39235,39334,39335,39450,39445,39461,39453,39460,39451,39458,39456,39463,39459,39454,39452,39444,39618,39691,39690,39694,39692,39735,39914,39915,39904,39902,39908,39910,39906,39920,39892,39895,39916,39900,39897,39909,39893,39905,39898,40311,40321,40330,40324,40328,40305,40320,40312,40326,40331,40332,40317,40299,40308,40309,40304,40297,40325,40307,40315,40322,40303,40313,40319,40327,40296,40596,40593,40640,40700,40749,40768,40769,40781,40790,40791,40792,21303,22194,22197,22195,22755,23365,24006,24007,24302,24303,24512,24513,25081,25879,25878,25877,25875,26079,26344,26339,26340,27379,27376,27370,27368,27385,27377,27374,27375,28732,28725,28719,28727,28724,28721,28738,28728,28735,28730,28729,28736,28731,28723,28737,29203,29204,29352,29565,29564,29882,30379,30378,30398,30445,30668,30670,30671,30669,30706,31013,31011,31015,31016,31012,31017,31154,31342,31340,31341,31479,31817,31816,31818,31815,31813,31982,32379,32382,32385,32384,32698,32767,32889,33243,33241,33291,33384,33385,34338,34303,34305,34302,34331,34304,34294,34308,34313,34309,34316,34301,34841,34832,34833,34839,34835,34838,35171,35174,35257,35319,35680,35690,35677,35688,35683,35685,35687,35693,36270,36486,36488,36484,36697,36694,36695,36693,36696,36698,37005,37187,37185,37303,37301,37298,37299,37899,37907,37883,37920,37903,37908,37886,37909,37904,37928,37913,37901,37877,37888,37879,37895,37902,37910,37906,37882,37897,37880,37898,37887,37884,37900,37878,37905,37894,38366,38368,38367,38702,38703,38841,38843,38909,38910,39008,39010,39011,39007,39105,39106,39248,39246,39257,39244,39243,39251,39474,39476,39473,39468,39466,39478,39465,39470,39480,39469,39623,39626,39622,39696,39698,39697,39947,39944,39927,39941,39954,39928,40000,39943,39950,39942,39959,39956,39945,40351,40345,40356,40349,40338,40344,40336,40347,40352,40340,40348,40362,40343,40353,40346,40354,40360,40350,40355,40383,40361,40342,40358,40359,40601,40603,40602,40677,40676,40679,40678,40752,40750,40795,40800,40798,40797,40793,40849,20794,20793,21144,21143,22211,22205,22206,23368,23367,24011,24015,24305,25085,25883,27394,27388,27395,27384,27392,28739,28740,28746,28744,28745,28741,28742,29213,29210,29209,29566,29975,30314,30672,31021,31025,31023,31828,31827,31986,32394,32391,32392,32395,32390,32397,32589,32699,32816,33245,34328,34346,34342,34335,34339,34332,34329,34343,34350,34337,34336,34345,34334,34341,34857,34845,34843,34848,34852,34844,34859,34890,35181,35177,35182,35179,35322,35705,35704,35653,35706,35707,36112,36116,36271,36494,36492,36702,36699,36701,37190,37188,37189,37305,37951,37947,37942,37929,37949,37948,37936,37945,37930,37943,37932,37952,37937,38373,38372,38371,38709,38714,38847,38881,39012,39113,39110,39104,39256,39254,39481,39485,39494,39492,39490,39489,39482,39487,39629,39701,39703,39704,39702,39738,39762,39979,39965,39964,39980,39971,39976,39977,39972,39969,40375,40374,40380,40385,40391,40394,40399,40382,40389,40387,40379,40373,40398,40377,40378,40364,40392,40369,40365,40396,40371,40397,40370,40570,40604,40683,40686,40685,40731,40728,40730,40753,40782,40805,40804,40850,20153,22214,22213,22219,22897,23371,23372,24021,24017,24306,25889,25888,25894,25890,27403,27400,27401,27661,28757,28758,28759,28754,29214,29215,29353,29567,29912,29909,29913,29911,30317,30381,31029,31156,31344,31345,31831,31836,31833,31835,31834,31988,31985,32401,32591,32647,33246,33387,34356,34357,34355,34348,34354,34358,34860,34856,34854,34858,34853,35185,35263,35262,35323,35710,35716,35714,35718,35717,35711,36117,36501,36500,36506,36498,36496,36502,36503,36704,36706,37191,37964,37968,37962,37963,37967,37959,37957,37960,37961,37958,38719,38883,39018,39017,39115,39252,39259,39502,39507,39508,39500,39503,39496,39498,39497,39506,39504,39632,39705,39723,39739,39766,39765,40006,40008,39999,40004,39993,39987,40001,39996,39991,39988,39986,39997,39990,40411,40402,40414,40410,40395,40400,40412,40401,40415,40425,40409,40408,40406,40437,40405,40413,40630,40688,40757,40755,40754,40770,40811,40853,40866,20797,21145,22760,22759,22898,23373,24024,34863,24399,25089,25091,25092,25897,25893,26006,26347,27409,27410,27407,27594,28763,28762,29218,29570,29569,29571,30320,30676,31847,31846,32405,33388,34362,34368,34361,34364,34353,34363,34366,34864,34866,34862,34867,35190,35188,35187,35326,35724,35726,35723,35720,35909,36121,36504,36708,36707,37308,37986,37973,37981,37975,37982,38852,38853,38912,39510,39513,39710,39711,39712,40018,40024,40016,40010,40013,40011,40021,40025,40012,40014,40443,40439,40431,40419,40427,40440,40420,40438,40417,40430,40422,40434,40432,40418,40428,40436,40435,40424,40429,40642,40656,40690,40691,40710,40732,40760,40759,40758,40771,40783,40817,40816,40814,40815,22227,22221,23374,23661,25901,26349,26350,27411,28767,28769,28765,28768,29219,29915,29925,30677,31032,31159,31158,31850,32407,32649,33389,34371,34872,34871,34869,34891,35732,35733,36510,36511,36512,36509,37310,37309,37314,37995,37992,37993,38629,38726,38723,38727,38855,38885,39518,39637,39769,40035,40039,40038,40034,40030,40032,40450,40446,40455,40451,40454,40453,40448,40449,40457,40447,40445,40452,40608,40734,40774,40820,40821,40822,22228,25902,26040,27416,27417,27415,27418,28770,29222,29354,30680,30681,31033,31849,31851,31990,32410,32408,32411,32409,33248,33249,34374,34375,34376,35193,35194,35196,35195,35327,35736,35737,36517,36516,36515,37998,37997,37999,38001,38003,38729,39026,39263,40040,40046,40045,40459,40461,40464,40463,40466,40465,40609,40693,40713,40775,40824,40827,40826,40825,22302,28774,31855,34876,36274,36518,37315,38004,38008,38006,38005,39520,40052,40051,40049,40053,40468,40467,40694,40714,40868,28776,28773,31991,34410,34878,34877,34879,35742,35996,36521,36553,38731,39027,39028,39116,39265,39339,39524,39526,39527,39716,40469,40471,40776,25095,27422,29223,34380,36520,38018,38016,38017,39529,39528,39726,40473,29225,34379,35743,38019,40057,40631,30325,39531,40058,40477,28777,28778,40612,40830,40777,40856,30849,37561,35023,22715,24658,31911,23290,9556,9574,9559,9568,9580,9571,9562,9577,9565,9554,9572,9557,9566,9578,9569,9560,9575,9563,9555,9573,9558,9567,9579,9570,9561,9576,9564,9553,9552,9581,9582,9584,9583,65517,132423,37595,132575,147397,34124,17077,29679,20917,13897,149826,166372,37700,137691,33518,146632,30780,26436,25311,149811,166314,131744,158643,135941,20395,140525,20488,159017,162436,144896,150193,140563,20521,131966,24484,131968,131911,28379,132127,20605,20737,13434,20750,39020,14147,33814,149924,132231,20832,144308,20842,134143,139516,131813,140592,132494,143923,137603,23426,34685,132531,146585,20914,20920,40244,20937,20943,20945,15580,20947,150182,20915,20962,21314,20973,33741,26942,145197,24443,21003,21030,21052,21173,21079,21140,21177,21189,31765,34114,21216,34317,158483,21253,166622,21833,28377,147328,133460,147436,21299,21316,134114,27851,136998,26651,29653,24650,16042,14540,136936,29149,17570,21357,21364,165547,21374,21375,136598,136723,30694,21395,166555,21408,21419,21422,29607,153458,16217,29596,21441,21445,27721,20041,22526,21465,15019,134031,21472,147435,142755,21494,134263,21523,28793,21803,26199,27995,21613,158547,134516,21853,21647,21668,18342,136973,134877,15796,134477,166332,140952,21831,19693,21551,29719,21894,21929,22021,137431,147514,17746,148533,26291,135348,22071,26317,144010,26276,26285,22093,22095,30961,22257,38791,21502,22272,22255,22253,166758,13859,135759,22342,147877,27758,28811,22338,14001,158846,22502,136214,22531,136276,148323,22566,150517,22620,22698,13665,22752,22748,135740,22779,23551,22339,172368,148088,37843,13729,22815,26790,14019,28249,136766,23076,21843,136850,34053,22985,134478,158849,159018,137180,23001,137211,137138,159142,28017,137256,136917,23033,159301,23211,23139,14054,149929,23159,14088,23190,29797,23251,159649,140628,15749,137489,14130,136888,24195,21200,23414,25992,23420,162318,16388,18525,131588,23509,24928,137780,154060,132517,23539,23453,19728,23557,138052,23571,29646,23572,138405,158504,23625,18653,23685,23785,23791,23947,138745,138807,23824,23832,23878,138916,23738,24023,33532,14381,149761,139337,139635,33415,14390,15298,24110,27274,24181,24186,148668,134355,21414,20151,24272,21416,137073,24073,24308,164994,24313,24315,14496,24316,26686,37915,24333,131521,194708,15070,18606,135994,24378,157832,140240,24408,140401,24419,38845,159342,24434,37696,166454,24487,23990,15711,152144,139114,159992,140904,37334,131742,166441,24625,26245,137335,14691,15815,13881,22416,141236,31089,15936,24734,24740,24755,149890,149903,162387,29860,20705,23200,24932,33828,24898,194726,159442,24961,20980,132694,24967,23466,147383,141407,25043,166813,170333,25040,14642,141696,141505,24611,24924,25886,25483,131352,25285,137072,25301,142861,25452,149983,14871,25656,25592,136078,137212,25744,28554,142902,38932,147596,153373,25825,25829,38011,14950,25658,14935,25933,28438,150056,150051,25989,25965,25951,143486,26037,149824,19255,26065,16600,137257,26080,26083,24543,144384,26136,143863,143864,26180,143780,143781,26187,134773,26215,152038,26227,26228,138813,143921,165364,143816,152339,30661,141559,39332,26370,148380,150049,15147,27130,145346,26462,26471,26466,147917,168173,26583,17641,26658,28240,37436,26625,144358,159136,26717,144495,27105,27147,166623,26995,26819,144845,26881,26880,15666,14849,144956,15232,26540,26977,166474,17148,26934,27032,15265,132041,33635,20624,27129,144985,139562,27205,145155,27293,15347,26545,27336,168348,15373,27421,133411,24798,27445,27508,141261,28341,146139,132021,137560,14144,21537,146266,27617,147196,27612,27703,140427,149745,158545,27738,33318,27769,146876,17605,146877,147876,149772,149760,146633,14053,15595,134450,39811,143865,140433,32655,26679,159013,159137,159211,28054,27996,28284,28420,149887,147589,159346,34099,159604,20935,27804,28189,33838,166689,28207,146991,29779,147330,31180,28239,23185,143435,28664,14093,28573,146992,28410,136343,147517,17749,37872,28484,28508,15694,28532,168304,15675,28575,147780,28627,147601,147797,147513,147440,147380,147775,20959,147798,147799,147776,156125,28747,28798,28839,28801,28876,28885,28886,28895,16644,15848,29108,29078,148087,28971,28997,23176,29002,29038,23708,148325,29007,37730,148161,28972,148570,150055,150050,29114,166888,28861,29198,37954,29205,22801,37955,29220,37697,153093,29230,29248,149876,26813,29269,29271,15957,143428,26637,28477,29314,29482,29483,149539,165931,18669,165892,29480,29486,29647,29610,134202,158254,29641,29769,147938,136935,150052,26147,14021,149943,149901,150011,29687,29717,26883,150054,29753,132547,16087,29788,141485,29792,167602,29767,29668,29814,33721,29804,14128,29812,37873,27180,29826,18771,150156,147807,150137,166799,23366,166915,137374,29896,137608,29966,29929,29982,167641,137803,23511,167596,37765,30029,30026,30055,30062,151426,16132,150803,30094,29789,30110,30132,30210,30252,30289,30287,30319,30326,156661,30352,33263,14328,157969,157966,30369,30373,30391,30412,159647,33890,151709,151933,138780,30494,30502,30528,25775,152096,30552,144044,30639,166244,166248,136897,30708,30729,136054,150034,26826,30895,30919,30931,38565,31022,153056,30935,31028,30897,161292,36792,34948,166699,155779,140828,31110,35072,26882,31104,153687,31133,162617,31036,31145,28202,160038,16040,31174,168205,31188],
	  "euc-kr":[44034,44035,44037,44038,44043,44044,44045,44046,44047,44056,44062,44063,44065,44066,44067,44069,44070,44071,44072,44073,44074,44075,44078,44082,44083,44084,null,null,null,null,null,null,44085,44086,44087,44090,44091,44093,44094,44095,44097,44098,44099,44100,44101,44102,44103,44104,44105,44106,44108,44110,44111,44112,44113,44114,44115,44117,null,null,null,null,null,null,44118,44119,44121,44122,44123,44125,44126,44127,44128,44129,44130,44131,44132,44133,44134,44135,44136,44137,44138,44139,44140,44141,44142,44143,44146,44147,44149,44150,44153,44155,44156,44157,44158,44159,44162,44167,44168,44173,44174,44175,44177,44178,44179,44181,44182,44183,44184,44185,44186,44187,44190,44194,44195,44196,44197,44198,44199,44203,44205,44206,44209,44210,44211,44212,44213,44214,44215,44218,44222,44223,44224,44226,44227,44229,44230,44231,44233,44234,44235,44237,44238,44239,44240,44241,44242,44243,44244,44246,44248,44249,44250,44251,44252,44253,44254,44255,44258,44259,44261,44262,44265,44267,44269,44270,44274,44276,44279,44280,44281,44282,44283,44286,44287,44289,44290,44291,44293,44295,44296,44297,44298,44299,44302,44304,44306,44307,44308,44309,44310,44311,44313,44314,44315,44317,44318,44319,44321,44322,44323,44324,44325,44326,44327,44328,44330,44331,44334,44335,44336,44337,44338,44339,null,null,null,null,null,null,44342,44343,44345,44346,44347,44349,44350,44351,44352,44353,44354,44355,44358,44360,44362,44363,44364,44365,44366,44367,44369,44370,44371,44373,44374,44375,null,null,null,null,null,null,44377,44378,44379,44380,44381,44382,44383,44384,44386,44388,44389,44390,44391,44392,44393,44394,44395,44398,44399,44401,44402,44407,44408,44409,44410,44414,44416,44419,44420,44421,44422,44423,44426,44427,44429,44430,44431,44433,44434,44435,44436,44437,44438,44439,44440,44441,44442,44443,44446,44447,44448,44449,44450,44451,44453,44454,44455,44456,44457,44458,44459,44460,44461,44462,44463,44464,44465,44466,44467,44468,44469,44470,44472,44473,44474,44475,44476,44477,44478,44479,44482,44483,44485,44486,44487,44489,44490,44491,44492,44493,44494,44495,44498,44500,44501,44502,44503,44504,44505,44506,44507,44509,44510,44511,44513,44514,44515,44517,44518,44519,44520,44521,44522,44523,44524,44525,44526,44527,44528,44529,44530,44531,44532,44533,44534,44535,44538,44539,44541,44542,44546,44547,44548,44549,44550,44551,44554,44556,44558,44559,44560,44561,44562,44563,44565,44566,44567,44568,44569,44570,44571,44572,null,null,null,null,null,null,44573,44574,44575,44576,44577,44578,44579,44580,44581,44582,44583,44584,44585,44586,44587,44588,44589,44590,44591,44594,44595,44597,44598,44601,44603,44604,null,null,null,null,null,null,44605,44606,44607,44610,44612,44615,44616,44617,44619,44623,44625,44626,44627,44629,44631,44632,44633,44634,44635,44638,44642,44643,44644,44646,44647,44650,44651,44653,44654,44655,44657,44658,44659,44660,44661,44662,44663,44666,44670,44671,44672,44673,44674,44675,44678,44679,44680,44681,44682,44683,44685,44686,44687,44688,44689,44690,44691,44692,44693,44694,44695,44696,44697,44698,44699,44700,44701,44702,44703,44704,44705,44706,44707,44708,44709,44710,44711,44712,44713,44714,44715,44716,44717,44718,44719,44720,44721,44722,44723,44724,44725,44726,44727,44728,44729,44730,44731,44735,44737,44738,44739,44741,44742,44743,44744,44745,44746,44747,44750,44754,44755,44756,44757,44758,44759,44762,44763,44765,44766,44767,44768,44769,44770,44771,44772,44773,44774,44775,44777,44778,44780,44782,44783,44784,44785,44786,44787,44789,44790,44791,44793,44794,44795,44797,44798,44799,44800,44801,44802,44803,44804,44805,null,null,null,null,null,null,44806,44809,44810,44811,44812,44814,44815,44817,44818,44819,44820,44821,44822,44823,44824,44825,44826,44827,44828,44829,44830,44831,44832,44833,44834,44835,null,null,null,null,null,null,44836,44837,44838,44839,44840,44841,44842,44843,44846,44847,44849,44851,44853,44854,44855,44856,44857,44858,44859,44862,44864,44868,44869,44870,44871,44874,44875,44876,44877,44878,44879,44881,44882,44883,44884,44885,44886,44887,44888,44889,44890,44891,44894,44895,44896,44897,44898,44899,44902,44903,44904,44905,44906,44907,44908,44909,44910,44911,44912,44913,44914,44915,44916,44917,44918,44919,44920,44922,44923,44924,44925,44926,44927,44929,44930,44931,44933,44934,44935,44937,44938,44939,44940,44941,44942,44943,44946,44947,44948,44950,44951,44952,44953,44954,44955,44957,44958,44959,44960,44961,44962,44963,44964,44965,44966,44967,44968,44969,44970,44971,44972,44973,44974,44975,44976,44977,44978,44979,44980,44981,44982,44983,44986,44987,44989,44990,44991,44993,44994,44995,44996,44997,44998,45002,45004,45007,45008,45009,45010,45011,45013,45014,45015,45016,45017,45018,45019,45021,45022,45023,45024,45025,null,null,null,null,null,null,45026,45027,45028,45029,45030,45031,45034,45035,45036,45037,45038,45039,45042,45043,45045,45046,45047,45049,45050,45051,45052,45053,45054,45055,45058,45059,null,null,null,null,null,null,45061,45062,45063,45064,45065,45066,45067,45069,45070,45071,45073,45074,45075,45077,45078,45079,45080,45081,45082,45083,45086,45087,45088,45089,45090,45091,45092,45093,45094,45095,45097,45098,45099,45100,45101,45102,45103,45104,45105,45106,45107,45108,45109,45110,45111,45112,45113,45114,45115,45116,45117,45118,45119,45120,45121,45122,45123,45126,45127,45129,45131,45133,45135,45136,45137,45138,45142,45144,45146,45147,45148,45150,45151,45152,45153,45154,45155,45156,45157,45158,45159,45160,45161,45162,45163,45164,45165,45166,45167,45168,45169,45170,45171,45172,45173,45174,45175,45176,45177,45178,45179,45182,45183,45185,45186,45187,45189,45190,45191,45192,45193,45194,45195,45198,45200,45202,45203,45204,45205,45206,45207,45211,45213,45214,45219,45220,45221,45222,45223,45226,45232,45234,45238,45239,45241,45242,45243,45245,45246,45247,45248,45249,45250,45251,45254,45258,45259,45260,45261,45262,45263,45266,null,null,null,null,null,null,45267,45269,45270,45271,45273,45274,45275,45276,45277,45278,45279,45281,45282,45283,45284,45286,45287,45288,45289,45290,45291,45292,45293,45294,45295,45296,null,null,null,null,null,null,45297,45298,45299,45300,45301,45302,45303,45304,45305,45306,45307,45308,45309,45310,45311,45312,45313,45314,45315,45316,45317,45318,45319,45322,45325,45326,45327,45329,45332,45333,45334,45335,45338,45342,45343,45344,45345,45346,45350,45351,45353,45354,45355,45357,45358,45359,45360,45361,45362,45363,45366,45370,45371,45372,45373,45374,45375,45378,45379,45381,45382,45383,45385,45386,45387,45388,45389,45390,45391,45394,45395,45398,45399,45401,45402,45403,45405,45406,45407,45409,45410,45411,45412,45413,45414,45415,45416,45417,45418,45419,45420,45421,45422,45423,45424,45425,45426,45427,45428,45429,45430,45431,45434,45435,45437,45438,45439,45441,45443,45444,45445,45446,45447,45450,45452,45454,45455,45456,45457,45461,45462,45463,45465,45466,45467,45469,45470,45471,45472,45473,45474,45475,45476,45477,45478,45479,45481,45482,45483,45484,45485,45486,45487,45488,45489,45490,45491,45492,45493,45494,45495,45496,null,null,null,null,null,null,45497,45498,45499,45500,45501,45502,45503,45504,45505,45506,45507,45508,45509,45510,45511,45512,45513,45514,45515,45517,45518,45519,45521,45522,45523,45525,null,null,null,null,null,null,45526,45527,45528,45529,45530,45531,45534,45536,45537,45538,45539,45540,45541,45542,45543,45546,45547,45549,45550,45551,45553,45554,45555,45556,45557,45558,45559,45560,45562,45564,45566,45567,45568,45569,45570,45571,45574,45575,45577,45578,45581,45582,45583,45584,45585,45586,45587,45590,45592,45594,45595,45596,45597,45598,45599,45601,45602,45603,45604,45605,45606,45607,45608,45609,45610,45611,45612,45613,45614,45615,45616,45617,45618,45619,45621,45622,45623,45624,45625,45626,45627,45629,45630,45631,45632,45633,45634,45635,45636,45637,45638,45639,45640,45641,45642,45643,45644,45645,45646,45647,45648,45649,45650,45651,45652,45653,45654,45655,45657,45658,45659,45661,45662,45663,45665,45666,45667,45668,45669,45670,45671,45674,45675,45676,45677,45678,45679,45680,45681,45682,45683,45686,45687,45688,45689,45690,45691,45693,45694,45695,45696,45697,45698,45699,45702,45703,45704,45706,45707,45708,45709,45710,null,null,null,null,null,null,45711,45714,45715,45717,45718,45719,45723,45724,45725,45726,45727,45730,45732,45735,45736,45737,45739,45741,45742,45743,45745,45746,45747,45749,45750,45751,null,null,null,null,null,null,45752,45753,45754,45755,45756,45757,45758,45759,45760,45761,45762,45763,45764,45765,45766,45767,45770,45771,45773,45774,45775,45777,45779,45780,45781,45782,45783,45786,45788,45790,45791,45792,45793,45795,45799,45801,45802,45808,45809,45810,45814,45820,45821,45822,45826,45827,45829,45830,45831,45833,45834,45835,45836,45837,45838,45839,45842,45846,45847,45848,45849,45850,45851,45853,45854,45855,45856,45857,45858,45859,45860,45861,45862,45863,45864,45865,45866,45867,45868,45869,45870,45871,45872,45873,45874,45875,45876,45877,45878,45879,45880,45881,45882,45883,45884,45885,45886,45887,45888,45889,45890,45891,45892,45893,45894,45895,45896,45897,45898,45899,45900,45901,45902,45903,45904,45905,45906,45907,45911,45913,45914,45917,45920,45921,45922,45923,45926,45928,45930,45932,45933,45935,45938,45939,45941,45942,45943,45945,45946,45947,45948,45949,45950,45951,45954,45958,45959,45960,45961,45962,45963,45965,null,null,null,null,null,null,45966,45967,45969,45970,45971,45973,45974,45975,45976,45977,45978,45979,45980,45981,45982,45983,45986,45987,45988,45989,45990,45991,45993,45994,45995,45997,null,null,null,null,null,null,45998,45999,46000,46001,46002,46003,46004,46005,46006,46007,46008,46009,46010,46011,46012,46013,46014,46015,46016,46017,46018,46019,46022,46023,46025,46026,46029,46031,46033,46034,46035,46038,46040,46042,46044,46046,46047,46049,46050,46051,46053,46054,46055,46057,46058,46059,46060,46061,46062,46063,46064,46065,46066,46067,46068,46069,46070,46071,46072,46073,46074,46075,46077,46078,46079,46080,46081,46082,46083,46084,46085,46086,46087,46088,46089,46090,46091,46092,46093,46094,46095,46097,46098,46099,46100,46101,46102,46103,46105,46106,46107,46109,46110,46111,46113,46114,46115,46116,46117,46118,46119,46122,46124,46125,46126,46127,46128,46129,46130,46131,46133,46134,46135,46136,46137,46138,46139,46140,46141,46142,46143,46144,46145,46146,46147,46148,46149,46150,46151,46152,46153,46154,46155,46156,46157,46158,46159,46162,46163,46165,46166,46167,46169,46170,46171,46172,46173,46174,46175,46178,46180,46182,null,null,null,null,null,null,46183,46184,46185,46186,46187,46189,46190,46191,46192,46193,46194,46195,46196,46197,46198,46199,46200,46201,46202,46203,46204,46205,46206,46207,46209,46210,null,null,null,null,null,null,46211,46212,46213,46214,46215,46217,46218,46219,46220,46221,46222,46223,46224,46225,46226,46227,46228,46229,46230,46231,46232,46233,46234,46235,46236,46238,46239,46240,46241,46242,46243,46245,46246,46247,46249,46250,46251,46253,46254,46255,46256,46257,46258,46259,46260,46262,46264,46266,46267,46268,46269,46270,46271,46273,46274,46275,46277,46278,46279,46281,46282,46283,46284,46285,46286,46287,46289,46290,46291,46292,46294,46295,46296,46297,46298,46299,46302,46303,46305,46306,46309,46311,46312,46313,46314,46315,46318,46320,46322,46323,46324,46325,46326,46327,46329,46330,46331,46332,46333,46334,46335,46336,46337,46338,46339,46340,46341,46342,46343,46344,46345,46346,46347,46348,46349,46350,46351,46352,46353,46354,46355,46358,46359,46361,46362,46365,46366,46367,46368,46369,46370,46371,46374,46379,46380,46381,46382,46383,46386,46387,46389,46390,46391,46393,46394,46395,46396,46397,46398,46399,46402,46406,null,null,null,null,null,null,46407,46408,46409,46410,46414,46415,46417,46418,46419,46421,46422,46423,46424,46425,46426,46427,46430,46434,46435,46436,46437,46438,46439,46440,46441,46442,null,null,null,null,null,null,46443,46444,46445,46446,46447,46448,46449,46450,46451,46452,46453,46454,46455,46456,46457,46458,46459,46460,46461,46462,46463,46464,46465,46466,46467,46468,46469,46470,46471,46472,46473,46474,46475,46476,46477,46478,46479,46480,46481,46482,46483,46484,46485,46486,46487,46488,46489,46490,46491,46492,46493,46494,46495,46498,46499,46501,46502,46503,46505,46508,46509,46510,46511,46514,46518,46519,46520,46521,46522,46526,46527,46529,46530,46531,46533,46534,46535,46536,46537,46538,46539,46542,46546,46547,46548,46549,46550,46551,46553,46554,46555,46556,46557,46558,46559,46560,46561,46562,46563,46564,46565,46566,46567,46568,46569,46570,46571,46573,46574,46575,46576,46577,46578,46579,46580,46581,46582,46583,46584,46585,46586,46587,46588,46589,46590,46591,46592,46593,46594,46595,46596,46597,46598,46599,46600,46601,46602,46603,46604,46605,46606,46607,46610,46611,46613,46614,46615,46617,46618,46619,46620,46621,null,null,null,null,null,null,46622,46623,46624,46625,46626,46627,46628,46630,46631,46632,46633,46634,46635,46637,46638,46639,46640,46641,46642,46643,46645,46646,46647,46648,46649,46650,null,null,null,null,null,null,46651,46652,46653,46654,46655,46656,46657,46658,46659,46660,46661,46662,46663,46665,46666,46667,46668,46669,46670,46671,46672,46673,46674,46675,46676,46677,46678,46679,46680,46681,46682,46683,46684,46685,46686,46687,46688,46689,46690,46691,46693,46694,46695,46697,46698,46699,46700,46701,46702,46703,46704,46705,46706,46707,46708,46709,46710,46711,46712,46713,46714,46715,46716,46717,46718,46719,46720,46721,46722,46723,46724,46725,46726,46727,46728,46729,46730,46731,46732,46733,46734,46735,46736,46737,46738,46739,46740,46741,46742,46743,46744,46745,46746,46747,46750,46751,46753,46754,46755,46757,46758,46759,46760,46761,46762,46765,46766,46767,46768,46770,46771,46772,46773,46774,46775,46776,46777,46778,46779,46780,46781,46782,46783,46784,46785,46786,46787,46788,46789,46790,46791,46792,46793,46794,46795,46796,46797,46798,46799,46800,46801,46802,46803,46805,46806,46807,46808,46809,46810,46811,46812,46813,null,null,null,null,null,null,46814,46815,46816,46817,46818,46819,46820,46821,46822,46823,46824,46825,46826,46827,46828,46829,46830,46831,46833,46834,46835,46837,46838,46839,46841,46842,null,null,null,null,null,null,46843,46844,46845,46846,46847,46850,46851,46852,46854,46855,46856,46857,46858,46859,46860,46861,46862,46863,46864,46865,46866,46867,46868,46869,46870,46871,46872,46873,46874,46875,46876,46877,46878,46879,46880,46881,46882,46883,46884,46885,46886,46887,46890,46891,46893,46894,46897,46898,46899,46900,46901,46902,46903,46906,46908,46909,46910,46911,46912,46913,46914,46915,46917,46918,46919,46921,46922,46923,46925,46926,46927,46928,46929,46930,46931,46934,46935,46936,46937,46938,46939,46940,46941,46942,46943,46945,46946,46947,46949,46950,46951,46953,46954,46955,46956,46957,46958,46959,46962,46964,46966,46967,46968,46969,46970,46971,46974,46975,46977,46978,46979,46981,46982,46983,46984,46985,46986,46987,46990,46995,46996,46997,47002,47003,47005,47006,47007,47009,47010,47011,47012,47013,47014,47015,47018,47022,47023,47024,47025,47026,47027,47030,47031,47033,47034,47035,47036,47037,47038,47039,47040,47041,null,null,null,null,null,null,47042,47043,47044,47045,47046,47048,47050,47051,47052,47053,47054,47055,47056,47057,47058,47059,47060,47061,47062,47063,47064,47065,47066,47067,47068,47069,null,null,null,null,null,null,47070,47071,47072,47073,47074,47075,47076,47077,47078,47079,47080,47081,47082,47083,47086,47087,47089,47090,47091,47093,47094,47095,47096,47097,47098,47099,47102,47106,47107,47108,47109,47110,47114,47115,47117,47118,47119,47121,47122,47123,47124,47125,47126,47127,47130,47132,47134,47135,47136,47137,47138,47139,47142,47143,47145,47146,47147,47149,47150,47151,47152,47153,47154,47155,47158,47162,47163,47164,47165,47166,47167,47169,47170,47171,47173,47174,47175,47176,47177,47178,47179,47180,47181,47182,47183,47184,47186,47188,47189,47190,47191,47192,47193,47194,47195,47198,47199,47201,47202,47203,47205,47206,47207,47208,47209,47210,47211,47214,47216,47218,47219,47220,47221,47222,47223,47225,47226,47227,47229,47230,47231,47232,47233,47234,47235,47236,47237,47238,47239,47240,47241,47242,47243,47244,47246,47247,47248,47249,47250,47251,47252,47253,47254,47255,47256,47257,47258,47259,47260,47261,47262,47263,null,null,null,null,null,null,47264,47265,47266,47267,47268,47269,47270,47271,47273,47274,47275,47276,47277,47278,47279,47281,47282,47283,47285,47286,47287,47289,47290,47291,47292,47293,null,null,null,null,null,null,47294,47295,47298,47300,47302,47303,47304,47305,47306,47307,47309,47310,47311,47313,47314,47315,47317,47318,47319,47320,47321,47322,47323,47324,47326,47328,47330,47331,47332,47333,47334,47335,47338,47339,47341,47342,47343,47345,47346,47347,47348,47349,47350,47351,47354,47356,47358,47359,47360,47361,47362,47363,47365,47366,47367,47368,47369,47370,47371,47372,47373,47374,47375,47376,47377,47378,47379,47380,47381,47382,47383,47385,47386,47387,47388,47389,47390,47391,47393,47394,47395,47396,47397,47398,47399,47400,47401,47402,47403,47404,47405,47406,47407,47408,47409,47410,47411,47412,47413,47414,47415,47416,47417,47418,47419,47422,47423,47425,47426,47427,47429,47430,47431,47432,47433,47434,47435,47437,47438,47440,47442,47443,47444,47445,47446,47447,47450,47451,47453,47454,47455,47457,47458,47459,47460,47461,47462,47463,47466,47468,47470,47471,47472,47473,47474,47475,47478,47479,47481,47482,47483,47485,null,null,null,null,null,null,47486,47487,47488,47489,47490,47491,47494,47496,47499,47500,47503,47504,47505,47506,47507,47508,47509,47510,47511,47512,47513,47514,47515,47516,47517,47518,null,null,null,null,null,null,47519,47520,47521,47522,47523,47524,47525,47526,47527,47528,47529,47530,47531,47534,47535,47537,47538,47539,47541,47542,47543,47544,47545,47546,47547,47550,47552,47554,47555,47556,47557,47558,47559,47562,47563,47565,47571,47572,47573,47574,47575,47578,47580,47583,47584,47586,47590,47591,47593,47594,47595,47597,47598,47599,47600,47601,47602,47603,47606,47611,47612,47613,47614,47615,47618,47619,47620,47621,47622,47623,47625,47626,47627,47628,47629,47630,47631,47632,47633,47634,47635,47636,47638,47639,47640,47641,47642,47643,47644,47645,47646,47647,47648,47649,47650,47651,47652,47653,47654,47655,47656,47657,47658,47659,47660,47661,47662,47663,47664,47665,47666,47667,47668,47669,47670,47671,47674,47675,47677,47678,47679,47681,47683,47684,47685,47686,47687,47690,47692,47695,47696,47697,47698,47702,47703,47705,47706,47707,47709,47710,47711,47712,47713,47714,47715,47718,47722,47723,47724,47725,47726,47727,null,null,null,null,null,null,47730,47731,47733,47734,47735,47737,47738,47739,47740,47741,47742,47743,47744,47745,47746,47750,47752,47753,47754,47755,47757,47758,47759,47760,47761,47762,null,null,null,null,null,null,47763,47764,47765,47766,47767,47768,47769,47770,47771,47772,47773,47774,47775,47776,47777,47778,47779,47780,47781,47782,47783,47786,47789,47790,47791,47793,47795,47796,47797,47798,47799,47802,47804,47806,47807,47808,47809,47810,47811,47813,47814,47815,47817,47818,47819,47820,47821,47822,47823,47824,47825,47826,47827,47828,47829,47830,47831,47834,47835,47836,47837,47838,47839,47840,47841,47842,47843,47844,47845,47846,47847,47848,47849,47850,47851,47852,47853,47854,47855,47856,47857,47858,47859,47860,47861,47862,47863,47864,47865,47866,47867,47869,47870,47871,47873,47874,47875,47877,47878,47879,47880,47881,47882,47883,47884,47886,47888,47890,47891,47892,47893,47894,47895,47897,47898,47899,47901,47902,47903,47905,47906,47907,47908,47909,47910,47911,47912,47914,47916,47917,47918,47919,47920,47921,47922,47923,47927,47929,47930,47935,47936,47937,47938,47939,47942,47944,47946,47947,47948,47950,47953,47954,null,null,null,null,null,null,47955,47957,47958,47959,47961,47962,47963,47964,47965,47966,47967,47968,47970,47972,47973,47974,47975,47976,47977,47978,47979,47981,47982,47983,47984,47985,null,null,null,null,null,null,47986,47987,47988,47989,47990,47991,47992,47993,47994,47995,47996,47997,47998,47999,48000,48001,48002,48003,48004,48005,48006,48007,48009,48010,48011,48013,48014,48015,48017,48018,48019,48020,48021,48022,48023,48024,48025,48026,48027,48028,48029,48030,48031,48032,48033,48034,48035,48037,48038,48039,48041,48042,48043,48045,48046,48047,48048,48049,48050,48051,48053,48054,48056,48057,48058,48059,48060,48061,48062,48063,48065,48066,48067,48069,48070,48071,48073,48074,48075,48076,48077,48078,48079,48081,48082,48084,48085,48086,48087,48088,48089,48090,48091,48092,48093,48094,48095,48096,48097,48098,48099,48100,48101,48102,48103,48104,48105,48106,48107,48108,48109,48110,48111,48112,48113,48114,48115,48116,48117,48118,48119,48122,48123,48125,48126,48129,48131,48132,48133,48134,48135,48138,48142,48144,48146,48147,48153,48154,48160,48161,48162,48163,48166,48168,48170,48171,48172,48174,48175,48178,48179,48181,null,null,null,null,null,null,48182,48183,48185,48186,48187,48188,48189,48190,48191,48194,48198,48199,48200,48202,48203,48206,48207,48209,48210,48211,48212,48213,48214,48215,48216,48217,null,null,null,null,null,null,48218,48219,48220,48222,48223,48224,48225,48226,48227,48228,48229,48230,48231,48232,48233,48234,48235,48236,48237,48238,48239,48240,48241,48242,48243,48244,48245,48246,48247,48248,48249,48250,48251,48252,48253,48254,48255,48256,48257,48258,48259,48262,48263,48265,48266,48269,48271,48272,48273,48274,48275,48278,48280,48283,48284,48285,48286,48287,48290,48291,48293,48294,48297,48298,48299,48300,48301,48302,48303,48306,48310,48311,48312,48313,48314,48315,48318,48319,48321,48322,48323,48325,48326,48327,48328,48329,48330,48331,48332,48334,48338,48339,48340,48342,48343,48345,48346,48347,48349,48350,48351,48352,48353,48354,48355,48356,48357,48358,48359,48360,48361,48362,48363,48364,48365,48366,48367,48368,48369,48370,48371,48375,48377,48378,48379,48381,48382,48383,48384,48385,48386,48387,48390,48392,48394,48395,48396,48397,48398,48399,48401,48402,48403,48405,48406,48407,48408,48409,48410,48411,48412,48413,null,null,null,null,null,null,48414,48415,48416,48417,48418,48419,48421,48422,48423,48424,48425,48426,48427,48429,48430,48431,48432,48433,48434,48435,48436,48437,48438,48439,48440,48441,null,null,null,null,null,null,48442,48443,48444,48445,48446,48447,48449,48450,48451,48452,48453,48454,48455,48458,48459,48461,48462,48463,48465,48466,48467,48468,48469,48470,48471,48474,48475,48476,48477,48478,48479,48480,48481,48482,48483,48485,48486,48487,48489,48490,48491,48492,48493,48494,48495,48496,48497,48498,48499,48500,48501,48502,48503,48504,48505,48506,48507,48508,48509,48510,48511,48514,48515,48517,48518,48523,48524,48525,48526,48527,48530,48532,48534,48535,48536,48539,48541,48542,48543,48544,48545,48546,48547,48549,48550,48551,48552,48553,48554,48555,48556,48557,48558,48559,48561,48562,48563,48564,48565,48566,48567,48569,48570,48571,48572,48573,48574,48575,48576,48577,48578,48579,48580,48581,48582,48583,48584,48585,48586,48587,48588,48589,48590,48591,48592,48593,48594,48595,48598,48599,48601,48602,48603,48605,48606,48607,48608,48609,48610,48611,48612,48613,48614,48615,48616,48618,48619,48620,48621,48622,48623,48625,null,null,null,null,null,null,48626,48627,48629,48630,48631,48633,48634,48635,48636,48637,48638,48639,48641,48642,48644,48646,48647,48648,48649,48650,48651,48654,48655,48657,48658,48659,null,null,null,null,null,null,48661,48662,48663,48664,48665,48666,48667,48670,48672,48673,48674,48675,48676,48677,48678,48679,48680,48681,48682,48683,48684,48685,48686,48687,48688,48689,48690,48691,48692,48693,48694,48695,48696,48697,48698,48699,48700,48701,48702,48703,48704,48705,48706,48707,48710,48711,48713,48714,48715,48717,48719,48720,48721,48722,48723,48726,48728,48732,48733,48734,48735,48738,48739,48741,48742,48743,48745,48747,48748,48749,48750,48751,48754,48758,48759,48760,48761,48762,48766,48767,48769,48770,48771,48773,48774,48775,48776,48777,48778,48779,48782,48786,48787,48788,48789,48790,48791,48794,48795,48796,48797,48798,48799,48800,48801,48802,48803,48804,48805,48806,48807,48809,48810,48811,48812,48813,48814,48815,48816,48817,48818,48819,48820,48821,48822,48823,48824,48825,48826,48827,48828,48829,48830,48831,48832,48833,48834,48835,48836,48837,48838,48839,48840,48841,48842,48843,48844,48845,48846,48847,48850,48851,null,null,null,null,null,null,48853,48854,48857,48858,48859,48860,48861,48862,48863,48865,48866,48870,48871,48872,48873,48874,48875,48877,48878,48879,48880,48881,48882,48883,48884,48885,null,null,null,null,null,null,48886,48887,48888,48889,48890,48891,48892,48893,48894,48895,48896,48898,48899,48900,48901,48902,48903,48906,48907,48908,48909,48910,48911,48912,48913,48914,48915,48916,48917,48918,48919,48922,48926,48927,48928,48929,48930,48931,48932,48933,48934,48935,48936,48937,48938,48939,48940,48941,48942,48943,48944,48945,48946,48947,48948,48949,48950,48951,48952,48953,48954,48955,48956,48957,48958,48959,48962,48963,48965,48966,48967,48969,48970,48971,48972,48973,48974,48975,48978,48979,48980,48982,48983,48984,48985,48986,48987,48988,48989,48990,48991,48992,48993,48994,48995,48996,48997,48998,48999,49000,49001,49002,49003,49004,49005,49006,49007,49008,49009,49010,49011,49012,49013,49014,49015,49016,49017,49018,49019,49020,49021,49022,49023,49024,49025,49026,49027,49028,49029,49030,49031,49032,49033,49034,49035,49036,49037,49038,49039,49040,49041,49042,49043,49045,49046,49047,49048,49049,49050,49051,49052,49053,null,null,null,null,null,null,49054,49055,49056,49057,49058,49059,49060,49061,49062,49063,49064,49065,49066,49067,49068,49069,49070,49071,49073,49074,49075,49076,49077,49078,49079,49080,null,null,null,null,null,null,49081,49082,49083,49084,49085,49086,49087,49088,49089,49090,49091,49092,49094,49095,49096,49097,49098,49099,49102,49103,49105,49106,49107,49109,49110,49111,49112,49113,49114,49115,49117,49118,49120,49122,49123,49124,49125,49126,49127,49128,49129,49130,49131,49132,49133,49134,49135,49136,49137,49138,49139,49140,49141,49142,49143,49144,49145,49146,49147,49148,49149,49150,49151,49152,49153,49154,49155,49156,49157,49158,49159,49160,49161,49162,49163,49164,49165,49166,49167,49168,49169,49170,49171,49172,49173,49174,49175,49176,49177,49178,49179,49180,49181,49182,49183,49184,49185,49186,49187,49188,49189,49190,49191,49192,49193,49194,49195,49196,49197,49198,49199,49200,49201,49202,49203,49204,49205,49206,49207,49208,49209,49210,49211,49213,49214,49215,49216,49217,49218,49219,49220,49221,49222,49223,49224,49225,49226,49227,49228,49229,49230,49231,49232,49234,49235,49236,49237,49238,49239,49241,49242,49243,null,null,null,null,null,null,49245,49246,49247,49249,49250,49251,49252,49253,49254,49255,49258,49259,49260,49261,49262,49263,49264,49265,49266,49267,49268,49269,49270,49271,49272,49273,null,null,null,null,null,null,49274,49275,49276,49277,49278,49279,49280,49281,49282,49283,49284,49285,49286,49287,49288,49289,49290,49291,49292,49293,49294,49295,49298,49299,49301,49302,49303,49305,49306,49307,49308,49309,49310,49311,49314,49316,49318,49319,49320,49321,49322,49323,49326,49329,49330,49335,49336,49337,49338,49339,49342,49346,49347,49348,49350,49351,49354,49355,49357,49358,49359,49361,49362,49363,49364,49365,49366,49367,49370,49374,49375,49376,49377,49378,49379,49382,49383,49385,49386,49387,49389,49390,49391,49392,49393,49394,49395,49398,49400,49402,49403,49404,49405,49406,49407,49409,49410,49411,49413,49414,49415,49417,49418,49419,49420,49421,49422,49423,49425,49426,49427,49428,49430,49431,49432,49433,49434,49435,49441,49442,49445,49448,49449,49450,49451,49454,49458,49459,49460,49461,49463,49466,49467,49469,49470,49471,49473,49474,49475,49476,49477,49478,49479,49482,49486,49487,49488,49489,49490,49491,49494,49495,null,null,null,null,null,null,49497,49498,49499,49501,49502,49503,49504,49505,49506,49507,49510,49514,49515,49516,49517,49518,49519,49521,49522,49523,49525,49526,49527,49529,49530,49531,null,null,null,null,null,null,49532,49533,49534,49535,49536,49537,49538,49539,49540,49542,49543,49544,49545,49546,49547,49551,49553,49554,49555,49557,49559,49560,49561,49562,49563,49566,49568,49570,49571,49572,49574,49575,49578,49579,49581,49582,49583,49585,49586,49587,49588,49589,49590,49591,49592,49593,49594,49595,49596,49598,49599,49600,49601,49602,49603,49605,49606,49607,49609,49610,49611,49613,49614,49615,49616,49617,49618,49619,49621,49622,49625,49626,49627,49628,49629,49630,49631,49633,49634,49635,49637,49638,49639,49641,49642,49643,49644,49645,49646,49647,49650,49652,49653,49654,49655,49656,49657,49658,49659,49662,49663,49665,49666,49667,49669,49670,49671,49672,49673,49674,49675,49678,49680,49682,49683,49684,49685,49686,49687,49690,49691,49693,49694,49697,49698,49699,49700,49701,49702,49703,49706,49708,49710,49712,49715,49717,49718,49719,49720,49721,49722,49723,49724,49725,49726,49727,49728,49729,49730,49731,49732,49733,null,null,null,null,null,null,49734,49735,49737,49738,49739,49740,49741,49742,49743,49746,49747,49749,49750,49751,49753,49754,49755,49756,49757,49758,49759,49761,49762,49763,49764,49766,null,null,null,null,null,null,49767,49768,49769,49770,49771,49774,49775,49777,49778,49779,49781,49782,49783,49784,49785,49786,49787,49790,49792,49794,49795,49796,49797,49798,49799,49802,49803,49804,49805,49806,49807,49809,49810,49811,49812,49813,49814,49815,49817,49818,49820,49822,49823,49824,49825,49826,49827,49830,49831,49833,49834,49835,49838,49839,49840,49841,49842,49843,49846,49848,49850,49851,49852,49853,49854,49855,49856,49857,49858,49859,49860,49861,49862,49863,49864,49865,49866,49867,49868,49869,49870,49871,49872,49873,49874,49875,49876,49877,49878,49879,49880,49881,49882,49883,49886,49887,49889,49890,49893,49894,49895,49896,49897,49898,49902,49904,49906,49907,49908,49909,49911,49914,49917,49918,49919,49921,49922,49923,49924,49925,49926,49927,49930,49931,49934,49935,49936,49937,49938,49942,49943,49945,49946,49947,49949,49950,49951,49952,49953,49954,49955,49958,49959,49962,49963,49964,49965,49966,49967,49968,49969,49970,null,null,null,null,null,null,49971,49972,49973,49974,49975,49976,49977,49978,49979,49980,49981,49982,49983,49984,49985,49986,49987,49988,49990,49991,49992,49993,49994,49995,49996,49997,null,null,null,null,null,null,49998,49999,50000,50001,50002,50003,50004,50005,50006,50007,50008,50009,50010,50011,50012,50013,50014,50015,50016,50017,50018,50019,50020,50021,50022,50023,50026,50027,50029,50030,50031,50033,50035,50036,50037,50038,50039,50042,50043,50046,50047,50048,50049,50050,50051,50053,50054,50055,50057,50058,50059,50061,50062,50063,50064,50065,50066,50067,50068,50069,50070,50071,50072,50073,50074,50075,50076,50077,50078,50079,50080,50081,50082,50083,50084,50085,50086,50087,50088,50089,50090,50091,50092,50093,50094,50095,50096,50097,50098,50099,50100,50101,50102,50103,50104,50105,50106,50107,50108,50109,50110,50111,50113,50114,50115,50116,50117,50118,50119,50120,50121,50122,50123,50124,50125,50126,50127,50128,50129,50130,50131,50132,50133,50134,50135,50138,50139,50141,50142,50145,50147,50148,50149,50150,50151,50154,50155,50156,50158,50159,50160,50161,50162,50163,50166,50167,50169,50170,50171,50172,50173,50174,null,null,null,null,null,null,50175,50176,50177,50178,50179,50180,50181,50182,50183,50185,50186,50187,50188,50189,50190,50191,50193,50194,50195,50196,50197,50198,50199,50200,50201,50202,null,null,null,null,null,null,50203,50204,50205,50206,50207,50208,50209,50210,50211,50213,50214,50215,50216,50217,50218,50219,50221,50222,50223,50225,50226,50227,50229,50230,50231,50232,50233,50234,50235,50238,50239,50240,50241,50242,50243,50244,50245,50246,50247,50249,50250,50251,50252,50253,50254,50255,50256,50257,50258,50259,50260,50261,50262,50263,50264,50265,50266,50267,50268,50269,50270,50271,50272,50273,50274,50275,50278,50279,50281,50282,50283,50285,50286,50287,50288,50289,50290,50291,50294,50295,50296,50298,50299,50300,50301,50302,50303,50305,50306,50307,50308,50309,50310,50311,50312,50313,50314,50315,50316,50317,50318,50319,50320,50321,50322,50323,50325,50326,50327,50328,50329,50330,50331,50333,50334,50335,50336,50337,50338,50339,50340,50341,50342,50343,50344,50345,50346,50347,50348,50349,50350,50351,50352,50353,50354,50355,50356,50357,50358,50359,50361,50362,50363,50365,50366,50367,50368,50369,50370,50371,50372,50373,null,null,null,null,null,null,50374,50375,50376,50377,50378,50379,50380,50381,50382,50383,50384,50385,50386,50387,50388,50389,50390,50391,50392,50393,50394,50395,50396,50397,50398,50399,null,null,null,null,null,null,50400,50401,50402,50403,50404,50405,50406,50407,50408,50410,50411,50412,50413,50414,50415,50418,50419,50421,50422,50423,50425,50427,50428,50429,50430,50434,50435,50436,50437,50438,50439,50440,50441,50442,50443,50445,50446,50447,50449,50450,50451,50453,50454,50455,50456,50457,50458,50459,50461,50462,50463,50464,50465,50466,50467,50468,50469,50470,50471,50474,50475,50477,50478,50479,50481,50482,50483,50484,50485,50486,50487,50490,50492,50494,50495,50496,50497,50498,50499,50502,50503,50507,50511,50512,50513,50514,50518,50522,50523,50524,50527,50530,50531,50533,50534,50535,50537,50538,50539,50540,50541,50542,50543,50546,50550,50551,50552,50553,50554,50555,50558,50559,50561,50562,50563,50565,50566,50568,50569,50570,50571,50574,50576,50578,50579,50580,50582,50585,50586,50587,50589,50590,50591,50593,50594,50595,50596,50597,50598,50599,50600,50602,50603,50604,50605,50606,50607,50608,50609,50610,50611,50614,null,null,null,null,null,null,50615,50618,50623,50624,50625,50626,50627,50635,50637,50639,50642,50643,50645,50646,50647,50649,50650,50651,50652,50653,50654,50655,50658,50660,50662,50663,null,null,null,null,null,null,50664,50665,50666,50667,50671,50673,50674,50675,50677,50680,50681,50682,50683,50690,50691,50692,50697,50698,50699,50701,50702,50703,50705,50706,50707,50708,50709,50710,50711,50714,50717,50718,50719,50720,50721,50722,50723,50726,50727,50729,50730,50731,50735,50737,50738,50742,50744,50746,50748,50749,50750,50751,50754,50755,50757,50758,50759,50761,50762,50763,50764,50765,50766,50767,50770,50774,50775,50776,50777,50778,50779,50782,50783,50785,50786,50787,50788,50789,50790,50791,50792,50793,50794,50795,50797,50798,50800,50802,50803,50804,50805,50806,50807,50810,50811,50813,50814,50815,50817,50818,50819,50820,50821,50822,50823,50826,50828,50830,50831,50832,50833,50834,50835,50838,50839,50841,50842,50843,50845,50846,50847,50848,50849,50850,50851,50854,50856,50858,50859,50860,50861,50862,50863,50866,50867,50869,50870,50871,50875,50876,50877,50878,50879,50882,50884,50886,50887,50888,50889,50890,50891,50894,null,null,null,null,null,null,50895,50897,50898,50899,50901,50902,50903,50904,50905,50906,50907,50910,50911,50914,50915,50916,50917,50918,50919,50922,50923,50925,50926,50927,50929,50930,null,null,null,null,null,null,50931,50932,50933,50934,50935,50938,50939,50940,50942,50943,50944,50945,50946,50947,50950,50951,50953,50954,50955,50957,50958,50959,50960,50961,50962,50963,50966,50968,50970,50971,50972,50973,50974,50975,50978,50979,50981,50982,50983,50985,50986,50987,50988,50989,50990,50991,50994,50996,50998,51000,51001,51002,51003,51006,51007,51009,51010,51011,51013,51014,51015,51016,51017,51019,51022,51024,51033,51034,51035,51037,51038,51039,51041,51042,51043,51044,51045,51046,51047,51049,51050,51052,51053,51054,51055,51056,51057,51058,51059,51062,51063,51065,51066,51067,51071,51072,51073,51074,51078,51083,51084,51085,51087,51090,51091,51093,51097,51099,51100,51101,51102,51103,51106,51111,51112,51113,51114,51115,51118,51119,51121,51122,51123,51125,51126,51127,51128,51129,51130,51131,51134,51138,51139,51140,51141,51142,51143,51146,51147,51149,51151,51153,51154,51155,51156,51157,51158,51159,51161,51162,51163,51164,null,null,null,null,null,null,51166,51167,51168,51169,51170,51171,51173,51174,51175,51177,51178,51179,51181,51182,51183,51184,51185,51186,51187,51188,51189,51190,51191,51192,51193,51194,null,null,null,null,null,null,51195,51196,51197,51198,51199,51202,51203,51205,51206,51207,51209,51211,51212,51213,51214,51215,51218,51220,51223,51224,51225,51226,51227,51230,51231,51233,51234,51235,51237,51238,51239,51240,51241,51242,51243,51246,51248,51250,51251,51252,51253,51254,51255,51257,51258,51259,51261,51262,51263,51265,51266,51267,51268,51269,51270,51271,51274,51275,51278,51279,51280,51281,51282,51283,51285,51286,51287,51288,51289,51290,51291,51292,51293,51294,51295,51296,51297,51298,51299,51300,51301,51302,51303,51304,51305,51306,51307,51308,51309,51310,51311,51314,51315,51317,51318,51319,51321,51323,51324,51325,51326,51327,51330,51332,51336,51337,51338,51342,51343,51344,51345,51346,51347,51349,51350,51351,51352,51353,51354,51355,51356,51358,51360,51362,51363,51364,51365,51366,51367,51369,51370,51371,51372,51373,51374,51375,51376,51377,51378,51379,51380,51381,51382,51383,51384,51385,51386,51387,51390,51391,51392,51393,null,null,null,null,null,null,51394,51395,51397,51398,51399,51401,51402,51403,51405,51406,51407,51408,51409,51410,51411,51414,51416,51418,51419,51420,51421,51422,51423,51426,51427,51429,null,null,null,null,null,null,51430,51431,51432,51433,51434,51435,51436,51437,51438,51439,51440,51441,51442,51443,51444,51446,51447,51448,51449,51450,51451,51454,51455,51457,51458,51459,51463,51464,51465,51466,51467,51470,12288,12289,12290,183,8229,8230,168,12291,173,8213,8741,65340,8764,8216,8217,8220,8221,12308,12309,12296,12297,12298,12299,12300,12301,12302,12303,12304,12305,177,215,247,8800,8804,8805,8734,8756,176,8242,8243,8451,8491,65504,65505,65509,9794,9792,8736,8869,8978,8706,8711,8801,8786,167,8251,9734,9733,9675,9679,9678,9671,9670,9633,9632,9651,9650,9661,9660,8594,8592,8593,8595,8596,12307,8810,8811,8730,8765,8733,8757,8747,8748,8712,8715,8838,8839,8834,8835,8746,8745,8743,8744,65506,51472,51474,51475,51476,51477,51478,51479,51481,51482,51483,51484,51485,51486,51487,51488,51489,51490,51491,51492,51493,51494,51495,51496,51497,51498,51499,null,null,null,null,null,null,51501,51502,51503,51504,51505,51506,51507,51509,51510,51511,51512,51513,51514,51515,51516,51517,51518,51519,51520,51521,51522,51523,51524,51525,51526,51527,null,null,null,null,null,null,51528,51529,51530,51531,51532,51533,51534,51535,51538,51539,51541,51542,51543,51545,51546,51547,51548,51549,51550,51551,51554,51556,51557,51558,51559,51560,51561,51562,51563,51565,51566,51567,8658,8660,8704,8707,180,65374,711,728,733,730,729,184,731,161,191,720,8750,8721,8719,164,8457,8240,9665,9664,9655,9654,9828,9824,9825,9829,9831,9827,8857,9672,9635,9680,9681,9618,9636,9637,9640,9639,9638,9641,9832,9743,9742,9756,9758,182,8224,8225,8597,8599,8601,8598,8600,9837,9833,9834,9836,12927,12828,8470,13255,8482,13250,13272,8481,8364,174,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,51569,51570,51571,51573,51574,51575,51576,51577,51578,51579,51581,51582,51583,51584,51585,51586,51587,51588,51589,51590,51591,51594,51595,51597,51598,51599,null,null,null,null,null,null,51601,51602,51603,51604,51605,51606,51607,51610,51612,51614,51615,51616,51617,51618,51619,51620,51621,51622,51623,51624,51625,51626,51627,51628,51629,51630,null,null,null,null,null,null,51631,51632,51633,51634,51635,51636,51637,51638,51639,51640,51641,51642,51643,51644,51645,51646,51647,51650,51651,51653,51654,51657,51659,51660,51661,51662,51663,51666,51668,51671,51672,51675,65281,65282,65283,65284,65285,65286,65287,65288,65289,65290,65291,65292,65293,65294,65295,65296,65297,65298,65299,65300,65301,65302,65303,65304,65305,65306,65307,65308,65309,65310,65311,65312,65313,65314,65315,65316,65317,65318,65319,65320,65321,65322,65323,65324,65325,65326,65327,65328,65329,65330,65331,65332,65333,65334,65335,65336,65337,65338,65339,65510,65341,65342,65343,65344,65345,65346,65347,65348,65349,65350,65351,65352,65353,65354,65355,65356,65357,65358,65359,65360,65361,65362,65363,65364,65365,65366,65367,65368,65369,65370,65371,65372,65373,65507,51678,51679,51681,51683,51685,51686,51688,51689,51690,51691,51694,51698,51699,51700,51701,51702,51703,51706,51707,51709,51710,51711,51713,51714,51715,51716,null,null,null,null,null,null,51717,51718,51719,51722,51726,51727,51728,51729,51730,51731,51733,51734,51735,51737,51738,51739,51740,51741,51742,51743,51744,51745,51746,51747,51748,51749,null,null,null,null,null,null,51750,51751,51752,51754,51755,51756,51757,51758,51759,51760,51761,51762,51763,51764,51765,51766,51767,51768,51769,51770,51771,51772,51773,51774,51775,51776,51777,51778,51779,51780,51781,51782,12593,12594,12595,12596,12597,12598,12599,12600,12601,12602,12603,12604,12605,12606,12607,12608,12609,12610,12611,12612,12613,12614,12615,12616,12617,12618,12619,12620,12621,12622,12623,12624,12625,12626,12627,12628,12629,12630,12631,12632,12633,12634,12635,12636,12637,12638,12639,12640,12641,12642,12643,12644,12645,12646,12647,12648,12649,12650,12651,12652,12653,12654,12655,12656,12657,12658,12659,12660,12661,12662,12663,12664,12665,12666,12667,12668,12669,12670,12671,12672,12673,12674,12675,12676,12677,12678,12679,12680,12681,12682,12683,12684,12685,12686,51783,51784,51785,51786,51787,51790,51791,51793,51794,51795,51797,51798,51799,51800,51801,51802,51803,51806,51810,51811,51812,51813,51814,51815,51817,51818,null,null,null,null,null,null,51819,51820,51821,51822,51823,51824,51825,51826,51827,51828,51829,51830,51831,51832,51833,51834,51835,51836,51838,51839,51840,51841,51842,51843,51845,51846,null,null,null,null,null,null,51847,51848,51849,51850,51851,51852,51853,51854,51855,51856,51857,51858,51859,51860,51861,51862,51863,51865,51866,51867,51868,51869,51870,51871,51872,51873,51874,51875,51876,51877,51878,51879,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,null,null,null,null,null,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,null,null,null,null,null,null,null,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,null,null,null,null,null,null,null,null,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,963,964,965,966,967,968,969,null,null,null,null,null,null,51880,51881,51882,51883,51884,51885,51886,51887,51888,51889,51890,51891,51892,51893,51894,51895,51896,51897,51898,51899,51902,51903,51905,51906,51907,51909,null,null,null,null,null,null,51910,51911,51912,51913,51914,51915,51918,51920,51922,51924,51925,51926,51927,51930,51931,51932,51933,51934,51935,51937,51938,51939,51940,51941,51942,51943,null,null,null,null,null,null,51944,51945,51946,51947,51949,51950,51951,51952,51953,51954,51955,51957,51958,51959,51960,51961,51962,51963,51964,51965,51966,51967,51968,51969,51970,51971,51972,51973,51974,51975,51977,51978,9472,9474,9484,9488,9496,9492,9500,9516,9508,9524,9532,9473,9475,9487,9491,9499,9495,9507,9523,9515,9531,9547,9504,9519,9512,9527,9535,9501,9520,9509,9528,9538,9490,9489,9498,9497,9494,9493,9486,9485,9502,9503,9505,9506,9510,9511,9513,9514,9517,9518,9521,9522,9525,9526,9529,9530,9533,9534,9536,9537,9539,9540,9541,9542,9543,9544,9545,9546,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,51979,51980,51981,51982,51983,51985,51986,51987,51989,51990,51991,51993,51994,51995,51996,51997,51998,51999,52002,52003,52004,52005,52006,52007,52008,52009,null,null,null,null,null,null,52010,52011,52012,52013,52014,52015,52016,52017,52018,52019,52020,52021,52022,52023,52024,52025,52026,52027,52028,52029,52030,52031,52032,52034,52035,52036,null,null,null,null,null,null,52037,52038,52039,52042,52043,52045,52046,52047,52049,52050,52051,52052,52053,52054,52055,52058,52059,52060,52062,52063,52064,52065,52066,52067,52069,52070,52071,52072,52073,52074,52075,52076,13205,13206,13207,8467,13208,13252,13219,13220,13221,13222,13209,13210,13211,13212,13213,13214,13215,13216,13217,13218,13258,13197,13198,13199,13263,13192,13193,13256,13223,13224,13232,13233,13234,13235,13236,13237,13238,13239,13240,13241,13184,13185,13186,13187,13188,13242,13243,13244,13245,13246,13247,13200,13201,13202,13203,13204,8486,13248,13249,13194,13195,13196,13270,13253,13229,13230,13231,13275,13225,13226,13227,13228,13277,13264,13267,13251,13257,13276,13254,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,52077,52078,52079,52080,52081,52082,52083,52084,52085,52086,52087,52090,52091,52092,52093,52094,52095,52096,52097,52098,52099,52100,52101,52102,52103,52104,null,null,null,null,null,null,52105,52106,52107,52108,52109,52110,52111,52112,52113,52114,52115,52116,52117,52118,52119,52120,52121,52122,52123,52125,52126,52127,52128,52129,52130,52131,null,null,null,null,null,null,52132,52133,52134,52135,52136,52137,52138,52139,52140,52141,52142,52143,52144,52145,52146,52147,52148,52149,52150,52151,52153,52154,52155,52156,52157,52158,52159,52160,52161,52162,52163,52164,198,208,170,294,null,306,null,319,321,216,338,186,222,358,330,null,12896,12897,12898,12899,12900,12901,12902,12903,12904,12905,12906,12907,12908,12909,12910,12911,12912,12913,12914,12915,12916,12917,12918,12919,12920,12921,12922,12923,9424,9425,9426,9427,9428,9429,9430,9431,9432,9433,9434,9435,9436,9437,9438,9439,9440,9441,9442,9443,9444,9445,9446,9447,9448,9449,9312,9313,9314,9315,9316,9317,9318,9319,9320,9321,9322,9323,9324,9325,9326,189,8531,8532,188,190,8539,8540,8541,8542,52165,52166,52167,52168,52169,52170,52171,52172,52173,52174,52175,52176,52177,52178,52179,52181,52182,52183,52184,52185,52186,52187,52188,52189,52190,52191,null,null,null,null,null,null,52192,52193,52194,52195,52197,52198,52200,52202,52203,52204,52205,52206,52207,52208,52209,52210,52211,52212,52213,52214,52215,52216,52217,52218,52219,52220,null,null,null,null,null,null,52221,52222,52223,52224,52225,52226,52227,52228,52229,52230,52231,52232,52233,52234,52235,52238,52239,52241,52242,52243,52245,52246,52247,52248,52249,52250,52251,52254,52255,52256,52259,52260,230,273,240,295,305,307,312,320,322,248,339,223,254,359,331,329,12800,12801,12802,12803,12804,12805,12806,12807,12808,12809,12810,12811,12812,12813,12814,12815,12816,12817,12818,12819,12820,12821,12822,12823,12824,12825,12826,12827,9372,9373,9374,9375,9376,9377,9378,9379,9380,9381,9382,9383,9384,9385,9386,9387,9388,9389,9390,9391,9392,9393,9394,9395,9396,9397,9332,9333,9334,9335,9336,9337,9338,9339,9340,9341,9342,9343,9344,9345,9346,185,178,179,8308,8319,8321,8322,8323,8324,52261,52262,52266,52267,52269,52271,52273,52274,52275,52276,52277,52278,52279,52282,52287,52288,52289,52290,52291,52294,52295,52297,52298,52299,52301,52302,null,null,null,null,null,null,52303,52304,52305,52306,52307,52310,52314,52315,52316,52317,52318,52319,52321,52322,52323,52325,52327,52329,52330,52331,52332,52333,52334,52335,52337,52338,null,null,null,null,null,null,52339,52340,52342,52343,52344,52345,52346,52347,52348,52349,52350,52351,52352,52353,52354,52355,52356,52357,52358,52359,52360,52361,52362,52363,52364,52365,52366,52367,52368,52369,52370,52371,12353,12354,12355,12356,12357,12358,12359,12360,12361,12362,12363,12364,12365,12366,12367,12368,12369,12370,12371,12372,12373,12374,12375,12376,12377,12378,12379,12380,12381,12382,12383,12384,12385,12386,12387,12388,12389,12390,12391,12392,12393,12394,12395,12396,12397,12398,12399,12400,12401,12402,12403,12404,12405,12406,12407,12408,12409,12410,12411,12412,12413,12414,12415,12416,12417,12418,12419,12420,12421,12422,12423,12424,12425,12426,12427,12428,12429,12430,12431,12432,12433,12434,12435,null,null,null,null,null,null,null,null,null,null,null,52372,52373,52374,52375,52378,52379,52381,52382,52383,52385,52386,52387,52388,52389,52390,52391,52394,52398,52399,52400,52401,52402,52403,52406,52407,52409,null,null,null,null,null,null,52410,52411,52413,52414,52415,52416,52417,52418,52419,52422,52424,52426,52427,52428,52429,52430,52431,52433,52434,52435,52437,52438,52439,52440,52441,52442,null,null,null,null,null,null,52443,52444,52445,52446,52447,52448,52449,52450,52451,52453,52454,52455,52456,52457,52458,52459,52461,52462,52463,52465,52466,52467,52468,52469,52470,52471,52472,52473,52474,52475,52476,52477,12449,12450,12451,12452,12453,12454,12455,12456,12457,12458,12459,12460,12461,12462,12463,12464,12465,12466,12467,12468,12469,12470,12471,12472,12473,12474,12475,12476,12477,12478,12479,12480,12481,12482,12483,12484,12485,12486,12487,12488,12489,12490,12491,12492,12493,12494,12495,12496,12497,12498,12499,12500,12501,12502,12503,12504,12505,12506,12507,12508,12509,12510,12511,12512,12513,12514,12515,12516,12517,12518,12519,12520,12521,12522,12523,12524,12525,12526,12527,12528,12529,12530,12531,12532,12533,12534,null,null,null,null,null,null,null,null,52478,52479,52480,52482,52483,52484,52485,52486,52487,52490,52491,52493,52494,52495,52497,52498,52499,52500,52501,52502,52503,52506,52508,52510,52511,52512,null,null,null,null,null,null,52513,52514,52515,52517,52518,52519,52521,52522,52523,52525,52526,52527,52528,52529,52530,52531,52532,52533,52534,52535,52536,52538,52539,52540,52541,52542,null,null,null,null,null,null,52543,52544,52545,52546,52547,52548,52549,52550,52551,52552,52553,52554,52555,52556,52557,52558,52559,52560,52561,52562,52563,52564,52565,52566,52567,52568,52569,52570,52571,52573,52574,52575,1040,1041,1042,1043,1044,1045,1025,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1072,1073,1074,1075,1076,1077,1105,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,null,null,null,null,null,null,null,null,null,null,null,null,null,52577,52578,52579,52581,52582,52583,52584,52585,52586,52587,52590,52592,52594,52595,52596,52597,52598,52599,52601,52602,52603,52604,52605,52606,52607,52608,null,null,null,null,null,null,52609,52610,52611,52612,52613,52614,52615,52617,52618,52619,52620,52621,52622,52623,52624,52625,52626,52627,52630,52631,52633,52634,52635,52637,52638,52639,null,null,null,null,null,null,52640,52641,52642,52643,52646,52648,52650,52651,52652,52653,52654,52655,52657,52658,52659,52660,52661,52662,52663,52664,52665,52666,52667,52668,52669,52670,52671,52672,52673,52674,52675,52677,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,52678,52679,52680,52681,52682,52683,52685,52686,52687,52689,52690,52691,52692,52693,52694,52695,52696,52697,52698,52699,52700,52701,52702,52703,52704,52705,null,null,null,null,null,null,52706,52707,52708,52709,52710,52711,52713,52714,52715,52717,52718,52719,52721,52722,52723,52724,52725,52726,52727,52730,52732,52734,52735,52736,52737,52738,null,null,null,null,null,null,52739,52741,52742,52743,52745,52746,52747,52749,52750,52751,52752,52753,52754,52755,52757,52758,52759,52760,52762,52763,52764,52765,52766,52767,52770,52771,52773,52774,52775,52777,52778,52779,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,52780,52781,52782,52783,52786,52788,52790,52791,52792,52793,52794,52795,52796,52797,52798,52799,52800,52801,52802,52803,52804,52805,52806,52807,52808,52809,null,null,null,null,null,null,52810,52811,52812,52813,52814,52815,52816,52817,52818,52819,52820,52821,52822,52823,52826,52827,52829,52830,52834,52835,52836,52837,52838,52839,52842,52844,null,null,null,null,null,null,52846,52847,52848,52849,52850,52851,52854,52855,52857,52858,52859,52861,52862,52863,52864,52865,52866,52867,52870,52872,52874,52875,52876,52877,52878,52879,52882,52883,52885,52886,52887,52889,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,52890,52891,52892,52893,52894,52895,52898,52902,52903,52904,52905,52906,52907,52910,52911,52912,52913,52914,52915,52916,52917,52918,52919,52920,52921,52922,null,null,null,null,null,null,52923,52924,52925,52926,52927,52928,52930,52931,52932,52933,52934,52935,52936,52937,52938,52939,52940,52941,52942,52943,52944,52945,52946,52947,52948,52949,null,null,null,null,null,null,52950,52951,52952,52953,52954,52955,52956,52957,52958,52959,52960,52961,52962,52963,52966,52967,52969,52970,52973,52974,52975,52976,52977,52978,52979,52982,52986,52987,52988,52989,52990,52991,44032,44033,44036,44039,44040,44041,44042,44048,44049,44050,44051,44052,44053,44054,44055,44057,44058,44059,44060,44061,44064,44068,44076,44077,44079,44080,44081,44088,44089,44092,44096,44107,44109,44116,44120,44124,44144,44145,44148,44151,44152,44154,44160,44161,44163,44164,44165,44166,44169,44170,44171,44172,44176,44180,44188,44189,44191,44192,44193,44200,44201,44202,44204,44207,44208,44216,44217,44219,44220,44221,44225,44228,44232,44236,44245,44247,44256,44257,44260,44263,44264,44266,44268,44271,44272,44273,44275,44277,44278,44284,44285,44288,44292,44294,52994,52995,52997,52998,52999,53001,53002,53003,53004,53005,53006,53007,53010,53012,53014,53015,53016,53017,53018,53019,53021,53022,53023,53025,53026,53027,null,null,null,null,null,null,53029,53030,53031,53032,53033,53034,53035,53038,53042,53043,53044,53045,53046,53047,53049,53050,53051,53052,53053,53054,53055,53056,53057,53058,53059,53060,null,null,null,null,null,null,53061,53062,53063,53064,53065,53066,53067,53068,53069,53070,53071,53072,53073,53074,53075,53078,53079,53081,53082,53083,53085,53086,53087,53088,53089,53090,53091,53094,53096,53098,53099,53100,44300,44301,44303,44305,44312,44316,44320,44329,44332,44333,44340,44341,44344,44348,44356,44357,44359,44361,44368,44372,44376,44385,44387,44396,44397,44400,44403,44404,44405,44406,44411,44412,44413,44415,44417,44418,44424,44425,44428,44432,44444,44445,44452,44471,44480,44481,44484,44488,44496,44497,44499,44508,44512,44516,44536,44537,44540,44543,44544,44545,44552,44553,44555,44557,44564,44592,44593,44596,44599,44600,44602,44608,44609,44611,44613,44614,44618,44620,44621,44622,44624,44628,44630,44636,44637,44639,44640,44641,44645,44648,44649,44652,44656,44664,53101,53102,53103,53106,53107,53109,53110,53111,53113,53114,53115,53116,53117,53118,53119,53121,53122,53123,53124,53126,53127,53128,53129,53130,53131,53133,null,null,null,null,null,null,53134,53135,53136,53137,53138,53139,53140,53141,53142,53143,53144,53145,53146,53147,53148,53149,53150,53151,53152,53154,53155,53156,53157,53158,53159,53161,null,null,null,null,null,null,53162,53163,53164,53165,53166,53167,53169,53170,53171,53172,53173,53174,53175,53176,53177,53178,53179,53180,53181,53182,53183,53184,53185,53186,53187,53189,53190,53191,53192,53193,53194,53195,44665,44667,44668,44669,44676,44677,44684,44732,44733,44734,44736,44740,44748,44749,44751,44752,44753,44760,44761,44764,44776,44779,44781,44788,44792,44796,44807,44808,44813,44816,44844,44845,44848,44850,44852,44860,44861,44863,44865,44866,44867,44872,44873,44880,44892,44893,44900,44901,44921,44928,44932,44936,44944,44945,44949,44956,44984,44985,44988,44992,44999,45000,45001,45003,45005,45006,45012,45020,45032,45033,45040,45041,45044,45048,45056,45057,45060,45068,45072,45076,45084,45085,45096,45124,45125,45128,45130,45132,45134,45139,45140,45141,45143,45145,53196,53197,53198,53199,53200,53201,53202,53203,53204,53205,53206,53207,53208,53209,53210,53211,53212,53213,53214,53215,53218,53219,53221,53222,53223,53225,null,null,null,null,null,null,53226,53227,53228,53229,53230,53231,53234,53236,53238,53239,53240,53241,53242,53243,53245,53246,53247,53249,53250,53251,53253,53254,53255,53256,53257,53258,null,null,null,null,null,null,53259,53260,53261,53262,53263,53264,53266,53267,53268,53269,53270,53271,53273,53274,53275,53276,53277,53278,53279,53280,53281,53282,53283,53284,53285,53286,53287,53288,53289,53290,53291,53292,45149,45180,45181,45184,45188,45196,45197,45199,45201,45208,45209,45210,45212,45215,45216,45217,45218,45224,45225,45227,45228,45229,45230,45231,45233,45235,45236,45237,45240,45244,45252,45253,45255,45256,45257,45264,45265,45268,45272,45280,45285,45320,45321,45323,45324,45328,45330,45331,45336,45337,45339,45340,45341,45347,45348,45349,45352,45356,45364,45365,45367,45368,45369,45376,45377,45380,45384,45392,45393,45396,45397,45400,45404,45408,45432,45433,45436,45440,45442,45448,45449,45451,45453,45458,45459,45460,45464,45468,45480,45516,45520,45524,45532,45533,53294,53295,53296,53297,53298,53299,53302,53303,53305,53306,53307,53309,53310,53311,53312,53313,53314,53315,53318,53320,53322,53323,53324,53325,53326,53327,null,null,null,null,null,null,53329,53330,53331,53333,53334,53335,53337,53338,53339,53340,53341,53342,53343,53345,53346,53347,53348,53349,53350,53351,53352,53353,53354,53355,53358,53359,null,null,null,null,null,null,53361,53362,53363,53365,53366,53367,53368,53369,53370,53371,53374,53375,53376,53378,53379,53380,53381,53382,53383,53384,53385,53386,53387,53388,53389,53390,53391,53392,53393,53394,53395,53396,45535,45544,45545,45548,45552,45561,45563,45565,45572,45573,45576,45579,45580,45588,45589,45591,45593,45600,45620,45628,45656,45660,45664,45672,45673,45684,45685,45692,45700,45701,45705,45712,45713,45716,45720,45721,45722,45728,45729,45731,45733,45734,45738,45740,45744,45748,45768,45769,45772,45776,45778,45784,45785,45787,45789,45794,45796,45797,45798,45800,45803,45804,45805,45806,45807,45811,45812,45813,45815,45816,45817,45818,45819,45823,45824,45825,45828,45832,45840,45841,45843,45844,45845,45852,45908,45909,45910,45912,45915,45916,45918,45919,45924,45925,53397,53398,53399,53400,53401,53402,53403,53404,53405,53406,53407,53408,53409,53410,53411,53414,53415,53417,53418,53419,53421,53422,53423,53424,53425,53426,null,null,null,null,null,null,53427,53430,53432,53434,53435,53436,53437,53438,53439,53442,53443,53445,53446,53447,53450,53451,53452,53453,53454,53455,53458,53462,53463,53464,53465,53466,null,null,null,null,null,null,53467,53470,53471,53473,53474,53475,53477,53478,53479,53480,53481,53482,53483,53486,53490,53491,53492,53493,53494,53495,53497,53498,53499,53500,53501,53502,53503,53504,53505,53506,53507,53508,45927,45929,45931,45934,45936,45937,45940,45944,45952,45953,45955,45956,45957,45964,45968,45972,45984,45985,45992,45996,46020,46021,46024,46027,46028,46030,46032,46036,46037,46039,46041,46043,46045,46048,46052,46056,46076,46096,46104,46108,46112,46120,46121,46123,46132,46160,46161,46164,46168,46176,46177,46179,46181,46188,46208,46216,46237,46244,46248,46252,46261,46263,46265,46272,46276,46280,46288,46293,46300,46301,46304,46307,46308,46310,46316,46317,46319,46321,46328,46356,46357,46360,46363,46364,46372,46373,46375,46376,46377,46378,46384,46385,46388,46392,53509,53510,53511,53512,53513,53514,53515,53516,53518,53519,53520,53521,53522,53523,53524,53525,53526,53527,53528,53529,53530,53531,53532,53533,53534,53535,null,null,null,null,null,null,53536,53537,53538,53539,53540,53541,53542,53543,53544,53545,53546,53547,53548,53549,53550,53551,53554,53555,53557,53558,53559,53561,53563,53564,53565,53566,null,null,null,null,null,null,53567,53570,53574,53575,53576,53577,53578,53579,53582,53583,53585,53586,53587,53589,53590,53591,53592,53593,53594,53595,53598,53600,53602,53603,53604,53605,53606,53607,53609,53610,53611,53613,46400,46401,46403,46404,46405,46411,46412,46413,46416,46420,46428,46429,46431,46432,46433,46496,46497,46500,46504,46506,46507,46512,46513,46515,46516,46517,46523,46524,46525,46528,46532,46540,46541,46543,46544,46545,46552,46572,46608,46609,46612,46616,46629,46636,46644,46664,46692,46696,46748,46749,46752,46756,46763,46764,46769,46804,46832,46836,46840,46848,46849,46853,46888,46889,46892,46895,46896,46904,46905,46907,46916,46920,46924,46932,46933,46944,46948,46952,46960,46961,46963,46965,46972,46973,46976,46980,46988,46989,46991,46992,46993,46994,46998,46999,53614,53615,53616,53617,53618,53619,53620,53621,53622,53623,53624,53625,53626,53627,53629,53630,53631,53632,53633,53634,53635,53637,53638,53639,53641,53642,null,null,null,null,null,null,53643,53644,53645,53646,53647,53648,53649,53650,53651,53652,53653,53654,53655,53656,53657,53658,53659,53660,53661,53662,53663,53666,53667,53669,53670,53671,null,null,null,null,null,null,53673,53674,53675,53676,53677,53678,53679,53682,53684,53686,53687,53688,53689,53691,53693,53694,53695,53697,53698,53699,53700,53701,53702,53703,53704,53705,53706,53707,53708,53709,53710,53711,47000,47001,47004,47008,47016,47017,47019,47020,47021,47028,47029,47032,47047,47049,47084,47085,47088,47092,47100,47101,47103,47104,47105,47111,47112,47113,47116,47120,47128,47129,47131,47133,47140,47141,47144,47148,47156,47157,47159,47160,47161,47168,47172,47185,47187,47196,47197,47200,47204,47212,47213,47215,47217,47224,47228,47245,47272,47280,47284,47288,47296,47297,47299,47301,47308,47312,47316,47325,47327,47329,47336,47337,47340,47344,47352,47353,47355,47357,47364,47384,47392,47420,47421,47424,47428,47436,47439,47441,47448,47449,47452,47456,47464,47465,53712,53713,53714,53715,53716,53717,53718,53719,53721,53722,53723,53724,53725,53726,53727,53728,53729,53730,53731,53732,53733,53734,53735,53736,53737,53738,null,null,null,null,null,null,53739,53740,53741,53742,53743,53744,53745,53746,53747,53749,53750,53751,53753,53754,53755,53756,53757,53758,53759,53760,53761,53762,53763,53764,53765,53766,null,null,null,null,null,null,53768,53770,53771,53772,53773,53774,53775,53777,53778,53779,53780,53781,53782,53783,53784,53785,53786,53787,53788,53789,53790,53791,53792,53793,53794,53795,53796,53797,53798,53799,53800,53801,47467,47469,47476,47477,47480,47484,47492,47493,47495,47497,47498,47501,47502,47532,47533,47536,47540,47548,47549,47551,47553,47560,47561,47564,47566,47567,47568,47569,47570,47576,47577,47579,47581,47582,47585,47587,47588,47589,47592,47596,47604,47605,47607,47608,47609,47610,47616,47617,47624,47637,47672,47673,47676,47680,47682,47688,47689,47691,47693,47694,47699,47700,47701,47704,47708,47716,47717,47719,47720,47721,47728,47729,47732,47736,47747,47748,47749,47751,47756,47784,47785,47787,47788,47792,47794,47800,47801,47803,47805,47812,47816,47832,47833,47868,53802,53803,53806,53807,53809,53810,53811,53813,53814,53815,53816,53817,53818,53819,53822,53824,53826,53827,53828,53829,53830,53831,53833,53834,53835,53836,null,null,null,null,null,null,53837,53838,53839,53840,53841,53842,53843,53844,53845,53846,53847,53848,53849,53850,53851,53853,53854,53855,53856,53857,53858,53859,53861,53862,53863,53864,null,null,null,null,null,null,53865,53866,53867,53868,53869,53870,53871,53872,53873,53874,53875,53876,53877,53878,53879,53880,53881,53882,53883,53884,53885,53886,53887,53890,53891,53893,53894,53895,53897,53898,53899,53900,47872,47876,47885,47887,47889,47896,47900,47904,47913,47915,47924,47925,47926,47928,47931,47932,47933,47934,47940,47941,47943,47945,47949,47951,47952,47956,47960,47969,47971,47980,48008,48012,48016,48036,48040,48044,48052,48055,48064,48068,48072,48080,48083,48120,48121,48124,48127,48128,48130,48136,48137,48139,48140,48141,48143,48145,48148,48149,48150,48151,48152,48155,48156,48157,48158,48159,48164,48165,48167,48169,48173,48176,48177,48180,48184,48192,48193,48195,48196,48197,48201,48204,48205,48208,48221,48260,48261,48264,48267,48268,48270,48276,48277,48279,53901,53902,53903,53906,53907,53908,53910,53911,53912,53913,53914,53915,53917,53918,53919,53921,53922,53923,53925,53926,53927,53928,53929,53930,53931,53933,null,null,null,null,null,null,53934,53935,53936,53938,53939,53940,53941,53942,53943,53946,53947,53949,53950,53953,53955,53956,53957,53958,53959,53962,53964,53965,53966,53967,53968,53969,null,null,null,null,null,null,53970,53971,53973,53974,53975,53977,53978,53979,53981,53982,53983,53984,53985,53986,53987,53990,53991,53992,53993,53994,53995,53996,53997,53998,53999,54002,54003,54005,54006,54007,54009,54010,48281,48282,48288,48289,48292,48295,48296,48304,48305,48307,48308,48309,48316,48317,48320,48324,48333,48335,48336,48337,48341,48344,48348,48372,48373,48374,48376,48380,48388,48389,48391,48393,48400,48404,48420,48428,48448,48456,48457,48460,48464,48472,48473,48484,48488,48512,48513,48516,48519,48520,48521,48522,48528,48529,48531,48533,48537,48538,48540,48548,48560,48568,48596,48597,48600,48604,48617,48624,48628,48632,48640,48643,48645,48652,48653,48656,48660,48668,48669,48671,48708,48709,48712,48716,48718,48724,48725,48727,48729,48730,48731,48736,48737,48740,54011,54012,54013,54014,54015,54018,54020,54022,54023,54024,54025,54026,54027,54031,54033,54034,54035,54037,54039,54040,54041,54042,54043,54046,54050,54051,null,null,null,null,null,null,54052,54054,54055,54058,54059,54061,54062,54063,54065,54066,54067,54068,54069,54070,54071,54074,54078,54079,54080,54081,54082,54083,54086,54087,54088,54089,null,null,null,null,null,null,54090,54091,54092,54093,54094,54095,54096,54097,54098,54099,54100,54101,54102,54103,54104,54105,54106,54107,54108,54109,54110,54111,54112,54113,54114,54115,54116,54117,54118,54119,54120,54121,48744,48746,48752,48753,48755,48756,48757,48763,48764,48765,48768,48772,48780,48781,48783,48784,48785,48792,48793,48808,48848,48849,48852,48855,48856,48864,48867,48868,48869,48876,48897,48904,48905,48920,48921,48923,48924,48925,48960,48961,48964,48968,48976,48977,48981,49044,49072,49093,49100,49101,49104,49108,49116,49119,49121,49212,49233,49240,49244,49248,49256,49257,49296,49297,49300,49304,49312,49313,49315,49317,49324,49325,49327,49328,49331,49332,49333,49334,49340,49341,49343,49344,49345,49349,49352,49353,49356,49360,49368,49369,49371,49372,49373,49380,54122,54123,54124,54125,54126,54127,54128,54129,54130,54131,54132,54133,54134,54135,54136,54137,54138,54139,54142,54143,54145,54146,54147,54149,54150,54151,null,null,null,null,null,null,54152,54153,54154,54155,54158,54162,54163,54164,54165,54166,54167,54170,54171,54173,54174,54175,54177,54178,54179,54180,54181,54182,54183,54186,54188,54190,null,null,null,null,null,null,54191,54192,54193,54194,54195,54197,54198,54199,54201,54202,54203,54205,54206,54207,54208,54209,54210,54211,54214,54215,54218,54219,54220,54221,54222,54223,54225,54226,54227,54228,54229,54230,49381,49384,49388,49396,49397,49399,49401,49408,49412,49416,49424,49429,49436,49437,49438,49439,49440,49443,49444,49446,49447,49452,49453,49455,49456,49457,49462,49464,49465,49468,49472,49480,49481,49483,49484,49485,49492,49493,49496,49500,49508,49509,49511,49512,49513,49520,49524,49528,49541,49548,49549,49550,49552,49556,49558,49564,49565,49567,49569,49573,49576,49577,49580,49584,49597,49604,49608,49612,49620,49623,49624,49632,49636,49640,49648,49649,49651,49660,49661,49664,49668,49676,49677,49679,49681,49688,49689,49692,49695,49696,49704,49705,49707,49709,54231,54233,54234,54235,54236,54237,54238,54239,54240,54242,54244,54245,54246,54247,54248,54249,54250,54251,54254,54255,54257,54258,54259,54261,54262,54263,null,null,null,null,null,null,54264,54265,54266,54267,54270,54272,54274,54275,54276,54277,54278,54279,54281,54282,54283,54284,54285,54286,54287,54288,54289,54290,54291,54292,54293,54294,null,null,null,null,null,null,54295,54296,54297,54298,54299,54300,54302,54303,54304,54305,54306,54307,54308,54309,54310,54311,54312,54313,54314,54315,54316,54317,54318,54319,54320,54321,54322,54323,54324,54325,54326,54327,49711,49713,49714,49716,49736,49744,49745,49748,49752,49760,49765,49772,49773,49776,49780,49788,49789,49791,49793,49800,49801,49808,49816,49819,49821,49828,49829,49832,49836,49837,49844,49845,49847,49849,49884,49885,49888,49891,49892,49899,49900,49901,49903,49905,49910,49912,49913,49915,49916,49920,49928,49929,49932,49933,49939,49940,49941,49944,49948,49956,49957,49960,49961,49989,50024,50025,50028,50032,50034,50040,50041,50044,50045,50052,50056,50060,50112,50136,50137,50140,50143,50144,50146,50152,50153,50157,50164,50165,50168,50184,50192,50212,50220,50224,54328,54329,54330,54331,54332,54333,54334,54335,54337,54338,54339,54341,54342,54343,54344,54345,54346,54347,54348,54349,54350,54351,54352,54353,54354,54355,null,null,null,null,null,null,54356,54357,54358,54359,54360,54361,54362,54363,54365,54366,54367,54369,54370,54371,54373,54374,54375,54376,54377,54378,54379,54380,54382,54384,54385,54386,null,null,null,null,null,null,54387,54388,54389,54390,54391,54394,54395,54397,54398,54401,54403,54404,54405,54406,54407,54410,54412,54414,54415,54416,54417,54418,54419,54421,54422,54423,54424,54425,54426,54427,54428,54429,50228,50236,50237,50248,50276,50277,50280,50284,50292,50293,50297,50304,50324,50332,50360,50364,50409,50416,50417,50420,50424,50426,50431,50432,50433,50444,50448,50452,50460,50472,50473,50476,50480,50488,50489,50491,50493,50500,50501,50504,50505,50506,50508,50509,50510,50515,50516,50517,50519,50520,50521,50525,50526,50528,50529,50532,50536,50544,50545,50547,50548,50549,50556,50557,50560,50564,50567,50572,50573,50575,50577,50581,50583,50584,50588,50592,50601,50612,50613,50616,50617,50619,50620,50621,50622,50628,50629,50630,50631,50632,50633,50634,50636,50638,54430,54431,54432,54433,54434,54435,54436,54437,54438,54439,54440,54442,54443,54444,54445,54446,54447,54448,54449,54450,54451,54452,54453,54454,54455,54456,null,null,null,null,null,null,54457,54458,54459,54460,54461,54462,54463,54464,54465,54466,54467,54468,54469,54470,54471,54472,54473,54474,54475,54477,54478,54479,54481,54482,54483,54485,null,null,null,null,null,null,54486,54487,54488,54489,54490,54491,54493,54494,54496,54497,54498,54499,54500,54501,54502,54503,54505,54506,54507,54509,54510,54511,54513,54514,54515,54516,54517,54518,54519,54521,54522,54524,50640,50641,50644,50648,50656,50657,50659,50661,50668,50669,50670,50672,50676,50678,50679,50684,50685,50686,50687,50688,50689,50693,50694,50695,50696,50700,50704,50712,50713,50715,50716,50724,50725,50728,50732,50733,50734,50736,50739,50740,50741,50743,50745,50747,50752,50753,50756,50760,50768,50769,50771,50772,50773,50780,50781,50784,50796,50799,50801,50808,50809,50812,50816,50824,50825,50827,50829,50836,50837,50840,50844,50852,50853,50855,50857,50864,50865,50868,50872,50873,50874,50880,50881,50883,50885,50892,50893,50896,50900,50908,50909,50912,50913,50920,54526,54527,54528,54529,54530,54531,54533,54534,54535,54537,54538,54539,54541,54542,54543,54544,54545,54546,54547,54550,54552,54553,54554,54555,54556,54557,null,null,null,null,null,null,54558,54559,54560,54561,54562,54563,54564,54565,54566,54567,54568,54569,54570,54571,54572,54573,54574,54575,54576,54577,54578,54579,54580,54581,54582,54583,null,null,null,null,null,null,54584,54585,54586,54587,54590,54591,54593,54594,54595,54597,54598,54599,54600,54601,54602,54603,54606,54608,54610,54611,54612,54613,54614,54615,54618,54619,54621,54622,54623,54625,54626,54627,50921,50924,50928,50936,50937,50941,50948,50949,50952,50956,50964,50965,50967,50969,50976,50977,50980,50984,50992,50993,50995,50997,50999,51004,51005,51008,51012,51018,51020,51021,51023,51025,51026,51027,51028,51029,51030,51031,51032,51036,51040,51048,51051,51060,51061,51064,51068,51069,51070,51075,51076,51077,51079,51080,51081,51082,51086,51088,51089,51092,51094,51095,51096,51098,51104,51105,51107,51108,51109,51110,51116,51117,51120,51124,51132,51133,51135,51136,51137,51144,51145,51148,51150,51152,51160,51165,51172,51176,51180,51200,51201,51204,51208,51210,54628,54630,54631,54634,54636,54638,54639,54640,54641,54642,54643,54646,54647,54649,54650,54651,54653,54654,54655,54656,54657,54658,54659,54662,54666,54667,null,null,null,null,null,null,54668,54669,54670,54671,54673,54674,54675,54676,54677,54678,54679,54680,54681,54682,54683,54684,54685,54686,54687,54688,54689,54690,54691,54692,54694,54695,null,null,null,null,null,null,54696,54697,54698,54699,54700,54701,54702,54703,54704,54705,54706,54707,54708,54709,54710,54711,54712,54713,54714,54715,54716,54717,54718,54719,54720,54721,54722,54723,54724,54725,54726,54727,51216,51217,51219,51221,51222,51228,51229,51232,51236,51244,51245,51247,51249,51256,51260,51264,51272,51273,51276,51277,51284,51312,51313,51316,51320,51322,51328,51329,51331,51333,51334,51335,51339,51340,51341,51348,51357,51359,51361,51368,51388,51389,51396,51400,51404,51412,51413,51415,51417,51424,51425,51428,51445,51452,51453,51456,51460,51461,51462,51468,51469,51471,51473,51480,51500,51508,51536,51537,51540,51544,51552,51553,51555,51564,51568,51572,51580,51592,51593,51596,51600,51608,51609,51611,51613,51648,51649,51652,51655,51656,51658,51664,51665,51667,54730,54731,54733,54734,54735,54737,54739,54740,54741,54742,54743,54746,54748,54750,54751,54752,54753,54754,54755,54758,54759,54761,54762,54763,54765,54766,null,null,null,null,null,null,54767,54768,54769,54770,54771,54774,54776,54778,54779,54780,54781,54782,54783,54786,54787,54789,54790,54791,54793,54794,54795,54796,54797,54798,54799,54802,null,null,null,null,null,null,54806,54807,54808,54809,54810,54811,54813,54814,54815,54817,54818,54819,54821,54822,54823,54824,54825,54826,54827,54828,54830,54831,54832,54833,54834,54835,54836,54837,54838,54839,54842,54843,51669,51670,51673,51674,51676,51677,51680,51682,51684,51687,51692,51693,51695,51696,51697,51704,51705,51708,51712,51720,51721,51723,51724,51725,51732,51736,51753,51788,51789,51792,51796,51804,51805,51807,51808,51809,51816,51837,51844,51864,51900,51901,51904,51908,51916,51917,51919,51921,51923,51928,51929,51936,51948,51956,51976,51984,51988,51992,52000,52001,52033,52040,52041,52044,52048,52056,52057,52061,52068,52088,52089,52124,52152,52180,52196,52199,52201,52236,52237,52240,52244,52252,52253,52257,52258,52263,52264,52265,52268,52270,52272,52280,52281,52283,54845,54846,54847,54849,54850,54851,54852,54854,54855,54858,54860,54862,54863,54864,54866,54867,54870,54871,54873,54874,54875,54877,54878,54879,54880,54881,null,null,null,null,null,null,54882,54883,54884,54885,54886,54888,54890,54891,54892,54893,54894,54895,54898,54899,54901,54902,54903,54904,54905,54906,54907,54908,54909,54910,54911,54912,null,null,null,null,null,null,54913,54914,54916,54918,54919,54920,54921,54922,54923,54926,54927,54929,54930,54931,54933,54934,54935,54936,54937,54938,54939,54940,54942,54944,54946,54947,54948,54949,54950,54951,54953,54954,52284,52285,52286,52292,52293,52296,52300,52308,52309,52311,52312,52313,52320,52324,52326,52328,52336,52341,52376,52377,52380,52384,52392,52393,52395,52396,52397,52404,52405,52408,52412,52420,52421,52423,52425,52432,52436,52452,52460,52464,52481,52488,52489,52492,52496,52504,52505,52507,52509,52516,52520,52524,52537,52572,52576,52580,52588,52589,52591,52593,52600,52616,52628,52629,52632,52636,52644,52645,52647,52649,52656,52676,52684,52688,52712,52716,52720,52728,52729,52731,52733,52740,52744,52748,52756,52761,52768,52769,52772,52776,52784,52785,52787,52789,54955,54957,54958,54959,54961,54962,54963,54964,54965,54966,54967,54968,54970,54972,54973,54974,54975,54976,54977,54978,54979,54982,54983,54985,54986,54987,null,null,null,null,null,null,54989,54990,54991,54992,54994,54995,54997,54998,55000,55002,55003,55004,55005,55006,55007,55009,55010,55011,55013,55014,55015,55017,55018,55019,55020,55021,null,null,null,null,null,null,55022,55023,55025,55026,55027,55028,55030,55031,55032,55033,55034,55035,55038,55039,55041,55042,55043,55045,55046,55047,55048,55049,55050,55051,55052,55053,55054,55055,55056,55058,55059,55060,52824,52825,52828,52831,52832,52833,52840,52841,52843,52845,52852,52853,52856,52860,52868,52869,52871,52873,52880,52881,52884,52888,52896,52897,52899,52900,52901,52908,52909,52929,52964,52965,52968,52971,52972,52980,52981,52983,52984,52985,52992,52993,52996,53000,53008,53009,53011,53013,53020,53024,53028,53036,53037,53039,53040,53041,53048,53076,53077,53080,53084,53092,53093,53095,53097,53104,53105,53108,53112,53120,53125,53132,53153,53160,53168,53188,53216,53217,53220,53224,53232,53233,53235,53237,53244,53248,53252,53265,53272,53293,53300,53301,53304,53308,55061,55062,55063,55066,55067,55069,55070,55071,55073,55074,55075,55076,55077,55078,55079,55082,55084,55086,55087,55088,55089,55090,55091,55094,55095,55097,null,null,null,null,null,null,55098,55099,55101,55102,55103,55104,55105,55106,55107,55109,55110,55112,55114,55115,55116,55117,55118,55119,55122,55123,55125,55130,55131,55132,55133,55134,null,null,null,null,null,null,55135,55138,55140,55142,55143,55144,55146,55147,55149,55150,55151,55153,55154,55155,55157,55158,55159,55160,55161,55162,55163,55166,55167,55168,55170,55171,55172,55173,55174,55175,55178,55179,53316,53317,53319,53321,53328,53332,53336,53344,53356,53357,53360,53364,53372,53373,53377,53412,53413,53416,53420,53428,53429,53431,53433,53440,53441,53444,53448,53449,53456,53457,53459,53460,53461,53468,53469,53472,53476,53484,53485,53487,53488,53489,53496,53517,53552,53553,53556,53560,53562,53568,53569,53571,53572,53573,53580,53581,53584,53588,53596,53597,53599,53601,53608,53612,53628,53636,53640,53664,53665,53668,53672,53680,53681,53683,53685,53690,53692,53696,53720,53748,53752,53767,53769,53776,53804,53805,53808,53812,53820,53821,53823,53825,53832,53852,55181,55182,55183,55185,55186,55187,55188,55189,55190,55191,55194,55196,55198,55199,55200,55201,55202,55203,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,53860,53888,53889,53892,53896,53904,53905,53909,53916,53920,53924,53932,53937,53944,53945,53948,53951,53952,53954,53960,53961,53963,53972,53976,53980,53988,53989,54000,54001,54004,54008,54016,54017,54019,54021,54028,54029,54030,54032,54036,54038,54044,54045,54047,54048,54049,54053,54056,54057,54060,54064,54072,54073,54075,54076,54077,54084,54085,54140,54141,54144,54148,54156,54157,54159,54160,54161,54168,54169,54172,54176,54184,54185,54187,54189,54196,54200,54204,54212,54213,54216,54217,54224,54232,54241,54243,54252,54253,54256,54260,54268,54269,54271,54273,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,54280,54301,54336,54340,54364,54368,54372,54381,54383,54392,54393,54396,54399,54400,54402,54408,54409,54411,54413,54420,54441,54476,54480,54484,54492,54495,54504,54508,54512,54520,54523,54525,54532,54536,54540,54548,54549,54551,54588,54589,54592,54596,54604,54605,54607,54609,54616,54617,54620,54624,54629,54632,54633,54635,54637,54644,54645,54648,54652,54660,54661,54663,54664,54665,54672,54693,54728,54729,54732,54736,54738,54744,54745,54747,54749,54756,54757,54760,54764,54772,54773,54775,54777,54784,54785,54788,54792,54800,54801,54803,54804,54805,54812,54816,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,54820,54829,54840,54841,54844,54848,54853,54856,54857,54859,54861,54865,54868,54869,54872,54876,54887,54889,54896,54897,54900,54915,54917,54924,54925,54928,54932,54941,54943,54945,54952,54956,54960,54969,54971,54980,54981,54984,54988,54993,54996,54999,55001,55008,55012,55016,55024,55029,55036,55037,55040,55044,55057,55064,55065,55068,55072,55080,55081,55083,55085,55092,55093,55096,55100,55108,55111,55113,55120,55121,55124,55126,55127,55128,55129,55136,55137,55139,55141,55145,55148,55152,55156,55164,55165,55169,55176,55177,55180,55184,55192,55193,55195,55197,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,20285,20339,20551,20729,21152,21487,21621,21733,22025,23233,23478,26247,26550,26551,26607,27468,29634,30146,31292,33499,33540,34903,34952,35382,36040,36303,36603,36838,39381,21051,21364,21508,24682,24932,27580,29647,33050,35258,35282,38307,20355,21002,22718,22904,23014,24178,24185,25031,25536,26438,26604,26751,28567,30286,30475,30965,31240,31487,31777,32925,33390,33393,35563,38291,20075,21917,26359,28212,30883,31469,33883,35088,34638,38824,21208,22350,22570,23884,24863,25022,25121,25954,26577,27204,28187,29976,30131,30435,30640,32058,37039,37969,37970,40853,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,21283,23724,30002,32987,37440,38296,21083,22536,23004,23713,23831,24247,24378,24394,24951,27743,30074,30086,31968,32115,32177,32652,33108,33313,34193,35137,35611,37628,38477,40007,20171,20215,20491,20977,22607,24887,24894,24936,25913,27114,28433,30117,30342,30422,31623,33445,33995,63744,37799,38283,21888,23458,22353,63745,31923,32697,37301,20520,21435,23621,24040,25298,25454,25818,25831,28192,28844,31067,36317,36382,63746,36989,37445,37624,20094,20214,20581,24062,24314,24838,26967,33137,34388,36423,37749,39467,20062,20625,26480,26688,20745,21133,21138,27298,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,30652,37392,40660,21163,24623,36850,20552,25001,25581,25802,26684,27268,28608,33160,35233,38548,22533,29309,29356,29956,32121,32365,32937,35211,35700,36963,40273,25225,27770,28500,32080,32570,35363,20860,24906,31645,35609,37463,37772,20140,20435,20510,20670,20742,21185,21197,21375,22384,22659,24218,24465,24950,25004,25806,25964,26223,26299,26356,26775,28039,28805,28913,29855,29861,29898,30169,30828,30956,31455,31478,32069,32147,32789,32831,33051,33686,35686,36629,36885,37857,38915,38968,39514,39912,20418,21843,22586,22865,23395,23622,24760,25106,26690,26800,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,26856,28330,30028,30328,30926,31293,31995,32363,32380,35336,35489,35903,38542,40388,21476,21481,21578,21617,22266,22993,23396,23611,24235,25335,25911,25925,25970,26272,26543,27073,27837,30204,30352,30590,31295,32660,32771,32929,33167,33510,33533,33776,34241,34865,34996,35493,63747,36764,37678,38599,39015,39640,40723,21741,26011,26354,26767,31296,35895,40288,22256,22372,23825,26118,26801,26829,28414,29736,34974,39908,27752,63748,39592,20379,20844,20849,21151,23380,24037,24656,24685,25329,25511,25915,29657,31354,34467,36002,38799,20018,23521,25096,26524,29916,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,31185,33747,35463,35506,36328,36942,37707,38982,24275,27112,34303,37101,63749,20896,23448,23532,24931,26874,27454,28748,29743,29912,31649,32592,33733,35264,36011,38364,39208,21038,24669,25324,36866,20362,20809,21281,22745,24291,26336,27960,28826,29378,29654,31568,33009,37979,21350,25499,32619,20054,20608,22602,22750,24618,24871,25296,27088,39745,23439,32024,32945,36703,20132,20689,21676,21932,23308,23968,24039,25898,25934,26657,27211,29409,30350,30703,32094,32761,33184,34126,34527,36611,36686,37066,39171,39509,39851,19992,20037,20061,20167,20465,20855,21246,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,21312,21475,21477,21646,22036,22389,22434,23495,23943,24272,25084,25304,25937,26552,26601,27083,27472,27590,27628,27714,28317,28792,29399,29590,29699,30655,30697,31350,32127,32777,33276,33285,33290,33503,34914,35635,36092,36544,36881,37041,37476,37558,39378,39493,40169,40407,40860,22283,23616,33738,38816,38827,40628,21531,31384,32676,35033,36557,37089,22528,23624,25496,31391,23470,24339,31353,31406,33422,36524,20518,21048,21240,21367,22280,25331,25458,27402,28099,30519,21413,29527,34152,36470,38357,26426,27331,28528,35437,36556,39243,63750,26231,27512,36020,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,39740,63751,21483,22317,22862,25542,27131,29674,30789,31418,31429,31998,33909,35215,36211,36917,38312,21243,22343,30023,31584,33740,37406,63752,27224,20811,21067,21127,25119,26840,26997,38553,20677,21156,21220,25027,26020,26681,27135,29822,31563,33465,33771,35250,35641,36817,39241,63753,20170,22935,25810,26129,27278,29748,31105,31165,33449,34942,34943,35167,63754,37670,20235,21450,24613,25201,27762,32026,32102,20120,20834,30684,32943,20225,20238,20854,20864,21980,22120,22331,22522,22524,22804,22855,22931,23492,23696,23822,24049,24190,24524,25216,26071,26083,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,26398,26399,26462,26827,26820,27231,27450,27683,27773,27778,28103,29592,29734,29738,29826,29859,30072,30079,30849,30959,31041,31047,31048,31098,31637,32000,32186,32648,32774,32813,32908,35352,35663,35912,36215,37665,37668,39138,39249,39438,39439,39525,40594,32202,20342,21513,25326,26708,37329,21931,20794,63755,63756,23068,25062,63757,25295,25343,63758,63759,63760,63761,63762,63763,37027,63764,63765,63766,63767,63768,35582,63769,63770,63771,63772,26262,63773,29014,63774,63775,38627,63776,25423,25466,21335,63777,26511,26976,28275,63778,30007,63779,63780,63781,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,32013,63782,63783,34930,22218,23064,63784,63785,63786,63787,63788,20035,63789,20839,22856,26608,32784,63790,22899,24180,25754,31178,24565,24684,25288,25467,23527,23511,21162,63791,22900,24361,24594,63792,63793,63794,29785,63795,63796,63797,63798,63799,63800,39377,63801,63802,63803,63804,63805,63806,63807,63808,63809,63810,63811,28611,63812,63813,33215,36786,24817,63814,63815,33126,63816,63817,23615,63818,63819,63820,63821,63822,63823,63824,63825,23273,35365,26491,32016,63826,63827,63828,63829,63830,63831,33021,63832,63833,23612,27877,21311,28346,22810,33590,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,20025,20150,20294,21934,22296,22727,24406,26039,26086,27264,27573,28237,30701,31471,31774,32222,34507,34962,37170,37723,25787,28606,29562,30136,36948,21846,22349,25018,25812,26311,28129,28251,28525,28601,30192,32835,33213,34113,35203,35527,35674,37663,27795,30035,31572,36367,36957,21776,22530,22616,24162,25095,25758,26848,30070,31958,34739,40680,20195,22408,22382,22823,23565,23729,24118,24453,25140,25825,29619,33274,34955,36024,38538,40667,23429,24503,24755,20498,20992,21040,22294,22581,22615,23566,23648,23798,23947,24230,24466,24764,25361,25481,25623,26691,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,26873,27330,28120,28193,28372,28644,29182,30428,30585,31153,31291,33796,35241,36077,36339,36424,36867,36884,36947,37117,37709,38518,38876,27602,28678,29272,29346,29544,30563,31167,31716,32411,35712,22697,24775,25958,26109,26302,27788,28958,29129,35930,38931,20077,31361,20189,20908,20941,21205,21516,24999,26481,26704,26847,27934,28540,30140,30643,31461,33012,33891,37509,20828,26007,26460,26515,30168,31431,33651,63834,35910,36887,38957,23663,33216,33434,36929,36975,37389,24471,23965,27225,29128,30331,31561,34276,35588,37159,39472,21895,25078,63835,30313,32645,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,34367,34746,35064,37007,63836,27931,28889,29662,32097,33853,63837,37226,39409,63838,20098,21365,27396,27410,28734,29211,34349,40478,21068,36771,23888,25829,25900,27414,28651,31811,32412,34253,35172,35261,25289,33240,34847,24266,26391,28010,29436,29701,29807,34690,37086,20358,23821,24480,33802,20919,25504,30053,20142,20486,20841,20937,26753,27153,31918,31921,31975,33391,35538,36635,37327,20406,20791,21237,21570,24300,24942,25150,26053,27354,28670,31018,34268,34851,38317,39522,39530,40599,40654,21147,26310,27511,28701,31019,36706,38722,24976,25088,25891,28451,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,29001,29833,32244,32879,34030,36646,36899,37706,20925,21015,21155,27916,28872,35010,24265,25986,27566,28610,31806,29557,20196,20278,22265,63839,23738,23994,24604,29618,31533,32666,32718,32838,36894,37428,38646,38728,38936,40801,20363,28583,31150,37300,38583,21214,63840,25736,25796,27347,28510,28696,29200,30439,32769,34310,34396,36335,36613,38706,39791,40442,40565,30860,31103,32160,33737,37636,40575,40595,35542,22751,24324,26407,28711,29903,31840,32894,20769,28712,29282,30922,36034,36058,36084,38647,20102,20698,23534,24278,26009,29134,30274,30637,32842,34044,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,36988,39719,40845,22744,23105,23650,27155,28122,28431,30267,32047,32311,34078,35128,37860,38475,21129,26066,26611,27060,27969,28316,28687,29705,29792,30041,30244,30827,35628,39006,20845,25134,38520,20374,20523,23833,28138,32184,36650,24459,24900,26647,63841,38534,21202,32907,20956,20940,26974,31260,32190,33777,38517,20442,21033,21400,21519,21774,23653,24743,26446,26792,28012,29313,29432,29702,29827,63842,30178,31852,32633,32696,33673,35023,35041,37324,37328,38626,39881,21533,28542,29136,29848,34298,36522,38563,40023,40607,26519,28107,29747,33256,38678,30764,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,31435,31520,31890,25705,29802,30194,30908,30952,39340,39764,40635,23518,24149,28448,33180,33707,37000,19975,21325,23081,24018,24398,24930,25405,26217,26364,28415,28459,28771,30622,33836,34067,34875,36627,39237,39995,21788,25273,26411,27819,33545,35178,38778,20129,22916,24536,24537,26395,32178,32596,33426,33579,33725,36638,37017,22475,22969,23186,23504,26151,26522,26757,27599,29028,32629,36023,36067,36993,39749,33032,35978,38476,39488,40613,23391,27667,29467,30450,30431,33804,20906,35219,20813,20885,21193,26825,27796,30468,30496,32191,32236,38754,40629,28357,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,34065,20901,21517,21629,26126,26269,26919,28319,30399,30609,33559,33986,34719,37225,37528,40180,34946,20398,20882,21215,22982,24125,24917,25720,25721,26286,26576,27169,27597,27611,29279,29281,29761,30520,30683,32791,33468,33541,35584,35624,35980,26408,27792,29287,30446,30566,31302,40361,27519,27794,22818,26406,33945,21359,22675,22937,24287,25551,26164,26483,28218,29483,31447,33495,37672,21209,24043,25006,25035,25098,25287,25771,26080,26969,27494,27595,28961,29687,30045,32326,33310,33538,34154,35491,36031,38695,40289,22696,40664,20497,21006,21563,21839,25991,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,27766,32010,32011,32862,34442,38272,38639,21247,27797,29289,21619,23194,23614,23883,24396,24494,26410,26806,26979,28220,28228,30473,31859,32654,34183,35598,36855,38753,40692,23735,24758,24845,25003,25935,26107,26108,27665,27887,29599,29641,32225,38292,23494,34588,35600,21085,21338,25293,25615,25778,26420,27192,27850,29632,29854,31636,31893,32283,33162,33334,34180,36843,38649,39361,20276,21322,21453,21467,25292,25644,25856,26001,27075,27886,28504,29677,30036,30242,30436,30460,30928,30971,31020,32070,33324,34784,36820,38930,39151,21187,25300,25765,28196,28497,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,30332,36299,37297,37474,39662,39747,20515,20621,22346,22952,23592,24135,24439,25151,25918,26041,26049,26121,26507,27036,28354,30917,32033,32938,33152,33323,33459,33953,34444,35370,35607,37030,38450,40848,20493,20467,63843,22521,24472,25308,25490,26479,28227,28953,30403,32972,32986,35060,35061,35097,36064,36649,37197,38506,20271,20336,24091,26575,26658,30333,30334,39748,24161,27146,29033,29140,30058,63844,32321,34115,34281,39132,20240,31567,32624,38309,20961,24070,26805,27710,27726,27867,29359,31684,33539,27861,29754,20731,21128,22721,25816,27287,29863,30294,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,30887,34327,38370,38713,63845,21342,24321,35722,36776,36783,37002,21029,30629,40009,40712,19993,20482,20853,23643,24183,26142,26170,26564,26821,28851,29953,30149,31177,31453,36647,39200,39432,20445,22561,22577,23542,26222,27493,27921,28282,28541,29668,29995,33769,35036,35091,35676,36628,20239,20693,21264,21340,23443,24489,26381,31119,33145,33583,34068,35079,35206,36665,36667,39333,39954,26412,20086,20472,22857,23553,23791,23792,25447,26834,28925,29090,29739,32299,34028,34562,36898,37586,40179,19981,20184,20463,20613,21078,21103,21542,21648,22496,22827,23142,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,23386,23413,23500,24220,63846,25206,25975,26023,28014,28325,29238,31526,31807,32566,33104,33105,33178,33344,33433,33705,35331,36000,36070,36091,36212,36282,37096,37340,38428,38468,39385,40167,21271,20998,21545,22132,22707,22868,22894,24575,24996,25198,26128,27774,28954,30406,31881,31966,32027,33452,36033,38640,63847,20315,24343,24447,25282,23849,26379,26842,30844,32323,40300,19989,20633,21269,21290,21329,22915,23138,24199,24754,24970,25161,25209,26000,26503,27047,27604,27606,27607,27608,27832,63848,29749,30202,30738,30865,31189,31192,31875,32203,32737,32933,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,33086,33218,33778,34586,35048,35513,35692,36027,37145,38750,39131,40763,22188,23338,24428,25996,27315,27567,27996,28657,28693,29277,29613,36007,36051,38971,24977,27703,32856,39425,20045,20107,20123,20181,20282,20284,20351,20447,20735,21490,21496,21766,21987,22235,22763,22882,23057,23531,23546,23556,24051,24107,24473,24605,25448,26012,26031,26614,26619,26797,27515,27801,27863,28195,28681,29509,30722,31038,31040,31072,31169,31721,32023,32114,32902,33293,33678,34001,34503,35039,35408,35422,35613,36060,36198,36781,37034,39164,39391,40605,21066,63849,26388,63850,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,20632,21034,23665,25955,27733,29642,29987,30109,31639,33948,37240,38704,20087,25746,27578,29022,34217,19977,63851,26441,26862,28183,33439,34072,34923,25591,28545,37394,39087,19978,20663,20687,20767,21830,21930,22039,23360,23577,23776,24120,24202,24224,24258,24819,26705,27233,28248,29245,29248,29376,30456,31077,31665,32724,35059,35316,35443,35937,36062,38684,22622,29885,36093,21959,63852,31329,32034,33394,29298,29983,29989,63853,31513,22661,22779,23996,24207,24246,24464,24661,25234,25471,25933,26257,26329,26360,26646,26866,29312,29790,31598,32110,32214,32626,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,32997,33298,34223,35199,35475,36893,37604,40653,40736,22805,22893,24109,24796,26132,26227,26512,27728,28101,28511,30707,30889,33990,37323,37675,20185,20682,20808,21892,23307,23459,25159,25982,26059,28210,29053,29697,29764,29831,29887,30316,31146,32218,32341,32680,33146,33203,33337,34330,34796,35445,36323,36984,37521,37925,39245,39854,21352,23633,26964,27844,27945,28203,33292,34203,35131,35373,35498,38634,40807,21089,26297,27570,32406,34814,36109,38275,38493,25885,28041,29166,63854,22478,22995,23468,24615,24826,25104,26143,26207,29481,29689,30427,30465,31596,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,32854,32882,33125,35488,37266,19990,21218,27506,27927,31237,31545,32048,63855,36016,21484,22063,22609,23477,23567,23569,24034,25152,25475,25620,26157,26803,27836,28040,28335,28703,28836,29138,29990,30095,30094,30233,31505,31712,31787,32032,32057,34092,34157,34311,35380,36877,36961,37045,37559,38902,39479,20439,23660,26463,28049,31903,32396,35606,36118,36895,23403,24061,25613,33984,36956,39137,29575,23435,24730,26494,28126,35359,35494,36865,38924,21047,63856,28753,30862,37782,34928,37335,20462,21463,22013,22234,22402,22781,23234,23432,23723,23744,24101,24833,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,25101,25163,25480,25628,25910,25976,27193,27530,27700,27929,28465,29159,29417,29560,29703,29874,30246,30561,31168,31319,31466,31929,32143,32172,32353,32670,33065,33585,33936,34010,34282,34966,35504,35728,36664,36930,36995,37228,37526,37561,38539,38567,38568,38614,38656,38920,39318,39635,39706,21460,22654,22809,23408,23487,28113,28506,29087,29729,29881,32901,33789,24033,24455,24490,24642,26092,26642,26991,27219,27529,27957,28147,29667,30462,30636,31565,32020,33059,33308,33600,34036,34147,35426,35524,37255,37662,38918,39348,25100,34899,36848,37477,23815,23847,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,23913,29791,33181,34664,28629,25342,32722,35126,35186,19998,20056,20711,21213,21319,25215,26119,32361,34821,38494,20365,21273,22070,22987,23204,23608,23630,23629,24066,24337,24643,26045,26159,26178,26558,26612,29468,30690,31034,32709,33940,33997,35222,35430,35433,35553,35925,35962,22516,23508,24335,24687,25325,26893,27542,28252,29060,31698,34645,35672,36606,39135,39166,20280,20353,20449,21627,23072,23480,24892,26032,26216,29180,30003,31070,32051,33102,33251,33688,34218,34254,34563,35338,36523,36763,63857,36805,22833,23460,23526,24713,23529,23563,24515,27777,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,63858,28145,28683,29978,33455,35574,20160,21313,63859,38617,27663,20126,20420,20818,21854,23077,23784,25105,29273,33469,33706,34558,34905,35357,38463,38597,39187,40201,40285,22538,23731,23997,24132,24801,24853,25569,27138,28197,37122,37716,38990,39952,40823,23433,23736,25353,26191,26696,30524,38593,38797,38996,39839,26017,35585,36555,38332,21813,23721,24022,24245,26263,30284,33780,38343,22739,25276,29390,40232,20208,22830,24591,26171,27523,31207,40230,21395,21696,22467,23830,24859,26326,28079,30861,33406,38552,38724,21380,25212,25494,28082,32266,33099,38989,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,27387,32588,40367,40474,20063,20539,20918,22812,24825,25590,26928,29242,32822,63860,37326,24369,63861,63862,32004,33509,33903,33979,34277,36493,63863,20335,63864,63865,22756,23363,24665,25562,25880,25965,26264,63866,26954,27171,27915,28673,29036,30162,30221,31155,31344,63867,32650,63868,35140,63869,35731,37312,38525,63870,39178,22276,24481,26044,28417,30208,31142,35486,39341,39770,40812,20740,25014,25233,27277,33222,20547,22576,24422,28937,35328,35578,23420,34326,20474,20796,22196,22852,25513,28153,23978,26989,20870,20104,20313,63871,63872,63873,22914,63874,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,63875,27487,27741,63876,29877,30998,63877,33287,33349,33593,36671,36701,63878,39192,63879,63880,63881,20134,63882,22495,24441,26131,63883,63884,30123,32377,35695,63885,36870,39515,22181,22567,23032,23071,23476,63886,24310,63887,63888,25424,25403,63889,26941,27783,27839,28046,28051,28149,28436,63890,28895,28982,29017,63891,29123,29141,63892,30799,30831,63893,31605,32227,63894,32303,63895,34893,36575,63896,63897,63898,37467,63899,40182,63900,63901,63902,24709,28037,63903,29105,63904,63905,38321,21421,63906,63907,63908,26579,63909,28814,28976,29744,33398,33490,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,63910,38331,39653,40573,26308,63911,29121,33865,63912,63913,22603,63914,63915,23992,24433,63916,26144,26254,27001,27054,27704,27891,28214,28481,28634,28699,28719,29008,29151,29552,63917,29787,63918,29908,30408,31310,32403,63919,63920,33521,35424,36814,63921,37704,63922,38681,63923,63924,20034,20522,63925,21000,21473,26355,27757,28618,29450,30591,31330,33454,34269,34306,63926,35028,35427,35709,35947,63927,37555,63928,38675,38928,20116,20237,20425,20658,21320,21566,21555,21978,22626,22714,22887,23067,23524,24735,63929,25034,25942,26111,26212,26791,27738,28595,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,28879,29100,29522,31613,34568,35492,39986,40711,23627,27779,29508,29577,37434,28331,29797,30239,31337,32277,34314,20800,22725,25793,29934,29973,30320,32705,37013,38605,39252,28198,29926,31401,31402,33253,34521,34680,35355,23113,23436,23451,26785,26880,28003,29609,29715,29740,30871,32233,32747,33048,33109,33694,35916,38446,38929,26352,24448,26106,26505,27754,29579,20525,23043,27498,30702,22806,23916,24013,29477,30031,63930,63931,20709,20985,22575,22829,22934,23002,23525,63932,63933,23970,25303,25622,25747,25854,63934,26332,63935,27208,63936,29183,29796,63937,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,31368,31407,32327,32350,32768,33136,63938,34799,35201,35616,36953,63939,36992,39250,24958,27442,28020,32287,35109,36785,20433,20653,20887,21191,22471,22665,23481,24248,24898,27029,28044,28263,28342,29076,29794,29992,29996,32883,33592,33993,36362,37780,37854,63940,20110,20305,20598,20778,21448,21451,21491,23431,23507,23588,24858,24962,26100,29275,29591,29760,30402,31056,31121,31161,32006,32701,33419,34261,34398,36802,36935,37109,37354,38533,38632,38633,21206,24423,26093,26161,26671,29020,31286,37057,38922,20113,63941,27218,27550,28560,29065,32792,33464,34131,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,36939,38549,38642,38907,34074,39729,20112,29066,38596,20803,21407,21729,22291,22290,22435,23195,23236,23491,24616,24895,25588,27781,27961,28274,28304,29232,29503,29783,33489,34945,36677,36960,63942,38498,39000,40219,26376,36234,37470,20301,20553,20702,21361,22285,22996,23041,23561,24944,26256,28205,29234,29771,32239,32963,33806,33894,34111,34655,34907,35096,35586,36949,38859,39759,20083,20369,20754,20842,63943,21807,21929,23418,23461,24188,24189,24254,24736,24799,24840,24841,25540,25912,26377,63944,26580,26586,63945,26977,26978,27833,27943,63946,28216,63947,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,28641,29494,29495,63948,29788,30001,63949,30290,63950,63951,32173,33278,33848,35029,35480,35547,35565,36400,36418,36938,36926,36986,37193,37321,37742,63952,63953,22537,63954,27603,32905,32946,63955,63956,20801,22891,23609,63957,63958,28516,29607,32996,36103,63959,37399,38287,63960,63961,63962,63963,32895,25102,28700,32104,34701,63964,22432,24681,24903,27575,35518,37504,38577,20057,21535,28139,34093,38512,38899,39150,25558,27875,37009,20957,25033,33210,40441,20381,20506,20736,23452,24847,25087,25836,26885,27589,30097,30691,32681,33380,34191,34811,34915,35516,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,35696,37291,20108,20197,20234,63965,63966,22839,23016,63967,24050,24347,24411,24609,63968,63969,63970,63971,29246,29669,63972,30064,30157,63973,31227,63974,32780,32819,32900,33505,33617,63975,63976,36029,36019,36999,63977,63978,39156,39180,63979,63980,28727,30410,32714,32716,32764,35610,20154,20161,20995,21360,63981,21693,22240,23035,23493,24341,24525,28270,63982,63983,32106,33589,63984,34451,35469,63985,38765,38775,63986,63987,19968,20314,20350,22777,26085,28322,36920,37808,39353,20219,22764,22922,23001,24641,63988,63989,31252,63990,33615,36035,20837,21316,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,63991,63992,63993,20173,21097,23381,33471,20180,21050,21672,22985,23039,23376,23383,23388,24675,24904,28363,28825,29038,29574,29943,30133,30913,32043,32773,33258,33576,34071,34249,35566,36039,38604,20316,21242,22204,26027,26152,28796,28856,29237,32189,33421,37196,38592,40306,23409,26855,27544,28538,30430,23697,26283,28507,31668,31786,34870,38620,19976,20183,21280,22580,22715,22767,22892,23559,24115,24196,24373,25484,26290,26454,27167,27299,27404,28479,29254,63994,29520,29835,31456,31911,33144,33247,33255,33674,33900,34083,34196,34255,35037,36115,37292,38263,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,38556,20877,21705,22312,23472,25165,26448,26685,26771,28221,28371,28797,32289,35009,36001,36617,40779,40782,29229,31631,35533,37658,20295,20302,20786,21632,22992,24213,25269,26485,26990,27159,27822,28186,29401,29482,30141,31672,32053,33511,33785,33879,34295,35419,36015,36487,36889,37048,38606,40799,21219,21514,23265,23490,25688,25973,28404,29380,63995,30340,31309,31515,31821,32318,32735,33659,35627,36042,36196,36321,36447,36842,36857,36969,37841,20291,20346,20659,20840,20856,21069,21098,22625,22652,22880,23560,23637,24283,24731,25136,26643,27583,27656,28593,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,29006,29728,30000,30008,30033,30322,31564,31627,31661,31686,32399,35438,36670,36681,37439,37523,37666,37931,38651,39002,39019,39198,20999,25130,25240,27993,30308,31434,31680,32118,21344,23742,24215,28472,28857,31896,38673,39822,40670,25509,25722,34678,19969,20117,20141,20572,20597,21576,22979,23450,24128,24237,24311,24449,24773,25402,25919,25972,26060,26230,26232,26622,26984,27273,27491,27712,28096,28136,28191,28254,28702,28833,29582,29693,30010,30555,30855,31118,31243,31357,31934,32142,33351,35330,35562,35998,37165,37194,37336,37478,37580,37664,38662,38742,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,38748,38914,40718,21046,21137,21884,22564,24093,24351,24716,25552,26799,28639,31085,31532,33229,34234,35069,35576,36420,37261,38500,38555,38717,38988,40778,20430,20806,20939,21161,22066,24340,24427,25514,25805,26089,26177,26362,26361,26397,26781,26839,27133,28437,28526,29031,29157,29226,29866,30522,31062,31066,31199,31264,31381,31895,31967,32068,32368,32903,34299,34468,35412,35519,36249,36481,36896,36973,37347,38459,38613,40165,26063,31751,36275,37827,23384,23562,21330,25305,29469,20519,23447,24478,24752,24939,26837,28121,29742,31278,32066,32156,32305,33131,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,36394,36405,37758,37912,20304,22352,24038,24231,25387,32618,20027,20303,20367,20570,23005,32964,21610,21608,22014,22863,23449,24030,24282,26205,26417,26609,26666,27880,27954,28234,28557,28855,29664,30087,31820,32002,32044,32162,33311,34523,35387,35461,36208,36490,36659,36913,37198,37202,37956,39376,31481,31909,20426,20737,20934,22472,23535,23803,26201,27197,27994,28310,28652,28940,30063,31459,34850,36897,36981,38603,39423,33537,20013,20210,34886,37325,21373,27355,26987,27713,33914,22686,24974,26366,25327,28893,29969,30151,32338,33976,35657,36104,20043,21482,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,21675,22320,22336,24535,25345,25351,25711,25903,26088,26234,26525,26547,27490,27744,27802,28460,30693,30757,31049,31063,32025,32930,33026,33267,33437,33463,34584,35468,63996,36100,36286,36978,30452,31257,31287,32340,32887,21767,21972,22645,25391,25634,26185,26187,26733,27035,27524,27941,28337,29645,29800,29857,30043,30137,30433,30494,30603,31206,32265,32285,33275,34095,34967,35386,36049,36587,36784,36914,37805,38499,38515,38663,20356,21489,23018,23241,24089,26702,29894,30142,31209,31378,33187,34541,36074,36300,36845,26015,26389,63997,22519,28503,32221,36655,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,37878,38598,24501,25074,28548,19988,20376,20511,21449,21983,23919,24046,27425,27492,30923,31642,63998,36425,36554,36974,25417,25662,30528,31364,37679,38015,40810,25776,28591,29158,29864,29914,31428,31762,32386,31922,32408,35738,36106,38013,39184,39244,21049,23519,25830,26413,32046,20717,21443,22649,24920,24921,25082,26028,31449,35730,35734,20489,20513,21109,21809,23100,24288,24432,24884,25950,26124,26166,26274,27085,28356,28466,29462,30241,31379,33081,33369,33750,33980,20661,22512,23488,23528,24425,25505,30758,32181,33756,34081,37319,37365,20874,26613,31574,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,36012,20932,22971,24765,34389,20508,63999,21076,23610,24957,25114,25299,25842,26021,28364,30240,33034,36448,38495,38587,20191,21315,21912,22825,24029,25797,27849,28154,29588,31359,33307,34214,36068,36368,36983,37351,38369,38433,38854,20984,21746,21894,24505,25764,28552,32180,36639,36685,37941,20681,23574,27838,28155,29979,30651,31805,31844,35449,35522,22558,22974,24086,25463,29266,30090,30571,35548,36028,36626,24307,26228,28152,32893,33729,35531,38737,39894,64000,21059,26367,28053,28399,32224,35558,36910,36958,39636,21021,21119,21736,24980,25220,25307,26786,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,26898,26970,27189,28818,28966,30813,30977,30990,31186,31245,32918,33400,33493,33609,34121,35970,36229,37218,37259,37294,20419,22225,29165,30679,34560,35320,23544,24534,26449,37032,21474,22618,23541,24740,24961,25696,32317,32880,34085,37507,25774,20652,23828,26368,22684,25277,25512,26894,27000,27166,28267,30394,31179,33467,33833,35535,36264,36861,37138,37195,37276,37648,37656,37786,38619,39478,39949,19985,30044,31069,31482,31569,31689,32302,33988,36441,36468,36600,36880,26149,26943,29763,20986,26414,40668,20805,24544,27798,34802,34909,34935,24756,33205,33795,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,36101,21462,21561,22068,23094,23601,28810,32736,32858,33030,33261,36259,37257,39519,40434,20596,20164,21408,24827,28204,23652,20360,20516,21988,23769,24159,24677,26772,27835,28100,29118,30164,30196,30305,31258,31305,32199,32251,32622,33268,34473,36636,38601,39347,40786,21063,21189,39149,35242,19971,26578,28422,20405,23522,26517,27784,28024,29723,30759,37341,37756,34756,31204,31281,24555,20182,21668,21822,22702,22949,24816,25171,25302,26422,26965,33333,38464,39345,39389,20524,21331,21828,22396,64001,25176,64002,25826,26219,26589,28609,28655,29730,29752,35351,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,37944,21585,22022,22374,24392,24986,27470,28760,28845,32187,35477,22890,33067,25506,30472,32829,36010,22612,25645,27067,23445,24081,28271,64003,34153,20812,21488,22826,24608,24907,27526,27760,27888,31518,32974,33492,36294,37040,39089,64004,25799,28580,25745,25860,20814,21520,22303,35342,24927,26742,64005,30171,31570,32113,36890,22534,27084,33151,35114,36864,38969,20600,22871,22956,25237,36879,39722,24925,29305,38358,22369,23110,24052,25226,25773,25850,26487,27874,27966,29228,29750,30772,32631,33453,36315,38935,21028,22338,26495,29256,29923,36009,36774,37393,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,38442,20843,21485,25420,20329,21764,24726,25943,27803,28031,29260,29437,31255,35207,35997,24429,28558,28921,33192,24846,20415,20559,25153,29255,31687,32232,32745,36941,38829,39449,36022,22378,24179,26544,33805,35413,21536,23318,24163,24290,24330,25987,32954,34109,38281,38491,20296,21253,21261,21263,21638,21754,22275,24067,24598,25243,25265,25429,64006,27873,28006,30129,30770,32990,33071,33502,33889,33970,34957,35090,36875,37610,39165,39825,24133,26292,26333,28689,29190,64007,20469,21117,24426,24915,26451,27161,28418,29922,31080,34920,35961,39111,39108,39491,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,21697,31263,26963,35575,35914,39080,39342,24444,25259,30130,30382,34987,36991,38466,21305,24380,24517,27852,29644,30050,30091,31558,33534,39325,20047,36924,19979,20309,21414,22799,24264,26160,27827,29781,33655,34662,36032,36944,38686,39957,22737,23416,34384,35604,40372,23506,24680,24717,26097,27735,28450,28579,28698,32597,32752,38289,38290,38480,38867,21106,36676,20989,21547,21688,21859,21898,27323,28085,32216,33382,37532,38519,40569,21512,21704,30418,34532,38308,38356,38492,20130,20233,23022,23270,24055,24658,25239,26477,26689,27782,28207,32568,32923,33322,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,64008,64009,38917,20133,20565,21683,22419,22874,23401,23475,25032,26999,28023,28707,34809,35299,35442,35559,36994,39405,39608,21182,26680,20502,24184,26447,33607,34892,20139,21521,22190,29670,37141,38911,39177,39255,39321,22099,22687,34395,35377,25010,27382,29563,36562,27463,38570,39511,22869,29184,36203,38761,20436,23796,24358,25080,26203,27883,28843,29572,29625,29694,30505,30541,32067,32098,32291,33335,34898,64010,36066,37449,39023,23377,31348,34880,38913,23244,20448,21332,22846,23805,25406,28025,29433,33029,33031,33698,37583,38960,20136,20804,21009,22411,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,24418,27842,28366,28677,28752,28847,29074,29673,29801,33610,34722,34913,36872,37026,37795,39336,20846,24407,24800,24935,26291,34137,36426,37295,38795,20046,20114,21628,22741,22778,22909,23733,24359,25142,25160,26122,26215,27627,28009,28111,28246,28408,28564,28640,28649,28765,29392,29733,29786,29920,30355,31068,31946,32286,32993,33446,33899,33983,34382,34399,34676,35703,35946,37804,38912,39013,24785,25110,37239,23130,26127,28151,28222,29759,39746,24573,24794,31503,21700,24344,27742,27859,27946,28888,32005,34425,35340,40251,21270,21644,23301,27194,28779,30069,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,31117,31166,33457,33775,35441,35649,36008,38772,64011,25844,25899,30906,30907,31339,20024,21914,22864,23462,24187,24739,25563,27489,26213,26707,28185,29029,29872,32008,36996,39529,39973,27963,28369,29502,35905,38346,20976,24140,24488,24653,24822,24880,24908,26179,26180,27045,27841,28255,28361,28514,29004,29852,30343,31681,31783,33618,34647,36945,38541,40643,21295,22238,24315,24458,24674,24724,25079,26214,26371,27292,28142,28590,28784,29546,32362,33214,33588,34516,35496,36036,21123,29554,23446,27243,37892,21742,22150,23389,25928,25989,26313,26783,28045,28102,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,29243,32948,37237,39501,20399,20505,21402,21518,21564,21897,21957,24127,24460,26429,29030,29661,36869,21211,21235,22628,22734,28932,29071,29179,34224,35347,26248,34216,21927,26244,29002,33841,21321,21913,27585,24409,24509,25582,26249,28999,35569,36637,40638,20241,25658,28875,30054,34407,24676,35662,40440,20807,20982,21256,27958,33016,40657,26133,27427,28824,30165,21507,23673,32007,35350,27424,27453,27462,21560,24688,27965,32725,33288,20694,20958,21916,22123,22221,23020,23305,24076,24985,24984,25137,26206,26342,29081,29113,29114,29351,31143,31232,32690,35440,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],
	  "gb18030":[19970,19972,19973,19974,19983,19986,19991,19999,20000,20001,20003,20006,20009,20014,20015,20017,20019,20021,20023,20028,20032,20033,20034,20036,20038,20042,20049,20053,20055,20058,20059,20066,20067,20068,20069,20071,20072,20074,20075,20076,20077,20078,20079,20082,20084,20085,20086,20087,20088,20089,20090,20091,20092,20093,20095,20096,20097,20098,20099,20100,20101,20103,20106,20112,20118,20119,20121,20124,20125,20126,20131,20138,20143,20144,20145,20148,20150,20151,20152,20153,20156,20157,20158,20168,20172,20175,20176,20178,20186,20187,20188,20192,20194,20198,20199,20201,20205,20206,20207,20209,20212,20216,20217,20218,20220,20222,20224,20226,20227,20228,20229,20230,20231,20232,20235,20236,20242,20243,20244,20245,20246,20252,20253,20257,20259,20264,20265,20268,20269,20270,20273,20275,20277,20279,20281,20283,20286,20287,20288,20289,20290,20292,20293,20295,20296,20297,20298,20299,20300,20306,20308,20310,20321,20322,20326,20328,20330,20331,20333,20334,20337,20338,20341,20343,20344,20345,20346,20349,20352,20353,20354,20357,20358,20359,20362,20364,20366,20368,20370,20371,20373,20374,20376,20377,20378,20380,20382,20383,20385,20386,20388,20395,20397,20400,20401,20402,20403,20404,20406,20407,20408,20409,20410,20411,20412,20413,20414,20416,20417,20418,20422,20423,20424,20425,20427,20428,20429,20434,20435,20436,20437,20438,20441,20443,20448,20450,20452,20453,20455,20459,20460,20464,20466,20468,20469,20470,20471,20473,20475,20476,20477,20479,20480,20481,20482,20483,20484,20485,20486,20487,20488,20489,20490,20491,20494,20496,20497,20499,20501,20502,20503,20507,20509,20510,20512,20514,20515,20516,20519,20523,20527,20528,20529,20530,20531,20532,20533,20534,20535,20536,20537,20539,20541,20543,20544,20545,20546,20548,20549,20550,20553,20554,20555,20557,20560,20561,20562,20563,20564,20566,20567,20568,20569,20571,20573,20574,20575,20576,20577,20578,20579,20580,20582,20583,20584,20585,20586,20587,20589,20590,20591,20592,20593,20594,20595,20596,20597,20600,20601,20602,20604,20605,20609,20610,20611,20612,20614,20615,20617,20618,20619,20620,20622,20623,20624,20625,20626,20627,20628,20629,20630,20631,20632,20633,20634,20635,20636,20637,20638,20639,20640,20641,20642,20644,20646,20650,20651,20653,20654,20655,20656,20657,20659,20660,20661,20662,20663,20664,20665,20668,20669,20670,20671,20672,20673,20674,20675,20676,20677,20678,20679,20680,20681,20682,20683,20684,20685,20686,20688,20689,20690,20691,20692,20693,20695,20696,20697,20699,20700,20701,20702,20703,20704,20705,20706,20707,20708,20709,20712,20713,20714,20715,20719,20720,20721,20722,20724,20726,20727,20728,20729,20730,20732,20733,20734,20735,20736,20737,20738,20739,20740,20741,20744,20745,20746,20748,20749,20750,20751,20752,20753,20755,20756,20757,20758,20759,20760,20761,20762,20763,20764,20765,20766,20767,20768,20770,20771,20772,20773,20774,20775,20776,20777,20778,20779,20780,20781,20782,20783,20784,20785,20786,20787,20788,20789,20790,20791,20792,20793,20794,20795,20796,20797,20798,20802,20807,20810,20812,20814,20815,20816,20818,20819,20823,20824,20825,20827,20829,20830,20831,20832,20833,20835,20836,20838,20839,20841,20842,20847,20850,20858,20862,20863,20867,20868,20870,20871,20874,20875,20878,20879,20880,20881,20883,20884,20888,20890,20893,20894,20895,20897,20899,20902,20903,20904,20905,20906,20909,20910,20916,20920,20921,20922,20926,20927,20929,20930,20931,20933,20936,20938,20941,20942,20944,20946,20947,20948,20949,20950,20951,20952,20953,20954,20956,20958,20959,20962,20963,20965,20966,20967,20968,20969,20970,20972,20974,20977,20978,20980,20983,20990,20996,20997,21001,21003,21004,21007,21008,21011,21012,21013,21020,21022,21023,21025,21026,21027,21029,21030,21031,21034,21036,21039,21041,21042,21044,21045,21052,21054,21060,21061,21062,21063,21064,21065,21067,21070,21071,21074,21075,21077,21079,21080,21081,21082,21083,21085,21087,21088,21090,21091,21092,21094,21096,21099,21100,21101,21102,21104,21105,21107,21108,21109,21110,21111,21112,21113,21114,21115,21116,21118,21120,21123,21124,21125,21126,21127,21129,21130,21131,21132,21133,21134,21135,21137,21138,21140,21141,21142,21143,21144,21145,21146,21148,21156,21157,21158,21159,21166,21167,21168,21172,21173,21174,21175,21176,21177,21178,21179,21180,21181,21184,21185,21186,21188,21189,21190,21192,21194,21196,21197,21198,21199,21201,21203,21204,21205,21207,21209,21210,21211,21212,21213,21214,21216,21217,21218,21219,21221,21222,21223,21224,21225,21226,21227,21228,21229,21230,21231,21233,21234,21235,21236,21237,21238,21239,21240,21243,21244,21245,21249,21250,21251,21252,21255,21257,21258,21259,21260,21262,21265,21266,21267,21268,21272,21275,21276,21278,21279,21282,21284,21285,21287,21288,21289,21291,21292,21293,21295,21296,21297,21298,21299,21300,21301,21302,21303,21304,21308,21309,21312,21314,21316,21318,21323,21324,21325,21328,21332,21336,21337,21339,21341,21349,21352,21354,21356,21357,21362,21366,21369,21371,21372,21373,21374,21376,21377,21379,21383,21384,21386,21390,21391,21392,21393,21394,21395,21396,21398,21399,21401,21403,21404,21406,21408,21409,21412,21415,21418,21419,21420,21421,21423,21424,21425,21426,21427,21428,21429,21431,21432,21433,21434,21436,21437,21438,21440,21443,21444,21445,21446,21447,21454,21455,21456,21458,21459,21461,21466,21468,21469,21470,21473,21474,21479,21492,21498,21502,21503,21504,21506,21509,21511,21515,21524,21528,21529,21530,21532,21538,21540,21541,21546,21552,21555,21558,21559,21562,21565,21567,21569,21570,21572,21573,21575,21577,21580,21581,21582,21583,21585,21594,21597,21598,21599,21600,21601,21603,21605,21607,21609,21610,21611,21612,21613,21614,21615,21616,21620,21625,21626,21630,21631,21633,21635,21637,21639,21640,21641,21642,21645,21649,21651,21655,21656,21660,21662,21663,21664,21665,21666,21669,21678,21680,21682,21685,21686,21687,21689,21690,21692,21694,21699,21701,21706,21707,21718,21720,21723,21728,21729,21730,21731,21732,21739,21740,21743,21744,21745,21748,21749,21750,21751,21752,21753,21755,21758,21760,21762,21763,21764,21765,21768,21770,21771,21772,21773,21774,21778,21779,21781,21782,21783,21784,21785,21786,21788,21789,21790,21791,21793,21797,21798,21800,21801,21803,21805,21810,21812,21813,21814,21816,21817,21818,21819,21821,21824,21826,21829,21831,21832,21835,21836,21837,21838,21839,21841,21842,21843,21844,21847,21848,21849,21850,21851,21853,21854,21855,21856,21858,21859,21864,21865,21867,21871,21872,21873,21874,21875,21876,21881,21882,21885,21887,21893,21894,21900,21901,21902,21904,21906,21907,21909,21910,21911,21914,21915,21918,21920,21921,21922,21923,21924,21925,21926,21928,21929,21930,21931,21932,21933,21934,21935,21936,21938,21940,21942,21944,21946,21948,21951,21952,21953,21954,21955,21958,21959,21960,21962,21963,21966,21967,21968,21973,21975,21976,21977,21978,21979,21982,21984,21986,21991,21993,21997,21998,22000,22001,22004,22006,22008,22009,22010,22011,22012,22015,22018,22019,22020,22021,22022,22023,22026,22027,22029,22032,22033,22034,22035,22036,22037,22038,22039,22041,22042,22044,22045,22048,22049,22050,22053,22054,22056,22057,22058,22059,22062,22063,22064,22067,22069,22071,22072,22074,22076,22077,22078,22080,22081,22082,22083,22084,22085,22086,22087,22088,22089,22090,22091,22095,22096,22097,22098,22099,22101,22102,22106,22107,22109,22110,22111,22112,22113,22115,22117,22118,22119,22125,22126,22127,22128,22130,22131,22132,22133,22135,22136,22137,22138,22141,22142,22143,22144,22145,22146,22147,22148,22151,22152,22153,22154,22155,22156,22157,22160,22161,22162,22164,22165,22166,22167,22168,22169,22170,22171,22172,22173,22174,22175,22176,22177,22178,22180,22181,22182,22183,22184,22185,22186,22187,22188,22189,22190,22192,22193,22194,22195,22196,22197,22198,22200,22201,22202,22203,22205,22206,22207,22208,22209,22210,22211,22212,22213,22214,22215,22216,22217,22219,22220,22221,22222,22223,22224,22225,22226,22227,22229,22230,22232,22233,22236,22243,22245,22246,22247,22248,22249,22250,22252,22254,22255,22258,22259,22262,22263,22264,22267,22268,22272,22273,22274,22277,22279,22283,22284,22285,22286,22287,22288,22289,22290,22291,22292,22293,22294,22295,22296,22297,22298,22299,22301,22302,22304,22305,22306,22308,22309,22310,22311,22315,22321,22322,22324,22325,22326,22327,22328,22332,22333,22335,22337,22339,22340,22341,22342,22344,22345,22347,22354,22355,22356,22357,22358,22360,22361,22370,22371,22373,22375,22380,22382,22384,22385,22386,22388,22389,22392,22393,22394,22397,22398,22399,22400,22401,22407,22408,22409,22410,22413,22414,22415,22416,22417,22420,22421,22422,22423,22424,22425,22426,22428,22429,22430,22431,22437,22440,22442,22444,22447,22448,22449,22451,22453,22454,22455,22457,22458,22459,22460,22461,22462,22463,22464,22465,22468,22469,22470,22471,22472,22473,22474,22476,22477,22480,22481,22483,22486,22487,22491,22492,22494,22497,22498,22499,22501,22502,22503,22504,22505,22506,22507,22508,22510,22512,22513,22514,22515,22517,22518,22519,22523,22524,22526,22527,22529,22531,22532,22533,22536,22537,22538,22540,22542,22543,22544,22546,22547,22548,22550,22551,22552,22554,22555,22556,22557,22559,22562,22563,22565,22566,22567,22568,22569,22571,22572,22573,22574,22575,22577,22578,22579,22580,22582,22583,22584,22585,22586,22587,22588,22589,22590,22591,22592,22593,22594,22595,22597,22598,22599,22600,22601,22602,22603,22606,22607,22608,22610,22611,22613,22614,22615,22617,22618,22619,22620,22621,22623,22624,22625,22626,22627,22628,22630,22631,22632,22633,22634,22637,22638,22639,22640,22641,22642,22643,22644,22645,22646,22647,22648,22649,22650,22651,22652,22653,22655,22658,22660,22662,22663,22664,22666,22667,22668,22669,22670,22671,22672,22673,22676,22677,22678,22679,22680,22683,22684,22685,22688,22689,22690,22691,22692,22693,22694,22695,22698,22699,22700,22701,22702,22703,22704,22705,22706,22707,22708,22709,22710,22711,22712,22713,22714,22715,22717,22718,22719,22720,22722,22723,22724,22726,22727,22728,22729,22730,22731,22732,22733,22734,22735,22736,22738,22739,22740,22742,22743,22744,22745,22746,22747,22748,22749,22750,22751,22752,22753,22754,22755,22757,22758,22759,22760,22761,22762,22765,22767,22769,22770,22772,22773,22775,22776,22778,22779,22780,22781,22782,22783,22784,22785,22787,22789,22790,22792,22793,22794,22795,22796,22798,22800,22801,22802,22803,22807,22808,22811,22813,22814,22816,22817,22818,22819,22822,22824,22828,22832,22834,22835,22837,22838,22843,22845,22846,22847,22848,22851,22853,22854,22858,22860,22861,22864,22866,22867,22873,22875,22876,22877,22878,22879,22881,22883,22884,22886,22887,22888,22889,22890,22891,22892,22893,22894,22895,22896,22897,22898,22901,22903,22906,22907,22908,22910,22911,22912,22917,22921,22923,22924,22926,22927,22928,22929,22932,22933,22936,22938,22939,22940,22941,22943,22944,22945,22946,22950,22951,22956,22957,22960,22961,22963,22964,22965,22966,22967,22968,22970,22972,22973,22975,22976,22977,22978,22979,22980,22981,22983,22984,22985,22988,22989,22990,22991,22997,22998,23001,23003,23006,23007,23008,23009,23010,23012,23014,23015,23017,23018,23019,23021,23022,23023,23024,23025,23026,23027,23028,23029,23030,23031,23032,23034,23036,23037,23038,23040,23042,23050,23051,23053,23054,23055,23056,23058,23060,23061,23062,23063,23065,23066,23067,23069,23070,23073,23074,23076,23078,23079,23080,23082,23083,23084,23085,23086,23087,23088,23091,23093,23095,23096,23097,23098,23099,23101,23102,23103,23105,23106,23107,23108,23109,23111,23112,23115,23116,23117,23118,23119,23120,23121,23122,23123,23124,23126,23127,23128,23129,23131,23132,23133,23134,23135,23136,23137,23139,23140,23141,23142,23144,23145,23147,23148,23149,23150,23151,23152,23153,23154,23155,23160,23161,23163,23164,23165,23166,23168,23169,23170,23171,23172,23173,23174,23175,23176,23177,23178,23179,23180,23181,23182,23183,23184,23185,23187,23188,23189,23190,23191,23192,23193,23196,23197,23198,23199,23200,23201,23202,23203,23204,23205,23206,23207,23208,23209,23211,23212,23213,23214,23215,23216,23217,23220,23222,23223,23225,23226,23227,23228,23229,23231,23232,23235,23236,23237,23238,23239,23240,23242,23243,23245,23246,23247,23248,23249,23251,23253,23255,23257,23258,23259,23261,23262,23263,23266,23268,23269,23271,23272,23274,23276,23277,23278,23279,23280,23282,23283,23284,23285,23286,23287,23288,23289,23290,23291,23292,23293,23294,23295,23296,23297,23298,23299,23300,23301,23302,23303,23304,23306,23307,23308,23309,23310,23311,23312,23313,23314,23315,23316,23317,23320,23321,23322,23323,23324,23325,23326,23327,23328,23329,23330,23331,23332,23333,23334,23335,23336,23337,23338,23339,23340,23341,23342,23343,23344,23345,23347,23349,23350,23352,23353,23354,23355,23356,23357,23358,23359,23361,23362,23363,23364,23365,23366,23367,23368,23369,23370,23371,23372,23373,23374,23375,23378,23382,23390,23392,23393,23399,23400,23403,23405,23406,23407,23410,23412,23414,23415,23416,23417,23419,23420,23422,23423,23426,23430,23434,23437,23438,23440,23441,23442,23444,23446,23455,23463,23464,23465,23468,23469,23470,23471,23473,23474,23479,23482,23483,23484,23488,23489,23491,23496,23497,23498,23499,23501,23502,23503,23505,23508,23509,23510,23511,23512,23513,23514,23515,23516,23520,23522,23523,23526,23527,23529,23530,23531,23532,23533,23535,23537,23538,23539,23540,23541,23542,23543,23549,23550,23552,23554,23555,23557,23559,23560,23563,23564,23565,23566,23568,23570,23571,23575,23577,23579,23582,23583,23584,23585,23587,23590,23592,23593,23594,23595,23597,23598,23599,23600,23602,23603,23605,23606,23607,23619,23620,23622,23623,23628,23629,23634,23635,23636,23638,23639,23640,23642,23643,23644,23645,23647,23650,23652,23655,23656,23657,23658,23659,23660,23661,23664,23666,23667,23668,23669,23670,23671,23672,23675,23676,23677,23678,23680,23683,23684,23685,23686,23687,23689,23690,23691,23694,23695,23698,23699,23701,23709,23710,23711,23712,23713,23716,23717,23718,23719,23720,23722,23726,23727,23728,23730,23732,23734,23737,23738,23739,23740,23742,23744,23746,23747,23749,23750,23751,23752,23753,23754,23756,23757,23758,23759,23760,23761,23763,23764,23765,23766,23767,23768,23770,23771,23772,23773,23774,23775,23776,23778,23779,23783,23785,23787,23788,23790,23791,23793,23794,23795,23796,23797,23798,23799,23800,23801,23802,23804,23805,23806,23807,23808,23809,23812,23813,23816,23817,23818,23819,23820,23821,23823,23824,23825,23826,23827,23829,23831,23832,23833,23834,23836,23837,23839,23840,23841,23842,23843,23845,23848,23850,23851,23852,23855,23856,23857,23858,23859,23861,23862,23863,23864,23865,23866,23867,23868,23871,23872,23873,23874,23875,23876,23877,23878,23880,23881,23885,23886,23887,23888,23889,23890,23891,23892,23893,23894,23895,23897,23898,23900,23902,23903,23904,23905,23906,23907,23908,23909,23910,23911,23912,23914,23917,23918,23920,23921,23922,23923,23925,23926,23927,23928,23929,23930,23931,23932,23933,23934,23935,23936,23937,23939,23940,23941,23942,23943,23944,23945,23946,23947,23948,23949,23950,23951,23952,23953,23954,23955,23956,23957,23958,23959,23960,23962,23963,23964,23966,23967,23968,23969,23970,23971,23972,23973,23974,23975,23976,23977,23978,23979,23980,23981,23982,23983,23984,23985,23986,23987,23988,23989,23990,23992,23993,23994,23995,23996,23997,23998,23999,24000,24001,24002,24003,24004,24006,24007,24008,24009,24010,24011,24012,24014,24015,24016,24017,24018,24019,24020,24021,24022,24023,24024,24025,24026,24028,24031,24032,24035,24036,24042,24044,24045,24048,24053,24054,24056,24057,24058,24059,24060,24063,24064,24068,24071,24073,24074,24075,24077,24078,24082,24083,24087,24094,24095,24096,24097,24098,24099,24100,24101,24104,24105,24106,24107,24108,24111,24112,24114,24115,24116,24117,24118,24121,24122,24126,24127,24128,24129,24131,24134,24135,24136,24137,24138,24139,24141,24142,24143,24144,24145,24146,24147,24150,24151,24152,24153,24154,24156,24157,24159,24160,24163,24164,24165,24166,24167,24168,24169,24170,24171,24172,24173,24174,24175,24176,24177,24181,24183,24185,24190,24193,24194,24195,24197,24200,24201,24204,24205,24206,24210,24216,24219,24221,24225,24226,24227,24228,24232,24233,24234,24235,24236,24238,24239,24240,24241,24242,24244,24250,24251,24252,24253,24255,24256,24257,24258,24259,24260,24261,24262,24263,24264,24267,24268,24269,24270,24271,24272,24276,24277,24279,24280,24281,24282,24284,24285,24286,24287,24288,24289,24290,24291,24292,24293,24294,24295,24297,24299,24300,24301,24302,24303,24304,24305,24306,24307,24309,24312,24313,24315,24316,24317,24325,24326,24327,24329,24332,24333,24334,24336,24338,24340,24342,24345,24346,24348,24349,24350,24353,24354,24355,24356,24360,24363,24364,24366,24368,24370,24371,24372,24373,24374,24375,24376,24379,24381,24382,24383,24385,24386,24387,24388,24389,24390,24391,24392,24393,24394,24395,24396,24397,24398,24399,24401,24404,24409,24410,24411,24412,24414,24415,24416,24419,24421,24423,24424,24427,24430,24431,24434,24436,24437,24438,24440,24442,24445,24446,24447,24451,24454,24461,24462,24463,24465,24467,24468,24470,24474,24475,24477,24478,24479,24480,24482,24483,24484,24485,24486,24487,24489,24491,24492,24495,24496,24497,24498,24499,24500,24502,24504,24505,24506,24507,24510,24511,24512,24513,24514,24519,24520,24522,24523,24526,24531,24532,24533,24538,24539,24540,24542,24543,24546,24547,24549,24550,24552,24553,24556,24559,24560,24562,24563,24564,24566,24567,24569,24570,24572,24583,24584,24585,24587,24588,24592,24593,24595,24599,24600,24602,24606,24607,24610,24611,24612,24620,24621,24622,24624,24625,24626,24627,24628,24630,24631,24632,24633,24634,24637,24638,24640,24644,24645,24646,24647,24648,24649,24650,24652,24654,24655,24657,24659,24660,24662,24663,24664,24667,24668,24670,24671,24672,24673,24677,24678,24686,24689,24690,24692,24693,24695,24702,24704,24705,24706,24709,24710,24711,24712,24714,24715,24718,24719,24720,24721,24723,24725,24727,24728,24729,24732,24734,24737,24738,24740,24741,24743,24745,24746,24750,24752,24755,24757,24758,24759,24761,24762,24765,24766,24767,24768,24769,24770,24771,24772,24775,24776,24777,24780,24781,24782,24783,24784,24786,24787,24788,24790,24791,24793,24795,24798,24801,24802,24803,24804,24805,24810,24817,24818,24821,24823,24824,24827,24828,24829,24830,24831,24834,24835,24836,24837,24839,24842,24843,24844,24848,24849,24850,24851,24852,24854,24855,24856,24857,24859,24860,24861,24862,24865,24866,24869,24872,24873,24874,24876,24877,24878,24879,24880,24881,24882,24883,24884,24885,24886,24887,24888,24889,24890,24891,24892,24893,24894,24896,24897,24898,24899,24900,24901,24902,24903,24905,24907,24909,24911,24912,24914,24915,24916,24918,24919,24920,24921,24922,24923,24924,24926,24927,24928,24929,24931,24932,24933,24934,24937,24938,24939,24940,24941,24942,24943,24945,24946,24947,24948,24950,24952,24953,24954,24955,24956,24957,24958,24959,24960,24961,24962,24963,24964,24965,24966,24967,24968,24969,24970,24972,24973,24975,24976,24977,24978,24979,24981,24982,24983,24984,24985,24986,24987,24988,24990,24991,24992,24993,24994,24995,24996,24997,24998,25002,25003,25005,25006,25007,25008,25009,25010,25011,25012,25013,25014,25016,25017,25018,25019,25020,25021,25023,25024,25025,25027,25028,25029,25030,25031,25033,25036,25037,25038,25039,25040,25043,25045,25046,25047,25048,25049,25050,25051,25052,25053,25054,25055,25056,25057,25058,25059,25060,25061,25063,25064,25065,25066,25067,25068,25069,25070,25071,25072,25073,25074,25075,25076,25078,25079,25080,25081,25082,25083,25084,25085,25086,25088,25089,25090,25091,25092,25093,25095,25097,25107,25108,25113,25116,25117,25118,25120,25123,25126,25127,25128,25129,25131,25133,25135,25136,25137,25138,25141,25142,25144,25145,25146,25147,25148,25154,25156,25157,25158,25162,25167,25168,25173,25174,25175,25177,25178,25180,25181,25182,25183,25184,25185,25186,25188,25189,25192,25201,25202,25204,25205,25207,25208,25210,25211,25213,25217,25218,25219,25221,25222,25223,25224,25227,25228,25229,25230,25231,25232,25236,25241,25244,25245,25246,25251,25254,25255,25257,25258,25261,25262,25263,25264,25266,25267,25268,25270,25271,25272,25274,25278,25280,25281,25283,25291,25295,25297,25301,25309,25310,25312,25313,25316,25322,25323,25328,25330,25333,25336,25337,25338,25339,25344,25347,25348,25349,25350,25354,25355,25356,25357,25359,25360,25362,25363,25364,25365,25367,25368,25369,25372,25382,25383,25385,25388,25389,25390,25392,25393,25395,25396,25397,25398,25399,25400,25403,25404,25406,25407,25408,25409,25412,25415,25416,25418,25425,25426,25427,25428,25430,25431,25432,25433,25434,25435,25436,25437,25440,25444,25445,25446,25448,25450,25451,25452,25455,25456,25458,25459,25460,25461,25464,25465,25468,25469,25470,25471,25473,25475,25476,25477,25478,25483,25485,25489,25491,25492,25493,25495,25497,25498,25499,25500,25501,25502,25503,25505,25508,25510,25515,25519,25521,25522,25525,25526,25529,25531,25533,25535,25536,25537,25538,25539,25541,25543,25544,25546,25547,25548,25553,25555,25556,25557,25559,25560,25561,25562,25563,25564,25565,25567,25570,25572,25573,25574,25575,25576,25579,25580,25582,25583,25584,25585,25587,25589,25591,25593,25594,25595,25596,25598,25603,25604,25606,25607,25608,25609,25610,25613,25614,25617,25618,25621,25622,25623,25624,25625,25626,25629,25631,25634,25635,25636,25637,25639,25640,25641,25643,25646,25647,25648,25649,25650,25651,25653,25654,25655,25656,25657,25659,25660,25662,25664,25666,25667,25673,25675,25676,25677,25678,25679,25680,25681,25683,25685,25686,25687,25689,25690,25691,25692,25693,25695,25696,25697,25698,25699,25700,25701,25702,25704,25706,25707,25708,25710,25711,25712,25713,25714,25715,25716,25717,25718,25719,25723,25724,25725,25726,25727,25728,25729,25731,25734,25736,25737,25738,25739,25740,25741,25742,25743,25744,25747,25748,25751,25752,25754,25755,25756,25757,25759,25760,25761,25762,25763,25765,25766,25767,25768,25770,25771,25775,25777,25778,25779,25780,25782,25785,25787,25789,25790,25791,25793,25795,25796,25798,25799,25800,25801,25802,25803,25804,25807,25809,25811,25812,25813,25814,25817,25818,25819,25820,25821,25823,25824,25825,25827,25829,25831,25832,25833,25834,25835,25836,25837,25838,25839,25840,25841,25842,25843,25844,25845,25846,25847,25848,25849,25850,25851,25852,25853,25854,25855,25857,25858,25859,25860,25861,25862,25863,25864,25866,25867,25868,25869,25870,25871,25872,25873,25875,25876,25877,25878,25879,25881,25882,25883,25884,25885,25886,25887,25888,25889,25890,25891,25892,25894,25895,25896,25897,25898,25900,25901,25904,25905,25906,25907,25911,25914,25916,25917,25920,25921,25922,25923,25924,25926,25927,25930,25931,25933,25934,25936,25938,25939,25940,25943,25944,25946,25948,25951,25952,25953,25956,25957,25959,25960,25961,25962,25965,25966,25967,25969,25971,25973,25974,25976,25977,25978,25979,25980,25981,25982,25983,25984,25985,25986,25987,25988,25989,25990,25992,25993,25994,25997,25998,25999,26002,26004,26005,26006,26008,26010,26013,26014,26016,26018,26019,26022,26024,26026,26028,26030,26033,26034,26035,26036,26037,26038,26039,26040,26042,26043,26046,26047,26048,26050,26055,26056,26057,26058,26061,26064,26065,26067,26068,26069,26072,26073,26074,26075,26076,26077,26078,26079,26081,26083,26084,26090,26091,26098,26099,26100,26101,26104,26105,26107,26108,26109,26110,26111,26113,26116,26117,26119,26120,26121,26123,26125,26128,26129,26130,26134,26135,26136,26138,26139,26140,26142,26145,26146,26147,26148,26150,26153,26154,26155,26156,26158,26160,26162,26163,26167,26168,26169,26170,26171,26173,26175,26176,26178,26180,26181,26182,26183,26184,26185,26186,26189,26190,26192,26193,26200,26201,26203,26204,26205,26206,26208,26210,26211,26213,26215,26217,26218,26219,26220,26221,26225,26226,26227,26229,26232,26233,26235,26236,26237,26239,26240,26241,26243,26245,26246,26248,26249,26250,26251,26253,26254,26255,26256,26258,26259,26260,26261,26264,26265,26266,26267,26268,26270,26271,26272,26273,26274,26275,26276,26277,26278,26281,26282,26283,26284,26285,26287,26288,26289,26290,26291,26293,26294,26295,26296,26298,26299,26300,26301,26303,26304,26305,26306,26307,26308,26309,26310,26311,26312,26313,26314,26315,26316,26317,26318,26319,26320,26321,26322,26323,26324,26325,26326,26327,26328,26330,26334,26335,26336,26337,26338,26339,26340,26341,26343,26344,26346,26347,26348,26349,26350,26351,26353,26357,26358,26360,26362,26363,26365,26369,26370,26371,26372,26373,26374,26375,26380,26382,26383,26385,26386,26387,26390,26392,26393,26394,26396,26398,26400,26401,26402,26403,26404,26405,26407,26409,26414,26416,26418,26419,26422,26423,26424,26425,26427,26428,26430,26431,26433,26436,26437,26439,26442,26443,26445,26450,26452,26453,26455,26456,26457,26458,26459,26461,26466,26467,26468,26470,26471,26475,26476,26478,26481,26484,26486,26488,26489,26490,26491,26493,26496,26498,26499,26501,26502,26504,26506,26508,26509,26510,26511,26513,26514,26515,26516,26518,26521,26523,26527,26528,26529,26532,26534,26537,26540,26542,26545,26546,26548,26553,26554,26555,26556,26557,26558,26559,26560,26562,26565,26566,26567,26568,26569,26570,26571,26572,26573,26574,26581,26582,26583,26587,26591,26593,26595,26596,26598,26599,26600,26602,26603,26605,26606,26610,26613,26614,26615,26616,26617,26618,26619,26620,26622,26625,26626,26627,26628,26630,26637,26640,26642,26644,26645,26648,26649,26650,26651,26652,26654,26655,26656,26658,26659,26660,26661,26662,26663,26664,26667,26668,26669,26670,26671,26672,26673,26676,26677,26678,26682,26683,26687,26695,26699,26701,26703,26706,26710,26711,26712,26713,26714,26715,26716,26717,26718,26719,26730,26732,26733,26734,26735,26736,26737,26738,26739,26741,26744,26745,26746,26747,26748,26749,26750,26751,26752,26754,26756,26759,26760,26761,26762,26763,26764,26765,26766,26768,26769,26770,26772,26773,26774,26776,26777,26778,26779,26780,26781,26782,26783,26784,26785,26787,26788,26789,26793,26794,26795,26796,26798,26801,26802,26804,26806,26807,26808,26809,26810,26811,26812,26813,26814,26815,26817,26819,26820,26821,26822,26823,26824,26826,26828,26830,26831,26832,26833,26835,26836,26838,26839,26841,26843,26844,26845,26846,26847,26849,26850,26852,26853,26854,26855,26856,26857,26858,26859,26860,26861,26863,26866,26867,26868,26870,26871,26872,26875,26877,26878,26879,26880,26882,26883,26884,26886,26887,26888,26889,26890,26892,26895,26897,26899,26900,26901,26902,26903,26904,26905,26906,26907,26908,26909,26910,26913,26914,26915,26917,26918,26919,26920,26921,26922,26923,26924,26926,26927,26929,26930,26931,26933,26934,26935,26936,26938,26939,26940,26942,26944,26945,26947,26948,26949,26950,26951,26952,26953,26954,26955,26956,26957,26958,26959,26960,26961,26962,26963,26965,26966,26968,26969,26971,26972,26975,26977,26978,26980,26981,26983,26984,26985,26986,26988,26989,26991,26992,26994,26995,26996,26997,26998,27002,27003,27005,27006,27007,27009,27011,27013,27018,27019,27020,27022,27023,27024,27025,27026,27027,27030,27031,27033,27034,27037,27038,27039,27040,27041,27042,27043,27044,27045,27046,27049,27050,27052,27054,27055,27056,27058,27059,27061,27062,27064,27065,27066,27068,27069,27070,27071,27072,27074,27075,27076,27077,27078,27079,27080,27081,27083,27085,27087,27089,27090,27091,27093,27094,27095,27096,27097,27098,27100,27101,27102,27105,27106,27107,27108,27109,27110,27111,27112,27113,27114,27115,27116,27118,27119,27120,27121,27123,27124,27125,27126,27127,27128,27129,27130,27131,27132,27134,27136,27137,27138,27139,27140,27141,27142,27143,27144,27145,27147,27148,27149,27150,27151,27152,27153,27154,27155,27156,27157,27158,27161,27162,27163,27164,27165,27166,27168,27170,27171,27172,27173,27174,27175,27177,27179,27180,27181,27182,27184,27186,27187,27188,27190,27191,27192,27193,27194,27195,27196,27199,27200,27201,27202,27203,27205,27206,27208,27209,27210,27211,27212,27213,27214,27215,27217,27218,27219,27220,27221,27222,27223,27226,27228,27229,27230,27231,27232,27234,27235,27236,27238,27239,27240,27241,27242,27243,27244,27245,27246,27247,27248,27250,27251,27252,27253,27254,27255,27256,27258,27259,27261,27262,27263,27265,27266,27267,27269,27270,27271,27272,27273,27274,27275,27276,27277,27279,27282,27283,27284,27285,27286,27288,27289,27290,27291,27292,27293,27294,27295,27297,27298,27299,27300,27301,27302,27303,27304,27306,27309,27310,27311,27312,27313,27314,27315,27316,27317,27318,27319,27320,27321,27322,27323,27324,27325,27326,27327,27328,27329,27330,27331,27332,27333,27334,27335,27336,27337,27338,27339,27340,27341,27342,27343,27344,27345,27346,27347,27348,27349,27350,27351,27352,27353,27354,27355,27356,27357,27358,27359,27360,27361,27362,27363,27364,27365,27366,27367,27368,27369,27370,27371,27372,27373,27374,27375,27376,27377,27378,27379,27380,27381,27382,27383,27384,27385,27386,27387,27388,27389,27390,27391,27392,27393,27394,27395,27396,27397,27398,27399,27400,27401,27402,27403,27404,27405,27406,27407,27408,27409,27410,27411,27412,27413,27414,27415,27416,27417,27418,27419,27420,27421,27422,27423,27429,27430,27432,27433,27434,27435,27436,27437,27438,27439,27440,27441,27443,27444,27445,27446,27448,27451,27452,27453,27455,27456,27457,27458,27460,27461,27464,27466,27467,27469,27470,27471,27472,27473,27474,27475,27476,27477,27478,27479,27480,27482,27483,27484,27485,27486,27487,27488,27489,27496,27497,27499,27500,27501,27502,27503,27504,27505,27506,27507,27508,27509,27510,27511,27512,27514,27517,27518,27519,27520,27525,27528,27532,27534,27535,27536,27537,27540,27541,27543,27544,27545,27548,27549,27550,27551,27552,27554,27555,27556,27557,27558,27559,27560,27561,27563,27564,27565,27566,27567,27568,27569,27570,27574,27576,27577,27578,27579,27580,27581,27582,27584,27587,27588,27590,27591,27592,27593,27594,27596,27598,27600,27601,27608,27610,27612,27613,27614,27615,27616,27618,27619,27620,27621,27622,27623,27624,27625,27628,27629,27630,27632,27633,27634,27636,27638,27639,27640,27642,27643,27644,27646,27647,27648,27649,27650,27651,27652,27656,27657,27658,27659,27660,27662,27666,27671,27676,27677,27678,27680,27683,27685,27691,27692,27693,27697,27699,27702,27703,27705,27706,27707,27708,27710,27711,27715,27716,27717,27720,27723,27724,27725,27726,27727,27729,27730,27731,27734,27736,27737,27738,27746,27747,27749,27750,27751,27755,27756,27757,27758,27759,27761,27763,27765,27767,27768,27770,27771,27772,27775,27776,27780,27783,27786,27787,27789,27790,27793,27794,27797,27798,27799,27800,27802,27804,27805,27806,27808,27810,27816,27820,27823,27824,27828,27829,27830,27831,27834,27840,27841,27842,27843,27846,27847,27848,27851,27853,27854,27855,27857,27858,27864,27865,27866,27868,27869,27871,27876,27878,27879,27881,27884,27885,27890,27892,27897,27903,27904,27906,27907,27909,27910,27912,27913,27914,27917,27919,27920,27921,27923,27924,27925,27926,27928,27932,27933,27935,27936,27937,27938,27939,27940,27942,27944,27945,27948,27949,27951,27952,27956,27958,27959,27960,27962,27967,27968,27970,27972,27977,27980,27984,27989,27990,27991,27992,27995,27997,27999,28001,28002,28004,28005,28007,28008,28011,28012,28013,28016,28017,28018,28019,28021,28022,28025,28026,28027,28029,28030,28031,28032,28033,28035,28036,28038,28039,28042,28043,28045,28047,28048,28050,28054,28055,28056,28057,28058,28060,28066,28069,28076,28077,28080,28081,28083,28084,28086,28087,28089,28090,28091,28092,28093,28094,28097,28098,28099,28104,28105,28106,28109,28110,28111,28112,28114,28115,28116,28117,28119,28122,28123,28124,28127,28130,28131,28133,28135,28136,28137,28138,28141,28143,28144,28146,28148,28149,28150,28152,28154,28157,28158,28159,28160,28161,28162,28163,28164,28166,28167,28168,28169,28171,28175,28178,28179,28181,28184,28185,28187,28188,28190,28191,28194,28198,28199,28200,28202,28204,28206,28208,28209,28211,28213,28214,28215,28217,28219,28220,28221,28222,28223,28224,28225,28226,28229,28230,28231,28232,28233,28234,28235,28236,28239,28240,28241,28242,28245,28247,28249,28250,28252,28253,28254,28256,28257,28258,28259,28260,28261,28262,28263,28264,28265,28266,28268,28269,28271,28272,28273,28274,28275,28276,28277,28278,28279,28280,28281,28282,28283,28284,28285,28288,28289,28290,28292,28295,28296,28298,28299,28300,28301,28302,28305,28306,28307,28308,28309,28310,28311,28313,28314,28315,28317,28318,28320,28321,28323,28324,28326,28328,28329,28331,28332,28333,28334,28336,28339,28341,28344,28345,28348,28350,28351,28352,28355,28356,28357,28358,28360,28361,28362,28364,28365,28366,28368,28370,28374,28376,28377,28379,28380,28381,28387,28391,28394,28395,28396,28397,28398,28399,28400,28401,28402,28403,28405,28406,28407,28408,28410,28411,28412,28413,28414,28415,28416,28417,28419,28420,28421,28423,28424,28426,28427,28428,28429,28430,28432,28433,28434,28438,28439,28440,28441,28442,28443,28444,28445,28446,28447,28449,28450,28451,28453,28454,28455,28456,28460,28462,28464,28466,28468,28469,28471,28472,28473,28474,28475,28476,28477,28479,28480,28481,28482,28483,28484,28485,28488,28489,28490,28492,28494,28495,28496,28497,28498,28499,28500,28501,28502,28503,28505,28506,28507,28509,28511,28512,28513,28515,28516,28517,28519,28520,28521,28522,28523,28524,28527,28528,28529,28531,28533,28534,28535,28537,28539,28541,28542,28543,28544,28545,28546,28547,28549,28550,28551,28554,28555,28559,28560,28561,28562,28563,28564,28565,28566,28567,28568,28569,28570,28571,28573,28574,28575,28576,28578,28579,28580,28581,28582,28584,28585,28586,28587,28588,28589,28590,28591,28592,28593,28594,28596,28597,28599,28600,28602,28603,28604,28605,28606,28607,28609,28611,28612,28613,28614,28615,28616,28618,28619,28620,28621,28622,28623,28624,28627,28628,28629,28630,28631,28632,28633,28634,28635,28636,28637,28639,28642,28643,28644,28645,28646,28647,28648,28649,28650,28651,28652,28653,28656,28657,28658,28659,28660,28661,28662,28663,28664,28665,28666,28667,28668,28669,28670,28671,28672,28673,28674,28675,28676,28677,28678,28679,28680,28681,28682,28683,28684,28685,28686,28687,28688,28690,28691,28692,28693,28694,28695,28696,28697,28700,28701,28702,28703,28704,28705,28706,28708,28709,28710,28711,28712,28713,28714,28715,28716,28717,28718,28719,28720,28721,28722,28723,28724,28726,28727,28728,28730,28731,28732,28733,28734,28735,28736,28737,28738,28739,28740,28741,28742,28743,28744,28745,28746,28747,28749,28750,28752,28753,28754,28755,28756,28757,28758,28759,28760,28761,28762,28763,28764,28765,28767,28768,28769,28770,28771,28772,28773,28774,28775,28776,28777,28778,28782,28785,28786,28787,28788,28791,28793,28794,28795,28797,28801,28802,28803,28804,28806,28807,28808,28811,28812,28813,28815,28816,28817,28819,28823,28824,28826,28827,28830,28831,28832,28833,28834,28835,28836,28837,28838,28839,28840,28841,28842,28848,28850,28852,28853,28854,28858,28862,28863,28868,28869,28870,28871,28873,28875,28876,28877,28878,28879,28880,28881,28882,28883,28884,28885,28886,28887,28890,28892,28893,28894,28896,28897,28898,28899,28901,28906,28910,28912,28913,28914,28915,28916,28917,28918,28920,28922,28923,28924,28926,28927,28928,28929,28930,28931,28932,28933,28934,28935,28936,28939,28940,28941,28942,28943,28945,28946,28948,28951,28955,28956,28957,28958,28959,28960,28961,28962,28963,28964,28965,28967,28968,28969,28970,28971,28972,28973,28974,28978,28979,28980,28981,28983,28984,28985,28986,28987,28988,28989,28990,28991,28992,28993,28994,28995,28996,28998,28999,29000,29001,29003,29005,29007,29008,29009,29010,29011,29012,29013,29014,29015,29016,29017,29018,29019,29021,29023,29024,29025,29026,29027,29029,29033,29034,29035,29036,29037,29039,29040,29041,29044,29045,29046,29047,29049,29051,29052,29054,29055,29056,29057,29058,29059,29061,29062,29063,29064,29065,29067,29068,29069,29070,29072,29073,29074,29075,29077,29078,29079,29082,29083,29084,29085,29086,29089,29090,29091,29092,29093,29094,29095,29097,29098,29099,29101,29102,29103,29104,29105,29106,29108,29110,29111,29112,29114,29115,29116,29117,29118,29119,29120,29121,29122,29124,29125,29126,29127,29128,29129,29130,29131,29132,29133,29135,29136,29137,29138,29139,29142,29143,29144,29145,29146,29147,29148,29149,29150,29151,29153,29154,29155,29156,29158,29160,29161,29162,29163,29164,29165,29167,29168,29169,29170,29171,29172,29173,29174,29175,29176,29178,29179,29180,29181,29182,29183,29184,29185,29186,29187,29188,29189,29191,29192,29193,29194,29195,29196,29197,29198,29199,29200,29201,29202,29203,29204,29205,29206,29207,29208,29209,29210,29211,29212,29214,29215,29216,29217,29218,29219,29220,29221,29222,29223,29225,29227,29229,29230,29231,29234,29235,29236,29242,29244,29246,29248,29249,29250,29251,29252,29253,29254,29257,29258,29259,29262,29263,29264,29265,29267,29268,29269,29271,29272,29274,29276,29278,29280,29283,29284,29285,29288,29290,29291,29292,29293,29296,29297,29299,29300,29302,29303,29304,29307,29308,29309,29314,29315,29317,29318,29319,29320,29321,29324,29326,29328,29329,29331,29332,29333,29334,29335,29336,29337,29338,29339,29340,29341,29342,29344,29345,29346,29347,29348,29349,29350,29351,29352,29353,29354,29355,29358,29361,29362,29363,29365,29370,29371,29372,29373,29374,29375,29376,29381,29382,29383,29385,29386,29387,29388,29391,29393,29395,29396,29397,29398,29400,29402,29403,58566,58567,58568,58569,58570,58571,58572,58573,58574,58575,58576,58577,58578,58579,58580,58581,58582,58583,58584,58585,58586,58587,58588,58589,58590,58591,58592,58593,58594,58595,58596,58597,58598,58599,58600,58601,58602,58603,58604,58605,58606,58607,58608,58609,58610,58611,58612,58613,58614,58615,58616,58617,58618,58619,58620,58621,58622,58623,58624,58625,58626,58627,58628,58629,58630,58631,58632,58633,58634,58635,58636,58637,58638,58639,58640,58641,58642,58643,58644,58645,58646,58647,58648,58649,58650,58651,58652,58653,58654,58655,58656,58657,58658,58659,58660,58661,12288,12289,12290,183,713,711,168,12291,12293,8212,65374,8214,8230,8216,8217,8220,8221,12308,12309,12296,12297,12298,12299,12300,12301,12302,12303,12310,12311,12304,12305,177,215,247,8758,8743,8744,8721,8719,8746,8745,8712,8759,8730,8869,8741,8736,8978,8857,8747,8750,8801,8780,8776,8765,8733,8800,8814,8815,8804,8805,8734,8757,8756,9794,9792,176,8242,8243,8451,65284,164,65504,65505,8240,167,8470,9734,9733,9675,9679,9678,9671,9670,9633,9632,9651,9650,8251,8594,8592,8593,8595,12307,58662,58663,58664,58665,58666,58667,58668,58669,58670,58671,58672,58673,58674,58675,58676,58677,58678,58679,58680,58681,58682,58683,58684,58685,58686,58687,58688,58689,58690,58691,58692,58693,58694,58695,58696,58697,58698,58699,58700,58701,58702,58703,58704,58705,58706,58707,58708,58709,58710,58711,58712,58713,58714,58715,58716,58717,58718,58719,58720,58721,58722,58723,58724,58725,58726,58727,58728,58729,58730,58731,58732,58733,58734,58735,58736,58737,58738,58739,58740,58741,58742,58743,58744,58745,58746,58747,58748,58749,58750,58751,58752,58753,58754,58755,58756,58757,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,59238,59239,59240,59241,59242,59243,9352,9353,9354,9355,9356,9357,9358,9359,9360,9361,9362,9363,9364,9365,9366,9367,9368,9369,9370,9371,9332,9333,9334,9335,9336,9337,9338,9339,9340,9341,9342,9343,9344,9345,9346,9347,9348,9349,9350,9351,9312,9313,9314,9315,9316,9317,9318,9319,9320,9321,8364,59245,12832,12833,12834,12835,12836,12837,12838,12839,12840,12841,59246,59247,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,8554,8555,59248,59249,58758,58759,58760,58761,58762,58763,58764,58765,58766,58767,58768,58769,58770,58771,58772,58773,58774,58775,58776,58777,58778,58779,58780,58781,58782,58783,58784,58785,58786,58787,58788,58789,58790,58791,58792,58793,58794,58795,58796,58797,58798,58799,58800,58801,58802,58803,58804,58805,58806,58807,58808,58809,58810,58811,58812,58813,58814,58815,58816,58817,58818,58819,58820,58821,58822,58823,58824,58825,58826,58827,58828,58829,58830,58831,58832,58833,58834,58835,58836,58837,58838,58839,58840,58841,58842,58843,58844,58845,58846,58847,58848,58849,58850,58851,58852,12288,65281,65282,65283,65509,65285,65286,65287,65288,65289,65290,65291,65292,65293,65294,65295,65296,65297,65298,65299,65300,65301,65302,65303,65304,65305,65306,65307,65308,65309,65310,65311,65312,65313,65314,65315,65316,65317,65318,65319,65320,65321,65322,65323,65324,65325,65326,65327,65328,65329,65330,65331,65332,65333,65334,65335,65336,65337,65338,65339,65340,65341,65342,65343,65344,65345,65346,65347,65348,65349,65350,65351,65352,65353,65354,65355,65356,65357,65358,65359,65360,65361,65362,65363,65364,65365,65366,65367,65368,65369,65370,65371,65372,65373,65507,58854,58855,58856,58857,58858,58859,58860,58861,58862,58863,58864,58865,58866,58867,58868,58869,58870,58871,58872,58873,58874,58875,58876,58877,58878,58879,58880,58881,58882,58883,58884,58885,58886,58887,58888,58889,58890,58891,58892,58893,58894,58895,58896,58897,58898,58899,58900,58901,58902,58903,58904,58905,58906,58907,58908,58909,58910,58911,58912,58913,58914,58915,58916,58917,58918,58919,58920,58921,58922,58923,58924,58925,58926,58927,58928,58929,58930,58931,58932,58933,58934,58935,58936,58937,58938,58939,58940,58941,58942,58943,58944,58945,58946,58947,58948,58949,12353,12354,12355,12356,12357,12358,12359,12360,12361,12362,12363,12364,12365,12366,12367,12368,12369,12370,12371,12372,12373,12374,12375,12376,12377,12378,12379,12380,12381,12382,12383,12384,12385,12386,12387,12388,12389,12390,12391,12392,12393,12394,12395,12396,12397,12398,12399,12400,12401,12402,12403,12404,12405,12406,12407,12408,12409,12410,12411,12412,12413,12414,12415,12416,12417,12418,12419,12420,12421,12422,12423,12424,12425,12426,12427,12428,12429,12430,12431,12432,12433,12434,12435,59250,59251,59252,59253,59254,59255,59256,59257,59258,59259,59260,58950,58951,58952,58953,58954,58955,58956,58957,58958,58959,58960,58961,58962,58963,58964,58965,58966,58967,58968,58969,58970,58971,58972,58973,58974,58975,58976,58977,58978,58979,58980,58981,58982,58983,58984,58985,58986,58987,58988,58989,58990,58991,58992,58993,58994,58995,58996,58997,58998,58999,59000,59001,59002,59003,59004,59005,59006,59007,59008,59009,59010,59011,59012,59013,59014,59015,59016,59017,59018,59019,59020,59021,59022,59023,59024,59025,59026,59027,59028,59029,59030,59031,59032,59033,59034,59035,59036,59037,59038,59039,59040,59041,59042,59043,59044,59045,12449,12450,12451,12452,12453,12454,12455,12456,12457,12458,12459,12460,12461,12462,12463,12464,12465,12466,12467,12468,12469,12470,12471,12472,12473,12474,12475,12476,12477,12478,12479,12480,12481,12482,12483,12484,12485,12486,12487,12488,12489,12490,12491,12492,12493,12494,12495,12496,12497,12498,12499,12500,12501,12502,12503,12504,12505,12506,12507,12508,12509,12510,12511,12512,12513,12514,12515,12516,12517,12518,12519,12520,12521,12522,12523,12524,12525,12526,12527,12528,12529,12530,12531,12532,12533,12534,59261,59262,59263,59264,59265,59266,59267,59268,59046,59047,59048,59049,59050,59051,59052,59053,59054,59055,59056,59057,59058,59059,59060,59061,59062,59063,59064,59065,59066,59067,59068,59069,59070,59071,59072,59073,59074,59075,59076,59077,59078,59079,59080,59081,59082,59083,59084,59085,59086,59087,59088,59089,59090,59091,59092,59093,59094,59095,59096,59097,59098,59099,59100,59101,59102,59103,59104,59105,59106,59107,59108,59109,59110,59111,59112,59113,59114,59115,59116,59117,59118,59119,59120,59121,59122,59123,59124,59125,59126,59127,59128,59129,59130,59131,59132,59133,59134,59135,59136,59137,59138,59139,59140,59141,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,59269,59270,59271,59272,59273,59274,59275,59276,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,963,964,965,966,967,968,969,59277,59278,59279,59280,59281,59282,59283,65077,65078,65081,65082,65087,65088,65085,65086,65089,65090,65091,65092,59284,59285,65083,65084,65079,65080,65073,59286,65075,65076,59287,59288,59289,59290,59291,59292,59293,59294,59295,59142,59143,59144,59145,59146,59147,59148,59149,59150,59151,59152,59153,59154,59155,59156,59157,59158,59159,59160,59161,59162,59163,59164,59165,59166,59167,59168,59169,59170,59171,59172,59173,59174,59175,59176,59177,59178,59179,59180,59181,59182,59183,59184,59185,59186,59187,59188,59189,59190,59191,59192,59193,59194,59195,59196,59197,59198,59199,59200,59201,59202,59203,59204,59205,59206,59207,59208,59209,59210,59211,59212,59213,59214,59215,59216,59217,59218,59219,59220,59221,59222,59223,59224,59225,59226,59227,59228,59229,59230,59231,59232,59233,59234,59235,59236,59237,1040,1041,1042,1043,1044,1045,1025,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,59296,59297,59298,59299,59300,59301,59302,59303,59304,59305,59306,59307,59308,59309,59310,1072,1073,1074,1075,1076,1077,1105,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,59311,59312,59313,59314,59315,59316,59317,59318,59319,59320,59321,59322,59323,714,715,729,8211,8213,8229,8245,8453,8457,8598,8599,8600,8601,8725,8735,8739,8786,8806,8807,8895,9552,9553,9554,9555,9556,9557,9558,9559,9560,9561,9562,9563,9564,9565,9566,9567,9568,9569,9570,9571,9572,9573,9574,9575,9576,9577,9578,9579,9580,9581,9582,9583,9584,9585,9586,9587,9601,9602,9603,9604,9605,9606,9607,9608,9609,9610,9611,9612,9613,9614,9615,9619,9620,9621,9660,9661,9698,9699,9700,9701,9737,8853,12306,12317,12318,59324,59325,59326,59327,59328,59329,59330,59331,59332,59333,59334,257,225,462,224,275,233,283,232,299,237,464,236,333,243,466,242,363,250,468,249,470,472,474,476,252,234,593,7743,324,328,505,609,59337,59338,59339,59340,12549,12550,12551,12552,12553,12554,12555,12556,12557,12558,12559,12560,12561,12562,12563,12564,12565,12566,12567,12568,12569,12570,12571,12572,12573,12574,12575,12576,12577,12578,12579,12580,12581,12582,12583,12584,12585,59341,59342,59343,59344,59345,59346,59347,59348,59349,59350,59351,59352,59353,59354,59355,59356,59357,59358,59359,59360,59361,12321,12322,12323,12324,12325,12326,12327,12328,12329,12963,13198,13199,13212,13213,13214,13217,13252,13262,13265,13266,13269,65072,65506,65508,59362,8481,12849,59363,8208,59364,59365,59366,12540,12443,12444,12541,12542,12294,12445,12446,65097,65098,65099,65100,65101,65102,65103,65104,65105,65106,65108,65109,65110,65111,65113,65114,65115,65116,65117,65118,65119,65120,65121,65122,65123,65124,65125,65126,65128,65129,65130,65131,12350,12272,12273,12274,12275,12276,12277,12278,12279,12280,12281,12282,12283,12295,59380,59381,59382,59383,59384,59385,59386,59387,59388,59389,59390,59391,59392,9472,9473,9474,9475,9476,9477,9478,9479,9480,9481,9482,9483,9484,9485,9486,9487,9488,9489,9490,9491,9492,9493,9494,9495,9496,9497,9498,9499,9500,9501,9502,9503,9504,9505,9506,9507,9508,9509,9510,9511,9512,9513,9514,9515,9516,9517,9518,9519,9520,9521,9522,9523,9524,9525,9526,9527,9528,9529,9530,9531,9532,9533,9534,9535,9536,9537,9538,9539,9540,9541,9542,9543,9544,9545,9546,9547,59393,59394,59395,59396,59397,59398,59399,59400,59401,59402,59403,59404,59405,59406,59407,29404,29405,29407,29410,29411,29412,29413,29414,29415,29418,29419,29429,29430,29433,29437,29438,29439,29440,29442,29444,29445,29446,29447,29448,29449,29451,29452,29453,29455,29456,29457,29458,29460,29464,29465,29466,29471,29472,29475,29476,29478,29479,29480,29485,29487,29488,29490,29491,29493,29494,29498,29499,29500,29501,29504,29505,29506,29507,29508,29509,29510,29511,29512,29513,29514,29515,29516,29518,29519,29521,29523,29524,29525,29526,29528,29529,29530,29531,29532,29533,29534,29535,29537,29538,29539,29540,29541,29542,29543,29544,29545,29546,29547,29550,29552,29553,57344,57345,57346,57347,57348,57349,57350,57351,57352,57353,57354,57355,57356,57357,57358,57359,57360,57361,57362,57363,57364,57365,57366,57367,57368,57369,57370,57371,57372,57373,57374,57375,57376,57377,57378,57379,57380,57381,57382,57383,57384,57385,57386,57387,57388,57389,57390,57391,57392,57393,57394,57395,57396,57397,57398,57399,57400,57401,57402,57403,57404,57405,57406,57407,57408,57409,57410,57411,57412,57413,57414,57415,57416,57417,57418,57419,57420,57421,57422,57423,57424,57425,57426,57427,57428,57429,57430,57431,57432,57433,57434,57435,57436,57437,29554,29555,29556,29557,29558,29559,29560,29561,29562,29563,29564,29565,29567,29568,29569,29570,29571,29573,29574,29576,29578,29580,29581,29583,29584,29586,29587,29588,29589,29591,29592,29593,29594,29596,29597,29598,29600,29601,29603,29604,29605,29606,29607,29608,29610,29612,29613,29617,29620,29621,29622,29624,29625,29628,29629,29630,29631,29633,29635,29636,29637,29638,29639,29643,29644,29646,29650,29651,29652,29653,29654,29655,29656,29658,29659,29660,29661,29663,29665,29666,29667,29668,29670,29672,29674,29675,29676,29678,29679,29680,29681,29683,29684,29685,29686,29687,57438,57439,57440,57441,57442,57443,57444,57445,57446,57447,57448,57449,57450,57451,57452,57453,57454,57455,57456,57457,57458,57459,57460,57461,57462,57463,57464,57465,57466,57467,57468,57469,57470,57471,57472,57473,57474,57475,57476,57477,57478,57479,57480,57481,57482,57483,57484,57485,57486,57487,57488,57489,57490,57491,57492,57493,57494,57495,57496,57497,57498,57499,57500,57501,57502,57503,57504,57505,57506,57507,57508,57509,57510,57511,57512,57513,57514,57515,57516,57517,57518,57519,57520,57521,57522,57523,57524,57525,57526,57527,57528,57529,57530,57531,29688,29689,29690,29691,29692,29693,29694,29695,29696,29697,29698,29700,29703,29704,29707,29708,29709,29710,29713,29714,29715,29716,29717,29718,29719,29720,29721,29724,29725,29726,29727,29728,29729,29731,29732,29735,29737,29739,29741,29743,29745,29746,29751,29752,29753,29754,29755,29757,29758,29759,29760,29762,29763,29764,29765,29766,29767,29768,29769,29770,29771,29772,29773,29774,29775,29776,29777,29778,29779,29780,29782,29784,29789,29792,29793,29794,29795,29796,29797,29798,29799,29800,29801,29802,29803,29804,29806,29807,29809,29810,29811,29812,29813,29816,29817,29818,57532,57533,57534,57535,57536,57537,57538,57539,57540,57541,57542,57543,57544,57545,57546,57547,57548,57549,57550,57551,57552,57553,57554,57555,57556,57557,57558,57559,57560,57561,57562,57563,57564,57565,57566,57567,57568,57569,57570,57571,57572,57573,57574,57575,57576,57577,57578,57579,57580,57581,57582,57583,57584,57585,57586,57587,57588,57589,57590,57591,57592,57593,57594,57595,57596,57597,57598,57599,57600,57601,57602,57603,57604,57605,57606,57607,57608,57609,57610,57611,57612,57613,57614,57615,57616,57617,57618,57619,57620,57621,57622,57623,57624,57625,29819,29820,29821,29823,29826,29828,29829,29830,29832,29833,29834,29836,29837,29839,29841,29842,29843,29844,29845,29846,29847,29848,29849,29850,29851,29853,29855,29856,29857,29858,29859,29860,29861,29862,29866,29867,29868,29869,29870,29871,29872,29873,29874,29875,29876,29877,29878,29879,29880,29881,29883,29884,29885,29886,29887,29888,29889,29890,29891,29892,29893,29894,29895,29896,29897,29898,29899,29900,29901,29902,29903,29904,29905,29907,29908,29909,29910,29911,29912,29913,29914,29915,29917,29919,29921,29925,29927,29928,29929,29930,29931,29932,29933,29936,29937,29938,57626,57627,57628,57629,57630,57631,57632,57633,57634,57635,57636,57637,57638,57639,57640,57641,57642,57643,57644,57645,57646,57647,57648,57649,57650,57651,57652,57653,57654,57655,57656,57657,57658,57659,57660,57661,57662,57663,57664,57665,57666,57667,57668,57669,57670,57671,57672,57673,57674,57675,57676,57677,57678,57679,57680,57681,57682,57683,57684,57685,57686,57687,57688,57689,57690,57691,57692,57693,57694,57695,57696,57697,57698,57699,57700,57701,57702,57703,57704,57705,57706,57707,57708,57709,57710,57711,57712,57713,57714,57715,57716,57717,57718,57719,29939,29941,29944,29945,29946,29947,29948,29949,29950,29952,29953,29954,29955,29957,29958,29959,29960,29961,29962,29963,29964,29966,29968,29970,29972,29973,29974,29975,29979,29981,29982,29984,29985,29986,29987,29988,29990,29991,29994,29998,30004,30006,30009,30012,30013,30015,30017,30018,30019,30020,30022,30023,30025,30026,30029,30032,30033,30034,30035,30037,30038,30039,30040,30045,30046,30047,30048,30049,30050,30051,30052,30055,30056,30057,30059,30060,30061,30062,30063,30064,30065,30067,30069,30070,30071,30074,30075,30076,30077,30078,30080,30081,30082,30084,30085,30087,57720,57721,57722,57723,57724,57725,57726,57727,57728,57729,57730,57731,57732,57733,57734,57735,57736,57737,57738,57739,57740,57741,57742,57743,57744,57745,57746,57747,57748,57749,57750,57751,57752,57753,57754,57755,57756,57757,57758,57759,57760,57761,57762,57763,57764,57765,57766,57767,57768,57769,57770,57771,57772,57773,57774,57775,57776,57777,57778,57779,57780,57781,57782,57783,57784,57785,57786,57787,57788,57789,57790,57791,57792,57793,57794,57795,57796,57797,57798,57799,57800,57801,57802,57803,57804,57805,57806,57807,57808,57809,57810,57811,57812,57813,30088,30089,30090,30092,30093,30094,30096,30099,30101,30104,30107,30108,30110,30114,30118,30119,30120,30121,30122,30125,30134,30135,30138,30139,30143,30144,30145,30150,30155,30156,30158,30159,30160,30161,30163,30167,30169,30170,30172,30173,30175,30176,30177,30181,30185,30188,30189,30190,30191,30194,30195,30197,30198,30199,30200,30202,30203,30205,30206,30210,30212,30214,30215,30216,30217,30219,30221,30222,30223,30225,30226,30227,30228,30230,30234,30236,30237,30238,30241,30243,30247,30248,30252,30254,30255,30257,30258,30262,30263,30265,30266,30267,30269,30273,30274,30276,57814,57815,57816,57817,57818,57819,57820,57821,57822,57823,57824,57825,57826,57827,57828,57829,57830,57831,57832,57833,57834,57835,57836,57837,57838,57839,57840,57841,57842,57843,57844,57845,57846,57847,57848,57849,57850,57851,57852,57853,57854,57855,57856,57857,57858,57859,57860,57861,57862,57863,57864,57865,57866,57867,57868,57869,57870,57871,57872,57873,57874,57875,57876,57877,57878,57879,57880,57881,57882,57883,57884,57885,57886,57887,57888,57889,57890,57891,57892,57893,57894,57895,57896,57897,57898,57899,57900,57901,57902,57903,57904,57905,57906,57907,30277,30278,30279,30280,30281,30282,30283,30286,30287,30288,30289,30290,30291,30293,30295,30296,30297,30298,30299,30301,30303,30304,30305,30306,30308,30309,30310,30311,30312,30313,30314,30316,30317,30318,30320,30321,30322,30323,30324,30325,30326,30327,30329,30330,30332,30335,30336,30337,30339,30341,30345,30346,30348,30349,30351,30352,30354,30356,30357,30359,30360,30362,30363,30364,30365,30366,30367,30368,30369,30370,30371,30373,30374,30375,30376,30377,30378,30379,30380,30381,30383,30384,30387,30389,30390,30391,30392,30393,30394,30395,30396,30397,30398,30400,30401,30403,21834,38463,22467,25384,21710,21769,21696,30353,30284,34108,30702,33406,30861,29233,38552,38797,27688,23433,20474,25353,26263,23736,33018,26696,32942,26114,30414,20985,25942,29100,32753,34948,20658,22885,25034,28595,33453,25420,25170,21485,21543,31494,20843,30116,24052,25300,36299,38774,25226,32793,22365,38712,32610,29240,30333,26575,30334,25670,20336,36133,25308,31255,26001,29677,25644,25203,33324,39041,26495,29256,25198,25292,20276,29923,21322,21150,32458,37030,24110,26758,27036,33152,32465,26834,30917,34444,38225,20621,35876,33502,32990,21253,35090,21093,30404,30407,30409,30411,30412,30419,30421,30425,30426,30428,30429,30430,30432,30433,30434,30435,30436,30438,30439,30440,30441,30442,30443,30444,30445,30448,30451,30453,30454,30455,30458,30459,30461,30463,30464,30466,30467,30469,30470,30474,30476,30478,30479,30480,30481,30482,30483,30484,30485,30486,30487,30488,30491,30492,30493,30494,30497,30499,30500,30501,30503,30506,30507,30508,30510,30512,30513,30514,30515,30516,30521,30523,30525,30526,30527,30530,30532,30533,30534,30536,30537,30538,30539,30540,30541,30542,30543,30546,30547,30548,30549,30550,30551,30552,30553,30556,34180,38649,20445,22561,39281,23453,25265,25253,26292,35961,40077,29190,26479,30865,24754,21329,21271,36744,32972,36125,38049,20493,29384,22791,24811,28953,34987,22868,33519,26412,31528,23849,32503,29997,27893,36454,36856,36924,40763,27604,37145,31508,24444,30887,34006,34109,27605,27609,27606,24065,24199,30201,38381,25949,24330,24517,36767,22721,33218,36991,38491,38829,36793,32534,36140,25153,20415,21464,21342,36776,36777,36779,36941,26631,24426,33176,34920,40150,24971,21035,30250,24428,25996,28626,28392,23486,25672,20853,20912,26564,19993,31177,39292,28851,30557,30558,30559,30560,30564,30567,30569,30570,30573,30574,30575,30576,30577,30578,30579,30580,30581,30582,30583,30584,30586,30587,30588,30593,30594,30595,30598,30599,30600,30601,30602,30603,30607,30608,30611,30612,30613,30614,30615,30616,30617,30618,30619,30620,30621,30622,30625,30627,30628,30630,30632,30635,30637,30638,30639,30641,30642,30644,30646,30647,30648,30649,30650,30652,30654,30656,30657,30658,30659,30660,30661,30662,30663,30664,30665,30666,30667,30668,30670,30671,30672,30673,30674,30675,30676,30677,30678,30680,30681,30682,30685,30686,30687,30688,30689,30692,30149,24182,29627,33760,25773,25320,38069,27874,21338,21187,25615,38082,31636,20271,24091,33334,33046,33162,28196,27850,39539,25429,21340,21754,34917,22496,19981,24067,27493,31807,37096,24598,25830,29468,35009,26448,25165,36130,30572,36393,37319,24425,33756,34081,39184,21442,34453,27531,24813,24808,28799,33485,33329,20179,27815,34255,25805,31961,27133,26361,33609,21397,31574,20391,20876,27979,23618,36461,25554,21449,33580,33590,26597,30900,25661,23519,23700,24046,35815,25286,26612,35962,25600,25530,34633,39307,35863,32544,38130,20135,38416,39076,26124,29462,30694,30696,30698,30703,30704,30705,30706,30708,30709,30711,30713,30714,30715,30716,30723,30724,30725,30726,30727,30728,30730,30731,30734,30735,30736,30739,30741,30745,30747,30750,30752,30753,30754,30756,30760,30762,30763,30766,30767,30769,30770,30771,30773,30774,30781,30783,30785,30786,30787,30788,30790,30792,30793,30794,30795,30797,30799,30801,30803,30804,30808,30809,30810,30811,30812,30814,30815,30816,30817,30818,30819,30820,30821,30822,30823,30824,30825,30831,30832,30833,30834,30835,30836,30837,30838,30840,30841,30842,30843,30845,30846,30847,30848,30849,30850,30851,22330,23581,24120,38271,20607,32928,21378,25950,30021,21809,20513,36229,25220,38046,26397,22066,28526,24034,21557,28818,36710,25199,25764,25507,24443,28552,37108,33251,36784,23576,26216,24561,27785,38472,36225,34924,25745,31216,22478,27225,25104,21576,20056,31243,24809,28548,35802,25215,36894,39563,31204,21507,30196,25345,21273,27744,36831,24347,39536,32827,40831,20360,23610,36196,32709,26021,28861,20805,20914,34411,23815,23456,25277,37228,30068,36364,31264,24833,31609,20167,32504,30597,19985,33261,21021,20986,27249,21416,36487,38148,38607,28353,38500,26970,30852,30853,30854,30856,30858,30859,30863,30864,30866,30868,30869,30870,30873,30877,30878,30880,30882,30884,30886,30888,30889,30890,30891,30892,30893,30894,30895,30901,30902,30903,30904,30906,30907,30908,30909,30911,30912,30914,30915,30916,30918,30919,30920,30924,30925,30926,30927,30929,30930,30931,30934,30935,30936,30938,30939,30940,30941,30942,30943,30944,30945,30946,30947,30948,30949,30950,30951,30953,30954,30955,30957,30958,30959,30960,30961,30963,30965,30966,30968,30969,30971,30972,30973,30974,30975,30976,30978,30979,30980,30982,30983,30984,30985,30986,30987,30988,30784,20648,30679,25616,35302,22788,25571,24029,31359,26941,20256,33337,21912,20018,30126,31383,24162,24202,38383,21019,21561,28810,25462,38180,22402,26149,26943,37255,21767,28147,32431,34850,25139,32496,30133,33576,30913,38604,36766,24904,29943,35789,27492,21050,36176,27425,32874,33905,22257,21254,20174,19995,20945,31895,37259,31751,20419,36479,31713,31388,25703,23828,20652,33030,30209,31929,28140,32736,26449,23384,23544,30923,25774,25619,25514,25387,38169,25645,36798,31572,30249,25171,22823,21574,27513,20643,25140,24102,27526,20195,36151,34955,24453,36910,30989,30990,30991,30992,30993,30994,30996,30997,30998,30999,31000,31001,31002,31003,31004,31005,31007,31008,31009,31010,31011,31013,31014,31015,31016,31017,31018,31019,31020,31021,31022,31023,31024,31025,31026,31027,31029,31030,31031,31032,31033,31037,31039,31042,31043,31044,31045,31047,31050,31051,31052,31053,31054,31055,31056,31057,31058,31060,31061,31064,31065,31073,31075,31076,31078,31081,31082,31083,31084,31086,31088,31089,31090,31091,31092,31093,31094,31097,31099,31100,31101,31102,31103,31106,31107,31110,31111,31112,31113,31115,31116,31117,31118,31120,31121,31122,24608,32829,25285,20025,21333,37112,25528,32966,26086,27694,20294,24814,28129,35806,24377,34507,24403,25377,20826,33633,26723,20992,25443,36424,20498,23707,31095,23548,21040,31291,24764,36947,30423,24503,24471,30340,36460,28783,30331,31561,30634,20979,37011,22564,20302,28404,36842,25932,31515,29380,28068,32735,23265,25269,24213,22320,33922,31532,24093,24351,36882,32532,39072,25474,28359,30872,28857,20856,38747,22443,30005,20291,30008,24215,24806,22880,28096,27583,30857,21500,38613,20939,20993,25481,21514,38035,35843,36300,29241,30879,34678,36845,35853,21472,31123,31124,31125,31126,31127,31128,31129,31131,31132,31133,31134,31135,31136,31137,31138,31139,31140,31141,31142,31144,31145,31146,31147,31148,31149,31150,31151,31152,31153,31154,31156,31157,31158,31159,31160,31164,31167,31170,31172,31173,31175,31176,31178,31180,31182,31183,31184,31187,31188,31190,31191,31193,31194,31195,31196,31197,31198,31200,31201,31202,31205,31208,31210,31212,31214,31217,31218,31219,31220,31221,31222,31223,31225,31226,31228,31230,31231,31233,31236,31237,31239,31240,31241,31242,31244,31247,31248,31249,31250,31251,31253,31254,31256,31257,31259,31260,19969,30447,21486,38025,39030,40718,38189,23450,35746,20002,19996,20908,33891,25026,21160,26635,20375,24683,20923,27934,20828,25238,26007,38497,35910,36887,30168,37117,30563,27602,29322,29420,35835,22581,30585,36172,26460,38208,32922,24230,28193,22930,31471,30701,38203,27573,26029,32526,22534,20817,38431,23545,22697,21544,36466,25958,39039,22244,38045,30462,36929,25479,21702,22810,22842,22427,36530,26421,36346,33333,21057,24816,22549,34558,23784,40517,20420,39069,35769,23077,24694,21380,25212,36943,37122,39295,24681,32780,20799,32819,23572,39285,27953,20108,31261,31263,31265,31266,31268,31269,31270,31271,31272,31273,31274,31275,31276,31277,31278,31279,31280,31281,31282,31284,31285,31286,31288,31290,31294,31296,31297,31298,31299,31300,31301,31303,31304,31305,31306,31307,31308,31309,31310,31311,31312,31314,31315,31316,31317,31318,31320,31321,31322,31323,31324,31325,31326,31327,31328,31329,31330,31331,31332,31333,31334,31335,31336,31337,31338,31339,31340,31341,31342,31343,31345,31346,31347,31349,31355,31356,31357,31358,31362,31365,31367,31369,31370,31371,31372,31374,31375,31376,31379,31380,31385,31386,31387,31390,31393,31394,36144,21457,32602,31567,20240,20047,38400,27861,29648,34281,24070,30058,32763,27146,30718,38034,32321,20961,28902,21453,36820,33539,36137,29359,39277,27867,22346,33459,26041,32938,25151,38450,22952,20223,35775,32442,25918,33778,38750,21857,39134,32933,21290,35837,21536,32954,24223,27832,36153,33452,37210,21545,27675,20998,32439,22367,28954,27774,31881,22859,20221,24575,24868,31914,20016,23553,26539,34562,23792,38155,39118,30127,28925,36898,20911,32541,35773,22857,20964,20315,21542,22827,25975,32932,23413,25206,25282,36752,24133,27679,31526,20239,20440,26381,31395,31396,31399,31401,31402,31403,31406,31407,31408,31409,31410,31412,31413,31414,31415,31416,31417,31418,31419,31420,31421,31422,31424,31425,31426,31427,31428,31429,31430,31431,31432,31433,31434,31436,31437,31438,31439,31440,31441,31442,31443,31444,31445,31447,31448,31450,31451,31452,31453,31457,31458,31460,31463,31464,31465,31466,31467,31468,31470,31472,31473,31474,31475,31476,31477,31478,31479,31480,31483,31484,31486,31488,31489,31490,31493,31495,31497,31500,31501,31502,31504,31506,31507,31510,31511,31512,31514,31516,31517,31519,31521,31522,31523,31527,31529,31533,28014,28074,31119,34993,24343,29995,25242,36741,20463,37340,26023,33071,33105,24220,33104,36212,21103,35206,36171,22797,20613,20184,38428,29238,33145,36127,23500,35747,38468,22919,32538,21648,22134,22030,35813,25913,27010,38041,30422,28297,24178,29976,26438,26577,31487,32925,36214,24863,31174,25954,36195,20872,21018,38050,32568,32923,32434,23703,28207,26464,31705,30347,39640,33167,32660,31957,25630,38224,31295,21578,21733,27468,25601,25096,40509,33011,30105,21106,38761,33883,26684,34532,38401,38548,38124,20010,21508,32473,26681,36319,32789,26356,24218,32697,31535,31536,31538,31540,31541,31542,31543,31545,31547,31549,31551,31552,31553,31554,31555,31556,31558,31560,31562,31565,31566,31571,31573,31575,31577,31580,31582,31583,31585,31587,31588,31589,31590,31591,31592,31593,31594,31595,31596,31597,31599,31600,31603,31604,31606,31608,31610,31612,31613,31615,31617,31618,31619,31620,31622,31623,31624,31625,31626,31627,31628,31630,31631,31633,31634,31635,31638,31640,31641,31642,31643,31646,31647,31648,31651,31652,31653,31662,31663,31664,31666,31667,31669,31670,31671,31673,31674,31675,31676,31677,31678,31679,31680,31682,31683,31684,22466,32831,26775,24037,25915,21151,24685,40858,20379,36524,20844,23467,24339,24041,27742,25329,36129,20849,38057,21246,27807,33503,29399,22434,26500,36141,22815,36764,33735,21653,31629,20272,27837,23396,22993,40723,21476,34506,39592,35895,32929,25925,39038,22266,38599,21038,29916,21072,23521,25346,35074,20054,25296,24618,26874,20851,23448,20896,35266,31649,39302,32592,24815,28748,36143,20809,24191,36891,29808,35268,22317,30789,24402,40863,38394,36712,39740,35809,30328,26690,26588,36330,36149,21053,36746,28378,26829,38149,37101,22269,26524,35065,36807,21704,31685,31688,31689,31690,31691,31693,31694,31695,31696,31698,31700,31701,31702,31703,31704,31707,31708,31710,31711,31712,31714,31715,31716,31719,31720,31721,31723,31724,31725,31727,31728,31730,31731,31732,31733,31734,31736,31737,31738,31739,31741,31743,31744,31745,31746,31747,31748,31749,31750,31752,31753,31754,31757,31758,31760,31761,31762,31763,31764,31765,31767,31768,31769,31770,31771,31772,31773,31774,31776,31777,31778,31779,31780,31781,31784,31785,31787,31788,31789,31790,31791,31792,31793,31794,31795,31796,31797,31798,31799,31801,31802,31803,31804,31805,31806,31810,39608,23401,28023,27686,20133,23475,39559,37219,25000,37039,38889,21547,28085,23506,20989,21898,32597,32752,25788,25421,26097,25022,24717,28938,27735,27721,22831,26477,33322,22741,22158,35946,27627,37085,22909,32791,21495,28009,21621,21917,33655,33743,26680,31166,21644,20309,21512,30418,35977,38402,27827,28088,36203,35088,40548,36154,22079,40657,30165,24456,29408,24680,21756,20136,27178,34913,24658,36720,21700,28888,34425,40511,27946,23439,24344,32418,21897,20399,29492,21564,21402,20505,21518,21628,20046,24573,29786,22774,33899,32993,34676,29392,31946,28246,31811,31812,31813,31814,31815,31816,31817,31818,31819,31820,31822,31823,31824,31825,31826,31827,31828,31829,31830,31831,31832,31833,31834,31835,31836,31837,31838,31839,31840,31841,31842,31843,31844,31845,31846,31847,31848,31849,31850,31851,31852,31853,31854,31855,31856,31857,31858,31861,31862,31863,31864,31865,31866,31870,31871,31872,31873,31874,31875,31876,31877,31878,31879,31880,31882,31883,31884,31885,31886,31887,31888,31891,31892,31894,31897,31898,31899,31904,31905,31907,31910,31911,31912,31913,31915,31916,31917,31919,31920,31924,31925,31926,31927,31928,31930,31931,24359,34382,21804,25252,20114,27818,25143,33457,21719,21326,29502,28369,30011,21010,21270,35805,27088,24458,24576,28142,22351,27426,29615,26707,36824,32531,25442,24739,21796,30186,35938,28949,28067,23462,24187,33618,24908,40644,30970,34647,31783,30343,20976,24822,29004,26179,24140,24653,35854,28784,25381,36745,24509,24674,34516,22238,27585,24724,24935,21321,24800,26214,36159,31229,20250,28905,27719,35763,35826,32472,33636,26127,23130,39746,27985,28151,35905,27963,20249,28779,33719,25110,24785,38669,36135,31096,20987,22334,22522,26426,30072,31293,31215,31637,31935,31936,31938,31939,31940,31942,31945,31947,31950,31951,31952,31953,31954,31955,31956,31960,31962,31963,31965,31966,31969,31970,31971,31972,31973,31974,31975,31977,31978,31979,31980,31981,31982,31984,31985,31986,31987,31988,31989,31990,31991,31993,31994,31996,31997,31998,31999,32000,32001,32002,32003,32004,32005,32006,32007,32008,32009,32011,32012,32013,32014,32015,32016,32017,32018,32019,32020,32021,32022,32023,32024,32025,32026,32027,32028,32029,32030,32031,32033,32035,32036,32037,32038,32040,32041,32042,32044,32045,32046,32048,32049,32050,32051,32052,32053,32054,32908,39269,36857,28608,35749,40481,23020,32489,32521,21513,26497,26840,36753,31821,38598,21450,24613,30142,27762,21363,23241,32423,25380,20960,33034,24049,34015,25216,20864,23395,20238,31085,21058,24760,27982,23492,23490,35745,35760,26082,24524,38469,22931,32487,32426,22025,26551,22841,20339,23478,21152,33626,39050,36158,30002,38078,20551,31292,20215,26550,39550,23233,27516,30417,22362,23574,31546,38388,29006,20860,32937,33392,22904,32516,33575,26816,26604,30897,30839,25315,25441,31616,20461,21098,20943,33616,27099,37492,36341,36145,35265,38190,31661,20214,32055,32056,32057,32058,32059,32060,32061,32062,32063,32064,32065,32066,32067,32068,32069,32070,32071,32072,32073,32074,32075,32076,32077,32078,32079,32080,32081,32082,32083,32084,32085,32086,32087,32088,32089,32090,32091,32092,32093,32094,32095,32096,32097,32098,32099,32100,32101,32102,32103,32104,32105,32106,32107,32108,32109,32111,32112,32113,32114,32115,32116,32117,32118,32120,32121,32122,32123,32124,32125,32126,32127,32128,32129,32130,32131,32132,32133,32134,32135,32136,32137,32138,32139,32140,32141,32142,32143,32144,32145,32146,32147,32148,32149,32150,32151,32152,20581,33328,21073,39279,28176,28293,28071,24314,20725,23004,23558,27974,27743,30086,33931,26728,22870,35762,21280,37233,38477,34121,26898,30977,28966,33014,20132,37066,27975,39556,23047,22204,25605,38128,30699,20389,33050,29409,35282,39290,32564,32478,21119,25945,37237,36735,36739,21483,31382,25581,25509,30342,31224,34903,38454,25130,21163,33410,26708,26480,25463,30571,31469,27905,32467,35299,22992,25106,34249,33445,30028,20511,20171,30117,35819,23626,24062,31563,26020,37329,20170,27941,35167,32039,38182,20165,35880,36827,38771,26187,31105,36817,28908,28024,32153,32154,32155,32156,32157,32158,32159,32160,32161,32162,32163,32164,32165,32167,32168,32169,32170,32171,32172,32173,32175,32176,32177,32178,32179,32180,32181,32182,32183,32184,32185,32186,32187,32188,32189,32190,32191,32192,32193,32194,32195,32196,32197,32198,32199,32200,32201,32202,32203,32204,32205,32206,32207,32208,32209,32210,32211,32212,32213,32214,32215,32216,32217,32218,32219,32220,32221,32222,32223,32224,32225,32226,32227,32228,32229,32230,32231,32232,32233,32234,32235,32236,32237,32238,32239,32240,32241,32242,32243,32244,32245,32246,32247,32248,32249,32250,23613,21170,33606,20834,33550,30555,26230,40120,20140,24778,31934,31923,32463,20117,35686,26223,39048,38745,22659,25964,38236,24452,30153,38742,31455,31454,20928,28847,31384,25578,31350,32416,29590,38893,20037,28792,20061,37202,21417,25937,26087,33276,33285,21646,23601,30106,38816,25304,29401,30141,23621,39545,33738,23616,21632,30697,20030,27822,32858,25298,25454,24040,20855,36317,36382,38191,20465,21477,24807,28844,21095,25424,40515,23071,20518,30519,21367,32482,25733,25899,25225,25496,20500,29237,35273,20915,35776,32477,22343,33740,38055,20891,21531,23803,32251,32252,32253,32254,32255,32256,32257,32258,32259,32260,32261,32262,32263,32264,32265,32266,32267,32268,32269,32270,32271,32272,32273,32274,32275,32276,32277,32278,32279,32280,32281,32282,32283,32284,32285,32286,32287,32288,32289,32290,32291,32292,32293,32294,32295,32296,32297,32298,32299,32300,32301,32302,32303,32304,32305,32306,32307,32308,32309,32310,32311,32312,32313,32314,32316,32317,32318,32319,32320,32322,32323,32324,32325,32326,32328,32329,32330,32331,32332,32333,32334,32335,32336,32337,32338,32339,32340,32341,32342,32343,32344,32345,32346,32347,32348,32349,20426,31459,27994,37089,39567,21888,21654,21345,21679,24320,25577,26999,20975,24936,21002,22570,21208,22350,30733,30475,24247,24951,31968,25179,25239,20130,28821,32771,25335,28900,38752,22391,33499,26607,26869,30933,39063,31185,22771,21683,21487,28212,20811,21051,23458,35838,32943,21827,22438,24691,22353,21549,31354,24656,23380,25511,25248,21475,25187,23495,26543,21741,31391,33510,37239,24211,35044,22840,22446,25358,36328,33007,22359,31607,20393,24555,23485,27454,21281,31568,29378,26694,30719,30518,26103,20917,20111,30420,23743,31397,33909,22862,39745,20608,32350,32351,32352,32353,32354,32355,32356,32357,32358,32359,32360,32361,32362,32363,32364,32365,32366,32367,32368,32369,32370,32371,32372,32373,32374,32375,32376,32377,32378,32379,32380,32381,32382,32383,32384,32385,32387,32388,32389,32390,32391,32392,32393,32394,32395,32396,32397,32398,32399,32400,32401,32402,32403,32404,32405,32406,32407,32408,32409,32410,32412,32413,32414,32430,32436,32443,32444,32470,32484,32492,32505,32522,32528,32542,32567,32569,32571,32572,32573,32574,32575,32576,32577,32579,32582,32583,32584,32585,32586,32587,32588,32589,32590,32591,32594,32595,39304,24871,28291,22372,26118,25414,22256,25324,25193,24275,38420,22403,25289,21895,34593,33098,36771,21862,33713,26469,36182,34013,23146,26639,25318,31726,38417,20848,28572,35888,25597,35272,25042,32518,28866,28389,29701,27028,29436,24266,37070,26391,28010,25438,21171,29282,32769,20332,23013,37226,28889,28061,21202,20048,38647,38253,34174,30922,32047,20769,22418,25794,32907,31867,27882,26865,26974,20919,21400,26792,29313,40654,31729,29432,31163,28435,29702,26446,37324,40100,31036,33673,33620,21519,26647,20029,21385,21169,30782,21382,21033,20616,20363,20432,32598,32601,32603,32604,32605,32606,32608,32611,32612,32613,32614,32615,32619,32620,32621,32623,32624,32627,32629,32630,32631,32632,32634,32635,32636,32637,32639,32640,32642,32643,32644,32645,32646,32647,32648,32649,32651,32653,32655,32656,32657,32658,32659,32661,32662,32663,32664,32665,32667,32668,32672,32674,32675,32677,32678,32680,32681,32682,32683,32684,32685,32686,32689,32691,32692,32693,32694,32695,32698,32699,32702,32704,32706,32707,32708,32710,32711,32712,32713,32715,32717,32719,32720,32721,32722,32723,32726,32727,32729,32730,32731,32732,32733,32734,32738,32739,30178,31435,31890,27813,38582,21147,29827,21737,20457,32852,33714,36830,38256,24265,24604,28063,24088,25947,33080,38142,24651,28860,32451,31918,20937,26753,31921,33391,20004,36742,37327,26238,20142,35845,25769,32842,20698,30103,29134,23525,36797,28518,20102,25730,38243,24278,26009,21015,35010,28872,21155,29454,29747,26519,30967,38678,20020,37051,40158,28107,20955,36161,21533,25294,29618,33777,38646,40836,38083,20278,32666,20940,28789,38517,23725,39046,21478,20196,28316,29705,27060,30827,39311,30041,21016,30244,27969,26611,20845,40857,32843,21657,31548,31423,32740,32743,32744,32746,32747,32748,32749,32751,32754,32756,32757,32758,32759,32760,32761,32762,32765,32766,32767,32770,32775,32776,32777,32778,32782,32783,32785,32787,32794,32795,32797,32798,32799,32801,32803,32804,32811,32812,32813,32814,32815,32816,32818,32820,32825,32826,32828,32830,32832,32833,32836,32837,32839,32840,32841,32846,32847,32848,32849,32851,32853,32854,32855,32857,32859,32860,32861,32862,32863,32864,32865,32866,32867,32868,32869,32870,32871,32872,32875,32876,32877,32878,32879,32880,32882,32883,32884,32885,32886,32887,32888,32889,32890,32891,32892,32893,38534,22404,25314,38471,27004,23044,25602,31699,28431,38475,33446,21346,39045,24208,28809,25523,21348,34383,40065,40595,30860,38706,36335,36162,40575,28510,31108,24405,38470,25134,39540,21525,38109,20387,26053,23653,23649,32533,34385,27695,24459,29575,28388,32511,23782,25371,23402,28390,21365,20081,25504,30053,25249,36718,20262,20177,27814,32438,35770,33821,34746,32599,36923,38179,31657,39585,35064,33853,27931,39558,32476,22920,40635,29595,30721,34434,39532,39554,22043,21527,22475,20080,40614,21334,36808,33033,30610,39314,34542,28385,34067,26364,24930,28459,32894,32897,32898,32901,32904,32906,32909,32910,32911,32912,32913,32914,32916,32917,32919,32921,32926,32931,32934,32935,32936,32940,32944,32947,32949,32950,32952,32953,32955,32965,32967,32968,32969,32970,32971,32975,32976,32977,32978,32979,32980,32981,32984,32991,32992,32994,32995,32998,33006,33013,33015,33017,33019,33022,33023,33024,33025,33027,33028,33029,33031,33032,33035,33036,33045,33047,33049,33051,33052,33053,33055,33056,33057,33058,33059,33060,33061,33062,33063,33064,33065,33066,33067,33069,33070,33072,33075,33076,33077,33079,33081,33082,33083,33084,33085,33087,35881,33426,33579,30450,27667,24537,33725,29483,33541,38170,27611,30683,38086,21359,33538,20882,24125,35980,36152,20040,29611,26522,26757,37238,38665,29028,27809,30473,23186,38209,27599,32654,26151,23504,22969,23194,38376,38391,20204,33804,33945,27308,30431,38192,29467,26790,23391,30511,37274,38753,31964,36855,35868,24357,31859,31192,35269,27852,34588,23494,24130,26825,30496,32501,20885,20813,21193,23081,32517,38754,33495,25551,30596,34256,31186,28218,24217,22937,34065,28781,27665,25279,30399,25935,24751,38397,26126,34719,40483,38125,21517,21629,35884,25720,33088,33089,33090,33091,33092,33093,33095,33097,33101,33102,33103,33106,33110,33111,33112,33115,33116,33117,33118,33119,33121,33122,33123,33124,33126,33128,33130,33131,33132,33135,33138,33139,33141,33142,33143,33144,33153,33155,33156,33157,33158,33159,33161,33163,33164,33165,33166,33168,33170,33171,33172,33173,33174,33175,33177,33178,33182,33183,33184,33185,33186,33188,33189,33191,33193,33195,33196,33197,33198,33199,33200,33201,33202,33204,33205,33206,33207,33208,33209,33212,33213,33214,33215,33220,33221,33223,33224,33225,33227,33229,33230,33231,33232,33233,33234,33235,25721,34321,27169,33180,30952,25705,39764,25273,26411,33707,22696,40664,27819,28448,23518,38476,35851,29279,26576,25287,29281,20137,22982,27597,22675,26286,24149,21215,24917,26408,30446,30566,29287,31302,25343,21738,21584,38048,37027,23068,32435,27670,20035,22902,32784,22856,21335,30007,38590,22218,25376,33041,24700,38393,28118,21602,39297,20869,23273,33021,22958,38675,20522,27877,23612,25311,20320,21311,33147,36870,28346,34091,25288,24180,30910,25781,25467,24565,23064,37247,40479,23615,25423,32834,23421,21870,38218,38221,28037,24744,26592,29406,20957,23425,33236,33237,33238,33239,33240,33241,33242,33243,33244,33245,33246,33247,33248,33249,33250,33252,33253,33254,33256,33257,33259,33262,33263,33264,33265,33266,33269,33270,33271,33272,33273,33274,33277,33279,33283,33287,33288,33289,33290,33291,33294,33295,33297,33299,33301,33302,33303,33304,33305,33306,33309,33312,33316,33317,33318,33319,33321,33326,33330,33338,33340,33341,33343,33344,33345,33346,33347,33349,33350,33352,33354,33356,33357,33358,33360,33361,33362,33363,33364,33365,33366,33367,33369,33371,33372,33373,33374,33376,33377,33378,33379,33380,33381,33382,33383,33385,25319,27870,29275,25197,38062,32445,33043,27987,20892,24324,22900,21162,24594,22899,26262,34384,30111,25386,25062,31983,35834,21734,27431,40485,27572,34261,21589,20598,27812,21866,36276,29228,24085,24597,29750,25293,25490,29260,24472,28227,27966,25856,28504,30424,30928,30460,30036,21028,21467,20051,24222,26049,32810,32982,25243,21638,21032,28846,34957,36305,27873,21624,32986,22521,35060,36180,38506,37197,20329,27803,21943,30406,30768,25256,28921,28558,24429,34028,26842,30844,31735,33192,26379,40527,25447,30896,22383,30738,38713,25209,25259,21128,29749,27607,33386,33387,33388,33389,33393,33397,33398,33399,33400,33403,33404,33408,33409,33411,33413,33414,33415,33417,33420,33424,33427,33428,33429,33430,33434,33435,33438,33440,33442,33443,33447,33458,33461,33462,33466,33467,33468,33471,33472,33474,33475,33477,33478,33481,33488,33494,33497,33498,33501,33506,33511,33512,33513,33514,33516,33517,33518,33520,33522,33523,33525,33526,33528,33530,33532,33533,33534,33535,33536,33546,33547,33549,33552,33554,33555,33558,33560,33561,33565,33566,33567,33568,33569,33570,33571,33572,33573,33574,33577,33578,33582,33584,33586,33591,33595,33597,21860,33086,30130,30382,21305,30174,20731,23617,35692,31687,20559,29255,39575,39128,28418,29922,31080,25735,30629,25340,39057,36139,21697,32856,20050,22378,33529,33805,24179,20973,29942,35780,23631,22369,27900,39047,23110,30772,39748,36843,31893,21078,25169,38138,20166,33670,33889,33769,33970,22484,26420,22275,26222,28006,35889,26333,28689,26399,27450,26646,25114,22971,19971,20932,28422,26578,27791,20854,26827,22855,27495,30054,23822,33040,40784,26071,31048,31041,39569,36215,23682,20062,20225,21551,22865,30732,22120,27668,36804,24323,27773,27875,35755,25488,33598,33599,33601,33602,33604,33605,33608,33610,33611,33612,33613,33614,33619,33621,33622,33623,33624,33625,33629,33634,33648,33649,33650,33651,33652,33653,33654,33657,33658,33662,33663,33664,33665,33666,33667,33668,33671,33672,33674,33675,33676,33677,33679,33680,33681,33684,33685,33686,33687,33689,33690,33693,33695,33697,33698,33699,33700,33701,33702,33703,33708,33709,33710,33711,33717,33723,33726,33727,33730,33731,33732,33734,33736,33737,33739,33741,33742,33744,33745,33746,33747,33749,33751,33753,33754,33755,33758,33762,33763,33764,33766,33767,33768,33771,33772,33773,24688,27965,29301,25190,38030,38085,21315,36801,31614,20191,35878,20094,40660,38065,38067,21069,28508,36963,27973,35892,22545,23884,27424,27465,26538,21595,33108,32652,22681,34103,24378,25250,27207,38201,25970,24708,26725,30631,20052,20392,24039,38808,25772,32728,23789,20431,31373,20999,33540,19988,24623,31363,38054,20405,20146,31206,29748,21220,33465,25810,31165,23517,27777,38738,36731,27682,20542,21375,28165,25806,26228,27696,24773,39031,35831,24198,29756,31351,31179,19992,37041,29699,27714,22234,37195,27845,36235,21306,34502,26354,36527,23624,39537,28192,33774,33775,33779,33780,33781,33782,33783,33786,33787,33788,33790,33791,33792,33794,33797,33799,33800,33801,33802,33808,33810,33811,33812,33813,33814,33815,33817,33818,33819,33822,33823,33824,33825,33826,33827,33833,33834,33835,33836,33837,33838,33839,33840,33842,33843,33844,33845,33846,33847,33849,33850,33851,33854,33855,33856,33857,33858,33859,33860,33861,33863,33864,33865,33866,33867,33868,33869,33870,33871,33872,33874,33875,33876,33877,33878,33880,33885,33886,33887,33888,33890,33892,33893,33894,33895,33896,33898,33902,33903,33904,33906,33908,33911,33913,33915,33916,21462,23094,40843,36259,21435,22280,39079,26435,37275,27849,20840,30154,25331,29356,21048,21149,32570,28820,30264,21364,40522,27063,30830,38592,35033,32676,28982,29123,20873,26579,29924,22756,25880,22199,35753,39286,25200,32469,24825,28909,22764,20161,20154,24525,38887,20219,35748,20995,22922,32427,25172,20173,26085,25102,33592,33993,33635,34701,29076,28342,23481,32466,20887,25545,26580,32905,33593,34837,20754,23418,22914,36785,20083,27741,20837,35109,36719,38446,34122,29790,38160,38384,28070,33509,24369,25746,27922,33832,33134,40131,22622,36187,19977,21441,33917,33918,33919,33920,33921,33923,33924,33925,33926,33930,33933,33935,33936,33937,33938,33939,33940,33941,33942,33944,33946,33947,33949,33950,33951,33952,33954,33955,33956,33957,33958,33959,33960,33961,33962,33963,33964,33965,33966,33968,33969,33971,33973,33974,33975,33979,33980,33982,33984,33986,33987,33989,33990,33991,33992,33995,33996,33998,33999,34002,34004,34005,34007,34008,34009,34010,34011,34012,34014,34017,34018,34020,34023,34024,34025,34026,34027,34029,34030,34031,34033,34034,34035,34036,34037,34038,34039,34040,34041,34042,34043,34045,34046,34048,34049,34050,20254,25955,26705,21971,20007,25620,39578,25195,23234,29791,33394,28073,26862,20711,33678,30722,26432,21049,27801,32433,20667,21861,29022,31579,26194,29642,33515,26441,23665,21024,29053,34923,38378,38485,25797,36193,33203,21892,27733,25159,32558,22674,20260,21830,36175,26188,19978,23578,35059,26786,25422,31245,28903,33421,21242,38902,23569,21736,37045,32461,22882,36170,34503,33292,33293,36198,25668,23556,24913,28041,31038,35774,30775,30003,21627,20280,36523,28145,23072,32453,31070,27784,23457,23158,29978,32958,24910,28183,22768,29983,29989,29298,21319,32499,34051,34052,34053,34054,34055,34056,34057,34058,34059,34061,34062,34063,34064,34066,34068,34069,34070,34072,34073,34075,34076,34077,34078,34080,34082,34083,34084,34085,34086,34087,34088,34089,34090,34093,34094,34095,34096,34097,34098,34099,34100,34101,34102,34110,34111,34112,34113,34114,34116,34117,34118,34119,34123,34124,34125,34126,34127,34128,34129,34130,34131,34132,34133,34135,34136,34138,34139,34140,34141,34143,34144,34145,34146,34147,34149,34150,34151,34153,34154,34155,34156,34157,34158,34159,34160,34161,34163,34165,34166,34167,34168,34172,34173,34175,34176,34177,30465,30427,21097,32988,22307,24072,22833,29422,26045,28287,35799,23608,34417,21313,30707,25342,26102,20160,39135,34432,23454,35782,21490,30690,20351,23630,39542,22987,24335,31034,22763,19990,26623,20107,25325,35475,36893,21183,26159,21980,22124,36866,20181,20365,37322,39280,27663,24066,24643,23460,35270,35797,25910,25163,39318,23432,23551,25480,21806,21463,30246,20861,34092,26530,26803,27530,25234,36755,21460,33298,28113,30095,20070,36174,23408,29087,34223,26257,26329,32626,34560,40653,40736,23646,26415,36848,26641,26463,25101,31446,22661,24246,25968,28465,34178,34179,34182,34184,34185,34186,34187,34188,34189,34190,34192,34193,34194,34195,34196,34197,34198,34199,34200,34201,34202,34205,34206,34207,34208,34209,34210,34211,34213,34214,34215,34217,34219,34220,34221,34225,34226,34227,34228,34229,34230,34232,34234,34235,34236,34237,34238,34239,34240,34242,34243,34244,34245,34246,34247,34248,34250,34251,34252,34253,34254,34257,34258,34260,34262,34263,34264,34265,34266,34267,34269,34270,34271,34272,34273,34274,34275,34277,34278,34279,34280,34282,34283,34284,34285,34286,34287,34288,34289,34290,34291,34292,34293,34294,34295,34296,24661,21047,32781,25684,34928,29993,24069,26643,25332,38684,21452,29245,35841,27700,30561,31246,21550,30636,39034,33308,35828,30805,26388,28865,26031,25749,22070,24605,31169,21496,19997,27515,32902,23546,21987,22235,20282,20284,39282,24051,26494,32824,24578,39042,36865,23435,35772,35829,25628,33368,25822,22013,33487,37221,20439,32032,36895,31903,20723,22609,28335,23487,35785,32899,37240,33948,31639,34429,38539,38543,32485,39635,30862,23681,31319,36930,38567,31071,23385,25439,31499,34001,26797,21766,32553,29712,32034,38145,25152,22604,20182,23427,22905,22612,34297,34298,34300,34301,34302,34304,34305,34306,34307,34308,34310,34311,34312,34313,34314,34315,34316,34317,34318,34319,34320,34322,34323,34324,34325,34327,34328,34329,34330,34331,34332,34333,34334,34335,34336,34337,34338,34339,34340,34341,34342,34344,34346,34347,34348,34349,34350,34351,34352,34353,34354,34355,34356,34357,34358,34359,34361,34362,34363,34365,34366,34367,34368,34369,34370,34371,34372,34373,34374,34375,34376,34377,34378,34379,34380,34386,34387,34389,34390,34391,34392,34393,34395,34396,34397,34399,34400,34401,34403,34404,34405,34406,34407,34408,34409,34410,29549,25374,36427,36367,32974,33492,25260,21488,27888,37214,22826,24577,27760,22349,25674,36138,30251,28393,22363,27264,30192,28525,35885,35848,22374,27631,34962,30899,25506,21497,28845,27748,22616,25642,22530,26848,33179,21776,31958,20504,36538,28108,36255,28907,25487,28059,28372,32486,33796,26691,36867,28120,38518,35752,22871,29305,34276,33150,30140,35466,26799,21076,36386,38161,25552,39064,36420,21884,20307,26367,22159,24789,28053,21059,23625,22825,28155,22635,30000,29980,24684,33300,33094,25361,26465,36834,30522,36339,36148,38081,24086,21381,21548,28867,34413,34415,34416,34418,34419,34420,34421,34422,34423,34424,34435,34436,34437,34438,34439,34440,34441,34446,34447,34448,34449,34450,34452,34454,34455,34456,34457,34458,34459,34462,34463,34464,34465,34466,34469,34470,34475,34477,34478,34482,34483,34487,34488,34489,34491,34492,34493,34494,34495,34497,34498,34499,34501,34504,34508,34509,34514,34515,34517,34518,34519,34522,34524,34525,34528,34529,34530,34531,34533,34534,34535,34536,34538,34539,34540,34543,34549,34550,34551,34554,34555,34556,34557,34559,34561,34564,34565,34566,34571,34572,34574,34575,34576,34577,34580,34582,27712,24311,20572,20141,24237,25402,33351,36890,26704,37230,30643,21516,38108,24420,31461,26742,25413,31570,32479,30171,20599,25237,22836,36879,20984,31171,31361,22270,24466,36884,28034,23648,22303,21520,20820,28237,22242,25512,39059,33151,34581,35114,36864,21534,23663,33216,25302,25176,33073,40501,38464,39534,39548,26925,22949,25299,21822,25366,21703,34521,27964,23043,29926,34972,27498,22806,35916,24367,28286,29609,39037,20024,28919,23436,30871,25405,26202,30358,24779,23451,23113,19975,33109,27754,29579,20129,26505,32593,24448,26106,26395,24536,22916,23041,34585,34587,34589,34591,34592,34596,34598,34599,34600,34602,34603,34604,34605,34607,34608,34610,34611,34613,34614,34616,34617,34618,34620,34621,34624,34625,34626,34627,34628,34629,34630,34634,34635,34637,34639,34640,34641,34642,34644,34645,34646,34648,34650,34651,34652,34653,34654,34655,34657,34658,34662,34663,34664,34665,34666,34667,34668,34669,34671,34673,34674,34675,34677,34679,34680,34681,34682,34687,34688,34689,34692,34694,34695,34697,34698,34700,34702,34703,34704,34705,34706,34708,34709,34710,34712,34713,34714,34715,34716,34717,34718,34720,34721,34722,34723,34724,24013,24494,21361,38886,36829,26693,22260,21807,24799,20026,28493,32500,33479,33806,22996,20255,20266,23614,32428,26410,34074,21619,30031,32963,21890,39759,20301,28205,35859,23561,24944,21355,30239,28201,34442,25991,38395,32441,21563,31283,32010,38382,21985,32705,29934,25373,34583,28065,31389,25105,26017,21351,25569,27779,24043,21596,38056,20044,27745,35820,23627,26080,33436,26791,21566,21556,27595,27494,20116,25410,21320,33310,20237,20398,22366,25098,38654,26212,29289,21247,21153,24735,35823,26132,29081,26512,35199,30802,30717,26224,22075,21560,38177,29306,34725,34726,34727,34729,34730,34734,34736,34737,34738,34740,34742,34743,34744,34745,34747,34748,34750,34751,34753,34754,34755,34756,34757,34759,34760,34761,34764,34765,34766,34767,34768,34772,34773,34774,34775,34776,34777,34778,34780,34781,34782,34783,34785,34786,34787,34788,34790,34791,34792,34793,34795,34796,34797,34799,34800,34801,34802,34803,34804,34805,34806,34807,34808,34810,34811,34812,34813,34815,34816,34817,34818,34820,34821,34822,34823,34824,34825,34827,34828,34829,34830,34831,34832,34833,34834,34836,34839,34840,34841,34842,34844,34845,34846,34847,34848,34851,31232,24687,24076,24713,33181,22805,24796,29060,28911,28330,27728,29312,27268,34989,24109,20064,23219,21916,38115,27927,31995,38553,25103,32454,30606,34430,21283,38686,36758,26247,23777,20384,29421,19979,21414,22799,21523,25472,38184,20808,20185,40092,32420,21688,36132,34900,33335,38386,28046,24358,23244,26174,38505,29616,29486,21439,33146,39301,32673,23466,38519,38480,32447,30456,21410,38262,39321,31665,35140,28248,20065,32724,31077,35814,24819,21709,20139,39033,24055,27233,20687,21521,35937,33831,30813,38660,21066,21742,22179,38144,28040,23477,28102,26195,34852,34853,34854,34855,34856,34857,34858,34859,34860,34861,34862,34863,34864,34865,34867,34868,34869,34870,34871,34872,34874,34875,34877,34878,34879,34881,34882,34883,34886,34887,34888,34889,34890,34891,34894,34895,34896,34897,34898,34899,34901,34902,34904,34906,34907,34908,34909,34910,34911,34912,34918,34919,34922,34925,34927,34929,34931,34932,34933,34934,34936,34937,34938,34939,34940,34944,34947,34950,34951,34953,34954,34956,34958,34959,34960,34961,34963,34964,34965,34967,34968,34969,34970,34971,34973,34974,34975,34976,34977,34979,34981,34982,34983,34984,34985,34986,23567,23389,26657,32918,21880,31505,25928,26964,20123,27463,34638,38795,21327,25375,25658,37034,26012,32961,35856,20889,26800,21368,34809,25032,27844,27899,35874,23633,34218,33455,38156,27427,36763,26032,24571,24515,20449,34885,26143,33125,29481,24826,20852,21009,22411,24418,37026,34892,37266,24184,26447,24615,22995,20804,20982,33016,21256,27769,38596,29066,20241,20462,32670,26429,21957,38152,31168,34966,32483,22687,25100,38656,34394,22040,39035,24464,35768,33988,37207,21465,26093,24207,30044,24676,32110,23167,32490,32493,36713,21927,23459,24748,26059,29572,34988,34990,34991,34992,34994,34995,34996,34997,34998,35000,35001,35002,35003,35005,35006,35007,35008,35011,35012,35015,35016,35018,35019,35020,35021,35023,35024,35025,35027,35030,35031,35034,35035,35036,35037,35038,35040,35041,35046,35047,35049,35050,35051,35052,35053,35054,35055,35058,35061,35062,35063,35066,35067,35069,35071,35072,35073,35075,35076,35077,35078,35079,35080,35081,35083,35084,35085,35086,35087,35089,35092,35093,35094,35095,35096,35100,35101,35102,35103,35104,35106,35107,35108,35110,35111,35112,35113,35116,35117,35118,35119,35121,35122,35123,35125,35127,36873,30307,30505,32474,38772,34203,23398,31348,38634,34880,21195,29071,24490,26092,35810,23547,39535,24033,27529,27739,35757,35759,36874,36805,21387,25276,40486,40493,21568,20011,33469,29273,34460,23830,34905,28079,38597,21713,20122,35766,28937,21693,38409,28895,28153,30416,20005,30740,34578,23721,24310,35328,39068,38414,28814,27839,22852,25513,30524,34893,28436,33395,22576,29141,21388,30746,38593,21761,24422,28976,23476,35866,39564,27523,22830,40495,31207,26472,25196,20335,30113,32650,27915,38451,27687,20208,30162,20859,26679,28478,36992,33136,22934,29814,35128,35129,35130,35131,35132,35133,35134,35135,35136,35138,35139,35141,35142,35143,35144,35145,35146,35147,35148,35149,35150,35151,35152,35153,35154,35155,35156,35157,35158,35159,35160,35161,35162,35163,35164,35165,35168,35169,35170,35171,35172,35173,35175,35176,35177,35178,35179,35180,35181,35182,35183,35184,35185,35186,35187,35188,35189,35190,35191,35192,35193,35194,35196,35197,35198,35200,35202,35204,35205,35207,35208,35209,35210,35211,35212,35213,35214,35215,35216,35217,35218,35219,35220,35221,35222,35223,35224,35225,35226,35227,35228,35229,35230,35231,35232,35233,25671,23591,36965,31377,35875,23002,21676,33280,33647,35201,32768,26928,22094,32822,29239,37326,20918,20063,39029,25494,19994,21494,26355,33099,22812,28082,19968,22777,21307,25558,38129,20381,20234,34915,39056,22839,36951,31227,20202,33008,30097,27778,23452,23016,24413,26885,34433,20506,24050,20057,30691,20197,33402,25233,26131,37009,23673,20159,24441,33222,36920,32900,30123,20134,35028,24847,27589,24518,20041,30410,28322,35811,35758,35850,35793,24322,32764,32716,32462,33589,33643,22240,27575,38899,38452,23035,21535,38134,28139,23493,39278,23609,24341,38544,35234,35235,35236,35237,35238,35239,35240,35241,35242,35243,35244,35245,35246,35247,35248,35249,35250,35251,35252,35253,35254,35255,35256,35257,35258,35259,35260,35261,35262,35263,35264,35267,35277,35283,35284,35285,35287,35288,35289,35291,35293,35295,35296,35297,35298,35300,35303,35304,35305,35306,35308,35309,35310,35312,35313,35314,35316,35317,35318,35319,35320,35321,35322,35323,35324,35325,35326,35327,35329,35330,35331,35332,35333,35334,35336,35337,35338,35339,35340,35341,35342,35343,35344,35345,35346,35347,35348,35349,35350,35351,35352,35353,35354,35355,35356,35357,21360,33521,27185,23156,40560,24212,32552,33721,33828,33829,33639,34631,36814,36194,30408,24433,39062,30828,26144,21727,25317,20323,33219,30152,24248,38605,36362,34553,21647,27891,28044,27704,24703,21191,29992,24189,20248,24736,24551,23588,30001,37038,38080,29369,27833,28216,37193,26377,21451,21491,20305,37321,35825,21448,24188,36802,28132,20110,30402,27014,34398,24858,33286,20313,20446,36926,40060,24841,28189,28180,38533,20104,23089,38632,19982,23679,31161,23431,35821,32701,29577,22495,33419,37057,21505,36935,21947,23786,24481,24840,27442,29425,32946,35465,35358,35359,35360,35361,35362,35363,35364,35365,35366,35367,35368,35369,35370,35371,35372,35373,35374,35375,35376,35377,35378,35379,35380,35381,35382,35383,35384,35385,35386,35387,35388,35389,35391,35392,35393,35394,35395,35396,35397,35398,35399,35401,35402,35403,35404,35405,35406,35407,35408,35409,35410,35411,35412,35413,35414,35415,35416,35417,35418,35419,35420,35421,35422,35423,35424,35425,35426,35427,35428,35429,35430,35431,35432,35433,35434,35435,35436,35437,35438,35439,35440,35441,35442,35443,35444,35445,35446,35447,35448,35450,35451,35452,35453,35454,35455,35456,28020,23507,35029,39044,35947,39533,40499,28170,20900,20803,22435,34945,21407,25588,36757,22253,21592,22278,29503,28304,32536,36828,33489,24895,24616,38498,26352,32422,36234,36291,38053,23731,31908,26376,24742,38405,32792,20113,37095,21248,38504,20801,36816,34164,37213,26197,38901,23381,21277,30776,26434,26685,21705,28798,23472,36733,20877,22312,21681,25874,26242,36190,36163,33039,33900,36973,31967,20991,34299,26531,26089,28577,34468,36481,22122,36896,30338,28790,29157,36131,25321,21017,27901,36156,24590,22686,24974,26366,36192,25166,21939,28195,26413,36711,35457,35458,35459,35460,35461,35462,35463,35464,35467,35468,35469,35470,35471,35472,35473,35474,35476,35477,35478,35479,35480,35481,35482,35483,35484,35485,35486,35487,35488,35489,35490,35491,35492,35493,35494,35495,35496,35497,35498,35499,35500,35501,35502,35503,35504,35505,35506,35507,35508,35509,35510,35511,35512,35513,35514,35515,35516,35517,35518,35519,35520,35521,35522,35523,35524,35525,35526,35527,35528,35529,35530,35531,35532,35533,35534,35535,35536,35537,35538,35539,35540,35541,35542,35543,35544,35545,35546,35547,35548,35549,35550,35551,35552,35553,35554,35555,38113,38392,30504,26629,27048,21643,20045,28856,35784,25688,25995,23429,31364,20538,23528,30651,27617,35449,31896,27838,30415,26025,36759,23853,23637,34360,26632,21344,25112,31449,28251,32509,27167,31456,24432,28467,24352,25484,28072,26454,19976,24080,36134,20183,32960,30260,38556,25307,26157,25214,27836,36213,29031,32617,20806,32903,21484,36974,25240,21746,34544,36761,32773,38167,34071,36825,27993,29645,26015,30495,29956,30759,33275,36126,38024,20390,26517,30137,35786,38663,25391,38215,38453,33976,25379,30529,24449,29424,20105,24596,25972,25327,27491,25919,35556,35557,35558,35559,35560,35561,35562,35563,35564,35565,35566,35567,35568,35569,35570,35571,35572,35573,35574,35575,35576,35577,35578,35579,35580,35581,35582,35583,35584,35585,35586,35587,35588,35589,35590,35592,35593,35594,35595,35596,35597,35598,35599,35600,35601,35602,35603,35604,35605,35606,35607,35608,35609,35610,35611,35612,35613,35614,35615,35616,35617,35618,35619,35620,35621,35623,35624,35625,35626,35627,35628,35629,35630,35631,35632,35633,35634,35635,35636,35637,35638,35639,35640,35641,35642,35643,35644,35645,35646,35647,35648,35649,35650,35651,35652,35653,24103,30151,37073,35777,33437,26525,25903,21553,34584,30693,32930,33026,27713,20043,32455,32844,30452,26893,27542,25191,20540,20356,22336,25351,27490,36286,21482,26088,32440,24535,25370,25527,33267,33268,32622,24092,23769,21046,26234,31209,31258,36136,28825,30164,28382,27835,31378,20013,30405,24544,38047,34935,32456,31181,32959,37325,20210,20247,33311,21608,24030,27954,35788,31909,36724,32920,24090,21650,30385,23449,26172,39588,29664,26666,34523,26417,29482,35832,35803,36880,31481,28891,29038,25284,30633,22065,20027,33879,26609,21161,34496,36142,38136,31569,35654,35655,35656,35657,35658,35659,35660,35661,35662,35663,35664,35665,35666,35667,35668,35669,35670,35671,35672,35673,35674,35675,35676,35677,35678,35679,35680,35681,35682,35683,35684,35685,35687,35688,35689,35690,35691,35693,35694,35695,35696,35697,35698,35699,35700,35701,35702,35703,35704,35705,35706,35707,35708,35709,35710,35711,35712,35713,35714,35715,35716,35717,35718,35719,35720,35721,35722,35723,35724,35725,35726,35727,35728,35729,35730,35731,35732,35733,35734,35735,35736,35737,35738,35739,35740,35741,35742,35743,35756,35761,35771,35783,35792,35818,35849,35870,20303,27880,31069,39547,25235,29226,25341,19987,30742,36716,25776,36186,31686,26729,24196,35013,22918,25758,22766,29366,26894,38181,36861,36184,22368,32512,35846,20934,25417,25305,21331,26700,29730,33537,37196,21828,30528,28796,27978,20857,21672,36164,23039,28363,28100,23388,32043,20180,31869,28371,23376,33258,28173,23383,39683,26837,36394,23447,32508,24635,32437,37049,36208,22863,25549,31199,36275,21330,26063,31062,35781,38459,32452,38075,32386,22068,37257,26368,32618,23562,36981,26152,24038,20304,26590,20570,20316,22352,24231,59408,59409,59410,59411,59412,35896,35897,35898,35899,35900,35901,35902,35903,35904,35906,35907,35908,35909,35912,35914,35915,35917,35918,35919,35920,35921,35922,35923,35924,35926,35927,35928,35929,35931,35932,35933,35934,35935,35936,35939,35940,35941,35942,35943,35944,35945,35948,35949,35950,35951,35952,35953,35954,35956,35957,35958,35959,35963,35964,35965,35966,35967,35968,35969,35971,35972,35974,35975,35976,35979,35981,35982,35983,35984,35985,35986,35987,35989,35990,35991,35993,35994,35995,35996,35997,35998,35999,36000,36001,36002,36003,36004,36005,36006,36007,36008,36009,36010,36011,36012,36013,20109,19980,20800,19984,24319,21317,19989,20120,19998,39730,23404,22121,20008,31162,20031,21269,20039,22829,29243,21358,27664,22239,32996,39319,27603,30590,40727,20022,20127,40720,20060,20073,20115,33416,23387,21868,22031,20164,21389,21405,21411,21413,21422,38757,36189,21274,21493,21286,21294,21310,36188,21350,21347,20994,21000,21006,21037,21043,21055,21056,21068,21086,21089,21084,33967,21117,21122,21121,21136,21139,20866,32596,20155,20163,20169,20162,20200,20193,20203,20190,20251,20211,20258,20324,20213,20261,20263,20233,20267,20318,20327,25912,20314,20317,36014,36015,36016,36017,36018,36019,36020,36021,36022,36023,36024,36025,36026,36027,36028,36029,36030,36031,36032,36033,36034,36035,36036,36037,36038,36039,36040,36041,36042,36043,36044,36045,36046,36047,36048,36049,36050,36051,36052,36053,36054,36055,36056,36057,36058,36059,36060,36061,36062,36063,36064,36065,36066,36067,36068,36069,36070,36071,36072,36073,36074,36075,36076,36077,36078,36079,36080,36081,36082,36083,36084,36085,36086,36087,36088,36089,36090,36091,36092,36093,36094,36095,36096,36097,36098,36099,36100,36101,36102,36103,36104,36105,36106,36107,36108,36109,20319,20311,20274,20285,20342,20340,20369,20361,20355,20367,20350,20347,20394,20348,20396,20372,20454,20456,20458,20421,20442,20451,20444,20433,20447,20472,20521,20556,20467,20524,20495,20526,20525,20478,20508,20492,20517,20520,20606,20547,20565,20552,20558,20588,20603,20645,20647,20649,20666,20694,20742,20717,20716,20710,20718,20743,20747,20189,27709,20312,20325,20430,40864,27718,31860,20846,24061,40649,39320,20865,22804,21241,21261,35335,21264,20971,22809,20821,20128,20822,20147,34926,34980,20149,33044,35026,31104,23348,34819,32696,20907,20913,20925,20924,36110,36111,36112,36113,36114,36115,36116,36117,36118,36119,36120,36121,36122,36123,36124,36128,36177,36178,36183,36191,36197,36200,36201,36202,36204,36206,36207,36209,36210,36216,36217,36218,36219,36220,36221,36222,36223,36224,36226,36227,36230,36231,36232,36233,36236,36237,36238,36239,36240,36242,36243,36245,36246,36247,36248,36249,36250,36251,36252,36253,36254,36256,36257,36258,36260,36261,36262,36263,36264,36265,36266,36267,36268,36269,36270,36271,36272,36274,36278,36279,36281,36283,36285,36288,36289,36290,36293,36295,36296,36297,36298,36301,36304,36306,36307,36308,20935,20886,20898,20901,35744,35750,35751,35754,35764,35765,35767,35778,35779,35787,35791,35790,35794,35795,35796,35798,35800,35801,35804,35807,35808,35812,35816,35817,35822,35824,35827,35830,35833,35836,35839,35840,35842,35844,35847,35852,35855,35857,35858,35860,35861,35862,35865,35867,35864,35869,35871,35872,35873,35877,35879,35882,35883,35886,35887,35890,35891,35893,35894,21353,21370,38429,38434,38433,38449,38442,38461,38460,38466,38473,38484,38495,38503,38508,38514,38516,38536,38541,38551,38576,37015,37019,37021,37017,37036,37025,37044,37043,37046,37050,36309,36312,36313,36316,36320,36321,36322,36325,36326,36327,36329,36333,36334,36336,36337,36338,36340,36342,36348,36350,36351,36352,36353,36354,36355,36356,36358,36359,36360,36363,36365,36366,36368,36369,36370,36371,36373,36374,36375,36376,36377,36378,36379,36380,36384,36385,36388,36389,36390,36391,36392,36395,36397,36400,36402,36403,36404,36406,36407,36408,36411,36412,36414,36415,36419,36421,36422,36428,36429,36430,36431,36432,36435,36436,36437,36438,36439,36440,36442,36443,36444,36445,36446,36447,36448,36449,36450,36451,36452,36453,36455,36456,36458,36459,36462,36465,37048,37040,37071,37061,37054,37072,37060,37063,37075,37094,37090,37084,37079,37083,37099,37103,37118,37124,37154,37150,37155,37169,37167,37177,37187,37190,21005,22850,21154,21164,21165,21182,21759,21200,21206,21232,21471,29166,30669,24308,20981,20988,39727,21430,24321,30042,24047,22348,22441,22433,22654,22716,22725,22737,22313,22316,22314,22323,22329,22318,22319,22364,22331,22338,22377,22405,22379,22406,22396,22395,22376,22381,22390,22387,22445,22436,22412,22450,22479,22439,22452,22419,22432,22485,22488,22490,22489,22482,22456,22516,22511,22520,22500,22493,36467,36469,36471,36472,36473,36474,36475,36477,36478,36480,36482,36483,36484,36486,36488,36489,36490,36491,36492,36493,36494,36497,36498,36499,36501,36502,36503,36504,36505,36506,36507,36509,36511,36512,36513,36514,36515,36516,36517,36518,36519,36520,36521,36522,36525,36526,36528,36529,36531,36532,36533,36534,36535,36536,36537,36539,36540,36541,36542,36543,36544,36545,36546,36547,36548,36549,36550,36551,36552,36553,36554,36555,36556,36557,36559,36560,36561,36562,36563,36564,36565,36566,36567,36568,36569,36570,36571,36572,36573,36574,36575,36576,36577,36578,36579,36580,22539,22541,22525,22509,22528,22558,22553,22596,22560,22629,22636,22657,22665,22682,22656,39336,40729,25087,33401,33405,33407,33423,33418,33448,33412,33422,33425,33431,33433,33451,33464,33470,33456,33480,33482,33507,33432,33463,33454,33483,33484,33473,33449,33460,33441,33450,33439,33476,33486,33444,33505,33545,33527,33508,33551,33543,33500,33524,33490,33496,33548,33531,33491,33553,33562,33542,33556,33557,33504,33493,33564,33617,33627,33628,33544,33682,33596,33588,33585,33691,33630,33583,33615,33607,33603,33631,33600,33559,33632,33581,33594,33587,33638,33637,36581,36582,36583,36584,36585,36586,36587,36588,36589,36590,36591,36592,36593,36594,36595,36596,36597,36598,36599,36600,36601,36602,36603,36604,36605,36606,36607,36608,36609,36610,36611,36612,36613,36614,36615,36616,36617,36618,36619,36620,36621,36622,36623,36624,36625,36626,36627,36628,36629,36630,36631,36632,36633,36634,36635,36636,36637,36638,36639,36640,36641,36642,36643,36644,36645,36646,36647,36648,36649,36650,36651,36652,36653,36654,36655,36656,36657,36658,36659,36660,36661,36662,36663,36664,36665,36666,36667,36668,36669,36670,36671,36672,36673,36674,36675,36676,33640,33563,33641,33644,33642,33645,33646,33712,33656,33715,33716,33696,33706,33683,33692,33669,33660,33718,33705,33661,33720,33659,33688,33694,33704,33722,33724,33729,33793,33765,33752,22535,33816,33803,33757,33789,33750,33820,33848,33809,33798,33748,33759,33807,33795,33784,33785,33770,33733,33728,33830,33776,33761,33884,33873,33882,33881,33907,33927,33928,33914,33929,33912,33852,33862,33897,33910,33932,33934,33841,33901,33985,33997,34000,34022,33981,34003,33994,33983,33978,34016,33953,33977,33972,33943,34021,34019,34060,29965,34104,34032,34105,34079,34106,36677,36678,36679,36680,36681,36682,36683,36684,36685,36686,36687,36688,36689,36690,36691,36692,36693,36694,36695,36696,36697,36698,36699,36700,36701,36702,36703,36704,36705,36706,36707,36708,36709,36714,36736,36748,36754,36765,36768,36769,36770,36772,36773,36774,36775,36778,36780,36781,36782,36783,36786,36787,36788,36789,36791,36792,36794,36795,36796,36799,36800,36803,36806,36809,36810,36811,36812,36813,36815,36818,36822,36823,36826,36832,36833,36835,36839,36844,36847,36849,36850,36852,36853,36854,36858,36859,36860,36862,36863,36871,36872,36876,36878,36883,36885,36888,34134,34107,34047,34044,34137,34120,34152,34148,34142,34170,30626,34115,34162,34171,34212,34216,34183,34191,34169,34222,34204,34181,34233,34231,34224,34259,34241,34268,34303,34343,34309,34345,34326,34364,24318,24328,22844,22849,32823,22869,22874,22872,21263,23586,23589,23596,23604,25164,25194,25247,25275,25290,25306,25303,25326,25378,25334,25401,25419,25411,25517,25590,25457,25466,25486,25524,25453,25516,25482,25449,25518,25532,25586,25592,25568,25599,25540,25566,25550,25682,25542,25534,25669,25665,25611,25627,25632,25612,25638,25633,25694,25732,25709,25750,36889,36892,36899,36900,36901,36903,36904,36905,36906,36907,36908,36912,36913,36914,36915,36916,36919,36921,36922,36925,36927,36928,36931,36933,36934,36936,36937,36938,36939,36940,36942,36948,36949,36950,36953,36954,36956,36957,36958,36959,36960,36961,36964,36966,36967,36969,36970,36971,36972,36975,36976,36977,36978,36979,36982,36983,36984,36985,36986,36987,36988,36990,36993,36996,36997,36998,36999,37001,37002,37004,37005,37006,37007,37008,37010,37012,37014,37016,37018,37020,37022,37023,37024,37028,37029,37031,37032,37033,37035,37037,37042,37047,37052,37053,37055,37056,25722,25783,25784,25753,25786,25792,25808,25815,25828,25826,25865,25893,25902,24331,24530,29977,24337,21343,21489,21501,21481,21480,21499,21522,21526,21510,21579,21586,21587,21588,21590,21571,21537,21591,21593,21539,21554,21634,21652,21623,21617,21604,21658,21659,21636,21622,21606,21661,21712,21677,21698,21684,21714,21671,21670,21715,21716,21618,21667,21717,21691,21695,21708,21721,21722,21724,21673,21674,21668,21725,21711,21726,21787,21735,21792,21757,21780,21747,21794,21795,21775,21777,21799,21802,21863,21903,21941,21833,21869,21825,21845,21823,21840,21820,37058,37059,37062,37064,37065,37067,37068,37069,37074,37076,37077,37078,37080,37081,37082,37086,37087,37088,37091,37092,37093,37097,37098,37100,37102,37104,37105,37106,37107,37109,37110,37111,37113,37114,37115,37116,37119,37120,37121,37123,37125,37126,37127,37128,37129,37130,37131,37132,37133,37134,37135,37136,37137,37138,37139,37140,37141,37142,37143,37144,37146,37147,37148,37149,37151,37152,37153,37156,37157,37158,37159,37160,37161,37162,37163,37164,37165,37166,37168,37170,37171,37172,37173,37174,37175,37176,37178,37179,37180,37181,37182,37183,37184,37185,37186,37188,21815,21846,21877,21878,21879,21811,21808,21852,21899,21970,21891,21937,21945,21896,21889,21919,21886,21974,21905,21883,21983,21949,21950,21908,21913,21994,22007,21961,22047,21969,21995,21996,21972,21990,21981,21956,21999,21989,22002,22003,21964,21965,21992,22005,21988,36756,22046,22024,22028,22017,22052,22051,22014,22016,22055,22061,22104,22073,22103,22060,22093,22114,22105,22108,22092,22100,22150,22116,22129,22123,22139,22140,22149,22163,22191,22228,22231,22237,22241,22261,22251,22265,22271,22276,22282,22281,22300,24079,24089,24084,24081,24113,24123,24124,37189,37191,37192,37201,37203,37204,37205,37206,37208,37209,37211,37212,37215,37216,37222,37223,37224,37227,37229,37235,37242,37243,37244,37248,37249,37250,37251,37252,37254,37256,37258,37262,37263,37267,37268,37269,37270,37271,37272,37273,37276,37277,37278,37279,37280,37281,37284,37285,37286,37287,37288,37289,37291,37292,37296,37297,37298,37299,37302,37303,37304,37305,37307,37308,37309,37310,37311,37312,37313,37314,37315,37316,37317,37318,37320,37323,37328,37330,37331,37332,37333,37334,37335,37336,37337,37338,37339,37341,37342,37343,37344,37345,37346,37347,37348,37349,24119,24132,24148,24155,24158,24161,23692,23674,23693,23696,23702,23688,23704,23705,23697,23706,23708,23733,23714,23741,23724,23723,23729,23715,23745,23735,23748,23762,23780,23755,23781,23810,23811,23847,23846,23854,23844,23838,23814,23835,23896,23870,23860,23869,23916,23899,23919,23901,23915,23883,23882,23913,23924,23938,23961,23965,35955,23991,24005,24435,24439,24450,24455,24457,24460,24469,24473,24476,24488,24493,24501,24508,34914,24417,29357,29360,29364,29367,29368,29379,29377,29390,29389,29394,29416,29423,29417,29426,29428,29431,29441,29427,29443,29434,37350,37351,37352,37353,37354,37355,37356,37357,37358,37359,37360,37361,37362,37363,37364,37365,37366,37367,37368,37369,37370,37371,37372,37373,37374,37375,37376,37377,37378,37379,37380,37381,37382,37383,37384,37385,37386,37387,37388,37389,37390,37391,37392,37393,37394,37395,37396,37397,37398,37399,37400,37401,37402,37403,37404,37405,37406,37407,37408,37409,37410,37411,37412,37413,37414,37415,37416,37417,37418,37419,37420,37421,37422,37423,37424,37425,37426,37427,37428,37429,37430,37431,37432,37433,37434,37435,37436,37437,37438,37439,37440,37441,37442,37443,37444,37445,29435,29463,29459,29473,29450,29470,29469,29461,29474,29497,29477,29484,29496,29489,29520,29517,29527,29536,29548,29551,29566,33307,22821,39143,22820,22786,39267,39271,39272,39273,39274,39275,39276,39284,39287,39293,39296,39300,39303,39306,39309,39312,39313,39315,39316,39317,24192,24209,24203,24214,24229,24224,24249,24245,24254,24243,36179,24274,24273,24283,24296,24298,33210,24516,24521,24534,24527,24579,24558,24580,24545,24548,24574,24581,24582,24554,24557,24568,24601,24629,24614,24603,24591,24589,24617,24619,24586,24639,24609,24696,24697,24699,24698,24642,37446,37447,37448,37449,37450,37451,37452,37453,37454,37455,37456,37457,37458,37459,37460,37461,37462,37463,37464,37465,37466,37467,37468,37469,37470,37471,37472,37473,37474,37475,37476,37477,37478,37479,37480,37481,37482,37483,37484,37485,37486,37487,37488,37489,37490,37491,37493,37494,37495,37496,37497,37498,37499,37500,37501,37502,37503,37504,37505,37506,37507,37508,37509,37510,37511,37512,37513,37514,37515,37516,37517,37519,37520,37521,37522,37523,37524,37525,37526,37527,37528,37529,37530,37531,37532,37533,37534,37535,37536,37537,37538,37539,37540,37541,37542,37543,24682,24701,24726,24730,24749,24733,24707,24722,24716,24731,24812,24763,24753,24797,24792,24774,24794,24756,24864,24870,24853,24867,24820,24832,24846,24875,24906,24949,25004,24980,24999,25015,25044,25077,24541,38579,38377,38379,38385,38387,38389,38390,38396,38398,38403,38404,38406,38408,38410,38411,38412,38413,38415,38418,38421,38422,38423,38425,38426,20012,29247,25109,27701,27732,27740,27722,27811,27781,27792,27796,27788,27752,27753,27764,27766,27782,27817,27856,27860,27821,27895,27896,27889,27863,27826,27872,27862,27898,27883,27886,27825,27859,27887,27902,37544,37545,37546,37547,37548,37549,37551,37552,37553,37554,37555,37556,37557,37558,37559,37560,37561,37562,37563,37564,37565,37566,37567,37568,37569,37570,37571,37572,37573,37574,37575,37577,37578,37579,37580,37581,37582,37583,37584,37585,37586,37587,37588,37589,37590,37591,37592,37593,37594,37595,37596,37597,37598,37599,37600,37601,37602,37603,37604,37605,37606,37607,37608,37609,37610,37611,37612,37613,37614,37615,37616,37617,37618,37619,37620,37621,37622,37623,37624,37625,37626,37627,37628,37629,37630,37631,37632,37633,37634,37635,37636,37637,37638,37639,37640,37641,27961,27943,27916,27971,27976,27911,27908,27929,27918,27947,27981,27950,27957,27930,27983,27986,27988,27955,28049,28015,28062,28064,27998,28051,28052,27996,28000,28028,28003,28186,28103,28101,28126,28174,28095,28128,28177,28134,28125,28121,28182,28075,28172,28078,28203,28270,28238,28267,28338,28255,28294,28243,28244,28210,28197,28228,28383,28337,28312,28384,28461,28386,28325,28327,28349,28347,28343,28375,28340,28367,28303,28354,28319,28514,28486,28487,28452,28437,28409,28463,28470,28491,28532,28458,28425,28457,28553,28557,28556,28536,28530,28540,28538,28625,37642,37643,37644,37645,37646,37647,37648,37649,37650,37651,37652,37653,37654,37655,37656,37657,37658,37659,37660,37661,37662,37663,37664,37665,37666,37667,37668,37669,37670,37671,37672,37673,37674,37675,37676,37677,37678,37679,37680,37681,37682,37683,37684,37685,37686,37687,37688,37689,37690,37691,37692,37693,37695,37696,37697,37698,37699,37700,37701,37702,37703,37704,37705,37706,37707,37708,37709,37710,37711,37712,37713,37714,37715,37716,37717,37718,37719,37720,37721,37722,37723,37724,37725,37726,37727,37728,37729,37730,37731,37732,37733,37734,37735,37736,37737,37739,28617,28583,28601,28598,28610,28641,28654,28638,28640,28655,28698,28707,28699,28729,28725,28751,28766,23424,23428,23445,23443,23461,23480,29999,39582,25652,23524,23534,35120,23536,36423,35591,36790,36819,36821,36837,36846,36836,36841,36838,36851,36840,36869,36868,36875,36902,36881,36877,36886,36897,36917,36918,36909,36911,36932,36945,36946,36944,36968,36952,36962,36955,26297,36980,36989,36994,37000,36995,37003,24400,24407,24406,24408,23611,21675,23632,23641,23409,23651,23654,32700,24362,24361,24365,33396,24380,39739,23662,22913,22915,22925,22953,22954,22947,37740,37741,37742,37743,37744,37745,37746,37747,37748,37749,37750,37751,37752,37753,37754,37755,37756,37757,37758,37759,37760,37761,37762,37763,37764,37765,37766,37767,37768,37769,37770,37771,37772,37773,37774,37776,37777,37778,37779,37780,37781,37782,37783,37784,37785,37786,37787,37788,37789,37790,37791,37792,37793,37794,37795,37796,37797,37798,37799,37800,37801,37802,37803,37804,37805,37806,37807,37808,37809,37810,37811,37812,37813,37814,37815,37816,37817,37818,37819,37820,37821,37822,37823,37824,37825,37826,37827,37828,37829,37830,37831,37832,37833,37835,37836,37837,22935,22986,22955,22942,22948,22994,22962,22959,22999,22974,23045,23046,23005,23048,23011,23000,23033,23052,23049,23090,23092,23057,23075,23059,23104,23143,23114,23125,23100,23138,23157,33004,23210,23195,23159,23162,23230,23275,23218,23250,23252,23224,23264,23267,23281,23254,23270,23256,23260,23305,23319,23318,23346,23351,23360,23573,23580,23386,23397,23411,23377,23379,23394,39541,39543,39544,39546,39551,39549,39552,39553,39557,39560,39562,39568,39570,39571,39574,39576,39579,39580,39581,39583,39584,39586,39587,39589,39591,32415,32417,32419,32421,32424,32425,37838,37839,37840,37841,37842,37843,37844,37845,37847,37848,37849,37850,37851,37852,37853,37854,37855,37856,37857,37858,37859,37860,37861,37862,37863,37864,37865,37866,37867,37868,37869,37870,37871,37872,37873,37874,37875,37876,37877,37878,37879,37880,37881,37882,37883,37884,37885,37886,37887,37888,37889,37890,37891,37892,37893,37894,37895,37896,37897,37898,37899,37900,37901,37902,37903,37904,37905,37906,37907,37908,37909,37910,37911,37912,37913,37914,37915,37916,37917,37918,37919,37920,37921,37922,37923,37924,37925,37926,37927,37928,37929,37930,37931,37932,37933,37934,32429,32432,32446,32448,32449,32450,32457,32459,32460,32464,32468,32471,32475,32480,32481,32488,32491,32494,32495,32497,32498,32525,32502,32506,32507,32510,32513,32514,32515,32519,32520,32523,32524,32527,32529,32530,32535,32537,32540,32539,32543,32545,32546,32547,32548,32549,32550,32551,32554,32555,32556,32557,32559,32560,32561,32562,32563,32565,24186,30079,24027,30014,37013,29582,29585,29614,29602,29599,29647,29634,29649,29623,29619,29632,29641,29640,29669,29657,39036,29706,29673,29671,29662,29626,29682,29711,29738,29787,29734,29733,29736,29744,29742,29740,37935,37936,37937,37938,37939,37940,37941,37942,37943,37944,37945,37946,37947,37948,37949,37951,37952,37953,37954,37955,37956,37957,37958,37959,37960,37961,37962,37963,37964,37965,37966,37967,37968,37969,37970,37971,37972,37973,37974,37975,37976,37977,37978,37979,37980,37981,37982,37983,37984,37985,37986,37987,37988,37989,37990,37991,37992,37993,37994,37996,37997,37998,37999,38000,38001,38002,38003,38004,38005,38006,38007,38008,38009,38010,38011,38012,38013,38014,38015,38016,38017,38018,38019,38020,38033,38038,38040,38087,38095,38099,38100,38106,38118,38139,38172,38176,29723,29722,29761,29788,29783,29781,29785,29815,29805,29822,29852,29838,29824,29825,29831,29835,29854,29864,29865,29840,29863,29906,29882,38890,38891,38892,26444,26451,26462,26440,26473,26533,26503,26474,26483,26520,26535,26485,26536,26526,26541,26507,26487,26492,26608,26633,26584,26634,26601,26544,26636,26585,26549,26586,26547,26589,26624,26563,26552,26594,26638,26561,26621,26674,26675,26720,26721,26702,26722,26692,26724,26755,26653,26709,26726,26689,26727,26688,26686,26698,26697,26665,26805,26767,26740,26743,26771,26731,26818,26990,26876,26911,26912,26873,38183,38195,38205,38211,38216,38219,38229,38234,38240,38254,38260,38261,38263,38264,38265,38266,38267,38268,38269,38270,38272,38273,38274,38275,38276,38277,38278,38279,38280,38281,38282,38283,38284,38285,38286,38287,38288,38289,38290,38291,38292,38293,38294,38295,38296,38297,38298,38299,38300,38301,38302,38303,38304,38305,38306,38307,38308,38309,38310,38311,38312,38313,38314,38315,38316,38317,38318,38319,38320,38321,38322,38323,38324,38325,38326,38327,38328,38329,38330,38331,38332,38333,38334,38335,38336,38337,38338,38339,38340,38341,38342,38343,38344,38345,38346,38347,26916,26864,26891,26881,26967,26851,26896,26993,26937,26976,26946,26973,27012,26987,27008,27032,27000,26932,27084,27015,27016,27086,27017,26982,26979,27001,27035,27047,27067,27051,27053,27092,27057,27073,27082,27103,27029,27104,27021,27135,27183,27117,27159,27160,27237,27122,27204,27198,27296,27216,27227,27189,27278,27257,27197,27176,27224,27260,27281,27280,27305,27287,27307,29495,29522,27521,27522,27527,27524,27538,27539,27533,27546,27547,27553,27562,36715,36717,36721,36722,36723,36725,36726,36728,36727,36729,36730,36732,36734,36737,36738,36740,36743,36747,38348,38349,38350,38351,38352,38353,38354,38355,38356,38357,38358,38359,38360,38361,38362,38363,38364,38365,38366,38367,38368,38369,38370,38371,38372,38373,38374,38375,38380,38399,38407,38419,38424,38427,38430,38432,38435,38436,38437,38438,38439,38440,38441,38443,38444,38445,38447,38448,38455,38456,38457,38458,38462,38465,38467,38474,38478,38479,38481,38482,38483,38486,38487,38488,38489,38490,38492,38493,38494,38496,38499,38501,38502,38507,38509,38510,38511,38512,38513,38515,38520,38521,38522,38523,38524,38525,38526,38527,38528,38529,38530,38531,38532,38535,38537,38538,36749,36750,36751,36760,36762,36558,25099,25111,25115,25119,25122,25121,25125,25124,25132,33255,29935,29940,29951,29967,29969,29971,25908,26094,26095,26096,26122,26137,26482,26115,26133,26112,28805,26359,26141,26164,26161,26166,26165,32774,26207,26196,26177,26191,26198,26209,26199,26231,26244,26252,26279,26269,26302,26331,26332,26342,26345,36146,36147,36150,36155,36157,36160,36165,36166,36168,36169,36167,36173,36181,36185,35271,35274,35275,35276,35278,35279,35280,35281,29294,29343,29277,29286,29295,29310,29311,29316,29323,29325,29327,29330,25352,25394,25520,38540,38542,38545,38546,38547,38549,38550,38554,38555,38557,38558,38559,38560,38561,38562,38563,38564,38565,38566,38568,38569,38570,38571,38572,38573,38574,38575,38577,38578,38580,38581,38583,38584,38586,38587,38591,38594,38595,38600,38602,38603,38608,38609,38611,38612,38614,38615,38616,38617,38618,38619,38620,38621,38622,38623,38625,38626,38627,38628,38629,38630,38631,38635,38636,38637,38638,38640,38641,38642,38644,38645,38648,38650,38651,38652,38653,38655,38658,38659,38661,38666,38667,38668,38672,38673,38674,38676,38677,38679,38680,38681,38682,38683,38685,38687,38688,25663,25816,32772,27626,27635,27645,27637,27641,27653,27655,27654,27661,27669,27672,27673,27674,27681,27689,27684,27690,27698,25909,25941,25963,29261,29266,29270,29232,34402,21014,32927,32924,32915,32956,26378,32957,32945,32939,32941,32948,32951,32999,33000,33001,33002,32987,32962,32964,32985,32973,32983,26384,32989,33003,33009,33012,33005,33037,33038,33010,33020,26389,33042,35930,33078,33054,33068,33048,33074,33096,33100,33107,33140,33113,33114,33137,33120,33129,33148,33149,33133,33127,22605,23221,33160,33154,33169,28373,33187,33194,33228,26406,33226,33211,38689,38690,38691,38692,38693,38694,38695,38696,38697,38699,38700,38702,38703,38705,38707,38708,38709,38710,38711,38714,38715,38716,38717,38719,38720,38721,38722,38723,38724,38725,38726,38727,38728,38729,38730,38731,38732,38733,38734,38735,38736,38737,38740,38741,38743,38744,38746,38748,38749,38751,38755,38756,38758,38759,38760,38762,38763,38764,38765,38766,38767,38768,38769,38770,38773,38775,38776,38777,38778,38779,38781,38782,38783,38784,38785,38786,38787,38788,38790,38791,38792,38793,38794,38796,38798,38799,38800,38803,38805,38806,38807,38809,38810,38811,38812,38813,33217,33190,27428,27447,27449,27459,27462,27481,39121,39122,39123,39125,39129,39130,27571,24384,27586,35315,26000,40785,26003,26044,26054,26052,26051,26060,26062,26066,26070,28800,28828,28822,28829,28859,28864,28855,28843,28849,28904,28874,28944,28947,28950,28975,28977,29043,29020,29032,28997,29042,29002,29048,29050,29080,29107,29109,29096,29088,29152,29140,29159,29177,29213,29224,28780,28952,29030,29113,25150,25149,25155,25160,25161,31035,31040,31046,31049,31067,31068,31059,31066,31074,31063,31072,31087,31079,31098,31109,31114,31130,31143,31155,24529,24528,38814,38815,38817,38818,38820,38821,38822,38823,38824,38825,38826,38828,38830,38832,38833,38835,38837,38838,38839,38840,38841,38842,38843,38844,38845,38846,38847,38848,38849,38850,38851,38852,38853,38854,38855,38856,38857,38858,38859,38860,38861,38862,38863,38864,38865,38866,38867,38868,38869,38870,38871,38872,38873,38874,38875,38876,38877,38878,38879,38880,38881,38882,38883,38884,38885,38888,38894,38895,38896,38897,38898,38900,38903,38904,38905,38906,38907,38908,38909,38910,38911,38912,38913,38914,38915,38916,38917,38918,38919,38920,38921,38922,38923,38924,38925,38926,24636,24669,24666,24679,24641,24665,24675,24747,24838,24845,24925,25001,24989,25035,25041,25094,32896,32895,27795,27894,28156,30710,30712,30720,30729,30743,30744,30737,26027,30765,30748,30749,30777,30778,30779,30751,30780,30757,30764,30755,30761,30798,30829,30806,30807,30758,30800,30791,30796,30826,30875,30867,30874,30855,30876,30881,30883,30898,30905,30885,30932,30937,30921,30956,30962,30981,30964,30995,31012,31006,31028,40859,40697,40699,40700,30449,30468,30477,30457,30471,30472,30490,30498,30489,30509,30502,30517,30520,30544,30545,30535,30531,30554,30568,38927,38928,38929,38930,38931,38932,38933,38934,38935,38936,38937,38938,38939,38940,38941,38942,38943,38944,38945,38946,38947,38948,38949,38950,38951,38952,38953,38954,38955,38956,38957,38958,38959,38960,38961,38962,38963,38964,38965,38966,38967,38968,38969,38970,38971,38972,38973,38974,38975,38976,38977,38978,38979,38980,38981,38982,38983,38984,38985,38986,38987,38988,38989,38990,38991,38992,38993,38994,38995,38996,38997,38998,38999,39000,39001,39002,39003,39004,39005,39006,39007,39008,39009,39010,39011,39012,39013,39014,39015,39016,39017,39018,39019,39020,39021,39022,30562,30565,30591,30605,30589,30592,30604,30609,30623,30624,30640,30645,30653,30010,30016,30030,30027,30024,30043,30066,30073,30083,32600,32609,32607,35400,32616,32628,32625,32633,32641,32638,30413,30437,34866,38021,38022,38023,38027,38026,38028,38029,38031,38032,38036,38039,38037,38042,38043,38044,38051,38052,38059,38058,38061,38060,38063,38064,38066,38068,38070,38071,38072,38073,38074,38076,38077,38079,38084,38088,38089,38090,38091,38092,38093,38094,38096,38097,38098,38101,38102,38103,38105,38104,38107,38110,38111,38112,38114,38116,38117,38119,38120,38122,39023,39024,39025,39026,39027,39028,39051,39054,39058,39061,39065,39075,39080,39081,39082,39083,39084,39085,39086,39087,39088,39089,39090,39091,39092,39093,39094,39095,39096,39097,39098,39099,39100,39101,39102,39103,39104,39105,39106,39107,39108,39109,39110,39111,39112,39113,39114,39115,39116,39117,39119,39120,39124,39126,39127,39131,39132,39133,39136,39137,39138,39139,39140,39141,39142,39145,39146,39147,39148,39149,39150,39151,39152,39153,39154,39155,39156,39157,39158,39159,39160,39161,39162,39163,39164,39165,39166,39167,39168,39169,39170,39171,39172,39173,39174,39175,38121,38123,38126,38127,38131,38132,38133,38135,38137,38140,38141,38143,38147,38146,38150,38151,38153,38154,38157,38158,38159,38162,38163,38164,38165,38166,38168,38171,38173,38174,38175,38178,38186,38187,38185,38188,38193,38194,38196,38198,38199,38200,38204,38206,38207,38210,38197,38212,38213,38214,38217,38220,38222,38223,38226,38227,38228,38230,38231,38232,38233,38235,38238,38239,38237,38241,38242,38244,38245,38246,38247,38248,38249,38250,38251,38252,38255,38257,38258,38259,38202,30695,30700,38601,31189,31213,31203,31211,31238,23879,31235,31234,31262,31252,39176,39177,39178,39179,39180,39182,39183,39185,39186,39187,39188,39189,39190,39191,39192,39193,39194,39195,39196,39197,39198,39199,39200,39201,39202,39203,39204,39205,39206,39207,39208,39209,39210,39211,39212,39213,39215,39216,39217,39218,39219,39220,39221,39222,39223,39224,39225,39226,39227,39228,39229,39230,39231,39232,39233,39234,39235,39236,39237,39238,39239,39240,39241,39242,39243,39244,39245,39246,39247,39248,39249,39250,39251,39254,39255,39256,39257,39258,39259,39260,39261,39262,39263,39264,39265,39266,39268,39270,39283,39288,39289,39291,39294,39298,39299,39305,31289,31287,31313,40655,39333,31344,30344,30350,30355,30361,30372,29918,29920,29996,40480,40482,40488,40489,40490,40491,40492,40498,40497,40502,40504,40503,40505,40506,40510,40513,40514,40516,40518,40519,40520,40521,40523,40524,40526,40529,40533,40535,40538,40539,40540,40542,40547,40550,40551,40552,40553,40554,40555,40556,40561,40557,40563,30098,30100,30102,30112,30109,30124,30115,30131,30132,30136,30148,30129,30128,30147,30146,30166,30157,30179,30184,30182,30180,30187,30183,30211,30193,30204,30207,30224,30208,30213,30220,30231,30218,30245,30232,30229,30233,39308,39310,39322,39323,39324,39325,39326,39327,39328,39329,39330,39331,39332,39334,39335,39337,39338,39339,39340,39341,39342,39343,39344,39345,39346,39347,39348,39349,39350,39351,39352,39353,39354,39355,39356,39357,39358,39359,39360,39361,39362,39363,39364,39365,39366,39367,39368,39369,39370,39371,39372,39373,39374,39375,39376,39377,39378,39379,39380,39381,39382,39383,39384,39385,39386,39387,39388,39389,39390,39391,39392,39393,39394,39395,39396,39397,39398,39399,39400,39401,39402,39403,39404,39405,39406,39407,39408,39409,39410,39411,39412,39413,39414,39415,39416,39417,30235,30268,30242,30240,30272,30253,30256,30271,30261,30275,30270,30259,30285,30302,30292,30300,30294,30315,30319,32714,31462,31352,31353,31360,31366,31368,31381,31398,31392,31404,31400,31405,31411,34916,34921,34930,34941,34943,34946,34978,35014,34999,35004,35017,35042,35022,35043,35045,35057,35098,35068,35048,35070,35056,35105,35097,35091,35099,35082,35124,35115,35126,35137,35174,35195,30091,32997,30386,30388,30684,32786,32788,32790,32796,32800,32802,32805,32806,32807,32809,32808,32817,32779,32821,32835,32838,32845,32850,32873,32881,35203,39032,39040,39043,39418,39419,39420,39421,39422,39423,39424,39425,39426,39427,39428,39429,39430,39431,39432,39433,39434,39435,39436,39437,39438,39439,39440,39441,39442,39443,39444,39445,39446,39447,39448,39449,39450,39451,39452,39453,39454,39455,39456,39457,39458,39459,39460,39461,39462,39463,39464,39465,39466,39467,39468,39469,39470,39471,39472,39473,39474,39475,39476,39477,39478,39479,39480,39481,39482,39483,39484,39485,39486,39487,39488,39489,39490,39491,39492,39493,39494,39495,39496,39497,39498,39499,39500,39501,39502,39503,39504,39505,39506,39507,39508,39509,39510,39511,39512,39513,39049,39052,39053,39055,39060,39066,39067,39070,39071,39073,39074,39077,39078,34381,34388,34412,34414,34431,34426,34428,34427,34472,34445,34443,34476,34461,34471,34467,34474,34451,34473,34486,34500,34485,34510,34480,34490,34481,34479,34505,34511,34484,34537,34545,34546,34541,34547,34512,34579,34526,34548,34527,34520,34513,34563,34567,34552,34568,34570,34573,34569,34595,34619,34590,34597,34606,34586,34622,34632,34612,34609,34601,34615,34623,34690,34594,34685,34686,34683,34656,34672,34636,34670,34699,34643,34659,34684,34660,34649,34661,34707,34735,34728,34770,39514,39515,39516,39517,39518,39519,39520,39521,39522,39523,39524,39525,39526,39527,39528,39529,39530,39531,39538,39555,39561,39565,39566,39572,39573,39577,39590,39593,39594,39595,39596,39597,39598,39599,39602,39603,39604,39605,39609,39611,39613,39614,39615,39619,39620,39622,39623,39624,39625,39626,39629,39630,39631,39632,39634,39636,39637,39638,39639,39641,39642,39643,39644,39645,39646,39648,39650,39651,39652,39653,39655,39656,39657,39658,39660,39662,39664,39665,39666,39667,39668,39669,39670,39671,39672,39674,39676,39677,39678,39679,39680,39681,39682,39684,39685,39686,34758,34696,34693,34733,34711,34691,34731,34789,34732,34741,34739,34763,34771,34749,34769,34752,34762,34779,34794,34784,34798,34838,34835,34814,34826,34843,34849,34873,34876,32566,32578,32580,32581,33296,31482,31485,31496,31491,31492,31509,31498,31531,31503,31559,31544,31530,31513,31534,31537,31520,31525,31524,31539,31550,31518,31576,31578,31557,31605,31564,31581,31584,31598,31611,31586,31602,31601,31632,31654,31655,31672,31660,31645,31656,31621,31658,31644,31650,31659,31668,31697,31681,31692,31709,31706,31717,31718,31722,31756,31742,31740,31759,31766,31755,39687,39689,39690,39691,39692,39693,39694,39696,39697,39698,39700,39701,39702,39703,39704,39705,39706,39707,39708,39709,39710,39712,39713,39714,39716,39717,39718,39719,39720,39721,39722,39723,39724,39725,39726,39728,39729,39731,39732,39733,39734,39735,39736,39737,39738,39741,39742,39743,39744,39750,39754,39755,39756,39758,39760,39762,39763,39765,39766,39767,39768,39769,39770,39771,39772,39773,39774,39775,39776,39777,39778,39779,39780,39781,39782,39783,39784,39785,39786,39787,39788,39789,39790,39791,39792,39793,39794,39795,39796,39797,39798,39799,39800,39801,39802,39803,31775,31786,31782,31800,31809,31808,33278,33281,33282,33284,33260,34884,33313,33314,33315,33325,33327,33320,33323,33336,33339,33331,33332,33342,33348,33353,33355,33359,33370,33375,33384,34942,34949,34952,35032,35039,35166,32669,32671,32679,32687,32688,32690,31868,25929,31889,31901,31900,31902,31906,31922,31932,31933,31937,31943,31948,31949,31944,31941,31959,31976,33390,26280,32703,32718,32725,32741,32737,32742,32745,32750,32755,31992,32119,32166,32174,32327,32411,40632,40628,36211,36228,36244,36241,36273,36199,36205,35911,35913,37194,37200,37198,37199,37220,39804,39805,39806,39807,39808,39809,39810,39811,39812,39813,39814,39815,39816,39817,39818,39819,39820,39821,39822,39823,39824,39825,39826,39827,39828,39829,39830,39831,39832,39833,39834,39835,39836,39837,39838,39839,39840,39841,39842,39843,39844,39845,39846,39847,39848,39849,39850,39851,39852,39853,39854,39855,39856,39857,39858,39859,39860,39861,39862,39863,39864,39865,39866,39867,39868,39869,39870,39871,39872,39873,39874,39875,39876,39877,39878,39879,39880,39881,39882,39883,39884,39885,39886,39887,39888,39889,39890,39891,39892,39893,39894,39895,39896,39897,39898,39899,37218,37217,37232,37225,37231,37245,37246,37234,37236,37241,37260,37253,37264,37261,37265,37282,37283,37290,37293,37294,37295,37301,37300,37306,35925,40574,36280,36331,36357,36441,36457,36277,36287,36284,36282,36292,36310,36311,36314,36318,36302,36303,36315,36294,36332,36343,36344,36323,36345,36347,36324,36361,36349,36372,36381,36383,36396,36398,36387,36399,36410,36416,36409,36405,36413,36401,36425,36417,36418,36433,36434,36426,36464,36470,36476,36463,36468,36485,36495,36500,36496,36508,36510,35960,35970,35978,35973,35992,35988,26011,35286,35294,35290,35292,39900,39901,39902,39903,39904,39905,39906,39907,39908,39909,39910,39911,39912,39913,39914,39915,39916,39917,39918,39919,39920,39921,39922,39923,39924,39925,39926,39927,39928,39929,39930,39931,39932,39933,39934,39935,39936,39937,39938,39939,39940,39941,39942,39943,39944,39945,39946,39947,39948,39949,39950,39951,39952,39953,39954,39955,39956,39957,39958,39959,39960,39961,39962,39963,39964,39965,39966,39967,39968,39969,39970,39971,39972,39973,39974,39975,39976,39977,39978,39979,39980,39981,39982,39983,39984,39985,39986,39987,39988,39989,39990,39991,39992,39993,39994,39995,35301,35307,35311,35390,35622,38739,38633,38643,38639,38662,38657,38664,38671,38670,38698,38701,38704,38718,40832,40835,40837,40838,40839,40840,40841,40842,40844,40702,40715,40717,38585,38588,38589,38606,38610,30655,38624,37518,37550,37576,37694,37738,37834,37775,37950,37995,40063,40066,40069,40070,40071,40072,31267,40075,40078,40080,40081,40082,40084,40085,40090,40091,40094,40095,40096,40097,40098,40099,40101,40102,40103,40104,40105,40107,40109,40110,40112,40113,40114,40115,40116,40117,40118,40119,40122,40123,40124,40125,40132,40133,40134,40135,40138,40139,39996,39997,39998,39999,40000,40001,40002,40003,40004,40005,40006,40007,40008,40009,40010,40011,40012,40013,40014,40015,40016,40017,40018,40019,40020,40021,40022,40023,40024,40025,40026,40027,40028,40029,40030,40031,40032,40033,40034,40035,40036,40037,40038,40039,40040,40041,40042,40043,40044,40045,40046,40047,40048,40049,40050,40051,40052,40053,40054,40055,40056,40057,40058,40059,40061,40062,40064,40067,40068,40073,40074,40076,40079,40083,40086,40087,40088,40089,40093,40106,40108,40111,40121,40126,40127,40128,40129,40130,40136,40137,40145,40146,40154,40155,40160,40161,40140,40141,40142,40143,40144,40147,40148,40149,40151,40152,40153,40156,40157,40159,40162,38780,38789,38801,38802,38804,38831,38827,38819,38834,38836,39601,39600,39607,40536,39606,39610,39612,39617,39616,39621,39618,39627,39628,39633,39749,39747,39751,39753,39752,39757,39761,39144,39181,39214,39253,39252,39647,39649,39654,39663,39659,39675,39661,39673,39688,39695,39699,39711,39715,40637,40638,32315,40578,40583,40584,40587,40594,37846,40605,40607,40667,40668,40669,40672,40671,40674,40681,40679,40677,40682,40687,40738,40748,40751,40761,40759,40765,40766,40772,40163,40164,40165,40166,40167,40168,40169,40170,40171,40172,40173,40174,40175,40176,40177,40178,40179,40180,40181,40182,40183,40184,40185,40186,40187,40188,40189,40190,40191,40192,40193,40194,40195,40196,40197,40198,40199,40200,40201,40202,40203,40204,40205,40206,40207,40208,40209,40210,40211,40212,40213,40214,40215,40216,40217,40218,40219,40220,40221,40222,40223,40224,40225,40226,40227,40228,40229,40230,40231,40232,40233,40234,40235,40236,40237,40238,40239,40240,40241,40242,40243,40244,40245,40246,40247,40248,40249,40250,40251,40252,40253,40254,40255,40256,40257,40258,57908,57909,57910,57911,57912,57913,57914,57915,57916,57917,57918,57919,57920,57921,57922,57923,57924,57925,57926,57927,57928,57929,57930,57931,57932,57933,57934,57935,57936,57937,57938,57939,57940,57941,57942,57943,57944,57945,57946,57947,57948,57949,57950,57951,57952,57953,57954,57955,57956,57957,57958,57959,57960,57961,57962,57963,57964,57965,57966,57967,57968,57969,57970,57971,57972,57973,57974,57975,57976,57977,57978,57979,57980,57981,57982,57983,57984,57985,57986,57987,57988,57989,57990,57991,57992,57993,57994,57995,57996,57997,57998,57999,58000,58001,40259,40260,40261,40262,40263,40264,40265,40266,40267,40268,40269,40270,40271,40272,40273,40274,40275,40276,40277,40278,40279,40280,40281,40282,40283,40284,40285,40286,40287,40288,40289,40290,40291,40292,40293,40294,40295,40296,40297,40298,40299,40300,40301,40302,40303,40304,40305,40306,40307,40308,40309,40310,40311,40312,40313,40314,40315,40316,40317,40318,40319,40320,40321,40322,40323,40324,40325,40326,40327,40328,40329,40330,40331,40332,40333,40334,40335,40336,40337,40338,40339,40340,40341,40342,40343,40344,40345,40346,40347,40348,40349,40350,40351,40352,40353,40354,58002,58003,58004,58005,58006,58007,58008,58009,58010,58011,58012,58013,58014,58015,58016,58017,58018,58019,58020,58021,58022,58023,58024,58025,58026,58027,58028,58029,58030,58031,58032,58033,58034,58035,58036,58037,58038,58039,58040,58041,58042,58043,58044,58045,58046,58047,58048,58049,58050,58051,58052,58053,58054,58055,58056,58057,58058,58059,58060,58061,58062,58063,58064,58065,58066,58067,58068,58069,58070,58071,58072,58073,58074,58075,58076,58077,58078,58079,58080,58081,58082,58083,58084,58085,58086,58087,58088,58089,58090,58091,58092,58093,58094,58095,40355,40356,40357,40358,40359,40360,40361,40362,40363,40364,40365,40366,40367,40368,40369,40370,40371,40372,40373,40374,40375,40376,40377,40378,40379,40380,40381,40382,40383,40384,40385,40386,40387,40388,40389,40390,40391,40392,40393,40394,40395,40396,40397,40398,40399,40400,40401,40402,40403,40404,40405,40406,40407,40408,40409,40410,40411,40412,40413,40414,40415,40416,40417,40418,40419,40420,40421,40422,40423,40424,40425,40426,40427,40428,40429,40430,40431,40432,40433,40434,40435,40436,40437,40438,40439,40440,40441,40442,40443,40444,40445,40446,40447,40448,40449,40450,58096,58097,58098,58099,58100,58101,58102,58103,58104,58105,58106,58107,58108,58109,58110,58111,58112,58113,58114,58115,58116,58117,58118,58119,58120,58121,58122,58123,58124,58125,58126,58127,58128,58129,58130,58131,58132,58133,58134,58135,58136,58137,58138,58139,58140,58141,58142,58143,58144,58145,58146,58147,58148,58149,58150,58151,58152,58153,58154,58155,58156,58157,58158,58159,58160,58161,58162,58163,58164,58165,58166,58167,58168,58169,58170,58171,58172,58173,58174,58175,58176,58177,58178,58179,58180,58181,58182,58183,58184,58185,58186,58187,58188,58189,40451,40452,40453,40454,40455,40456,40457,40458,40459,40460,40461,40462,40463,40464,40465,40466,40467,40468,40469,40470,40471,40472,40473,40474,40475,40476,40477,40478,40484,40487,40494,40496,40500,40507,40508,40512,40525,40528,40530,40531,40532,40534,40537,40541,40543,40544,40545,40546,40549,40558,40559,40562,40564,40565,40566,40567,40568,40569,40570,40571,40572,40573,40576,40577,40579,40580,40581,40582,40585,40586,40588,40589,40590,40591,40592,40593,40596,40597,40598,40599,40600,40601,40602,40603,40604,40606,40608,40609,40610,40611,40612,40613,40615,40616,40617,40618,58190,58191,58192,58193,58194,58195,58196,58197,58198,58199,58200,58201,58202,58203,58204,58205,58206,58207,58208,58209,58210,58211,58212,58213,58214,58215,58216,58217,58218,58219,58220,58221,58222,58223,58224,58225,58226,58227,58228,58229,58230,58231,58232,58233,58234,58235,58236,58237,58238,58239,58240,58241,58242,58243,58244,58245,58246,58247,58248,58249,58250,58251,58252,58253,58254,58255,58256,58257,58258,58259,58260,58261,58262,58263,58264,58265,58266,58267,58268,58269,58270,58271,58272,58273,58274,58275,58276,58277,58278,58279,58280,58281,58282,58283,40619,40620,40621,40622,40623,40624,40625,40626,40627,40629,40630,40631,40633,40634,40636,40639,40640,40641,40642,40643,40645,40646,40647,40648,40650,40651,40652,40656,40658,40659,40661,40662,40663,40665,40666,40670,40673,40675,40676,40678,40680,40683,40684,40685,40686,40688,40689,40690,40691,40692,40693,40694,40695,40696,40698,40701,40703,40704,40705,40706,40707,40708,40709,40710,40711,40712,40713,40714,40716,40719,40721,40722,40724,40725,40726,40728,40730,40731,40732,40733,40734,40735,40737,40739,40740,40741,40742,40743,40744,40745,40746,40747,40749,40750,40752,40753,58284,58285,58286,58287,58288,58289,58290,58291,58292,58293,58294,58295,58296,58297,58298,58299,58300,58301,58302,58303,58304,58305,58306,58307,58308,58309,58310,58311,58312,58313,58314,58315,58316,58317,58318,58319,58320,58321,58322,58323,58324,58325,58326,58327,58328,58329,58330,58331,58332,58333,58334,58335,58336,58337,58338,58339,58340,58341,58342,58343,58344,58345,58346,58347,58348,58349,58350,58351,58352,58353,58354,58355,58356,58357,58358,58359,58360,58361,58362,58363,58364,58365,58366,58367,58368,58369,58370,58371,58372,58373,58374,58375,58376,58377,40754,40755,40756,40757,40758,40760,40762,40764,40767,40768,40769,40770,40771,40773,40774,40775,40776,40777,40778,40779,40780,40781,40782,40783,40786,40787,40788,40789,40790,40791,40792,40793,40794,40795,40796,40797,40798,40799,40800,40801,40802,40803,40804,40805,40806,40807,40808,40809,40810,40811,40812,40813,40814,40815,40816,40817,40818,40819,40820,40821,40822,40823,40824,40825,40826,40827,40828,40829,40830,40833,40834,40845,40846,40847,40848,40849,40850,40851,40852,40853,40854,40855,40856,40860,40861,40862,40865,40866,40867,40868,40869,63788,63865,63893,63975,63985,58378,58379,58380,58381,58382,58383,58384,58385,58386,58387,58388,58389,58390,58391,58392,58393,58394,58395,58396,58397,58398,58399,58400,58401,58402,58403,58404,58405,58406,58407,58408,58409,58410,58411,58412,58413,58414,58415,58416,58417,58418,58419,58420,58421,58422,58423,58424,58425,58426,58427,58428,58429,58430,58431,58432,58433,58434,58435,58436,58437,58438,58439,58440,58441,58442,58443,58444,58445,58446,58447,58448,58449,58450,58451,58452,58453,58454,58455,58456,58457,58458,58459,58460,58461,58462,58463,58464,58465,58466,58467,58468,58469,58470,58471,64012,64013,64014,64015,64017,64019,64020,64024,64031,64032,64033,64035,64036,64039,64040,64041,11905,59414,59415,59416,11908,13427,13383,11912,11915,59422,13726,13850,13838,11916,11927,14702,14616,59430,14799,14815,14963,14800,59435,59436,15182,15470,15584,11943,59441,59442,11946,16470,16735,11950,17207,11955,11958,11959,59451,17329,17324,11963,17373,17622,18017,17996,59459,18211,18217,18300,18317,11978,18759,18810,18813,18818,18819,18821,18822,18847,18843,18871,18870,59476,59477,19619,19615,19616,19617,19575,19618,19731,19732,19733,19734,19735,19736,19737,19886,59492,58472,58473,58474,58475,58476,58477,58478,58479,58480,58481,58482,58483,58484,58485,58486,58487,58488,58489,58490,58491,58492,58493,58494,58495,58496,58497,58498,58499,58500,58501,58502,58503,58504,58505,58506,58507,58508,58509,58510,58511,58512,58513,58514,58515,58516,58517,58518,58519,58520,58521,58522,58523,58524,58525,58526,58527,58528,58529,58530,58531,58532,58533,58534,58535,58536,58537,58538,58539,58540,58541,58542,58543,58544,58545,58546,58547,58548,58549,58550,58551,58552,58553,58554,58555,58556,58557,58558,58559,58560,58561,58562,58563,58564,58565],
	  "gb18030-ranges":[[0,128],[36,165],[38,169],[45,178],[50,184],[81,216],[89,226],[95,235],[96,238],[100,244],[103,248],[104,251],[105,253],[109,258],[126,276],[133,284],[148,300],[172,325],[175,329],[179,334],[208,364],[306,463],[307,465],[308,467],[309,469],[310,471],[311,473],[312,475],[313,477],[341,506],[428,594],[443,610],[544,712],[545,716],[558,730],[741,930],[742,938],[749,962],[750,970],[805,1026],[819,1104],[820,1106],[7922,8209],[7924,8215],[7925,8218],[7927,8222],[7934,8231],[7943,8241],[7944,8244],[7945,8246],[7950,8252],[8062,8365],[8148,8452],[8149,8454],[8152,8458],[8164,8471],[8174,8482],[8236,8556],[8240,8570],[8262,8596],[8264,8602],[8374,8713],[8380,8720],[8381,8722],[8384,8726],[8388,8731],[8390,8737],[8392,8740],[8393,8742],[8394,8748],[8396,8751],[8401,8760],[8406,8766],[8416,8777],[8419,8781],[8424,8787],[8437,8802],[8439,8808],[8445,8816],[8482,8854],[8485,8858],[8496,8870],[8521,8896],[8603,8979],[8936,9322],[8946,9372],[9046,9548],[9050,9588],[9063,9616],[9066,9622],[9076,9634],[9092,9652],[9100,9662],[9108,9672],[9111,9676],[9113,9680],[9131,9702],[9162,9735],[9164,9738],[9218,9793],[9219,9795],[11329,11906],[11331,11909],[11334,11913],[11336,11917],[11346,11928],[11361,11944],[11363,11947],[11366,11951],[11370,11956],[11372,11960],[11375,11964],[11389,11979],[11682,12284],[11686,12292],[11687,12312],[11692,12319],[11694,12330],[11714,12351],[11716,12436],[11723,12447],[11725,12535],[11730,12543],[11736,12586],[11982,12842],[11989,12850],[12102,12964],[12336,13200],[12348,13215],[12350,13218],[12384,13253],[12393,13263],[12395,13267],[12397,13270],[12510,13384],[12553,13428],[12851,13727],[12962,13839],[12973,13851],[13738,14617],[13823,14703],[13919,14801],[13933,14816],[14080,14964],[14298,15183],[14585,15471],[14698,15585],[15583,16471],[15847,16736],[16318,17208],[16434,17325],[16438,17330],[16481,17374],[16729,17623],[17102,17997],[17122,18018],[17315,18212],[17320,18218],[17402,18301],[17418,18318],[17859,18760],[17909,18811],[17911,18814],[17915,18820],[17916,18823],[17936,18844],[17939,18848],[17961,18872],[18664,19576],[18703,19620],[18814,19738],[18962,19887],[19043,40870],[33469,59244],[33470,59336],[33471,59367],[33484,59413],[33485,59417],[33490,59423],[33497,59431],[33501,59437],[33505,59443],[33513,59452],[33520,59460],[33536,59478],[33550,59493],[37845,63789],[37921,63866],[37948,63894],[38029,63976],[38038,63986],[38064,64016],[38065,64018],[38066,64021],[38069,64025],[38075,64034],[38076,64037],[38078,64042],[39108,65074],[39109,65093],[39113,65107],[39114,65112],[39115,65127],[39116,65132],[39265,65375],[39394,65510],[189000,65536]],
	  "jis0208":[12288,12289,12290,65292,65294,12539,65306,65307,65311,65281,12443,12444,180,65344,168,65342,65507,65343,12541,12542,12445,12446,12291,20189,12293,12294,12295,12540,8213,8208,65295,65340,65374,8741,65372,8230,8229,8216,8217,8220,8221,65288,65289,12308,12309,65339,65341,65371,65373,12296,12297,12298,12299,12300,12301,12302,12303,12304,12305,65291,65293,177,215,247,65309,8800,65308,65310,8806,8807,8734,8756,9794,9792,176,8242,8243,8451,65509,65284,65504,65505,65285,65283,65286,65290,65312,167,9734,9733,9675,9679,9678,9671,9670,9633,9632,9651,9650,9661,9660,8251,12306,8594,8592,8593,8595,12307,null,null,null,null,null,null,null,null,null,null,null,8712,8715,8838,8839,8834,8835,8746,8745,null,null,null,null,null,null,null,null,8743,8744,65506,8658,8660,8704,8707,null,null,null,null,null,null,null,null,null,null,null,8736,8869,8978,8706,8711,8801,8786,8810,8811,8730,8765,8733,8757,8747,8748,null,null,null,null,null,null,null,8491,8240,9839,9837,9834,8224,8225,182,null,null,null,null,9711,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,65296,65297,65298,65299,65300,65301,65302,65303,65304,65305,null,null,null,null,null,null,null,65313,65314,65315,65316,65317,65318,65319,65320,65321,65322,65323,65324,65325,65326,65327,65328,65329,65330,65331,65332,65333,65334,65335,65336,65337,65338,null,null,null,null,null,null,65345,65346,65347,65348,65349,65350,65351,65352,65353,65354,65355,65356,65357,65358,65359,65360,65361,65362,65363,65364,65365,65366,65367,65368,65369,65370,null,null,null,null,12353,12354,12355,12356,12357,12358,12359,12360,12361,12362,12363,12364,12365,12366,12367,12368,12369,12370,12371,12372,12373,12374,12375,12376,12377,12378,12379,12380,12381,12382,12383,12384,12385,12386,12387,12388,12389,12390,12391,12392,12393,12394,12395,12396,12397,12398,12399,12400,12401,12402,12403,12404,12405,12406,12407,12408,12409,12410,12411,12412,12413,12414,12415,12416,12417,12418,12419,12420,12421,12422,12423,12424,12425,12426,12427,12428,12429,12430,12431,12432,12433,12434,12435,null,null,null,null,null,null,null,null,null,null,null,12449,12450,12451,12452,12453,12454,12455,12456,12457,12458,12459,12460,12461,12462,12463,12464,12465,12466,12467,12468,12469,12470,12471,12472,12473,12474,12475,12476,12477,12478,12479,12480,12481,12482,12483,12484,12485,12486,12487,12488,12489,12490,12491,12492,12493,12494,12495,12496,12497,12498,12499,12500,12501,12502,12503,12504,12505,12506,12507,12508,12509,12510,12511,12512,12513,12514,12515,12516,12517,12518,12519,12520,12521,12522,12523,12524,12525,12526,12527,12528,12529,12530,12531,12532,12533,12534,null,null,null,null,null,null,null,null,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,null,null,null,null,null,null,null,null,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,963,964,965,966,967,968,969,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1040,1041,1042,1043,1044,1045,1025,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1072,1073,1074,1075,1076,1077,1105,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,null,null,null,null,null,null,null,null,null,null,null,null,null,9472,9474,9484,9488,9496,9492,9500,9516,9508,9524,9532,9473,9475,9487,9491,9499,9495,9507,9523,9515,9531,9547,9504,9519,9512,9527,9535,9501,9520,9509,9528,9538,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,9312,9313,9314,9315,9316,9317,9318,9319,9320,9321,9322,9323,9324,9325,9326,9327,9328,9329,9330,9331,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,null,13129,13076,13090,13133,13080,13095,13059,13110,13137,13143,13069,13094,13091,13099,13130,13115,13212,13213,13214,13198,13199,13252,13217,null,null,null,null,null,null,null,null,13179,12317,12319,8470,13261,8481,12964,12965,12966,12967,12968,12849,12850,12857,13182,13181,13180,8786,8801,8747,8750,8721,8730,8869,8736,8735,8895,8757,8745,8746,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,20124,21782,23043,38463,21696,24859,25384,23030,36898,33909,33564,31312,24746,25569,28197,26093,33894,33446,39925,26771,22311,26017,25201,23451,22992,34427,39156,32098,32190,39822,25110,31903,34999,23433,24245,25353,26263,26696,38343,38797,26447,20197,20234,20301,20381,20553,22258,22839,22996,23041,23561,24799,24847,24944,26131,26885,28858,30031,30064,31227,32173,32239,32963,33806,34915,35586,36949,36986,21307,20117,20133,22495,32946,37057,30959,19968,22769,28322,36920,31282,33576,33419,39983,20801,21360,21693,21729,22240,23035,24341,39154,28139,32996,34093,38498,38512,38560,38907,21515,21491,23431,28879,32701,36802,38632,21359,40284,31418,19985,30867,33276,28198,22040,21764,27421,34074,39995,23013,21417,28006,29916,38287,22082,20113,36939,38642,33615,39180,21473,21942,23344,24433,26144,26355,26628,27704,27891,27945,29787,30408,31310,38964,33521,34907,35424,37613,28082,30123,30410,39365,24742,35585,36234,38322,27022,21421,20870,22290,22576,22852,23476,24310,24616,25513,25588,27839,28436,28814,28948,29017,29141,29503,32257,33398,33489,34199,36960,37467,40219,22633,26044,27738,29989,20985,22830,22885,24448,24540,25276,26106,27178,27431,27572,29579,32705,35158,40236,40206,40644,23713,27798,33659,20740,23627,25014,33222,26742,29281,20057,20474,21368,24681,28201,31311,38899,19979,21270,20206,20309,20285,20385,20339,21152,21487,22025,22799,23233,23478,23521,31185,26247,26524,26550,27468,27827,28779,29634,31117,31166,31292,31623,33457,33499,33540,33655,33775,33747,34662,35506,22057,36008,36838,36942,38686,34442,20420,23784,25105,29273,30011,33253,33469,34558,36032,38597,39187,39381,20171,20250,35299,22238,22602,22730,24315,24555,24618,24724,24674,25040,25106,25296,25913,39745,26214,26800,28023,28784,30028,30342,32117,33445,34809,38283,38542,35997,20977,21182,22806,21683,23475,23830,24936,27010,28079,30861,33995,34903,35442,37799,39608,28012,39336,34521,22435,26623,34510,37390,21123,22151,21508,24275,25313,25785,26684,26680,27579,29554,30906,31339,35226,35282,36203,36611,37101,38307,38548,38761,23398,23731,27005,38989,38990,25499,31520,27179,27263,26806,39949,28511,21106,21917,24688,25324,27963,28167,28369,33883,35088,36676,19988,39993,21494,26907,27194,38788,26666,20828,31427,33970,37340,37772,22107,40232,26658,33541,33841,31909,21000,33477,29926,20094,20355,20896,23506,21002,21208,21223,24059,21914,22570,23014,23436,23448,23515,24178,24185,24739,24863,24931,25022,25563,25954,26577,26707,26874,27454,27475,27735,28450,28567,28485,29872,29976,30435,30475,31487,31649,31777,32233,32566,32752,32925,33382,33694,35251,35532,36011,36996,37969,38291,38289,38306,38501,38867,39208,33304,20024,21547,23736,24012,29609,30284,30524,23721,32747,36107,38593,38929,38996,39000,20225,20238,21361,21916,22120,22522,22855,23305,23492,23696,24076,24190,24524,25582,26426,26071,26082,26399,26827,26820,27231,24112,27589,27671,27773,30079,31048,23395,31232,32000,24509,35215,35352,36020,36215,36556,36637,39138,39438,39740,20096,20605,20736,22931,23452,25135,25216,25836,27450,29344,30097,31047,32681,34811,35516,35696,25516,33738,38816,21513,21507,21931,26708,27224,35440,30759,26485,40653,21364,23458,33050,34384,36870,19992,20037,20167,20241,21450,21560,23470,24339,24613,25937,26429,27714,27762,27875,28792,29699,31350,31406,31496,32026,31998,32102,26087,29275,21435,23621,24040,25298,25312,25369,28192,34394,35377,36317,37624,28417,31142,39770,20136,20139,20140,20379,20384,20689,20807,31478,20849,20982,21332,21281,21375,21483,21932,22659,23777,24375,24394,24623,24656,24685,25375,25945,27211,27841,29378,29421,30703,33016,33029,33288,34126,37111,37857,38911,39255,39514,20208,20957,23597,26241,26989,23616,26354,26997,29577,26704,31873,20677,21220,22343,24062,37670,26020,27427,27453,29748,31105,31165,31563,32202,33465,33740,34943,35167,35641,36817,37329,21535,37504,20061,20534,21477,21306,29399,29590,30697,33510,36527,39366,39368,39378,20855,24858,34398,21936,31354,20598,23507,36935,38533,20018,27355,37351,23633,23624,25496,31391,27795,38772,36705,31402,29066,38536,31874,26647,32368,26705,37740,21234,21531,34219,35347,32676,36557,37089,21350,34952,31041,20418,20670,21009,20804,21843,22317,29674,22411,22865,24418,24452,24693,24950,24935,25001,25522,25658,25964,26223,26690,28179,30054,31293,31995,32076,32153,32331,32619,33550,33610,34509,35336,35427,35686,36605,38938,40335,33464,36814,39912,21127,25119,25731,28608,38553,26689,20625,27424,27770,28500,31348,32080,34880,35363,26376,20214,20537,20518,20581,20860,21048,21091,21927,22287,22533,23244,24314,25010,25080,25331,25458,26908,27177,29309,29356,29486,30740,30831,32121,30476,32937,35211,35609,36066,36562,36963,37749,38522,38997,39443,40568,20803,21407,21427,24187,24358,28187,28304,29572,29694,32067,33335,35328,35578,38480,20046,20491,21476,21628,22266,22993,23396,24049,24235,24359,25144,25925,26543,28246,29392,31946,34996,32929,32993,33776,34382,35463,36328,37431,38599,39015,40723,20116,20114,20237,21320,21577,21566,23087,24460,24481,24735,26791,27278,29786,30849,35486,35492,35703,37264,20062,39881,20132,20348,20399,20505,20502,20809,20844,21151,21177,21246,21402,21475,21521,21518,21897,22353,22434,22909,23380,23389,23439,24037,24039,24055,24184,24195,24218,24247,24344,24658,24908,25239,25304,25511,25915,26114,26179,26356,26477,26657,26775,27083,27743,27946,28009,28207,28317,30002,30343,30828,31295,31968,32005,32024,32094,32177,32789,32771,32943,32945,33108,33167,33322,33618,34892,34913,35611,36002,36092,37066,37237,37489,30783,37628,38308,38477,38917,39321,39640,40251,21083,21163,21495,21512,22741,25335,28640,35946,36703,40633,20811,21051,21578,22269,31296,37239,40288,40658,29508,28425,33136,29969,24573,24794,39592,29403,36796,27492,38915,20170,22256,22372,22718,23130,24680,25031,26127,26118,26681,26801,28151,30165,32058,33390,39746,20123,20304,21449,21766,23919,24038,24046,26619,27801,29811,30722,35408,37782,35039,22352,24231,25387,20661,20652,20877,26368,21705,22622,22971,23472,24425,25165,25505,26685,27507,28168,28797,37319,29312,30741,30758,31085,25998,32048,33756,35009,36617,38555,21092,22312,26448,32618,36001,20916,22338,38442,22586,27018,32948,21682,23822,22524,30869,40442,20316,21066,21643,25662,26152,26388,26613,31364,31574,32034,37679,26716,39853,31545,21273,20874,21047,23519,25334,25774,25830,26413,27578,34217,38609,30352,39894,25420,37638,39851,30399,26194,19977,20632,21442,23665,24808,25746,25955,26719,29158,29642,29987,31639,32386,34453,35715,36059,37240,39184,26028,26283,27531,20181,20180,20282,20351,21050,21496,21490,21987,22235,22763,22987,22985,23039,23376,23629,24066,24107,24535,24605,25351,25903,23388,26031,26045,26088,26525,27490,27515,27663,29509,31049,31169,31992,32025,32043,32930,33026,33267,35222,35422,35433,35430,35468,35566,36039,36060,38604,39164,27503,20107,20284,20365,20816,23383,23546,24904,25345,26178,27425,28363,27835,29246,29885,30164,30913,31034,32780,32819,33258,33940,36766,27728,40575,24335,35672,40235,31482,36600,23437,38635,19971,21489,22519,22833,23241,23460,24713,28287,28422,30142,36074,23455,34048,31712,20594,26612,33437,23649,34122,32286,33294,20889,23556,25448,36198,26012,29038,31038,32023,32773,35613,36554,36974,34503,37034,20511,21242,23610,26451,28796,29237,37196,37320,37675,33509,23490,24369,24825,20027,21462,23432,25163,26417,27530,29417,29664,31278,33131,36259,37202,39318,20754,21463,21610,23551,25480,27193,32172,38656,22234,21454,21608,23447,23601,24030,20462,24833,25342,27954,31168,31179,32066,32333,32722,33261,33311,33936,34886,35186,35728,36468,36655,36913,37195,37228,38598,37276,20160,20303,20805,21313,24467,25102,26580,27713,28171,29539,32294,37325,37507,21460,22809,23487,28113,31069,32302,31899,22654,29087,20986,34899,36848,20426,23803,26149,30636,31459,33308,39423,20934,24490,26092,26991,27529,28147,28310,28516,30462,32020,24033,36981,37255,38918,20966,21021,25152,26257,26329,28186,24246,32210,32626,26360,34223,34295,35576,21161,21465,22899,24207,24464,24661,37604,38500,20663,20767,21213,21280,21319,21484,21736,21830,21809,22039,22888,22974,23100,23477,23558,23567,23569,23578,24196,24202,24288,24432,25215,25220,25307,25484,25463,26119,26124,26157,26230,26494,26786,27167,27189,27836,28040,28169,28248,28988,28966,29031,30151,30465,30813,30977,31077,31216,31456,31505,31911,32057,32918,33750,33931,34121,34909,35059,35359,35388,35412,35443,35937,36062,37284,37478,37758,37912,38556,38808,19978,19976,19998,20055,20887,21104,22478,22580,22732,23330,24120,24773,25854,26465,26454,27972,29366,30067,31331,33976,35698,37304,37664,22065,22516,39166,25325,26893,27542,29165,32340,32887,33394,35302,39135,34645,36785,23611,20280,20449,20405,21767,23072,23517,23529,24515,24910,25391,26032,26187,26862,27035,28024,28145,30003,30137,30495,31070,31206,32051,33251,33455,34218,35242,35386,36523,36763,36914,37341,38663,20154,20161,20995,22645,22764,23563,29978,23613,33102,35338,36805,38499,38765,31525,35535,38920,37218,22259,21416,36887,21561,22402,24101,25512,27700,28810,30561,31883,32736,34928,36930,37204,37648,37656,38543,29790,39620,23815,23913,25968,26530,36264,38619,25454,26441,26905,33733,38935,38592,35070,28548,25722,23544,19990,28716,30045,26159,20932,21046,21218,22995,24449,24615,25104,25919,25972,26143,26228,26866,26646,27491,28165,29298,29983,30427,31934,32854,22768,35069,35199,35488,35475,35531,36893,37266,38738,38745,25993,31246,33030,38587,24109,24796,25114,26021,26132,26512,30707,31309,31821,32318,33034,36012,36196,36321,36447,30889,20999,25305,25509,25666,25240,35373,31363,31680,35500,38634,32118,33292,34633,20185,20808,21315,21344,23459,23554,23574,24029,25126,25159,25776,26643,26676,27849,27973,27927,26579,28508,29006,29053,26059,31359,31661,32218,32330,32680,33146,33307,33337,34214,35438,36046,36341,36984,36983,37549,37521,38275,39854,21069,21892,28472,28982,20840,31109,32341,33203,31950,22092,22609,23720,25514,26366,26365,26970,29401,30095,30094,30990,31062,31199,31895,32032,32068,34311,35380,38459,36961,40736,20711,21109,21452,21474,20489,21930,22766,22863,29245,23435,23652,21277,24803,24819,25436,25475,25407,25531,25805,26089,26361,24035,27085,27133,28437,29157,20105,30185,30456,31379,31967,32207,32156,32865,33609,33624,33900,33980,34299,35013,36208,36865,36973,37783,38684,39442,20687,22679,24974,33235,34101,36104,36896,20419,20596,21063,21363,24687,25417,26463,28204,36275,36895,20439,23646,36042,26063,32154,21330,34966,20854,25539,23384,23403,23562,25613,26449,36956,20182,22810,22826,27760,35409,21822,22549,22949,24816,25171,26561,33333,26965,38464,39364,39464,20307,22534,23550,32784,23729,24111,24453,24608,24907,25140,26367,27888,28382,32974,33151,33492,34955,36024,36864,36910,38538,40667,39899,20195,21488,22823,31532,37261,38988,40441,28381,28711,21331,21828,23429,25176,25246,25299,27810,28655,29730,35351,37944,28609,35582,33592,20967,34552,21482,21481,20294,36948,36784,22890,33073,24061,31466,36799,26842,35895,29432,40008,27197,35504,20025,21336,22022,22374,25285,25506,26086,27470,28129,28251,28845,30701,31471,31658,32187,32829,32966,34507,35477,37723,22243,22727,24382,26029,26262,27264,27573,30007,35527,20516,30693,22320,24347,24677,26234,27744,30196,31258,32622,33268,34584,36933,39347,31689,30044,31481,31569,33988,36880,31209,31378,33590,23265,30528,20013,20210,23449,24544,25277,26172,26609,27880,34411,34935,35387,37198,37619,39376,27159,28710,29482,33511,33879,36015,19969,20806,20939,21899,23541,24086,24115,24193,24340,24373,24427,24500,25074,25361,26274,26397,28526,29266,30010,30522,32884,33081,33144,34678,35519,35548,36229,36339,37530,38263,38914,40165,21189,25431,30452,26389,27784,29645,36035,37806,38515,27941,22684,26894,27084,36861,37786,30171,36890,22618,26626,25524,27131,20291,28460,26584,36795,34086,32180,37716,26943,28528,22378,22775,23340,32044,29226,21514,37347,40372,20141,20302,20572,20597,21059,35998,21576,22564,23450,24093,24213,24237,24311,24351,24716,25269,25402,25552,26799,27712,30855,31118,31243,32224,33351,35330,35558,36420,36883,37048,37165,37336,40718,27877,25688,25826,25973,28404,30340,31515,36969,37841,28346,21746,24505,25764,36685,36845,37444,20856,22635,22825,23637,24215,28155,32399,29980,36028,36578,39003,28857,20253,27583,28593,30000,38651,20814,21520,22581,22615,22956,23648,24466,26007,26460,28193,30331,33759,36077,36884,37117,37709,30757,30778,21162,24230,22303,22900,24594,20498,20826,20908,20941,20992,21776,22612,22616,22871,23445,23798,23947,24764,25237,25645,26481,26691,26812,26847,30423,28120,28271,28059,28783,29128,24403,30168,31095,31561,31572,31570,31958,32113,21040,33891,34153,34276,35342,35588,35910,36367,36867,36879,37913,38518,38957,39472,38360,20685,21205,21516,22530,23566,24999,25758,27934,30643,31461,33012,33796,36947,37509,23776,40199,21311,24471,24499,28060,29305,30563,31167,31716,27602,29420,35501,26627,27233,20984,31361,26932,23626,40182,33515,23493,37193,28702,22136,23663,24775,25958,27788,35930,36929,38931,21585,26311,37389,22856,37027,20869,20045,20970,34201,35598,28760,25466,37707,26978,39348,32260,30071,21335,26976,36575,38627,27741,20108,23612,24336,36841,21250,36049,32905,34425,24319,26085,20083,20837,22914,23615,38894,20219,22922,24525,35469,28641,31152,31074,23527,33905,29483,29105,24180,24565,25467,25754,29123,31896,20035,24316,20043,22492,22178,24745,28611,32013,33021,33075,33215,36786,35223,34468,24052,25226,25773,35207,26487,27874,27966,29750,30772,23110,32629,33453,39340,20467,24259,25309,25490,25943,26479,30403,29260,32972,32954,36649,37197,20493,22521,23186,26757,26995,29028,29437,36023,22770,36064,38506,36889,34687,31204,30695,33833,20271,21093,21338,25293,26575,27850,30333,31636,31893,33334,34180,36843,26333,28448,29190,32283,33707,39361,40614,20989,31665,30834,31672,32903,31560,27368,24161,32908,30033,30048,20843,37474,28300,30330,37271,39658,20240,32624,25244,31567,38309,40169,22138,22617,34532,38588,20276,21028,21322,21453,21467,24070,25644,26001,26495,27710,27726,29256,29359,29677,30036,32321,33324,34281,36009,31684,37318,29033,38930,39151,25405,26217,30058,30436,30928,34115,34542,21290,21329,21542,22915,24199,24444,24754,25161,25209,25259,26000,27604,27852,30130,30382,30865,31192,32203,32631,32933,34987,35513,36027,36991,38750,39131,27147,31800,20633,23614,24494,26503,27608,29749,30473,32654,40763,26570,31255,21305,30091,39661,24422,33181,33777,32920,24380,24517,30050,31558,36924,26727,23019,23195,32016,30334,35628,20469,24426,27161,27703,28418,29922,31080,34920,35413,35961,24287,25551,30149,31186,33495,37672,37618,33948,34541,39981,21697,24428,25996,27996,28693,36007,36051,38971,25935,29942,19981,20184,22496,22827,23142,23500,20904,24067,24220,24598,25206,25975,26023,26222,28014,29238,31526,33104,33178,33433,35676,36000,36070,36212,38428,38468,20398,25771,27494,33310,33889,34154,37096,23553,26963,39080,33914,34135,20239,21103,24489,24133,26381,31119,33145,35079,35206,28149,24343,25173,27832,20175,29289,39826,20998,21563,22132,22707,24996,25198,28954,22894,31881,31966,32027,38640,25991,32862,19993,20341,20853,22592,24163,24179,24330,26564,20006,34109,38281,38491,31859,38913,20731,22721,30294,30887,21029,30629,34065,31622,20559,22793,29255,31687,32232,36794,36820,36941,20415,21193,23081,24321,38829,20445,33303,37610,22275,25429,27497,29995,35036,36628,31298,21215,22675,24917,25098,26286,27597,31807,33769,20515,20472,21253,21574,22577,22857,23453,23792,23791,23849,24214,25265,25447,25918,26041,26379,27861,27873,28921,30770,32299,32990,33459,33804,34028,34562,35090,35370,35914,37030,37586,39165,40179,40300,20047,20129,20621,21078,22346,22952,24125,24536,24537,25151,26292,26395,26576,26834,20882,32033,32938,33192,35584,35980,36031,37502,38450,21536,38956,21271,20693,21340,22696,25778,26420,29287,30566,31302,37350,21187,27809,27526,22528,24140,22868,26412,32763,20961,30406,25705,30952,39764,40635,22475,22969,26151,26522,27598,21737,27097,24149,33180,26517,39850,26622,40018,26717,20134,20451,21448,25273,26411,27819,36804,20397,32365,40639,19975,24930,28288,28459,34067,21619,26410,39749,24051,31637,23724,23494,34588,28234,34001,31252,33032,22937,31885,27665,30496,21209,22818,28961,29279,30683,38695,40289,26891,23167,23064,20901,21517,21629,26126,30431,36855,37528,40180,23018,29277,28357,20813,26825,32191,32236,38754,40634,25720,27169,33538,22916,23391,27611,29467,30450,32178,32791,33945,20786,26408,40665,30446,26466,21247,39173,23588,25147,31870,36016,21839,24758,32011,38272,21249,20063,20918,22812,29242,32822,37326,24357,30690,21380,24441,32004,34220,35379,36493,38742,26611,34222,37971,24841,24840,27833,30290,35565,36664,21807,20305,20778,21191,21451,23461,24189,24736,24962,25558,26377,26586,28263,28044,29494,29495,30001,31056,35029,35480,36938,37009,37109,38596,34701,22805,20104,20313,19982,35465,36671,38928,20653,24188,22934,23481,24248,25562,25594,25793,26332,26954,27096,27915,28342,29076,29992,31407,32650,32768,33865,33993,35201,35617,36362,36965,38525,39178,24958,25233,27442,27779,28020,32716,32764,28096,32645,34746,35064,26469,33713,38972,38647,27931,32097,33853,37226,20081,21365,23888,27396,28651,34253,34349,35239,21033,21519,23653,26446,26792,29702,29827,30178,35023,35041,37324,38626,38520,24459,29575,31435,33870,25504,30053,21129,27969,28316,29705,30041,30827,31890,38534,31452,40845,20406,24942,26053,34396,20102,20142,20698,20001,20940,23534,26009,26753,28092,29471,30274,30637,31260,31975,33391,35538,36988,37327,38517,38936,21147,32209,20523,21400,26519,28107,29136,29747,33256,36650,38563,40023,40607,29792,22593,28057,32047,39006,20196,20278,20363,20919,21169,23994,24604,29618,31036,33491,37428,38583,38646,38666,40599,40802,26278,27508,21015,21155,28872,35010,24265,24651,24976,28451,29001,31806,32244,32879,34030,36899,37676,21570,39791,27347,28809,36034,36335,38706,21172,23105,24266,24324,26391,27004,27028,28010,28431,29282,29436,31725,32769,32894,34635,37070,20845,40595,31108,32907,37682,35542,20525,21644,35441,27498,36036,33031,24785,26528,40434,20121,20120,39952,35435,34241,34152,26880,28286,30871,33109,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,24332,19984,19989,20010,20017,20022,20028,20031,20034,20054,20056,20098,20101,35947,20106,33298,24333,20110,20126,20127,20128,20130,20144,20147,20150,20174,20173,20164,20166,20162,20183,20190,20205,20191,20215,20233,20314,20272,20315,20317,20311,20295,20342,20360,20367,20376,20347,20329,20336,20369,20335,20358,20374,20760,20436,20447,20430,20440,20443,20433,20442,20432,20452,20453,20506,20520,20500,20522,20517,20485,20252,20470,20513,20521,20524,20478,20463,20497,20486,20547,20551,26371,20565,20560,20552,20570,20566,20588,20600,20608,20634,20613,20660,20658,20681,20682,20659,20674,20694,20702,20709,20717,20707,20718,20729,20725,20745,20737,20738,20758,20757,20756,20762,20769,20794,20791,20796,20795,20799,20800,20818,20812,20820,20834,31480,20841,20842,20846,20864,20866,22232,20876,20873,20879,20881,20883,20885,20886,20900,20902,20898,20905,20906,20907,20915,20913,20914,20912,20917,20925,20933,20937,20955,20960,34389,20969,20973,20976,20981,20990,20996,21003,21012,21006,21031,21034,21038,21043,21049,21071,21060,21067,21068,21086,21076,21098,21108,21097,21107,21119,21117,21133,21140,21138,21105,21128,21137,36776,36775,21164,21165,21180,21173,21185,21197,21207,21214,21219,21222,39149,21216,21235,21237,21240,21241,21254,21256,30008,21261,21264,21263,21269,21274,21283,21295,21297,21299,21304,21312,21318,21317,19991,21321,21325,20950,21342,21353,21358,22808,21371,21367,21378,21398,21408,21414,21413,21422,21424,21430,21443,31762,38617,21471,26364,29166,21486,21480,21485,21498,21505,21565,21568,21548,21549,21564,21550,21558,21545,21533,21582,21647,21621,21646,21599,21617,21623,21616,21650,21627,21632,21622,21636,21648,21638,21703,21666,21688,21669,21676,21700,21704,21672,21675,21698,21668,21694,21692,21720,21733,21734,21775,21780,21757,21742,21741,21754,21730,21817,21824,21859,21836,21806,21852,21829,21846,21847,21816,21811,21853,21913,21888,21679,21898,21919,21883,21886,21912,21918,21934,21884,21891,21929,21895,21928,21978,21957,21983,21956,21980,21988,21972,22036,22007,22038,22014,22013,22043,22009,22094,22096,29151,22068,22070,22066,22072,22123,22116,22063,22124,22122,22150,22144,22154,22176,22164,22159,22181,22190,22198,22196,22210,22204,22209,22211,22208,22216,22222,22225,22227,22231,22254,22265,22272,22271,22276,22281,22280,22283,22285,22291,22296,22294,21959,22300,22310,22327,22328,22350,22331,22336,22351,22377,22464,22408,22369,22399,22409,22419,22432,22451,22436,22442,22448,22467,22470,22484,22482,22483,22538,22486,22499,22539,22553,22557,22642,22561,22626,22603,22640,27584,22610,22589,22649,22661,22713,22687,22699,22714,22750,22715,22712,22702,22725,22739,22737,22743,22745,22744,22757,22748,22756,22751,22767,22778,22777,22779,22780,22781,22786,22794,22800,22811,26790,22821,22828,22829,22834,22840,22846,31442,22869,22864,22862,22874,22872,22882,22880,22887,22892,22889,22904,22913,22941,20318,20395,22947,22962,22982,23016,23004,22925,23001,23002,23077,23071,23057,23068,23049,23066,23104,23148,23113,23093,23094,23138,23146,23194,23228,23230,23243,23234,23229,23267,23255,23270,23273,23254,23290,23291,23308,23307,23318,23346,23248,23338,23350,23358,23363,23365,23360,23377,23381,23386,23387,23397,23401,23408,23411,23413,23416,25992,23418,23424,23427,23462,23480,23491,23495,23497,23508,23504,23524,23526,23522,23518,23525,23531,23536,23542,23539,23557,23559,23560,23565,23571,23584,23586,23592,23608,23609,23617,23622,23630,23635,23632,23631,23409,23660,23662,20066,23670,23673,23692,23697,23700,22939,23723,23739,23734,23740,23735,23749,23742,23751,23769,23785,23805,23802,23789,23948,23786,23819,23829,23831,23900,23839,23835,23825,23828,23842,23834,23833,23832,23884,23890,23886,23883,23916,23923,23926,23943,23940,23938,23970,23965,23980,23982,23997,23952,23991,23996,24009,24013,24019,24018,24022,24027,24043,24050,24053,24075,24090,24089,24081,24091,24118,24119,24132,24131,24128,24142,24151,24148,24159,24162,24164,24135,24181,24182,24186,40636,24191,24224,24257,24258,24264,24272,24271,24278,24291,24285,24282,24283,24290,24289,24296,24297,24300,24305,24307,24304,24308,24312,24318,24323,24329,24413,24412,24331,24337,24342,24361,24365,24376,24385,24392,24396,24398,24367,24401,24406,24407,24409,24417,24429,24435,24439,24451,24450,24447,24458,24456,24465,24455,24478,24473,24472,24480,24488,24493,24508,24534,24571,24548,24568,24561,24541,24755,24575,24609,24672,24601,24592,24617,24590,24625,24603,24597,24619,24614,24591,24634,24666,24641,24682,24695,24671,24650,24646,24653,24675,24643,24676,24642,24684,24683,24665,24705,24717,24807,24707,24730,24708,24731,24726,24727,24722,24743,24715,24801,24760,24800,24787,24756,24560,24765,24774,24757,24792,24909,24853,24838,24822,24823,24832,24820,24826,24835,24865,24827,24817,24845,24846,24903,24894,24872,24871,24906,24895,24892,24876,24884,24893,24898,24900,24947,24951,24920,24921,24922,24939,24948,24943,24933,24945,24927,24925,24915,24949,24985,24982,24967,25004,24980,24986,24970,24977,25003,25006,25036,25034,25033,25079,25032,25027,25030,25018,25035,32633,25037,25062,25059,25078,25082,25076,25087,25085,25084,25086,25088,25096,25097,25101,25100,25108,25115,25118,25121,25130,25134,25136,25138,25139,25153,25166,25182,25187,25179,25184,25192,25212,25218,25225,25214,25234,25235,25238,25300,25219,25236,25303,25297,25275,25295,25343,25286,25812,25288,25308,25292,25290,25282,25287,25243,25289,25356,25326,25329,25383,25346,25352,25327,25333,25424,25406,25421,25628,25423,25494,25486,25472,25515,25462,25507,25487,25481,25503,25525,25451,25449,25534,25577,25536,25542,25571,25545,25554,25590,25540,25622,25652,25606,25619,25638,25654,25885,25623,25640,25615,25703,25711,25718,25678,25898,25749,25747,25765,25769,25736,25788,25818,25810,25797,25799,25787,25816,25794,25841,25831,33289,25824,25825,25260,25827,25839,25900,25846,25844,25842,25850,25856,25853,25880,25884,25861,25892,25891,25899,25908,25909,25911,25910,25912,30027,25928,25942,25941,25933,25944,25950,25949,25970,25976,25986,25987,35722,26011,26015,26027,26039,26051,26054,26049,26052,26060,26066,26075,26073,26080,26081,26097,26482,26122,26115,26107,26483,26165,26166,26164,26140,26191,26180,26185,26177,26206,26205,26212,26215,26216,26207,26210,26224,26243,26248,26254,26249,26244,26264,26269,26305,26297,26313,26302,26300,26308,26296,26326,26330,26336,26175,26342,26345,26352,26357,26359,26383,26390,26398,26406,26407,38712,26414,26431,26422,26433,26424,26423,26438,26462,26464,26457,26467,26468,26505,26480,26537,26492,26474,26508,26507,26534,26529,26501,26551,26607,26548,26604,26547,26601,26552,26596,26590,26589,26594,26606,26553,26574,26566,26599,27292,26654,26694,26665,26688,26701,26674,26702,26803,26667,26713,26723,26743,26751,26783,26767,26797,26772,26781,26779,26755,27310,26809,26740,26805,26784,26810,26895,26765,26750,26881,26826,26888,26840,26914,26918,26849,26892,26829,26836,26855,26837,26934,26898,26884,26839,26851,26917,26873,26848,26863,26920,26922,26906,26915,26913,26822,27001,26999,26972,27000,26987,26964,27006,26990,26937,26996,26941,26969,26928,26977,26974,26973,27009,26986,27058,27054,27088,27071,27073,27091,27070,27086,23528,27082,27101,27067,27075,27047,27182,27025,27040,27036,27029,27060,27102,27112,27138,27163,27135,27402,27129,27122,27111,27141,27057,27166,27117,27156,27115,27146,27154,27329,27171,27155,27204,27148,27250,27190,27256,27207,27234,27225,27238,27208,27192,27170,27280,27277,27296,27268,27298,27299,27287,34327,27323,27331,27330,27320,27315,27308,27358,27345,27359,27306,27354,27370,27387,27397,34326,27386,27410,27414,39729,27423,27448,27447,30428,27449,39150,27463,27459,27465,27472,27481,27476,27483,27487,27489,27512,27513,27519,27520,27524,27523,27533,27544,27541,27550,27556,27562,27563,27567,27570,27569,27571,27575,27580,27590,27595,27603,27615,27628,27627,27635,27631,40638,27656,27667,27668,27675,27684,27683,27742,27733,27746,27754,27778,27789,27802,27777,27803,27774,27752,27763,27794,27792,27844,27889,27859,27837,27863,27845,27869,27822,27825,27838,27834,27867,27887,27865,27882,27935,34893,27958,27947,27965,27960,27929,27957,27955,27922,27916,28003,28051,28004,27994,28025,27993,28046,28053,28644,28037,28153,28181,28170,28085,28103,28134,28088,28102,28140,28126,28108,28136,28114,28101,28154,28121,28132,28117,28138,28142,28205,28270,28206,28185,28274,28255,28222,28195,28267,28203,28278,28237,28191,28227,28218,28238,28196,28415,28189,28216,28290,28330,28312,28361,28343,28371,28349,28335,28356,28338,28372,28373,28303,28325,28354,28319,28481,28433,28748,28396,28408,28414,28479,28402,28465,28399,28466,28364,28478,28435,28407,28550,28538,28536,28545,28544,28527,28507,28659,28525,28546,28540,28504,28558,28561,28610,28518,28595,28579,28577,28580,28601,28614,28586,28639,28629,28652,28628,28632,28657,28654,28635,28681,28683,28666,28689,28673,28687,28670,28699,28698,28532,28701,28696,28703,28720,28734,28722,28753,28771,28825,28818,28847,28913,28844,28856,28851,28846,28895,28875,28893,28889,28937,28925,28956,28953,29029,29013,29064,29030,29026,29004,29014,29036,29071,29179,29060,29077,29096,29100,29143,29113,29118,29138,29129,29140,29134,29152,29164,29159,29173,29180,29177,29183,29197,29200,29211,29224,29229,29228,29232,29234,29243,29244,29247,29248,29254,29259,29272,29300,29310,29314,29313,29319,29330,29334,29346,29351,29369,29362,29379,29382,29380,29390,29394,29410,29408,29409,29433,29431,20495,29463,29450,29468,29462,29469,29492,29487,29481,29477,29502,29518,29519,40664,29527,29546,29544,29552,29560,29557,29563,29562,29640,29619,29646,29627,29632,29669,29678,29662,29858,29701,29807,29733,29688,29746,29754,29781,29759,29791,29785,29761,29788,29801,29808,29795,29802,29814,29822,29835,29854,29863,29898,29903,29908,29681,29920,29923,29927,29929,29934,29938,29936,29937,29944,29943,29956,29955,29957,29964,29966,29965,29973,29971,29982,29990,29996,30012,30020,30029,30026,30025,30043,30022,30042,30057,30052,30055,30059,30061,30072,30070,30086,30087,30068,30090,30089,30082,30100,30106,30109,30117,30115,30146,30131,30147,30133,30141,30136,30140,30129,30157,30154,30162,30169,30179,30174,30206,30207,30204,30209,30192,30202,30194,30195,30219,30221,30217,30239,30247,30240,30241,30242,30244,30260,30256,30267,30279,30280,30278,30300,30296,30305,30306,30312,30313,30314,30311,30316,30320,30322,30326,30328,30332,30336,30339,30344,30347,30350,30358,30355,30361,30362,30384,30388,30392,30393,30394,30402,30413,30422,30418,30430,30433,30437,30439,30442,34351,30459,30472,30471,30468,30505,30500,30494,30501,30502,30491,30519,30520,30535,30554,30568,30571,30555,30565,30591,30590,30585,30606,30603,30609,30624,30622,30640,30646,30649,30655,30652,30653,30651,30663,30669,30679,30682,30684,30691,30702,30716,30732,30738,31014,30752,31018,30789,30862,30836,30854,30844,30874,30860,30883,30901,30890,30895,30929,30918,30923,30932,30910,30908,30917,30922,30956,30951,30938,30973,30964,30983,30994,30993,31001,31020,31019,31040,31072,31063,31071,31066,31061,31059,31098,31103,31114,31133,31143,40779,31146,31150,31155,31161,31162,31177,31189,31207,31212,31201,31203,31240,31245,31256,31257,31264,31263,31104,31281,31291,31294,31287,31299,31319,31305,31329,31330,31337,40861,31344,31353,31357,31368,31383,31381,31384,31382,31401,31432,31408,31414,31429,31428,31423,36995,31431,31434,31437,31439,31445,31443,31449,31450,31453,31457,31458,31462,31469,31472,31490,31503,31498,31494,31539,31512,31513,31518,31541,31528,31542,31568,31610,31492,31565,31499,31564,31557,31605,31589,31604,31591,31600,31601,31596,31598,31645,31640,31647,31629,31644,31642,31627,31634,31631,31581,31641,31691,31681,31692,31695,31668,31686,31709,31721,31761,31764,31718,31717,31840,31744,31751,31763,31731,31735,31767,31757,31734,31779,31783,31786,31775,31799,31787,31805,31820,31811,31828,31823,31808,31824,31832,31839,31844,31830,31845,31852,31861,31875,31888,31908,31917,31906,31915,31905,31912,31923,31922,31921,31918,31929,31933,31936,31941,31938,31960,31954,31964,31970,39739,31983,31986,31988,31990,31994,32006,32002,32028,32021,32010,32069,32075,32046,32050,32063,32053,32070,32115,32086,32078,32114,32104,32110,32079,32099,32147,32137,32091,32143,32125,32155,32186,32174,32163,32181,32199,32189,32171,32317,32162,32175,32220,32184,32159,32176,32216,32221,32228,32222,32251,32242,32225,32261,32266,32291,32289,32274,32305,32287,32265,32267,32290,32326,32358,32315,32309,32313,32323,32311,32306,32314,32359,32349,32342,32350,32345,32346,32377,32362,32361,32380,32379,32387,32213,32381,36782,32383,32392,32393,32396,32402,32400,32403,32404,32406,32398,32411,32412,32568,32570,32581,32588,32589,32590,32592,32593,32597,32596,32600,32607,32608,32616,32617,32615,32632,32642,32646,32643,32648,32647,32652,32660,32670,32669,32666,32675,32687,32690,32697,32686,32694,32696,35697,32709,32710,32714,32725,32724,32737,32742,32745,32755,32761,39132,32774,32772,32779,32786,32792,32793,32796,32801,32808,32831,32827,32842,32838,32850,32856,32858,32863,32866,32872,32883,32882,32880,32886,32889,32893,32895,32900,32902,32901,32923,32915,32922,32941,20880,32940,32987,32997,32985,32989,32964,32986,32982,33033,33007,33009,33051,33065,33059,33071,33099,38539,33094,33086,33107,33105,33020,33137,33134,33125,33126,33140,33155,33160,33162,33152,33154,33184,33173,33188,33187,33119,33171,33193,33200,33205,33214,33208,33213,33216,33218,33210,33225,33229,33233,33241,33240,33224,33242,33247,33248,33255,33274,33275,33278,33281,33282,33285,33287,33290,33293,33296,33302,33321,33323,33336,33331,33344,33369,33368,33373,33370,33375,33380,33378,33384,33386,33387,33326,33393,33399,33400,33406,33421,33426,33451,33439,33467,33452,33505,33507,33503,33490,33524,33523,33530,33683,33539,33531,33529,33502,33542,33500,33545,33497,33589,33588,33558,33586,33585,33600,33593,33616,33605,33583,33579,33559,33560,33669,33690,33706,33695,33698,33686,33571,33678,33671,33674,33660,33717,33651,33653,33696,33673,33704,33780,33811,33771,33742,33789,33795,33752,33803,33729,33783,33799,33760,33778,33805,33826,33824,33725,33848,34054,33787,33901,33834,33852,34138,33924,33911,33899,33965,33902,33922,33897,33862,33836,33903,33913,33845,33994,33890,33977,33983,33951,34009,33997,33979,34010,34000,33985,33990,34006,33953,34081,34047,34036,34071,34072,34092,34079,34069,34068,34044,34112,34147,34136,34120,34113,34306,34123,34133,34176,34212,34184,34193,34186,34216,34157,34196,34203,34282,34183,34204,34167,34174,34192,34249,34234,34255,34233,34256,34261,34269,34277,34268,34297,34314,34323,34315,34302,34298,34310,34338,34330,34352,34367,34381,20053,34388,34399,34407,34417,34451,34467,34473,34474,34443,34444,34486,34479,34500,34502,34480,34505,34851,34475,34516,34526,34537,34540,34527,34523,34543,34578,34566,34568,34560,34563,34555,34577,34569,34573,34553,34570,34612,34623,34615,34619,34597,34601,34586,34656,34655,34680,34636,34638,34676,34647,34664,34670,34649,34643,34659,34666,34821,34722,34719,34690,34735,34763,34749,34752,34768,38614,34731,34756,34739,34759,34758,34747,34799,34802,34784,34831,34829,34814,34806,34807,34830,34770,34833,34838,34837,34850,34849,34865,34870,34873,34855,34875,34884,34882,34898,34905,34910,34914,34923,34945,34942,34974,34933,34941,34997,34930,34946,34967,34962,34990,34969,34978,34957,34980,34992,35007,34993,35011,35012,35028,35032,35033,35037,35065,35074,35068,35060,35048,35058,35076,35084,35082,35091,35139,35102,35109,35114,35115,35137,35140,35131,35126,35128,35148,35101,35168,35166,35174,35172,35181,35178,35183,35188,35191,35198,35203,35208,35210,35219,35224,35233,35241,35238,35244,35247,35250,35258,35261,35263,35264,35290,35292,35293,35303,35316,35320,35331,35350,35344,35340,35355,35357,35365,35382,35393,35419,35410,35398,35400,35452,35437,35436,35426,35461,35458,35460,35496,35489,35473,35493,35494,35482,35491,35524,35533,35522,35546,35563,35571,35559,35556,35569,35604,35552,35554,35575,35550,35547,35596,35591,35610,35553,35606,35600,35607,35616,35635,38827,35622,35627,35646,35624,35649,35660,35663,35662,35657,35670,35675,35674,35691,35679,35692,35695,35700,35709,35712,35724,35726,35730,35731,35734,35737,35738,35898,35905,35903,35912,35916,35918,35920,35925,35938,35948,35960,35962,35970,35977,35973,35978,35981,35982,35988,35964,35992,25117,36013,36010,36029,36018,36019,36014,36022,36040,36033,36068,36067,36058,36093,36090,36091,36100,36101,36106,36103,36111,36109,36112,40782,36115,36045,36116,36118,36199,36205,36209,36211,36225,36249,36290,36286,36282,36303,36314,36310,36300,36315,36299,36330,36331,36319,36323,36348,36360,36361,36351,36381,36382,36368,36383,36418,36405,36400,36404,36426,36423,36425,36428,36432,36424,36441,36452,36448,36394,36451,36437,36470,36466,36476,36481,36487,36485,36484,36491,36490,36499,36497,36500,36505,36522,36513,36524,36528,36550,36529,36542,36549,36552,36555,36571,36579,36604,36603,36587,36606,36618,36613,36629,36626,36633,36627,36636,36639,36635,36620,36646,36659,36667,36665,36677,36674,36670,36684,36681,36678,36686,36695,36700,36706,36707,36708,36764,36767,36771,36781,36783,36791,36826,36837,36834,36842,36847,36999,36852,36869,36857,36858,36881,36885,36897,36877,36894,36886,36875,36903,36918,36917,36921,36856,36943,36944,36945,36946,36878,36937,36926,36950,36952,36958,36968,36975,36982,38568,36978,36994,36989,36993,36992,37002,37001,37007,37032,37039,37041,37045,37090,37092,25160,37083,37122,37138,37145,37170,37168,37194,37206,37208,37219,37221,37225,37235,37234,37259,37257,37250,37282,37291,37295,37290,37301,37300,37306,37312,37313,37321,37323,37328,37334,37343,37345,37339,37372,37365,37366,37406,37375,37396,37420,37397,37393,37470,37463,37445,37449,37476,37448,37525,37439,37451,37456,37532,37526,37523,37531,37466,37583,37561,37559,37609,37647,37626,37700,37678,37657,37666,37658,37667,37690,37685,37691,37724,37728,37756,37742,37718,37808,37804,37805,37780,37817,37846,37847,37864,37861,37848,37827,37853,37840,37832,37860,37914,37908,37907,37891,37895,37904,37942,37931,37941,37921,37946,37953,37970,37956,37979,37984,37986,37982,37994,37417,38000,38005,38007,38013,37978,38012,38014,38017,38015,38274,38279,38282,38292,38294,38296,38297,38304,38312,38311,38317,38332,38331,38329,38334,38346,28662,38339,38349,38348,38357,38356,38358,38364,38369,38373,38370,38433,38440,38446,38447,38466,38476,38479,38475,38519,38492,38494,38493,38495,38502,38514,38508,38541,38552,38549,38551,38570,38567,38577,38578,38576,38580,38582,38584,38585,38606,38603,38601,38605,35149,38620,38669,38613,38649,38660,38662,38664,38675,38670,38673,38671,38678,38681,38692,38698,38704,38713,38717,38718,38724,38726,38728,38722,38729,38748,38752,38756,38758,38760,21202,38763,38769,38777,38789,38780,38785,38778,38790,38795,38799,38800,38812,38824,38822,38819,38835,38836,38851,38854,38856,38859,38876,38893,40783,38898,31455,38902,38901,38927,38924,38968,38948,38945,38967,38973,38982,38991,38987,39019,39023,39024,39025,39028,39027,39082,39087,39089,39094,39108,39107,39110,39145,39147,39171,39177,39186,39188,39192,39201,39197,39198,39204,39200,39212,39214,39229,39230,39234,39241,39237,39248,39243,39249,39250,39244,39253,39319,39320,39333,39341,39342,39356,39391,39387,39389,39384,39377,39405,39406,39409,39410,39419,39416,39425,39439,39429,39394,39449,39467,39479,39493,39490,39488,39491,39486,39509,39501,39515,39511,39519,39522,39525,39524,39529,39531,39530,39597,39600,39612,39616,39631,39633,39635,39636,39646,39647,39650,39651,39654,39663,39659,39662,39668,39665,39671,39675,39686,39704,39706,39711,39714,39715,39717,39719,39720,39721,39722,39726,39727,39730,39748,39747,39759,39757,39758,39761,39768,39796,39827,39811,39825,39830,39831,39839,39840,39848,39860,39872,39882,39865,39878,39887,39889,39890,39907,39906,39908,39892,39905,39994,39922,39921,39920,39957,39956,39945,39955,39948,39942,39944,39954,39946,39940,39982,39963,39973,39972,39969,39984,40007,39986,40006,39998,40026,40032,40039,40054,40056,40167,40172,40176,40201,40200,40171,40195,40198,40234,40230,40367,40227,40223,40260,40213,40210,40257,40255,40254,40262,40264,40285,40286,40292,40273,40272,40281,40306,40329,40327,40363,40303,40314,40346,40356,40361,40370,40388,40385,40379,40376,40378,40390,40399,40386,40409,40403,40440,40422,40429,40431,40445,40474,40475,40478,40565,40569,40573,40577,40584,40587,40588,40594,40597,40593,40605,40613,40617,40632,40618,40621,38753,40652,40654,40655,40656,40660,40668,40670,40669,40672,40677,40680,40687,40692,40694,40695,40697,40699,40700,40701,40711,40712,30391,40725,40737,40748,40766,40778,40786,40788,40803,40799,40800,40801,40806,40807,40812,40810,40823,40818,40822,40853,40860,40864,22575,27079,36953,29796,20956,29081,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,32394,35100,37704,37512,34012,20425,28859,26161,26824,37625,26363,24389,20008,20193,20220,20224,20227,20281,20310,20370,20362,20378,20372,20429,20544,20514,20479,20510,20550,20592,20546,20628,20724,20696,20810,20836,20893,20926,20972,21013,21148,21158,21184,21211,21248,21255,21284,21362,21395,21426,21469,64014,21660,21642,21673,21759,21894,22361,22373,22444,22472,22471,64015,64016,22686,22706,22795,22867,22875,22877,22883,22948,22970,23382,23488,29999,23512,23532,23582,23718,23738,23797,23847,23891,64017,23874,23917,23992,23993,24016,24353,24372,24423,24503,24542,24669,24709,24714,24798,24789,24864,24818,24849,24887,24880,24984,25107,25254,25589,25696,25757,25806,25934,26112,26133,26171,26121,26158,26142,26148,26213,26199,26201,64018,26227,26265,26272,26290,26303,26362,26382,63785,26470,26555,26706,26560,26625,26692,26831,64019,26984,64020,27032,27106,27184,27243,27206,27251,27262,27362,27364,27606,27711,27740,27782,27759,27866,27908,28039,28015,28054,28076,28111,28152,28146,28156,28217,28252,28199,28220,28351,28552,28597,28661,28677,28679,28712,28805,28843,28943,28932,29020,28998,28999,64021,29121,29182,29361,29374,29476,64022,29559,29629,29641,29654,29667,29650,29703,29685,29734,29738,29737,29742,29794,29833,29855,29953,30063,30338,30364,30366,30363,30374,64023,30534,21167,30753,30798,30820,30842,31024,64024,64025,64026,31124,64027,31131,31441,31463,64028,31467,31646,64029,32072,32092,32183,32160,32214,32338,32583,32673,64030,33537,33634,33663,33735,33782,33864,33972,34131,34137,34155,64031,34224,64032,64033,34823,35061,35346,35383,35449,35495,35518,35551,64034,35574,35667,35711,36080,36084,36114,36214,64035,36559,64036,64037,36967,37086,64038,37141,37159,37338,37335,37342,37357,37358,37348,37349,37382,37392,37386,37434,37440,37436,37454,37465,37457,37433,37479,37543,37495,37496,37607,37591,37593,37584,64039,37589,37600,37587,37669,37665,37627,64040,37662,37631,37661,37634,37744,37719,37796,37830,37854,37880,37937,37957,37960,38290,63964,64041,38557,38575,38707,38715,38723,38733,38735,38737,38741,38999,39013,64042,64043,39207,64044,39326,39502,39641,39644,39797,39794,39823,39857,39867,39936,40304,40299,64045,40473,40657,null,null,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,65506,65508,65287,65282,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,65506,65508,65287,65282,12849,8470,8481,8757,32394,35100,37704,37512,34012,20425,28859,26161,26824,37625,26363,24389,20008,20193,20220,20224,20227,20281,20310,20370,20362,20378,20372,20429,20544,20514,20479,20510,20550,20592,20546,20628,20724,20696,20810,20836,20893,20926,20972,21013,21148,21158,21184,21211,21248,21255,21284,21362,21395,21426,21469,64014,21660,21642,21673,21759,21894,22361,22373,22444,22472,22471,64015,64016,22686,22706,22795,22867,22875,22877,22883,22948,22970,23382,23488,29999,23512,23532,23582,23718,23738,23797,23847,23891,64017,23874,23917,23992,23993,24016,24353,24372,24423,24503,24542,24669,24709,24714,24798,24789,24864,24818,24849,24887,24880,24984,25107,25254,25589,25696,25757,25806,25934,26112,26133,26171,26121,26158,26142,26148,26213,26199,26201,64018,26227,26265,26272,26290,26303,26362,26382,63785,26470,26555,26706,26560,26625,26692,26831,64019,26984,64020,27032,27106,27184,27243,27206,27251,27262,27362,27364,27606,27711,27740,27782,27759,27866,27908,28039,28015,28054,28076,28111,28152,28146,28156,28217,28252,28199,28220,28351,28552,28597,28661,28677,28679,28712,28805,28843,28943,28932,29020,28998,28999,64021,29121,29182,29361,29374,29476,64022,29559,29629,29641,29654,29667,29650,29703,29685,29734,29738,29737,29742,29794,29833,29855,29953,30063,30338,30364,30366,30363,30374,64023,30534,21167,30753,30798,30820,30842,31024,64024,64025,64026,31124,64027,31131,31441,31463,64028,31467,31646,64029,32072,32092,32183,32160,32214,32338,32583,32673,64030,33537,33634,33663,33735,33782,33864,33972,34131,34137,34155,64031,34224,64032,64033,34823,35061,35346,35383,35449,35495,35518,35551,64034,35574,35667,35711,36080,36084,36114,36214,64035,36559,64036,64037,36967,37086,64038,37141,37159,37338,37335,37342,37357,37358,37348,37349,37382,37392,37386,37434,37440,37436,37454,37465,37457,37433,37479,37543,37495,37496,37607,37591,37593,37584,64039,37589,37600,37587,37669,37665,37627,64040,37662,37631,37661,37634,37744,37719,37796,37830,37854,37880,37937,37957,37960,38290,63964,64041,38557,38575,38707,38715,38723,38733,38735,38737,38741,38999,39013,64042,64043,39207,64044,39326,39502,39641,39644,39797,39794,39823,39857,39867,39936,40304,40299,64045,40473,40657,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],
	  "jis0212":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,728,711,184,729,733,175,731,730,65374,900,901,null,null,null,null,null,null,null,null,161,166,191,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,186,170,169,174,8482,164,8470,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,902,904,905,906,938,null,908,null,910,939,null,911,null,null,null,null,940,941,942,943,970,912,972,962,973,971,944,974,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1038,1039,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1118,1119,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,198,272,null,294,null,306,null,321,319,null,330,216,338,null,358,222,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,230,273,240,295,305,307,312,322,320,329,331,248,339,223,359,254,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,193,192,196,194,258,461,256,260,197,195,262,264,268,199,266,270,201,200,203,202,282,278,274,280,null,284,286,290,288,292,205,204,207,206,463,304,298,302,296,308,310,313,317,315,323,327,325,209,211,210,214,212,465,336,332,213,340,344,342,346,348,352,350,356,354,218,217,220,219,364,467,368,362,370,366,360,471,475,473,469,372,221,376,374,377,381,379,null,null,null,null,null,null,null,225,224,228,226,259,462,257,261,229,227,263,265,269,231,267,271,233,232,235,234,283,279,275,281,501,285,287,null,289,293,237,236,239,238,464,null,299,303,297,309,311,314,318,316,324,328,326,241,243,242,246,244,466,337,333,245,341,345,343,347,349,353,351,357,355,250,249,252,251,365,468,369,363,371,367,361,472,476,474,470,373,253,255,375,378,382,380,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,19970,19972,19973,19980,19986,19999,20003,20004,20008,20011,20014,20015,20016,20021,20032,20033,20036,20039,20049,20058,20060,20067,20072,20073,20084,20085,20089,20095,20109,20118,20119,20125,20143,20153,20163,20176,20186,20187,20192,20193,20194,20200,20207,20209,20211,20213,20221,20222,20223,20224,20226,20227,20232,20235,20236,20242,20245,20246,20247,20249,20270,20273,20320,20275,20277,20279,20281,20283,20286,20288,20290,20296,20297,20299,20300,20306,20308,20310,20312,20319,20323,20330,20332,20334,20337,20343,20344,20345,20346,20349,20350,20353,20354,20356,20357,20361,20362,20364,20366,20368,20370,20371,20372,20375,20377,20378,20382,20383,20402,20407,20409,20411,20412,20413,20414,20416,20417,20421,20422,20424,20425,20427,20428,20429,20431,20434,20444,20448,20450,20464,20466,20476,20477,20479,20480,20481,20484,20487,20490,20492,20494,20496,20499,20503,20504,20507,20508,20509,20510,20514,20519,20526,20528,20530,20531,20533,20544,20545,20546,20549,20550,20554,20556,20558,20561,20562,20563,20567,20569,20575,20576,20578,20579,20582,20583,20586,20589,20592,20593,20539,20609,20611,20612,20614,20618,20622,20623,20624,20626,20627,20628,20630,20635,20636,20638,20639,20640,20641,20642,20650,20655,20656,20665,20666,20669,20672,20675,20676,20679,20684,20686,20688,20691,20692,20696,20700,20701,20703,20706,20708,20710,20712,20713,20719,20721,20726,20730,20734,20739,20742,20743,20744,20747,20748,20749,20750,20722,20752,20759,20761,20763,20764,20765,20766,20771,20775,20776,20780,20781,20783,20785,20787,20788,20789,20792,20793,20802,20810,20815,20819,20821,20823,20824,20831,20836,20838,20862,20867,20868,20875,20878,20888,20893,20897,20899,20909,20920,20922,20924,20926,20927,20930,20936,20943,20945,20946,20947,20949,20952,20958,20962,20965,20974,20978,20979,20980,20983,20993,20994,20997,21010,21011,21013,21014,21016,21026,21032,21041,21042,21045,21052,21061,21065,21077,21079,21080,21082,21084,21087,21088,21089,21094,21102,21111,21112,21113,21120,21122,21125,21130,21132,21139,21141,21142,21143,21144,21146,21148,21156,21157,21158,21159,21167,21168,21174,21175,21176,21178,21179,21181,21184,21188,21190,21192,21196,21199,21201,21204,21206,21211,21212,21217,21221,21224,21225,21226,21228,21232,21233,21236,21238,21239,21248,21251,21258,21259,21260,21265,21267,21272,21275,21276,21278,21279,21285,21287,21288,21289,21291,21292,21293,21296,21298,21301,21308,21309,21310,21314,21324,21323,21337,21339,21345,21347,21349,21356,21357,21362,21369,21374,21379,21383,21384,21390,21395,21396,21401,21405,21409,21412,21418,21419,21423,21426,21428,21429,21431,21432,21434,21437,21440,21445,21455,21458,21459,21461,21466,21469,21470,21472,21478,21479,21493,21506,21523,21530,21537,21543,21544,21546,21551,21553,21556,21557,21571,21572,21575,21581,21583,21598,21602,21604,21606,21607,21609,21611,21613,21614,21620,21631,21633,21635,21637,21640,21641,21645,21649,21653,21654,21660,21663,21665,21670,21671,21673,21674,21677,21678,21681,21687,21689,21690,21691,21695,21702,21706,21709,21710,21728,21738,21740,21743,21750,21756,21758,21759,21760,21761,21765,21768,21769,21772,21773,21774,21781,21802,21803,21810,21813,21814,21819,21820,21821,21825,21831,21833,21834,21837,21840,21841,21848,21850,21851,21854,21856,21857,21860,21862,21887,21889,21890,21894,21896,21902,21903,21905,21906,21907,21908,21911,21923,21924,21933,21938,21951,21953,21955,21958,21961,21963,21964,21966,21969,21970,21971,21975,21976,21979,21982,21986,21993,22006,22015,22021,22024,22026,22029,22030,22031,22032,22033,22034,22041,22060,22064,22067,22069,22071,22073,22075,22076,22077,22079,22080,22081,22083,22084,22086,22089,22091,22093,22095,22100,22110,22112,22113,22114,22115,22118,22121,22125,22127,22129,22130,22133,22148,22149,22152,22155,22156,22165,22169,22170,22173,22174,22175,22182,22183,22184,22185,22187,22188,22189,22193,22195,22199,22206,22213,22217,22218,22219,22223,22224,22220,22221,22233,22236,22237,22239,22241,22244,22245,22246,22247,22248,22257,22251,22253,22262,22263,22273,22274,22279,22282,22284,22289,22293,22298,22299,22301,22304,22306,22307,22308,22309,22313,22314,22316,22318,22319,22323,22324,22333,22334,22335,22341,22342,22348,22349,22354,22370,22373,22375,22376,22379,22381,22382,22383,22384,22385,22387,22388,22389,22391,22393,22394,22395,22396,22398,22401,22403,22412,22420,22423,22425,22426,22428,22429,22430,22431,22433,22421,22439,22440,22441,22444,22456,22461,22471,22472,22476,22479,22485,22493,22494,22500,22502,22503,22505,22509,22512,22517,22518,22520,22525,22526,22527,22531,22532,22536,22537,22497,22540,22541,22555,22558,22559,22560,22566,22567,22573,22578,22585,22591,22601,22604,22605,22607,22608,22613,22623,22625,22628,22631,22632,22648,22652,22655,22656,22657,22663,22664,22665,22666,22668,22669,22671,22672,22676,22678,22685,22688,22689,22690,22694,22697,22705,22706,22724,22716,22722,22728,22733,22734,22736,22738,22740,22742,22746,22749,22753,22754,22761,22771,22789,22790,22795,22796,22802,22803,22804,34369,22813,22817,22819,22820,22824,22831,22832,22835,22837,22838,22847,22851,22854,22866,22867,22873,22875,22877,22878,22879,22881,22883,22891,22893,22895,22898,22901,22902,22905,22907,22908,22923,22924,22926,22930,22933,22935,22943,22948,22951,22957,22958,22959,22960,22963,22967,22970,22972,22977,22979,22980,22984,22986,22989,22994,23005,23006,23007,23011,23012,23015,23022,23023,23025,23026,23028,23031,23040,23044,23052,23053,23054,23058,23059,23070,23075,23076,23079,23080,23082,23085,23088,23108,23109,23111,23112,23116,23120,23125,23134,23139,23141,23143,23149,23159,23162,23163,23166,23179,23184,23187,23190,23193,23196,23198,23199,23200,23202,23207,23212,23217,23218,23219,23221,23224,23226,23227,23231,23236,23238,23240,23247,23258,23260,23264,23269,23274,23278,23285,23286,23293,23296,23297,23304,23319,23348,23321,23323,23325,23329,23333,23341,23352,23361,23371,23372,23378,23382,23390,23400,23406,23407,23420,23421,23422,23423,23425,23428,23430,23434,23438,23440,23441,23443,23444,23446,23464,23465,23468,23469,23471,23473,23474,23479,23482,23484,23488,23489,23501,23503,23510,23511,23512,23513,23514,23520,23535,23537,23540,23549,23564,23575,23582,23583,23587,23590,23593,23595,23596,23598,23600,23602,23605,23606,23641,23642,23644,23650,23651,23655,23656,23657,23661,23664,23668,23669,23674,23675,23676,23677,23687,23688,23690,23695,23698,23709,23711,23712,23714,23715,23718,23722,23730,23732,23733,23738,23753,23755,23762,23773,23767,23790,23793,23794,23796,23809,23814,23821,23826,23851,23843,23844,23846,23847,23857,23860,23865,23869,23871,23874,23875,23878,23880,23893,23889,23897,23882,23903,23904,23905,23906,23908,23914,23917,23920,23929,23930,23934,23935,23937,23939,23944,23946,23954,23955,23956,23957,23961,23963,23967,23968,23975,23979,23984,23988,23992,23993,24003,24007,24011,24016,24014,24024,24025,24032,24036,24041,24056,24057,24064,24071,24077,24082,24084,24085,24088,24095,24096,24110,24104,24114,24117,24126,24139,24144,24137,24145,24150,24152,24155,24156,24158,24168,24170,24171,24172,24173,24174,24176,24192,24203,24206,24226,24228,24229,24232,24234,24236,24241,24243,24253,24254,24255,24262,24268,24267,24270,24273,24274,24276,24277,24284,24286,24293,24299,24322,24326,24327,24328,24334,24345,24348,24349,24353,24354,24355,24356,24360,24363,24364,24366,24368,24372,24374,24379,24381,24383,24384,24388,24389,24391,24397,24400,24404,24408,24411,24416,24419,24420,24423,24431,24434,24436,24437,24440,24442,24445,24446,24457,24461,24463,24470,24476,24477,24482,24487,24491,24484,24492,24495,24496,24497,24504,24516,24519,24520,24521,24523,24528,24529,24530,24531,24532,24542,24545,24546,24552,24553,24554,24556,24557,24558,24559,24562,24563,24566,24570,24572,24583,24586,24589,24595,24596,24599,24600,24602,24607,24612,24621,24627,24629,24640,24647,24648,24649,24652,24657,24660,24662,24663,24669,24673,24679,24689,24702,24703,24706,24710,24712,24714,24718,24721,24723,24725,24728,24733,24734,24738,24740,24741,24744,24752,24753,24759,24763,24766,24770,24772,24776,24777,24778,24779,24782,24783,24788,24789,24793,24795,24797,24798,24802,24805,24818,24821,24824,24828,24829,24834,24839,24842,24844,24848,24849,24850,24851,24852,24854,24855,24857,24860,24862,24866,24874,24875,24880,24881,24885,24886,24887,24889,24897,24901,24902,24905,24926,24928,24940,24946,24952,24955,24956,24959,24960,24961,24963,24964,24971,24973,24978,24979,24983,24984,24988,24989,24991,24992,24997,25000,25002,25005,25016,25017,25020,25024,25025,25026,25038,25039,25045,25052,25053,25054,25055,25057,25058,25063,25065,25061,25068,25069,25071,25089,25091,25092,25095,25107,25109,25116,25120,25122,25123,25127,25129,25131,25145,25149,25154,25155,25156,25158,25164,25168,25169,25170,25172,25174,25178,25180,25188,25197,25199,25203,25210,25213,25229,25230,25231,25232,25254,25256,25267,25270,25271,25274,25278,25279,25284,25294,25301,25302,25306,25322,25330,25332,25340,25341,25347,25348,25354,25355,25357,25360,25363,25366,25368,25385,25386,25389,25397,25398,25401,25404,25409,25410,25411,25412,25414,25418,25419,25422,25426,25427,25428,25432,25435,25445,25446,25452,25453,25457,25460,25461,25464,25468,25469,25471,25474,25476,25479,25482,25488,25492,25493,25497,25498,25502,25508,25510,25517,25518,25519,25533,25537,25541,25544,25550,25553,25555,25556,25557,25564,25568,25573,25578,25580,25586,25587,25589,25592,25593,25609,25610,25616,25618,25620,25624,25630,25632,25634,25636,25637,25641,25642,25647,25648,25653,25661,25663,25675,25679,25681,25682,25683,25684,25690,25691,25692,25693,25695,25696,25697,25699,25709,25715,25716,25723,25725,25733,25735,25743,25744,25745,25752,25753,25755,25757,25759,25761,25763,25766,25768,25772,25779,25789,25790,25791,25796,25801,25802,25803,25804,25806,25808,25809,25813,25815,25828,25829,25833,25834,25837,25840,25845,25847,25851,25855,25857,25860,25864,25865,25866,25871,25875,25876,25878,25881,25883,25886,25887,25890,25894,25897,25902,25905,25914,25916,25917,25923,25927,25929,25936,25938,25940,25951,25952,25959,25963,25978,25981,25985,25989,25994,26002,26005,26008,26013,26016,26019,26022,26030,26034,26035,26036,26047,26050,26056,26057,26062,26064,26068,26070,26072,26079,26096,26098,26100,26101,26105,26110,26111,26112,26116,26120,26121,26125,26129,26130,26133,26134,26141,26142,26145,26146,26147,26148,26150,26153,26154,26155,26156,26158,26160,26161,26163,26169,26167,26176,26181,26182,26186,26188,26193,26190,26199,26200,26201,26203,26204,26208,26209,26363,26218,26219,26220,26238,26227,26229,26239,26231,26232,26233,26235,26240,26236,26251,26252,26253,26256,26258,26265,26266,26267,26268,26271,26272,26276,26285,26289,26290,26293,26299,26303,26304,26306,26307,26312,26316,26318,26319,26324,26331,26335,26344,26347,26348,26350,26362,26373,26375,26382,26387,26393,26396,26400,26402,26419,26430,26437,26439,26440,26444,26452,26453,26461,26470,26476,26478,26484,26486,26491,26497,26500,26510,26511,26513,26515,26518,26520,26521,26523,26544,26545,26546,26549,26555,26556,26557,26617,26560,26562,26563,26565,26568,26569,26578,26583,26585,26588,26593,26598,26608,26610,26614,26615,26706,26644,26649,26653,26655,26664,26663,26668,26669,26671,26672,26673,26675,26683,26687,26692,26693,26698,26700,26709,26711,26712,26715,26731,26734,26735,26736,26737,26738,26741,26745,26746,26747,26748,26754,26756,26758,26760,26774,26776,26778,26780,26785,26787,26789,26793,26794,26798,26802,26811,26821,26824,26828,26831,26832,26833,26835,26838,26841,26844,26845,26853,26856,26858,26859,26860,26861,26864,26865,26869,26870,26875,26876,26877,26886,26889,26890,26896,26897,26899,26902,26903,26929,26931,26933,26936,26939,26946,26949,26953,26958,26967,26971,26979,26980,26981,26982,26984,26985,26988,26992,26993,26994,27002,27003,27007,27008,27021,27026,27030,27032,27041,27045,27046,27048,27051,27053,27055,27063,27064,27066,27068,27077,27080,27089,27094,27095,27106,27109,27118,27119,27121,27123,27125,27134,27136,27137,27139,27151,27153,27157,27162,27165,27168,27172,27176,27184,27186,27188,27191,27195,27198,27199,27205,27206,27209,27210,27214,27216,27217,27218,27221,27222,27227,27236,27239,27242,27249,27251,27262,27265,27267,27270,27271,27273,27275,27281,27291,27293,27294,27295,27301,27307,27311,27312,27313,27316,27325,27326,27327,27334,27337,27336,27340,27344,27348,27349,27350,27356,27357,27364,27367,27372,27376,27377,27378,27388,27389,27394,27395,27398,27399,27401,27407,27408,27409,27415,27419,27422,27428,27432,27435,27436,27439,27445,27446,27451,27455,27462,27466,27469,27474,27478,27480,27485,27488,27495,27499,27502,27504,27509,27517,27518,27522,27525,27543,27547,27551,27552,27554,27555,27560,27561,27564,27565,27566,27568,27576,27577,27581,27582,27587,27588,27593,27596,27606,27610,27617,27619,27622,27623,27630,27633,27639,27641,27647,27650,27652,27653,27657,27661,27662,27664,27666,27673,27679,27686,27687,27688,27692,27694,27699,27701,27702,27706,27707,27711,27722,27723,27725,27727,27730,27732,27737,27739,27740,27755,27757,27759,27764,27766,27768,27769,27771,27781,27782,27783,27785,27796,27797,27799,27800,27804,27807,27824,27826,27828,27842,27846,27853,27855,27856,27857,27858,27860,27862,27866,27868,27872,27879,27881,27883,27884,27886,27890,27892,27908,27911,27914,27918,27919,27921,27923,27930,27942,27943,27944,27751,27950,27951,27953,27961,27964,27967,27991,27998,27999,28001,28005,28007,28015,28016,28028,28034,28039,28049,28050,28052,28054,28055,28056,28074,28076,28084,28087,28089,28093,28095,28100,28104,28106,28110,28111,28118,28123,28125,28127,28128,28130,28133,28137,28143,28144,28148,28150,28156,28160,28164,28190,28194,28199,28210,28214,28217,28219,28220,28228,28229,28232,28233,28235,28239,28241,28242,28243,28244,28247,28252,28253,28254,28258,28259,28264,28275,28283,28285,28301,28307,28313,28320,28327,28333,28334,28337,28339,28347,28351,28352,28353,28355,28359,28360,28362,28365,28366,28367,28395,28397,28398,28409,28411,28413,28420,28424,28426,28428,28429,28438,28440,28442,28443,28454,28457,28458,28463,28464,28467,28470,28475,28476,28461,28495,28497,28498,28499,28503,28505,28506,28509,28510,28513,28514,28520,28524,28541,28542,28547,28551,28552,28555,28556,28557,28560,28562,28563,28564,28566,28570,28575,28576,28581,28582,28583,28584,28590,28591,28592,28597,28598,28604,28613,28615,28616,28618,28634,28638,28648,28649,28656,28661,28665,28668,28669,28672,28677,28678,28679,28685,28695,28704,28707,28719,28724,28727,28729,28732,28739,28740,28744,28745,28746,28747,28756,28757,28765,28766,28750,28772,28773,28780,28782,28789,28790,28798,28801,28805,28806,28820,28821,28822,28823,28824,28827,28836,28843,28848,28849,28852,28855,28874,28881,28883,28884,28885,28886,28888,28892,28900,28922,28931,28932,28933,28934,28935,28939,28940,28943,28958,28960,28971,28973,28975,28976,28977,28984,28993,28997,28998,28999,29002,29003,29008,29010,29015,29018,29020,29022,29024,29032,29049,29056,29061,29063,29068,29074,29082,29083,29088,29090,29103,29104,29106,29107,29114,29119,29120,29121,29124,29131,29132,29139,29142,29145,29146,29148,29176,29182,29184,29191,29192,29193,29203,29207,29210,29213,29215,29220,29227,29231,29236,29240,29241,29249,29250,29251,29253,29262,29263,29264,29267,29269,29270,29274,29276,29278,29280,29283,29288,29291,29294,29295,29297,29303,29304,29307,29308,29311,29316,29321,29325,29326,29331,29339,29352,29357,29358,29361,29364,29374,29377,29383,29385,29388,29397,29398,29400,29407,29413,29427,29428,29434,29435,29438,29442,29444,29445,29447,29451,29453,29458,29459,29464,29465,29470,29474,29476,29479,29480,29484,29489,29490,29493,29498,29499,29501,29507,29517,29520,29522,29526,29528,29533,29534,29535,29536,29542,29543,29545,29547,29548,29550,29551,29553,29559,29561,29564,29568,29569,29571,29573,29574,29582,29584,29587,29589,29591,29592,29596,29598,29599,29600,29602,29605,29606,29610,29611,29613,29621,29623,29625,29628,29629,29631,29637,29638,29641,29643,29644,29647,29650,29651,29654,29657,29661,29665,29667,29670,29671,29673,29684,29685,29687,29689,29690,29691,29693,29695,29696,29697,29700,29703,29706,29713,29722,29723,29732,29734,29736,29737,29738,29739,29740,29741,29742,29743,29744,29745,29753,29760,29763,29764,29766,29767,29771,29773,29777,29778,29783,29789,29794,29798,29799,29800,29803,29805,29806,29809,29810,29824,29825,29829,29830,29831,29833,29839,29840,29841,29842,29848,29849,29850,29852,29855,29856,29857,29859,29862,29864,29865,29866,29867,29870,29871,29873,29874,29877,29881,29883,29887,29896,29897,29900,29904,29907,29912,29914,29915,29918,29919,29924,29928,29930,29931,29935,29940,29946,29947,29948,29951,29958,29970,29974,29975,29984,29985,29988,29991,29993,29994,29999,30006,30009,30013,30014,30015,30016,30019,30023,30024,30030,30032,30034,30039,30046,30047,30049,30063,30065,30073,30074,30075,30076,30077,30078,30081,30085,30096,30098,30099,30101,30105,30108,30114,30116,30132,30138,30143,30144,30145,30148,30150,30156,30158,30159,30167,30172,30175,30176,30177,30180,30183,30188,30190,30191,30193,30201,30208,30210,30211,30212,30215,30216,30218,30220,30223,30226,30227,30229,30230,30233,30235,30236,30237,30238,30243,30245,30246,30249,30253,30258,30259,30261,30264,30265,30266,30268,30282,30272,30273,30275,30276,30277,30281,30283,30293,30297,30303,30308,30309,30317,30318,30319,30321,30324,30337,30341,30348,30349,30357,30363,30364,30365,30367,30368,30370,30371,30372,30373,30374,30375,30376,30378,30381,30397,30401,30405,30409,30411,30412,30414,30420,30425,30432,30438,30440,30444,30448,30449,30454,30457,30460,30464,30470,30474,30478,30482,30484,30485,30487,30489,30490,30492,30498,30504,30509,30510,30511,30516,30517,30518,30521,30525,30526,30530,30533,30534,30538,30541,30542,30543,30546,30550,30551,30556,30558,30559,30560,30562,30564,30567,30570,30572,30576,30578,30579,30580,30586,30589,30592,30596,30604,30605,30612,30613,30614,30618,30623,30626,30631,30634,30638,30639,30641,30645,30654,30659,30665,30673,30674,30677,30681,30686,30687,30688,30692,30694,30698,30700,30704,30705,30708,30712,30715,30725,30726,30729,30733,30734,30737,30749,30753,30754,30755,30765,30766,30768,30773,30775,30787,30788,30791,30792,30796,30798,30802,30812,30814,30816,30817,30819,30820,30824,30826,30830,30842,30846,30858,30863,30868,30872,30881,30877,30878,30879,30884,30888,30892,30893,30896,30897,30898,30899,30907,30909,30911,30919,30920,30921,30924,30926,30930,30931,30933,30934,30948,30939,30943,30944,30945,30950,30954,30962,30963,30976,30966,30967,30970,30971,30975,30982,30988,30992,31002,31004,31006,31007,31008,31013,31015,31017,31021,31025,31028,31029,31035,31037,31039,31044,31045,31046,31050,31051,31055,31057,31060,31064,31067,31068,31079,31081,31083,31090,31097,31099,31100,31102,31115,31116,31121,31123,31124,31125,31126,31128,31131,31132,31137,31144,31145,31147,31151,31153,31156,31160,31163,31170,31172,31175,31176,31178,31183,31188,31190,31194,31197,31198,31200,31202,31205,31210,31211,31213,31217,31224,31228,31234,31235,31239,31241,31242,31244,31249,31253,31259,31262,31265,31271,31275,31277,31279,31280,31284,31285,31288,31289,31290,31300,31301,31303,31304,31308,31317,31318,31321,31324,31325,31327,31328,31333,31335,31338,31341,31349,31352,31358,31360,31362,31365,31366,31370,31371,31376,31377,31380,31390,31392,31395,31404,31411,31413,31417,31419,31420,31430,31433,31436,31438,31441,31451,31464,31465,31467,31468,31473,31476,31483,31485,31486,31495,31508,31519,31523,31527,31529,31530,31531,31533,31534,31535,31536,31537,31540,31549,31551,31552,31553,31559,31566,31573,31584,31588,31590,31593,31594,31597,31599,31602,31603,31607,31620,31625,31630,31632,31633,31638,31643,31646,31648,31653,31660,31663,31664,31666,31669,31670,31674,31675,31676,31677,31682,31685,31688,31690,31700,31702,31703,31705,31706,31707,31720,31722,31730,31732,31733,31736,31737,31738,31740,31742,31745,31746,31747,31748,31750,31753,31755,31756,31758,31759,31769,31771,31776,31781,31782,31784,31788,31793,31795,31796,31798,31801,31802,31814,31818,31829,31825,31826,31827,31833,31834,31835,31836,31837,31838,31841,31843,31847,31849,31853,31854,31856,31858,31865,31868,31869,31878,31879,31887,31892,31902,31904,31910,31920,31926,31927,31930,31931,31932,31935,31940,31943,31944,31945,31949,31951,31955,31956,31957,31959,31961,31962,31965,31974,31977,31979,31989,32003,32007,32008,32009,32015,32017,32018,32019,32022,32029,32030,32035,32038,32042,32045,32049,32060,32061,32062,32064,32065,32071,32072,32077,32081,32083,32087,32089,32090,32092,32093,32101,32103,32106,32112,32120,32122,32123,32127,32129,32130,32131,32133,32134,32136,32139,32140,32141,32145,32150,32151,32157,32158,32166,32167,32170,32179,32182,32183,32185,32194,32195,32196,32197,32198,32204,32205,32206,32215,32217,32256,32226,32229,32230,32234,32235,32237,32241,32245,32246,32249,32250,32264,32272,32273,32277,32279,32284,32285,32288,32295,32296,32300,32301,32303,32307,32310,32319,32324,32325,32327,32334,32336,32338,32344,32351,32353,32354,32357,32363,32366,32367,32371,32376,32382,32385,32390,32391,32394,32397,32401,32405,32408,32410,32413,32414,32572,32571,32573,32574,32575,32579,32580,32583,32591,32594,32595,32603,32604,32605,32609,32611,32612,32613,32614,32621,32625,32637,32638,32639,32640,32651,32653,32655,32656,32657,32662,32663,32668,32673,32674,32678,32682,32685,32692,32700,32703,32704,32707,32712,32718,32719,32731,32735,32739,32741,32744,32748,32750,32751,32754,32762,32765,32766,32767,32775,32776,32778,32781,32782,32783,32785,32787,32788,32790,32797,32798,32799,32800,32804,32806,32812,32814,32816,32820,32821,32823,32825,32826,32828,32830,32832,32836,32864,32868,32870,32877,32881,32885,32897,32904,32910,32924,32926,32934,32935,32939,32952,32953,32968,32973,32975,32978,32980,32981,32983,32984,32992,33005,33006,33008,33010,33011,33014,33017,33018,33022,33027,33035,33046,33047,33048,33052,33054,33056,33060,33063,33068,33072,33077,33082,33084,33093,33095,33098,33100,33106,33111,33120,33121,33127,33128,33129,33133,33135,33143,33153,33168,33156,33157,33158,33163,33166,33174,33176,33179,33182,33186,33198,33202,33204,33211,33227,33219,33221,33226,33230,33231,33237,33239,33243,33245,33246,33249,33252,33259,33260,33264,33265,33266,33269,33270,33272,33273,33277,33279,33280,33283,33295,33299,33300,33305,33306,33309,33313,33314,33320,33330,33332,33338,33347,33348,33349,33350,33355,33358,33359,33361,33366,33372,33376,33379,33383,33389,33396,33403,33405,33407,33408,33409,33411,33412,33415,33417,33418,33422,33425,33428,33430,33432,33434,33435,33440,33441,33443,33444,33447,33448,33449,33450,33454,33456,33458,33460,33463,33466,33468,33470,33471,33478,33488,33493,33498,33504,33506,33508,33512,33514,33517,33519,33526,33527,33533,33534,33536,33537,33543,33544,33546,33547,33620,33563,33565,33566,33567,33569,33570,33580,33581,33582,33584,33587,33591,33594,33596,33597,33602,33603,33604,33607,33613,33614,33617,33621,33622,33623,33648,33656,33661,33663,33664,33666,33668,33670,33677,33682,33684,33685,33688,33689,33691,33692,33693,33702,33703,33705,33708,33726,33727,33728,33735,33737,33743,33744,33745,33748,33757,33619,33768,33770,33782,33784,33785,33788,33793,33798,33802,33807,33809,33813,33817,33709,33839,33849,33861,33863,33864,33866,33869,33871,33873,33874,33878,33880,33881,33882,33884,33888,33892,33893,33895,33898,33904,33907,33908,33910,33912,33916,33917,33921,33925,33938,33939,33941,33950,33958,33960,33961,33962,33967,33969,33972,33978,33981,33982,33984,33986,33991,33992,33996,33999,34003,34012,34023,34026,34031,34032,34033,34034,34039,34098,34042,34043,34045,34050,34051,34055,34060,34062,34064,34076,34078,34082,34083,34084,34085,34087,34090,34091,34095,34099,34100,34102,34111,34118,34127,34128,34129,34130,34131,34134,34137,34140,34141,34142,34143,34144,34145,34146,34148,34155,34159,34169,34170,34171,34173,34175,34177,34181,34182,34185,34187,34188,34191,34195,34200,34205,34207,34208,34210,34213,34215,34228,34230,34231,34232,34236,34237,34238,34239,34242,34247,34250,34251,34254,34221,34264,34266,34271,34272,34278,34280,34285,34291,34294,34300,34303,34304,34308,34309,34317,34318,34320,34321,34322,34328,34329,34331,34334,34337,34343,34345,34358,34360,34362,34364,34365,34368,34370,34374,34386,34387,34390,34391,34392,34393,34397,34400,34401,34402,34403,34404,34409,34412,34415,34421,34422,34423,34426,34445,34449,34454,34456,34458,34460,34465,34470,34471,34472,34477,34481,34483,34484,34485,34487,34488,34489,34495,34496,34497,34499,34501,34513,34514,34517,34519,34522,34524,34528,34531,34533,34535,34440,34554,34556,34557,34564,34565,34567,34571,34574,34575,34576,34579,34580,34585,34590,34591,34593,34595,34600,34606,34607,34609,34610,34617,34618,34620,34621,34622,34624,34627,34629,34637,34648,34653,34657,34660,34661,34671,34673,34674,34683,34691,34692,34693,34694,34695,34696,34697,34699,34700,34704,34707,34709,34711,34712,34713,34718,34720,34723,34727,34732,34733,34734,34737,34741,34750,34751,34753,34760,34761,34762,34766,34773,34774,34777,34778,34780,34783,34786,34787,34788,34794,34795,34797,34801,34803,34808,34810,34815,34817,34819,34822,34825,34826,34827,34832,34841,34834,34835,34836,34840,34842,34843,34844,34846,34847,34856,34861,34862,34864,34866,34869,34874,34876,34881,34883,34885,34888,34889,34890,34891,34894,34897,34901,34902,34904,34906,34908,34911,34912,34916,34921,34929,34937,34939,34944,34968,34970,34971,34972,34975,34976,34984,34986,35002,35005,35006,35008,35018,35019,35020,35021,35022,35025,35026,35027,35035,35038,35047,35055,35056,35057,35061,35063,35073,35078,35085,35086,35087,35093,35094,35096,35097,35098,35100,35104,35110,35111,35112,35120,35121,35122,35125,35129,35130,35134,35136,35138,35141,35142,35145,35151,35154,35159,35162,35163,35164,35169,35170,35171,35179,35182,35184,35187,35189,35194,35195,35196,35197,35209,35213,35216,35220,35221,35227,35228,35231,35232,35237,35248,35252,35253,35254,35255,35260,35284,35285,35286,35287,35288,35301,35305,35307,35309,35313,35315,35318,35321,35325,35327,35332,35333,35335,35343,35345,35346,35348,35349,35358,35360,35362,35364,35366,35371,35372,35375,35381,35383,35389,35390,35392,35395,35397,35399,35401,35405,35406,35411,35414,35415,35416,35420,35421,35425,35429,35431,35445,35446,35447,35449,35450,35451,35454,35455,35456,35459,35462,35467,35471,35472,35474,35478,35479,35481,35487,35495,35497,35502,35503,35507,35510,35511,35515,35518,35523,35526,35528,35529,35530,35537,35539,35540,35541,35543,35549,35551,35564,35568,35572,35573,35574,35580,35583,35589,35590,35595,35601,35612,35614,35615,35594,35629,35632,35639,35644,35650,35651,35652,35653,35654,35656,35666,35667,35668,35673,35661,35678,35683,35693,35702,35704,35705,35708,35710,35713,35716,35717,35723,35725,35727,35732,35733,35740,35742,35743,35896,35897,35901,35902,35909,35911,35913,35915,35919,35921,35923,35924,35927,35928,35931,35933,35929,35939,35940,35942,35944,35945,35949,35955,35957,35958,35963,35966,35974,35975,35979,35984,35986,35987,35993,35995,35996,36004,36025,36026,36037,36038,36041,36043,36047,36054,36053,36057,36061,36065,36072,36076,36079,36080,36082,36085,36087,36088,36094,36095,36097,36099,36105,36114,36119,36123,36197,36201,36204,36206,36223,36226,36228,36232,36237,36240,36241,36245,36254,36255,36256,36262,36267,36268,36271,36274,36277,36279,36281,36283,36288,36293,36294,36295,36296,36298,36302,36305,36308,36309,36311,36313,36324,36325,36327,36332,36336,36284,36337,36338,36340,36349,36353,36356,36357,36358,36363,36369,36372,36374,36384,36385,36386,36387,36390,36391,36401,36403,36406,36407,36408,36409,36413,36416,36417,36427,36429,36430,36431,36436,36443,36444,36445,36446,36449,36450,36457,36460,36461,36463,36464,36465,36473,36474,36475,36482,36483,36489,36496,36498,36501,36506,36507,36509,36510,36514,36519,36521,36525,36526,36531,36533,36538,36539,36544,36545,36547,36548,36551,36559,36561,36564,36572,36584,36590,36592,36593,36599,36601,36602,36589,36608,36610,36615,36616,36623,36624,36630,36631,36632,36638,36640,36641,36643,36645,36647,36648,36652,36653,36654,36660,36661,36662,36663,36666,36672,36673,36675,36679,36687,36689,36690,36691,36692,36693,36696,36701,36702,36709,36765,36768,36769,36772,36773,36774,36789,36790,36792,36798,36800,36801,36806,36810,36811,36813,36816,36818,36819,36821,36832,36835,36836,36840,36846,36849,36853,36854,36859,36862,36866,36868,36872,36876,36888,36891,36904,36905,36911,36906,36908,36909,36915,36916,36919,36927,36931,36932,36940,36955,36957,36962,36966,36967,36972,36976,36980,36985,36997,37000,37003,37004,37006,37008,37013,37015,37016,37017,37019,37024,37025,37026,37029,37040,37042,37043,37044,37046,37053,37068,37054,37059,37060,37061,37063,37064,37077,37079,37080,37081,37084,37085,37087,37093,37074,37110,37099,37103,37104,37108,37118,37119,37120,37124,37125,37126,37128,37133,37136,37140,37142,37143,37144,37146,37148,37150,37152,37157,37154,37155,37159,37161,37166,37167,37169,37172,37174,37175,37177,37178,37180,37181,37187,37191,37192,37199,37203,37207,37209,37210,37211,37217,37220,37223,37229,37236,37241,37242,37243,37249,37251,37253,37254,37258,37262,37265,37267,37268,37269,37272,37278,37281,37286,37288,37292,37293,37294,37296,37297,37298,37299,37302,37307,37308,37309,37311,37314,37315,37317,37331,37332,37335,37337,37338,37342,37348,37349,37353,37354,37356,37357,37358,37359,37360,37361,37367,37369,37371,37373,37376,37377,37380,37381,37382,37383,37385,37386,37388,37392,37394,37395,37398,37400,37404,37405,37411,37412,37413,37414,37416,37422,37423,37424,37427,37429,37430,37432,37433,37434,37436,37438,37440,37442,37443,37446,37447,37450,37453,37454,37455,37457,37464,37465,37468,37469,37472,37473,37477,37479,37480,37481,37486,37487,37488,37493,37494,37495,37496,37497,37499,37500,37501,37503,37512,37513,37514,37517,37518,37522,37527,37529,37535,37536,37540,37541,37543,37544,37547,37551,37554,37558,37560,37562,37563,37564,37565,37567,37568,37569,37570,37571,37573,37574,37575,37576,37579,37580,37581,37582,37584,37587,37589,37591,37592,37593,37596,37597,37599,37600,37601,37603,37605,37607,37608,37612,37614,37616,37625,37627,37631,37632,37634,37640,37645,37649,37652,37653,37660,37661,37662,37663,37665,37668,37669,37671,37673,37674,37683,37684,37686,37687,37703,37704,37705,37712,37713,37714,37717,37719,37720,37722,37726,37732,37733,37735,37737,37738,37741,37743,37744,37745,37747,37748,37750,37754,37757,37759,37760,37761,37762,37768,37770,37771,37773,37775,37778,37781,37784,37787,37790,37793,37795,37796,37798,37800,37803,37812,37813,37814,37818,37801,37825,37828,37829,37830,37831,37833,37834,37835,37836,37837,37843,37849,37852,37854,37855,37858,37862,37863,37881,37879,37880,37882,37883,37885,37889,37890,37892,37896,37897,37901,37902,37903,37909,37910,37911,37919,37934,37935,37937,37938,37939,37940,37947,37951,37949,37955,37957,37960,37962,37964,37973,37977,37980,37983,37985,37987,37992,37995,37997,37998,37999,38001,38002,38020,38019,38264,38265,38270,38276,38280,38284,38285,38286,38301,38302,38303,38305,38310,38313,38315,38316,38324,38326,38330,38333,38335,38342,38344,38345,38347,38352,38353,38354,38355,38361,38362,38365,38366,38367,38368,38372,38374,38429,38430,38434,38436,38437,38438,38444,38449,38451,38455,38456,38457,38458,38460,38461,38465,38482,38484,38486,38487,38488,38497,38510,38516,38523,38524,38526,38527,38529,38530,38531,38532,38537,38545,38550,38554,38557,38559,38564,38565,38566,38569,38574,38575,38579,38586,38602,38610,23986,38616,38618,38621,38622,38623,38633,38639,38641,38650,38658,38659,38661,38665,38682,38683,38685,38689,38690,38691,38696,38705,38707,38721,38723,38730,38734,38735,38741,38743,38744,38746,38747,38755,38759,38762,38766,38771,38774,38775,38776,38779,38781,38783,38784,38793,38805,38806,38807,38809,38810,38814,38815,38818,38828,38830,38833,38834,38837,38838,38840,38841,38842,38844,38846,38847,38849,38852,38853,38855,38857,38858,38860,38861,38862,38864,38865,38868,38871,38872,38873,38877,38878,38880,38875,38881,38884,38895,38897,38900,38903,38904,38906,38919,38922,38937,38925,38926,38932,38934,38940,38942,38944,38947,38950,38955,38958,38959,38960,38962,38963,38965,38949,38974,38980,38983,38986,38993,38994,38995,38998,38999,39001,39002,39010,39011,39013,39014,39018,39020,39083,39085,39086,39088,39092,39095,39096,39098,39099,39103,39106,39109,39112,39116,39137,39139,39141,39142,39143,39146,39155,39158,39170,39175,39176,39185,39189,39190,39191,39194,39195,39196,39199,39202,39206,39207,39211,39217,39218,39219,39220,39221,39225,39226,39227,39228,39232,39233,39238,39239,39240,39245,39246,39252,39256,39257,39259,39260,39262,39263,39264,39323,39325,39327,39334,39344,39345,39346,39349,39353,39354,39357,39359,39363,39369,39379,39380,39385,39386,39388,39390,39399,39402,39403,39404,39408,39412,39413,39417,39421,39422,39426,39427,39428,39435,39436,39440,39441,39446,39454,39456,39458,39459,39460,39463,39469,39470,39475,39477,39478,39480,39495,39489,39492,39498,39499,39500,39502,39505,39508,39510,39517,39594,39596,39598,39599,39602,39604,39605,39606,39609,39611,39614,39615,39617,39619,39622,39624,39630,39632,39634,39637,39638,39639,39643,39644,39648,39652,39653,39655,39657,39660,39666,39667,39669,39673,39674,39677,39679,39680,39681,39682,39683,39684,39685,39688,39689,39691,39692,39693,39694,39696,39698,39702,39705,39707,39708,39712,39718,39723,39725,39731,39732,39733,39735,39737,39738,39741,39752,39755,39756,39765,39766,39767,39771,39774,39777,39779,39781,39782,39784,39786,39787,39788,39789,39790,39795,39797,39799,39800,39801,39807,39808,39812,39813,39814,39815,39817,39818,39819,39821,39823,39824,39828,39834,39837,39838,39846,39847,39849,39852,39856,39857,39858,39863,39864,39867,39868,39870,39871,39873,39879,39880,39886,39888,39895,39896,39901,39903,39909,39911,39914,39915,39919,39923,39927,39928,39929,39930,39933,39935,39936,39938,39947,39951,39953,39958,39960,39961,39962,39964,39966,39970,39971,39974,39975,39976,39977,39978,39985,39989,39990,39991,39997,40001,40003,40004,40005,40009,40010,40014,40015,40016,40019,40020,40022,40024,40027,40029,40030,40031,40035,40041,40042,40028,40043,40040,40046,40048,40050,40053,40055,40059,40166,40178,40183,40185,40203,40194,40209,40215,40216,40220,40221,40222,40239,40240,40242,40243,40244,40250,40252,40261,40253,40258,40259,40263,40266,40275,40276,40287,40291,40290,40293,40297,40298,40299,40304,40310,40311,40315,40316,40318,40323,40324,40326,40330,40333,40334,40338,40339,40341,40342,40343,40344,40353,40362,40364,40366,40369,40373,40377,40380,40383,40387,40391,40393,40394,40404,40405,40406,40407,40410,40414,40415,40416,40421,40423,40425,40427,40430,40432,40435,40436,40446,40458,40450,40455,40462,40464,40465,40466,40469,40470,40473,40476,40477,40570,40571,40572,40576,40578,40579,40580,40581,40583,40590,40591,40598,40600,40603,40606,40612,40616,40620,40622,40623,40624,40627,40628,40629,40646,40648,40651,40661,40671,40676,40679,40684,40685,40686,40688,40689,40690,40693,40696,40703,40706,40707,40713,40719,40720,40721,40722,40724,40726,40727,40729,40730,40731,40735,40738,40742,40746,40747,40751,40753,40754,40756,40759,40761,40762,40764,40765,40767,40769,40771,40772,40773,40774,40775,40787,40789,40790,40791,40792,40794,40797,40798,40808,40809,40813,40814,40815,40816,40817,40819,40821,40826,40829,40847,40848,40849,40850,40852,40854,40855,40862,40865,40866,40867,40869,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],
	  "ibm866":[1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,9617,9618,9619,9474,9508,9569,9570,9558,9557,9571,9553,9559,9565,9564,9563,9488,9492,9524,9516,9500,9472,9532,9566,9567,9562,9556,9577,9574,9568,9552,9580,9575,9576,9572,9573,9561,9560,9554,9555,9579,9578,9496,9484,9608,9604,9612,9616,9600,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1025,1105,1028,1108,1031,1111,1038,1118,176,8729,183,8730,8470,164,9632,160],
	  "iso-8859-2":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,260,728,321,164,317,346,167,168,352,350,356,377,173,381,379,176,261,731,322,180,318,347,711,184,353,351,357,378,733,382,380,340,193,194,258,196,313,262,199,268,201,280,203,282,205,206,270,272,323,327,211,212,336,214,215,344,366,218,368,220,221,354,223,341,225,226,259,228,314,263,231,269,233,281,235,283,237,238,271,273,324,328,243,244,337,246,247,345,367,250,369,252,253,355,729],
	  "iso-8859-3":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,294,728,163,164,null,292,167,168,304,350,286,308,173,null,379,176,295,178,179,180,181,293,183,184,305,351,287,309,189,null,380,192,193,194,null,196,266,264,199,200,201,202,203,204,205,206,207,null,209,210,211,212,288,214,215,284,217,218,219,220,364,348,223,224,225,226,null,228,267,265,231,232,233,234,235,236,237,238,239,null,241,242,243,244,289,246,247,285,249,250,251,252,365,349,729],
	  "iso-8859-4":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,260,312,342,164,296,315,167,168,352,274,290,358,173,381,175,176,261,731,343,180,297,316,711,184,353,275,291,359,330,382,331,256,193,194,195,196,197,198,302,268,201,280,203,278,205,206,298,272,325,332,310,212,213,214,215,216,370,218,219,220,360,362,223,257,225,226,227,228,229,230,303,269,233,281,235,279,237,238,299,273,326,333,311,244,245,246,247,248,371,250,251,252,361,363,729],
	  "iso-8859-5":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,173,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,8470,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,167,1118,1119],
	  "iso-8859-6":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,null,null,null,164,null,null,null,null,null,null,null,1548,173,null,null,null,null,null,null,null,null,null,null,null,null,null,1563,null,null,null,1567,null,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,1591,1592,1593,1594,null,null,null,null,null,1600,1601,1602,1603,1604,1605,1606,1607,1608,1609,1610,1611,1612,1613,1614,1615,1616,1617,1618,null,null,null,null,null,null,null,null,null,null,null,null,null],
	  "iso-8859-7":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,8216,8217,163,8364,8367,166,167,168,169,890,171,172,173,null,8213,176,177,178,179,900,901,902,183,904,905,906,187,908,189,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,null,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,null],
	  "iso-8859-8":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,null,162,163,164,165,166,167,168,169,215,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,247,187,188,189,190,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,8215,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,null,null,8206,8207,null],
	  "iso-8859-10":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,260,274,290,298,296,310,167,315,272,352,358,381,173,362,330,176,261,275,291,299,297,311,183,316,273,353,359,382,8213,363,331,256,193,194,195,196,197,198,302,268,201,280,203,278,205,206,207,208,325,332,211,212,213,214,360,216,370,218,219,220,221,222,223,257,225,226,227,228,229,230,303,269,233,281,235,279,237,238,239,240,326,333,243,244,245,246,361,248,371,250,251,252,253,254,312],
	  "iso-8859-13":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,8221,162,163,164,8222,166,167,216,169,342,171,172,173,174,198,176,177,178,179,8220,181,182,183,248,185,343,187,188,189,190,230,260,302,256,262,196,197,280,274,268,201,377,278,290,310,298,315,352,323,325,211,332,213,214,215,370,321,346,362,220,379,381,223,261,303,257,263,228,229,281,275,269,233,378,279,291,311,299,316,353,324,326,243,333,245,246,247,371,322,347,363,252,380,382,8217],
	  "iso-8859-14":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,7682,7683,163,266,267,7690,167,7808,169,7810,7691,7922,173,174,376,7710,7711,288,289,7744,7745,182,7766,7809,7767,7811,7776,7923,7812,7813,7777,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,372,209,210,211,212,213,214,7786,216,217,218,219,220,221,374,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,373,241,242,243,244,245,246,7787,248,249,250,251,252,253,375,255],
	  "iso-8859-15":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,8364,165,352,167,353,169,170,171,172,173,174,175,176,177,178,179,381,181,182,183,382,185,186,187,338,339,376,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255],
	  "iso-8859-16":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,260,261,321,8364,8222,352,167,353,169,536,171,377,173,378,379,176,177,268,322,381,8221,182,183,382,269,537,187,338,339,376,380,192,193,194,258,196,262,198,199,200,201,202,203,204,205,206,207,272,323,210,211,212,336,214,346,368,217,218,219,220,280,538,223,224,225,226,259,228,263,230,231,232,233,234,235,236,237,238,239,273,324,242,243,244,337,246,347,369,249,250,251,252,281,539,255],
	  "koi8-r":[9472,9474,9484,9488,9492,9496,9500,9508,9516,9524,9532,9600,9604,9608,9612,9616,9617,9618,9619,8992,9632,8729,8730,8776,8804,8805,160,8993,176,178,183,247,9552,9553,9554,1105,9555,9556,9557,9558,9559,9560,9561,9562,9563,9564,9565,9566,9567,9568,9569,1025,9570,9571,9572,9573,9574,9575,9576,9577,9578,9579,9580,169,1102,1072,1073,1094,1076,1077,1092,1075,1093,1080,1081,1082,1083,1084,1085,1086,1087,1103,1088,1089,1090,1091,1078,1074,1100,1099,1079,1096,1101,1097,1095,1098,1070,1040,1041,1062,1044,1045,1060,1043,1061,1048,1049,1050,1051,1052,1053,1054,1055,1071,1056,1057,1058,1059,1046,1042,1068,1067,1047,1064,1069,1065,1063,1066],
	  "koi8-u":[9472,9474,9484,9488,9492,9496,9500,9508,9516,9524,9532,9600,9604,9608,9612,9616,9617,9618,9619,8992,9632,8729,8730,8776,8804,8805,160,8993,176,178,183,247,9552,9553,9554,1105,1108,9556,1110,1111,9559,9560,9561,9562,9563,1169,1118,9566,9567,9568,9569,1025,1028,9571,1030,1031,9574,9575,9576,9577,9578,1168,1038,169,1102,1072,1073,1094,1076,1077,1092,1075,1093,1080,1081,1082,1083,1084,1085,1086,1087,1103,1088,1089,1090,1091,1078,1074,1100,1099,1079,1096,1101,1097,1095,1098,1070,1040,1041,1062,1044,1045,1060,1043,1061,1048,1049,1050,1051,1052,1053,1054,1055,1071,1056,1057,1058,1059,1046,1042,1068,1067,1047,1064,1069,1065,1063,1066],
	  "macintosh":[196,197,199,201,209,214,220,225,224,226,228,227,229,231,233,232,234,235,237,236,238,239,241,243,242,244,246,245,250,249,251,252,8224,176,162,163,167,8226,182,223,174,169,8482,180,168,8800,198,216,8734,177,8804,8805,165,181,8706,8721,8719,960,8747,170,186,937,230,248,191,161,172,8730,402,8776,8710,171,187,8230,160,192,195,213,338,339,8211,8212,8220,8221,8216,8217,247,9674,255,376,8260,8364,8249,8250,64257,64258,8225,183,8218,8222,8240,194,202,193,203,200,205,206,207,204,211,212,63743,210,218,219,217,305,710,732,175,728,729,730,184,733,731,711],
	  "windows-874":[8364,129,130,131,132,8230,134,135,136,137,138,139,140,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,152,153,154,155,156,157,158,159,160,3585,3586,3587,3588,3589,3590,3591,3592,3593,3594,3595,3596,3597,3598,3599,3600,3601,3602,3603,3604,3605,3606,3607,3608,3609,3610,3611,3612,3613,3614,3615,3616,3617,3618,3619,3620,3621,3622,3623,3624,3625,3626,3627,3628,3629,3630,3631,3632,3633,3634,3635,3636,3637,3638,3639,3640,3641,3642,null,null,null,null,3647,3648,3649,3650,3651,3652,3653,3654,3655,3656,3657,3658,3659,3660,3661,3662,3663,3664,3665,3666,3667,3668,3669,3670,3671,3672,3673,3674,3675,null,null,null,null],
	  "windows-1250":[8364,129,8218,131,8222,8230,8224,8225,136,8240,352,8249,346,356,381,377,144,8216,8217,8220,8221,8226,8211,8212,152,8482,353,8250,347,357,382,378,160,711,728,321,164,260,166,167,168,169,350,171,172,173,174,379,176,177,731,322,180,181,182,183,184,261,351,187,317,733,318,380,340,193,194,258,196,313,262,199,268,201,280,203,282,205,206,270,272,323,327,211,212,336,214,215,344,366,218,368,220,221,354,223,341,225,226,259,228,314,263,231,269,233,281,235,283,237,238,271,273,324,328,243,244,337,246,247,345,367,250,369,252,253,355,729],
	  "windows-1251":[1026,1027,8218,1107,8222,8230,8224,8225,8364,8240,1033,8249,1034,1036,1035,1039,1106,8216,8217,8220,8221,8226,8211,8212,152,8482,1113,8250,1114,1116,1115,1119,160,1038,1118,1032,164,1168,166,167,1025,169,1028,171,172,173,174,1031,176,177,1030,1110,1169,181,182,183,1105,8470,1108,187,1112,1029,1109,1111,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103],
	  "windows-1252":[8364,129,8218,402,8222,8230,8224,8225,710,8240,352,8249,338,141,381,143,144,8216,8217,8220,8221,8226,8211,8212,732,8482,353,8250,339,157,382,376,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255],
	  "windows-1253":[8364,129,8218,402,8222,8230,8224,8225,136,8240,138,8249,140,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,152,8482,154,8250,156,157,158,159,160,901,902,163,164,165,166,167,168,169,null,171,172,173,174,8213,176,177,178,179,900,181,182,183,904,905,906,187,908,189,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,null,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,null],
	  "windows-1254":[8364,129,8218,402,8222,8230,8224,8225,710,8240,352,8249,338,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,732,8482,353,8250,339,157,158,376,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,286,209,210,211,212,213,214,215,216,217,218,219,220,304,350,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,287,241,242,243,244,245,246,247,248,249,250,251,252,305,351,255],
	  "windows-1255":[8364,129,8218,402,8222,8230,8224,8225,710,8240,138,8249,140,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,732,8482,154,8250,156,157,158,159,160,161,162,163,8362,165,166,167,168,169,215,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,247,187,188,189,190,191,1456,1457,1458,1459,1460,1461,1462,1463,1464,1465,1466,1467,1468,1469,1470,1471,1472,1473,1474,1475,1520,1521,1522,1523,1524,null,null,null,null,null,null,null,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,null,null,8206,8207,null],
	  "windows-1256":[8364,1662,8218,402,8222,8230,8224,8225,710,8240,1657,8249,338,1670,1688,1672,1711,8216,8217,8220,8221,8226,8211,8212,1705,8482,1681,8250,339,8204,8205,1722,160,1548,162,163,164,165,166,167,168,169,1726,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,1563,187,188,189,190,1567,1729,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,215,1591,1592,1593,1594,1600,1601,1602,1603,224,1604,226,1605,1606,1607,1608,231,232,233,234,235,1609,1610,238,239,1611,1612,1613,1614,244,1615,1616,247,1617,249,1618,251,252,8206,8207,1746],
	  "windows-1257":[8364,129,8218,131,8222,8230,8224,8225,136,8240,138,8249,140,168,711,184,144,8216,8217,8220,8221,8226,8211,8212,152,8482,154,8250,156,175,731,159,160,null,162,163,164,null,166,167,216,169,342,171,172,173,174,198,176,177,178,179,180,181,182,183,248,185,343,187,188,189,190,230,260,302,256,262,196,197,280,274,268,201,377,278,290,310,298,315,352,323,325,211,332,213,214,215,370,321,346,362,220,379,381,223,261,303,257,263,228,229,281,275,269,233,378,279,291,311,299,316,353,324,326,243,333,245,246,247,371,322,347,363,252,380,382,729],
	  "windows-1258":[8364,129,8218,402,8222,8230,8224,8225,710,8240,138,8249,338,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,732,8482,154,8250,339,157,158,376,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,258,196,197,198,199,200,201,202,203,768,205,206,207,272,209,777,211,212,416,214,215,216,217,218,219,220,431,771,223,224,225,226,259,228,229,230,231,232,233,234,235,769,237,238,239,273,241,803,243,244,417,246,247,248,249,250,251,252,432,8363,255],
	  "x-mac-cyrillic":[1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,8224,176,1168,163,167,8226,182,1030,174,169,8482,1026,1106,8800,1027,1107,8734,177,8804,8805,1110,181,1169,1032,1028,1108,1031,1111,1033,1113,1034,1114,1112,1029,172,8730,402,8776,8710,171,187,8230,160,1035,1115,1036,1116,1109,8211,8212,8220,8221,8216,8217,247,8222,1038,1118,1039,1119,8470,1025,1105,1103,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,8364]
	};

	// For strict environments where `this` inside the global scope
	// is `undefined`, take a pure object instead
	}(commonjsGlobal || {}));
	});

	var encoding = createCommonjsModule(function (module) {
	// This is free and unencumbered software released into the public domain.
	// See LICENSE.md for more information.

	/**
	 * @fileoverview Global |this| required for resolving indexes in node.
	 * @suppress {globalThis}
	 */
	(function(global) {

	  // If we're in node require encoding-indexes and attach it to the global.
	  if (module.exports &&
	    !global["encoding-indexes"]) {
	    global["encoding-indexes"] =
	      encodingIndexes["encoding-indexes"];
	  }

	  //
	  // Utilities
	  //

	  /**
	   * @param {number} a The number to test.
	   * @param {number} min The minimum value in the range, inclusive.
	   * @param {number} max The maximum value in the range, inclusive.
	   * @return {boolean} True if a >= min and a <= max.
	   */
	  function inRange(a, min, max) {
	    return min <= a && a <= max;
	  }

	  /**
	   * @param {!Array.<*>} array The array to check.
	   * @param {*} item The item to look for in the array.
	   * @return {boolean} True if the item appears in the array.
	   */
	  function includes(array, item) {
	    return array.indexOf(item) !== -1;
	  }

	  var floor = Math.floor;

	  /**
	   * @param {*} o
	   * @return {Object}
	   */
	  function ToDictionary(o) {
	    if (o === undefined) return {};
	    if (o === Object(o)) return o;
	    throw TypeError('Could not convert argument to dictionary');
	  }

	  /**
	   * @param {string} string Input string of UTF-16 code units.
	   * @return {!Array.<number>} Code points.
	   */
	  function stringToCodePoints(string) {
	    // https://heycam.github.io/webidl/#dfn-obtain-unicode

	    // 1. Let S be the DOMString value.
	    var s = String(string);

	    // 2. Let n be the length of S.
	    var n = s.length;

	    // 3. Initialize i to 0.
	    var i = 0;

	    // 4. Initialize U to be an empty sequence of Unicode characters.
	    var u = [];

	    // 5. While i < n:
	    while (i < n) {

	      // 1. Let c be the code unit in S at index i.
	      var c = s.charCodeAt(i);

	      // 2. Depending on the value of c:

	      // c < 0xD800 or c > 0xDFFF
	      if (c < 0xD800 || c > 0xDFFF) {
	        // Append to U the Unicode character with code point c.
	        u.push(c);
	      }

	      // 0xDC00 ≤ c ≤ 0xDFFF
	      else if (0xDC00 <= c && c <= 0xDFFF) {
	        // Append to U a U+FFFD REPLACEMENT CHARACTER.
	        u.push(0xFFFD);
	      }

	      // 0xD800 ≤ c ≤ 0xDBFF
	      else if (0xD800 <= c && c <= 0xDBFF) {
	        // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT
	        // CHARACTER.
	        if (i === n - 1) {
	          u.push(0xFFFD);
	        }
	        // 2. Otherwise, i < n−1:
	        else {
	          // 1. Let d be the code unit in S at index i+1.
	          var d = s.charCodeAt(i + 1);

	          // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:
	          if (0xDC00 <= d && d <= 0xDFFF) {
	            // 1. Let a be c & 0x3FF.
	            var a = c & 0x3FF;

	            // 2. Let b be d & 0x3FF.
	            var b = d & 0x3FF;

	            // 3. Append to U the Unicode character with code point
	            // 2^16+2^10*a+b.
	            u.push(0x10000 + (a << 10) + b);

	            // 4. Set i to i+1.
	            i += 1;
	          }

	          // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a
	          // U+FFFD REPLACEMENT CHARACTER.
	          else  {
	            u.push(0xFFFD);
	          }
	        }
	      }

	      // 3. Set i to i+1.
	      i += 1;
	    }

	    // 6. Return U.
	    return u;
	  }

	  /**
	   * @param {!Array.<number>} code_points Array of code points.
	   * @return {string} string String of UTF-16 code units.
	   */
	  function codePointsToString(code_points) {
	    var s = '';
	    for (var i = 0; i < code_points.length; ++i) {
	      var cp = code_points[i];
	      if (cp <= 0xFFFF) {
	        s += String.fromCharCode(cp);
	      } else {
	        cp -= 0x10000;
	        s += String.fromCharCode((cp >> 10) + 0xD800,
	                                 (cp & 0x3FF) + 0xDC00);
	      }
	    }
	    return s;
	  }


	  //
	  // Implementation of Encoding specification
	  // https://encoding.spec.whatwg.org/
	  //

	  //
	  // 4. Terminology
	  //

	  /**
	   * An ASCII byte is a byte in the range 0x00 to 0x7F, inclusive.
	   * @param {number} a The number to test.
	   * @return {boolean} True if a is in the range 0x00 to 0x7F, inclusive.
	   */
	  function isASCIIByte(a) {
	    return 0x00 <= a && a <= 0x7F;
	  }

	  /**
	   * An ASCII code point is a code point in the range U+0000 to
	   * U+007F, inclusive.
	   */
	  var isASCIICodePoint = isASCIIByte;


	  /**
	   * End-of-stream is a special token that signifies no more tokens
	   * are in the stream.
	   * @const
	   */ var end_of_stream = -1;

	  /**
	   * A stream represents an ordered sequence of tokens.
	   *
	   * @constructor
	   * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide
	   * the stream.
	   */
	  function Stream(tokens) {
	    /** @type {!Array.<number>} */
	    this.tokens = [].slice.call(tokens);
	    // Reversed as push/pop is more efficient than shift/unshift.
	    this.tokens.reverse();
	  }

	  Stream.prototype = {
	    /**
	     * @return {boolean} True if end-of-stream has been hit.
	     */
	    endOfStream: function() {
	      return !this.tokens.length;
	    },

	    /**
	     * When a token is read from a stream, the first token in the
	     * stream must be returned and subsequently removed, and
	     * end-of-stream must be returned otherwise.
	     *
	     * @return {number} Get the next token from the stream, or
	     * end_of_stream.
	     */
	     read: function() {
	      if (!this.tokens.length)
	        return end_of_stream;
	       return this.tokens.pop();
	     },

	    /**
	     * When one or more tokens are prepended to a stream, those tokens
	     * must be inserted, in given order, before the first token in the
	     * stream.
	     *
	     * @param {(number|!Array.<number>)} token The token(s) to prepend to the
	     * stream.
	     */
	    prepend: function(token) {
	      if (Array.isArray(token)) {
	        var tokens = /**@type {!Array.<number>}*/(token);
	        while (tokens.length)
	          this.tokens.push(tokens.pop());
	      } else {
	        this.tokens.push(token);
	      }
	    },

	    /**
	     * When one or more tokens are pushed to a stream, those tokens
	     * must be inserted, in given order, after the last token in the
	     * stream.
	     *
	     * @param {(number|!Array.<number>)} token The tokens(s) to push to the
	     * stream.
	     */
	    push: function(token) {
	      if (Array.isArray(token)) {
	        var tokens = /**@type {!Array.<number>}*/(token);
	        while (tokens.length)
	          this.tokens.unshift(tokens.shift());
	      } else {
	        this.tokens.unshift(token);
	      }
	    }
	  };

	  //
	  // 5. Encodings
	  //

	  // 5.1 Encoders and decoders

	  /** @const */
	  var finished = -1;

	  /**
	   * @param {boolean} fatal If true, decoding errors raise an exception.
	   * @param {number=} opt_code_point Override the standard fallback code point.
	   * @return {number} The code point to insert on a decoding error.
	   */
	  function decoderError(fatal, opt_code_point) {
	    if (fatal)
	      throw TypeError('Decoder error');
	    return opt_code_point || 0xFFFD;
	  }

	  /**
	   * @param {number} code_point The code point that could not be encoded.
	   * @return {number} Always throws, no value is actually returned.
	   */
	  function encoderError(code_point) {
	    throw TypeError('The code point ' + code_point + ' could not be encoded.');
	  }

	  // 5.2 Names and labels

	  // TODO: Define @typedef for Encoding: {name:string,labels:Array.<string>}
	  // https://github.com/google/closure-compiler/issues/247

	  /**
	   * @param {string} label The encoding label.
	   * @return {?{name:string,labels:Array.<string>}}
	   */
	  function getEncoding(label) {
	    // 1. Remove any leading and trailing ASCII whitespace from label.
	    label = String(label).trim().toLowerCase();

	    // 2. If label is an ASCII case-insensitive match for any of the
	    // labels listed in the table below, return the corresponding
	    // encoding, and failure otherwise.
	    if (Object.prototype.hasOwnProperty.call(label_to_encoding, label)) {
	      return label_to_encoding[label];
	    }
	    return null;
	  }

	  /**
	   * Encodings table: https://encoding.spec.whatwg.org/encodings.json
	   * @const
	   * @type {!Array.<{
	   *          heading: string,
	   *          encodings: Array.<{name:string,labels:Array.<string>}>
	   *        }>}
	   */
	  var encodings = [
	    {
	      "encodings": [
	        {
	          "labels": [
	            "unicode-1-1-utf-8",
	            "utf-8",
	            "utf8"
	          ],
	          "name": "UTF-8"
	        }
	      ],
	      "heading": "The Encoding"
	    },
	    {
	      "encodings": [
	        {
	          "labels": [
	            "866",
	            "cp866",
	            "csibm866",
	            "ibm866"
	          ],
	          "name": "IBM866"
	        },
	        {
	          "labels": [
	            "csisolatin2",
	            "iso-8859-2",
	            "iso-ir-101",
	            "iso8859-2",
	            "iso88592",
	            "iso_8859-2",
	            "iso_8859-2:1987",
	            "l2",
	            "latin2"
	          ],
	          "name": "ISO-8859-2"
	        },
	        {
	          "labels": [
	            "csisolatin3",
	            "iso-8859-3",
	            "iso-ir-109",
	            "iso8859-3",
	            "iso88593",
	            "iso_8859-3",
	            "iso_8859-3:1988",
	            "l3",
	            "latin3"
	          ],
	          "name": "ISO-8859-3"
	        },
	        {
	          "labels": [
	            "csisolatin4",
	            "iso-8859-4",
	            "iso-ir-110",
	            "iso8859-4",
	            "iso88594",
	            "iso_8859-4",
	            "iso_8859-4:1988",
	            "l4",
	            "latin4"
	          ],
	          "name": "ISO-8859-4"
	        },
	        {
	          "labels": [
	            "csisolatincyrillic",
	            "cyrillic",
	            "iso-8859-5",
	            "iso-ir-144",
	            "iso8859-5",
	            "iso88595",
	            "iso_8859-5",
	            "iso_8859-5:1988"
	          ],
	          "name": "ISO-8859-5"
	        },
	        {
	          "labels": [
	            "arabic",
	            "asmo-708",
	            "csiso88596e",
	            "csiso88596i",
	            "csisolatinarabic",
	            "ecma-114",
	            "iso-8859-6",
	            "iso-8859-6-e",
	            "iso-8859-6-i",
	            "iso-ir-127",
	            "iso8859-6",
	            "iso88596",
	            "iso_8859-6",
	            "iso_8859-6:1987"
	          ],
	          "name": "ISO-8859-6"
	        },
	        {
	          "labels": [
	            "csisolatingreek",
	            "ecma-118",
	            "elot_928",
	            "greek",
	            "greek8",
	            "iso-8859-7",
	            "iso-ir-126",
	            "iso8859-7",
	            "iso88597",
	            "iso_8859-7",
	            "iso_8859-7:1987",
	            "sun_eu_greek"
	          ],
	          "name": "ISO-8859-7"
	        },
	        {
	          "labels": [
	            "csiso88598e",
	            "csisolatinhebrew",
	            "hebrew",
	            "iso-8859-8",
	            "iso-8859-8-e",
	            "iso-ir-138",
	            "iso8859-8",
	            "iso88598",
	            "iso_8859-8",
	            "iso_8859-8:1988",
	            "visual"
	          ],
	          "name": "ISO-8859-8"
	        },
	        {
	          "labels": [
	            "csiso88598i",
	            "iso-8859-8-i",
	            "logical"
	          ],
	          "name": "ISO-8859-8-I"
	        },
	        {
	          "labels": [
	            "csisolatin6",
	            "iso-8859-10",
	            "iso-ir-157",
	            "iso8859-10",
	            "iso885910",
	            "l6",
	            "latin6"
	          ],
	          "name": "ISO-8859-10"
	        },
	        {
	          "labels": [
	            "iso-8859-13",
	            "iso8859-13",
	            "iso885913"
	          ],
	          "name": "ISO-8859-13"
	        },
	        {
	          "labels": [
	            "iso-8859-14",
	            "iso8859-14",
	            "iso885914"
	          ],
	          "name": "ISO-8859-14"
	        },
	        {
	          "labels": [
	            "csisolatin9",
	            "iso-8859-15",
	            "iso8859-15",
	            "iso885915",
	            "iso_8859-15",
	            "l9"
	          ],
	          "name": "ISO-8859-15"
	        },
	        {
	          "labels": [
	            "iso-8859-16"
	          ],
	          "name": "ISO-8859-16"
	        },
	        {
	          "labels": [
	            "cskoi8r",
	            "koi",
	            "koi8",
	            "koi8-r",
	            "koi8_r"
	          ],
	          "name": "KOI8-R"
	        },
	        {
	          "labels": [
	            "koi8-ru",
	            "koi8-u"
	          ],
	          "name": "KOI8-U"
	        },
	        {
	          "labels": [
	            "csmacintosh",
	            "mac",
	            "macintosh",
	            "x-mac-roman"
	          ],
	          "name": "macintosh"
	        },
	        {
	          "labels": [
	            "dos-874",
	            "iso-8859-11",
	            "iso8859-11",
	            "iso885911",
	            "tis-620",
	            "windows-874"
	          ],
	          "name": "windows-874"
	        },
	        {
	          "labels": [
	            "cp1250",
	            "windows-1250",
	            "x-cp1250"
	          ],
	          "name": "windows-1250"
	        },
	        {
	          "labels": [
	            "cp1251",
	            "windows-1251",
	            "x-cp1251"
	          ],
	          "name": "windows-1251"
	        },
	        {
	          "labels": [
	            "ansi_x3.4-1968",
	            "ascii",
	            "cp1252",
	            "cp819",
	            "csisolatin1",
	            "ibm819",
	            "iso-8859-1",
	            "iso-ir-100",
	            "iso8859-1",
	            "iso88591",
	            "iso_8859-1",
	            "iso_8859-1:1987",
	            "l1",
	            "latin1",
	            "us-ascii",
	            "windows-1252",
	            "x-cp1252"
	          ],
	          "name": "windows-1252"
	        },
	        {
	          "labels": [
	            "cp1253",
	            "windows-1253",
	            "x-cp1253"
	          ],
	          "name": "windows-1253"
	        },
	        {
	          "labels": [
	            "cp1254",
	            "csisolatin5",
	            "iso-8859-9",
	            "iso-ir-148",
	            "iso8859-9",
	            "iso88599",
	            "iso_8859-9",
	            "iso_8859-9:1989",
	            "l5",
	            "latin5",
	            "windows-1254",
	            "x-cp1254"
	          ],
	          "name": "windows-1254"
	        },
	        {
	          "labels": [
	            "cp1255",
	            "windows-1255",
	            "x-cp1255"
	          ],
	          "name": "windows-1255"
	        },
	        {
	          "labels": [
	            "cp1256",
	            "windows-1256",
	            "x-cp1256"
	          ],
	          "name": "windows-1256"
	        },
	        {
	          "labels": [
	            "cp1257",
	            "windows-1257",
	            "x-cp1257"
	          ],
	          "name": "windows-1257"
	        },
	        {
	          "labels": [
	            "cp1258",
	            "windows-1258",
	            "x-cp1258"
	          ],
	          "name": "windows-1258"
	        },
	        {
	          "labels": [
	            "x-mac-cyrillic",
	            "x-mac-ukrainian"
	          ],
	          "name": "x-mac-cyrillic"
	        }
	      ],
	      "heading": "Legacy single-byte encodings"
	    },
	    {
	      "encodings": [
	        {
	          "labels": [
	            "chinese",
	            "csgb2312",
	            "csiso58gb231280",
	            "gb2312",
	            "gb_2312",
	            "gb_2312-80",
	            "gbk",
	            "iso-ir-58",
	            "x-gbk"
	          ],
	          "name": "GBK"
	        },
	        {
	          "labels": [
	            "gb18030"
	          ],
	          "name": "gb18030"
	        }
	      ],
	      "heading": "Legacy multi-byte Chinese (simplified) encodings"
	    },
	    {
	      "encodings": [
	        {
	          "labels": [
	            "big5",
	            "big5-hkscs",
	            "cn-big5",
	            "csbig5",
	            "x-x-big5"
	          ],
	          "name": "Big5"
	        }
	      ],
	      "heading": "Legacy multi-byte Chinese (traditional) encodings"
	    },
	    {
	      "encodings": [
	        {
	          "labels": [
	            "cseucpkdfmtjapanese",
	            "euc-jp",
	            "x-euc-jp"
	          ],
	          "name": "EUC-JP"
	        },
	        {
	          "labels": [
	            "csiso2022jp",
	            "iso-2022-jp"
	          ],
	          "name": "ISO-2022-JP"
	        },
	        {
	          "labels": [
	            "csshiftjis",
	            "ms932",
	            "ms_kanji",
	            "shift-jis",
	            "shift_jis",
	            "sjis",
	            "windows-31j",
	            "x-sjis"
	          ],
	          "name": "Shift_JIS"
	        }
	      ],
	      "heading": "Legacy multi-byte Japanese encodings"
	    },
	    {
	      "encodings": [
	        {
	          "labels": [
	            "cseuckr",
	            "csksc56011987",
	            "euc-kr",
	            "iso-ir-149",
	            "korean",
	            "ks_c_5601-1987",
	            "ks_c_5601-1989",
	            "ksc5601",
	            "ksc_5601",
	            "windows-949"
	          ],
	          "name": "EUC-KR"
	        }
	      ],
	      "heading": "Legacy multi-byte Korean encodings"
	    },
	    {
	      "encodings": [
	        {
	          "labels": [
	            "csiso2022kr",
	            "hz-gb-2312",
	            "iso-2022-cn",
	            "iso-2022-cn-ext",
	            "iso-2022-kr"
	          ],
	          "name": "replacement"
	        },
	        {
	          "labels": [
	            "utf-16be"
	          ],
	          "name": "UTF-16BE"
	        },
	        {
	          "labels": [
	            "utf-16",
	            "utf-16le"
	          ],
	          "name": "UTF-16LE"
	        },
	        {
	          "labels": [
	            "x-user-defined"
	          ],
	          "name": "x-user-defined"
	        }
	      ],
	      "heading": "Legacy miscellaneous encodings"
	    }
	  ];

	  // Label to encoding registry.
	  /** @type {Object.<string,{name:string,labels:Array.<string>}>} */
	  var label_to_encoding = {};
	  encodings.forEach(function(category) {
	    category.encodings.forEach(function(encoding) {
	      encoding.labels.forEach(function(label) {
	        label_to_encoding[label] = encoding;
	      });
	    });
	  });

	  // Registry of of encoder/decoder factories, by encoding name.
	  /** @type {Object.<string, function({fatal:boolean}): Encoder>} */
	  var encoders = {};
	  /** @type {Object.<string, function({fatal:boolean}): Decoder>} */
	  var decoders = {};

	  //
	  // 6. Indexes
	  //

	  /**
	   * @param {number} pointer The |pointer| to search for.
	   * @param {(!Array.<?number>|undefined)} index The |index| to search within.
	   * @return {?number} The code point corresponding to |pointer| in |index|,
	   *     or null if |code point| is not in |index|.
	   */
	  function indexCodePointFor(pointer, index) {
	    if (!index) return null;
	    return index[pointer] || null;
	  }

	  /**
	   * @param {number} code_point The |code point| to search for.
	   * @param {!Array.<?number>} index The |index| to search within.
	   * @return {?number} The first pointer corresponding to |code point| in
	   *     |index|, or null if |code point| is not in |index|.
	   */
	  function indexPointerFor(code_point, index) {
	    var pointer = index.indexOf(code_point);
	    return pointer === -1 ? null : pointer;
	  }

	  /**
	   * @param {string} name Name of the index.
	   * @return {(!Array.<number>|!Array.<Array.<number>>)}
	   *  */
	  function index(name) {
	    if (!('encoding-indexes' in global)) {
	      throw Error("Indexes missing." +
	                  " Did you forget to include encoding-indexes.js first?");
	    }
	    return global['encoding-indexes'][name];
	  }

	  /**
	   * @param {number} pointer The |pointer| to search for in the gb18030 index.
	   * @return {?number} The code point corresponding to |pointer| in |index|,
	   *     or null if |code point| is not in the gb18030 index.
	   */
	  function indexGB18030RangesCodePointFor(pointer) {
	    // 1. If pointer is greater than 39419 and less than 189000, or
	    // pointer is greater than 1237575, return null.
	    if ((pointer > 39419 && pointer < 189000) || (pointer > 1237575))
	      return null;

	    // 2. If pointer is 7457, return code point U+E7C7.
	    if (pointer === 7457) return 0xE7C7;

	    // 3. Let offset be the last pointer in index gb18030 ranges that
	    // is equal to or less than pointer and let code point offset be
	    // its corresponding code point.
	    var offset = 0;
	    var code_point_offset = 0;
	    var idx = index('gb18030-ranges');
	    var i;
	    for (i = 0; i < idx.length; ++i) {
	      /** @type {!Array.<number>} */
	      var entry = idx[i];
	      if (entry[0] <= pointer) {
	        offset = entry[0];
	        code_point_offset = entry[1];
	      } else {
	        break;
	      }
	    }

	    // 4. Return a code point whose value is code point offset +
	    // pointer − offset.
	    return code_point_offset + pointer - offset;
	  }

	  /**
	   * @param {number} code_point The |code point| to locate in the gb18030 index.
	   * @return {number} The first pointer corresponding to |code point| in the
	   *     gb18030 index.
	   */
	  function indexGB18030RangesPointerFor(code_point) {
	    // 1. If code point is U+E7C7, return pointer 7457.
	    if (code_point === 0xE7C7) return 7457;

	    // 2. Let offset be the last code point in index gb18030 ranges
	    // that is equal to or less than code point and let pointer offset
	    // be its corresponding pointer.
	    var offset = 0;
	    var pointer_offset = 0;
	    var idx = index('gb18030-ranges');
	    var i;
	    for (i = 0; i < idx.length; ++i) {
	      /** @type {!Array.<number>} */
	      var entry = idx[i];
	      if (entry[1] <= code_point) {
	        offset = entry[1];
	        pointer_offset = entry[0];
	      } else {
	        break;
	      }
	    }

	    // 3. Return a pointer whose value is pointer offset + code point
	    // − offset.
	    return pointer_offset + code_point - offset;
	  }

	  /**
	   * @param {number} code_point The |code_point| to search for in the Shift_JIS
	   *     index.
	   * @return {?number} The code point corresponding to |pointer| in |index|,
	   *     or null if |code point| is not in the Shift_JIS index.
	   */
	  function indexShiftJISPointerFor(code_point) {
	    // 1. Let index be index jis0208 excluding all entries whose
	    // pointer is in the range 8272 to 8835, inclusive.
	    shift_jis_index = shift_jis_index ||
	      index('jis0208').map(function(code_point, pointer) {
	        return inRange(pointer, 8272, 8835) ? null : code_point;
	      });
	    var index_ = shift_jis_index;

	    // 2. Return the index pointer for code point in index.
	    return index_.indexOf(code_point);
	  }
	  var shift_jis_index;

	  /**
	   * @param {number} code_point The |code_point| to search for in the big5
	   *     index.
	   * @return {?number} The code point corresponding to |pointer| in |index|,
	   *     or null if |code point| is not in the big5 index.
	   */
	  function indexBig5PointerFor(code_point) {
	    // 1. Let index be index Big5 excluding all entries whose pointer
	    big5_index_no_hkscs = big5_index_no_hkscs ||
	      index('big5').map(function(code_point, pointer) {
	        return (pointer < (0xA1 - 0x81) * 157) ? null : code_point;
	      });
	    var index_ = big5_index_no_hkscs;

	    // 2. If code point is U+2550, U+255E, U+2561, U+256A, U+5341, or
	    // U+5345, return the last pointer corresponding to code point in
	    // index.
	    if (code_point === 0x2550 || code_point === 0x255E ||
	        code_point === 0x2561 || code_point === 0x256A ||
	        code_point === 0x5341 || code_point === 0x5345) {
	      return index_.lastIndexOf(code_point);
	    }

	    // 3. Return the index pointer for code point in index.
	    return indexPointerFor(code_point, index_);
	  }
	  var big5_index_no_hkscs;

	  //
	  // 8. API
	  //

	  /** @const */ var DEFAULT_ENCODING = 'utf-8';

	  // 8.1 Interface TextDecoder

	  /**
	   * @constructor
	   * @param {string=} label The label of the encoding;
	   *     defaults to 'utf-8'.
	   * @param {Object=} options
	   */
	  function TextDecoder(label, options) {
	    // Web IDL conventions
	    if (!(this instanceof TextDecoder))
	      throw TypeError('Called as a function. Did you forget \'new\'?');
	    label = label !== undefined ? String(label) : DEFAULT_ENCODING;
	    options = ToDictionary(options);

	    // A TextDecoder object has an associated encoding, decoder,
	    // stream, ignore BOM flag (initially unset), BOM seen flag
	    // (initially unset), error mode (initially replacement), and do
	    // not flush flag (initially unset).

	    /** @private */
	    this._encoding = null;
	    /** @private @type {?Decoder} */
	    this._decoder = null;
	    /** @private @type {boolean} */
	    this._ignoreBOM = false;
	    /** @private @type {boolean} */
	    this._BOMseen = false;
	    /** @private @type {string} */
	    this._error_mode = 'replacement';
	    /** @private @type {boolean} */
	    this._do_not_flush = false;


	    // 1. Let encoding be the result of getting an encoding from
	    // label.
	    var encoding = getEncoding(label);

	    // 2. If encoding is failure or replacement, throw a RangeError.
	    if (encoding === null || encoding.name === 'replacement')
	      throw RangeError('Unknown encoding: ' + label);
	    if (!decoders[encoding.name]) {
	      throw Error('Decoder not present.' +
	                  ' Did you forget to include encoding-indexes.js first?');
	    }

	    // 3. Let dec be a new TextDecoder object.
	    var dec = this;

	    // 4. Set dec's encoding to encoding.
	    dec._encoding = encoding;

	    // 5. If options's fatal member is true, set dec's error mode to
	    // fatal.
	    if (Boolean(options['fatal']))
	      dec._error_mode = 'fatal';

	    // 6. If options's ignoreBOM member is true, set dec's ignore BOM
	    // flag.
	    if (Boolean(options['ignoreBOM']))
	      dec._ignoreBOM = true;

	    // For pre-ES5 runtimes:
	    if (!Object.defineProperty) {
	      this.encoding = dec._encoding.name.toLowerCase();
	      this.fatal = dec._error_mode === 'fatal';
	      this.ignoreBOM = dec._ignoreBOM;
	    }

	    // 7. Return dec.
	    return dec;
	  }

	  if (Object.defineProperty) {
	    // The encoding attribute's getter must return encoding's name.
	    Object.defineProperty(TextDecoder.prototype, 'encoding', {
	      /** @this {TextDecoder} */
	      get: function() { return this._encoding.name.toLowerCase(); }
	    });

	    // The fatal attribute's getter must return true if error mode
	    // is fatal, and false otherwise.
	    Object.defineProperty(TextDecoder.prototype, 'fatal', {
	      /** @this {TextDecoder} */
	      get: function() { return this._error_mode === 'fatal'; }
	    });

	    // The ignoreBOM attribute's getter must return true if ignore
	    // BOM flag is set, and false otherwise.
	    Object.defineProperty(TextDecoder.prototype, 'ignoreBOM', {
	      /** @this {TextDecoder} */
	      get: function() { return this._ignoreBOM; }
	    });
	  }

	  /**
	   * @param {BufferSource=} input The buffer of bytes to decode.
	   * @param {Object=} options
	   * @return {string} The decoded string.
	   */
	  TextDecoder.prototype.decode = function decode(input, options) {
	    var bytes;
	    if (typeof input === 'object' && input instanceof ArrayBuffer) {
	      bytes = new Uint8Array(input);
	    } else if (typeof input === 'object' && 'buffer' in input &&
	               input.buffer instanceof ArrayBuffer) {
	      bytes = new Uint8Array(input.buffer,
	                             input.byteOffset,
	                             input.byteLength);
	    } else {
	      bytes = new Uint8Array(0);
	    }

	    options = ToDictionary(options);

	    // 1. If the do not flush flag is unset, set decoder to a new
	    // encoding's decoder, set stream to a new stream, and unset the
	    // BOM seen flag.
	    if (!this._do_not_flush) {
	      this._decoder = decoders[this._encoding.name]({
	        fatal: this._error_mode === 'fatal'});
	      this._BOMseen = false;
	    }

	    // 2. If options's stream is true, set the do not flush flag, and
	    // unset the do not flush flag otherwise.
	    this._do_not_flush = Boolean(options['stream']);

	    // 3. If input is given, push a copy of input to stream.
	    // TODO: Align with spec algorithm - maintain stream on instance.
	    var input_stream = new Stream(bytes);

	    // 4. Let output be a new stream.
	    var output = [];

	    /** @type {?(number|!Array.<number>)} */
	    var result;

	    // 5. While true:
	    while (true) {
	      // 1. Let token be the result of reading from stream.
	      var token = input_stream.read();

	      // 2. If token is end-of-stream and the do not flush flag is
	      // set, return output, serialized.
	      // TODO: Align with spec algorithm.
	      if (token === end_of_stream)
	        break;

	      // 3. Otherwise, run these subsubsteps:

	      // 1. Let result be the result of processing token for decoder,
	      // stream, output, and error mode.
	      result = this._decoder.handler(input_stream, token);

	      // 2. If result is finished, return output, serialized.
	      if (result === finished)
	        break;

	      if (result !== null) {
	        if (Array.isArray(result))
	          output.push.apply(output, /**@type {!Array.<number>}*/(result));
	        else
	          output.push(result);
	      }

	      // 3. Otherwise, if result is error, throw a TypeError.
	      // (Thrown in handler)

	      // 4. Otherwise, do nothing.
	    }
	    // TODO: Align with spec algorithm.
	    if (!this._do_not_flush) {
	      do {
	        result = this._decoder.handler(input_stream, input_stream.read());
	        if (result === finished)
	          break;
	        if (result === null)
	          continue;
	        if (Array.isArray(result))
	          output.push.apply(output, /**@type {!Array.<number>}*/(result));
	        else
	          output.push(result);
	      } while (!input_stream.endOfStream());
	      this._decoder = null;
	    }

	    // A TextDecoder object also has an associated serialize stream
	    // algorithm...
	    /**
	     * @param {!Array.<number>} stream
	     * @return {string}
	     * @this {TextDecoder}
	     */
	    function serializeStream(stream) {
	      // 1. Let token be the result of reading from stream.
	      // (Done in-place on array, rather than as a stream)

	      // 2. If encoding is UTF-8, UTF-16BE, or UTF-16LE, and ignore
	      // BOM flag and BOM seen flag are unset, run these subsubsteps:
	      if (includes(['UTF-8', 'UTF-16LE', 'UTF-16BE'], this._encoding.name) &&
	          !this._ignoreBOM && !this._BOMseen) {
	        if (stream.length > 0 && stream[0] === 0xFEFF) {
	          // 1. If token is U+FEFF, set BOM seen flag.
	          this._BOMseen = true;
	          stream.shift();
	        } else if (stream.length > 0) {
	          // 2. Otherwise, if token is not end-of-stream, set BOM seen
	          // flag and append token to stream.
	          this._BOMseen = true;
	        } else ;
	      }
	      // 4. Otherwise, return output.
	      return codePointsToString(stream);
	    }

	    return serializeStream.call(this, output);
	  };

	  // 8.2 Interface TextEncoder

	  /**
	   * @constructor
	   * @param {string=} label The label of the encoding. NONSTANDARD.
	   * @param {Object=} options NONSTANDARD.
	   */
	  function TextEncoder(label, options) {
	    // Web IDL conventions
	    if (!(this instanceof TextEncoder))
	      throw TypeError('Called as a function. Did you forget \'new\'?');
	    options = ToDictionary(options);

	    // A TextEncoder object has an associated encoding and encoder.

	    /** @private */
	    this._encoding = null;
	    /** @private @type {?Encoder} */
	    this._encoder = null;

	    // Non-standard
	    /** @private @type {boolean} */
	    this._do_not_flush = false;
	    /** @private @type {string} */
	    this._fatal = Boolean(options['fatal']) ? 'fatal' : 'replacement';

	    // 1. Let enc be a new TextEncoder object.
	    var enc = this;

	    // 2. Set enc's encoding to UTF-8's encoder.
	    if (Boolean(options['NONSTANDARD_allowLegacyEncoding'])) {
	      // NONSTANDARD behavior.
	      label = label !== undefined ? String(label) : DEFAULT_ENCODING;
	      var encoding = getEncoding(label);
	      if (encoding === null || encoding.name === 'replacement')
	        throw RangeError('Unknown encoding: ' + label);
	      if (!encoders[encoding.name]) {
	        throw Error('Encoder not present.' +
	                    ' Did you forget to include encoding-indexes.js first?');
	      }
	      enc._encoding = encoding;
	    } else {
	      // Standard behavior.
	      enc._encoding = getEncoding('utf-8');

	      if (label !== undefined && 'console' in global) {
	        console.warn('TextEncoder constructor called with encoding label, '
	                     + 'which is ignored.');
	      }
	    }

	    // For pre-ES5 runtimes:
	    if (!Object.defineProperty)
	      this.encoding = enc._encoding.name.toLowerCase();

	    // 3. Return enc.
	    return enc;
	  }

	  if (Object.defineProperty) {
	    // The encoding attribute's getter must return encoding's name.
	    Object.defineProperty(TextEncoder.prototype, 'encoding', {
	      /** @this {TextEncoder} */
	      get: function() { return this._encoding.name.toLowerCase(); }
	    });
	  }

	  /**
	   * @param {string=} opt_string The string to encode.
	   * @param {Object=} options
	   * @return {!Uint8Array} Encoded bytes, as a Uint8Array.
	   */
	  TextEncoder.prototype.encode = function encode(opt_string, options) {
	    opt_string = opt_string === undefined ? '' : String(opt_string);
	    options = ToDictionary(options);

	    // NOTE: This option is nonstandard. None of the encodings
	    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful when
	    // the input is a USVString so streaming is not necessary.
	    if (!this._do_not_flush)
	      this._encoder = encoders[this._encoding.name]({
	        fatal: this._fatal === 'fatal'});
	    this._do_not_flush = Boolean(options['stream']);

	    // 1. Convert input to a stream.
	    var input = new Stream(stringToCodePoints(opt_string));

	    // 2. Let output be a new stream
	    var output = [];

	    /** @type {?(number|!Array.<number>)} */
	    var result;
	    // 3. While true, run these substeps:
	    while (true) {
	      // 1. Let token be the result of reading from input.
	      var token = input.read();
	      if (token === end_of_stream)
	        break;
	      // 2. Let result be the result of processing token for encoder,
	      // input, output.
	      result = this._encoder.handler(input, token);
	      if (result === finished)
	        break;
	      if (Array.isArray(result))
	        output.push.apply(output, /**@type {!Array.<number>}*/(result));
	      else
	        output.push(result);
	    }
	    // TODO: Align with spec algorithm.
	    if (!this._do_not_flush) {
	      while (true) {
	        result = this._encoder.handler(input, input.read());
	        if (result === finished)
	          break;
	        if (Array.isArray(result))
	          output.push.apply(output, /**@type {!Array.<number>}*/(result));
	        else
	          output.push(result);
	      }
	      this._encoder = null;
	    }
	    // 3. If result is finished, convert output into a byte sequence,
	    // and then return a Uint8Array object wrapping an ArrayBuffer
	    // containing output.
	    return new Uint8Array(output);
	  };


	  //
	  // 9. The encoding
	  //

	  // 9.1 utf-8

	  // 9.1.1 utf-8 decoder
	  /**
	   * @constructor
	   * @implements {Decoder}
	   * @param {{fatal: boolean}} options
	   */
	  function UTF8Decoder(options) {
	    var fatal = options.fatal;

	    // utf-8's decoder's has an associated utf-8 code point, utf-8
	    // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8
	    // lower boundary (initially 0x80), and a utf-8 upper boundary
	    // (initially 0xBF).
	    var /** @type {number} */ utf8_code_point = 0,
	        /** @type {number} */ utf8_bytes_seen = 0,
	        /** @type {number} */ utf8_bytes_needed = 0,
	        /** @type {number} */ utf8_lower_boundary = 0x80,
	        /** @type {number} */ utf8_upper_boundary = 0xBF;

	    /**
	     * @param {Stream} stream The stream of bytes being decoded.
	     * @param {number} bite The next byte read from the stream.
	     * @return {?(number|!Array.<number>)} The next code point(s)
	     *     decoded, or null if not enough data exists in the input
	     *     stream to decode a complete code point.
	     */
	    this.handler = function(stream, bite) {
	      // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,
	      // set utf-8 bytes needed to 0 and return error.
	      if (bite === end_of_stream && utf8_bytes_needed !== 0) {
	        utf8_bytes_needed = 0;
	        return decoderError(fatal);
	      }

	      // 2. If byte is end-of-stream, return finished.
	      if (bite === end_of_stream)
	        return finished;

	      // 3. If utf-8 bytes needed is 0, based on byte:
	      if (utf8_bytes_needed === 0) {

	        // 0x00 to 0x7F
	        if (inRange(bite, 0x00, 0x7F)) {
	          // Return a code point whose value is byte.
	          return bite;
	        }

	        // 0xC2 to 0xDF
	        else if (inRange(bite, 0xC2, 0xDF)) {
	          // 1. Set utf-8 bytes needed to 1.
	          utf8_bytes_needed = 1;

	          // 2. Set UTF-8 code point to byte & 0x1F.
	          utf8_code_point = bite & 0x1F;
	        }

	        // 0xE0 to 0xEF
	        else if (inRange(bite, 0xE0, 0xEF)) {
	          // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.
	          if (bite === 0xE0)
	            utf8_lower_boundary = 0xA0;
	          // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.
	          if (bite === 0xED)
	            utf8_upper_boundary = 0x9F;
	          // 3. Set utf-8 bytes needed to 2.
	          utf8_bytes_needed = 2;
	          // 4. Set UTF-8 code point to byte & 0xF.
	          utf8_code_point = bite & 0xF;
	        }

	        // 0xF0 to 0xF4
	        else if (inRange(bite, 0xF0, 0xF4)) {
	          // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.
	          if (bite === 0xF0)
	            utf8_lower_boundary = 0x90;
	          // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.
	          if (bite === 0xF4)
	            utf8_upper_boundary = 0x8F;
	          // 3. Set utf-8 bytes needed to 3.
	          utf8_bytes_needed = 3;
	          // 4. Set UTF-8 code point to byte & 0x7.
	          utf8_code_point = bite & 0x7;
	        }

	        // Otherwise
	        else {
	          // Return error.
	          return decoderError(fatal);
	        }

	        // Return continue.
	        return null;
	      }

	      // 4. If byte is not in the range utf-8 lower boundary to utf-8
	      // upper boundary, inclusive, run these substeps:
	      if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {

	        // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8
	        // bytes seen to 0, set utf-8 lower boundary to 0x80, and set
	        // utf-8 upper boundary to 0xBF.
	        utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;
	        utf8_lower_boundary = 0x80;
	        utf8_upper_boundary = 0xBF;

	        // 2. Prepend byte to stream.
	        stream.prepend(bite);

	        // 3. Return error.
	        return decoderError(fatal);
	      }

	      // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary
	      // to 0xBF.
	      utf8_lower_boundary = 0x80;
	      utf8_upper_boundary = 0xBF;

	      // 6. Set UTF-8 code point to (UTF-8 code point << 6) | (byte &
	      // 0x3F)
	      utf8_code_point = (utf8_code_point << 6) | (bite & 0x3F);

	      // 7. Increase utf-8 bytes seen by one.
	      utf8_bytes_seen += 1;

	      // 8. If utf-8 bytes seen is not equal to utf-8 bytes needed,
	      // continue.
	      if (utf8_bytes_seen !== utf8_bytes_needed)
	        return null;

	      // 9. Let code point be utf-8 code point.
	      var code_point = utf8_code_point;

	      // 10. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes
	      // seen to 0.
	      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;

	      // 11. Return a code point whose value is code point.
	      return code_point;
	    };
	  }

	  // 9.1.2 utf-8 encoder
	  /**
	   * @constructor
	   * @implements {Encoder}
	   * @param {{fatal: boolean}} options
	   */
	  function UTF8Encoder(options) {
	    options.fatal;
	    /**
	     * @param {Stream} stream Input stream.
	     * @param {number} code_point Next code point read from the stream.
	     * @return {(number|!Array.<number>)} Byte(s) to emit.
	     */
	    this.handler = function(stream, code_point) {
	      // 1. If code point is end-of-stream, return finished.
	      if (code_point === end_of_stream)
	        return finished;

	      // 2. If code point is an ASCII code point, return a byte whose
	      // value is code point.
	      if (isASCIICodePoint(code_point))
	        return code_point;

	      // 3. Set count and offset based on the range code point is in:
	      var count, offset;
	      // U+0080 to U+07FF, inclusive:
	      if (inRange(code_point, 0x0080, 0x07FF)) {
	        // 1 and 0xC0
	        count = 1;
	        offset = 0xC0;
	      }
	      // U+0800 to U+FFFF, inclusive:
	      else if (inRange(code_point, 0x0800, 0xFFFF)) {
	        // 2 and 0xE0
	        count = 2;
	        offset = 0xE0;
	      }
	      // U+10000 to U+10FFFF, inclusive:
	      else if (inRange(code_point, 0x10000, 0x10FFFF)) {
	        // 3 and 0xF0
	        count = 3;
	        offset = 0xF0;
	      }

	      // 4. Let bytes be a byte sequence whose first byte is (code
	      // point >> (6 × count)) + offset.
	      var bytes = [(code_point >> (6 * count)) + offset];

	      // 5. Run these substeps while count is greater than 0:
	      while (count > 0) {

	        // 1. Set temp to code point >> (6 × (count − 1)).
	        var temp = code_point >> (6 * (count - 1));

	        // 2. Append to bytes 0x80 | (temp & 0x3F).
	        bytes.push(0x80 | (temp & 0x3F));

	        // 3. Decrease count by one.
	        count -= 1;
	      }

	      // 6. Return bytes bytes, in order.
	      return bytes;
	    };
	  }

	  /** @param {{fatal: boolean}} options */
	  encoders['UTF-8'] = function(options) {
	    return new UTF8Encoder(options);
	  };
	  /** @param {{fatal: boolean}} options */
	  decoders['UTF-8'] = function(options) {
	    return new UTF8Decoder(options);
	  };

	  //
	  // 10. Legacy single-byte encodings
	  //

	  // 10.1 single-byte decoder
	  /**
	   * @constructor
	   * @implements {Decoder}
	   * @param {!Array.<number>} index The encoding index.
	   * @param {{fatal: boolean}} options
	   */
	  function SingleByteDecoder(index, options) {
	    var fatal = options.fatal;
	    /**
	     * @param {Stream} stream The stream of bytes being decoded.
	     * @param {number} bite The next byte read from the stream.
	     * @return {?(number|!Array.<number>)} The next code point(s)
	     *     decoded, or null if not enough data exists in the input
	     *     stream to decode a complete code point.
	     */
	    this.handler = function(stream, bite) {
	      // 1. If byte is end-of-stream, return finished.
	      if (bite === end_of_stream)
	        return finished;

	      // 2. If byte is an ASCII byte, return a code point whose value
	      // is byte.
	      if (isASCIIByte(bite))
	        return bite;

	      // 3. Let code point be the index code point for byte − 0x80 in
	      // index single-byte.
	      var code_point = index[bite - 0x80];

	      // 4. If code point is null, return error.
	      if (code_point === null)
	        return decoderError(fatal);

	      // 5. Return a code point whose value is code point.
	      return code_point;
	    };
	  }

	  // 10.2 single-byte encoder
	  /**
	   * @constructor
	   * @implements {Encoder}
	   * @param {!Array.<?number>} index The encoding index.
	   * @param {{fatal: boolean}} options
	   */
	  function SingleByteEncoder(index, options) {
	    options.fatal;
	    /**
	     * @param {Stream} stream Input stream.
	     * @param {number} code_point Next code point read from the stream.
	     * @return {(number|!Array.<number>)} Byte(s) to emit.
	     */
	    this.handler = function(stream, code_point) {
	      // 1. If code point is end-of-stream, return finished.
	      if (code_point === end_of_stream)
	        return finished;

	      // 2. If code point is an ASCII code point, return a byte whose
	      // value is code point.
	      if (isASCIICodePoint(code_point))
	        return code_point;

	      // 3. Let pointer be the index pointer for code point in index
	      // single-byte.
	      var pointer = indexPointerFor(code_point, index);

	      // 4. If pointer is null, return error with code point.
	      if (pointer === null)
	        encoderError(code_point);

	      // 5. Return a byte whose value is pointer + 0x80.
	      return pointer + 0x80;
	    };
	  }

	  (function() {
	    if (!('encoding-indexes' in global))
	      return;
	    encodings.forEach(function(category) {
	      if (category.heading !== 'Legacy single-byte encodings')
	        return;
	      category.encodings.forEach(function(encoding) {
	        var name = encoding.name;
	        var idx = index(name.toLowerCase());
	        /** @param {{fatal: boolean}} options */
	        decoders[name] = function(options) {
	          return new SingleByteDecoder(idx, options);
	        };
	        /** @param {{fatal: boolean}} options */
	        encoders[name] = function(options) {
	          return new SingleByteEncoder(idx, options);
	        };
	      });
	    });
	  }());

	  //
	  // 11. Legacy multi-byte Chinese (simplified) encodings
	  //

	  // 11.1 gbk

	  // 11.1.1 gbk decoder
	  // gbk's decoder is gb18030's decoder.
	  /** @param {{fatal: boolean}} options */
	  decoders['GBK'] = function(options) {
	    return new GB18030Decoder(options);
	  };

	  // 11.1.2 gbk encoder
	  // gbk's encoder is gb18030's encoder with its gbk flag set.
	  /** @param {{fatal: boolean}} options */
	  encoders['GBK'] = function(options) {
	    return new GB18030Encoder(options, true);
	  };

	  // 11.2 gb18030

	  // 11.2.1 gb18030 decoder
	  /**
	   * @constructor
	   * @implements {Decoder}
	   * @param {{fatal: boolean}} options
	   */
	  function GB18030Decoder(options) {
	    var fatal = options.fatal;
	    // gb18030's decoder has an associated gb18030 first, gb18030
	    // second, and gb18030 third (all initially 0x00).
	    var /** @type {number} */ gb18030_first = 0x00,
	        /** @type {number} */ gb18030_second = 0x00,
	        /** @type {number} */ gb18030_third = 0x00;
	    /**
	     * @param {Stream} stream The stream of bytes being decoded.
	     * @param {number} bite The next byte read from the stream.
	     * @return {?(number|!Array.<number>)} The next code point(s)
	     *     decoded, or null if not enough data exists in the input
	     *     stream to decode a complete code point.
	     */
	    this.handler = function(stream, bite) {
	      // 1. If byte is end-of-stream and gb18030 first, gb18030
	      // second, and gb18030 third are 0x00, return finished.
	      if (bite === end_of_stream && gb18030_first === 0x00 &&
	          gb18030_second === 0x00 && gb18030_third === 0x00) {
	        return finished;
	      }
	      // 2. If byte is end-of-stream, and gb18030 first, gb18030
	      // second, or gb18030 third is not 0x00, set gb18030 first,
	      // gb18030 second, and gb18030 third to 0x00, and return error.
	      if (bite === end_of_stream &&
	          (gb18030_first !== 0x00 || gb18030_second !== 0x00 ||
	           gb18030_third !== 0x00)) {
	        gb18030_first = 0x00;
	        gb18030_second = 0x00;
	        gb18030_third = 0x00;
	        decoderError(fatal);
	      }
	      var code_point;
	      // 3. If gb18030 third is not 0x00, run these substeps:
	      if (gb18030_third !== 0x00) {
	        // 1. Let code point be null.
	        code_point = null;
	        // 2. If byte is in the range 0x30 to 0x39, inclusive, set
	        // code point to the index gb18030 ranges code point for
	        // (((gb18030 first − 0x81) × 10 + gb18030 second − 0x30) ×
	        // 126 + gb18030 third − 0x81) × 10 + byte − 0x30.
	        if (inRange(bite, 0x30, 0x39)) {
	          code_point = indexGB18030RangesCodePointFor(
	              (((gb18030_first - 0x81) * 10 + gb18030_second - 0x30) * 126 +
	               gb18030_third - 0x81) * 10 + bite - 0x30);
	        }

	        // 3. Let buffer be a byte sequence consisting of gb18030
	        // second, gb18030 third, and byte, in order.
	        var buffer = [gb18030_second, gb18030_third, bite];

	        // 4. Set gb18030 first, gb18030 second, and gb18030 third to
	        // 0x00.
	        gb18030_first = 0x00;
	        gb18030_second = 0x00;
	        gb18030_third = 0x00;

	        // 5. If code point is null, prepend buffer to stream and
	        // return error.
	        if (code_point === null) {
	          stream.prepend(buffer);
	          return decoderError(fatal);
	        }

	        // 6. Return a code point whose value is code point.
	        return code_point;
	      }

	      // 4. If gb18030 second is not 0x00, run these substeps:
	      if (gb18030_second !== 0x00) {

	        // 1. If byte is in the range 0x81 to 0xFE, inclusive, set
	        // gb18030 third to byte and return continue.
	        if (inRange(bite, 0x81, 0xFE)) {
	          gb18030_third = bite;
	          return null;
	        }

	        // 2. Prepend gb18030 second followed by byte to stream, set
	        // gb18030 first and gb18030 second to 0x00, and return error.
	        stream.prepend([gb18030_second, bite]);
	        gb18030_first = 0x00;
	        gb18030_second = 0x00;
	        return decoderError(fatal);
	      }

	      // 5. If gb18030 first is not 0x00, run these substeps:
	      if (gb18030_first !== 0x00) {

	        // 1. If byte is in the range 0x30 to 0x39, inclusive, set
	        // gb18030 second to byte and return continue.
	        if (inRange(bite, 0x30, 0x39)) {
	          gb18030_second = bite;
	          return null;
	        }

	        // 2. Let lead be gb18030 first, let pointer be null, and set
	        // gb18030 first to 0x00.
	        var lead = gb18030_first;
	        var pointer = null;
	        gb18030_first = 0x00;

	        // 3. Let offset be 0x40 if byte is less than 0x7F and 0x41
	        // otherwise.
	        var offset = bite < 0x7F ? 0x40 : 0x41;

	        // 4. If byte is in the range 0x40 to 0x7E, inclusive, or 0x80
	        // to 0xFE, inclusive, set pointer to (lead − 0x81) × 190 +
	        // (byte − offset).
	        if (inRange(bite, 0x40, 0x7E) || inRange(bite, 0x80, 0xFE))
	          pointer = (lead - 0x81) * 190 + (bite - offset);

	        // 5. Let code point be null if pointer is null and the index
	        // code point for pointer in index gb18030 otherwise.
	        code_point = pointer === null ? null :
	            indexCodePointFor(pointer, index('gb18030'));

	        // 6. If code point is null and byte is an ASCII byte, prepend
	        // byte to stream.
	        if (code_point === null && isASCIIByte(bite))
	          stream.prepend(bite);

	        // 7. If code point is null, return error.
	        if (code_point === null)
	          return decoderError(fatal);

	        // 8. Return a code point whose value is code point.
	        return code_point;
	      }

	      // 6. If byte is an ASCII byte, return a code point whose value
	      // is byte.
	      if (isASCIIByte(bite))
	        return bite;

	      // 7. If byte is 0x80, return code point U+20AC.
	      if (bite === 0x80)
	        return 0x20AC;

	      // 8. If byte is in the range 0x81 to 0xFE, inclusive, set
	      // gb18030 first to byte and return continue.
	      if (inRange(bite, 0x81, 0xFE)) {
	        gb18030_first = bite;
	        return null;
	      }

	      // 9. Return error.
	      return decoderError(fatal);
	    };
	  }

	  // 11.2.2 gb18030 encoder
	  /**
	   * @constructor
	   * @implements {Encoder}
	   * @param {{fatal: boolean}} options
	   * @param {boolean=} gbk_flag
	   */
	  function GB18030Encoder(options, gbk_flag) {
	    options.fatal;
	    // gb18030's decoder has an associated gbk flag (initially unset).
	    /**
	     * @param {Stream} stream Input stream.
	     * @param {number} code_point Next code point read from the stream.
	     * @return {(number|!Array.<number>)} Byte(s) to emit.
	     */
	    this.handler = function(stream, code_point) {
	      // 1. If code point is end-of-stream, return finished.
	      if (code_point === end_of_stream)
	        return finished;

	      // 2. If code point is an ASCII code point, return a byte whose
	      // value is code point.
	      if (isASCIICodePoint(code_point))
	        return code_point;

	      // 3. If code point is U+E5E5, return error with code point.
	      if (code_point === 0xE5E5)
	        return encoderError(code_point);

	      // 4. If the gbk flag is set and code point is U+20AC, return
	      // byte 0x80.
	      if (gbk_flag && code_point === 0x20AC)
	        return 0x80;

	      // 5. Let pointer be the index pointer for code point in index
	      // gb18030.
	      var pointer = indexPointerFor(code_point, index('gb18030'));

	      // 6. If pointer is not null, run these substeps:
	      if (pointer !== null) {

	        // 1. Let lead be floor(pointer / 190) + 0x81.
	        var lead = floor(pointer / 190) + 0x81;

	        // 2. Let trail be pointer % 190.
	        var trail = pointer % 190;

	        // 3. Let offset be 0x40 if trail is less than 0x3F and 0x41 otherwise.
	        var offset = trail < 0x3F ? 0x40 : 0x41;

	        // 4. Return two bytes whose values are lead and trail + offset.
	        return [lead, trail + offset];
	      }

	      // 7. If gbk flag is set, return error with code point.
	      if (gbk_flag)
	        return encoderError(code_point);

	      // 8. Set pointer to the index gb18030 ranges pointer for code
	      // point.
	      pointer = indexGB18030RangesPointerFor(code_point);

	      // 9. Let byte1 be floor(pointer / 10 / 126 / 10).
	      var byte1 = floor(pointer / 10 / 126 / 10);

	      // 10. Set pointer to pointer − byte1 × 10 × 126 × 10.
	      pointer = pointer - byte1 * 10 * 126 * 10;

	      // 11. Let byte2 be floor(pointer / 10 / 126).
	      var byte2 = floor(pointer / 10 / 126);

	      // 12. Set pointer to pointer − byte2 × 10 × 126.
	      pointer = pointer - byte2 * 10 * 126;

	      // 13. Let byte3 be floor(pointer / 10).
	      var byte3 = floor(pointer / 10);

	      // 14. Let byte4 be pointer − byte3 × 10.
	      var byte4 = pointer - byte3 * 10;

	      // 15. Return four bytes whose values are byte1 + 0x81, byte2 +
	      // 0x30, byte3 + 0x81, byte4 + 0x30.
	      return [byte1 + 0x81,
	              byte2 + 0x30,
	              byte3 + 0x81,
	              byte4 + 0x30];
	    };
	  }

	  /** @param {{fatal: boolean}} options */
	  encoders['gb18030'] = function(options) {
	    return new GB18030Encoder(options);
	  };
	  /** @param {{fatal: boolean}} options */
	  decoders['gb18030'] = function(options) {
	    return new GB18030Decoder(options);
	  };


	  //
	  // 12. Legacy multi-byte Chinese (traditional) encodings
	  //

	  // 12.1 Big5

	  // 12.1.1 Big5 decoder
	  /**
	   * @constructor
	   * @implements {Decoder}
	   * @param {{fatal: boolean}} options
	   */
	  function Big5Decoder(options) {
	    var fatal = options.fatal;
	    // Big5's decoder has an associated Big5 lead (initially 0x00).
	    var /** @type {number} */ Big5_lead = 0x00;

	    /**
	     * @param {Stream} stream The stream of bytes being decoded.
	     * @param {number} bite The next byte read from the stream.
	     * @return {?(number|!Array.<number>)} The next code point(s)
	     *     decoded, or null if not enough data exists in the input
	     *     stream to decode a complete code point.
	     */
	    this.handler = function(stream, bite) {
	      // 1. If byte is end-of-stream and Big5 lead is not 0x00, set
	      // Big5 lead to 0x00 and return error.
	      if (bite === end_of_stream && Big5_lead !== 0x00) {
	        Big5_lead = 0x00;
	        return decoderError(fatal);
	      }

	      // 2. If byte is end-of-stream and Big5 lead is 0x00, return
	      // finished.
	      if (bite === end_of_stream && Big5_lead === 0x00)
	        return finished;

	      // 3. If Big5 lead is not 0x00, let lead be Big5 lead, let
	      // pointer be null, set Big5 lead to 0x00, and then run these
	      // substeps:
	      if (Big5_lead !== 0x00) {
	        var lead = Big5_lead;
	        var pointer = null;
	        Big5_lead = 0x00;

	        // 1. Let offset be 0x40 if byte is less than 0x7F and 0x62
	        // otherwise.
	        var offset = bite < 0x7F ? 0x40 : 0x62;

	        // 2. If byte is in the range 0x40 to 0x7E, inclusive, or 0xA1
	        // to 0xFE, inclusive, set pointer to (lead − 0x81) × 157 +
	        // (byte − offset).
	        if (inRange(bite, 0x40, 0x7E) || inRange(bite, 0xA1, 0xFE))
	          pointer = (lead - 0x81) * 157 + (bite - offset);

	        // 3. If there is a row in the table below whose first column
	        // is pointer, return the two code points listed in its second
	        // column
	        // Pointer | Code points
	        // --------+--------------
	        // 1133    | U+00CA U+0304
	        // 1135    | U+00CA U+030C
	        // 1164    | U+00EA U+0304
	        // 1166    | U+00EA U+030C
	        switch (pointer) {
	          case 1133: return [0x00CA, 0x0304];
	          case 1135: return [0x00CA, 0x030C];
	          case 1164: return [0x00EA, 0x0304];
	          case 1166: return [0x00EA, 0x030C];
	        }

	        // 4. Let code point be null if pointer is null and the index
	        // code point for pointer in index Big5 otherwise.
	        var code_point = (pointer === null) ? null :
	            indexCodePointFor(pointer, index('big5'));

	        // 5. If code point is null and byte is an ASCII byte, prepend
	        // byte to stream.
	        if (code_point === null && isASCIIByte(bite))
	          stream.prepend(bite);

	        // 6. If code point is null, return error.
	        if (code_point === null)
	          return decoderError(fatal);

	        // 7. Return a code point whose value is code point.
	        return code_point;
	      }

	      // 4. If byte is an ASCII byte, return a code point whose value
	      // is byte.
	      if (isASCIIByte(bite))
	        return bite;

	      // 5. If byte is in the range 0x81 to 0xFE, inclusive, set Big5
	      // lead to byte and return continue.
	      if (inRange(bite, 0x81, 0xFE)) {
	        Big5_lead = bite;
	        return null;
	      }

	      // 6. Return error.
	      return decoderError(fatal);
	    };
	  }

	  // 12.1.2 Big5 encoder
	  /**
	   * @constructor
	   * @implements {Encoder}
	   * @param {{fatal: boolean}} options
	   */
	  function Big5Encoder(options) {
	    options.fatal;
	    /**
	     * @param {Stream} stream Input stream.
	     * @param {number} code_point Next code point read from the stream.
	     * @return {(number|!Array.<number>)} Byte(s) to emit.
	     */
	    this.handler = function(stream, code_point) {
	      // 1. If code point is end-of-stream, return finished.
	      if (code_point === end_of_stream)
	        return finished;

	      // 2. If code point is an ASCII code point, return a byte whose
	      // value is code point.
	      if (isASCIICodePoint(code_point))
	        return code_point;

	      // 3. Let pointer be the index Big5 pointer for code point.
	      var pointer = indexBig5PointerFor(code_point);

	      // 4. If pointer is null, return error with code point.
	      if (pointer === null)
	        return encoderError(code_point);

	      // 5. Let lead be floor(pointer / 157) + 0x81.
	      var lead = floor(pointer / 157) + 0x81;

	      // 6. If lead is less than 0xA1, return error with code point.
	      if (lead < 0xA1)
	        return encoderError(code_point);

	      // 7. Let trail be pointer % 157.
	      var trail = pointer % 157;

	      // 8. Let offset be 0x40 if trail is less than 0x3F and 0x62
	      // otherwise.
	      var offset = trail < 0x3F ? 0x40 : 0x62;

	      // Return two bytes whose values are lead and trail + offset.
	      return [lead, trail + offset];
	    };
	  }

	  /** @param {{fatal: boolean}} options */
	  encoders['Big5'] = function(options) {
	    return new Big5Encoder(options);
	  };
	  /** @param {{fatal: boolean}} options */
	  decoders['Big5'] = function(options) {
	    return new Big5Decoder(options);
	  };


	  //
	  // 13. Legacy multi-byte Japanese encodings
	  //

	  // 13.1 euc-jp

	  // 13.1.1 euc-jp decoder
	  /**
	   * @constructor
	   * @implements {Decoder}
	   * @param {{fatal: boolean}} options
	   */
	  function EUCJPDecoder(options) {
	    var fatal = options.fatal;

	    // euc-jp's decoder has an associated euc-jp jis0212 flag
	    // (initially unset) and euc-jp lead (initially 0x00).
	    var /** @type {boolean} */ eucjp_jis0212_flag = false,
	        /** @type {number} */ eucjp_lead = 0x00;

	    /**
	     * @param {Stream} stream The stream of bytes being decoded.
	     * @param {number} bite The next byte read from the stream.
	     * @return {?(number|!Array.<number>)} The next code point(s)
	     *     decoded, or null if not enough data exists in the input
	     *     stream to decode a complete code point.
	     */
	    this.handler = function(stream, bite) {
	      // 1. If byte is end-of-stream and euc-jp lead is not 0x00, set
	      // euc-jp lead to 0x00, and return error.
	      if (bite === end_of_stream && eucjp_lead !== 0x00) {
	        eucjp_lead = 0x00;
	        return decoderError(fatal);
	      }

	      // 2. If byte is end-of-stream and euc-jp lead is 0x00, return
	      // finished.
	      if (bite === end_of_stream && eucjp_lead === 0x00)
	        return finished;

	      // 3. If euc-jp lead is 0x8E and byte is in the range 0xA1 to
	      // 0xDF, inclusive, set euc-jp lead to 0x00 and return a code
	      // point whose value is 0xFF61 − 0xA1 + byte.
	      if (eucjp_lead === 0x8E && inRange(bite, 0xA1, 0xDF)) {
	        eucjp_lead = 0x00;
	        return 0xFF61 - 0xA1 + bite;
	      }

	      // 4. If euc-jp lead is 0x8F and byte is in the range 0xA1 to
	      // 0xFE, inclusive, set the euc-jp jis0212 flag, set euc-jp lead
	      // to byte, and return continue.
	      if (eucjp_lead === 0x8F && inRange(bite, 0xA1, 0xFE)) {
	        eucjp_jis0212_flag = true;
	        eucjp_lead = bite;
	        return null;
	      }

	      // 5. If euc-jp lead is not 0x00, let lead be euc-jp lead, set
	      // euc-jp lead to 0x00, and run these substeps:
	      if (eucjp_lead !== 0x00) {
	        var lead = eucjp_lead;
	        eucjp_lead = 0x00;

	        // 1. Let code point be null.
	        var code_point = null;

	        // 2. If lead and byte are both in the range 0xA1 to 0xFE,
	        // inclusive, set code point to the index code point for (lead
	        // − 0xA1) × 94 + byte − 0xA1 in index jis0208 if the euc-jp
	        // jis0212 flag is unset and in index jis0212 otherwise.
	        if (inRange(lead, 0xA1, 0xFE) && inRange(bite, 0xA1, 0xFE)) {
	          code_point = indexCodePointFor(
	            (lead - 0xA1) * 94 + (bite - 0xA1),
	            index(!eucjp_jis0212_flag ? 'jis0208' : 'jis0212'));
	        }

	        // 3. Unset the euc-jp jis0212 flag.
	        eucjp_jis0212_flag = false;

	        // 4. If byte is not in the range 0xA1 to 0xFE, inclusive,
	        // prepend byte to stream.
	        if (!inRange(bite, 0xA1, 0xFE))
	          stream.prepend(bite);

	        // 5. If code point is null, return error.
	        if (code_point === null)
	          return decoderError(fatal);

	        // 6. Return a code point whose value is code point.
	        return code_point;
	      }

	      // 6. If byte is an ASCII byte, return a code point whose value
	      // is byte.
	      if (isASCIIByte(bite))
	        return bite;

	      // 7. If byte is 0x8E, 0x8F, or in the range 0xA1 to 0xFE,
	      // inclusive, set euc-jp lead to byte and return continue.
	      if (bite === 0x8E || bite === 0x8F || inRange(bite, 0xA1, 0xFE)) {
	        eucjp_lead = bite;
	        return null;
	      }

	      // 8. Return error.
	      return decoderError(fatal);
	    };
	  }

	  // 13.1.2 euc-jp encoder
	  /**
	   * @constructor
	   * @implements {Encoder}
	   * @param {{fatal: boolean}} options
	   */
	  function EUCJPEncoder(options) {
	    options.fatal;
	    /**
	     * @param {Stream} stream Input stream.
	     * @param {number} code_point Next code point read from the stream.
	     * @return {(number|!Array.<number>)} Byte(s) to emit.
	     */
	    this.handler = function(stream, code_point) {
	      // 1. If code point is end-of-stream, return finished.
	      if (code_point === end_of_stream)
	        return finished;

	      // 2. If code point is an ASCII code point, return a byte whose
	      // value is code point.
	      if (isASCIICodePoint(code_point))
	        return code_point;

	      // 3. If code point is U+00A5, return byte 0x5C.
	      if (code_point === 0x00A5)
	        return 0x5C;

	      // 4. If code point is U+203E, return byte 0x7E.
	      if (code_point === 0x203E)
	        return 0x7E;

	      // 5. If code point is in the range U+FF61 to U+FF9F, inclusive,
	      // return two bytes whose values are 0x8E and code point −
	      // 0xFF61 + 0xA1.
	      if (inRange(code_point, 0xFF61, 0xFF9F))
	        return [0x8E, code_point - 0xFF61 + 0xA1];

	      // 6. If code point is U+2212, set it to U+FF0D.
	      if (code_point === 0x2212)
	        code_point = 0xFF0D;

	      // 7. Let pointer be the index pointer for code point in index
	      // jis0208.
	      var pointer = indexPointerFor(code_point, index('jis0208'));

	      // 8. If pointer is null, return error with code point.
	      if (pointer === null)
	        return encoderError(code_point);

	      // 9. Let lead be floor(pointer / 94) + 0xA1.
	      var lead = floor(pointer / 94) + 0xA1;

	      // 10. Let trail be pointer % 94 + 0xA1.
	      var trail = pointer % 94 + 0xA1;

	      // 11. Return two bytes whose values are lead and trail.
	      return [lead, trail];
	    };
	  }

	  /** @param {{fatal: boolean}} options */
	  encoders['EUC-JP'] = function(options) {
	    return new EUCJPEncoder(options);
	  };
	  /** @param {{fatal: boolean}} options */
	  decoders['EUC-JP'] = function(options) {
	    return new EUCJPDecoder(options);
	  };

	  // 13.2 iso-2022-jp

	  // 13.2.1 iso-2022-jp decoder
	  /**
	   * @constructor
	   * @implements {Decoder}
	   * @param {{fatal: boolean}} options
	   */
	  function ISO2022JPDecoder(options) {
	    var fatal = options.fatal;
	    /** @enum */
	    var states = {
	      ASCII: 0,
	      Roman: 1,
	      Katakana: 2,
	      LeadByte: 3,
	      TrailByte: 4,
	      EscapeStart: 5,
	      Escape: 6
	    };
	    // iso-2022-jp's decoder has an associated iso-2022-jp decoder
	    // state (initially ASCII), iso-2022-jp decoder output state
	    // (initially ASCII), iso-2022-jp lead (initially 0x00), and
	    // iso-2022-jp output flag (initially unset).
	    var /** @type {number} */ iso2022jp_decoder_state = states.ASCII,
	        /** @type {number} */ iso2022jp_decoder_output_state = states.ASCII,
	        /** @type {number} */ iso2022jp_lead = 0x00,
	        /** @type {boolean} */ iso2022jp_output_flag = false;
	    /**
	     * @param {Stream} stream The stream of bytes being decoded.
	     * @param {number} bite The next byte read from the stream.
	     * @return {?(number|!Array.<number>)} The next code point(s)
	     *     decoded, or null if not enough data exists in the input
	     *     stream to decode a complete code point.
	     */
	    this.handler = function(stream, bite) {
	      // switching on iso-2022-jp decoder state:
	      switch (iso2022jp_decoder_state) {
	      default:
	      case states.ASCII:
	        // ASCII
	        // Based on byte:

	        // 0x1B
	        if (bite === 0x1B) {
	          // Set iso-2022-jp decoder state to escape start and return
	          // continue.
	          iso2022jp_decoder_state = states.EscapeStart;
	          return null;
	        }

	        // 0x00 to 0x7F, excluding 0x0E, 0x0F, and 0x1B
	        if (inRange(bite, 0x00, 0x7F) && bite !== 0x0E
	            && bite !== 0x0F && bite !== 0x1B) {
	          // Unset the iso-2022-jp output flag and return a code point
	          // whose value is byte.
	          iso2022jp_output_flag = false;
	          return bite;
	        }

	        // end-of-stream
	        if (bite === end_of_stream) {
	          // Return finished.
	          return finished;
	        }

	        // Otherwise
	        // Unset the iso-2022-jp output flag and return error.
	        iso2022jp_output_flag = false;
	        return decoderError(fatal);

	      case states.Roman:
	        // Roman
	        // Based on byte:

	        // 0x1B
	        if (bite === 0x1B) {
	          // Set iso-2022-jp decoder state to escape start and return
	          // continue.
	          iso2022jp_decoder_state = states.EscapeStart;
	          return null;
	        }

	        // 0x5C
	        if (bite === 0x5C) {
	          // Unset the iso-2022-jp output flag and return code point
	          // U+00A5.
	          iso2022jp_output_flag = false;
	          return 0x00A5;
	        }

	        // 0x7E
	        if (bite === 0x7E) {
	          // Unset the iso-2022-jp output flag and return code point
	          // U+203E.
	          iso2022jp_output_flag = false;
	          return 0x203E;
	        }

	        // 0x00 to 0x7F, excluding 0x0E, 0x0F, 0x1B, 0x5C, and 0x7E
	        if (inRange(bite, 0x00, 0x7F) && bite !== 0x0E && bite !== 0x0F
	            && bite !== 0x1B && bite !== 0x5C && bite !== 0x7E) {
	          // Unset the iso-2022-jp output flag and return a code point
	          // whose value is byte.
	          iso2022jp_output_flag = false;
	          return bite;
	        }

	        // end-of-stream
	        if (bite === end_of_stream) {
	          // Return finished.
	          return finished;
	        }

	        // Otherwise
	        // Unset the iso-2022-jp output flag and return error.
	        iso2022jp_output_flag = false;
	        return decoderError(fatal);

	      case states.Katakana:
	        // Katakana
	        // Based on byte:

	        // 0x1B
	        if (bite === 0x1B) {
	          // Set iso-2022-jp decoder state to escape start and return
	          // continue.
	          iso2022jp_decoder_state = states.EscapeStart;
	          return null;
	        }

	        // 0x21 to 0x5F
	        if (inRange(bite, 0x21, 0x5F)) {
	          // Unset the iso-2022-jp output flag and return a code point
	          // whose value is 0xFF61 − 0x21 + byte.
	          iso2022jp_output_flag = false;
	          return 0xFF61 - 0x21 + bite;
	        }

	        // end-of-stream
	        if (bite === end_of_stream) {
	          // Return finished.
	          return finished;
	        }

	        // Otherwise
	        // Unset the iso-2022-jp output flag and return error.
	        iso2022jp_output_flag = false;
	        return decoderError(fatal);

	      case states.LeadByte:
	        // Lead byte
	        // Based on byte:

	        // 0x1B
	        if (bite === 0x1B) {
	          // Set iso-2022-jp decoder state to escape start and return
	          // continue.
	          iso2022jp_decoder_state = states.EscapeStart;
	          return null;
	        }

	        // 0x21 to 0x7E
	        if (inRange(bite, 0x21, 0x7E)) {
	          // Unset the iso-2022-jp output flag, set iso-2022-jp lead
	          // to byte, iso-2022-jp decoder state to trail byte, and
	          // return continue.
	          iso2022jp_output_flag = false;
	          iso2022jp_lead = bite;
	          iso2022jp_decoder_state = states.TrailByte;
	          return null;
	        }

	        // end-of-stream
	        if (bite === end_of_stream) {
	          // Return finished.
	          return finished;
	        }

	        // Otherwise
	        // Unset the iso-2022-jp output flag and return error.
	        iso2022jp_output_flag = false;
	        return decoderError(fatal);

	      case states.TrailByte:
	        // Trail byte
	        // Based on byte:

	        // 0x1B
	        if (bite === 0x1B) {
	          // Set iso-2022-jp decoder state to escape start and return
	          // continue.
	          iso2022jp_decoder_state = states.EscapeStart;
	          return decoderError(fatal);
	        }

	        // 0x21 to 0x7E
	        if (inRange(bite, 0x21, 0x7E)) {
	          // 1. Set the iso-2022-jp decoder state to lead byte.
	          iso2022jp_decoder_state = states.LeadByte;

	          // 2. Let pointer be (iso-2022-jp lead − 0x21) × 94 + byte − 0x21.
	          var pointer = (iso2022jp_lead - 0x21) * 94 + bite - 0x21;

	          // 3. Let code point be the index code point for pointer in
	          // index jis0208.
	          var code_point = indexCodePointFor(pointer, index('jis0208'));

	          // 4. If code point is null, return error.
	          if (code_point === null)
	            return decoderError(fatal);

	          // 5. Return a code point whose value is code point.
	          return code_point;
	        }

	        // end-of-stream
	        if (bite === end_of_stream) {
	          // Set the iso-2022-jp decoder state to lead byte, prepend
	          // byte to stream, and return error.
	          iso2022jp_decoder_state = states.LeadByte;
	          stream.prepend(bite);
	          return decoderError(fatal);
	        }

	        // Otherwise
	        // Set iso-2022-jp decoder state to lead byte and return
	        // error.
	        iso2022jp_decoder_state = states.LeadByte;
	        return decoderError(fatal);

	      case states.EscapeStart:
	        // Escape start

	        // 1. If byte is either 0x24 or 0x28, set iso-2022-jp lead to
	        // byte, iso-2022-jp decoder state to escape, and return
	        // continue.
	        if (bite === 0x24 || bite === 0x28) {
	          iso2022jp_lead = bite;
	          iso2022jp_decoder_state = states.Escape;
	          return null;
	        }

	        // 2. Prepend byte to stream.
	        stream.prepend(bite);

	        // 3. Unset the iso-2022-jp output flag, set iso-2022-jp
	        // decoder state to iso-2022-jp decoder output state, and
	        // return error.
	        iso2022jp_output_flag = false;
	        iso2022jp_decoder_state = iso2022jp_decoder_output_state;
	        return decoderError(fatal);

	      case states.Escape:
	        // Escape

	        // 1. Let lead be iso-2022-jp lead and set iso-2022-jp lead to
	        // 0x00.
	        var lead = iso2022jp_lead;
	        iso2022jp_lead = 0x00;

	        // 2. Let state be null.
	        var state = null;

	        // 3. If lead is 0x28 and byte is 0x42, set state to ASCII.
	        if (lead === 0x28 && bite === 0x42)
	          state = states.ASCII;

	        // 4. If lead is 0x28 and byte is 0x4A, set state to Roman.
	        if (lead === 0x28 && bite === 0x4A)
	          state = states.Roman;

	        // 5. If lead is 0x28 and byte is 0x49, set state to Katakana.
	        if (lead === 0x28 && bite === 0x49)
	          state = states.Katakana;

	        // 6. If lead is 0x24 and byte is either 0x40 or 0x42, set
	        // state to lead byte.
	        if (lead === 0x24 && (bite === 0x40 || bite === 0x42))
	          state = states.LeadByte;

	        // 7. If state is non-null, run these substeps:
	        if (state !== null) {
	          // 1. Set iso-2022-jp decoder state and iso-2022-jp decoder
	          // output state to states.
	          iso2022jp_decoder_state = iso2022jp_decoder_state = state;

	          // 2. Let output flag be the iso-2022-jp output flag.
	          var output_flag = iso2022jp_output_flag;

	          // 3. Set the iso-2022-jp output flag.
	          iso2022jp_output_flag = true;

	          // 4. Return continue, if output flag is unset, and error
	          // otherwise.
	          return !output_flag ? null : decoderError(fatal);
	        }

	        // 8. Prepend lead and byte to stream.
	        stream.prepend([lead, bite]);

	        // 9. Unset the iso-2022-jp output flag, set iso-2022-jp
	        // decoder state to iso-2022-jp decoder output state and
	        // return error.
	        iso2022jp_output_flag = false;
	        iso2022jp_decoder_state = iso2022jp_decoder_output_state;
	        return decoderError(fatal);
	      }
	    };
	  }

	  // 13.2.2 iso-2022-jp encoder
	  /**
	   * @constructor
	   * @implements {Encoder}
	   * @param {{fatal: boolean}} options
	   */
	  function ISO2022JPEncoder(options) {
	    options.fatal;
	    // iso-2022-jp's encoder has an associated iso-2022-jp encoder
	    // state which is one of ASCII, Roman, and jis0208 (initially
	    // ASCII).
	    /** @enum */
	    var states = {
	      ASCII: 0,
	      Roman: 1,
	      jis0208: 2
	    };
	    var /** @type {number} */ iso2022jp_state = states.ASCII;
	    /**
	     * @param {Stream} stream Input stream.
	     * @param {number} code_point Next code point read from the stream.
	     * @return {(number|!Array.<number>)} Byte(s) to emit.
	     */
	    this.handler = function(stream, code_point) {
	      // 1. If code point is end-of-stream and iso-2022-jp encoder
	      // state is not ASCII, prepend code point to stream, set
	      // iso-2022-jp encoder state to ASCII, and return three bytes
	      // 0x1B 0x28 0x42.
	      if (code_point === end_of_stream &&
	          iso2022jp_state !== states.ASCII) {
	        stream.prepend(code_point);
	        iso2022jp_state = states.ASCII;
	        return [0x1B, 0x28, 0x42];
	      }

	      // 2. If code point is end-of-stream and iso-2022-jp encoder
	      // state is ASCII, return finished.
	      if (code_point === end_of_stream && iso2022jp_state === states.ASCII)
	        return finished;

	      // 3. If ISO-2022-JP encoder state is ASCII or Roman, and code
	      // point is U+000E, U+000F, or U+001B, return error with U+FFFD.
	      if ((iso2022jp_state === states.ASCII ||
	           iso2022jp_state === states.Roman) &&
	          (code_point === 0x000E || code_point === 0x000F ||
	           code_point === 0x001B)) {
	        return encoderError(0xFFFD);
	      }

	      // 4. If iso-2022-jp encoder state is ASCII and code point is an
	      // ASCII code point, return a byte whose value is code point.
	      if (iso2022jp_state === states.ASCII &&
	          isASCIICodePoint(code_point))
	        return code_point;

	      // 5. If iso-2022-jp encoder state is Roman and code point is an
	      // ASCII code point, excluding U+005C and U+007E, or is U+00A5
	      // or U+203E, run these substeps:
	      if (iso2022jp_state === states.Roman &&
	          ((isASCIICodePoint(code_point) &&
	           code_point !== 0x005C && code_point !== 0x007E) ||
	          (code_point == 0x00A5 || code_point == 0x203E))) {

	        // 1. If code point is an ASCII code point, return a byte
	        // whose value is code point.
	        if (isASCIICodePoint(code_point))
	          return code_point;

	        // 2. If code point is U+00A5, return byte 0x5C.
	        if (code_point === 0x00A5)
	          return 0x5C;

	        // 3. If code point is U+203E, return byte 0x7E.
	        if (code_point === 0x203E)
	          return 0x7E;
	      }

	      // 6. If code point is an ASCII code point, and iso-2022-jp
	      // encoder state is not ASCII, prepend code point to stream, set
	      // iso-2022-jp encoder state to ASCII, and return three bytes
	      // 0x1B 0x28 0x42.
	      if (isASCIICodePoint(code_point) &&
	          iso2022jp_state !== states.ASCII) {
	        stream.prepend(code_point);
	        iso2022jp_state = states.ASCII;
	        return [0x1B, 0x28, 0x42];
	      }

	      // 7. If code point is either U+00A5 or U+203E, and iso-2022-jp
	      // encoder state is not Roman, prepend code point to stream, set
	      // iso-2022-jp encoder state to Roman, and return three bytes
	      // 0x1B 0x28 0x4A.
	      if ((code_point === 0x00A5 || code_point === 0x203E) &&
	          iso2022jp_state !== states.Roman) {
	        stream.prepend(code_point);
	        iso2022jp_state = states.Roman;
	        return [0x1B, 0x28, 0x4A];
	      }

	      // 8. If code point is U+2212, set it to U+FF0D.
	      if (code_point === 0x2212)
	        code_point = 0xFF0D;

	      // 9. Let pointer be the index pointer for code point in index
	      // jis0208.
	      var pointer = indexPointerFor(code_point, index('jis0208'));

	      // 10. If pointer is null, return error with code point.
	      if (pointer === null)
	        return encoderError(code_point);

	      // 11. If iso-2022-jp encoder state is not jis0208, prepend code
	      // point to stream, set iso-2022-jp encoder state to jis0208,
	      // and return three bytes 0x1B 0x24 0x42.
	      if (iso2022jp_state !== states.jis0208) {
	        stream.prepend(code_point);
	        iso2022jp_state = states.jis0208;
	        return [0x1B, 0x24, 0x42];
	      }

	      // 12. Let lead be floor(pointer / 94) + 0x21.
	      var lead = floor(pointer / 94) + 0x21;

	      // 13. Let trail be pointer % 94 + 0x21.
	      var trail = pointer % 94 + 0x21;

	      // 14. Return two bytes whose values are lead and trail.
	      return [lead, trail];
	    };
	  }

	  /** @param {{fatal: boolean}} options */
	  encoders['ISO-2022-JP'] = function(options) {
	    return new ISO2022JPEncoder(options);
	  };
	  /** @param {{fatal: boolean}} options */
	  decoders['ISO-2022-JP'] = function(options) {
	    return new ISO2022JPDecoder(options);
	  };

	  // 13.3 Shift_JIS

	  // 13.3.1 Shift_JIS decoder
	  /**
	   * @constructor
	   * @implements {Decoder}
	   * @param {{fatal: boolean}} options
	   */
	  function ShiftJISDecoder(options) {
	    var fatal = options.fatal;
	    // Shift_JIS's decoder has an associated Shift_JIS lead (initially
	    // 0x00).
	    var /** @type {number} */ Shift_JIS_lead = 0x00;
	    /**
	     * @param {Stream} stream The stream of bytes being decoded.
	     * @param {number} bite The next byte read from the stream.
	     * @return {?(number|!Array.<number>)} The next code point(s)
	     *     decoded, or null if not enough data exists in the input
	     *     stream to decode a complete code point.
	     */
	    this.handler = function(stream, bite) {
	      // 1. If byte is end-of-stream and Shift_JIS lead is not 0x00,
	      // set Shift_JIS lead to 0x00 and return error.
	      if (bite === end_of_stream && Shift_JIS_lead !== 0x00) {
	        Shift_JIS_lead = 0x00;
	        return decoderError(fatal);
	      }

	      // 2. If byte is end-of-stream and Shift_JIS lead is 0x00,
	      // return finished.
	      if (bite === end_of_stream && Shift_JIS_lead === 0x00)
	        return finished;

	      // 3. If Shift_JIS lead is not 0x00, let lead be Shift_JIS lead,
	      // let pointer be null, set Shift_JIS lead to 0x00, and then run
	      // these substeps:
	      if (Shift_JIS_lead !== 0x00) {
	        var lead = Shift_JIS_lead;
	        var pointer = null;
	        Shift_JIS_lead = 0x00;

	        // 1. Let offset be 0x40, if byte is less than 0x7F, and 0x41
	        // otherwise.
	        var offset = (bite < 0x7F) ? 0x40 : 0x41;

	        // 2. Let lead offset be 0x81, if lead is less than 0xA0, and
	        // 0xC1 otherwise.
	        var lead_offset = (lead < 0xA0) ? 0x81 : 0xC1;

	        // 3. If byte is in the range 0x40 to 0x7E, inclusive, or 0x80
	        // to 0xFC, inclusive, set pointer to (lead − lead offset) ×
	        // 188 + byte − offset.
	        if (inRange(bite, 0x40, 0x7E) || inRange(bite, 0x80, 0xFC))
	          pointer = (lead - lead_offset) * 188 + bite - offset;

	        // 4. If pointer is in the range 8836 to 10715, inclusive,
	        // return a code point whose value is 0xE000 − 8836 + pointer.
	        if (inRange(pointer, 8836, 10715))
	          return 0xE000 - 8836 + pointer;

	        // 5. Let code point be null, if pointer is null, and the
	        // index code point for pointer in index jis0208 otherwise.
	        var code_point = (pointer === null) ? null :
	              indexCodePointFor(pointer, index('jis0208'));

	        // 6. If code point is null and byte is an ASCII byte, prepend
	        // byte to stream.
	        if (code_point === null && isASCIIByte(bite))
	          stream.prepend(bite);

	        // 7. If code point is null, return error.
	        if (code_point === null)
	          return decoderError(fatal);

	        // 8. Return a code point whose value is code point.
	        return code_point;
	      }

	      // 4. If byte is an ASCII byte or 0x80, return a code point
	      // whose value is byte.
	      if (isASCIIByte(bite) || bite === 0x80)
	        return bite;

	      // 5. If byte is in the range 0xA1 to 0xDF, inclusive, return a
	      // code point whose value is 0xFF61 − 0xA1 + byte.
	      if (inRange(bite, 0xA1, 0xDF))
	        return 0xFF61 - 0xA1 + bite;

	      // 6. If byte is in the range 0x81 to 0x9F, inclusive, or 0xE0
	      // to 0xFC, inclusive, set Shift_JIS lead to byte and return
	      // continue.
	      if (inRange(bite, 0x81, 0x9F) || inRange(bite, 0xE0, 0xFC)) {
	        Shift_JIS_lead = bite;
	        return null;
	      }

	      // 7. Return error.
	      return decoderError(fatal);
	    };
	  }

	  // 13.3.2 Shift_JIS encoder
	  /**
	   * @constructor
	   * @implements {Encoder}
	   * @param {{fatal: boolean}} options
	   */
	  function ShiftJISEncoder(options) {
	    options.fatal;
	    /**
	     * @param {Stream} stream Input stream.
	     * @param {number} code_point Next code point read from the stream.
	     * @return {(number|!Array.<number>)} Byte(s) to emit.
	     */
	    this.handler = function(stream, code_point) {
	      // 1. If code point is end-of-stream, return finished.
	      if (code_point === end_of_stream)
	        return finished;

	      // 2. If code point is an ASCII code point or U+0080, return a
	      // byte whose value is code point.
	      if (isASCIICodePoint(code_point) || code_point === 0x0080)
	        return code_point;

	      // 3. If code point is U+00A5, return byte 0x5C.
	      if (code_point === 0x00A5)
	        return 0x5C;

	      // 4. If code point is U+203E, return byte 0x7E.
	      if (code_point === 0x203E)
	        return 0x7E;

	      // 5. If code point is in the range U+FF61 to U+FF9F, inclusive,
	      // return a byte whose value is code point − 0xFF61 + 0xA1.
	      if (inRange(code_point, 0xFF61, 0xFF9F))
	        return code_point - 0xFF61 + 0xA1;

	      // 6. If code point is U+2212, set it to U+FF0D.
	      if (code_point === 0x2212)
	        code_point = 0xFF0D;

	      // 7. Let pointer be the index Shift_JIS pointer for code point.
	      var pointer = indexShiftJISPointerFor(code_point);

	      // 8. If pointer is null, return error with code point.
	      if (pointer === null)
	        return encoderError(code_point);

	      // 9. Let lead be floor(pointer / 188).
	      var lead = floor(pointer / 188);

	      // 10. Let lead offset be 0x81, if lead is less than 0x1F, and
	      // 0xC1 otherwise.
	      var lead_offset = (lead < 0x1F) ? 0x81 : 0xC1;

	      // 11. Let trail be pointer % 188.
	      var trail = pointer % 188;

	      // 12. Let offset be 0x40, if trail is less than 0x3F, and 0x41
	      // otherwise.
	      var offset = (trail < 0x3F) ? 0x40 : 0x41;

	      // 13. Return two bytes whose values are lead + lead offset and
	      // trail + offset.
	      return [lead + lead_offset, trail + offset];
	    };
	  }

	  /** @param {{fatal: boolean}} options */
	  encoders['Shift_JIS'] = function(options) {
	    return new ShiftJISEncoder(options);
	  };
	  /** @param {{fatal: boolean}} options */
	  decoders['Shift_JIS'] = function(options) {
	    return new ShiftJISDecoder(options);
	  };

	  //
	  // 14. Legacy multi-byte Korean encodings
	  //

	  // 14.1 euc-kr

	  // 14.1.1 euc-kr decoder
	  /**
	   * @constructor
	   * @implements {Decoder}
	   * @param {{fatal: boolean}} options
	   */
	  function EUCKRDecoder(options) {
	    var fatal = options.fatal;

	    // euc-kr's decoder has an associated euc-kr lead (initially 0x00).
	    var /** @type {number} */ euckr_lead = 0x00;
	    /**
	     * @param {Stream} stream The stream of bytes being decoded.
	     * @param {number} bite The next byte read from the stream.
	     * @return {?(number|!Array.<number>)} The next code point(s)
	     *     decoded, or null if not enough data exists in the input
	     *     stream to decode a complete code point.
	     */
	    this.handler = function(stream, bite) {
	      // 1. If byte is end-of-stream and euc-kr lead is not 0x00, set
	      // euc-kr lead to 0x00 and return error.
	      if (bite === end_of_stream && euckr_lead !== 0) {
	        euckr_lead = 0x00;
	        return decoderError(fatal);
	      }

	      // 2. If byte is end-of-stream and euc-kr lead is 0x00, return
	      // finished.
	      if (bite === end_of_stream && euckr_lead === 0)
	        return finished;

	      // 3. If euc-kr lead is not 0x00, let lead be euc-kr lead, let
	      // pointer be null, set euc-kr lead to 0x00, and then run these
	      // substeps:
	      if (euckr_lead !== 0x00) {
	        var lead = euckr_lead;
	        var pointer = null;
	        euckr_lead = 0x00;

	        // 1. If byte is in the range 0x41 to 0xFE, inclusive, set
	        // pointer to (lead − 0x81) × 190 + (byte − 0x41).
	        if (inRange(bite, 0x41, 0xFE))
	          pointer = (lead - 0x81) * 190 + (bite - 0x41);

	        // 2. Let code point be null, if pointer is null, and the
	        // index code point for pointer in index euc-kr otherwise.
	        var code_point = (pointer === null)
	              ? null : indexCodePointFor(pointer, index('euc-kr'));

	        // 3. If code point is null and byte is an ASCII byte, prepend
	        // byte to stream.
	        if (pointer === null && isASCIIByte(bite))
	          stream.prepend(bite);

	        // 4. If code point is null, return error.
	        if (code_point === null)
	          return decoderError(fatal);

	        // 5. Return a code point whose value is code point.
	        return code_point;
	      }

	      // 4. If byte is an ASCII byte, return a code point whose value
	      // is byte.
	      if (isASCIIByte(bite))
	        return bite;

	      // 5. If byte is in the range 0x81 to 0xFE, inclusive, set
	      // euc-kr lead to byte and return continue.
	      if (inRange(bite, 0x81, 0xFE)) {
	        euckr_lead = bite;
	        return null;
	      }

	      // 6. Return error.
	      return decoderError(fatal);
	    };
	  }

	  // 14.1.2 euc-kr encoder
	  /**
	   * @constructor
	   * @implements {Encoder}
	   * @param {{fatal: boolean}} options
	   */
	  function EUCKREncoder(options) {
	    options.fatal;
	    /**
	     * @param {Stream} stream Input stream.
	     * @param {number} code_point Next code point read from the stream.
	     * @return {(number|!Array.<number>)} Byte(s) to emit.
	     */
	    this.handler = function(stream, code_point) {
	      // 1. If code point is end-of-stream, return finished.
	      if (code_point === end_of_stream)
	        return finished;

	      // 2. If code point is an ASCII code point, return a byte whose
	      // value is code point.
	      if (isASCIICodePoint(code_point))
	        return code_point;

	      // 3. Let pointer be the index pointer for code point in index
	      // euc-kr.
	      var pointer = indexPointerFor(code_point, index('euc-kr'));

	      // 4. If pointer is null, return error with code point.
	      if (pointer === null)
	        return encoderError(code_point);

	      // 5. Let lead be floor(pointer / 190) + 0x81.
	      var lead = floor(pointer / 190) + 0x81;

	      // 6. Let trail be pointer % 190 + 0x41.
	      var trail = (pointer % 190) + 0x41;

	      // 7. Return two bytes whose values are lead and trail.
	      return [lead, trail];
	    };
	  }

	  /** @param {{fatal: boolean}} options */
	  encoders['EUC-KR'] = function(options) {
	    return new EUCKREncoder(options);
	  };
	  /** @param {{fatal: boolean}} options */
	  decoders['EUC-KR'] = function(options) {
	    return new EUCKRDecoder(options);
	  };


	  //
	  // 15. Legacy miscellaneous encodings
	  //

	  // 15.1 replacement

	  // Not needed - API throws RangeError

	  // 15.2 Common infrastructure for utf-16be and utf-16le

	  /**
	   * @param {number} code_unit
	   * @param {boolean} utf16be
	   * @return {!Array.<number>} bytes
	   */
	  function convertCodeUnitToBytes(code_unit, utf16be) {
	    // 1. Let byte1 be code unit >> 8.
	    var byte1 = code_unit >> 8;

	    // 2. Let byte2 be code unit & 0x00FF.
	    var byte2 = code_unit & 0x00FF;

	    // 3. Then return the bytes in order:
	        // utf-16be flag is set: byte1, then byte2.
	    if (utf16be)
	      return [byte1, byte2];
	    // utf-16be flag is unset: byte2, then byte1.
	    return [byte2, byte1];
	  }

	  // 15.2.1 shared utf-16 decoder
	  /**
	   * @constructor
	   * @implements {Decoder}
	   * @param {boolean} utf16_be True if big-endian, false if little-endian.
	   * @param {{fatal: boolean}} options
	   */
	  function UTF16Decoder(utf16_be, options) {
	    var fatal = options.fatal;
	    var /** @type {?number} */ utf16_lead_byte = null,
	        /** @type {?number} */ utf16_lead_surrogate = null;
	    /**
	     * @param {Stream} stream The stream of bytes being decoded.
	     * @param {number} bite The next byte read from the stream.
	     * @return {?(number|!Array.<number>)} The next code point(s)
	     *     decoded, or null if not enough data exists in the input
	     *     stream to decode a complete code point.
	     */
	    this.handler = function(stream, bite) {
	      // 1. If byte is end-of-stream and either utf-16 lead byte or
	      // utf-16 lead surrogate is not null, set utf-16 lead byte and
	      // utf-16 lead surrogate to null, and return error.
	      if (bite === end_of_stream && (utf16_lead_byte !== null ||
	                                utf16_lead_surrogate !== null)) {
	        return decoderError(fatal);
	      }

	      // 2. If byte is end-of-stream and utf-16 lead byte and utf-16
	      // lead surrogate are null, return finished.
	      if (bite === end_of_stream && utf16_lead_byte === null &&
	          utf16_lead_surrogate === null) {
	        return finished;
	      }

	      // 3. If utf-16 lead byte is null, set utf-16 lead byte to byte
	      // and return continue.
	      if (utf16_lead_byte === null) {
	        utf16_lead_byte = bite;
	        return null;
	      }

	      // 4. Let code unit be the result of:
	      var code_unit;
	      if (utf16_be) {
	        // utf-16be decoder flag is set
	        //   (utf-16 lead byte << 8) + byte.
	        code_unit = (utf16_lead_byte << 8) + bite;
	      } else {
	        // utf-16be decoder flag is unset
	        //   (byte << 8) + utf-16 lead byte.
	        code_unit = (bite << 8) + utf16_lead_byte;
	      }
	      // Then set utf-16 lead byte to null.
	      utf16_lead_byte = null;

	      // 5. If utf-16 lead surrogate is not null, let lead surrogate
	      // be utf-16 lead surrogate, set utf-16 lead surrogate to null,
	      // and then run these substeps:
	      if (utf16_lead_surrogate !== null) {
	        var lead_surrogate = utf16_lead_surrogate;
	        utf16_lead_surrogate = null;

	        // 1. If code unit is in the range U+DC00 to U+DFFF,
	        // inclusive, return a code point whose value is 0x10000 +
	        // ((lead surrogate − 0xD800) << 10) + (code unit − 0xDC00).
	        if (inRange(code_unit, 0xDC00, 0xDFFF)) {
	          return 0x10000 + (lead_surrogate - 0xD800) * 0x400 +
	              (code_unit - 0xDC00);
	        }

	        // 2. Prepend the sequence resulting of converting code unit
	        // to bytes using utf-16be decoder flag to stream and return
	        // error.
	        stream.prepend(convertCodeUnitToBytes(code_unit, utf16_be));
	        return decoderError(fatal);
	      }

	      // 6. If code unit is in the range U+D800 to U+DBFF, inclusive,
	      // set utf-16 lead surrogate to code unit and return continue.
	      if (inRange(code_unit, 0xD800, 0xDBFF)) {
	        utf16_lead_surrogate = code_unit;
	        return null;
	      }

	      // 7. If code unit is in the range U+DC00 to U+DFFF, inclusive,
	      // return error.
	      if (inRange(code_unit, 0xDC00, 0xDFFF))
	        return decoderError(fatal);

	      // 8. Return code point code unit.
	      return code_unit;
	    };
	  }

	  // 15.2.2 shared utf-16 encoder
	  /**
	   * @constructor
	   * @implements {Encoder}
	   * @param {boolean} utf16_be True if big-endian, false if little-endian.
	   * @param {{fatal: boolean}} options
	   */
	  function UTF16Encoder(utf16_be, options) {
	    options.fatal;
	    /**
	     * @param {Stream} stream Input stream.
	     * @param {number} code_point Next code point read from the stream.
	     * @return {(number|!Array.<number>)} Byte(s) to emit.
	     */
	    this.handler = function(stream, code_point) {
	      // 1. If code point is end-of-stream, return finished.
	      if (code_point === end_of_stream)
	        return finished;

	      // 2. If code point is in the range U+0000 to U+FFFF, inclusive,
	      // return the sequence resulting of converting code point to
	      // bytes using utf-16be encoder flag.
	      if (inRange(code_point, 0x0000, 0xFFFF))
	        return convertCodeUnitToBytes(code_point, utf16_be);

	      // 3. Let lead be ((code point − 0x10000) >> 10) + 0xD800,
	      // converted to bytes using utf-16be encoder flag.
	      var lead = convertCodeUnitToBytes(
	        ((code_point - 0x10000) >> 10) + 0xD800, utf16_be);

	      // 4. Let trail be ((code point − 0x10000) & 0x3FF) + 0xDC00,
	      // converted to bytes using utf-16be encoder flag.
	      var trail = convertCodeUnitToBytes(
	        ((code_point - 0x10000) & 0x3FF) + 0xDC00, utf16_be);

	      // 5. Return a byte sequence of lead followed by trail.
	      return lead.concat(trail);
	    };
	  }

	  // 15.3 utf-16be
	  // 15.3.1 utf-16be decoder
	  /** @param {{fatal: boolean}} options */
	  encoders['UTF-16BE'] = function(options) {
	    return new UTF16Encoder(true, options);
	  };
	  // 15.3.2 utf-16be encoder
	  /** @param {{fatal: boolean}} options */
	  decoders['UTF-16BE'] = function(options) {
	    return new UTF16Decoder(true, options);
	  };

	  // 15.4 utf-16le
	  // 15.4.1 utf-16le decoder
	  /** @param {{fatal: boolean}} options */
	  encoders['UTF-16LE'] = function(options) {
	    return new UTF16Encoder(false, options);
	  };
	  // 15.4.2 utf-16le encoder
	  /** @param {{fatal: boolean}} options */
	  decoders['UTF-16LE'] = function(options) {
	    return new UTF16Decoder(false, options);
	  };

	  // 15.5 x-user-defined

	  // 15.5.1 x-user-defined decoder
	  /**
	   * @constructor
	   * @implements {Decoder}
	   * @param {{fatal: boolean}} options
	   */
	  function XUserDefinedDecoder(options) {
	    options.fatal;
	    /**
	     * @param {Stream} stream The stream of bytes being decoded.
	     * @param {number} bite The next byte read from the stream.
	     * @return {?(number|!Array.<number>)} The next code point(s)
	     *     decoded, or null if not enough data exists in the input
	     *     stream to decode a complete code point.
	     */
	    this.handler = function(stream, bite) {
	      // 1. If byte is end-of-stream, return finished.
	      if (bite === end_of_stream)
	        return finished;

	      // 2. If byte is an ASCII byte, return a code point whose value
	      // is byte.
	      if (isASCIIByte(bite))
	        return bite;

	      // 3. Return a code point whose value is 0xF780 + byte − 0x80.
	      return 0xF780 + bite - 0x80;
	    };
	  }

	  // 15.5.2 x-user-defined encoder
	  /**
	   * @constructor
	   * @implements {Encoder}
	   * @param {{fatal: boolean}} options
	   */
	  function XUserDefinedEncoder(options) {
	    options.fatal;
	    /**
	     * @param {Stream} stream Input stream.
	     * @param {number} code_point Next code point read from the stream.
	     * @return {(number|!Array.<number>)} Byte(s) to emit.
	     */
	    this.handler = function(stream, code_point) {
	      // 1.If code point is end-of-stream, return finished.
	      if (code_point === end_of_stream)
	        return finished;

	      // 2. If code point is an ASCII code point, return a byte whose
	      // value is code point.
	      if (isASCIICodePoint(code_point))
	        return code_point;

	      // 3. If code point is in the range U+F780 to U+F7FF, inclusive,
	      // return a byte whose value is code point − 0xF780 + 0x80.
	      if (inRange(code_point, 0xF780, 0xF7FF))
	        return code_point - 0xF780 + 0x80;

	      // 4. Return error with code point.
	      return encoderError(code_point);
	    };
	  }

	  /** @param {{fatal: boolean}} options */
	  encoders['x-user-defined'] = function(options) {
	    return new XUserDefinedEncoder(options);
	  };
	  /** @param {{fatal: boolean}} options */
	  decoders['x-user-defined'] = function(options) {
	    return new XUserDefinedDecoder(options);
	  };

	  if (!global['TextEncoder'])
	    global['TextEncoder'] = TextEncoder;
	  if (!global['TextDecoder'])
	    global['TextDecoder'] = TextDecoder;

	  if (module.exports) {
	    module.exports = {
	      TextEncoder: global['TextEncoder'],
	      TextDecoder: global['TextDecoder'],
	      EncodingIndexes: global["encoding-indexes"]
	    };
	  }

	// For strict environments where `this` inside the global scope
	// is `undefined`, take a pure object instead
	}(commonjsGlobal || {}));
	});

	// This is free and unencumbered software released into the public domain.
	// See LICENSE.md for more information.



	var textEncoding = {
	  TextEncoder: encoding.TextEncoder,
	  TextDecoder: encoding.TextDecoder,
	};

	// Copyright (C) 2016-2017 SignalFx, Inc. All rights reserved.



	// unfortunately, bigNumber will throw an error on constructors with more than
	// 15 significant digits, which is certainly possible in JS.
	bignumber.config({ ERRORS: false });



	var textDecoder = new textEncoding.TextDecoder('utf-8');

	var hiMult = Math.pow(2, 32);
	var binaryHeaderLength = 20;
	var binaryHeaderFormats = {
	  1: [
	    //.0                   1                   2                   3
	    //.0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
	    //+---------------+---------------+-------------------------------+
	    //| Version       | Message type  | Flags         | (Reserved)    |
	    //+---------------+---------------+-------------------------------+
	    //|        Channel name (fixed 16 bytes, right-NUL-padded)        |
	    //+- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -+
	    //|                   Channel name (continued)                    |
	    //+- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -+
	    //|                   Channel name (continued)                    |
	    //+- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -+
	    //|                   Channel name (continued)                    |
	    //+---------------------------------------------------------------+
	    {
	      label: 'version',
	      type: 'Uint',
	      size: 1
	    },
	    {
	      label: 'type',
	      type: 'Uint',
	      size: 1
	    },
	    {
	      label: 'flags',
	      type: 'Uint',
	      size: 1
	    },
	    {
	      label: null,
	      size: 1
	    },
	    {
	      label: 'channel',
	      type: 'string',
	      size: 16
	    }
	  ],


	  2: [
	    //.0                   1                   2                   3
	    //.0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
	    //+---------------+---------------+-------------------------------+
	    //|            Version            | Message type  | Flags         |
	    //+---------------+---------------+-------------------------------+
	    //|        Channel name (fixed 16 bytes, right-NUL-padded)        |
	    //+- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -+
	    //|                   Channel name (continued)                    |
	    //+- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -+
	    //|                   Channel name (continued)                    |
	    //+- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -+
	    //|                   Channel name (continued)                    |
	    //+---------------------------------------------------------------+
	    {
	      label: 'version',
	      type: 'Uint',
	      size: 2
	    },
	    {
	      label: 'type',
	      type: 'Uint',
	      size: 1
	    },
	    {
	      label: 'flags',
	      type: 'Uint',
	      size: 1
	    },
	    {
	      label: 'channel',
	      type: 'string',
	      size: 16
	    }
	  ]
	};

	/**
	 * Stream message types.
	 */
	var binaryMessageTypes = {
	  1: 'control-message',
	  2: 'message',
	  3: 'event',
	  4: 'metadata',
	  5: 'data',
	  6: 'error',
	  7: 'authenticated',
	  8: 'computation-started',
	  9: 'estimation',
	  10: 'expired-tsid',
	  11: 'log-data',
	  12: 'livetail-started'
	};

	var binaryDataMessageFormats = {
	  1: [
	    //.0                   1                   2                   3
	    //.0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
	    //+---------------------------------------------------------------+
	    //|           Data batch logical millisecond timestamp            |
	    //+- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -+
	    //|                      Timetamp (continued)                     |
	    //+---------------------------------------------------------------+
	    //|                     Payload element count                     |
	    //+---------------------------------------------------------------+
	    //| Payload data, series of 17-byte 3-uples: 1-byte value type,   |
	    //+- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -+
	    //| 8-byte timeseries ID (long) and 8-byte datapoint value,       |
	    //+- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -+
	    //| either a long (0x01) or a double (0x02), based on value type. |
	    //+- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -+
	    //| Payload data continued ...                                    |
	    //+---------------------------------------------------------------+
	    {
	      label: 'timestampMs1',
	      type: 'Uint',
	      size: 4
	    },
	    {
	      label: 'timestampMs2',
	      type: 'Uint',
	      size: 4
	    },
	    {
	      label: 'count',
	      type: 'Uint',
	      size: 4
	    }
	  ],

	  512: [
	    //.0                   1                   2                   3
	    //.0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
	    //+---------------------------------------------------------------+
	    //|           Data batch logical millisecond timestamp            |
	    //+- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -+
	    //|                      Timetamp (continued)                     |
	    //+---------------------------------------------------------------+
	    //|           Effective maxDelay (in milliseconds) used           |
	    //+- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -+
	    //|             for the processing of this data batch             |
	    //+---------------------------------------------------------------+
	    //|                     Payload element count                     |
	    //+---------------------------------------------------------------+
	    //| Payload data, series of 17-byte 3-uples: 1-byte value type,   |
	    //+- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -+
	    //| 8-byte timeseries ID (long) and 8-byte datapoint value,       |
	    //+- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -+
	    //| either a long (0x01) or a double (0x02), based on value type. |
	    //+- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -+
	    //| Payload data continued ...                                    |
	    //+---------------------------------------------------------------+
	    {
	      label: 'timestampMs1',
	      type: 'Uint',
	      size: 4
	    },
	    {
	      label: 'timestampMs2',
	      type: 'Uint',
	      size: 4
	    },
	    {
	      label: 'maxDelayMs1',
	      type: 'Uint',
	      size: 4
	    },
	    {
	      label: 'maxDelayMs2',
	      type: 'Uint',
	      size: 4
	    },
	    {
	      label: 'count',
	      type: 'Uint',
	      size: 4
	    }
	  ]
	};

	/**
	 * Convert the given Uint8 array into a SignalFx Snowflake ID.
	 */
	function getSnowflakeIdFromUint8Array(Uint8Arr) {
	  // packaged lib uses base64 not base64URL, so swap the different chars
	  return base64Js.fromByteArray(Uint8Arr).substring(0, 11).replace(/\+/g, '-').replace(/\//g, '_');
	}

	/**
	 * Extract fields from the given DataView following a specific a binary format
	 * specification into the given target object.
	 */
	function extractBinaryFields(target, spec, data) {
	  var offset = 0;

	  for (var x = 0; x < spec.length; x++) {
	    var item = spec[x];
	    if (item.label) {
	      if (item.type === 'string') {
	        var bytes = new DataView(data.buffer, offset, item.size);
	        var str = textDecoder.decode(bytes);
	        target[item.label] = str.replace(/\0/g, '');
	      } else {
	        target[item.label] = data['get' + item.type + (item.size * 8)](offset);
	      }
	    }
	    offset += item.size;
	  }

	  return offset;
	}

	/**
	 * Parse a binary WebSocket message.
	 *
	 * Binary messages have a 20-byte header (binaryHeaderLength), followed by a
	 * body. Depending on the flags set in the header, the body of the message may
	 * be compressed, so it needs to be decompressed before being parsed.
	 *
	 * Finally, depending on the message type and the 'json' flag, the body of the
	 * message may be a JSON string, or a binary format. As of now, only data batch
	 * messages encode their body in binary, as per the binaryDataMessageFormats
	 * defined above.
	 */
	function parseBinaryMessage(data, knownComputations) {
	  var msg = {};

	  var header = new DataView(data, 0, binaryHeaderLength);
	  var version = header.getUint8(0);
	  extractBinaryFields(msg, binaryHeaderFormats[version], header);

	  var type = binaryMessageTypes[msg.type];
	  if (type === undefined) {
	    console.warn('Unknown binary message type ' + msg.type);
	    return null;
	  }
	  msg.type = type;

	  var bigNumberRequested = false;
	  if (typeof knownComputations[msg.channel] !== 'undefined' && knownComputations[msg.channel].params) {
	    bigNumberRequested = knownComputations[msg.channel].params.bigNumber;
	  }

	  var compressed = msg.flags & (1 << 0);
	  var json = msg.flags & (1 << 1);

	  if (compressed) {
	    // Decompress the message body if necessary.
	    data = new DataView(pako_1.ungzip(new Uint8Array(data, binaryHeaderLength)).buffer);
	  } else {
	    data = new DataView(data, binaryHeaderLength);
	  }

	  if (json) {
	    var decoded = textDecoder.decode(data);
	    var body = JSON.parse(decoded);
	    Object.keys(body).forEach(function (k) {
	      msg[k] = body[k];
	    });
	    return msg;
	  }

	  switch (msg['type']) {
	    case 'data':
	      return parseBinaryDataMessage(msg, data, bigNumberRequested);
	    default:
	      console.warn('Unsupported binary "' + msg['type'] + '" message');
	      return null;
	  }
	}

	/**
	 * Parse a binary data message body.
	 *
	 * Parse the binary-encoded information and datapoints of a data batch message.
	 */
	function parseBinaryDataMessage(msg, data, bigNumberRequested) {
	  var offset = extractBinaryFields(msg, binaryDataMessageFormats[msg['version']], data);

	  msg.logicalTimestampMs = (msg.timestampMs1 * hiMult) + msg.timestampMs2;
	  delete msg.timestampMs1;
	  delete msg.timestampMs2;

	  if (typeof msg.maxDelayMs1 !== 'undefined' && typeof msg.maxDelayMs2 !== 'undefined') {
	    msg.maxDelayMs = (msg.maxDelayMs1 * hiMult) + msg.maxDelayMs2;
	    delete msg.maxDelayMs1;
	    delete msg.maxDelayMs2;
	  }

	  var values = [];
	  msg.data = values;

	  for (var dataPointCount = 0; dataPointCount < msg.count; dataPointCount++) {
	    var type = data.getUint8(offset);
	    offset++;

	    var tsidBytes = [];
	    for (var tsidByteIndex = 0; tsidByteIndex < 8; tsidByteIndex++) {
	      tsidBytes.push(data.getUint8(offset));
	      offset++;
	    }
	    var tsId = getSnowflakeIdFromUint8Array(tsidBytes);

	    var val = null;
	    if (type === 0) ; else if (type === 1) {
	      // LONG_TYPE

	      // get MSB for twos complement to determine sign
	      var isNegative = data.getUint32(offset) >>> 31 > 0;
	      if (isNegative) {
	        // twos complement manual handling, because we cannot do Int64.
	        // must do >>> 0 to prevent bit flips from turning into signed integers.
	        val = (new bignumber(hiMult)
	               .times(~data.getUint32(offset) >>> 0)
	               .plus(~data.getUint32(offset + 4) >>> 0)
	               .plus(1)
	               .times(-1));
	      } else {
	        val = (new bignumber(data.getUint32(offset))
	               .times(hiMult)
	               .plus(data.getUint32(offset + 4)));
	      }

	      if (!bigNumberRequested) {
	        val = val.toNumber();
	      }
	    } else if (type === 2) {
	      // DOUBLE_TYPE
	      val = data.getFloat64(offset);
	      if (bigNumberRequested) {
	        val = new bignumber(val);
	      }
	    } else if (type === 3) {
	      // INT_TYPE
	      val = data.getUint32(offset + 4);
	      if (bigNumberRequested) {
	        val = new bignumber(val);
	      }
	    }

	    offset += 8;
	    values.push({tsId: tsId, value: val});
	  }

	  delete msg.count;
	  return msg;
	}


	var websocket_message_parser = {
	  getSnowflakeIdFromUint8Array: getSnowflakeIdFromUint8Array,

	  /**
	   * Parse the given received WebSocket message into its canonical Javascript representation.
	   */
	  parseWebSocketMessage: function (msg, knownComputations) {
	    if (msg.data && msg.data.byteLength) {
	      // The presence of byteLength indicates data is an ArrayBuffer from a WebSocket data frame.
	      return parseBinaryMessage(msg.data, knownComputations);
	    } else if (msg.type) {
	      // Otherwise it's JSON in a WebSocket text frame.
	      return JSON.parse(msg.data);
	    } else {
	      console.warn('Unrecognized websocket message.');
	      return null;
	    }
	  }
	};

	// Copyright (C) 2016 SignalFx, Inc. All rights reserved.

	// a routed message handler deals with all messages within a particular channel scope

	// it is responsible for massaging messages and flushing batches of data messages.

	function getRoutedMessageHandler(params, onMessage, onError, isRetryPatchMode) {
	  var expectedBatchMessageCount = 0;
	  var numBatchesDetermined = false;
	  var messageBatchBuffer = [];
	  var lastSeenDataTime = 0;
	  var lastSeenDataBatchTime = 0;

	  function composeDataBatches(dataArray) {
	    if (dataArray.length === 0) {
	      if (messageBatchBuffer.length > 0) {
	        console.error('Composed an empty data batch despite having data in the buffer!');
	      }
	      return null;
	    }

	    var errorOccurred = false;
	    var basisData = dataArray[0];
	    var expectedTimeStamp = basisData.logicalTimestampMs;
	    lastSeenDataBatchTime = expectedTimeStamp;
	    dataArray.slice(1).forEach(function (batch) {
	      if (batch.logicalTimestampMs !== expectedTimeStamp) {
	        errorOccurred = true;
	      } else {
	        basisData.data = basisData.data.concat(batch.data);
	      }
	    });

	    if (errorOccurred) {
	      console.error('Bad timestamp pairs when flushing data batches!  Inconsistent data!');
	      return null;
	    }
	    return basisData;
	  }

	  function flushBuffer() {
	    if (numBatchesDetermined && messageBatchBuffer.length === expectedBatchMessageCount && messageBatchBuffer.length > 0) {
	      onMessage(composeDataBatches(messageBatchBuffer));
	      messageBatchBuffer = [];
	    }
	  }

	  return {
	    getLatestBatchTimeStamp: function () {
	      return lastSeenDataBatchTime;
	    },
	    onMessage: function messageReceived(msg) {
	      if (!msg.type && msg.hasOwnProperty('error')) {
	        onMessage(msg);
	        return;
	      }
	      switch (msg.type) {
	        case 'data':
	          if (lastSeenDataTime && lastSeenDataTime !== msg.logicalTimestampMs) {
	            // if zero time series are encountered, then no metadata arrives, but data batches arrive with differing
	            // timestamp as the only evidence of a stream block
	            numBatchesDetermined = true;
	          }
	          lastSeenDataTime = msg.logicalTimestampMs;
	          messageBatchBuffer.push(msg);
	          if (!numBatchesDetermined) {
	            expectedBatchMessageCount++;
	          } else if (messageBatchBuffer.length === expectedBatchMessageCount) {
	            flushBuffer();
	          }
	          break;
	        case 'message':
	          if (msg.message && msg.message.messageCode === 'JOB_RUNNING_RESOLUTION') {
	            numBatchesDetermined = true;
	            flushBuffer();
	          }
	          onMessage(msg);
	          break;
	        case 'metadata':
	        case 'event':
	          onMessage(msg);
	          break;
	        case 'control-message':
	          if (isRetryPatchMode && !numBatchesDetermined) {
	            break;
	          }
	          onMessage(msg);
	          break;
	        case 'error':
	          if (onError) {
	            onError(msg);
	          }
	          break;
	        default:
	          console.log('Unrecognized message type.');
	          break;
	      }
	      flushBuffer();
	    }
	  };
	}

	var message_router = getRoutedMessageHandler;

	var constants$1 = {
	  BINARY_TYPES: ['nodebuffer', 'arraybuffer', 'fragments'],
	  GUID: '258EAFA5-E914-47DA-95CA-C5AB0DC85B11',
	  kStatusCode: Symbol('status-code'),
	  kWebSocket: Symbol('websocket'),
	  EMPTY_BUFFER: Buffer.alloc(0),
	  NOOP: () => {}
	};

	var bufferUtil = createCommonjsModule(function (module) {

	const { EMPTY_BUFFER } = constants$1;

	/**
	 * Merges an array of buffers into a new buffer.
	 *
	 * @param {Buffer[]} list The array of buffers to concat
	 * @param {Number} totalLength The total length of buffers in the list
	 * @return {Buffer} The resulting buffer
	 * @public
	 */
	function concat(list, totalLength) {
	  if (list.length === 0) return EMPTY_BUFFER;
	  if (list.length === 1) return list[0];

	  const target = Buffer.allocUnsafe(totalLength);
	  let offset = 0;

	  for (let i = 0; i < list.length; i++) {
	    const buf = list[i];
	    target.set(buf, offset);
	    offset += buf.length;
	  }

	  if (offset < totalLength) return target.slice(0, offset);

	  return target;
	}

	/**
	 * Masks a buffer using the given mask.
	 *
	 * @param {Buffer} source The buffer to mask
	 * @param {Buffer} mask The mask to use
	 * @param {Buffer} output The buffer where to store the result
	 * @param {Number} offset The offset at which to start writing
	 * @param {Number} length The number of bytes to mask.
	 * @public
	 */
	function _mask(source, mask, output, offset, length) {
	  for (let i = 0; i < length; i++) {
	    output[offset + i] = source[i] ^ mask[i & 3];
	  }
	}

	/**
	 * Unmasks a buffer using the given mask.
	 *
	 * @param {Buffer} buffer The buffer to unmask
	 * @param {Buffer} mask The mask to use
	 * @public
	 */
	function _unmask(buffer, mask) {
	  // Required until https://github.com/nodejs/node/issues/9006 is resolved.
	  const length = buffer.length;
	  for (let i = 0; i < length; i++) {
	    buffer[i] ^= mask[i & 3];
	  }
	}

	/**
	 * Converts a buffer to an `ArrayBuffer`.
	 *
	 * @param {Buffer} buf The buffer to convert
	 * @return {ArrayBuffer} Converted buffer
	 * @public
	 */
	function toArrayBuffer(buf) {
	  if (buf.byteLength === buf.buffer.byteLength) {
	    return buf.buffer;
	  }

	  return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
	}

	/**
	 * Converts `data` to a `Buffer`.
	 *
	 * @param {*} data The data to convert
	 * @return {Buffer} The buffer
	 * @throws {TypeError}
	 * @public
	 */
	function toBuffer(data) {
	  toBuffer.readOnly = true;

	  if (Buffer.isBuffer(data)) return data;

	  let buf;

	  if (data instanceof ArrayBuffer) {
	    buf = Buffer.from(data);
	  } else if (ArrayBuffer.isView(data)) {
	    buf = Buffer.from(data.buffer, data.byteOffset, data.byteLength);
	  } else {
	    buf = Buffer.from(data);
	    toBuffer.readOnly = false;
	  }

	  return buf;
	}

	try {
	  const bufferUtil = require$$1__default['default'];
	  const bu = bufferUtil.BufferUtil || bufferUtil;

	  module.exports = {
	    concat,
	    mask(source, mask, output, offset, length) {
	      if (length < 48) _mask(source, mask, output, offset, length);
	      else bu.mask(source, mask, output, offset, length);
	    },
	    toArrayBuffer,
	    toBuffer,
	    unmask(buffer, mask) {
	      if (buffer.length < 32) _unmask(buffer, mask);
	      else bu.unmask(buffer, mask);
	    }
	  };
	} catch (e) /* istanbul ignore next */ {
	  module.exports = {
	    concat,
	    mask: _mask,
	    toArrayBuffer,
	    toBuffer,
	    unmask: _unmask
	  };
	}
	});

	const kDone = Symbol('kDone');
	const kRun = Symbol('kRun');

	/**
	 * A very simple job queue with adjustable concurrency. Adapted from
	 * https://github.com/STRML/async-limiter
	 */
	class Limiter {
	  /**
	   * Creates a new `Limiter`.
	   *
	   * @param {Number} [concurrency=Infinity] The maximum number of jobs allowed
	   *     to run concurrently
	   */
	  constructor(concurrency) {
	    this[kDone] = () => {
	      this.pending--;
	      this[kRun]();
	    };
	    this.concurrency = concurrency || Infinity;
	    this.jobs = [];
	    this.pending = 0;
	  }

	  /**
	   * Adds a job to the queue.
	   *
	   * @param {Function} job The job to run
	   * @public
	   */
	  add(job) {
	    this.jobs.push(job);
	    this[kRun]();
	  }

	  /**
	   * Removes a job from the queue and runs it if possible.
	   *
	   * @private
	   */
	  [kRun]() {
	    if (this.pending === this.concurrency) return;

	    if (this.jobs.length) {
	      const job = this.jobs.shift();

	      this.pending++;
	      job(this[kDone]);
	    }
	  }
	}

	var limiter = Limiter;

	const { kStatusCode: kStatusCode$2, NOOP: NOOP$1 } = constants$1;

	const TRAILER = Buffer.from([0x00, 0x00, 0xff, 0xff]);
	const kPerMessageDeflate = Symbol('permessage-deflate');
	const kTotalLength = Symbol('total-length');
	const kCallback = Symbol('callback');
	const kBuffers = Symbol('buffers');
	const kError = Symbol('error');

	//
	// We limit zlib concurrency, which prevents severe memory fragmentation
	// as documented in https://github.com/nodejs/node/issues/8871#issuecomment-250915913
	// and https://github.com/websockets/ws/issues/1202
	//
	// Intentionally global; it's the global thread pool that's an issue.
	//
	let zlibLimiter;

	/**
	 * permessage-deflate implementation.
	 */
	class PerMessageDeflate {
	  /**
	   * Creates a PerMessageDeflate instance.
	   *
	   * @param {Object} [options] Configuration options
	   * @param {Boolean} [options.serverNoContextTakeover=false] Request/accept
	   *     disabling of server context takeover
	   * @param {Boolean} [options.clientNoContextTakeover=false] Advertise/
	   *     acknowledge disabling of client context takeover
	   * @param {(Boolean|Number)} [options.serverMaxWindowBits] Request/confirm the
	   *     use of a custom server window size
	   * @param {(Boolean|Number)} [options.clientMaxWindowBits] Advertise support
	   *     for, or request, a custom client window size
	   * @param {Object} [options.zlibDeflateOptions] Options to pass to zlib on
	   *     deflate
	   * @param {Object} [options.zlibInflateOptions] Options to pass to zlib on
	   *     inflate
	   * @param {Number} [options.threshold=1024] Size (in bytes) below which
	   *     messages should not be compressed
	   * @param {Number} [options.concurrencyLimit=10] The number of concurrent
	   *     calls to zlib
	   * @param {Boolean} [isServer=false] Create the instance in either server or
	   *     client mode
	   * @param {Number} [maxPayload=0] The maximum allowed message length
	   */
	  constructor(options, isServer, maxPayload) {
	    this._maxPayload = maxPayload | 0;
	    this._options = options || {};
	    this._threshold =
	      this._options.threshold !== undefined ? this._options.threshold : 1024;
	    this._isServer = !!isServer;
	    this._deflate = null;
	    this._inflate = null;

	    this.params = null;

	    if (!zlibLimiter) {
	      const concurrency =
	        this._options.concurrencyLimit !== undefined
	          ? this._options.concurrencyLimit
	          : 10;
	      zlibLimiter = new limiter(concurrency);
	    }
	  }

	  /**
	   * @type {String}
	   */
	  static get extensionName() {
	    return 'permessage-deflate';
	  }

	  /**
	   * Create an extension negotiation offer.
	   *
	   * @return {Object} Extension parameters
	   * @public
	   */
	  offer() {
	    const params = {};

	    if (this._options.serverNoContextTakeover) {
	      params.server_no_context_takeover = true;
	    }
	    if (this._options.clientNoContextTakeover) {
	      params.client_no_context_takeover = true;
	    }
	    if (this._options.serverMaxWindowBits) {
	      params.server_max_window_bits = this._options.serverMaxWindowBits;
	    }
	    if (this._options.clientMaxWindowBits) {
	      params.client_max_window_bits = this._options.clientMaxWindowBits;
	    } else if (this._options.clientMaxWindowBits == null) {
	      params.client_max_window_bits = true;
	    }

	    return params;
	  }

	  /**
	   * Accept an extension negotiation offer/response.
	   *
	   * @param {Array} configurations The extension negotiation offers/reponse
	   * @return {Object} Accepted configuration
	   * @public
	   */
	  accept(configurations) {
	    configurations = this.normalizeParams(configurations);

	    this.params = this._isServer
	      ? this.acceptAsServer(configurations)
	      : this.acceptAsClient(configurations);

	    return this.params;
	  }

	  /**
	   * Releases all resources used by the extension.
	   *
	   * @public
	   */
	  cleanup() {
	    if (this._inflate) {
	      this._inflate.close();
	      this._inflate = null;
	    }

	    if (this._deflate) {
	      const callback = this._deflate[kCallback];

	      this._deflate.close();
	      this._deflate = null;

	      if (callback) {
	        callback(
	          new Error(
	            'The deflate stream was closed while data was being processed'
	          )
	        );
	      }
	    }
	  }

	  /**
	   *  Accept an extension negotiation offer.
	   *
	   * @param {Array} offers The extension negotiation offers
	   * @return {Object} Accepted configuration
	   * @private
	   */
	  acceptAsServer(offers) {
	    const opts = this._options;
	    const accepted = offers.find((params) => {
	      if (
	        (opts.serverNoContextTakeover === false &&
	          params.server_no_context_takeover) ||
	        (params.server_max_window_bits &&
	          (opts.serverMaxWindowBits === false ||
	            (typeof opts.serverMaxWindowBits === 'number' &&
	              opts.serverMaxWindowBits > params.server_max_window_bits))) ||
	        (typeof opts.clientMaxWindowBits === 'number' &&
	          !params.client_max_window_bits)
	      ) {
	        return false;
	      }

	      return true;
	    });

	    if (!accepted) {
	      throw new Error('None of the extension offers can be accepted');
	    }

	    if (opts.serverNoContextTakeover) {
	      accepted.server_no_context_takeover = true;
	    }
	    if (opts.clientNoContextTakeover) {
	      accepted.client_no_context_takeover = true;
	    }
	    if (typeof opts.serverMaxWindowBits === 'number') {
	      accepted.server_max_window_bits = opts.serverMaxWindowBits;
	    }
	    if (typeof opts.clientMaxWindowBits === 'number') {
	      accepted.client_max_window_bits = opts.clientMaxWindowBits;
	    } else if (
	      accepted.client_max_window_bits === true ||
	      opts.clientMaxWindowBits === false
	    ) {
	      delete accepted.client_max_window_bits;
	    }

	    return accepted;
	  }

	  /**
	   * Accept the extension negotiation response.
	   *
	   * @param {Array} response The extension negotiation response
	   * @return {Object} Accepted configuration
	   * @private
	   */
	  acceptAsClient(response) {
	    const params = response[0];

	    if (
	      this._options.clientNoContextTakeover === false &&
	      params.client_no_context_takeover
	    ) {
	      throw new Error('Unexpected parameter "client_no_context_takeover"');
	    }

	    if (!params.client_max_window_bits) {
	      if (typeof this._options.clientMaxWindowBits === 'number') {
	        params.client_max_window_bits = this._options.clientMaxWindowBits;
	      }
	    } else if (
	      this._options.clientMaxWindowBits === false ||
	      (typeof this._options.clientMaxWindowBits === 'number' &&
	        params.client_max_window_bits > this._options.clientMaxWindowBits)
	    ) {
	      throw new Error(
	        'Unexpected or invalid parameter "client_max_window_bits"'
	      );
	    }

	    return params;
	  }

	  /**
	   * Normalize parameters.
	   *
	   * @param {Array} configurations The extension negotiation offers/reponse
	   * @return {Array} The offers/response with normalized parameters
	   * @private
	   */
	  normalizeParams(configurations) {
	    configurations.forEach((params) => {
	      Object.keys(params).forEach((key) => {
	        let value = params[key];

	        if (value.length > 1) {
	          throw new Error(`Parameter "${key}" must have only a single value`);
	        }

	        value = value[0];

	        if (key === 'client_max_window_bits') {
	          if (value !== true) {
	            const num = +value;
	            if (!Number.isInteger(num) || num < 8 || num > 15) {
	              throw new TypeError(
	                `Invalid value for parameter "${key}": ${value}`
	              );
	            }
	            value = num;
	          } else if (!this._isServer) {
	            throw new TypeError(
	              `Invalid value for parameter "${key}": ${value}`
	            );
	          }
	        } else if (key === 'server_max_window_bits') {
	          const num = +value;
	          if (!Number.isInteger(num) || num < 8 || num > 15) {
	            throw new TypeError(
	              `Invalid value for parameter "${key}": ${value}`
	            );
	          }
	          value = num;
	        } else if (
	          key === 'client_no_context_takeover' ||
	          key === 'server_no_context_takeover'
	        ) {
	          if (value !== true) {
	            throw new TypeError(
	              `Invalid value for parameter "${key}": ${value}`
	            );
	          }
	        } else {
	          throw new Error(`Unknown parameter "${key}"`);
	        }

	        params[key] = value;
	      });
	    });

	    return configurations;
	  }

	  /**
	   * Decompress data. Concurrency limited.
	   *
	   * @param {Buffer} data Compressed data
	   * @param {Boolean} fin Specifies whether or not this is the last fragment
	   * @param {Function} callback Callback
	   * @public
	   */
	  decompress(data, fin, callback) {
	    zlibLimiter.add((done) => {
	      this._decompress(data, fin, (err, result) => {
	        done();
	        callback(err, result);
	      });
	    });
	  }

	  /**
	   * Compress data. Concurrency limited.
	   *
	   * @param {Buffer} data Data to compress
	   * @param {Boolean} fin Specifies whether or not this is the last fragment
	   * @param {Function} callback Callback
	   * @public
	   */
	  compress(data, fin, callback) {
	    zlibLimiter.add((done) => {
	      this._compress(data, fin, (err, result) => {
	        done();
	        callback(err, result);
	      });
	    });
	  }

	  /**
	   * Decompress data.
	   *
	   * @param {Buffer} data Compressed data
	   * @param {Boolean} fin Specifies whether or not this is the last fragment
	   * @param {Function} callback Callback
	   * @private
	   */
	  _decompress(data, fin, callback) {
	    const endpoint = this._isServer ? 'client' : 'server';

	    if (!this._inflate) {
	      const key = `${endpoint}_max_window_bits`;
	      const windowBits =
	        typeof this.params[key] !== 'number'
	          ? zlib__default['default'].Z_DEFAULT_WINDOWBITS
	          : this.params[key];

	      this._inflate = zlib__default['default'].createInflateRaw({
	        ...this._options.zlibInflateOptions,
	        windowBits
	      });
	      this._inflate[kPerMessageDeflate] = this;
	      this._inflate[kTotalLength] = 0;
	      this._inflate[kBuffers] = [];
	      this._inflate.on('error', inflateOnError);
	      this._inflate.on('data', inflateOnData);
	    }

	    this._inflate[kCallback] = callback;

	    this._inflate.write(data);
	    if (fin) this._inflate.write(TRAILER);

	    this._inflate.flush(() => {
	      const err = this._inflate[kError];

	      if (err) {
	        this._inflate.close();
	        this._inflate = null;
	        callback(err);
	        return;
	      }

	      const data = bufferUtil.concat(
	        this._inflate[kBuffers],
	        this._inflate[kTotalLength]
	      );

	      this._inflate[kTotalLength] = 0;
	      this._inflate[kBuffers] = [];

	      if (fin && this.params[`${endpoint}_no_context_takeover`]) {
	        this._inflate.reset();
	      }

	      callback(null, data);
	    });
	  }

	  /**
	   * Compress data.
	   *
	   * @param {Buffer} data Data to compress
	   * @param {Boolean} fin Specifies whether or not this is the last fragment
	   * @param {Function} callback Callback
	   * @private
	   */
	  _compress(data, fin, callback) {
	    const endpoint = this._isServer ? 'server' : 'client';

	    if (!this._deflate) {
	      const key = `${endpoint}_max_window_bits`;
	      const windowBits =
	        typeof this.params[key] !== 'number'
	          ? zlib__default['default'].Z_DEFAULT_WINDOWBITS
	          : this.params[key];

	      this._deflate = zlib__default['default'].createDeflateRaw({
	        ...this._options.zlibDeflateOptions,
	        windowBits
	      });

	      this._deflate[kTotalLength] = 0;
	      this._deflate[kBuffers] = [];

	      //
	      // An `'error'` event is emitted, only on Node.js < 10.0.0, if the
	      // `zlib.DeflateRaw` instance is closed while data is being processed.
	      // This can happen if `PerMessageDeflate#cleanup()` is called at the wrong
	      // time due to an abnormal WebSocket closure.
	      //
	      this._deflate.on('error', NOOP$1);
	      this._deflate.on('data', deflateOnData);
	    }

	    this._deflate[kCallback] = callback;

	    this._deflate.write(data);
	    this._deflate.flush(zlib__default['default'].Z_SYNC_FLUSH, () => {
	      if (!this._deflate) {
	        //
	        // The deflate stream was closed while data was being processed.
	        //
	        return;
	      }

	      let data = bufferUtil.concat(
	        this._deflate[kBuffers],
	        this._deflate[kTotalLength]
	      );

	      if (fin) data = data.slice(0, data.length - 4);

	      //
	      // Ensure that the callback will not be called again in
	      // `PerMessageDeflate#cleanup()`.
	      //
	      this._deflate[kCallback] = null;

	      this._deflate[kTotalLength] = 0;
	      this._deflate[kBuffers] = [];

	      if (fin && this.params[`${endpoint}_no_context_takeover`]) {
	        this._deflate.reset();
	      }

	      callback(null, data);
	    });
	  }
	}

	var permessageDeflate = PerMessageDeflate;

	/**
	 * The listener of the `zlib.DeflateRaw` stream `'data'` event.
	 *
	 * @param {Buffer} chunk A chunk of data
	 * @private
	 */
	function deflateOnData(chunk) {
	  this[kBuffers].push(chunk);
	  this[kTotalLength] += chunk.length;
	}

	/**
	 * The listener of the `zlib.InflateRaw` stream `'data'` event.
	 *
	 * @param {Buffer} chunk A chunk of data
	 * @private
	 */
	function inflateOnData(chunk) {
	  this[kTotalLength] += chunk.length;

	  if (
	    this[kPerMessageDeflate]._maxPayload < 1 ||
	    this[kTotalLength] <= this[kPerMessageDeflate]._maxPayload
	  ) {
	    this[kBuffers].push(chunk);
	    return;
	  }

	  this[kError] = new RangeError('Max payload size exceeded');
	  this[kError][kStatusCode$2] = 1009;
	  this.removeListener('data', inflateOnData);
	  this.reset();
	}

	/**
	 * The listener of the `zlib.InflateRaw` stream `'error'` event.
	 *
	 * @param {Error} err The emitted error
	 * @private
	 */
	function inflateOnError(err) {
	  //
	  // There is no need to call `Zlib#close()` as the handle is automatically
	  // closed when an error is emitted.
	  //
	  this[kPerMessageDeflate]._inflate = null;
	  err[kStatusCode$2] = 1007;
	  this[kCallback](err);
	}

	var validation = createCommonjsModule(function (module, exports) {

	try {
	  const isValidUTF8 = require$$0__default$7['default'];

	  exports.isValidUTF8 =
	    typeof isValidUTF8 === 'object'
	      ? isValidUTF8.Validation.isValidUTF8 // utf-8-validate@<3.0.0
	      : isValidUTF8;
	} catch (e) /* istanbul ignore next */ {
	  exports.isValidUTF8 = () => true;
	}

	/**
	 * Checks if a status code is allowed in a close frame.
	 *
	 * @param {Number} code The status code
	 * @return {Boolean} `true` if the status code is valid, else `false`
	 * @public
	 */
	exports.isValidStatusCode = (code) => {
	  return (
	    (code >= 1000 &&
	      code <= 1014 &&
	      code !== 1004 &&
	      code !== 1005 &&
	      code !== 1006) ||
	    (code >= 3000 && code <= 4999)
	  );
	};
	});

	const { Writable } = require$$0__default['default'];


	const {
	  BINARY_TYPES: BINARY_TYPES$1,
	  EMPTY_BUFFER: EMPTY_BUFFER$2,
	  kStatusCode: kStatusCode$1,
	  kWebSocket: kWebSocket$2
	} = constants$1;
	const { concat, toArrayBuffer, unmask } = bufferUtil;
	const { isValidStatusCode: isValidStatusCode$1, isValidUTF8 } = validation;

	const GET_INFO = 0;
	const GET_PAYLOAD_LENGTH_16 = 1;
	const GET_PAYLOAD_LENGTH_64 = 2;
	const GET_MASK = 3;
	const GET_DATA = 4;
	const INFLATING = 5;

	/**
	 * HyBi Receiver implementation.
	 *
	 * @extends stream.Writable
	 */
	class Receiver extends Writable {
	  /**
	   * Creates a Receiver instance.
	   *
	   * @param {String} [binaryType=nodebuffer] The type for binary data
	   * @param {Object} [extensions] An object containing the negotiated extensions
	   * @param {Boolean} [isServer=false] Specifies whether to operate in client or
	   *     server mode
	   * @param {Number} [maxPayload=0] The maximum allowed message length
	   */
	  constructor(binaryType, extensions, isServer, maxPayload) {
	    super();

	    this._binaryType = binaryType || BINARY_TYPES$1[0];
	    this[kWebSocket$2] = undefined;
	    this._extensions = extensions || {};
	    this._isServer = !!isServer;
	    this._maxPayload = maxPayload | 0;

	    this._bufferedBytes = 0;
	    this._buffers = [];

	    this._compressed = false;
	    this._payloadLength = 0;
	    this._mask = undefined;
	    this._fragmented = 0;
	    this._masked = false;
	    this._fin = false;
	    this._opcode = 0;

	    this._totalPayloadLength = 0;
	    this._messageLength = 0;
	    this._fragments = [];

	    this._state = GET_INFO;
	    this._loop = false;
	  }

	  /**
	   * Implements `Writable.prototype._write()`.
	   *
	   * @param {Buffer} chunk The chunk of data to write
	   * @param {String} encoding The character encoding of `chunk`
	   * @param {Function} cb Callback
	   * @private
	   */
	  _write(chunk, encoding, cb) {
	    if (this._opcode === 0x08 && this._state == GET_INFO) return cb();

	    this._bufferedBytes += chunk.length;
	    this._buffers.push(chunk);
	    this.startLoop(cb);
	  }

	  /**
	   * Consumes `n` bytes from the buffered data.
	   *
	   * @param {Number} n The number of bytes to consume
	   * @return {Buffer} The consumed bytes
	   * @private
	   */
	  consume(n) {
	    this._bufferedBytes -= n;

	    if (n === this._buffers[0].length) return this._buffers.shift();

	    if (n < this._buffers[0].length) {
	      const buf = this._buffers[0];
	      this._buffers[0] = buf.slice(n);
	      return buf.slice(0, n);
	    }

	    const dst = Buffer.allocUnsafe(n);

	    do {
	      const buf = this._buffers[0];
	      const offset = dst.length - n;

	      if (n >= buf.length) {
	        dst.set(this._buffers.shift(), offset);
	      } else {
	        dst.set(new Uint8Array(buf.buffer, buf.byteOffset, n), offset);
	        this._buffers[0] = buf.slice(n);
	      }

	      n -= buf.length;
	    } while (n > 0);

	    return dst;
	  }

	  /**
	   * Starts the parsing loop.
	   *
	   * @param {Function} cb Callback
	   * @private
	   */
	  startLoop(cb) {
	    let err;
	    this._loop = true;

	    do {
	      switch (this._state) {
	        case GET_INFO:
	          err = this.getInfo();
	          break;
	        case GET_PAYLOAD_LENGTH_16:
	          err = this.getPayloadLength16();
	          break;
	        case GET_PAYLOAD_LENGTH_64:
	          err = this.getPayloadLength64();
	          break;
	        case GET_MASK:
	          this.getMask();
	          break;
	        case GET_DATA:
	          err = this.getData(cb);
	          break;
	        default:
	          // `INFLATING`
	          this._loop = false;
	          return;
	      }
	    } while (this._loop);

	    cb(err);
	  }

	  /**
	   * Reads the first two bytes of a frame.
	   *
	   * @return {(RangeError|undefined)} A possible error
	   * @private
	   */
	  getInfo() {
	    if (this._bufferedBytes < 2) {
	      this._loop = false;
	      return;
	    }

	    const buf = this.consume(2);

	    if ((buf[0] & 0x30) !== 0x00) {
	      this._loop = false;
	      return error(RangeError, 'RSV2 and RSV3 must be clear', true, 1002);
	    }

	    const compressed = (buf[0] & 0x40) === 0x40;

	    if (compressed && !this._extensions[permessageDeflate.extensionName]) {
	      this._loop = false;
	      return error(RangeError, 'RSV1 must be clear', true, 1002);
	    }

	    this._fin = (buf[0] & 0x80) === 0x80;
	    this._opcode = buf[0] & 0x0f;
	    this._payloadLength = buf[1] & 0x7f;

	    if (this._opcode === 0x00) {
	      if (compressed) {
	        this._loop = false;
	        return error(RangeError, 'RSV1 must be clear', true, 1002);
	      }

	      if (!this._fragmented) {
	        this._loop = false;
	        return error(RangeError, 'invalid opcode 0', true, 1002);
	      }

	      this._opcode = this._fragmented;
	    } else if (this._opcode === 0x01 || this._opcode === 0x02) {
	      if (this._fragmented) {
	        this._loop = false;
	        return error(RangeError, `invalid opcode ${this._opcode}`, true, 1002);
	      }

	      this._compressed = compressed;
	    } else if (this._opcode > 0x07 && this._opcode < 0x0b) {
	      if (!this._fin) {
	        this._loop = false;
	        return error(RangeError, 'FIN must be set', true, 1002);
	      }

	      if (compressed) {
	        this._loop = false;
	        return error(RangeError, 'RSV1 must be clear', true, 1002);
	      }

	      if (this._payloadLength > 0x7d) {
	        this._loop = false;
	        return error(
	          RangeError,
	          `invalid payload length ${this._payloadLength}`,
	          true,
	          1002
	        );
	      }
	    } else {
	      this._loop = false;
	      return error(RangeError, `invalid opcode ${this._opcode}`, true, 1002);
	    }

	    if (!this._fin && !this._fragmented) this._fragmented = this._opcode;
	    this._masked = (buf[1] & 0x80) === 0x80;

	    if (this._isServer) {
	      if (!this._masked) {
	        this._loop = false;
	        return error(RangeError, 'MASK must be set', true, 1002);
	      }
	    } else if (this._masked) {
	      this._loop = false;
	      return error(RangeError, 'MASK must be clear', true, 1002);
	    }

	    if (this._payloadLength === 126) this._state = GET_PAYLOAD_LENGTH_16;
	    else if (this._payloadLength === 127) this._state = GET_PAYLOAD_LENGTH_64;
	    else return this.haveLength();
	  }

	  /**
	   * Gets extended payload length (7+16).
	   *
	   * @return {(RangeError|undefined)} A possible error
	   * @private
	   */
	  getPayloadLength16() {
	    if (this._bufferedBytes < 2) {
	      this._loop = false;
	      return;
	    }

	    this._payloadLength = this.consume(2).readUInt16BE(0);
	    return this.haveLength();
	  }

	  /**
	   * Gets extended payload length (7+64).
	   *
	   * @return {(RangeError|undefined)} A possible error
	   * @private
	   */
	  getPayloadLength64() {
	    if (this._bufferedBytes < 8) {
	      this._loop = false;
	      return;
	    }

	    const buf = this.consume(8);
	    const num = buf.readUInt32BE(0);

	    //
	    // The maximum safe integer in JavaScript is 2^53 - 1. An error is returned
	    // if payload length is greater than this number.
	    //
	    if (num > Math.pow(2, 53 - 32) - 1) {
	      this._loop = false;
	      return error(
	        RangeError,
	        'Unsupported WebSocket frame: payload length > 2^53 - 1',
	        false,
	        1009
	      );
	    }

	    this._payloadLength = num * Math.pow(2, 32) + buf.readUInt32BE(4);
	    return this.haveLength();
	  }

	  /**
	   * Payload length has been read.
	   *
	   * @return {(RangeError|undefined)} A possible error
	   * @private
	   */
	  haveLength() {
	    if (this._payloadLength && this._opcode < 0x08) {
	      this._totalPayloadLength += this._payloadLength;
	      if (this._totalPayloadLength > this._maxPayload && this._maxPayload > 0) {
	        this._loop = false;
	        return error(RangeError, 'Max payload size exceeded', false, 1009);
	      }
	    }

	    if (this._masked) this._state = GET_MASK;
	    else this._state = GET_DATA;
	  }

	  /**
	   * Reads mask bytes.
	   *
	   * @private
	   */
	  getMask() {
	    if (this._bufferedBytes < 4) {
	      this._loop = false;
	      return;
	    }

	    this._mask = this.consume(4);
	    this._state = GET_DATA;
	  }

	  /**
	   * Reads data bytes.
	   *
	   * @param {Function} cb Callback
	   * @return {(Error|RangeError|undefined)} A possible error
	   * @private
	   */
	  getData(cb) {
	    let data = EMPTY_BUFFER$2;

	    if (this._payloadLength) {
	      if (this._bufferedBytes < this._payloadLength) {
	        this._loop = false;
	        return;
	      }

	      data = this.consume(this._payloadLength);
	      if (this._masked) unmask(data, this._mask);
	    }

	    if (this._opcode > 0x07) return this.controlMessage(data);

	    if (this._compressed) {
	      this._state = INFLATING;
	      this.decompress(data, cb);
	      return;
	    }

	    if (data.length) {
	      //
	      // This message is not compressed so its lenght is the sum of the payload
	      // length of all fragments.
	      //
	      this._messageLength = this._totalPayloadLength;
	      this._fragments.push(data);
	    }

	    return this.dataMessage();
	  }

	  /**
	   * Decompresses data.
	   *
	   * @param {Buffer} data Compressed data
	   * @param {Function} cb Callback
	   * @private
	   */
	  decompress(data, cb) {
	    const perMessageDeflate = this._extensions[permessageDeflate.extensionName];

	    perMessageDeflate.decompress(data, this._fin, (err, buf) => {
	      if (err) return cb(err);

	      if (buf.length) {
	        this._messageLength += buf.length;
	        if (this._messageLength > this._maxPayload && this._maxPayload > 0) {
	          return cb(
	            error(RangeError, 'Max payload size exceeded', false, 1009)
	          );
	        }

	        this._fragments.push(buf);
	      }

	      const er = this.dataMessage();
	      if (er) return cb(er);

	      this.startLoop(cb);
	    });
	  }

	  /**
	   * Handles a data message.
	   *
	   * @return {(Error|undefined)} A possible error
	   * @private
	   */
	  dataMessage() {
	    if (this._fin) {
	      const messageLength = this._messageLength;
	      const fragments = this._fragments;

	      this._totalPayloadLength = 0;
	      this._messageLength = 0;
	      this._fragmented = 0;
	      this._fragments = [];

	      if (this._opcode === 2) {
	        let data;

	        if (this._binaryType === 'nodebuffer') {
	          data = concat(fragments, messageLength);
	        } else if (this._binaryType === 'arraybuffer') {
	          data = toArrayBuffer(concat(fragments, messageLength));
	        } else {
	          data = fragments;
	        }

	        this.emit('message', data);
	      } else {
	        const buf = concat(fragments, messageLength);

	        if (!isValidUTF8(buf)) {
	          this._loop = false;
	          return error(Error, 'invalid UTF-8 sequence', true, 1007);
	        }

	        this.emit('message', buf.toString());
	      }
	    }

	    this._state = GET_INFO;
	  }

	  /**
	   * Handles a control message.
	   *
	   * @param {Buffer} data Data to handle
	   * @return {(Error|RangeError|undefined)} A possible error
	   * @private
	   */
	  controlMessage(data) {
	    if (this._opcode === 0x08) {
	      this._loop = false;

	      if (data.length === 0) {
	        this.emit('conclude', 1005, '');
	        this.end();
	      } else if (data.length === 1) {
	        return error(RangeError, 'invalid payload length 1', true, 1002);
	      } else {
	        const code = data.readUInt16BE(0);

	        if (!isValidStatusCode$1(code)) {
	          return error(RangeError, `invalid status code ${code}`, true, 1002);
	        }

	        const buf = data.slice(2);

	        if (!isValidUTF8(buf)) {
	          return error(Error, 'invalid UTF-8 sequence', true, 1007);
	        }

	        this.emit('conclude', code, buf.toString());
	        this.end();
	      }
	    } else if (this._opcode === 0x09) {
	      this.emit('ping', data);
	    } else {
	      this.emit('pong', data);
	    }

	    this._state = GET_INFO;
	  }
	}

	var receiver = Receiver;

	/**
	 * Builds an error object.
	 *
	 * @param {(Error|RangeError)} ErrorCtor The error constructor
	 * @param {String} message The error message
	 * @param {Boolean} prefix Specifies whether or not to add a default prefix to
	 *     `message`
	 * @param {Number} statusCode The status code
	 * @return {(Error|RangeError)} The error
	 * @private
	 */
	function error(ErrorCtor, message, prefix, statusCode) {
	  const err = new ErrorCtor(
	    prefix ? `Invalid WebSocket frame: ${message}` : message
	  );

	  Error.captureStackTrace(err, error);
	  err[kStatusCode$1] = statusCode;
	  return err;
	}

	const { randomFillSync } = crypto__default['default'];


	const { EMPTY_BUFFER: EMPTY_BUFFER$1 } = constants$1;
	const { isValidStatusCode } = validation;
	const { mask: applyMask, toBuffer: toBuffer$1 } = bufferUtil;

	const mask = Buffer.alloc(4);

	/**
	 * HyBi Sender implementation.
	 */
	class Sender {
	  /**
	   * Creates a Sender instance.
	   *
	   * @param {net.Socket} socket The connection socket
	   * @param {Object} [extensions] An object containing the negotiated extensions
	   */
	  constructor(socket, extensions) {
	    this._extensions = extensions || {};
	    this._socket = socket;

	    this._firstFragment = true;
	    this._compress = false;

	    this._bufferedBytes = 0;
	    this._deflating = false;
	    this._queue = [];
	  }

	  /**
	   * Frames a piece of data according to the HyBi WebSocket protocol.
	   *
	   * @param {Buffer} data The data to frame
	   * @param {Object} options Options object
	   * @param {Number} options.opcode The opcode
	   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be
	   *     modified
	   * @param {Boolean} [options.fin=false] Specifies whether or not to set the
	   *     FIN bit
	   * @param {Boolean} [options.mask=false] Specifies whether or not to mask
	   *     `data`
	   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the
	   *     RSV1 bit
	   * @return {Buffer[]} The framed data as a list of `Buffer` instances
	   * @public
	   */
	  static frame(data, options) {
	    const merge = options.mask && options.readOnly;
	    let offset = options.mask ? 6 : 2;
	    let payloadLength = data.length;

	    if (data.length >= 65536) {
	      offset += 8;
	      payloadLength = 127;
	    } else if (data.length > 125) {
	      offset += 2;
	      payloadLength = 126;
	    }

	    const target = Buffer.allocUnsafe(merge ? data.length + offset : offset);

	    target[0] = options.fin ? options.opcode | 0x80 : options.opcode;
	    if (options.rsv1) target[0] |= 0x40;

	    target[1] = payloadLength;

	    if (payloadLength === 126) {
	      target.writeUInt16BE(data.length, 2);
	    } else if (payloadLength === 127) {
	      target.writeUInt32BE(0, 2);
	      target.writeUInt32BE(data.length, 6);
	    }

	    if (!options.mask) return [target, data];

	    randomFillSync(mask, 0, 4);

	    target[1] |= 0x80;
	    target[offset - 4] = mask[0];
	    target[offset - 3] = mask[1];
	    target[offset - 2] = mask[2];
	    target[offset - 1] = mask[3];

	    if (merge) {
	      applyMask(data, mask, target, offset, data.length);
	      return [target];
	    }

	    applyMask(data, mask, data, 0, data.length);
	    return [target, data];
	  }

	  /**
	   * Sends a close message to the other peer.
	   *
	   * @param {Number} [code] The status code component of the body
	   * @param {String} [data] The message component of the body
	   * @param {Boolean} [mask=false] Specifies whether or not to mask the message
	   * @param {Function} [cb] Callback
	   * @public
	   */
	  close(code, data, mask, cb) {
	    let buf;

	    if (code === undefined) {
	      buf = EMPTY_BUFFER$1;
	    } else if (typeof code !== 'number' || !isValidStatusCode(code)) {
	      throw new TypeError('First argument must be a valid error code number');
	    } else if (data === undefined || data === '') {
	      buf = Buffer.allocUnsafe(2);
	      buf.writeUInt16BE(code, 0);
	    } else {
	      const length = Buffer.byteLength(data);

	      if (length > 123) {
	        throw new RangeError('The message must not be greater than 123 bytes');
	      }

	      buf = Buffer.allocUnsafe(2 + length);
	      buf.writeUInt16BE(code, 0);
	      buf.write(data, 2);
	    }

	    if (this._deflating) {
	      this.enqueue([this.doClose, buf, mask, cb]);
	    } else {
	      this.doClose(buf, mask, cb);
	    }
	  }

	  /**
	   * Frames and sends a close message.
	   *
	   * @param {Buffer} data The message to send
	   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`
	   * @param {Function} [cb] Callback
	   * @private
	   */
	  doClose(data, mask, cb) {
	    this.sendFrame(
	      Sender.frame(data, {
	        fin: true,
	        rsv1: false,
	        opcode: 0x08,
	        mask,
	        readOnly: false
	      }),
	      cb
	    );
	  }

	  /**
	   * Sends a ping message to the other peer.
	   *
	   * @param {*} data The message to send
	   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`
	   * @param {Function} [cb] Callback
	   * @public
	   */
	  ping(data, mask, cb) {
	    const buf = toBuffer$1(data);

	    if (buf.length > 125) {
	      throw new RangeError('The data size must not be greater than 125 bytes');
	    }

	    if (this._deflating) {
	      this.enqueue([this.doPing, buf, mask, toBuffer$1.readOnly, cb]);
	    } else {
	      this.doPing(buf, mask, toBuffer$1.readOnly, cb);
	    }
	  }

	  /**
	   * Frames and sends a ping message.
	   *
	   * @param {Buffer} data The message to send
	   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`
	   * @param {Boolean} [readOnly=false] Specifies whether `data` can be modified
	   * @param {Function} [cb] Callback
	   * @private
	   */
	  doPing(data, mask, readOnly, cb) {
	    this.sendFrame(
	      Sender.frame(data, {
	        fin: true,
	        rsv1: false,
	        opcode: 0x09,
	        mask,
	        readOnly
	      }),
	      cb
	    );
	  }

	  /**
	   * Sends a pong message to the other peer.
	   *
	   * @param {*} data The message to send
	   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`
	   * @param {Function} [cb] Callback
	   * @public
	   */
	  pong(data, mask, cb) {
	    const buf = toBuffer$1(data);

	    if (buf.length > 125) {
	      throw new RangeError('The data size must not be greater than 125 bytes');
	    }

	    if (this._deflating) {
	      this.enqueue([this.doPong, buf, mask, toBuffer$1.readOnly, cb]);
	    } else {
	      this.doPong(buf, mask, toBuffer$1.readOnly, cb);
	    }
	  }

	  /**
	   * Frames and sends a pong message.
	   *
	   * @param {Buffer} data The message to send
	   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`
	   * @param {Boolean} [readOnly=false] Specifies whether `data` can be modified
	   * @param {Function} [cb] Callback
	   * @private
	   */
	  doPong(data, mask, readOnly, cb) {
	    this.sendFrame(
	      Sender.frame(data, {
	        fin: true,
	        rsv1: false,
	        opcode: 0x0a,
	        mask,
	        readOnly
	      }),
	      cb
	    );
	  }

	  /**
	   * Sends a data message to the other peer.
	   *
	   * @param {*} data The message to send
	   * @param {Object} options Options object
	   * @param {Boolean} [options.compress=false] Specifies whether or not to
	   *     compress `data`
	   * @param {Boolean} [options.binary=false] Specifies whether `data` is binary
	   *     or text
	   * @param {Boolean} [options.fin=false] Specifies whether the fragment is the
	   *     last one
	   * @param {Boolean} [options.mask=false] Specifies whether or not to mask
	   *     `data`
	   * @param {Function} [cb] Callback
	   * @public
	   */
	  send(data, options, cb) {
	    const buf = toBuffer$1(data);
	    const perMessageDeflate = this._extensions[permessageDeflate.extensionName];
	    let opcode = options.binary ? 2 : 1;
	    let rsv1 = options.compress;

	    if (this._firstFragment) {
	      this._firstFragment = false;
	      if (rsv1 && perMessageDeflate) {
	        rsv1 = buf.length >= perMessageDeflate._threshold;
	      }
	      this._compress = rsv1;
	    } else {
	      rsv1 = false;
	      opcode = 0;
	    }

	    if (options.fin) this._firstFragment = true;

	    if (perMessageDeflate) {
	      const opts = {
	        fin: options.fin,
	        rsv1,
	        opcode,
	        mask: options.mask,
	        readOnly: toBuffer$1.readOnly
	      };

	      if (this._deflating) {
	        this.enqueue([this.dispatch, buf, this._compress, opts, cb]);
	      } else {
	        this.dispatch(buf, this._compress, opts, cb);
	      }
	    } else {
	      this.sendFrame(
	        Sender.frame(buf, {
	          fin: options.fin,
	          rsv1: false,
	          opcode,
	          mask: options.mask,
	          readOnly: toBuffer$1.readOnly
	        }),
	        cb
	      );
	    }
	  }

	  /**
	   * Dispatches a data message.
	   *
	   * @param {Buffer} data The message to send
	   * @param {Boolean} [compress=false] Specifies whether or not to compress
	   *     `data`
	   * @param {Object} options Options object
	   * @param {Number} options.opcode The opcode
	   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be
	   *     modified
	   * @param {Boolean} [options.fin=false] Specifies whether or not to set the
	   *     FIN bit
	   * @param {Boolean} [options.mask=false] Specifies whether or not to mask
	   *     `data`
	   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the
	   *     RSV1 bit
	   * @param {Function} [cb] Callback
	   * @private
	   */
	  dispatch(data, compress, options, cb) {
	    if (!compress) {
	      this.sendFrame(Sender.frame(data, options), cb);
	      return;
	    }

	    const perMessageDeflate = this._extensions[permessageDeflate.extensionName];

	    this._bufferedBytes += data.length;
	    this._deflating = true;
	    perMessageDeflate.compress(data, options.fin, (_, buf) => {
	      if (this._socket.destroyed) {
	        const err = new Error(
	          'The socket was closed while data was being compressed'
	        );

	        if (typeof cb === 'function') cb(err);

	        for (let i = 0; i < this._queue.length; i++) {
	          const callback = this._queue[i][4];

	          if (typeof callback === 'function') callback(err);
	        }

	        return;
	      }

	      this._bufferedBytes -= data.length;
	      this._deflating = false;
	      options.readOnly = false;
	      this.sendFrame(Sender.frame(buf, options), cb);
	      this.dequeue();
	    });
	  }

	  /**
	   * Executes queued send operations.
	   *
	   * @private
	   */
	  dequeue() {
	    while (!this._deflating && this._queue.length) {
	      const params = this._queue.shift();

	      this._bufferedBytes -= params[1].length;
	      Reflect.apply(params[0], this, params.slice(1));
	    }
	  }

	  /**
	   * Enqueues a send operation.
	   *
	   * @param {Array} params Send operation parameters.
	   * @private
	   */
	  enqueue(params) {
	    this._bufferedBytes += params[1].length;
	    this._queue.push(params);
	  }

	  /**
	   * Sends a frame.
	   *
	   * @param {Buffer[]} list The frame to send
	   * @param {Function} [cb] Callback
	   * @private
	   */
	  sendFrame(list, cb) {
	    if (list.length === 2) {
	      this._socket.cork();
	      this._socket.write(list[0]);
	      this._socket.write(list[1], cb);
	      this._socket.uncork();
	    } else {
	      this._socket.write(list[0], cb);
	    }
	  }
	}

	var sender = Sender;

	/**
	 * Class representing an event.
	 *
	 * @private
	 */
	class Event {
	  /**
	   * Create a new `Event`.
	   *
	   * @param {String} type The name of the event
	   * @param {Object} target A reference to the target to which the event was
	   *     dispatched
	   */
	  constructor(type, target) {
	    this.target = target;
	    this.type = type;
	  }
	}

	/**
	 * Class representing a message event.
	 *
	 * @extends Event
	 * @private
	 */
	class MessageEvent extends Event {
	  /**
	   * Create a new `MessageEvent`.
	   *
	   * @param {(String|Buffer|ArrayBuffer|Buffer[])} data The received data
	   * @param {WebSocket} target A reference to the target to which the event was
	   *     dispatched
	   */
	  constructor(data, target) {
	    super('message', target);

	    this.data = data;
	  }
	}

	/**
	 * Class representing a close event.
	 *
	 * @extends Event
	 * @private
	 */
	class CloseEvent extends Event {
	  /**
	   * Create a new `CloseEvent`.
	   *
	   * @param {Number} code The status code explaining why the connection is being
	   *     closed
	   * @param {String} reason A human-readable string explaining why the
	   *     connection is closing
	   * @param {WebSocket} target A reference to the target to which the event was
	   *     dispatched
	   */
	  constructor(code, reason, target) {
	    super('close', target);

	    this.wasClean = target._closeFrameReceived && target._closeFrameSent;
	    this.reason = reason;
	    this.code = code;
	  }
	}

	/**
	 * Class representing an open event.
	 *
	 * @extends Event
	 * @private
	 */
	class OpenEvent extends Event {
	  /**
	   * Create a new `OpenEvent`.
	   *
	   * @param {WebSocket} target A reference to the target to which the event was
	   *     dispatched
	   */
	  constructor(target) {
	    super('open', target);
	  }
	}

	/**
	 * Class representing an error event.
	 *
	 * @extends Event
	 * @private
	 */
	class ErrorEvent extends Event {
	  /**
	   * Create a new `ErrorEvent`.
	   *
	   * @param {Object} error The error that generated this event
	   * @param {WebSocket} target A reference to the target to which the event was
	   *     dispatched
	   */
	  constructor(error, target) {
	    super('error', target);

	    this.message = error.message;
	    this.error = error;
	  }
	}

	/**
	 * This provides methods for emulating the `EventTarget` interface. It's not
	 * meant to be used directly.
	 *
	 * @mixin
	 */
	const EventTarget = {
	  /**
	   * Register an event listener.
	   *
	   * @param {String} type A string representing the event type to listen for
	   * @param {Function} listener The listener to add
	   * @param {Object} [options] An options object specifies characteristics about
	   *     the event listener
	   * @param {Boolean} [options.once=false] A `Boolean`` indicating that the
	   *     listener should be invoked at most once after being added. If `true`,
	   *     the listener would be automatically removed when invoked.
	   * @public
	   */
	  addEventListener(type, listener, options) {
	    if (typeof listener !== 'function') return;

	    function onMessage(data) {
	      listener.call(this, new MessageEvent(data, this));
	    }

	    function onClose(code, message) {
	      listener.call(this, new CloseEvent(code, message, this));
	    }

	    function onError(error) {
	      listener.call(this, new ErrorEvent(error, this));
	    }

	    function onOpen() {
	      listener.call(this, new OpenEvent(this));
	    }

	    const method = options && options.once ? 'once' : 'on';

	    if (type === 'message') {
	      onMessage._listener = listener;
	      this[method](type, onMessage);
	    } else if (type === 'close') {
	      onClose._listener = listener;
	      this[method](type, onClose);
	    } else if (type === 'error') {
	      onError._listener = listener;
	      this[method](type, onError);
	    } else if (type === 'open') {
	      onOpen._listener = listener;
	      this[method](type, onOpen);
	    } else {
	      this[method](type, listener);
	    }
	  },

	  /**
	   * Remove an event listener.
	   *
	   * @param {String} type A string representing the event type to remove
	   * @param {Function} listener The listener to remove
	   * @public
	   */
	  removeEventListener(type, listener) {
	    const listeners = this.listeners(type);

	    for (let i = 0; i < listeners.length; i++) {
	      if (listeners[i] === listener || listeners[i]._listener === listener) {
	        this.removeListener(type, listeners[i]);
	      }
	    }
	  }
	};

	var eventTarget = EventTarget;

	//
	// Allowed token characters:
	//
	// '!', '#', '$', '%', '&', ''', '*', '+', '-',
	// '.', 0-9, A-Z, '^', '_', '`', a-z, '|', '~'
	//
	// tokenChars[32] === 0 // ' '
	// tokenChars[33] === 1 // '!'
	// tokenChars[34] === 0 // '"'
	// ...
	//
	// prettier-ignore
	const tokenChars = [
	  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0 - 15
	  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 16 - 31
	  0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, // 32 - 47
	  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 48 - 63
	  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 64 - 79
	  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, // 80 - 95
	  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 96 - 111
	  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0 // 112 - 127
	];

	/**
	 * Adds an offer to the map of extension offers or a parameter to the map of
	 * parameters.
	 *
	 * @param {Object} dest The map of extension offers or parameters
	 * @param {String} name The extension or parameter name
	 * @param {(Object|Boolean|String)} elem The extension parameters or the
	 *     parameter value
	 * @private
	 */
	function push(dest, name, elem) {
	  if (dest[name] === undefined) dest[name] = [elem];
	  else dest[name].push(elem);
	}

	/**
	 * Parses the `Sec-WebSocket-Extensions` header into an object.
	 *
	 * @param {String} header The field value of the header
	 * @return {Object} The parsed object
	 * @public
	 */
	function parse$2(header) {
	  const offers = Object.create(null);

	  if (header === undefined || header === '') return offers;

	  let params = Object.create(null);
	  let mustUnescape = false;
	  let isEscaping = false;
	  let inQuotes = false;
	  let extensionName;
	  let paramName;
	  let start = -1;
	  let end = -1;
	  let i = 0;

	  for (; i < header.length; i++) {
	    const code = header.charCodeAt(i);

	    if (extensionName === undefined) {
	      if (end === -1 && tokenChars[code] === 1) {
	        if (start === -1) start = i;
	      } else if (code === 0x20 /* ' ' */ || code === 0x09 /* '\t' */) {
	        if (end === -1 && start !== -1) end = i;
	      } else if (code === 0x3b /* ';' */ || code === 0x2c /* ',' */) {
	        if (start === -1) {
	          throw new SyntaxError(`Unexpected character at index ${i}`);
	        }

	        if (end === -1) end = i;
	        const name = header.slice(start, end);
	        if (code === 0x2c) {
	          push(offers, name, params);
	          params = Object.create(null);
	        } else {
	          extensionName = name;
	        }

	        start = end = -1;
	      } else {
	        throw new SyntaxError(`Unexpected character at index ${i}`);
	      }
	    } else if (paramName === undefined) {
	      if (end === -1 && tokenChars[code] === 1) {
	        if (start === -1) start = i;
	      } else if (code === 0x20 || code === 0x09) {
	        if (end === -1 && start !== -1) end = i;
	      } else if (code === 0x3b || code === 0x2c) {
	        if (start === -1) {
	          throw new SyntaxError(`Unexpected character at index ${i}`);
	        }

	        if (end === -1) end = i;
	        push(params, header.slice(start, end), true);
	        if (code === 0x2c) {
	          push(offers, extensionName, params);
	          params = Object.create(null);
	          extensionName = undefined;
	        }

	        start = end = -1;
	      } else if (code === 0x3d /* '=' */ && start !== -1 && end === -1) {
	        paramName = header.slice(start, i);
	        start = end = -1;
	      } else {
	        throw new SyntaxError(`Unexpected character at index ${i}`);
	      }
	    } else {
	      //
	      // The value of a quoted-string after unescaping must conform to the
	      // token ABNF, so only token characters are valid.
	      // Ref: https://tools.ietf.org/html/rfc6455#section-9.1
	      //
	      if (isEscaping) {
	        if (tokenChars[code] !== 1) {
	          throw new SyntaxError(`Unexpected character at index ${i}`);
	        }
	        if (start === -1) start = i;
	        else if (!mustUnescape) mustUnescape = true;
	        isEscaping = false;
	      } else if (inQuotes) {
	        if (tokenChars[code] === 1) {
	          if (start === -1) start = i;
	        } else if (code === 0x22 /* '"' */ && start !== -1) {
	          inQuotes = false;
	          end = i;
	        } else if (code === 0x5c /* '\' */) {
	          isEscaping = true;
	        } else {
	          throw new SyntaxError(`Unexpected character at index ${i}`);
	        }
	      } else if (code === 0x22 && header.charCodeAt(i - 1) === 0x3d) {
	        inQuotes = true;
	      } else if (end === -1 && tokenChars[code] === 1) {
	        if (start === -1) start = i;
	      } else if (start !== -1 && (code === 0x20 || code === 0x09)) {
	        if (end === -1) end = i;
	      } else if (code === 0x3b || code === 0x2c) {
	        if (start === -1) {
	          throw new SyntaxError(`Unexpected character at index ${i}`);
	        }

	        if (end === -1) end = i;
	        let value = header.slice(start, end);
	        if (mustUnescape) {
	          value = value.replace(/\\/g, '');
	          mustUnescape = false;
	        }
	        push(params, paramName, value);
	        if (code === 0x2c) {
	          push(offers, extensionName, params);
	          params = Object.create(null);
	          extensionName = undefined;
	        }

	        paramName = undefined;
	        start = end = -1;
	      } else {
	        throw new SyntaxError(`Unexpected character at index ${i}`);
	      }
	    }
	  }

	  if (start === -1 || inQuotes) {
	    throw new SyntaxError('Unexpected end of input');
	  }

	  if (end === -1) end = i;
	  const token = header.slice(start, end);
	  if (extensionName === undefined) {
	    push(offers, token, params);
	  } else {
	    if (paramName === undefined) {
	      push(params, token, true);
	    } else if (mustUnescape) {
	      push(params, paramName, token.replace(/\\/g, ''));
	    } else {
	      push(params, paramName, token);
	    }
	    push(offers, extensionName, params);
	  }

	  return offers;
	}

	/**
	 * Builds the `Sec-WebSocket-Extensions` header field value.
	 *
	 * @param {Object} extensions The map of extensions and parameters to format
	 * @return {String} A string representing the given object
	 * @public
	 */
	function format$2(extensions) {
	  return Object.keys(extensions)
	    .map((extension) => {
	      let configurations = extensions[extension];
	      if (!Array.isArray(configurations)) configurations = [configurations];
	      return configurations
	        .map((params) => {
	          return [extension]
	            .concat(
	              Object.keys(params).map((k) => {
	                let values = params[k];
	                if (!Array.isArray(values)) values = [values];
	                return values
	                  .map((v) => (v === true ? k : `${k}=${v}`))
	                  .join('; ');
	              })
	            )
	            .join('; ');
	        })
	        .join(', ');
	    })
	    .join(', ');
	}

	var extension = { format: format$2, parse: parse$2 };

	const { randomBytes, createHash: createHash$1 } = crypto__default['default'];
	const { URL } = url__default['default'];




	const {
	  BINARY_TYPES,
	  EMPTY_BUFFER,
	  GUID: GUID$1,
	  kStatusCode,
	  kWebSocket: kWebSocket$1,
	  NOOP
	} = constants$1;
	const { addEventListener, removeEventListener } = eventTarget;
	const { format: format$1, parse: parse$1 } = extension;
	const { toBuffer } = bufferUtil;

	const readyStates = ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'];
	const protocolVersions = [8, 13];
	const closeTimeout = 30 * 1000;

	/**
	 * Class representing a WebSocket.
	 *
	 * @extends EventEmitter
	 */
	class WebSocket$1 extends EventEmitter__default['default'] {
	  /**
	   * Create a new `WebSocket`.
	   *
	   * @param {(String|url.URL)} address The URL to which to connect
	   * @param {(String|String[])} [protocols] The subprotocols
	   * @param {Object} [options] Connection options
	   */
	  constructor(address, protocols, options) {
	    super();

	    this._binaryType = BINARY_TYPES[0];
	    this._closeCode = 1006;
	    this._closeFrameReceived = false;
	    this._closeFrameSent = false;
	    this._closeMessage = '';
	    this._closeTimer = null;
	    this._extensions = {};
	    this._protocol = '';
	    this._readyState = WebSocket$1.CONNECTING;
	    this._receiver = null;
	    this._sender = null;
	    this._socket = null;

	    if (address !== null) {
	      this._bufferedAmount = 0;
	      this._isServer = false;
	      this._redirects = 0;

	      if (Array.isArray(protocols)) {
	        protocols = protocols.join(', ');
	      } else if (typeof protocols === 'object' && protocols !== null) {
	        options = protocols;
	        protocols = undefined;
	      }

	      initAsClient(this, address, protocols, options);
	    } else {
	      this._isServer = true;
	    }
	  }

	  /**
	   * This deviates from the WHATWG interface since ws doesn't support the
	   * required default "blob" type (instead we define a custom "nodebuffer"
	   * type).
	   *
	   * @type {String}
	   */
	  get binaryType() {
	    return this._binaryType;
	  }

	  set binaryType(type) {
	    if (!BINARY_TYPES.includes(type)) return;

	    this._binaryType = type;

	    //
	    // Allow to change `binaryType` on the fly.
	    //
	    if (this._receiver) this._receiver._binaryType = type;
	  }

	  /**
	   * @type {Number}
	   */
	  get bufferedAmount() {
	    if (!this._socket) return this._bufferedAmount;

	    return this._socket._writableState.length + this._sender._bufferedBytes;
	  }

	  /**
	   * @type {String}
	   */
	  get extensions() {
	    return Object.keys(this._extensions).join();
	  }

	  /**
	   * @type {String}
	   */
	  get protocol() {
	    return this._protocol;
	  }

	  /**
	   * @type {Number}
	   */
	  get readyState() {
	    return this._readyState;
	  }

	  /**
	   * @type {String}
	   */
	  get url() {
	    return this._url;
	  }

	  /**
	   * Set up the socket and the internal resources.
	   *
	   * @param {net.Socket} socket The network socket between the server and client
	   * @param {Buffer} head The first packet of the upgraded stream
	   * @param {Number} [maxPayload=0] The maximum allowed message size
	   * @private
	   */
	  setSocket(socket, head, maxPayload) {
	    const receiver$1 = new receiver(
	      this.binaryType,
	      this._extensions,
	      this._isServer,
	      maxPayload
	    );

	    this._sender = new sender(socket, this._extensions);
	    this._receiver = receiver$1;
	    this._socket = socket;

	    receiver$1[kWebSocket$1] = this;
	    socket[kWebSocket$1] = this;

	    receiver$1.on('conclude', receiverOnConclude);
	    receiver$1.on('drain', receiverOnDrain);
	    receiver$1.on('error', receiverOnError);
	    receiver$1.on('message', receiverOnMessage);
	    receiver$1.on('ping', receiverOnPing);
	    receiver$1.on('pong', receiverOnPong);

	    socket.setTimeout(0);
	    socket.setNoDelay();

	    if (head.length > 0) socket.unshift(head);

	    socket.on('close', socketOnClose);
	    socket.on('data', socketOnData);
	    socket.on('end', socketOnEnd);
	    socket.on('error', socketOnError$1);

	    this._readyState = WebSocket$1.OPEN;
	    this.emit('open');
	  }

	  /**
	   * Emit the `'close'` event.
	   *
	   * @private
	   */
	  emitClose() {
	    if (!this._socket) {
	      this._readyState = WebSocket$1.CLOSED;
	      this.emit('close', this._closeCode, this._closeMessage);
	      return;
	    }

	    if (this._extensions[permessageDeflate.extensionName]) {
	      this._extensions[permessageDeflate.extensionName].cleanup();
	    }

	    this._receiver.removeAllListeners();
	    this._readyState = WebSocket$1.CLOSED;
	    this.emit('close', this._closeCode, this._closeMessage);
	  }

	  /**
	   * Start a closing handshake.
	   *
	   *          +----------+   +-----------+   +----------+
	   *     - - -|ws.close()|-->|close frame|-->|ws.close()|- - -
	   *    |     +----------+   +-----------+   +----------+     |
	   *          +----------+   +-----------+         |
	   * CLOSING  |ws.close()|<--|close frame|<--+-----+       CLOSING
	   *          +----------+   +-----------+   |
	   *    |           |                        |   +---+        |
	   *                +------------------------+-->|fin| - - - -
	   *    |         +---+                      |   +---+
	   *     - - - - -|fin|<---------------------+
	   *              +---+
	   *
	   * @param {Number} [code] Status code explaining why the connection is closing
	   * @param {String} [data] A string explaining why the connection is closing
	   * @public
	   */
	  close(code, data) {
	    if (this.readyState === WebSocket$1.CLOSED) return;
	    if (this.readyState === WebSocket$1.CONNECTING) {
	      const msg = 'WebSocket was closed before the connection was established';
	      return abortHandshake$1(this, this._req, msg);
	    }

	    if (this.readyState === WebSocket$1.CLOSING) {
	      if (this._closeFrameSent && this._closeFrameReceived) this._socket.end();
	      return;
	    }

	    this._readyState = WebSocket$1.CLOSING;
	    this._sender.close(code, data, !this._isServer, (err) => {
	      //
	      // This error is handled by the `'error'` listener on the socket. We only
	      // want to know if the close frame has been sent here.
	      //
	      if (err) return;

	      this._closeFrameSent = true;
	      if (this._closeFrameReceived) this._socket.end();
	    });

	    //
	    // Specify a timeout for the closing handshake to complete.
	    //
	    this._closeTimer = setTimeout(
	      this._socket.destroy.bind(this._socket),
	      closeTimeout
	    );
	  }

	  /**
	   * Send a ping.
	   *
	   * @param {*} [data] The data to send
	   * @param {Boolean} [mask] Indicates whether or not to mask `data`
	   * @param {Function} [cb] Callback which is executed when the ping is sent
	   * @public
	   */
	  ping(data, mask, cb) {
	    if (this.readyState === WebSocket$1.CONNECTING) {
	      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');
	    }

	    if (typeof data === 'function') {
	      cb = data;
	      data = mask = undefined;
	    } else if (typeof mask === 'function') {
	      cb = mask;
	      mask = undefined;
	    }

	    if (typeof data === 'number') data = data.toString();

	    if (this.readyState !== WebSocket$1.OPEN) {
	      sendAfterClose(this, data, cb);
	      return;
	    }

	    if (mask === undefined) mask = !this._isServer;
	    this._sender.ping(data || EMPTY_BUFFER, mask, cb);
	  }

	  /**
	   * Send a pong.
	   *
	   * @param {*} [data] The data to send
	   * @param {Boolean} [mask] Indicates whether or not to mask `data`
	   * @param {Function} [cb] Callback which is executed when the pong is sent
	   * @public
	   */
	  pong(data, mask, cb) {
	    if (this.readyState === WebSocket$1.CONNECTING) {
	      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');
	    }

	    if (typeof data === 'function') {
	      cb = data;
	      data = mask = undefined;
	    } else if (typeof mask === 'function') {
	      cb = mask;
	      mask = undefined;
	    }

	    if (typeof data === 'number') data = data.toString();

	    if (this.readyState !== WebSocket$1.OPEN) {
	      sendAfterClose(this, data, cb);
	      return;
	    }

	    if (mask === undefined) mask = !this._isServer;
	    this._sender.pong(data || EMPTY_BUFFER, mask, cb);
	  }

	  /**
	   * Send a data message.
	   *
	   * @param {*} data The message to send
	   * @param {Object} [options] Options object
	   * @param {Boolean} [options.compress] Specifies whether or not to compress
	   *     `data`
	   * @param {Boolean} [options.binary] Specifies whether `data` is binary or
	   *     text
	   * @param {Boolean} [options.fin=true] Specifies whether the fragment is the
	   *     last one
	   * @param {Boolean} [options.mask] Specifies whether or not to mask `data`
	   * @param {Function} [cb] Callback which is executed when data is written out
	   * @public
	   */
	  send(data, options, cb) {
	    if (this.readyState === WebSocket$1.CONNECTING) {
	      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');
	    }

	    if (typeof options === 'function') {
	      cb = options;
	      options = {};
	    }

	    if (typeof data === 'number') data = data.toString();

	    if (this.readyState !== WebSocket$1.OPEN) {
	      sendAfterClose(this, data, cb);
	      return;
	    }

	    const opts = {
	      binary: typeof data !== 'string',
	      mask: !this._isServer,
	      compress: true,
	      fin: true,
	      ...options
	    };

	    if (!this._extensions[permessageDeflate.extensionName]) {
	      opts.compress = false;
	    }

	    this._sender.send(data || EMPTY_BUFFER, opts, cb);
	  }

	  /**
	   * Forcibly close the connection.
	   *
	   * @public
	   */
	  terminate() {
	    if (this.readyState === WebSocket$1.CLOSED) return;
	    if (this.readyState === WebSocket$1.CONNECTING) {
	      const msg = 'WebSocket was closed before the connection was established';
	      return abortHandshake$1(this, this._req, msg);
	    }

	    if (this._socket) {
	      this._readyState = WebSocket$1.CLOSING;
	      this._socket.destroy();
	    }
	  }
	}

	readyStates.forEach((readyState, i) => {
	  const descriptor = { enumerable: true, value: i };

	  Object.defineProperty(WebSocket$1.prototype, readyState, descriptor);
	  Object.defineProperty(WebSocket$1, readyState, descriptor);
	});

	[
	  'binaryType',
	  'bufferedAmount',
	  'extensions',
	  'protocol',
	  'readyState',
	  'url'
	].forEach((property) => {
	  Object.defineProperty(WebSocket$1.prototype, property, { enumerable: true });
	});

	//
	// Add the `onopen`, `onerror`, `onclose`, and `onmessage` attributes.
	// See https://html.spec.whatwg.org/multipage/comms.html#the-websocket-interface
	//
	['open', 'error', 'close', 'message'].forEach((method) => {
	  Object.defineProperty(WebSocket$1.prototype, `on${method}`, {
	    configurable: true,
	    enumerable: true,
	    /**
	     * Return the listener of the event.
	     *
	     * @return {(Function|undefined)} The event listener or `undefined`
	     * @public
	     */
	    get() {
	      const listeners = this.listeners(method);
	      for (let i = 0; i < listeners.length; i++) {
	        if (listeners[i]._listener) return listeners[i]._listener;
	      }

	      return undefined;
	    },
	    /**
	     * Add a listener for the event.
	     *
	     * @param {Function} listener The listener to add
	     * @public
	     */
	    set(listener) {
	      const listeners = this.listeners(method);
	      for (let i = 0; i < listeners.length; i++) {
	        //
	        // Remove only the listeners added via `addEventListener`.
	        //
	        if (listeners[i]._listener) this.removeListener(method, listeners[i]);
	      }
	      this.addEventListener(method, listener);
	    }
	  });
	});

	WebSocket$1.prototype.addEventListener = addEventListener;
	WebSocket$1.prototype.removeEventListener = removeEventListener;

	var websocket = WebSocket$1;

	/**
	 * Initialize a WebSocket client.
	 *
	 * @param {WebSocket} websocket The client to initialize
	 * @param {(String|url.URL)} address The URL to which to connect
	 * @param {String} [protocols] The subprotocols
	 * @param {Object} [options] Connection options
	 * @param {(Boolean|Object)} [options.perMessageDeflate=true] Enable/disable
	 *     permessage-deflate
	 * @param {Number} [options.handshakeTimeout] Timeout in milliseconds for the
	 *     handshake request
	 * @param {Number} [options.protocolVersion=13] Value of the
	 *     `Sec-WebSocket-Version` header
	 * @param {String} [options.origin] Value of the `Origin` or
	 *     `Sec-WebSocket-Origin` header
	 * @param {Number} [options.maxPayload=104857600] The maximum allowed message
	 *     size
	 * @param {Boolean} [options.followRedirects=false] Whether or not to follow
	 *     redirects
	 * @param {Number} [options.maxRedirects=10] The maximum number of redirects
	 *     allowed
	 * @private
	 */
	function initAsClient(websocket, address, protocols, options) {
	  const opts = {
	    protocolVersion: protocolVersions[1],
	    maxPayload: 100 * 1024 * 1024,
	    perMessageDeflate: true,
	    followRedirects: false,
	    maxRedirects: 10,
	    ...options,
	    createConnection: undefined,
	    socketPath: undefined,
	    hostname: undefined,
	    protocol: undefined,
	    timeout: undefined,
	    method: undefined,
	    host: undefined,
	    path: undefined,
	    port: undefined
	  };

	  if (!protocolVersions.includes(opts.protocolVersion)) {
	    throw new RangeError(
	      `Unsupported protocol version: ${opts.protocolVersion} ` +
	        `(supported versions: ${protocolVersions.join(', ')})`
	    );
	  }

	  let parsedUrl;

	  if (address instanceof URL) {
	    parsedUrl = address;
	    websocket._url = address.href;
	  } else {
	    parsedUrl = new URL(address);
	    websocket._url = address;
	  }

	  const isUnixSocket = parsedUrl.protocol === 'ws+unix:';

	  if (!parsedUrl.host && (!isUnixSocket || !parsedUrl.pathname)) {
	    throw new Error(`Invalid URL: ${websocket.url}`);
	  }

	  const isSecure =
	    parsedUrl.protocol === 'wss:' || parsedUrl.protocol === 'https:';
	  const defaultPort = isSecure ? 443 : 80;
	  const key = randomBytes(16).toString('base64');
	  const get = isSecure ? https__default['default'].get : http__default['default'].get;
	  let perMessageDeflate;

	  opts.createConnection = isSecure ? tlsConnect : netConnect;
	  opts.defaultPort = opts.defaultPort || defaultPort;
	  opts.port = parsedUrl.port || defaultPort;
	  opts.host = parsedUrl.hostname.startsWith('[')
	    ? parsedUrl.hostname.slice(1, -1)
	    : parsedUrl.hostname;
	  opts.headers = {
	    'Sec-WebSocket-Version': opts.protocolVersion,
	    'Sec-WebSocket-Key': key,
	    Connection: 'Upgrade',
	    Upgrade: 'websocket',
	    ...opts.headers
	  };
	  opts.path = parsedUrl.pathname + parsedUrl.search;
	  opts.timeout = opts.handshakeTimeout;

	  if (opts.perMessageDeflate) {
	    perMessageDeflate = new permessageDeflate(
	      opts.perMessageDeflate !== true ? opts.perMessageDeflate : {},
	      false,
	      opts.maxPayload
	    );
	    opts.headers['Sec-WebSocket-Extensions'] = format$1({
	      [permessageDeflate.extensionName]: perMessageDeflate.offer()
	    });
	  }
	  if (protocols) {
	    opts.headers['Sec-WebSocket-Protocol'] = protocols;
	  }
	  if (opts.origin) {
	    if (opts.protocolVersion < 13) {
	      opts.headers['Sec-WebSocket-Origin'] = opts.origin;
	    } else {
	      opts.headers.Origin = opts.origin;
	    }
	  }
	  if (parsedUrl.username || parsedUrl.password) {
	    opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;
	  }

	  if (isUnixSocket) {
	    const parts = opts.path.split(':');

	    opts.socketPath = parts[0];
	    opts.path = parts[1];
	  }

	  let req = (websocket._req = get(opts));

	  if (opts.timeout) {
	    req.on('timeout', () => {
	      abortHandshake$1(websocket, req, 'Opening handshake has timed out');
	    });
	  }

	  req.on('error', (err) => {
	    if (req === null || req.aborted) return;

	    req = websocket._req = null;
	    websocket._readyState = WebSocket$1.CLOSING;
	    websocket.emit('error', err);
	    websocket.emitClose();
	  });

	  req.on('response', (res) => {
	    const location = res.headers.location;
	    const statusCode = res.statusCode;

	    if (
	      location &&
	      opts.followRedirects &&
	      statusCode >= 300 &&
	      statusCode < 400
	    ) {
	      if (++websocket._redirects > opts.maxRedirects) {
	        abortHandshake$1(websocket, req, 'Maximum redirects exceeded');
	        return;
	      }

	      req.abort();

	      const addr = new URL(location, address);

	      initAsClient(websocket, addr, protocols, options);
	    } else if (!websocket.emit('unexpected-response', req, res)) {
	      abortHandshake$1(
	        websocket,
	        req,
	        `Unexpected server response: ${res.statusCode}`
	      );
	    }
	  });

	  req.on('upgrade', (res, socket, head) => {
	    websocket.emit('upgrade', res);

	    //
	    // The user may have closed the connection from a listener of the `upgrade`
	    // event.
	    //
	    if (websocket.readyState !== WebSocket$1.CONNECTING) return;

	    req = websocket._req = null;

	    const digest = createHash$1('sha1')
	      .update(key + GUID$1)
	      .digest('base64');

	    if (res.headers['sec-websocket-accept'] !== digest) {
	      abortHandshake$1(websocket, socket, 'Invalid Sec-WebSocket-Accept header');
	      return;
	    }

	    const serverProt = res.headers['sec-websocket-protocol'];
	    const protList = (protocols || '').split(/, */);
	    let protError;

	    if (!protocols && serverProt) {
	      protError = 'Server sent a subprotocol but none was requested';
	    } else if (protocols && !serverProt) {
	      protError = 'Server sent no subprotocol';
	    } else if (serverProt && !protList.includes(serverProt)) {
	      protError = 'Server sent an invalid subprotocol';
	    }

	    if (protError) {
	      abortHandshake$1(websocket, socket, protError);
	      return;
	    }

	    if (serverProt) websocket._protocol = serverProt;

	    if (perMessageDeflate) {
	      try {
	        const extensions = parse$1(res.headers['sec-websocket-extensions']);

	        if (extensions[permessageDeflate.extensionName]) {
	          perMessageDeflate.accept(extensions[permessageDeflate.extensionName]);
	          websocket._extensions[
	            permessageDeflate.extensionName
	          ] = perMessageDeflate;
	        }
	      } catch (err) {
	        abortHandshake$1(
	          websocket,
	          socket,
	          'Invalid Sec-WebSocket-Extensions header'
	        );
	        return;
	      }
	    }

	    websocket.setSocket(socket, head, opts.maxPayload);
	  });
	}

	/**
	 * Create a `net.Socket` and initiate a connection.
	 *
	 * @param {Object} options Connection options
	 * @return {net.Socket} The newly created socket used to start the connection
	 * @private
	 */
	function netConnect(options) {
	  options.path = options.socketPath;
	  return net__default['default'].connect(options);
	}

	/**
	 * Create a `tls.TLSSocket` and initiate a connection.
	 *
	 * @param {Object} options Connection options
	 * @return {tls.TLSSocket} The newly created socket used to start the connection
	 * @private
	 */
	function tlsConnect(options) {
	  options.path = undefined;

	  if (!options.servername && options.servername !== '') {
	    options.servername = net__default['default'].isIP(options.host) ? '' : options.host;
	  }

	  return tls__default['default'].connect(options);
	}

	/**
	 * Abort the handshake and emit an error.
	 *
	 * @param {WebSocket} websocket The WebSocket instance
	 * @param {(http.ClientRequest|net.Socket)} stream The request to abort or the
	 *     socket to destroy
	 * @param {String} message The error message
	 * @private
	 */
	function abortHandshake$1(websocket, stream, message) {
	  websocket._readyState = WebSocket$1.CLOSING;

	  const err = new Error(message);
	  Error.captureStackTrace(err, abortHandshake$1);

	  if (stream.setHeader) {
	    stream.abort();
	    stream.once('abort', websocket.emitClose.bind(websocket));
	    websocket.emit('error', err);
	  } else {
	    stream.destroy(err);
	    stream.once('error', websocket.emit.bind(websocket, 'error'));
	    stream.once('close', websocket.emitClose.bind(websocket));
	  }
	}

	/**
	 * Handle cases where the `ping()`, `pong()`, or `send()` methods are called
	 * when the `readyState` attribute is `CLOSING` or `CLOSED`.
	 *
	 * @param {WebSocket} websocket The WebSocket instance
	 * @param {*} [data] The data to send
	 * @param {Function} [cb] Callback
	 * @private
	 */
	function sendAfterClose(websocket, data, cb) {
	  if (data) {
	    const length = toBuffer(data).length;

	    //
	    // The `_bufferedAmount` property is used only when the peer is a client and
	    // the opening handshake fails. Under these circumstances, in fact, the
	    // `setSocket()` method is not called, so the `_socket` and `_sender`
	    // properties are set to `null`.
	    //
	    if (websocket._socket) websocket._sender._bufferedBytes += length;
	    else websocket._bufferedAmount += length;
	  }

	  if (cb) {
	    const err = new Error(
	      `WebSocket is not open: readyState ${websocket.readyState} ` +
	        `(${readyStates[websocket.readyState]})`
	    );
	    cb(err);
	  }
	}

	/**
	 * The listener of the `Receiver` `'conclude'` event.
	 *
	 * @param {Number} code The status code
	 * @param {String} reason The reason for closing
	 * @private
	 */
	function receiverOnConclude(code, reason) {
	  const websocket = this[kWebSocket$1];

	  websocket._socket.removeListener('data', socketOnData);
	  websocket._socket.resume();

	  websocket._closeFrameReceived = true;
	  websocket._closeMessage = reason;
	  websocket._closeCode = code;

	  if (code === 1005) websocket.close();
	  else websocket.close(code, reason);
	}

	/**
	 * The listener of the `Receiver` `'drain'` event.
	 *
	 * @private
	 */
	function receiverOnDrain() {
	  this[kWebSocket$1]._socket.resume();
	}

	/**
	 * The listener of the `Receiver` `'error'` event.
	 *
	 * @param {(RangeError|Error)} err The emitted error
	 * @private
	 */
	function receiverOnError(err) {
	  const websocket = this[kWebSocket$1];

	  websocket._socket.removeListener('data', socketOnData);

	  websocket._readyState = WebSocket$1.CLOSING;
	  websocket._closeCode = err[kStatusCode];
	  websocket.emit('error', err);
	  websocket._socket.destroy();
	}

	/**
	 * The listener of the `Receiver` `'finish'` event.
	 *
	 * @private
	 */
	function receiverOnFinish() {
	  this[kWebSocket$1].emitClose();
	}

	/**
	 * The listener of the `Receiver` `'message'` event.
	 *
	 * @param {(String|Buffer|ArrayBuffer|Buffer[])} data The message
	 * @private
	 */
	function receiverOnMessage(data) {
	  this[kWebSocket$1].emit('message', data);
	}

	/**
	 * The listener of the `Receiver` `'ping'` event.
	 *
	 * @param {Buffer} data The data included in the ping frame
	 * @private
	 */
	function receiverOnPing(data) {
	  const websocket = this[kWebSocket$1];

	  websocket.pong(data, !websocket._isServer, NOOP);
	  websocket.emit('ping', data);
	}

	/**
	 * The listener of the `Receiver` `'pong'` event.
	 *
	 * @param {Buffer} data The data included in the pong frame
	 * @private
	 */
	function receiverOnPong(data) {
	  this[kWebSocket$1].emit('pong', data);
	}

	/**
	 * The listener of the `net.Socket` `'close'` event.
	 *
	 * @private
	 */
	function socketOnClose() {
	  const websocket = this[kWebSocket$1];

	  this.removeListener('close', socketOnClose);
	  this.removeListener('end', socketOnEnd);

	  websocket._readyState = WebSocket$1.CLOSING;

	  //
	  // The close frame might not have been received or the `'end'` event emitted,
	  // for example, if the socket was destroyed due to an error. Ensure that the
	  // `receiver` stream is closed after writing any remaining buffered data to
	  // it. If the readable side of the socket is in flowing mode then there is no
	  // buffered data as everything has been already written and `readable.read()`
	  // will return `null`. If instead, the socket is paused, any possible buffered
	  // data will be read as a single chunk and emitted synchronously in a single
	  // `'data'` event.
	  //
	  websocket._socket.read();
	  websocket._receiver.end();

	  this.removeListener('data', socketOnData);
	  this[kWebSocket$1] = undefined;

	  clearTimeout(websocket._closeTimer);

	  if (
	    websocket._receiver._writableState.finished ||
	    websocket._receiver._writableState.errorEmitted
	  ) {
	    websocket.emitClose();
	  } else {
	    websocket._receiver.on('error', receiverOnFinish);
	    websocket._receiver.on('finish', receiverOnFinish);
	  }
	}

	/**
	 * The listener of the `net.Socket` `'data'` event.
	 *
	 * @param {Buffer} chunk A chunk of data
	 * @private
	 */
	function socketOnData(chunk) {
	  if (!this[kWebSocket$1]._receiver.write(chunk)) {
	    this.pause();
	  }
	}

	/**
	 * The listener of the `net.Socket` `'end'` event.
	 *
	 * @private
	 */
	function socketOnEnd() {
	  const websocket = this[kWebSocket$1];

	  websocket._readyState = WebSocket$1.CLOSING;
	  websocket._receiver.end();
	  this.end();
	}

	/**
	 * The listener of the `net.Socket` `'error'` event.
	 *
	 * @private
	 */
	function socketOnError$1() {
	  const websocket = this[kWebSocket$1];

	  this.removeListener('error', socketOnError$1);
	  this.on('error', NOOP);

	  if (websocket) {
	    websocket._readyState = WebSocket$1.CLOSING;
	    this.destroy();
	  }
	}

	const { Duplex } = require$$0__default['default'];

	/**
	 * Emits the `'close'` event on a stream.
	 *
	 * @param {stream.Duplex} The stream.
	 * @private
	 */
	function emitClose$1(stream) {
	  stream.emit('close');
	}

	/**
	 * The listener of the `'end'` event.
	 *
	 * @private
	 */
	function duplexOnEnd() {
	  if (!this.destroyed && this._writableState.finished) {
	    this.destroy();
	  }
	}

	/**
	 * The listener of the `'error'` event.
	 *
	 * @param {Error} err The error
	 * @private
	 */
	function duplexOnError(err) {
	  this.removeListener('error', duplexOnError);
	  this.destroy();
	  if (this.listenerCount('error') === 0) {
	    // Do not suppress the throwing behavior.
	    this.emit('error', err);
	  }
	}

	/**
	 * Wraps a `WebSocket` in a duplex stream.
	 *
	 * @param {WebSocket} ws The `WebSocket` to wrap
	 * @param {Object} [options] The options for the `Duplex` constructor
	 * @return {stream.Duplex} The duplex stream
	 * @public
	 */
	function createWebSocketStream(ws, options) {
	  let resumeOnReceiverDrain = true;

	  function receiverOnDrain() {
	    if (resumeOnReceiverDrain) ws._socket.resume();
	  }

	  if (ws.readyState === ws.CONNECTING) {
	    ws.once('open', function open() {
	      ws._receiver.removeAllListeners('drain');
	      ws._receiver.on('drain', receiverOnDrain);
	    });
	  } else {
	    ws._receiver.removeAllListeners('drain');
	    ws._receiver.on('drain', receiverOnDrain);
	  }

	  const duplex = new Duplex({
	    ...options,
	    autoDestroy: false,
	    emitClose: false,
	    objectMode: false,
	    writableObjectMode: false
	  });

	  ws.on('message', function message(msg) {
	    if (!duplex.push(msg)) {
	      resumeOnReceiverDrain = false;
	      ws._socket.pause();
	    }
	  });

	  ws.once('error', function error(err) {
	    if (duplex.destroyed) return;

	    duplex.destroy(err);
	  });

	  ws.once('close', function close() {
	    if (duplex.destroyed) return;

	    duplex.push(null);
	  });

	  duplex._destroy = function (err, callback) {
	    if (ws.readyState === ws.CLOSED) {
	      callback(err);
	      process.nextTick(emitClose$1, duplex);
	      return;
	    }

	    let called = false;

	    ws.once('error', function error(err) {
	      called = true;
	      callback(err);
	    });

	    ws.once('close', function close() {
	      if (!called) callback(err);
	      process.nextTick(emitClose$1, duplex);
	    });
	    ws.terminate();
	  };

	  duplex._final = function (callback) {
	    if (ws.readyState === ws.CONNECTING) {
	      ws.once('open', function open() {
	        duplex._final(callback);
	      });
	      return;
	    }

	    // If the value of the `_socket` property is `null` it means that `ws` is a
	    // client websocket and the handshake failed. In fact, when this happens, a
	    // socket is never assigned to the websocket. Wait for the `'error'` event
	    // that will be emitted by the websocket.
	    if (ws._socket === null) return;

	    if (ws._socket._writableState.finished) {
	      callback();
	      if (duplex._readableState.endEmitted) duplex.destroy();
	    } else {
	      ws._socket.once('finish', function finish() {
	        // `duplex` is not destroyed here because the `'end'` event will be
	        // emitted on `duplex` after this `'finish'` event. The EOF signaling
	        // `null` chunk is, in fact, pushed when the websocket emits `'close'`.
	        callback();
	      });
	      ws.close();
	    }
	  };

	  duplex._read = function () {
	    if (ws.readyState === ws.OPEN && !resumeOnReceiverDrain) {
	      resumeOnReceiverDrain = true;
	      if (!ws._receiver._writableState.needDrain) ws._socket.resume();
	    }
	  };

	  duplex._write = function (chunk, encoding, callback) {
	    if (ws.readyState === ws.CONNECTING) {
	      ws.once('open', function open() {
	        duplex._write(chunk, encoding, callback);
	      });
	      return;
	    }

	    ws.send(chunk, callback);
	  };

	  duplex.on('end', duplexOnEnd);
	  duplex.on('error', duplexOnError);
	  return duplex;
	}

	var stream = createWebSocketStream;

	const { createHash } = crypto__default['default'];
	const { createServer, STATUS_CODES } = http__default['default'];



	const { format, parse } = extension;
	const { GUID, kWebSocket } = constants$1;

	const keyRegex = /^[+/0-9A-Za-z]{22}==$/;

	/**
	 * Class representing a WebSocket server.
	 *
	 * @extends EventEmitter
	 */
	class WebSocketServer extends EventEmitter__default['default'] {
	  /**
	   * Create a `WebSocketServer` instance.
	   *
	   * @param {Object} options Configuration options
	   * @param {Number} [options.backlog=511] The maximum length of the queue of
	   *     pending connections
	   * @param {Boolean} [options.clientTracking=true] Specifies whether or not to
	   *     track clients
	   * @param {Function} [options.handleProtocols] A hook to handle protocols
	   * @param {String} [options.host] The hostname where to bind the server
	   * @param {Number} [options.maxPayload=104857600] The maximum allowed message
	   *     size
	   * @param {Boolean} [options.noServer=false] Enable no server mode
	   * @param {String} [options.path] Accept only connections matching this path
	   * @param {(Boolean|Object)} [options.perMessageDeflate=false] Enable/disable
	   *     permessage-deflate
	   * @param {Number} [options.port] The port where to bind the server
	   * @param {http.Server} [options.server] A pre-created HTTP/S server to use
	   * @param {Function} [options.verifyClient] A hook to reject connections
	   * @param {Function} [callback] A listener for the `listening` event
	   */
	  constructor(options, callback) {
	    super();

	    options = {
	      maxPayload: 100 * 1024 * 1024,
	      perMessageDeflate: false,
	      handleProtocols: null,
	      clientTracking: true,
	      verifyClient: null,
	      noServer: false,
	      backlog: null, // use default (511 as implemented in net.js)
	      server: null,
	      host: null,
	      path: null,
	      port: null,
	      ...options
	    };

	    if (options.port == null && !options.server && !options.noServer) {
	      throw new TypeError(
	        'One of the "port", "server", or "noServer" options must be specified'
	      );
	    }

	    if (options.port != null) {
	      this._server = createServer((req, res) => {
	        const body = STATUS_CODES[426];

	        res.writeHead(426, {
	          'Content-Length': body.length,
	          'Content-Type': 'text/plain'
	        });
	        res.end(body);
	      });
	      this._server.listen(
	        options.port,
	        options.host,
	        options.backlog,
	        callback
	      );
	    } else if (options.server) {
	      this._server = options.server;
	    }

	    if (this._server) {
	      const emitConnection = this.emit.bind(this, 'connection');

	      this._removeListeners = addListeners(this._server, {
	        listening: this.emit.bind(this, 'listening'),
	        error: this.emit.bind(this, 'error'),
	        upgrade: (req, socket, head) => {
	          this.handleUpgrade(req, socket, head, emitConnection);
	        }
	      });
	    }

	    if (options.perMessageDeflate === true) options.perMessageDeflate = {};
	    if (options.clientTracking) this.clients = new Set();
	    this.options = options;
	  }

	  /**
	   * Returns the bound address, the address family name, and port of the server
	   * as reported by the operating system if listening on an IP socket.
	   * If the server is listening on a pipe or UNIX domain socket, the name is
	   * returned as a string.
	   *
	   * @return {(Object|String|null)} The address of the server
	   * @public
	   */
	  address() {
	    if (this.options.noServer) {
	      throw new Error('The server is operating in "noServer" mode');
	    }

	    if (!this._server) return null;
	    return this._server.address();
	  }

	  /**
	   * Close the server.
	   *
	   * @param {Function} [cb] Callback
	   * @public
	   */
	  close(cb) {
	    if (cb) this.once('close', cb);

	    //
	    // Terminate all associated clients.
	    //
	    if (this.clients) {
	      for (const client of this.clients) client.terminate();
	    }

	    const server = this._server;

	    if (server) {
	      this._removeListeners();
	      this._removeListeners = this._server = null;

	      //
	      // Close the http server if it was internally created.
	      //
	      if (this.options.port != null) {
	        server.close(() => this.emit('close'));
	        return;
	      }
	    }

	    process.nextTick(emitClose, this);
	  }

	  /**
	   * See if a given request should be handled by this server instance.
	   *
	   * @param {http.IncomingMessage} req Request object to inspect
	   * @return {Boolean} `true` if the request is valid, else `false`
	   * @public
	   */
	  shouldHandle(req) {
	    if (this.options.path) {
	      const index = req.url.indexOf('?');
	      const pathname = index !== -1 ? req.url.slice(0, index) : req.url;

	      if (pathname !== this.options.path) return false;
	    }

	    return true;
	  }

	  /**
	   * Handle a HTTP Upgrade request.
	   *
	   * @param {http.IncomingMessage} req The request object
	   * @param {net.Socket} socket The network socket between the server and client
	   * @param {Buffer} head The first packet of the upgraded stream
	   * @param {Function} cb Callback
	   * @public
	   */
	  handleUpgrade(req, socket, head, cb) {
	    socket.on('error', socketOnError);

	    const key =
	      req.headers['sec-websocket-key'] !== undefined
	        ? req.headers['sec-websocket-key'].trim()
	        : false;
	    const version = +req.headers['sec-websocket-version'];
	    const extensions = {};

	    if (
	      req.method !== 'GET' ||
	      req.headers.upgrade.toLowerCase() !== 'websocket' ||
	      !key ||
	      !keyRegex.test(key) ||
	      (version !== 8 && version !== 13) ||
	      !this.shouldHandle(req)
	    ) {
	      return abortHandshake(socket, 400);
	    }

	    if (this.options.perMessageDeflate) {
	      const perMessageDeflate = new permessageDeflate(
	        this.options.perMessageDeflate,
	        true,
	        this.options.maxPayload
	      );

	      try {
	        const offers = parse(req.headers['sec-websocket-extensions']);

	        if (offers[permessageDeflate.extensionName]) {
	          perMessageDeflate.accept(offers[permessageDeflate.extensionName]);
	          extensions[permessageDeflate.extensionName] = perMessageDeflate;
	        }
	      } catch (err) {
	        return abortHandshake(socket, 400);
	      }
	    }

	    //
	    // Optionally call external client verification handler.
	    //
	    if (this.options.verifyClient) {
	      const info = {
	        origin:
	          req.headers[`${version === 8 ? 'sec-websocket-origin' : 'origin'}`],
	        secure: !!(req.socket.authorized || req.socket.encrypted),
	        req
	      };

	      if (this.options.verifyClient.length === 2) {
	        this.options.verifyClient(info, (verified, code, message, headers) => {
	          if (!verified) {
	            return abortHandshake(socket, code || 401, message, headers);
	          }

	          this.completeUpgrade(key, extensions, req, socket, head, cb);
	        });
	        return;
	      }

	      if (!this.options.verifyClient(info)) return abortHandshake(socket, 401);
	    }

	    this.completeUpgrade(key, extensions, req, socket, head, cb);
	  }

	  /**
	   * Upgrade the connection to WebSocket.
	   *
	   * @param {String} key The value of the `Sec-WebSocket-Key` header
	   * @param {Object} extensions The accepted extensions
	   * @param {http.IncomingMessage} req The request object
	   * @param {net.Socket} socket The network socket between the server and client
	   * @param {Buffer} head The first packet of the upgraded stream
	   * @param {Function} cb Callback
	   * @throws {Error} If called more than once with the same socket
	   * @private
	   */
	  completeUpgrade(key, extensions, req, socket, head, cb) {
	    //
	    // Destroy the socket if the client has already sent a FIN packet.
	    //
	    if (!socket.readable || !socket.writable) return socket.destroy();

	    if (socket[kWebSocket]) {
	      throw new Error(
	        'server.handleUpgrade() was called more than once with the same ' +
	          'socket, possibly due to a misconfiguration'
	      );
	    }

	    const digest = createHash('sha1')
	      .update(key + GUID)
	      .digest('base64');

	    const headers = [
	      'HTTP/1.1 101 Switching Protocols',
	      'Upgrade: websocket',
	      'Connection: Upgrade',
	      `Sec-WebSocket-Accept: ${digest}`
	    ];

	    const ws = new websocket(null);
	    let protocol = req.headers['sec-websocket-protocol'];

	    if (protocol) {
	      protocol = protocol.trim().split(/ *, */);

	      //
	      // Optionally call external protocol selection handler.
	      //
	      if (this.options.handleProtocols) {
	        protocol = this.options.handleProtocols(protocol, req);
	      } else {
	        protocol = protocol[0];
	      }

	      if (protocol) {
	        headers.push(`Sec-WebSocket-Protocol: ${protocol}`);
	        ws._protocol = protocol;
	      }
	    }

	    if (extensions[permessageDeflate.extensionName]) {
	      const params = extensions[permessageDeflate.extensionName].params;
	      const value = format({
	        [permessageDeflate.extensionName]: [params]
	      });
	      headers.push(`Sec-WebSocket-Extensions: ${value}`);
	      ws._extensions = extensions;
	    }

	    //
	    // Allow external modification/inspection of handshake headers.
	    //
	    this.emit('headers', headers, req);

	    socket.write(headers.concat('\r\n').join('\r\n'));
	    socket.removeListener('error', socketOnError);

	    ws.setSocket(socket, head, this.options.maxPayload);

	    if (this.clients) {
	      this.clients.add(ws);
	      ws.on('close', () => this.clients.delete(ws));
	    }

	    cb(ws, req);
	  }
	}

	var websocketServer = WebSocketServer;

	/**
	 * Add event listeners on an `EventEmitter` using a map of <event, listener>
	 * pairs.
	 *
	 * @param {EventEmitter} server The event emitter
	 * @param {Object.<String, Function>} map The listeners to add
	 * @return {Function} A function that will remove the added listeners when
	 *     called
	 * @private
	 */
	function addListeners(server, map) {
	  for (const event of Object.keys(map)) server.on(event, map[event]);

	  return function removeListeners() {
	    for (const event of Object.keys(map)) {
	      server.removeListener(event, map[event]);
	    }
	  };
	}

	/**
	 * Emit a `'close'` event on an `EventEmitter`.
	 *
	 * @param {EventEmitter} server The event emitter
	 * @private
	 */
	function emitClose(server) {
	  server.emit('close');
	}

	/**
	 * Handle premature socket errors.
	 *
	 * @private
	 */
	function socketOnError() {
	  this.destroy();
	}

	/**
	 * Close the connection when preconditions are not fulfilled.
	 *
	 * @param {net.Socket} socket The socket of the upgrade request
	 * @param {Number} code The HTTP response status code
	 * @param {String} [message] The HTTP response body
	 * @param {Object} [headers] Additional HTTP response headers
	 * @private
	 */
	function abortHandshake(socket, code, message, headers) {
	  if (socket.writable) {
	    message = message || STATUS_CODES[code];
	    headers = {
	      Connection: 'close',
	      'Content-Type': 'text/html',
	      'Content-Length': Buffer.byteLength(message),
	      ...headers
	    };

	    socket.write(
	      `HTTP/1.1 ${code} ${STATUS_CODES[code]}\r\n` +
	        Object.keys(headers)
	          .map((h) => `${h}: ${headers[h]}`)
	          .join('\r\n') +
	        '\r\n\r\n' +
	        message
	    );
	  }

	  socket.removeListener('error', socketOnError);
	  socket.destroy();
	}

	websocket.createWebSocketStream = stream;
	websocket.Server = websocketServer;
	websocket.Receiver = receiver;
	websocket.Sender = sender;

	var ws = websocket;

	/**
	 * Copyright (C) 2016 Maxime Petazzoni <maxime.petazzoni@bulix.org>.
	 * All rights reserved.
	 */

	var sse = createCommonjsModule(function (module, exports) {
	var SSE = function (url, options) {
	  if (!(this instanceof SSE)) {
	    return new SSE(url, options);
	  }

	  this.INITIALIZING = -1;
	  this.CONNECTING = 0;
	  this.OPEN = 1;
	  this.CLOSED = 2;

	  this.url = url;

	  options = options || {};
	  this.headers = options.headers || {};
	  this.payload = options.payload !== undefined ? options.payload : '';
	  this.method = options.method || (this.payload && 'POST' || 'GET');

	  this.FIELD_SEPARATOR = ':';
	  this.listeners = {};

	  this.xhr = null;
	  this.readyState = this.INITIALIZING;
	  this.progress = 0;
	  this.chunk = '';

	  this.addEventListener = function(type, listener) {
	    if (this.listeners[type] === undefined) {
	      this.listeners[type] = [];
	    }

	    if (this.listeners[type].indexOf(listener) === -1) {
	      this.listeners[type].push(listener);
	    }
	  };

	  this.removeEventListener = function(type, listener) {
	    if (this.listeners[type] === undefined) {
	      return;
	    }

	    var filtered = [];
	    this.listeners[type].forEach(function(element) {
	      if (element !== listener) {
	        filtered.push(element);
	      }
	    });
	    if (filtered.length === 0) {
	      delete this.listeners[type];
	    } else {
	      this.listeners[type] = filtered;
	    }
	  };

	  this.dispatchEvent = function(e) {
	    if (!e) {
	      return true;
	    }

	    e.source = this;

	    var onHandler = 'on' + e.type;
	    if (this.hasOwnProperty(onHandler)) {
	      this[onHandler].call(this, e);
	      if (e.defaultPrevented) {
	        return false;
	      }
	    }

	    if (this.listeners[e.type]) {
	      return this.listeners[e.type].every(function(callback) {
	        callback(e);
	        return !e.defaultPrevented;
	      });
	    }

	    return true;
	  };

	  this._setReadyState = function (state) {
	    var event = new CustomEvent('readystatechange');
	    event.readyState = state;
	    this.readyState = state;
	    this.dispatchEvent(event);
	  };

	  this._onStreamFailure = function(e) {
	    this.dispatchEvent(new CustomEvent('error'));
	    this.close();
	  };

	  this._onStreamProgress = function(e) {
	    if (!this.xhr) {
	      return;
	    }
	    
	    if (this.xhr.status !== 200) {
	      this._onStreamFailure(e);
	      return;
	    }

	    if (this.readyState == this.CONNECTING) {
	      this.dispatchEvent(new CustomEvent('open'));
	      this._setReadyState(this.OPEN);
	    }

	    var data = this.xhr.responseText.substring(this.progress);
	    this.progress += data.length;
	    data.split(/(\r\n|\r|\n){2}/g).forEach(function(part) {
	      if (part.trim().length === 0) {
	        this.dispatchEvent(this._parseEventChunk(this.chunk.trim()));
	        this.chunk = '';
	      } else {
	        this.chunk += part;
	      }
	    }.bind(this));
	  };

	  this._onStreamLoaded = function(e) {
	    this._onStreamProgress(e);

	    // Parse the last chunk.
	    this.dispatchEvent(this._parseEventChunk(this.chunk));
	    this.chunk = '';
	  };

	  /**
	   * Parse a received SSE event chunk into a constructed event object.
	   */
	  this._parseEventChunk = function(chunk) {
	    if (!chunk || chunk.length === 0) {
	      return null;
	    }

	    var e = {'id': null, 'retry': null, 'data': '', 'event': 'message'};
	    chunk.split(/\n|\r\n|\r/).forEach(function(line) {
	      line = line.trimRight();
	      var index = line.indexOf(this.FIELD_SEPARATOR);
	      if (index <= 0) {
	        // Line was either empty, or started with a separator and is a comment.
	        // Either way, ignore.
	        return;
	      }

	      var field = line.substring(0, index);
	      if (!(field in e)) {
	        return;
	      }

	      var value = line.substring(index + 1).trimLeft();
	      if (field === 'data') {
	        e[field] += value;
	      } else {
	        e[field] = value;
	      }
	    }.bind(this));

	    var event = new CustomEvent(e.event);
	    event.data = e.data;
	    event.id = e.id;
	    return event;
	  };

	  this._checkStreamClosed = function() {
	    if (!this.xhr) {
	      return;
	    }

	    if (this.xhr.readyState === XMLHttpRequest.DONE) {
	      this._setReadyState(this.CLOSED);
	    }
	  };

	  this.stream = function() {
	    this._setReadyState(this.CONNECTING);

	    this.xhr = new XMLHttpRequest();
	    this.xhr.addEventListener('progress', this._onStreamProgress.bind(this));
	    this.xhr.addEventListener('load', this._onStreamLoaded.bind(this));
	    this.xhr.addEventListener('readystatechange', this._checkStreamClosed.bind(this));
	    this.xhr.addEventListener('error', this._onStreamFailure.bind(this));
	    this.xhr.addEventListener('abort', this._onStreamFailure.bind(this));
	    this.xhr.open(this.method, this.url);
	    for (var header in this.headers) {
	      this.xhr.setRequestHeader(header, this.headers[header]);
	    }
	    this.xhr.send(this.payload);
	  };

	  this.close = function() {
	    if (this.readyState === this.CLOSED) {
	      return;
	    }

	    this.xhr.abort();
	    this.xhr = null;
	    this._setReadyState(this.CLOSED);
	  };
	};

	// Export our SSE module for npm.js
	{
	  exports.SSE = SSE;
	}
	});

	// Copyright (C) 2016 SignalFx, Inc. All rights reserved.




	var WebSocket = null;
	try {
	  //huge hack.
	  WebSocket = window.WebSocket; // eslint-disable-line
	} catch (e) {
	  WebSocket = ws;
	}




	function RequestManager(options) {
	  var awaitingKeepaliveConfirmation = false;
	  var knownComputations = {};
	  var requestIdIndex = 0;
	  var maxJobCount = 10000;
	  var authToken = null;
	  var sfxEndpoint = conf.DEFAULT_API_ENDPOINT; // TODO : SSE support?
	  var wsEndpoint = conf.DEFAULT_SIGNALFLOW_WEBSOCKET_ENDPOINT;
	  var pendingWSRequests = [];
	  var wsConnectionOpen = false;

	  var socketError = function (evt) {
	    throw new Error('Socket error: ' + evt);
	  };

	  if (options && options.signalflowEndpoint) {
	    wsEndpoint = options.signalflowEndpoint;
	  }

	  if (options && options.apiEndpoint) {
	    sfxEndpoint = options.apiEndpoint;
	  }

	  if (options && options.webSocketErrorCallback && options.webSocketErrorCallback instanceof Function) {
	    socketError = options.webSocketErrorCallback;
	  }

	  //move me to constants
	  var transports = {
	    WEBSOCKET: 1,
	    SSE: 2
	  };

	  var requiredParams = {
	    execute: ['program'],
	    explain: ['incidentId']
	  };

	  var activeSocket = null;
	  var transport = transport || transports.WEBSOCKET;
	  var lastKeepAliveTime = -1;
	  var warnedDisconnected = false;
	  var keepAliveInterval = null;

	  function getRequestIdAndIncrement() {
	    return 'R' + requestIdIndex++;
	  }

	  function onWebSocketMessage(msg) {
	    // since we(reasonably) do the whole message at once and dont know the binary channel id upfront,
	    // we need to pass known computations so that the specific channel's bignumber state can be used
	    // when determining the value of a binary message. would be nice to pass a function instead at some point
	    var parsedMsg = websocket_message_parser.parseWebSocketMessage(msg, knownComputations);
	    if (parsedMsg.event === 'KEEP_ALIVE') {
	      lastKeepAliveTime = Date.now();
	      if (awaitingKeepaliveConfirmation) {
	        Object.keys(knownComputations).forEach(function (computation) {
	          knownComputations[computation].streamController.retry();
	        });
	        awaitingKeepaliveConfirmation = false;
	      }
	    }

	    if (parsedMsg.event === 'JOB_START') {
	      if (!knownComputations[parsedMsg.channel]) {
	        //this occurs when the job has been stopped before it started
	        return;
	      }
	      knownComputations[parsedMsg.channel].handle = parsedMsg.handle;
	      if (knownComputations[parsedMsg.channel].pendingStop) {
	        stop(parsedMsg.channel);
	      }
	    }

	    if (parsedMsg.type === 'authenticated') {
	      flushPendingWSRequests();
	    }

	    if (parsedMsg.channel) {
	      //do not attempt to route messages that lack a channel, such as keepalive
	      routeMessage(parsedMsg, parsedMsg.channel);
	    }

	    // This must always be last, or there dont be a request to route this message to.
	    if (parsedMsg.event === 'END_OF_CHANNEL') {
	      removeComputation(parsedMsg.channel);
	    }
	  }

	  function flushPendingWSRequests() {
	    pendingWSRequests.forEach(function (pendingRequest) {
	      if (pendingRequest.requestType === 'registerLivetail') {
	        pendingRequest.callback();
	      } else {
	        streamComputationWebsocket(pendingRequest.params, pendingRequest.requestId, pendingRequest.callback, pendingRequest.requestType, pendingRequest.isRetryPatchMode);
	      }
	    });
	    pendingWSRequests = [];
	  }

	  function hasRequiredJobParams(params, requestType) {
	    var hasErrors = false;
	    (requiredParams[requestType] || []).forEach(function (reqParam) {
	      if (!params[reqParam]) {
	        console.error('Unable to create signalflow request without required property : ' + reqParam);
	        hasErrors = true;
	      }
	    });
	    return hasErrors === false;
	  }

	  function validateJobParams(params, requestType) {
	    if (!hasRequiredJobParams(params, requestType)) {
	      throw new Error('There were insufficient parameters in the request.');
	    }
	  }

	  function getJobObject(params, requestType) {
	    validateJobParams(params, requestType);
	    var obj = {};
	    Object.keys(params).forEach(function (paramName) {
	      // TODO : we should deep copy here to prevent weirdness if we eventually allow non string/number/boolean values...
	      obj[paramName] = params[paramName];
	    });
	    return obj;
	  }

	  function reconnect(token) {
	    wsConnectionOpen = false;
	    authenticate(token);
	    awaitingKeepaliveConfirmation = true;
	  }

	  function authenticate(token) {
	    authToken = token;
	    if (transport === transports.SSE) ; else if (transport === transports.WEBSOCKET) {
	      lastKeepAliveTime = Date.now();
	      if (keepAliveInterval) {
	        clearInterval(keepAliveInterval);
	      }
	      keepAliveInterval = setInterval(function () {
	        if ((Date.now() - lastKeepAliveTime) > 60000) {
	          if (!warnedDisconnected) {
	            warnedDisconnected = true;
	            console.error('Socket disconnected.');
	            //TODO: alert all channels?
	          }
	          reconnect(token);
	        }
	      }, 5000);
	      if (activeSocket) {
	        activeSocket.close();
	      }

	      activeSocket = new WebSocket(wsEndpoint + '/v2/signalflow/connect');
	      activeSocket.binaryType = 'arraybuffer';
	      activeSocket.onmessage = onWebSocketMessage;
	      activeSocket.onerror = socketError;
	      activeSocket.onopen = function (ev) {
	        activeSocket.send(JSON.stringify({type: 'authenticate', token: authToken}));
	        wsConnectionOpen = true;
	      };
	    } else {
	      console.error('Unrecognized transport type.');
	    }
	  }

	  function routeMessage(msg, requestId) {
	    if (knownComputations[requestId]) {
	      knownComputations[requestId].onMessage(msg);
	    }
	  }

	  function getNormalizedStreamTracker(streamObject) {
	    if (streamObject.transport === transports.WEBSOCKET) {
	      return {
	        stop: function (reason) {
	          activeSocket.send(JSON.stringify({
	            type: 'detach',
	            channel: streamObject.requestId,
	            reason: reason || 'Stopped by client request.'
	          }));
	          removeComputation(streamObject.requestId);
	          return true;
	        },
	        retry: function () {
	          var originalRange = streamObject.range;
	          var dataDelta = Date.now() - streamObject.lastDataBatchTime();
	          var patchMode = dataDelta < originalRange;

	          if (patchMode) {
	            streamObject.params.start = streamObject.lastDataBatchTime();
	          } else {
	            streamObject.params.start = Date.now() - originalRange;
	          }
	          removeComputation(streamObject.requestId);
	          execute(streamObject.params, streamObject.callback, streamObject.requestId, streamObject.requestType, patchMode);
	        }
	      };
	    } else if (streamObject.transport === transports.SSE) {
	      return {
	        stop: function () {
	          streamObject.SSE.close();
	          return true;
	        },
	        retry: function () {
	          //NYI
	        }
	      };
	    }
	  }

	  function addComputation(params, requestId, transportType, cb, requestType, isRetryPatchMode) {
	    cb = cb || {};
	    var router = message_router(params, cb.onMessage, cb.onError, isRetryPatchMode);
	    var range = params.range;
	    if (!range) {
	      range = (params.end ? params.end : Date.now()) - params.start;
	    }
	    knownComputations[requestId] = {
	      params: params,
	      callback: cb,
	      onMessage: router.onMessage,
	      transport: transportType,
	      requestId: requestId,
	      lastDataBatchTime: router.getLatestBatchTimeStamp,
	      range: range,
	      requestType: requestType, // unused at the moment but useful for debugging
	      isRetryPatchMode: isRetryPatchMode
	    };

	    knownComputations[requestId].streamController = getNormalizedStreamTracker(knownComputations[requestId]);
	    return knownComputations[requestId];
	  }

	  function streamComputationWebsocket(params, requestId, cb, requestType, isRetryPatchMode) {
	    if (!wsConnectionOpen) {
	      pendingWSRequests.push({
	        params: params,
	        requestId: requestId,
	        callback: cb,
	        requestType: requestType,
	        isRetryPatchMode: isRetryPatchMode});
	    } else {
	      addComputation(params, requestId, transports.WEBSOCKET, cb, requestType, isRetryPatchMode);
	      var jobObject = getJobObject(params, requestType);
	      jobObject.type = requestType;
	      jobObject.channel = requestId;
	      activeSocket.send(JSON.stringify(jobObject));
	    }
	  }

	  function streamComputationSSE(params, requestId, requestType, isRetryPatchMode) {
	    var comp = addComputation(params, requestId, transports.SSE, null, requestType, isRetryPatchMode);
	    var myStream = new sse(sfxEndpoint + '/v2/signalflow/' + requestType, {
	      headers: {
	        'X-SF-TOKEN': authToken
	      },
	      payload: params.program,
	      method: 'POST'
	    });


	    myStream.addEventListener('message', function (e) {
	      //call appropriate callback on params
	      if (e.data) {
	        var msg = JSON.parse(e.data);
	        msg.type = 'message';
	        routeMessage(msg, requestId);
	      }
	    });

	    myStream.addEventListener('data', function (e) {
	      var msg = JSON.parse(e.data);
	      msg.type = 'data';
	      routeMessage(msg, requestId);
	    });

	    myStream.addEventListener('metadata', function (e) {
	      //call appropriate callback on params
	      var msg = JSON.parse(e.data);
	      msg.type = 'metadata';
	      routeMessage(msg, requestId);
	    });

	    myStream.addEventListener('error', function (e) {
	      // this is pretty coarse logic, but basically on error make sure we aren't tracking this job for restarts if its finished
	      // for now, on any error, remove the computation.  we need to improve error messages because its not possible to determine
	      // if an error was due to a bad request or something else, and we don't know when to retry
	      //if(true || streamObject.stopRequested || params.stop > -1 && ((streamObject.lastSeenDataTime + (streamObject.resolution || 0)) > params.stop)) {
	      //  removeComputation(streamObject.requestId);
	      //} else {
	      //  //infinite duration.  is this safe to do?
	      //  if(streamObject.start) {
	      //    var startOffset = streamObject.start + (Date.now() - streamObject.initTime);
	      //    // set the new start time to be the greater of time elapsed - range, or last datapoint seen from server
	      //    streamObject.start = Math.max(startOffset, streamObject.lastSeenDataTime || 0);
	      //  }
	      //
	      //  //for websockets, this would be global, not per stream
	      //  console.log('retry queued for '+streamObject.requestId);
	      //  streamObject.restartPending = true;
	      //}
	    });

	    myStream.stream();

	    comp.SSE = myStream;
	  }

	  function removeComputation(requestId) {
	    if (knownComputations[requestId]) {
	      knownComputations[requestId].stopRequested = true;
	      delete knownComputations[requestId];
	      return true;
	    } else {
	      return false;
	    }
	  }

	  function execute(params, cb, overrideRequestId, optionalRequestType, isRetryPatchMode) {
	    var requestType = optionalRequestType || 'execute';
	    if (!hasRequiredJobParams(params, requestType)) {
	      console.error('There were insufficient parameters in the request.');
	      return;
	    }
	    if (Object.keys(knownComputations).length >= maxJobCount) {
	      console.error('Too many active jobs open!  Stop one of the returned IDs to proceed.  ');
	      return Object.keys(knownComputations);
	    }
	    params.compress = typeof params.compress === 'undefined' ? conf.COMPRESS_SIGNALFLOW_WEBSOCKET_MESSAGES : params.compress;
	    var requestId = overrideRequestId || getRequestIdAndIncrement();
	    //todo : deep copy params?

	    if (transport === transports.SSE) {
	      streamComputationSSE(params, requestId, requestType, isRetryPatchMode);
	    } else if (transport === transports.WEBSOCKET) {
	      streamComputationWebsocket(params, requestId, cb, requestType, isRetryPatchMode);
	    } else {
	      console.error('Unrecognized transport');
	    }
	    return requestId;
	  }

	  function stop(requestId) {
	    if (knownComputations[requestId]) {
	      return knownComputations[requestId].streamController.stop();
	    } else {
	      var requestIndex = -1;
	      pendingWSRequests.some(function (req, idx) {
	        if (req.requestId === requestId) {
	          requestIndex = idx;
	          return true;
	        }
	      });
	      if (requestIndex > -1) {
	        pendingWSRequests.splice(requestIndex, 1);
	        console.log('Removed ' + requestId + ' from authentication queue.');
	      }
	      // if the request wasn't a found in activeRequests, nor pending, then it was likely created
	      // with a stop time in the past and was stopped internally
	      return true;
	    }
	  }

	  function disconnect() {
	    //should we give a brief 1s window for pre-close messages to be sent?
	    setTimeout(function () {
	      activeSocket.close();
	    }, 1000);
	    authToken = null;
	    clearInterval(keepAliveInterval);
	    //destroy all open SSE connections
	  }


	  function registerLiveTail(params, callback, overrideRequestId) {
	    var requestId = overrideRequestId || getRequestIdAndIncrement();
	    knownComputations[requestId] = {
	      onMessage: callback,
	      transport: transports.WEBSOCKET,
	      requestId: requestId,
	      streamController: {
	        retry: function () {
	          registerLiveTail(params, callback, overrideRequestId);
	        },
	        stop: function () {
	          stopLiveTail(requestId);
	        }
	      }
	    };

	    function sendLivetailRegistration() {
	      activeSocket.send(JSON.stringify({
	        type: 'registerlivetail',
	        channel: requestId,
	        query: params.query,
	        throttleOptions: params.throttleOptions
	      }));
	    }

	    if (wsConnectionOpen) {
	      sendLivetailRegistration();
	    } else {
	      pendingWSRequests.push({
	        requestType: 'registerLivetail',
	        callback: sendLivetailRegistration
	      });
	    }

	    return requestId;
	  }

	  function stopLiveTail(requestId) {
	    if (removeComputation(requestId)) {
	      activeSocket.send(JSON.stringify({
	        type: 'stoplivetail',
	        channel: requestId,
	        reason: 'Close live tail connection from FE'
	      }));
	    }
	  }

	  return {
	    authenticate: authenticate,
	    execute: execute,
	    stop: stop,
	    disconnect: disconnect,
	    registerLiveTail: registerLiveTail,
	    stopLiveTail: stopLiveTail
	  };
	}

	var request_manager = RequestManager;

	// Copyright (C) 2016 SignalFx, Inc. All rights reserved.




	function SignalflowClient(apiToken, options) {
	  var rm = new request_manager(options);

	  rm.authenticate(apiToken);

	  function disconnect() {
	    rm.disconnect();
	  }

	  function signalflowRequest(opts, requestType) {
	    var metaDataMap = {};
	    var msgBuffer = [];
	    var callback = null;

	    function resolveMessage(msg) {
	      // we're duck typing error messages here, but it should be okay.
	      if (msg.hasOwnProperty('error') && !msg.type) {
	        errorMessageCallback(msg);
	      } else {
	        callback(null, msg);
	      }
	    }

	    function errorMessageCallback(msg) {
	      callback(msg, null);
	    }

	    function msgCallback(msg) {
	      if (msg.type === 'metadata') {
	        metaDataMap[msg.tsId] = msg;
	      }
	      if (!callback) {
	        msgBuffer.push(msg);
	      } else {
	        resolveMessage(msg);
	      }
	    }

	    var callbacks = {
	      onMessage: msgCallback,
	      onError: errorMessageCallback
	    };

	    var requestId = rm.execute(opts, callbacks, null, requestType);

	    return {
	      close: function () {
	        return rm.stop(requestId);
	      },
	      get_known_tsids: function () {
	        return Object.keys(metaDataMap);
	      },
	      get_metadata: function (tsid) {
	        if (!tsid || !metaDataMap[tsid]) {
	          return null;
	        }
	        return metaDataMap[tsid];
	      },
	      stream: function (fn, errorFn) {
	        if (typeof fn !== 'function') {
	          return false;
	        }
	        callback = fn;
	        msgBuffer.forEach(resolveMessage);
	        msgBuffer = [];
	        return true;
	      }
	    };
	  }
	  /**
	   * This is a method on  SignalflowClient that registers a live tail and exposes the stream and close methos to
	   * get live tail data and to stop a live tail.
	   * @param opts - {
	   *                query: {
	   *                  matcher: {
	   *                    params: {
	   *                      op: string,
	   *                      args: object
	   *                    },
	   *                  }
	   *                },
	   *                throttleOptions: { rate: number }
	   *              }
	   */
	  function liveTailRequest(opts) {
	    var msgBuffer = [];
	    var callback = null;

	    function resolveMessage(msg) {
	      if (!callback) {
	        msgBuffer.push(msg);
	        return;
	      }
	      if (msg.type === 'error') {
	        callback(msg, null);
	      } else {
	        callback(null, msg);
	      }
	    }

	    var requestId = rm.registerLiveTail(opts, resolveMessage, null);

	    return {
	      close: function () {
	        return rm.stopLiveTail(requestId);
	      },
	      stream: function (fn) {
	        if (typeof fn !== 'function') {
	          return false;
	        }
	        callback = fn;
	        msgBuffer.forEach(resolveMessage);
	        msgBuffer = [];
	        return true;
	      }
	    };
	  }
	  return {
	    disconnect: disconnect,
	    execute: function (opts) {
	      return signalflowRequest(opts, 'execute');
	    },
	    explain: function (opts) {
	      return signalflowRequest(opts, 'explain');
	    },
	    preflight: function (opts) {
	      return signalflowRequest(opts, 'preflight');
	    },
	    livetail: liveTailRequest
	  };
	}

	var signalflow_client = SignalflowClient;

	// Copyright (C) 2015 SignalFx, Inc. All rights reserved.

	var constants = {
	  MESSAGE_TYPES: {
	    METADATA: 'metadata',
	    DATA: 'data',
	    EVENT: 'event',
	    CONTROL: 'control-message'
	  }
	};

	// Copyright (C) 2015 SignalFx, Inc. All rights reserved.

	var ProtoBufSignalFx = protobuf_signal_fx_client.ProtoBufSignalFx;
	var JsonSignalFx = json_signal_fx_client.JsonSignalFx;
	var protocolBufferEnabled = proto.protocolBufferEnabled;



	// ============================================================================================
	//                                 Export modules
	// ============================================================================================
	var Ingest = protocolBufferEnabled ? ProtoBufSignalFx : JsonSignalFx;
	var IngestJson = JsonSignalFx;
	var SignalFlow = signalflow_client;
	var CONSTANTS = constants;

	var signalfx = {
		Ingest: Ingest,
		IngestJson: IngestJson,
		SignalFlow: SignalFlow,
		CONSTANTS: CONSTANTS
	};

	const MAX_FIELDNAME_LENGTH = 128;
	const DETAIL_PREFIX = "detail_";

	function isPrimitive(x) {
	  return Object(x) !== x;
	}

	function sanitize(name) {
	  let sanitizedName = name.replace(/[^a-zA-Z0-9\-_]+/gi, '_');
	  if (name.length > MAX_FIELDNAME_LENGTH) {
	    console.warn('Field name ' + name + ' longer than ' + MAX_FIELDNAME_LENGTH + ' will be truncated.');
	    sanitizedName = sanitizedName.substring(0, MAX_FIELDNAME_LENGTH);
	  }
	  return sanitizedName;
	}

	function extractDetailsForSfx$1(cwEvent) {
	  let detailsMap = {};
	  for (let [key, value] of Object.entries(cwEvent.detail)) {
	      detailsMap[sanitize(DETAIL_PREFIX + key)] = isPrimitive(value) ? value : JSON.stringify(value);
	  }
	  return detailsMap;
	}


	var signalfxTransformHelper = {
	  extractDetailsForSfx: extractDetailsForSfx$1
	};

	var name = "signalfx-lambda";
	var version = "1.0.0-beta.3";
	var description = "Node.js lambda wrapper for SignalFx";
	var homepage = "https://signalfx.com";
	var author = {
		name: "SignalFx, Inc",
		email: "info@signalfx.com",
		url: "https://signalfx.com"
	};
	var license = "Apache-2.0";
	var main = "dist/index.umd.js";
	var module = "dist/index.esm.js";
	var files = [
		"dist"
	];
	var dependencies = {
		signalfx: "^7.2.2",
		"signalfx-tracing": "0.10.0"
	};
	var devDependencies = {
		"@rollup/plugin-commonjs": "^17.1.0",
		"@rollup/plugin-json": "^4.1.0",
		"@rollup/plugin-node-resolve": "^11.2.0",
		chai: "^4.2.0",
		express: "^4.17.1",
		"get-port": "^5.1.1",
		"int64-buffer": "^1.0.0",
		jasmine: "^3.6.3",
		"jasmine-terminal-reporter": "^1.0.3",
		"mock-require": "^3.0.3",
		rollup: "^2.40.0",
		"rollup-plugin-filesize": "^9.1.0",
		"rollup-plugin-local-resolve": "^1.0.7",
		sinon: "^9.2.1"
	};
	var repository = {
		type: "git",
		url: "https://github.com/signalfx/lambda-nodejs"
	};
	var scripts = {
		test: "node node_modules/jasmine/bin/jasmine.js --config=spec/config/jasmine.json",
		build: "npx rollup --config"
	};
	var packageFile = {
		name: name,
		version: version,
		description: description,
		homepage: homepage,
		author: author,
		license: license,
		main: main,
		module: module,
		files: files,
		dependencies: dependencies,
		devDependencies: devDependencies,
		repository: repository,
		scripts: scripts
	};

	const extractDetailsForSfx = signalfxTransformHelper
	  .extractDetailsForSfx;



	let ACCESS_TOKEN = process.env.SIGNALFX_ACCESS_TOKEN;
	if (!ACCESS_TOKEN && process.env.SIGNALFX_AUTH_TOKEN) {
	  console.log('SIGNALFX_AUTH_TOKEN is deprecated. Please use SIGNALFX_ACCESS_TOKEN instead');
	  ACCESS_TOKEN = process.env.SIGNALFX_AUTH_TOKEN;
	}

	let METRICS_INGEST_ENDPOINT = process.env.SIGNALFX_METRICS_URL || process.env.SIGNALFX_ENDPOINT_URL;
	if (!METRICS_INGEST_ENDPOINT && process.env.SIGNALFX_INGEST_ENDPOINT) {
	  console.log('SIGNALFX_INGEST_ENDPOINT is deprecated. Please use SIGNALFX_ENDPOINT_URL instead');
	  METRICS_INGEST_ENDPOINT = process.env.SIGNALFX_INGEST_ENDPOINT;
	}

	const TIMEOUT_MS = process.env.SIGNALFX_SEND_TIMEOUT;

	const CLOUDWATCH_EVENT_TYPE = "CloudWatch";

	const CLIENT_OPTIONS = {};
	if (METRICS_INGEST_ENDPOINT) {
	  CLIENT_OPTIONS.ingestEndpoint = METRICS_INGEST_ENDPOINT;
	} else {
	  CLIENT_OPTIONS.ingestEndpoint = "https://pops.signalfx.com";
	}

	const timeoutMs = Number(TIMEOUT_MS);
	if (!isNaN(timeoutMs)) {
	  CLIENT_OPTIONS.timeout = timeoutMs;
	} else {
	  CLIENT_OPTIONS.timeout = 300;
	}

	let defaultDimensions;
	let sendPromises = [];

	const metricSender = new signalfx.IngestJson(ACCESS_TOKEN, CLIENT_OPTIONS);

	function handleSend(sendPromise) {
	  sendPromises.push(sendPromise);
	  return sendPromise.catch((err) => {
	    if (err) {
	      console.error("Could not send data to SignalFx!", err);
	    }
	  });
	}

	function clearSendPromises() {
	  sendPromises = [];
	}

	function sendMetric(metricName, metricType, metricValue, dimensions = {}) {
	  var dp = {
	    metric: metricName,
	    value: metricValue,
	    dimensions: Object.assign({}, dimensions, defaultDimensions),
	  };
	  var datapoints = {};
	  datapoints[metricType] = [dp];

	  return handleSend(metricSender.send(datapoints));
	}

	function sendCustomizedEvent(eventType, dimensions, properties, timestamp) {
	  let event = {
	    category: "USER_DEFINED",
	    eventType,
	    dimensions,
	    properties,
	  };

	  if (timestamp) {
	    event = Object.assign(event, { timestamp });
	  }

	  return handleSend(metricSender.sendEvent(event));
	}

	function toUnixTime(dateString) {
	  return new Date(dateString).getTime();
	}

	function sendCWEvent(cwEvent) {
	  let detailsMap;

	  try {
	    detailsMap = extractDetailsForSfx(cwEvent);
	  } catch (err) {
	    console.error(
	      "Unable to convert details. They wont be included in the event.",
	      err
	    );
	  }

	  let sfxEvent = {
	    category: "USER_DEFINED",
	    eventType: CLOUDWATCH_EVENT_TYPE,
	    dimensions: {
	      region: cwEvent.region,
	      account: cwEvent.account,
	      detailType: cwEvent["detail-type"],
	      source: cwEvent.source,
	    },
	    properties: Object.assign(
	      { id: cwEvent.id, version: cwEvent.version },
	      detailsMap,
	      { resources: JSON.stringify(cwEvent.resources) }
	    ),
	    timestamp: toUnixTime(cwEvent.time),
	  };

	  return handleSend(metricSender.sendEvent(sfxEvent));
	}

	var signalfxHelper = {
	  setDefaultDimensions: function (dimensions, meta) {
	    defaultDimensions = Object.assign({}, dimensions, meta);
	    defaultDimensions.metric_source = "lambda_wrapper";
	  },

	  getExecutionMetadata: function (context) {
	    const meta = {};
	    if (!context) {
	      return meta;
	    }

	    const splitted = context.invokedFunctionArn.split(":");
	    if (splitted[2] === "lambda") {
	      meta.aws_function_name = context.functionName;
	      meta.aws_function_version = context.functionVersion;

	      meta.aws_region = splitted[3];
	      meta.aws_account_id = splitted[4];

	      if (splitted[5] === "function") {
	        meta.aws_function_qualifier = splitted[7];
	        const updatedArn = splitted.slice();
	        updatedArn[7] = context.functionVersion;
	        meta.lambda_arn = updatedArn.join(":");
	      } else if (splitted[5] === "event-source-mappings") {
	        meta.event_source_mappings = splitted[6];
	        meta.lambda_arn = context.invokedFunctionArn;
	      }
	    }

	    if (process.env.AWS_EXECUTION_ENV) {
	      meta.aws_execution_env = process.env.AWS_EXECUTION_ENV;
	    }
	    meta.function_wrapper_version =
	      packageFile.name + "-" + packageFile.version;
	    return meta;
	  },

	  sendGauge: function addGauge(metricName, metricValue, dimensions) {
	    return sendMetric(metricName, "gauges", metricValue, dimensions);
	  },

	  sendCounter: function addCounter(metricName, metricValue, dimensions) {
	    return sendMetric(metricName, "counters", metricValue, dimensions);
	  },

	  sendCustomEvent: function sendCustomEvent(
	    type,
	    dimensions,
	    properties,
	    timestamp
	  ) {
	    return sendCustomizedEvent(type, dimensions, properties, timestamp);
	  },

	  sendCloudWatchEvent: function sendCloudWatchEvent(cwevent) {
	    return sendCWEvent(cwevent);
	  },

	  waitForAllSends: function waitForAllSends() {
	    return Promise.all(sendPromises).then(clearSendPromises, clearSendPromises);
	  },

	  isMetricsDisabled: function (disabled) {
	    if (disabled) {
	      return true;
	    }
	    return (
	      (process.env.SIGNALFX_METRICS_ENABLED || "true").toLowerCase() === "false"
	    );
	  },

	  isTracingDisabled: function (disabled) {
	    if (disabled) {
	      return true;
	    }
	    return (
	      (process.env.SIGNALFX_TRACING_ENABLED || "true").toLowerCase() === "false"
	    );
	  },
	};

	const _defaultEndpointPath = '/v1/trace';

	// must init tracer here before other libraries are imported in order to apply
	// auto-instrumentation patches.
	let _tracer;

	if ((process.env.SIGNALFX_TRACING_ENABLED || "true").toLowerCase() == "false") {
	  _tracer = new tracer$2();
	} else {
	  const options = {
	    service:
	      process.env.SIGNALFX_SERVICE_NAME || process.env.AWS_LAMBDA_FUNCTION_NAME,
	  };
	  if (process.env.SIGNALFX_ENDPOINT_URL) {
	    const parsed = url__default['default'].parse(process.env.SIGNALFX_ENDPOINT_URL); 
	    if (parsed.pathname === "/") {
	      parsed.pathname = _defaultEndpointPath;
	    }
	    options.url = url__default['default'].format(parsed);
	  }
	  _tracer = signalfxTracing.init(options);
	}

	lib.initGlobalTracer(_tracer);

	var tracing_1 = {
	  init: function(disabled) {
	    if (!disabled && !process.env.SIGNALFX_ENDPOINT_URL) {
	      console.warn('Tracing is not disabled but SIGNALFX_ENDPOINT_URL is not specified either');
	    }
	  },

	  tracer: function (tracingDisabled) {
	    return tracingDisabled ? new tracer$2() : _tracer;
	  },

	  flush: function () {
	    return _tracer.flush();
	  },

	  startSpan: function (tracer, event, meta) {
	    const opName = "lambda_node_" + meta.aws_function_name;
	    let childOf = tracer.extract(
	      lib.FORMAT_HTTP_HEADERS,
	      event.headers || {}
	    );

	    var span;
	    if (childOf) {
	      span = tracer.startSpan(opName, { childOf });
	    } else {
	      span = tracer.startSpan(opName);
	    }

	    Object.entries(meta).forEach((pair) => {
	      if (pair[1]) {
	        span.setTag(pair[0], pair[1]);
	      }
	    });
	    span.setTag("span.kind", "server");
	    span.setTag("component", "node-lambda-wrapper");
	    return span;
	  },

	  inject: function inject(carrier) {
	    const activeSpan = _tracer.scope().active();
	    if (!activeSpan) {
	      console.warn('There are no active spans to inject.');
	      return;
	    }

	    _tracer.inject(activeSpan, formats.HTTP_HEADERS, carrier);
	  },
	};

	var noopMetricHelpers = {
	  sendGauge: function addGauge() {
	    return Promise.resolve();
	  },

	  sendCounter: function addCounter() {
	    return Promise.resolve();
	  },

	  waitForAllSends: function waitForAllSends() {
	    return Promise.resolve();
	  },
	};

	let coldStart$1 = true;

	class SignalFxWrapper$1 {
	  constructor(
	    originalObj,
	    originalFn,
	    originalEvent,
	    originalContext,
	    originalCallback,
	    dimensions,
	    disableTracing,
	    disableMetrics
	  ) {
	    this.originalObj = originalObj;
	    this.originalFn = originalFn;
	    this.originalEvent = originalEvent;
	    this.originalContext = originalContext;
	    this.originalCallback = originalCallback;
	    this.disableMetrics = signalfxHelper.isMetricsDisabled(disableMetrics);
	    this.disableTracing = signalfxHelper.isTracingDisabled(disableTracing);

	    tracing_1.init(this.disableTracing);
	    this.metricSender = signalfxHelper;
	    if (this.disableMetrics) {
	      this.metricSender = noopMetricHelpers;
	    }

	    this.execMeta = signalfxHelper.getExecutionMetadata(this.originalContext);
	    signalfxHelper.setDefaultDimensions(dimensions, this.execMeta);

	    this.metricSender.sendCounter("function.invocations", 1);
	    if (coldStart$1) {
	      this.metricSender.sendCounter("function.cold_starts", 1);
	      coldStart$1 = false;
	    }
	    return this;
	  }

	  async invoke() {
	    const tracer = tracing_1.tracer(this.disableTracing);
	    const span = tracing_1.startSpan(tracer, this.originalEvent, this.execMeta);

	    const startTime = new Date().getTime();
	    let sent;
	    const flush = async () => {
	      if (sent) {
	        return;
	      }

	      this.metricSender.sendGauge(
	        "function.duration",
	        new Date().getTime() - startTime
	      );
	      sent = true;

	      await Promise.all([tracing_1.flush(), signalfxHelper.waitForAllSends()]);
	    };

	    const callbackWrapper = (err, result) => {
	      flush().then(() => {
	        this.originalCallback(err, result);
	      });
	    };

	    return tracer.scope().activate(span, async () => {
	      try {
	        return await this.originalFn.call(
	          this.originalObj,
	          this.originalEvent,
	          this.originalContext,
	          callbackWrapper
	        );
	      } catch (err) {
	        this.metricSender.sendCounter("function.errors", 1);
	        span.addTags({
	          "sfx.error.kind": err.name,
	          "sfx.error.message": err.message,
	          "sfx.error.stack": err.stack,
	        });
	        throw err;
	      } finally {
	        span.finish();
	        await flush();
	      }
	    });
	  }
	}

	var signalfxAsyncWrapper = (originalFn, dimensions, disableTracing, disableMetrics) => {
	  return async function (originalEvent, originalContext, originalCallback) {
	    const self = this;

	    const signalFxWrapper = new SignalFxWrapper$1(
	      self,
	      originalFn,
	      originalEvent,
	      originalContext,
	      originalCallback,
	      dimensions,
	      disableTracing,
	      disableMetrics
	    );

	    const result = await signalFxWrapper.invoke();
	    return result;
	  };
	};

	var coldStart = true;

	class SignalFxWrapper {
	  constructor(
	    originalObj,
	    originalFn,
	    originalEvent,
	    originalContext,
	    originalCallback,
	    dimensions,
	    disableTracing,
	    disableMetrics
	  ) {
	    this.originalObj = originalObj;
	    this.originalFn = originalFn;
	    this.originalEvent = originalEvent;
	    this.originalContext = originalContext;
	    this.originalCallback = originalCallback;
	    this.disableMetrics = signalfxHelper.isMetricsDisabled(disableMetrics);
	    this.disableTracing = signalfxHelper.isTracingDisabled(disableTracing);

	    tracing_1.init(this.disableTracing);
	    this.metricSender = signalfxHelper;
	    if (this.disableMetrics) {
	      this.metricSender = noopMetricHelpers;
	    }

	    this.execMeta = signalfxHelper.getExecutionMetadata(this.originalContext);
	    signalfxHelper.setDefaultDimensions(dimensions, this.execMeta);

	    this.metricSender.sendCounter("function.invocations", 1);
	    if (coldStart) {
	      this.metricSender.sendCounter("function.cold_starts", 1);
	      coldStart = false;
	    }

	    return this;
	  }

	  invoke() {
	    var exception, error, message, callbackProcessed;

	    const tracer = tracing_1.tracer(this.disableTracing);
	    const span = tracing_1.startSpan(tracer, this.originalEvent, this.execMeta);

	    const startTime = new Date().getTime();

	    const processCallback = () => {
	      if (callbackProcessed) {
	        return;
	      }
	      callbackProcessed = true;
	      this.metricSender.sendGauge(
	        "function.duration",
	        new Date().getTime() - startTime
	      );

	      const err = exception || error;
	      if (err) {
	        span.addTags({
	          "sfx.error.kind": err.name,
	          "sfx.error.message": err.message,
	          "sfx.error.stack": err.stack,
	        });
	      }

	      const runCallback = () => {
	        if (exception) {
	          this.originalCallback(exception, "Exception was thrown");
	        }
	        this.originalCallback(error, message);
	      };

	      span.finish();

	      Promise.all([tracing_1.flush(), signalfxHelper.waitForAllSends()]).then(
	        runCallback,
	        runCallback
	      );
	    };

	    const customCallback = (err, msg) => {
	      error = err;
	      message = msg;
	      processCallback();
	    };

	    tracer.scope().activate(span, () => {
	      try {
	        this.originalFn.call(
	          this.originalObj,
	          this.originalEvent,
	          this.originalContext,
	          customCallback
	        );
	      } catch (err) {
	        this.metricSender.sendCounter('function.errors', 1);
	        exception = err;
	        processCallback();
	      }
	    });
	  }
	}

	var signalfxWrapper = (originalFn, dimensions, disableTracing, disableMetrics) => {
	  return function customHandler(
	    originalEvent,
	    originalContext,
	    originalCallback
	  ) {
	    var originalObj = this;
	    return new SignalFxWrapper(
	      originalObj,
	      originalFn,
	      originalEvent,
	      originalContext,
	      originalCallback,
	      dimensions,
	      disableTracing,
	      disableMetrics
	    ).invoke();
	  };
	};

	var signalfxLambda = {
	  wrapper: signalfxWrapper,
	  wrapperTracing: (originalFn, dimensions) => {
	    return signalfxWrapper(originalFn, dimensions, false, true);
	  },
	  wrapperMetrics: (originalFn, dimensions) => {
	    return signalfxWrapper(originalFn, dimensions, true, false);
	  },
	  asyncWrapper: signalfxAsyncWrapper,
	  asyncWrapperTracing: (originalFn, dimensions) => {
	    return signalfxAsyncWrapper(originalFn, dimensions, false, true);
	  },
	  asyncWrapperMetrics: (originalFn, dimensions) => {
	    return signalfxAsyncWrapper(originalFn, dimensions, true, false);
	  },
	  helper: signalfxHelper,
	};

	return signalfxLambda;

})));
